#!/usr/bin/env python3
import os
import subprocess
import re
import sys

subdir = sys.argv[1] if len(sys.argv) >= 2 else ''
cur_srcdir = os.path.join(os.environ['pcvs_src'], subdir)
cur_bldir = os.path.join(os.environ['pcvs_testbuild'], subdir)

def process_file(filename):
    try:
        srcfile = os.path.join(cur_srcdir, filename)
        bldfile = os.path.join(cur_bldir, filename)
        if os.path.isfile(srcfile) and os.path.getsize(srcfile) > 0:
            filepath = os.path.join(cur_srcdir, filename)
        elif os.path.isfile(bldfile) and os.path.gesize(bldfile) > 0:
            filepath = os.path.join(cur_bldir, filename)
        else:
            return

        prefix = filepath.replace(os.path.join(cur_bldir, 'build'), '')\
                         .replace(cur_srcdir, '')\
                         .replace('testlist', '')

        with open(filepath, 'r') as th:
            for line in th:
                line = line.strip()
                if line.startswith('#') or len(line) == 0:
                    continue
                program = line.split()[0]
                args = line.split()[1:]
                if len(args) > 0:
                    print("""
{escaped_prefix}{program}_np{mpi}:
    group: 'GRPMPI'
    build:
        depends_on: ['build_util', 'build_dtpools']
        files: '@BUILDPATH@/build/{prefix}/Makefile'
        make:
            target: '{program}'
    run:
        program: 'build/{prefix}/{program}'
        iterate: 
            n_mpi:
                values: [ {mpi} ]
                """.format(program=program,
                           prefix=prefix,
                           escaped_prefix=prefix.replace("/", "_"),
                           mpi=args[0]))
                elif (os.path.isdir(os.path.join(cur_srcdir, prefix, program))):
                    process_file(os.path.join(cur_srcdir, prefix, program, 'testlist'))
                else:
                    raise IOError

    except FileNotFoundError:
        pass


if __name__ == '__main__':
    try:
        cmd = 'cp -r {}/* {}'.format(cur_srcdir, cur_bldir) + \
            '&& mkdir -p {} '.format(os.path.join(cur_bldir, 'build')) + \
            '&& cd {} '.format(os.path.join(cur_bldir, 'build')) + \
            '&& {} '.format(os.path.join(cur_srcdir, 'configure')) + \
              '--disable-maintainer_mode --enable-strictmpi ' + \
              '--enable-threads=multiple --enable-fortran=yes ' \
              'CC="{}" '.format(os.environ["pcvs_compiler_cc_program"]) + \
              'CXX="{}" '.format(os.environ["pcvs_compiler_cxx_program"]) + \
              'F77="{}" '.format(os.environ["pcvs_compiler_f77_program"]) + \
              'FC="{} "'.format(os.environ["pcvs_compiler_f90_program"])
        subprocess.check_output(cmd, shell=True)

        print("""
build_util:
    build:
        files: '@BUILDPATH@/build/util/Makefile'
        make:
            target: '-ik'
build_dtpools:
    build:
        files: '@BUILDPATH@/build/dtpools/Makefile'
        make:
            target: '-ik'
        """)

        with open(os.path.join(cur_bldir, "build/testlist"), 'r') as fh:
            for line in fh:
                line = line.strip()
                if line.startswith('#'):
                    continue
                process_file(os.path.join(line, 'testlist'))
    except FileNotFoundError as e:
        print("{} not found".format(e), file=sys.stderr)
        exit(1)
    except subprocess.CalledProcessError as e:
        print("Command failed: {}:\n{}".format(e.cmd, e.stderr), file=sys.stderr)
        exit(2)
exit(0)
