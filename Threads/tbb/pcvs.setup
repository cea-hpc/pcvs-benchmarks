#!/usr/bin/perl
my ($prefix) = @ARGV;
my $pcvs_src_current="$ENV{pcvs_src}/$prefix";
my $pcvs_build_current="$ENV{pcvs_testbuild}/$prefix";

`cp -r $pcvs_src_current/* $pcvs_build_current`;

#build a fake test to be sure libtbb_debug is available (needed to compile test)
print STDOUT "dummy_test:\n";
print STDOUT "  build:\n";
print STDOUT "    files: '\@BUILDPATH\@/dummy_test.cpp'\n";
print STDOUT "    cflags: '-ltbb_debug'\n"; # we need debug lib 
print STDOUT "  run: {'cwd': '.'}\n";
print STDOUT "  group: 'GRPSERIAL'\n";

#actually build the tests
print STDOUT "build_testsuite:\n";
print STDOUT "  build:\n";
print STDOUT "    depends_on: {'test':  [ 'dummy_test' ]}\n";
print STDOUT "    make: {'target': 'test compiler=pcvs run_cmd=\"echo building ||\"'}\n";
print STDOUT "    files: '\@BUILDPATH\@/Makefile'\n";

#this command generates a lot of 'make' errors, but we don't care, we just want the list of tests to run
`make -C $pcvs_build_current test compiler=pcvs run_cmd="$pcvs_build_current/pcvs.wrapper \@PCVS_RUN\@" 2> /dev/null`;
exit 1 if (($? >> 8) != 0);

#pre-compute binary prefix (un-guessable...)
my $bdir = `make -C $pcvs_build_current compiler=pcvs info | grep "tbb_build_prefix" | cut -f2 -d'='`; 
exit 1 if (($? >> 8) != 0);

chomp $bdir;

#look for tests to generate
open(my $fh, "<", "$pcvs_build_current/pcvs.testlist") or exit 1;
while(<$fh>)
{
	chomp;
	my @line=split(/ +/, $_);
	
	die("Error w/ parsing") if($line[0] ne "\@PCVS_RUN\@");
	my $bin = $line[1];
	(my $name = $bin) =~ s,^./|\.exe$,,g;

	print STDOUT "$name:\n";
	print STDOUT "  run:\n";
	print STDOUT "    depends_on: {'test':  [ 'build_testsuite' ]}\n";
	print STDOUT "    program: 'build/${bdir}_debug/$bin'\n";
	print STDOUT "    iterate:\n";
	print STDOUT "      n_proc: {'values':  null}\n";
	print STDOUT "      net: {'values': null}\n";
	print STDOUT "      n_mpi: {'values': [{'seq': {'to': 4}}]}\n";
	if(@line > 2){
		print STDOUT "      program: {'args': {'values': '".join(" ", @line[2..$#line])."'}}\n";
	}
	print STDOUT "\n";
}

exit 0;
