test_Wparentheses-1_1:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/Wparentheses-1.c'
    sources: {binary: Wparentheses-1.s, cflags: "-fopenacc -Wparentheses\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L157: {expect: true, expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-1_193:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/Wparentheses-1.c'
    sources: {binary: Wparentheses-1.s, cflags: "-std=c++98 -fopenacc -Wparentheses\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L157: {expect: true, expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-1_194:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/Wparentheses-1.c'
    sources: {binary: Wparentheses-1.s, cflags: "-std=c++11 -fopenacc -Wparentheses\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L157: {expect: true, expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-1_195:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/Wparentheses-1.c'
    sources: {binary: Wparentheses-1.s, cflags: "-std=c++14 -fopenacc -Wparentheses\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L157: {expect: true, expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-1_460:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/Wparentheses-1.c'
    sources: {binary: Wparentheses-1.s, cflags: "-fopenacc -Wparentheses\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L157: {expect: true, expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-1_556:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/Wparentheses-1.c'
    sources: {binary: Wparentheses-1.s, cflags: "-std=c++98 -fopenacc -Wparentheses\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L157: {expect: true, expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-1_557:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/Wparentheses-1.c'
    sources: {binary: Wparentheses-1.s, cflags: "-std=c++11 -fopenacc -Wparentheses\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L157: {expect: true, expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-1_558:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/Wparentheses-1.c'
    sources: {binary: Wparentheses-1.s, cflags: "-std=c++14 -fopenacc -Wparentheses\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L157: {expect: true, expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-1_97:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/Wparentheses-1.c'
    sources: {binary: Wparentheses-1.s, cflags: "-fopenacc -Wparentheses\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L157: {expect: true, expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_acc-icf_196:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/acc-icf.c'
    sources: {binary: acc-icf.s, cflags: "-std=c++98 -fopenacc -fopenacc -O2 -fdump-ipa-icf\n
        -S"}
  group: GRPSERIAL
test_acc-icf_197:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/acc-icf.c'
    sources: {binary: acc-icf.s, cflags: "-std=c++11 -fopenacc -fopenacc -O2 -fdump-ipa-icf\n
        -S"}
  group: GRPSERIAL
test_acc-icf_198:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/acc-icf.c'
    sources: {binary: acc-icf.s, cflags: "-std=c++14 -fopenacc -fopenacc -O2 -fdump-ipa-icf\n
        -S"}
  group: GRPSERIAL
test_acc-icf_2:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/acc-icf.c'
    sources: {binary: acc-icf.s, cflags: "-fopenacc -fopenacc -O2 -fdump-ipa-icf\n
        -S"}
  group: GRPSERIAL
test_acc-icf_461:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/acc-icf.c'
    sources: {binary: acc-icf.s, cflags: "-fopenacc -fopenacc -O2 -fdump-ipa-icf\n
        -S"}
  group: GRPSERIAL
test_acc-icf_559:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/acc-icf.c'
    sources: {binary: acc-icf.s, cflags: "-std=c++98 -fopenacc -fopenacc -O2 -fdump-ipa-icf\n
        -S"}
  group: GRPSERIAL
test_acc-icf_560:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/acc-icf.c'
    sources: {binary: acc-icf.s, cflags: "-std=c++11 -fopenacc -fopenacc -O2 -fdump-ipa-icf\n
        -S"}
  group: GRPSERIAL
test_acc-icf_561:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/acc-icf.c'
    sources: {binary: acc-icf.s, cflags: "-std=c++14 -fopenacc -fopenacc -O2 -fdump-ipa-icf\n
        -S"}
  group: GRPSERIAL
test_acc-icf_98:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/acc-icf.c'
    sources: {binary: acc-icf.s, cflags: "-fopenacc -fopenacc -O2 -fdump-ipa-icf\n
        -S"}
  group: GRPSERIAL
test_asyncwait-1_199:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/asyncwait-1.c'
    sources: {binary: asyncwait-1.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L100: {expect: true, expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L106: {expect: true, expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L112: {expect: true, expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before end of line")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before \''\\\\\\)\''")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L125: {expect: true, expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L131: {expect: true, expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be integral")[^\n]*\n?)+'}
      L137: {expect: true, expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be integral")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+:143:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be integral")[^\n]*\n?)+'}
      L149: {expect: true, expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (integer |)expression (list |)before")[^\n]*\n?)+'}
      L161: {expect: true, expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L167: {expect: true, expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L169: {expect: true, expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L171: {expect: true, expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before end of line")[^\n]*\n?)+'}
      L174: {expect: true, expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before \''\\\\\\)\''")[^\n]*\n?)+'}
      L176: {expect: true, expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L180: {expect: true, expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before numeric constant")[^\n]*\n?)+'}
      L186: {expect: true, expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''N\''")[^\n]*\n?)+'}
      L188: {expect: true, expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L190: {expect: true, expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L192: {expect: true, expr: '(^|\n)([^\n]+:192:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L194: {expect: true, expr: '(^|\n)([^\n]+:194:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L196: {expect: true, expr: '(^|\n)([^\n]+:196:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L202: {expect: true, expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before end of line")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before ")[^\n]*\n?)+'}
      L207: {expect: true, expr: '(^|\n)([^\n]+:207:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before")[^\n]*\n?)+'}
      L208: {expect: true, expr: '(^|\n)([^\n]+:208:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L211: {expect: true, expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before")[^\n]*\n?)+'}
      L212: {expect: true, expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before end of line")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''async\''
          expression must be integral")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''async\''
          expression must be integral")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L88: {expect: true, expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
test_asyncwait-1_200:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/asyncwait-1.c'
    sources: {binary: asyncwait-1.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L100: {expect: true, expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L106: {expect: true, expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L112: {expect: true, expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before end of line")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before \''\\\\\\)\''")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L125: {expect: true, expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L131: {expect: true, expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be integral")[^\n]*\n?)+'}
      L137: {expect: true, expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be integral")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+:143:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be integral")[^\n]*\n?)+'}
      L149: {expect: true, expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (integer |)expression (list |)before")[^\n]*\n?)+'}
      L161: {expect: true, expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L167: {expect: true, expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L169: {expect: true, expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L171: {expect: true, expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before end of line")[^\n]*\n?)+'}
      L174: {expect: true, expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before \''\\\\\\)\''")[^\n]*\n?)+'}
      L176: {expect: true, expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L180: {expect: true, expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before numeric constant")[^\n]*\n?)+'}
      L186: {expect: true, expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''N\''")[^\n]*\n?)+'}
      L188: {expect: true, expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L190: {expect: true, expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L192: {expect: true, expr: '(^|\n)([^\n]+:192:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L194: {expect: true, expr: '(^|\n)([^\n]+:194:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L196: {expect: true, expr: '(^|\n)([^\n]+:196:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L202: {expect: true, expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before end of line")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before ")[^\n]*\n?)+'}
      L207: {expect: true, expr: '(^|\n)([^\n]+:207:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before")[^\n]*\n?)+'}
      L208: {expect: true, expr: '(^|\n)([^\n]+:208:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L211: {expect: true, expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before")[^\n]*\n?)+'}
      L212: {expect: true, expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before end of line")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''async\''
          expression must be integral")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''async\''
          expression must be integral")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L88: {expect: true, expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
test_asyncwait-1_201:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/asyncwait-1.c'
    sources: {binary: asyncwait-1.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L100: {expect: true, expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L106: {expect: true, expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L112: {expect: true, expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before end of line")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before \''\\\\\\)\''")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L125: {expect: true, expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L131: {expect: true, expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be integral")[^\n]*\n?)+'}
      L137: {expect: true, expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be integral")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+:143:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be integral")[^\n]*\n?)+'}
      L149: {expect: true, expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (integer |)expression (list |)before")[^\n]*\n?)+'}
      L161: {expect: true, expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L167: {expect: true, expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L169: {expect: true, expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L171: {expect: true, expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before end of line")[^\n]*\n?)+'}
      L174: {expect: true, expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before \''\\\\\\)\''")[^\n]*\n?)+'}
      L176: {expect: true, expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L180: {expect: true, expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before numeric constant")[^\n]*\n?)+'}
      L186: {expect: true, expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''N\''")[^\n]*\n?)+'}
      L188: {expect: true, expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L190: {expect: true, expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L192: {expect: true, expr: '(^|\n)([^\n]+:192:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L194: {expect: true, expr: '(^|\n)([^\n]+:194:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L196: {expect: true, expr: '(^|\n)([^\n]+:196:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L202: {expect: true, expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before end of line")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before ")[^\n]*\n?)+'}
      L207: {expect: true, expr: '(^|\n)([^\n]+:207:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before")[^\n]*\n?)+'}
      L208: {expect: true, expr: '(^|\n)([^\n]+:208:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L211: {expect: true, expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before")[^\n]*\n?)+'}
      L212: {expect: true, expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before end of line")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''async\''
          expression must be integral")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''async\''
          expression must be integral")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L88: {expect: true, expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
test_asyncwait-1_3:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/asyncwait-1.c'
    sources: {binary: asyncwait-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L100: {expect: true, expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L106: {expect: true, expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L112: {expect: true, expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before end of line")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before \''\\\\\\)\''")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L125: {expect: true, expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L131: {expect: true, expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be integral")[^\n]*\n?)+'}
      L137: {expect: true, expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be integral")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+:143:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be integral")[^\n]*\n?)+'}
      L149: {expect: true, expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (integer |)expression (list |)before")[^\n]*\n?)+'}
      L161: {expect: true, expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L167: {expect: true, expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L169: {expect: true, expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L171: {expect: true, expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before end of line")[^\n]*\n?)+'}
      L174: {expect: true, expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before \''\\\\\\)\''")[^\n]*\n?)+'}
      L176: {expect: true, expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L180: {expect: true, expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before numeric constant")[^\n]*\n?)+'}
      L186: {expect: true, expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''N\''")[^\n]*\n?)+'}
      L188: {expect: true, expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L190: {expect: true, expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L192: {expect: true, expr: '(^|\n)([^\n]+:192:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L194: {expect: true, expr: '(^|\n)([^\n]+:194:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L196: {expect: true, expr: '(^|\n)([^\n]+:196:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L202: {expect: true, expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before end of line")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before ")[^\n]*\n?)+'}
      L207: {expect: true, expr: '(^|\n)([^\n]+:207:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before")[^\n]*\n?)+'}
      L208: {expect: true, expr: '(^|\n)([^\n]+:208:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L211: {expect: true, expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before")[^\n]*\n?)+'}
      L212: {expect: true, expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before end of line")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''async\''
          expression must be integral")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''async\''
          expression must be integral")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L88: {expect: true, expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
test_asyncwait-1_462:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/asyncwait-1.c'
    sources: {binary: asyncwait-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L100: {expect: true, expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L106: {expect: true, expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L112: {expect: true, expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before end of line")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before \''\\\\\\)\''")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L125: {expect: true, expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L131: {expect: true, expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be integral")[^\n]*\n?)+'}
      L137: {expect: true, expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be integral")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+:143:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be integral")[^\n]*\n?)+'}
      L149: {expect: true, expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (integer |)expression (list |)before")[^\n]*\n?)+'}
      L161: {expect: true, expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L167: {expect: true, expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L169: {expect: true, expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L171: {expect: true, expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before end of line")[^\n]*\n?)+'}
      L174: {expect: true, expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before \''\\\\\\)\''")[^\n]*\n?)+'}
      L176: {expect: true, expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L180: {expect: true, expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before numeric constant")[^\n]*\n?)+'}
      L186: {expect: true, expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''N\''")[^\n]*\n?)+'}
      L188: {expect: true, expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L190: {expect: true, expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L192: {expect: true, expr: '(^|\n)([^\n]+:192:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L194: {expect: true, expr: '(^|\n)([^\n]+:194:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L196: {expect: true, expr: '(^|\n)([^\n]+:196:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L202: {expect: true, expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before end of line")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before ")[^\n]*\n?)+'}
      L207: {expect: true, expr: '(^|\n)([^\n]+:207:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before")[^\n]*\n?)+'}
      L208: {expect: true, expr: '(^|\n)([^\n]+:208:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L211: {expect: true, expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before")[^\n]*\n?)+'}
      L212: {expect: true, expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before end of line")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''async\''
          expression must be integral")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''async\''
          expression must be integral")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L88: {expect: true, expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
test_asyncwait-1_562:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/asyncwait-1.c'
    sources: {binary: asyncwait-1.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L100: {expect: true, expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L106: {expect: true, expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L112: {expect: true, expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before end of line")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before \''\\\\\\)\''")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L125: {expect: true, expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L131: {expect: true, expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be integral")[^\n]*\n?)+'}
      L137: {expect: true, expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be integral")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+:143:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be integral")[^\n]*\n?)+'}
      L149: {expect: true, expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (integer |)expression (list |)before")[^\n]*\n?)+'}
      L161: {expect: true, expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L167: {expect: true, expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L169: {expect: true, expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L171: {expect: true, expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before end of line")[^\n]*\n?)+'}
      L174: {expect: true, expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before \''\\\\\\)\''")[^\n]*\n?)+'}
      L176: {expect: true, expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L180: {expect: true, expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before numeric constant")[^\n]*\n?)+'}
      L186: {expect: true, expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''N\''")[^\n]*\n?)+'}
      L188: {expect: true, expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L190: {expect: true, expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L192: {expect: true, expr: '(^|\n)([^\n]+:192:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L194: {expect: true, expr: '(^|\n)([^\n]+:194:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L196: {expect: true, expr: '(^|\n)([^\n]+:196:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L202: {expect: true, expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before end of line")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before ")[^\n]*\n?)+'}
      L207: {expect: true, expr: '(^|\n)([^\n]+:207:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before")[^\n]*\n?)+'}
      L208: {expect: true, expr: '(^|\n)([^\n]+:208:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L211: {expect: true, expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before")[^\n]*\n?)+'}
      L212: {expect: true, expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before end of line")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''async\''
          expression must be integral")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''async\''
          expression must be integral")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L88: {expect: true, expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
test_asyncwait-1_563:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/asyncwait-1.c'
    sources: {binary: asyncwait-1.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L100: {expect: true, expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L106: {expect: true, expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L112: {expect: true, expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before end of line")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before \''\\\\\\)\''")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L125: {expect: true, expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L131: {expect: true, expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be integral")[^\n]*\n?)+'}
      L137: {expect: true, expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be integral")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+:143:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be integral")[^\n]*\n?)+'}
      L149: {expect: true, expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (integer |)expression (list |)before")[^\n]*\n?)+'}
      L161: {expect: true, expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L167: {expect: true, expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L169: {expect: true, expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L171: {expect: true, expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before end of line")[^\n]*\n?)+'}
      L174: {expect: true, expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before \''\\\\\\)\''")[^\n]*\n?)+'}
      L176: {expect: true, expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L180: {expect: true, expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before numeric constant")[^\n]*\n?)+'}
      L186: {expect: true, expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''N\''")[^\n]*\n?)+'}
      L188: {expect: true, expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L190: {expect: true, expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L192: {expect: true, expr: '(^|\n)([^\n]+:192:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L194: {expect: true, expr: '(^|\n)([^\n]+:194:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L196: {expect: true, expr: '(^|\n)([^\n]+:196:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L202: {expect: true, expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before end of line")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before ")[^\n]*\n?)+'}
      L207: {expect: true, expr: '(^|\n)([^\n]+:207:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before")[^\n]*\n?)+'}
      L208: {expect: true, expr: '(^|\n)([^\n]+:208:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L211: {expect: true, expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before")[^\n]*\n?)+'}
      L212: {expect: true, expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before end of line")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''async\''
          expression must be integral")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''async\''
          expression must be integral")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L88: {expect: true, expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
test_asyncwait-1_564:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/asyncwait-1.c'
    sources: {binary: asyncwait-1.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L100: {expect: true, expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L106: {expect: true, expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L112: {expect: true, expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before end of line")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before \''\\\\\\)\''")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L125: {expect: true, expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L131: {expect: true, expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be integral")[^\n]*\n?)+'}
      L137: {expect: true, expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be integral")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+:143:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be integral")[^\n]*\n?)+'}
      L149: {expect: true, expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (integer |)expression (list |)before")[^\n]*\n?)+'}
      L161: {expect: true, expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L167: {expect: true, expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L169: {expect: true, expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L171: {expect: true, expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before end of line")[^\n]*\n?)+'}
      L174: {expect: true, expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before \''\\\\\\)\''")[^\n]*\n?)+'}
      L176: {expect: true, expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L180: {expect: true, expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before numeric constant")[^\n]*\n?)+'}
      L186: {expect: true, expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''N\''")[^\n]*\n?)+'}
      L188: {expect: true, expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L190: {expect: true, expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L192: {expect: true, expr: '(^|\n)([^\n]+:192:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L194: {expect: true, expr: '(^|\n)([^\n]+:194:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L196: {expect: true, expr: '(^|\n)([^\n]+:196:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L202: {expect: true, expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before end of line")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before ")[^\n]*\n?)+'}
      L207: {expect: true, expr: '(^|\n)([^\n]+:207:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before")[^\n]*\n?)+'}
      L208: {expect: true, expr: '(^|\n)([^\n]+:208:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L211: {expect: true, expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before")[^\n]*\n?)+'}
      L212: {expect: true, expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before end of line")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''async\''
          expression must be integral")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''async\''
          expression must be integral")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L88: {expect: true, expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
test_asyncwait-1_99:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/asyncwait-1.c'
    sources: {binary: asyncwait-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L100: {expect: true, expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L106: {expect: true, expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L112: {expect: true, expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before end of line")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before \''\\\\\\)\''")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L125: {expect: true, expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L131: {expect: true, expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be integral")[^\n]*\n?)+'}
      L137: {expect: true, expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be integral")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+:143:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be integral")[^\n]*\n?)+'}
      L149: {expect: true, expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (integer |)expression (list |)before")[^\n]*\n?)+'}
      L161: {expect: true, expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L167: {expect: true, expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L169: {expect: true, expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L171: {expect: true, expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before end of line")[^\n]*\n?)+'}
      L174: {expect: true, expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before \''\\\\\\)\''")[^\n]*\n?)+'}
      L176: {expect: true, expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L180: {expect: true, expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before numeric constant")[^\n]*\n?)+'}
      L186: {expect: true, expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''N\''")[^\n]*\n?)+'}
      L188: {expect: true, expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L190: {expect: true, expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L192: {expect: true, expr: '(^|\n)([^\n]+:192:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L194: {expect: true, expr: '(^|\n)([^\n]+:194:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L196: {expect: true, expr: '(^|\n)([^\n]+:196:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L202: {expect: true, expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before end of line")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before ")[^\n]*\n?)+'}
      L207: {expect: true, expr: '(^|\n)([^\n]+:207:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before")[^\n]*\n?)+'}
      L208: {expect: true, expr: '(^|\n)([^\n]+:208:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L211: {expect: true, expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before")[^\n]*\n?)+'}
      L212: {expect: true, expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          must be integral")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before end of line")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''async\''
          expression must be integral")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression before")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''async\''
          expression must be integral")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before numeric constant")[^\n]*\n?)+'}
      L88: {expect: true, expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (primary-|)expression before")[^\n]*\n?)+'}
test_cache-1_100:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/cache-1.c'
    sources: {binary: cache-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_cache-1_202:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/cache-1.c'
    sources: {binary: cache-1.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
test_cache-1_203:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/cache-1.c'
    sources: {binary: cache-1.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
test_cache-1_204:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/cache-1.c'
    sources: {binary: cache-1.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
test_cache-1_4:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/cache-1.c'
    sources: {binary: cache-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_cache-1_463:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/cache-1.c'
    sources: {binary: cache-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_cache-1_565:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/cache-1.c'
    sources: {binary: cache-1.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
test_cache-1_566:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/cache-1.c'
    sources: {binary: cache-1.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
test_cache-1_567:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/cache-1.c'
    sources: {binary: cache-1.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
test_cache-2_101:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/cache-2.c'
    sources: {binary: cache-2.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\(\'' before end of line")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\(\'' before \''a\''")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\[\''")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before end of line")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before \''\\\\\\)\'' token")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before \''(,|\\\\\\))\'' token")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before end of line")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before \''(,|\\\\\\))\'' token")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before \''copyin\''")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before \''\\\\\\)\'' token")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''b\''")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''b\''")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before end of line")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before \''\\\\(\'' token")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before \''ii\''")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before \''ii\''")[^\n]*\n?)+'}
test_cache-2_205:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/cache-2.c'
    sources: {binary: cache-2.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\(\'' before end of line")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\(\'' before \''a\''")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\[\''")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before end of line")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before \''\\\\\\)\'' token")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before \''(,|\\\\\\))\'' token")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before end of line")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before \''(,|\\\\\\))\'' token")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before \''copyin\''")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before \''\\\\\\)\'' token")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''b\''")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''b\''")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before end of line")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before \''\\\\(\'' token")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before \''ii\''")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before \''ii\''")[^\n]*\n?)+'}
test_cache-2_206:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/cache-2.c'
    sources: {binary: cache-2.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\(\'' before end of line")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\(\'' before \''a\''")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\[\''")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before end of line")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before \''\\\\\\)\'' token")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before \''(,|\\\\\\))\'' token")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before end of line")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before \''(,|\\\\\\))\'' token")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before \''copyin\''")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before \''\\\\\\)\'' token")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''b\''")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''b\''")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before end of line")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before \''\\\\(\'' token")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before \''ii\''")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before \''ii\''")[^\n]*\n?)+'}
test_cache-2_207:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/cache-2.c'
    sources: {binary: cache-2.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\(\'' before end of line")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\(\'' before \''a\''")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\[\''")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before end of line")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before \''\\\\\\)\'' token")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before \''(,|\\\\\\))\'' token")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before end of line")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before \''(,|\\\\\\))\'' token")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before \''copyin\''")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before \''\\\\\\)\'' token")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''b\''")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''b\''")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before end of line")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before \''\\\\(\'' token")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before \''ii\''")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before \''ii\''")[^\n]*\n?)+'}
test_cache-2_464:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/cache-2.c'
    sources: {binary: cache-2.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\(\'' before end of line")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\(\'' before \''a\''")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\[\''")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before end of line")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before \''\\\\\\)\'' token")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before \''(,|\\\\\\))\'' token")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before end of line")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before \''(,|\\\\\\))\'' token")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before \''copyin\''")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before \''\\\\\\)\'' token")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''b\''")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''b\''")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before end of line")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before \''\\\\(\'' token")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before \''ii\''")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before \''ii\''")[^\n]*\n?)+'}
test_cache-2_5:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/cache-2.c'
    sources: {binary: cache-2.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\(\'' before end of line")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\(\'' before \''a\''")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\[\''")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before end of line")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before \''\\\\\\)\'' token")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before \''(,|\\\\\\))\'' token")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before end of line")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before \''(,|\\\\\\))\'' token")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before \''copyin\''")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before \''\\\\\\)\'' token")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''b\''")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''b\''")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before end of line")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before \''\\\\(\'' token")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before \''ii\''")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before \''ii\''")[^\n]*\n?)+'}
test_cache-2_568:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/cache-2.c'
    sources: {binary: cache-2.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\(\'' before end of line")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\(\'' before \''a\''")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\[\''")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before end of line")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before \''\\\\\\)\'' token")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before \''(,|\\\\\\))\'' token")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before end of line")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before \''(,|\\\\\\))\'' token")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before \''copyin\''")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before \''\\\\\\)\'' token")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''b\''")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''b\''")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before end of line")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before \''\\\\(\'' token")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before \''ii\''")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before \''ii\''")[^\n]*\n?)+'}
test_cache-2_569:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/cache-2.c'
    sources: {binary: cache-2.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\(\'' before end of line")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\(\'' before \''a\''")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\[\''")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before end of line")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before \''\\\\\\)\'' token")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before \''(,|\\\\\\))\'' token")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before end of line")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before \''(,|\\\\\\))\'' token")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before \''copyin\''")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before \''\\\\\\)\'' token")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''b\''")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''b\''")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before end of line")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before \''\\\\(\'' token")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before \''ii\''")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before \''ii\''")[^\n]*\n?)+'}
test_cache-2_570:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/cache-2.c'
    sources: {binary: cache-2.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\(\'' before end of line")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\(\'' before \''a\''")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\[\''")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before end of line")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before \''\\\\\\)\'' token")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before \''(,|\\\\\\))\'' token")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before end of line")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before \''(,|\\\\\\))\'' token")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before \''copyin\''")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (identifier|unqualified-id) before \''\\\\\\)\'' token")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''b\''")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''b\''")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before end of line")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before \''\\\\(\'' token")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before \''ii\''")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\'' before \''ii\''")[^\n]*\n?)+'}
test_clauses-fail_102:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/clauses-fail.c'
    sources: {binary: clauses-fail.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''eins\''")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''two\''")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''deux\''")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          ... before ... token")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''one\''")[^\n]*\n?)+'}
test_clauses-fail_208:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/clauses-fail.c'
    sources: {binary: clauses-fail.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''eins\''")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''two\''")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''deux\''")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          ... before ... token")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''one\''")[^\n]*\n?)+'}
test_clauses-fail_209:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/clauses-fail.c'
    sources: {binary: clauses-fail.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''eins\''")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''two\''")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''deux\''")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          ... before ... token")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''one\''")[^\n]*\n?)+'}
test_clauses-fail_210:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/clauses-fail.c'
    sources: {binary: clauses-fail.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''eins\''")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''two\''")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''deux\''")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          ... before ... token")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''one\''")[^\n]*\n?)+'}
test_clauses-fail_465:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/clauses-fail.c'
    sources: {binary: clauses-fail.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''eins\''")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''two\''")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''deux\''")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          ... before ... token")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''one\''")[^\n]*\n?)+'}
test_clauses-fail_571:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/clauses-fail.c'
    sources: {binary: clauses-fail.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''eins\''")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''two\''")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''deux\''")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          ... before ... token")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''one\''")[^\n]*\n?)+'}
test_clauses-fail_572:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/clauses-fail.c'
    sources: {binary: clauses-fail.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''eins\''")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''two\''")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''deux\''")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          ... before ... token")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''one\''")[^\n]*\n?)+'}
test_clauses-fail_573:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/clauses-fail.c'
    sources: {binary: clauses-fail.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''eins\''")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''two\''")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''deux\''")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          ... before ... token")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''one\''")[^\n]*\n?)+'}
test_clauses-fail_6:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/clauses-fail.c'
    sources: {binary: clauses-fail.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''eins\''")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''two\''")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''deux\''")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          ... before ... token")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''one\''")[^\n]*\n?)+'}
test_collapse-1_103:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/collapse-1.c'
    sources: {binary: collapse-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          enough perfectly nested")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          enough perfectly nested")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("collapsed
          loops not perfectly nested before")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("collapsed
          loops not perfectly nested before")[^\n]*\n?)+'}
test_collapse-1_466:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/collapse-1.c'
    sources: {binary: collapse-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          enough perfectly nested")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          enough perfectly nested")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("collapsed
          loops not perfectly nested before")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("collapsed
          loops not perfectly nested before")[^\n]*\n?)+'}
test_collapse-1_7:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/collapse-1.c'
    sources: {binary: collapse-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          enough perfectly nested")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          enough perfectly nested")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("collapsed
          loops not perfectly nested before")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("collapsed
          loops not perfectly nested before")[^\n]*\n?)+'}
test_combined-directives-2_104:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/combined-directives-2.c'
    sources: {binary: combined-directives-2.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''a\''
          does not have pointer or array type")[^\n]*\n?)+'}
test_combined-directives-2_211:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/combined-directives-2.c'
    sources: {binary: combined-directives-2.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''a\''
          does not have pointer or array type")[^\n]*\n?)+'}
test_combined-directives-2_212:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/combined-directives-2.c'
    sources: {binary: combined-directives-2.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''a\''
          does not have pointer or array type")[^\n]*\n?)+'}
test_combined-directives-2_213:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/combined-directives-2.c'
    sources: {binary: combined-directives-2.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''a\''
          does not have pointer or array type")[^\n]*\n?)+'}
test_combined-directives-2_467:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/combined-directives-2.c'
    sources: {binary: combined-directives-2.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''a\''
          does not have pointer or array type")[^\n]*\n?)+'}
test_combined-directives-2_574:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/combined-directives-2.c'
    sources: {binary: combined-directives-2.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''a\''
          does not have pointer or array type")[^\n]*\n?)+'}
test_combined-directives-2_575:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/combined-directives-2.c'
    sources: {binary: combined-directives-2.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''a\''
          does not have pointer or array type")[^\n]*\n?)+'}
test_combined-directives-2_576:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/combined-directives-2.c'
    sources: {binary: combined-directives-2.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''a\''
          does not have pointer or array type")[^\n]*\n?)+'}
test_combined-directives-2_8:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/combined-directives-2.c'
    sources: {binary: combined-directives-2.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''a\''
          does not have pointer or array type")[^\n]*\n?)+'}
test_combined-directives_105:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/combined-directives.c'
    sources: {binary: combined-directives.s, cflags: "-fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_combined-directives_214:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/combined-directives.c'
    sources: {binary: combined-directives.s, cflags: "-std=c++98 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_combined-directives_215:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/combined-directives.c'
    sources: {binary: combined-directives.s, cflags: "-std=c++11 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_combined-directives_216:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/combined-directives.c'
    sources: {binary: combined-directives.s, cflags: "-std=c++14 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_combined-directives_468:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/combined-directives.c'
    sources: {binary: combined-directives.s, cflags: "-fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_combined-directives_577:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/combined-directives.c'
    sources: {binary: combined-directives.s, cflags: "-std=c++98 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_combined-directives_578:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/combined-directives.c'
    sources: {binary: combined-directives.s, cflags: "-std=c++11 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_combined-directives_579:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/combined-directives.c'
    sources: {binary: combined-directives.s, cflags: "-std=c++14 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_combined-directives_9:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/combined-directives.c'
    sources: {binary: combined-directives.s, cflags: "-fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_combined-reduction_10:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/combined-reduction.c'
    sources: {binary: combined-reduction.s, cflags: "-fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_combined-reduction_106:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/combined-reduction.c'
    sources: {binary: combined-reduction.s, cflags: "-fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_combined-reduction_217:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/combined-reduction.c'
    sources: {binary: combined-reduction.s, cflags: "-std=gnu++98 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_combined-reduction_218:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/combined-reduction.c'
    sources: {binary: combined-reduction.s, cflags: "-std=gnu++11 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_combined-reduction_219:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/combined-reduction.c'
    sources: {binary: combined-reduction.s, cflags: "-std=gnu++14 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_combined-reduction_469:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/combined-reduction.c'
    sources: {binary: combined-reduction.s, cflags: "-fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_combined-reduction_580:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/combined-reduction.c'
    sources: {binary: combined-reduction.s, cflags: "-std=gnu++98 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_combined-reduction_581:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/combined-reduction.c'
    sources: {binary: combined-reduction.s, cflags: "-std=gnu++11 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_combined-reduction_582:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/combined-reduction.c'
    sources: {binary: combined-reduction.s, cflags: "-std=gnu++14 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_data-1_107:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/data-1.c'
    sources: {binary: data-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_data-1_11:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/data-1.c'
    sources: {binary: data-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_data-1_220:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/data-1.c'
    sources: {binary: data-1.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
test_data-1_221:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/data-1.c'
    sources: {binary: data-1.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
test_data-1_222:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/data-1.c'
    sources: {binary: data-1.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
test_data-1_470:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/data-1.c'
    sources: {binary: data-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_data-1_583:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/data-1.c'
    sources: {binary: data-1.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
test_data-1_584:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/data-1.c'
    sources: {binary: data-1.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
test_data-1_585:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/data-1.c'
    sources: {binary: data-1.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
test_data-2_108:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/data-2.c'
    sources: {binary: data-2.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          no data movement clause")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          data movement clause")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          no data movement clause")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''\\\\\\(\'' token")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\(\'' token")[^\n]*\n?)+'}
test_data-2_12:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/data-2.c'
    sources: {binary: data-2.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          no data movement clause")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          data movement clause")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          no data movement clause")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''\\\\\\(\'' token")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\(\'' token")[^\n]*\n?)+'}
test_data-2_223:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/data-2.c'
    sources: {binary: data-2.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          no data movement clause")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          data movement clause")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          no data movement clause")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''\\\\\\(\'' token")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\(\'' token")[^\n]*\n?)+'}
test_data-2_224:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/data-2.c'
    sources: {binary: data-2.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          no data movement clause")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          data movement clause")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          no data movement clause")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''\\\\\\(\'' token")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\(\'' token")[^\n]*\n?)+'}
test_data-2_225:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/data-2.c'
    sources: {binary: data-2.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          no data movement clause")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          data movement clause")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          no data movement clause")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''\\\\\\(\'' token")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\(\'' token")[^\n]*\n?)+'}
test_data-2_471:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/data-2.c'
    sources: {binary: data-2.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          no data movement clause")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          data movement clause")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          no data movement clause")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''\\\\\\(\'' token")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\(\'' token")[^\n]*\n?)+'}
test_data-2_586:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/data-2.c'
    sources: {binary: data-2.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          no data movement clause")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          data movement clause")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          no data movement clause")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''\\\\\\(\'' token")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\(\'' token")[^\n]*\n?)+'}
test_data-2_587:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/data-2.c'
    sources: {binary: data-2.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          no data movement clause")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          data movement clause")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          no data movement clause")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''\\\\\\(\'' token")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\(\'' token")[^\n]*\n?)+'}
test_data-2_588:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/data-2.c'
    sources: {binary: data-2.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          no data movement clause")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          data movement clause")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''data\'' after")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          no data movement clause")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''#pragma acc\'' clause before \''\\\\\\(\'' token")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\(\'' token")[^\n]*\n?)+'}
test_data-clause-duplicate-1_109:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/data-clause-duplicate-1.c'
    sources: {binary: data-clause-duplicate-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
test_data-clause-duplicate-1_13:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/data-clause-duplicate-1.c'
    sources: {binary: data-clause-duplicate-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
test_data-clause-duplicate-1_226:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/data-clause-duplicate-1.c'
    sources: {binary: data-clause-duplicate-1.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
test_data-clause-duplicate-1_227:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/data-clause-duplicate-1.c'
    sources: {binary: data-clause-duplicate-1.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
test_data-clause-duplicate-1_228:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/data-clause-duplicate-1.c'
    sources: {binary: data-clause-duplicate-1.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
test_data-clause-duplicate-1_472:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/data-clause-duplicate-1.c'
    sources: {binary: data-clause-duplicate-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
test_data-clause-duplicate-1_589:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/data-clause-duplicate-1.c'
    sources: {binary: data-clause-duplicate-1.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
test_data-clause-duplicate-1_590:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/data-clause-duplicate-1.c'
    sources: {binary: data-clause-duplicate-1.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
test_data-clause-duplicate-1_591:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/data-clause-duplicate-1.c'
    sources: {binary: data-clause-duplicate-1.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
test_data-default-1_110:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/data-default-1.c'
    sources: {binary: data-default-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in enclosing")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in enclosing")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in enclosing")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in enclosing")[^\n]*\n?)+'}
test_data-default-1_14:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/data-default-1.c'
    sources: {binary: data-default-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in enclosing")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in enclosing")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in enclosing")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in enclosing")[^\n]*\n?)+'}
test_data-default-1_229:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/data-default-1.c'
    sources: {binary: data-default-1.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in enclosing")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in enclosing")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in enclosing")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in enclosing")[^\n]*\n?)+'}
test_data-default-1_230:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/data-default-1.c'
    sources: {binary: data-default-1.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in enclosing")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in enclosing")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in enclosing")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in enclosing")[^\n]*\n?)+'}
test_data-default-1_231:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/data-default-1.c'
    sources: {binary: data-default-1.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in enclosing")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in enclosing")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in enclosing")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in enclosing")[^\n]*\n?)+'}
test_data-default-1_473:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/data-default-1.c'
    sources: {binary: data-default-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in enclosing")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in enclosing")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in enclosing")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in enclosing")[^\n]*\n?)+'}
test_data-default-1_592:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/data-default-1.c'
    sources: {binary: data-default-1.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in enclosing")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in enclosing")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in enclosing")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in enclosing")[^\n]*\n?)+'}
test_data-default-1_593:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/data-default-1.c'
    sources: {binary: data-default-1.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in enclosing")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in enclosing")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in enclosing")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in enclosing")[^\n]*\n?)+'}
test_data-default-1_594:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/data-default-1.c'
    sources: {binary: data-default-1.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in enclosing")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in enclosing")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in enclosing")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in enclosing")[^\n]*\n?)+'}
test_declare-1_111:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/declare-1.c'
    sources: {binary: declare-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_declare-1_15:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/declare-1.c'
    sources: {binary: declare-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_declare-1_232:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/declare-1.c'
    sources: {binary: declare-1.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
test_declare-1_233:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/declare-1.c'
    sources: {binary: declare-1.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
test_declare-1_234:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/declare-1.c'
    sources: {binary: declare-1.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
test_declare-1_474:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/declare-1.c'
    sources: {binary: declare-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_declare-1_595:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/declare-1.c'
    sources: {binary: declare-1.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
test_declare-1_596:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/declare-1.c'
    sources: {binary: declare-1.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
test_declare-1_597:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/declare-1.c'
    sources: {binary: declare-1.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
test_declare-2_112:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/declare-2.c'
    sources: {binary: declare-2.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          valid clauses")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("global
          variable")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          valid clauses")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
test_declare-2_16:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/declare-2.c'
    sources: {binary: declare-2.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          valid clauses")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("global
          variable")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          valid clauses")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
test_declare-2_235:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/declare-2.c'
    sources: {binary: declare-2.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          valid clauses")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("global
          variable")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          valid clauses")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
test_declare-2_236:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/declare-2.c'
    sources: {binary: declare-2.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          valid clauses")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("global
          variable")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          valid clauses")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
test_declare-2_237:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/declare-2.c'
    sources: {binary: declare-2.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          valid clauses")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("global
          variable")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          valid clauses")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
test_declare-2_475:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/declare-2.c'
    sources: {binary: declare-2.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          valid clauses")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("global
          variable")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          valid clauses")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
test_declare-2_598:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/declare-2.c'
    sources: {binary: declare-2.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          valid clauses")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("global
          variable")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          valid clauses")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
test_declare-2_599:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/declare-2.c'
    sources: {binary: declare-2.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          valid clauses")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("global
          variable")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          valid clauses")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
test_declare-2_600:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/declare-2.c'
    sources: {binary: declare-2.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          valid clauses")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("global
          variable")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          valid clauses")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of")[^\n]*\n?)+'}
test_deviceptr-1_113:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/deviceptr-1.c'
    sources: {binary: deviceptr-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fun1\''
          is not a variable")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fun1\''
          is not a variable")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\[\'' token")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''i\''
          is not a pointer variable")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''i\''
          is not a pointer variable")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\[\'' token")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fa\''
          is not a pointer variable")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fa\''
          is not a pointer variable")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\[\'' token")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\[\'' token")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''u\''
          undeclared")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fun2\''
          is not a variable")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''i\''
          is not a pointer variable")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''u\''
          undeclared")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type has incomplete element type")[^\n]*\n?)+'}
      L75: {expect: true, expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''s1\''
          is not a pointer variable")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\[\'' token")[^\n]*\n?)+'}
      L98: {expect: true, expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a pointer variable")[^\n]*\n?)+'}
test_deviceptr-1_17:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/deviceptr-1.c'
    sources: {binary: deviceptr-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fun1\''
          is not a variable")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fun1\''
          is not a variable")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\[\'' token")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''i\''
          is not a pointer variable")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''i\''
          is not a pointer variable")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\[\'' token")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fa\''
          is not a pointer variable")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fa\''
          is not a pointer variable")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\[\'' token")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\[\'' token")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''u\''
          undeclared")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fun2\''
          is not a variable")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''i\''
          is not a pointer variable")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''u\''
          undeclared")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type has incomplete element type")[^\n]*\n?)+'}
      L75: {expect: true, expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''s1\''
          is not a pointer variable")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\[\'' token")[^\n]*\n?)+'}
      L98: {expect: true, expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a pointer variable")[^\n]*\n?)+'}
test_deviceptr-1_476:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/deviceptr-1.c'
    sources: {binary: deviceptr-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fun1\''
          is not a variable")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fun1\''
          is not a variable")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\[\'' token")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''i\''
          is not a pointer variable")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''i\''
          is not a pointer variable")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\[\'' token")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fa\''
          is not a pointer variable")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fa\''
          is not a pointer variable")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\[\'' token")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\[\'' token")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''u\''
          undeclared")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fun2\''
          is not a variable")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''i\''
          is not a pointer variable")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''u\''
          undeclared")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''fp\''
          appears more than once in data clauses")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type has incomplete element type")[^\n]*\n?)+'}
      L75: {expect: true, expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''s1\''
          is not a pointer variable")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\[\'' token")[^\n]*\n?)+'}
      L98: {expect: true, expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a pointer variable")[^\n]*\n?)+'}
test_deviceptr-2_114:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/deviceptr-2.c'
    sources: {binary: deviceptr-2.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_deviceptr-2_18:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/deviceptr-2.c'
    sources: {binary: deviceptr-2.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_deviceptr-2_238:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/deviceptr-2.c'
    sources: {binary: deviceptr-2.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
test_deviceptr-2_239:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/deviceptr-2.c'
    sources: {binary: deviceptr-2.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
test_deviceptr-2_240:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/deviceptr-2.c'
    sources: {binary: deviceptr-2.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
test_deviceptr-2_477:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/deviceptr-2.c'
    sources: {binary: deviceptr-2.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_deviceptr-2_601:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/deviceptr-2.c'
    sources: {binary: deviceptr-2.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
test_deviceptr-2_602:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/deviceptr-2.c'
    sources: {binary: deviceptr-2.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
test_deviceptr-2_603:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/deviceptr-2.c'
    sources: {binary: deviceptr-2.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
test_deviceptr-3_115:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/deviceptr-3.c'
    sources: {binary: deviceptr-3.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_deviceptr-3_19:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/deviceptr-3.c'
    sources: {binary: deviceptr-3.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_deviceptr-3_241:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/deviceptr-3.c'
    sources: {binary: deviceptr-3.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
test_deviceptr-3_242:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/deviceptr-3.c'
    sources: {binary: deviceptr-3.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
test_deviceptr-3_243:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/deviceptr-3.c'
    sources: {binary: deviceptr-3.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
test_deviceptr-3_478:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/deviceptr-3.c'
    sources: {binary: deviceptr-3.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_deviceptr-3_604:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/deviceptr-3.c'
    sources: {binary: deviceptr-3.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
test_deviceptr-3_605:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/deviceptr-3.c'
    sources: {binary: deviceptr-3.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
test_deviceptr-3_606:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/deviceptr-3.c'
    sources: {binary: deviceptr-3.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
test_executeables-1_116:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/executeables-1.c'
    sources: {binary: executeables-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
test_executeables-1_20:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/executeables-1.c'
    sources: {binary: executeables-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
test_executeables-1_244:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/executeables-1.c'
    sources: {binary: executeables-1.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
test_executeables-1_245:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/executeables-1.c'
    sources: {binary: executeables-1.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
test_executeables-1_246:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/executeables-1.c'
    sources: {binary: executeables-1.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
test_executeables-1_479:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/executeables-1.c'
    sources: {binary: executeables-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
test_executeables-1_607:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/executeables-1.c'
    sources: {binary: executeables-1.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
test_executeables-1_608:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/executeables-1.c'
    sources: {binary: executeables-1.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
test_executeables-1_609:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/executeables-1.c'
    sources: {binary: executeables-1.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
test_host_data-1_117:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/host_data-1.c'
    sources: {binary: host_data-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_host_data-1_21:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/host_data-1.c'
    sources: {binary: host_data-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_host_data-1_247:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/host_data-1.c'
    sources: {binary: host_data-1.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
test_host_data-1_248:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/host_data-1.c'
    sources: {binary: host_data-1.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
test_host_data-1_249:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/host_data-1.c'
    sources: {binary: host_data-1.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
test_host_data-1_480:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/host_data-1.c'
    sources: {binary: host_data-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_host_data-1_610:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/host_data-1.c'
    sources: {binary: host_data-1.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
test_host_data-1_611:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/host_data-1.c'
    sources: {binary: host_data-1.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
test_host_data-1_612:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/host_data-1.c'
    sources: {binary: host_data-1.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
test_host_data-2_118:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/host_data-2.c'
    sources: {binary: host_data-2.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".copy.
          is not valid for ..pragma acc host_data.")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".use_device_ptr.
          variable is neither a pointer nor an array")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".use_device_ptr.
          variable is neither a pointer, nor an array nor reference to pointer or
          array")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".use_device_ptr.
          variable is neither a pointer nor an array")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".use_device_ptr.
          variable is neither a pointer, nor an array nor reference to pointer or
          array")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\[\'' token")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("variable
          .x. declared in enclosing .host_data. region")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("variable
          .x. declared in enclosing .host_data. region")[^\n]*\n?)+'}
test_host_data-2_22:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/host_data-2.c'
    sources: {binary: host_data-2.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".copy.
          is not valid for ..pragma acc host_data.")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".use_device_ptr.
          variable is neither a pointer nor an array")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".use_device_ptr.
          variable is neither a pointer, nor an array nor reference to pointer or
          array")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".use_device_ptr.
          variable is neither a pointer nor an array")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".use_device_ptr.
          variable is neither a pointer, nor an array nor reference to pointer or
          array")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\[\'' token")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("variable
          .x. declared in enclosing .host_data. region")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("variable
          .x. declared in enclosing .host_data. region")[^\n]*\n?)+'}
test_host_data-2_250:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/host_data-2.c'
    sources: {binary: host_data-2.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".copy.
          is not valid for ..pragma acc host_data.")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".use_device_ptr.
          variable is neither a pointer nor an array")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".use_device_ptr.
          variable is neither a pointer, nor an array nor reference to pointer or
          array")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".use_device_ptr.
          variable is neither a pointer nor an array")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".use_device_ptr.
          variable is neither a pointer, nor an array nor reference to pointer or
          array")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\[\'' token")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("variable
          .x. declared in enclosing .host_data. region")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("variable
          .x. declared in enclosing .host_data. region")[^\n]*\n?)+'}
test_host_data-2_251:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/host_data-2.c'
    sources: {binary: host_data-2.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".copy.
          is not valid for ..pragma acc host_data.")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".use_device_ptr.
          variable is neither a pointer nor an array")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".use_device_ptr.
          variable is neither a pointer, nor an array nor reference to pointer or
          array")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".use_device_ptr.
          variable is neither a pointer nor an array")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".use_device_ptr.
          variable is neither a pointer, nor an array nor reference to pointer or
          array")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\[\'' token")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("variable
          .x. declared in enclosing .host_data. region")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("variable
          .x. declared in enclosing .host_data. region")[^\n]*\n?)+'}
test_host_data-2_252:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/host_data-2.c'
    sources: {binary: host_data-2.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".copy.
          is not valid for ..pragma acc host_data.")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".use_device_ptr.
          variable is neither a pointer nor an array")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".use_device_ptr.
          variable is neither a pointer, nor an array nor reference to pointer or
          array")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".use_device_ptr.
          variable is neither a pointer nor an array")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".use_device_ptr.
          variable is neither a pointer, nor an array nor reference to pointer or
          array")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\[\'' token")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("variable
          .x. declared in enclosing .host_data. region")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("variable
          .x. declared in enclosing .host_data. region")[^\n]*\n?)+'}
test_host_data-2_481:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/host_data-2.c'
    sources: {binary: host_data-2.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".copy.
          is not valid for ..pragma acc host_data.")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".use_device_ptr.
          variable is neither a pointer nor an array")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".use_device_ptr.
          variable is neither a pointer, nor an array nor reference to pointer or
          array")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".use_device_ptr.
          variable is neither a pointer nor an array")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".use_device_ptr.
          variable is neither a pointer, nor an array nor reference to pointer or
          array")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\[\'' token")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("variable
          .x. declared in enclosing .host_data. region")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("variable
          .x. declared in enclosing .host_data. region")[^\n]*\n?)+'}
test_host_data-2_613:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/host_data-2.c'
    sources: {binary: host_data-2.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".copy.
          is not valid for ..pragma acc host_data.")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".use_device_ptr.
          variable is neither a pointer nor an array")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".use_device_ptr.
          variable is neither a pointer, nor an array nor reference to pointer or
          array")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".use_device_ptr.
          variable is neither a pointer nor an array")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".use_device_ptr.
          variable is neither a pointer, nor an array nor reference to pointer or
          array")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\[\'' token")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("variable
          .x. declared in enclosing .host_data. region")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("variable
          .x. declared in enclosing .host_data. region")[^\n]*\n?)+'}
test_host_data-2_614:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/host_data-2.c'
    sources: {binary: host_data-2.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".copy.
          is not valid for ..pragma acc host_data.")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".use_device_ptr.
          variable is neither a pointer nor an array")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".use_device_ptr.
          variable is neither a pointer, nor an array nor reference to pointer or
          array")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".use_device_ptr.
          variable is neither a pointer nor an array")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".use_device_ptr.
          variable is neither a pointer, nor an array nor reference to pointer or
          array")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\[\'' token")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("variable
          .x. declared in enclosing .host_data. region")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("variable
          .x. declared in enclosing .host_data. region")[^\n]*\n?)+'}
test_host_data-2_615:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/host_data-2.c'
    sources: {binary: host_data-2.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".copy.
          is not valid for ..pragma acc host_data.")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".use_device_ptr.
          variable is neither a pointer nor an array")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".use_device_ptr.
          variable is neither a pointer, nor an array nor reference to pointer or
          array")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".use_device_ptr.
          variable is neither a pointer nor an array")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".use_device_ptr.
          variable is neither a pointer, nor an array nor reference to pointer or
          array")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\[\'' token")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("variable
          .x. declared in enclosing .host_data. region")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("variable
          .x. declared in enclosing .host_data. region")[^\n]*\n?)+'}
test_if-clause-1_119:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/if-clause-1.c'
    sources: {binary: if-clause-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many \''if\'' clauses")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used
          struct type value where scalar is required")[^\n]*\n?)+'}
test_if-clause-1_23:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/if-clause-1.c'
    sources: {binary: if-clause-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many \''if\'' clauses")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used
          struct type value where scalar is required")[^\n]*\n?)+'}
test_if-clause-1_482:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/if-clause-1.c'
    sources: {binary: if-clause-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many \''if\'' clauses")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used
          struct type value where scalar is required")[^\n]*\n?)+'}
test_if-clause-2_120:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/if-clause-2.c'
    sources: {binary: if-clause-2.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_if-clause-2_24:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/if-clause-2.c'
    sources: {binary: if-clause-2.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_if-clause-2_253:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/if-clause-2.c'
    sources: {binary: if-clause-2.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
test_if-clause-2_254:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/if-clause-2.c'
    sources: {binary: if-clause-2.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
test_if-clause-2_255:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/if-clause-2.c'
    sources: {binary: if-clause-2.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
test_if-clause-2_483:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/if-clause-2.c'
    sources: {binary: if-clause-2.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_if-clause-2_616:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/if-clause-2.c'
    sources: {binary: if-clause-2.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
test_if-clause-2_617:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/if-clause-2.c'
    sources: {binary: if-clause-2.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
test_if-clause-2_618:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/if-clause-2.c'
    sources: {binary: if-clause-2.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
test_kernels-1_121:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-1.c'
    sources: {binary: kernels-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_kernels-1_25:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-1.c'
    sources: {binary: kernels-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_kernels-1_256:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-1.c'
    sources: {binary: kernels-1.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
test_kernels-1_257:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-1.c'
    sources: {binary: kernels-1.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
test_kernels-1_258:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-1.c'
    sources: {binary: kernels-1.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
test_kernels-1_484:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-1.c'
    sources: {binary: kernels-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_kernels-1_619:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-1.c'
    sources: {binary: kernels-1.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
test_kernels-1_620:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-1.c'
    sources: {binary: kernels-1.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
test_kernels-1_621:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-1.c'
    sources: {binary: kernels-1.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
test_kernels-alias-2_122:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-2.c'
    sources: {binary: kernels-alias-2.s, cflags: "-fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-2_259:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-2.c'
    sources: {binary: kernels-alias-2.s, cflags: "-std=c++98 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-2_26:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-2.c'
    sources: {binary: kernels-alias-2.s, cflags: "-fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-2_260:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-2.c'
    sources: {binary: kernels-alias-2.s, cflags: "-std=c++11 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-2_261:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-2.c'
    sources: {binary: kernels-alias-2.s, cflags: "-std=c++14 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-2_485:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-2.c'
    sources: {binary: kernels-alias-2.s, cflags: "-fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-2_622:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-2.c'
    sources: {binary: kernels-alias-2.s, cflags: "-std=c++98 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-2_623:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-2.c'
    sources: {binary: kernels-alias-2.s, cflags: "-std=c++11 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-2_624:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-2.c'
    sources: {binary: kernels-alias-2.s, cflags: "-std=c++14 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-3_123:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-3.c'
    sources: {binary: kernels-alias-3.s, cflags: "-fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-3_262:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-3.c'
    sources: {binary: kernels-alias-3.s, cflags: "-std=c++98 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-3_263:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-3.c'
    sources: {binary: kernels-alias-3.s, cflags: "-std=c++11 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-3_264:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-3.c'
    sources: {binary: kernels-alias-3.s, cflags: "-std=c++14 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-3_27:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-3.c'
    sources: {binary: kernels-alias-3.s, cflags: "-fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-3_486:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-3.c'
    sources: {binary: kernels-alias-3.s, cflags: "-fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-3_625:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-3.c'
    sources: {binary: kernels-alias-3.s, cflags: "-std=c++98 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-3_626:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-3.c'
    sources: {binary: kernels-alias-3.s, cflags: "-std=c++11 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-3_627:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-3.c'
    sources: {binary: kernels-alias-3.s, cflags: "-std=c++14 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-4_124:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-4.c'
    sources: {binary: kernels-alias-4.s, cflags: "-fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-4_265:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-4.c'
    sources: {binary: kernels-alias-4.s, cflags: "-std=c++98 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-4_266:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-4.c'
    sources: {binary: kernels-alias-4.s, cflags: "-std=c++11 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-4_267:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-4.c'
    sources: {binary: kernels-alias-4.s, cflags: "-std=c++14 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-4_28:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-4.c'
    sources: {binary: kernels-alias-4.s, cflags: "-fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-4_487:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-4.c'
    sources: {binary: kernels-alias-4.s, cflags: "-fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-4_628:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-4.c'
    sources: {binary: kernels-alias-4.s, cflags: "-std=c++98 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-4_629:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-4.c'
    sources: {binary: kernels-alias-4.s, cflags: "-std=c++11 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-4_630:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-4.c'
    sources: {binary: kernels-alias-4.s, cflags: "-std=c++14 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-5_125:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-5.c'
    sources: {binary: kernels-alias-5.s, cflags: "-fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-5_268:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-5.c'
    sources: {binary: kernels-alias-5.s, cflags: "-std=c++98 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-5_269:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-5.c'
    sources: {binary: kernels-alias-5.s, cflags: "-std=c++11 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-5_270:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-5.c'
    sources: {binary: kernels-alias-5.s, cflags: "-std=c++14 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-5_29:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-5.c'
    sources: {binary: kernels-alias-5.s, cflags: "-fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-5_488:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-5.c'
    sources: {binary: kernels-alias-5.s, cflags: "-fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-5_631:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-5.c'
    sources: {binary: kernels-alias-5.s, cflags: "-std=c++98 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-5_632:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-5.c'
    sources: {binary: kernels-alias-5.s, cflags: "-std=c++11 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-5_633:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-5.c'
    sources: {binary: kernels-alias-5.s, cflags: "-std=c++14 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-6_126:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-6.c'
    sources: {binary: kernels-alias-6.s, cflags: "-fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-6_271:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-6.c'
    sources: {binary: kernels-alias-6.s, cflags: "-std=c++98 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-6_272:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-6.c'
    sources: {binary: kernels-alias-6.s, cflags: "-std=c++11 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-6_273:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-6.c'
    sources: {binary: kernels-alias-6.s, cflags: "-std=c++14 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-6_30:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-6.c'
    sources: {binary: kernels-alias-6.s, cflags: "-fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-6_489:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-6.c'
    sources: {binary: kernels-alias-6.s, cflags: "-fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-6_634:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-6.c'
    sources: {binary: kernels-alias-6.s, cflags: "-std=c++98 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-6_635:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-6.c'
    sources: {binary: kernels-alias-6.s, cflags: "-std=c++11 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-6_636:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-6.c'
    sources: {binary: kernels-alias-6.s, cflags: "-std=c++14 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-7_127:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-7.c'
    sources: {binary: kernels-alias-7.s, cflags: "-fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-7_274:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-7.c'
    sources: {binary: kernels-alias-7.s, cflags: "-std=c++98 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-7_275:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-7.c'
    sources: {binary: kernels-alias-7.s, cflags: "-std=c++11 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-7_276:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-7.c'
    sources: {binary: kernels-alias-7.s, cflags: "-std=c++14 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-7_31:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-7.c'
    sources: {binary: kernels-alias-7.s, cflags: "-fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-7_490:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-7.c'
    sources: {binary: kernels-alias-7.s, cflags: "-fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-7_637:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-7.c'
    sources: {binary: kernels-alias-7.s, cflags: "-std=c++98 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-7_638:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-7.c'
    sources: {binary: kernels-alias-7.s, cflags: "-std=c++11 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-7_639:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-7.c'
    sources: {binary: kernels-alias-7.s, cflags: "-std=c++14 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-8_128:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-8.c'
    sources: {binary: kernels-alias-8.s, cflags: "-fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-8_277:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-8.c'
    sources: {binary: kernels-alias-8.s, cflags: "-std=c++98 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-8_278:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-8.c'
    sources: {binary: kernels-alias-8.s, cflags: "-std=c++11 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-8_279:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-8.c'
    sources: {binary: kernels-alias-8.s, cflags: "-std=c++14 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-8_32:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-8.c'
    sources: {binary: kernels-alias-8.s, cflags: "-fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-8_491:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-8.c'
    sources: {binary: kernels-alias-8.s, cflags: "-fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-8_640:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-8.c'
    sources: {binary: kernels-alias-8.s, cflags: "-std=c++98 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-8_641:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-8.c'
    sources: {binary: kernels-alias-8.s, cflags: "-std=c++11 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-8_642:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-8.c'
    sources: {binary: kernels-alias-8.s, cflags: "-std=c++14 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-ipa-pta-2_129:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-ipa-pta-2.c'
    sources: {binary: kernels-alias-ipa-pta-2.s, cflags: "-fopenacc -O2 -fipa-pta
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-alias-ipa-pta-2_280:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-ipa-pta-2.c'
    sources: {binary: kernels-alias-ipa-pta-2.s, cflags: "-std=c++98 -fopenacc -O2
        -fipa-pta -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-alias-ipa-pta-2_281:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-ipa-pta-2.c'
    sources: {binary: kernels-alias-ipa-pta-2.s, cflags: "-std=c++11 -fopenacc -O2
        -fipa-pta -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-alias-ipa-pta-2_282:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-ipa-pta-2.c'
    sources: {binary: kernels-alias-ipa-pta-2.s, cflags: "-std=c++14 -fopenacc -O2
        -fipa-pta -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-alias-ipa-pta-2_33:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-ipa-pta-2.c'
    sources: {binary: kernels-alias-ipa-pta-2.s, cflags: "-fopenacc -O2 -fipa-pta
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-alias-ipa-pta-2_492:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-ipa-pta-2.c'
    sources: {binary: kernels-alias-ipa-pta-2.s, cflags: "-fopenacc -O2 -fipa-pta
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-alias-ipa-pta-2_643:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-ipa-pta-2.c'
    sources: {binary: kernels-alias-ipa-pta-2.s, cflags: "-std=c++98 -fopenacc -O2
        -fipa-pta -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-alias-ipa-pta-2_644:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-ipa-pta-2.c'
    sources: {binary: kernels-alias-ipa-pta-2.s, cflags: "-std=c++11 -fopenacc -O2
        -fipa-pta -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-alias-ipa-pta-2_645:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-ipa-pta-2.c'
    sources: {binary: kernels-alias-ipa-pta-2.s, cflags: "-std=c++14 -fopenacc -O2
        -fipa-pta -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-alias-ipa-pta-3_130:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-ipa-pta-3.c'
    sources: {binary: kernels-alias-ipa-pta-3.s, cflags: "-fopenacc -O2 -fipa-pta
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-alias-ipa-pta-3_283:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-ipa-pta-3.c'
    sources: {binary: kernels-alias-ipa-pta-3.s, cflags: "-std=c++98 -fopenacc -O2
        -fipa-pta -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-alias-ipa-pta-3_284:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-ipa-pta-3.c'
    sources: {binary: kernels-alias-ipa-pta-3.s, cflags: "-std=c++11 -fopenacc -O2
        -fipa-pta -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-alias-ipa-pta-3_285:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-ipa-pta-3.c'
    sources: {binary: kernels-alias-ipa-pta-3.s, cflags: "-std=c++14 -fopenacc -O2
        -fipa-pta -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-alias-ipa-pta-3_34:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-ipa-pta-3.c'
    sources: {binary: kernels-alias-ipa-pta-3.s, cflags: "-fopenacc -O2 -fipa-pta
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-alias-ipa-pta-3_493:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-ipa-pta-3.c'
    sources: {binary: kernels-alias-ipa-pta-3.s, cflags: "-fopenacc -O2 -fipa-pta
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-alias-ipa-pta-3_646:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-ipa-pta-3.c'
    sources: {binary: kernels-alias-ipa-pta-3.s, cflags: "-std=c++98 -fopenacc -O2
        -fipa-pta -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-alias-ipa-pta-3_647:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-ipa-pta-3.c'
    sources: {binary: kernels-alias-ipa-pta-3.s, cflags: "-std=c++11 -fopenacc -O2
        -fipa-pta -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-alias-ipa-pta-3_648:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-ipa-pta-3.c'
    sources: {binary: kernels-alias-ipa-pta-3.s, cflags: "-std=c++14 -fopenacc -O2
        -fipa-pta -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-alias-ipa-pta-4_131:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-ipa-pta-4.c'
    sources: {binary: kernels-alias-ipa-pta-4.s, cflags: "-fopenacc -O2 -fipa-pta
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-alias-ipa-pta-4_286:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-ipa-pta-4.c'
    sources: {binary: kernels-alias-ipa-pta-4.s, cflags: "-std=c++98 -fopenacc -O2
        -fipa-pta -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-alias-ipa-pta-4_287:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-ipa-pta-4.c'
    sources: {binary: kernels-alias-ipa-pta-4.s, cflags: "-std=c++11 -fopenacc -O2
        -fipa-pta -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-alias-ipa-pta-4_288:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-ipa-pta-4.c'
    sources: {binary: kernels-alias-ipa-pta-4.s, cflags: "-std=c++14 -fopenacc -O2
        -fipa-pta -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-alias-ipa-pta-4_35:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-ipa-pta-4.c'
    sources: {binary: kernels-alias-ipa-pta-4.s, cflags: "-fopenacc -O2 -fipa-pta
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-alias-ipa-pta-4_494:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-ipa-pta-4.c'
    sources: {binary: kernels-alias-ipa-pta-4.s, cflags: "-fopenacc -O2 -fipa-pta
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-alias-ipa-pta-4_649:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-ipa-pta-4.c'
    sources: {binary: kernels-alias-ipa-pta-4.s, cflags: "-std=c++98 -fopenacc -O2
        -fipa-pta -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-alias-ipa-pta-4_650:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-ipa-pta-4.c'
    sources: {binary: kernels-alias-ipa-pta-4.s, cflags: "-std=c++11 -fopenacc -O2
        -fipa-pta -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-alias-ipa-pta-4_651:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-ipa-pta-4.c'
    sources: {binary: kernels-alias-ipa-pta-4.s, cflags: "-std=c++14 -fopenacc -O2
        -fipa-pta -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-alias-ipa-pta_132:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-ipa-pta.c'
    sources: {binary: kernels-alias-ipa-pta.s, cflags: "-fopenacc -O2 -fipa-pta -fdump-tree-optimized\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-ipa-pta_289:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-ipa-pta.c'
    sources: {binary: kernels-alias-ipa-pta.s, cflags: "-std=c++98 -fopenacc -O2 -fipa-pta
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-alias-ipa-pta_290:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-ipa-pta.c'
    sources: {binary: kernels-alias-ipa-pta.s, cflags: "-std=c++11 -fopenacc -O2 -fipa-pta
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-alias-ipa-pta_291:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-ipa-pta.c'
    sources: {binary: kernels-alias-ipa-pta.s, cflags: "-std=c++14 -fopenacc -O2 -fipa-pta
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-alias-ipa-pta_36:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-ipa-pta.c'
    sources: {binary: kernels-alias-ipa-pta.s, cflags: "-fopenacc -O2 -fipa-pta -fdump-tree-optimized\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-ipa-pta_495:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-ipa-pta.c'
    sources: {binary: kernels-alias-ipa-pta.s, cflags: "-fopenacc -O2 -fipa-pta -fdump-tree-optimized\n
        -S"}
  group: GRPSERIAL
test_kernels-alias-ipa-pta_652:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-ipa-pta.c'
    sources: {binary: kernels-alias-ipa-pta.s, cflags: "-std=c++98 -fopenacc -O2 -fipa-pta
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-alias-ipa-pta_653:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-ipa-pta.c'
    sources: {binary: kernels-alias-ipa-pta.s, cflags: "-std=c++11 -fopenacc -O2 -fipa-pta
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-alias-ipa-pta_654:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias-ipa-pta.c'
    sources: {binary: kernels-alias-ipa-pta.s, cflags: "-std=c++14 -fopenacc -O2 -fipa-pta
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-alias_133:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias.c'
    sources: {binary: kernels-alias.s, cflags: "-fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias_292:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias.c'
    sources: {binary: kernels-alias.s, cflags: "-std=c++98 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias_293:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias.c'
    sources: {binary: kernels-alias.s, cflags: "-std=c++11 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias_294:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias.c'
    sources: {binary: kernels-alias.s, cflags: "-std=c++14 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias_37:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias.c'
    sources: {binary: kernels-alias.s, cflags: "-fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias_496:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias.c'
    sources: {binary: kernels-alias.s, cflags: "-fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias_655:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias.c'
    sources: {binary: kernels-alias.s, cflags: "-std=c++98 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias_656:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias.c'
    sources: {binary: kernels-alias.s, cflags: "-std=c++11 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-alias_657:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-alias.c'
    sources: {binary: kernels-alias.s, cflags: "-std=c++14 -fopenacc -O2 -fdump-tree-ealias-all\n
        -S"}
  group: GRPSERIAL
test_kernels-counter-vars-function-scope_134:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-counter-vars-function-scope.c'
    sources: {binary: kernels-counter-vars-function-scope.s, cflags: "-fopenacc -O2
        -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-counter-vars-function-scope_295:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-counter-vars-function-scope.c'
    sources: {binary: kernels-counter-vars-function-scope.s, cflags: "-std=c++98 -fopenacc
        -O2 -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-counter-vars-function-scope_296:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-counter-vars-function-scope.c'
    sources: {binary: kernels-counter-vars-function-scope.s, cflags: "-std=c++11 -fopenacc
        -O2 -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-counter-vars-function-scope_297:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-counter-vars-function-scope.c'
    sources: {binary: kernels-counter-vars-function-scope.s, cflags: "-std=c++14 -fopenacc
        -O2 -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-counter-vars-function-scope_38:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-counter-vars-function-scope.c'
    sources: {binary: kernels-counter-vars-function-scope.s, cflags: "-fopenacc -O2
        -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-counter-vars-function-scope_497:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-counter-vars-function-scope.c'
    sources: {binary: kernels-counter-vars-function-scope.s, cflags: "-fopenacc -O2
        -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-counter-vars-function-scope_658:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-counter-vars-function-scope.c'
    sources: {binary: kernels-counter-vars-function-scope.s, cflags: "-std=c++98 -fopenacc
        -O2 -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-counter-vars-function-scope_659:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-counter-vars-function-scope.c'
    sources: {binary: kernels-counter-vars-function-scope.s, cflags: "-std=c++11 -fopenacc
        -O2 -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-counter-vars-function-scope_660:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-counter-vars-function-scope.c'
    sources: {binary: kernels-counter-vars-function-scope.s, cflags: "-std=c++14 -fopenacc
        -O2 -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-default-2_135:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-default-2.c'
    sources: {binary: kernels-default-2.s, cflags: "-fopenacc -O2 -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_kernels-default-2_298:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-default-2.c'
    sources: {binary: kernels-default-2.s, cflags: "-std=c++98 -fopenacc -O2 -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_kernels-default-2_299:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-default-2.c'
    sources: {binary: kernels-default-2.s, cflags: "-std=c++11 -fopenacc -O2 -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_kernels-default-2_300:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-default-2.c'
    sources: {binary: kernels-default-2.s, cflags: "-std=c++14 -fopenacc -O2 -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_kernels-default-2_39:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-default-2.c'
    sources: {binary: kernels-default-2.s, cflags: "-fopenacc -O2 -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_kernels-default-2_498:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-default-2.c'
    sources: {binary: kernels-default-2.s, cflags: "-fopenacc -O2 -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_kernels-default-2_661:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-default-2.c'
    sources: {binary: kernels-default-2.s, cflags: "-std=c++98 -fopenacc -O2 -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_kernels-default-2_662:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-default-2.c'
    sources: {binary: kernels-default-2.s, cflags: "-std=c++11 -fopenacc -O2 -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_kernels-default-2_663:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-default-2.c'
    sources: {binary: kernels-default-2.s, cflags: "-std=c++14 -fopenacc -O2 -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_kernels-default_136:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-default.c'
    sources: {binary: kernels-default.s, cflags: "-fopenacc -O2 -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_kernels-default_301:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-default.c'
    sources: {binary: kernels-default.s, cflags: "-std=c++98 -fopenacc -O2 -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_kernels-default_302:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-default.c'
    sources: {binary: kernels-default.s, cflags: "-std=c++11 -fopenacc -O2 -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_kernels-default_303:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-default.c'
    sources: {binary: kernels-default.s, cflags: "-std=c++14 -fopenacc -O2 -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_kernels-default_40:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-default.c'
    sources: {binary: kernels-default.s, cflags: "-fopenacc -O2 -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_kernels-default_499:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-default.c'
    sources: {binary: kernels-default.s, cflags: "-fopenacc -O2 -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_kernels-default_664:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-default.c'
    sources: {binary: kernels-default.s, cflags: "-std=c++98 -fopenacc -O2 -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_kernels-default_665:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-default.c'
    sources: {binary: kernels-default.s, cflags: "-std=c++11 -fopenacc -O2 -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_kernels-default_666:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-default.c'
    sources: {binary: kernels-default.s, cflags: "-std=c++14 -fopenacc -O2 -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_kernels-double-reduction-n_137:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-double-reduction-n.c'
    sources: {binary: kernels-double-reduction-n.s, cflags: "-fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-double-reduction-n_304:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-double-reduction-n.c'
    sources: {binary: kernels-double-reduction-n.s, cflags: "-std=c++98 -fopenacc
        -O2 -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-double-reduction-n_305:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-double-reduction-n.c'
    sources: {binary: kernels-double-reduction-n.s, cflags: "-std=c++11 -fopenacc
        -O2 -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-double-reduction-n_306:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-double-reduction-n.c'
    sources: {binary: kernels-double-reduction-n.s, cflags: "-std=c++14 -fopenacc
        -O2 -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-double-reduction-n_41:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-double-reduction-n.c'
    sources: {binary: kernels-double-reduction-n.s, cflags: "-fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-double-reduction-n_500:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-double-reduction-n.c'
    sources: {binary: kernels-double-reduction-n.s, cflags: "-fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-double-reduction-n_667:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-double-reduction-n.c'
    sources: {binary: kernels-double-reduction-n.s, cflags: "-std=c++98 -fopenacc
        -O2 -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-double-reduction-n_668:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-double-reduction-n.c'
    sources: {binary: kernels-double-reduction-n.s, cflags: "-std=c++11 -fopenacc
        -O2 -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-double-reduction-n_669:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-double-reduction-n.c'
    sources: {binary: kernels-double-reduction-n.s, cflags: "-std=c++14 -fopenacc
        -O2 -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-double-reduction_138:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-double-reduction.c'
    sources: {binary: kernels-double-reduction.s, cflags: "-fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-double-reduction_307:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-double-reduction.c'
    sources: {binary: kernels-double-reduction.s, cflags: "-std=c++98 -fopenacc -O2
        -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-double-reduction_308:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-double-reduction.c'
    sources: {binary: kernels-double-reduction.s, cflags: "-std=c++11 -fopenacc -O2
        -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-double-reduction_309:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-double-reduction.c'
    sources: {binary: kernels-double-reduction.s, cflags: "-std=c++14 -fopenacc -O2
        -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-double-reduction_42:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-double-reduction.c'
    sources: {binary: kernels-double-reduction.s, cflags: "-fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-double-reduction_501:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-double-reduction.c'
    sources: {binary: kernels-double-reduction.s, cflags: "-fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-double-reduction_670:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-double-reduction.c'
    sources: {binary: kernels-double-reduction.s, cflags: "-std=c++98 -fopenacc -O2
        -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-double-reduction_671:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-double-reduction.c'
    sources: {binary: kernels-double-reduction.s, cflags: "-std=c++11 -fopenacc -O2
        -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-double-reduction_672:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-double-reduction.c'
    sources: {binary: kernels-double-reduction.s, cflags: "-std=c++14 -fopenacc -O2
        -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-2_139:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-2.c'
    sources: {binary: kernels-loop-2.s, cflags: "-fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-2_310:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-2.c'
    sources: {binary: kernels-loop-2.s, cflags: "-std=c++98 -fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-2_311:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-2.c'
    sources: {binary: kernels-loop-2.s, cflags: "-std=c++11 -fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-2_312:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-2.c'
    sources: {binary: kernels-loop-2.s, cflags: "-std=c++14 -fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-2_43:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-2.c'
    sources: {binary: kernels-loop-2.s, cflags: "-fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-2_502:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-2.c'
    sources: {binary: kernels-loop-2.s, cflags: "-fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-2_673:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-2.c'
    sources: {binary: kernels-loop-2.s, cflags: "-std=c++98 -fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-2_674:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-2.c'
    sources: {binary: kernels-loop-2.s, cflags: "-std=c++11 -fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-2_675:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-2.c'
    sources: {binary: kernels-loop-2.s, cflags: "-std=c++14 -fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-3_140:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-3.c'
    sources: {binary: kernels-loop-3.s, cflags: "-fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-3_313:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-3.c'
    sources: {binary: kernels-loop-3.s, cflags: "-std=c++98 -fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-3_314:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-3.c'
    sources: {binary: kernels-loop-3.s, cflags: "-std=c++11 -fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-3_315:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-3.c'
    sources: {binary: kernels-loop-3.s, cflags: "-std=c++14 -fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-3_44:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-3.c'
    sources: {binary: kernels-loop-3.s, cflags: "-fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-3_503:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-3.c'
    sources: {binary: kernels-loop-3.s, cflags: "-fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-3_676:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-3.c'
    sources: {binary: kernels-loop-3.s, cflags: "-std=c++98 -fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-3_677:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-3.c'
    sources: {binary: kernels-loop-3.s, cflags: "-std=c++11 -fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-3_678:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-3.c'
    sources: {binary: kernels-loop-3.s, cflags: "-std=c++14 -fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-g_141:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-g.c'
    sources: {binary: kernels-loop-g.s, cflags: "-fopenacc -O2 -g -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-g_316:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-g.c'
    sources: {binary: kernels-loop-g.s, cflags: "-std=c++98 -fopenacc -O2 -g -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-g_317:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-g.c'
    sources: {binary: kernels-loop-g.s, cflags: "-std=c++11 -fopenacc -O2 -g -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-g_318:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-g.c'
    sources: {binary: kernels-loop-g.s, cflags: "-std=c++14 -fopenacc -O2 -g -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-g_45:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-g.c'
    sources: {binary: kernels-loop-g.s, cflags: "-fopenacc -O2 -g -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-g_504:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-g.c'
    sources: {binary: kernels-loop-g.s, cflags: "-fopenacc -O2 -g -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-g_679:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-g.c'
    sources: {binary: kernels-loop-g.s, cflags: "-std=c++98 -fopenacc -O2 -g -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-g_680:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-g.c'
    sources: {binary: kernels-loop-g.s, cflags: "-std=c++11 -fopenacc -O2 -g -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-g_681:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-g.c'
    sources: {binary: kernels-loop-g.s, cflags: "-std=c++14 -fopenacc -O2 -g -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-mod-not-zero_142:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-mod-not-zero.c'
    sources: {binary: kernels-loop-mod-not-zero.s, cflags: "-fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-mod-not-zero_319:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-mod-not-zero.c'
    sources: {binary: kernels-loop-mod-not-zero.s, cflags: "-std=c++98 -fopenacc -O2
        -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-mod-not-zero_320:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-mod-not-zero.c'
    sources: {binary: kernels-loop-mod-not-zero.s, cflags: "-std=c++11 -fopenacc -O2
        -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-mod-not-zero_321:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-mod-not-zero.c'
    sources: {binary: kernels-loop-mod-not-zero.s, cflags: "-std=c++14 -fopenacc -O2
        -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-mod-not-zero_46:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-mod-not-zero.c'
    sources: {binary: kernels-loop-mod-not-zero.s, cflags: "-fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-mod-not-zero_505:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-mod-not-zero.c'
    sources: {binary: kernels-loop-mod-not-zero.s, cflags: "-fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-mod-not-zero_682:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-mod-not-zero.c'
    sources: {binary: kernels-loop-mod-not-zero.s, cflags: "-std=c++98 -fopenacc -O2
        -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-mod-not-zero_683:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-mod-not-zero.c'
    sources: {binary: kernels-loop-mod-not-zero.s, cflags: "-std=c++11 -fopenacc -O2
        -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-mod-not-zero_684:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-mod-not-zero.c'
    sources: {binary: kernels-loop-mod-not-zero.s, cflags: "-std=c++14 -fopenacc -O2
        -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-n_143:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-n.c'
    sources: {binary: kernels-loop-n.s, cflags: "-fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-n_322:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-n.c'
    sources: {binary: kernels-loop-n.s, cflags: "-std=c++98 -fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-n_323:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-n.c'
    sources: {binary: kernels-loop-n.s, cflags: "-std=c++11 -fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-n_324:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-n.c'
    sources: {binary: kernels-loop-n.s, cflags: "-std=c++14 -fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-n_47:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-n.c'
    sources: {binary: kernels-loop-n.s, cflags: "-fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-n_506:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-n.c'
    sources: {binary: kernels-loop-n.s, cflags: "-fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-n_685:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-n.c'
    sources: {binary: kernels-loop-n.s, cflags: "-std=c++98 -fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-n_686:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-n.c'
    sources: {binary: kernels-loop-n.s, cflags: "-std=c++11 -fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-n_687:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-n.c'
    sources: {binary: kernels-loop-n.s, cflags: "-std=c++14 -fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-nest_144:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-nest.c'
    sources: {binary: kernels-loop-nest.s, cflags: "-fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-nest_325:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-nest.c'
    sources: {binary: kernels-loop-nest.s, cflags: "-std=c++98 -fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-nest_326:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-nest.c'
    sources: {binary: kernels-loop-nest.s, cflags: "-std=c++11 -fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-nest_327:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-nest.c'
    sources: {binary: kernels-loop-nest.s, cflags: "-std=c++14 -fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-nest_48:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-nest.c'
    sources: {binary: kernels-loop-nest.s, cflags: "-fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-nest_507:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-nest.c'
    sources: {binary: kernels-loop-nest.s, cflags: "-fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-nest_688:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-nest.c'
    sources: {binary: kernels-loop-nest.s, cflags: "-std=c++98 -fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-nest_689:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-nest.c'
    sources: {binary: kernels-loop-nest.s, cflags: "-std=c++11 -fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop-nest_690:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop-nest.c'
    sources: {binary: kernels-loop-nest.s, cflags: "-std=c++14 -fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop_145:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop.c'
    sources: {binary: kernels-loop.s, cflags: "-fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop_328:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop.c'
    sources: {binary: kernels-loop.s, cflags: "-std=c++98 -fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop_329:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop.c'
    sources: {binary: kernels-loop.s, cflags: "-std=c++11 -fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop_330:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop.c'
    sources: {binary: kernels-loop.s, cflags: "-std=c++14 -fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop_49:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop.c'
    sources: {binary: kernels-loop.s, cflags: "-fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop_508:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop.c'
    sources: {binary: kernels-loop.s, cflags: "-fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop_691:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop.c'
    sources: {binary: kernels-loop.s, cflags: "-std=c++98 -fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop_692:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop.c'
    sources: {binary: kernels-loop.s, cflags: "-std=c++11 -fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-loop_693:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-loop.c'
    sources: {binary: kernels-loop.s, cflags: "-std=c++14 -fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-one-counter-var_146:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-one-counter-var.c'
    sources: {binary: kernels-one-counter-var.s, cflags: "-fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-one-counter-var_331:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-one-counter-var.c'
    sources: {binary: kernels-one-counter-var.s, cflags: "-std=c++98 -fopenacc -O2
        -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-one-counter-var_332:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-one-counter-var.c'
    sources: {binary: kernels-one-counter-var.s, cflags: "-std=c++11 -fopenacc -O2
        -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-one-counter-var_333:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-one-counter-var.c'
    sources: {binary: kernels-one-counter-var.s, cflags: "-std=c++14 -fopenacc -O2
        -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-one-counter-var_50:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-one-counter-var.c'
    sources: {binary: kernels-one-counter-var.s, cflags: "-fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-one-counter-var_509:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-one-counter-var.c'
    sources: {binary: kernels-one-counter-var.s, cflags: "-fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-one-counter-var_694:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-one-counter-var.c'
    sources: {binary: kernels-one-counter-var.s, cflags: "-std=c++98 -fopenacc -O2
        -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-one-counter-var_695:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-one-counter-var.c'
    sources: {binary: kernels-one-counter-var.s, cflags: "-std=c++11 -fopenacc -O2
        -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-one-counter-var_696:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-one-counter-var.c'
    sources: {binary: kernels-one-counter-var.s, cflags: "-std=c++14 -fopenacc -O2
        -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-reduction_147:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-reduction.c'
    sources: {binary: kernels-reduction.s, cflags: "-fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-reduction_334:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-reduction.c'
    sources: {binary: kernels-reduction.s, cflags: "-std=c++98 -fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-reduction_335:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-reduction.c'
    sources: {binary: kernels-reduction.s, cflags: "-std=c++11 -fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-reduction_336:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-reduction.c'
    sources: {binary: kernels-reduction.s, cflags: "-std=c++14 -fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-reduction_51:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-reduction.c'
    sources: {binary: kernels-reduction.s, cflags: "-fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-reduction_510:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-reduction.c'
    sources: {binary: kernels-reduction.s, cflags: "-fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-reduction_697:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-reduction.c'
    sources: {binary: kernels-reduction.s, cflags: "-std=c++98 -fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-reduction_698:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-reduction.c'
    sources: {binary: kernels-reduction.s, cflags: "-std=c++11 -fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_kernels-reduction_699:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/kernels-reduction.c'
    sources: {binary: kernels-reduction.s, cflags: "-std=c++14 -fopenacc -O2 -fdump-tree-parloops1-all
        -fdump-tree-optimized\n -S"}
  group: GRPSERIAL
test_loop-1_148:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-1.c'
    sources: {binary: loop-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          iteration declaration or initialization")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break
          statement used")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          statement expected")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          statement expected")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          type for iteration variable")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break
          statement used")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          statement expected")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          statement expected")[^\n]*\n?)+'}
test_loop-1_337:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-1.c'
    sources: {binary: loop-1.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          iteration declaration or initialization")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break
          statement used")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          statement expected")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          statement expected")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          type for iteration variable")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break
          statement used")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          statement expected")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          statement expected")[^\n]*\n?)+'}
test_loop-1_338:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-1.c'
    sources: {binary: loop-1.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          iteration declaration or initialization")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break
          statement used")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          statement expected")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          statement expected")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          type for iteration variable")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break
          statement used")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          statement expected")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          statement expected")[^\n]*\n?)+'}
test_loop-1_339:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-1.c'
    sources: {binary: loop-1.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          iteration declaration or initialization")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break
          statement used")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          statement expected")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          statement expected")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          type for iteration variable")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break
          statement used")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          statement expected")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          statement expected")[^\n]*\n?)+'}
test_loop-1_511:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-1.c'
    sources: {binary: loop-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          iteration declaration or initialization")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break
          statement used")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          statement expected")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          statement expected")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          type for iteration variable")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break
          statement used")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          statement expected")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          statement expected")[^\n]*\n?)+'}
test_loop-1_52:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-1.c'
    sources: {binary: loop-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          iteration declaration or initialization")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break
          statement used")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          statement expected")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          statement expected")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          type for iteration variable")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break
          statement used")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          statement expected")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          statement expected")[^\n]*\n?)+'}
test_loop-1_700:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-1.c'
    sources: {binary: loop-1.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          iteration declaration or initialization")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break
          statement used")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          statement expected")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          statement expected")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          type for iteration variable")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break
          statement used")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          statement expected")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          statement expected")[^\n]*\n?)+'}
test_loop-1_701:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-1.c'
    sources: {binary: loop-1.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          iteration declaration or initialization")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break
          statement used")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          statement expected")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          statement expected")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          type for iteration variable")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break
          statement used")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          statement expected")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          statement expected")[^\n]*\n?)+'}
test_loop-1_702:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-1.c'
    sources: {binary: loop-1.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          iteration declaration or initialization")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break
          statement used")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          statement expected")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          statement expected")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          type for iteration variable")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break
          statement used")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          statement expected")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          statement expected")[^\n]*\n?)+'}
test_loop-2-kernels_149:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-2-kernels.c'
    sources: {binary: loop-2-kernels.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L106: {expect: true, expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L109: {expect: true, expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L112: {expect: true, expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L148: {expect: true, expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L149: {expect: true, expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L164: {expect: true, expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L177: {expect: true, expr: '(^|\n)([^\n]+:177:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L180: {expect: true, expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L181: {expect: true, expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L183: {expect: true, expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L186: {expect: true, expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
test_loop-2-kernels_340:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-2-kernels.c'
    sources: {binary: loop-2-kernels.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L106: {expect: true, expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L109: {expect: true, expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L112: {expect: true, expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L148: {expect: true, expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L149: {expect: true, expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L164: {expect: true, expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L177: {expect: true, expr: '(^|\n)([^\n]+:177:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L180: {expect: true, expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L181: {expect: true, expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L183: {expect: true, expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L186: {expect: true, expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
test_loop-2-kernels_341:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-2-kernels.c'
    sources: {binary: loop-2-kernels.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L106: {expect: true, expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L109: {expect: true, expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L112: {expect: true, expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L148: {expect: true, expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L149: {expect: true, expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L164: {expect: true, expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L177: {expect: true, expr: '(^|\n)([^\n]+:177:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L180: {expect: true, expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L181: {expect: true, expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L183: {expect: true, expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L186: {expect: true, expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
test_loop-2-kernels_342:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-2-kernels.c'
    sources: {binary: loop-2-kernels.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L106: {expect: true, expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L109: {expect: true, expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L112: {expect: true, expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L148: {expect: true, expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L149: {expect: true, expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L164: {expect: true, expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L177: {expect: true, expr: '(^|\n)([^\n]+:177:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L180: {expect: true, expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L181: {expect: true, expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L183: {expect: true, expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L186: {expect: true, expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
test_loop-2-kernels_512:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-2-kernels.c'
    sources: {binary: loop-2-kernels.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L106: {expect: true, expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L109: {expect: true, expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L112: {expect: true, expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L148: {expect: true, expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L149: {expect: true, expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L164: {expect: true, expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L177: {expect: true, expr: '(^|\n)([^\n]+:177:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L180: {expect: true, expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L181: {expect: true, expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L183: {expect: true, expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L186: {expect: true, expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
test_loop-2-kernels_53:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-2-kernels.c'
    sources: {binary: loop-2-kernels.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L106: {expect: true, expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L109: {expect: true, expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L112: {expect: true, expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L148: {expect: true, expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L149: {expect: true, expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L164: {expect: true, expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L177: {expect: true, expr: '(^|\n)([^\n]+:177:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L180: {expect: true, expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L181: {expect: true, expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L183: {expect: true, expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L186: {expect: true, expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
test_loop-2-kernels_703:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-2-kernels.c'
    sources: {binary: loop-2-kernels.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L106: {expect: true, expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L109: {expect: true, expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L112: {expect: true, expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L148: {expect: true, expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L149: {expect: true, expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L164: {expect: true, expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L177: {expect: true, expr: '(^|\n)([^\n]+:177:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L180: {expect: true, expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L181: {expect: true, expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L183: {expect: true, expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L186: {expect: true, expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
test_loop-2-kernels_704:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-2-kernels.c'
    sources: {binary: loop-2-kernels.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L106: {expect: true, expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L109: {expect: true, expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L112: {expect: true, expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L148: {expect: true, expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L149: {expect: true, expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L164: {expect: true, expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L177: {expect: true, expr: '(^|\n)([^\n]+:177:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L180: {expect: true, expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L181: {expect: true, expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L183: {expect: true, expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L186: {expect: true, expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
test_loop-2-kernels_705:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-2-kernels.c'
    sources: {binary: loop-2-kernels.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L106: {expect: true, expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L109: {expect: true, expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L112: {expect: true, expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L148: {expect: true, expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L149: {expect: true, expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L164: {expect: true, expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L177: {expect: true, expr: '(^|\n)([^\n]+:177:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L180: {expect: true, expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L181: {expect: true, expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L183: {expect: true, expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L186: {expect: true, expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
test_loop-2-parallel_150:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-2-parallel.c'
    sources: {binary: loop-2-parallel.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L118: {expect: true, expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L126: {expect: true, expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L137: {expect: true, expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L138: {expect: true, expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L154: {expect: true, expr: '(^|\n)([^\n]+:154:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L156: {expect: true, expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L157: {expect: true, expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L159: {expect: true, expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L160: {expect: true, expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incorrectly
          nested")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incorrectly
          nested")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incorrectly
          nested")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
test_loop-2-parallel_343:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-2-parallel.c'
    sources: {binary: loop-2-parallel.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L118: {expect: true, expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L126: {expect: true, expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L137: {expect: true, expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L138: {expect: true, expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L154: {expect: true, expr: '(^|\n)([^\n]+:154:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L156: {expect: true, expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L157: {expect: true, expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L159: {expect: true, expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L160: {expect: true, expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incorrectly
          nested")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incorrectly
          nested")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incorrectly
          nested")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
test_loop-2-parallel_344:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-2-parallel.c'
    sources: {binary: loop-2-parallel.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L118: {expect: true, expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L126: {expect: true, expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L137: {expect: true, expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L138: {expect: true, expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L154: {expect: true, expr: '(^|\n)([^\n]+:154:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L156: {expect: true, expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L157: {expect: true, expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L159: {expect: true, expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L160: {expect: true, expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incorrectly
          nested")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incorrectly
          nested")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incorrectly
          nested")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
test_loop-2-parallel_345:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-2-parallel.c'
    sources: {binary: loop-2-parallel.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L118: {expect: true, expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L126: {expect: true, expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L137: {expect: true, expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L138: {expect: true, expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L154: {expect: true, expr: '(^|\n)([^\n]+:154:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L156: {expect: true, expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L157: {expect: true, expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L159: {expect: true, expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L160: {expect: true, expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incorrectly
          nested")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incorrectly
          nested")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incorrectly
          nested")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
test_loop-2-parallel_513:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-2-parallel.c'
    sources: {binary: loop-2-parallel.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L118: {expect: true, expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L126: {expect: true, expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L137: {expect: true, expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L138: {expect: true, expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L154: {expect: true, expr: '(^|\n)([^\n]+:154:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L156: {expect: true, expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L157: {expect: true, expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L159: {expect: true, expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L160: {expect: true, expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incorrectly
          nested")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incorrectly
          nested")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incorrectly
          nested")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
test_loop-2-parallel_54:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-2-parallel.c'
    sources: {binary: loop-2-parallel.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L118: {expect: true, expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L126: {expect: true, expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L137: {expect: true, expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L138: {expect: true, expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L154: {expect: true, expr: '(^|\n)([^\n]+:154:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L156: {expect: true, expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L157: {expect: true, expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L159: {expect: true, expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L160: {expect: true, expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incorrectly
          nested")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incorrectly
          nested")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incorrectly
          nested")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
test_loop-2-parallel_706:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-2-parallel.c'
    sources: {binary: loop-2-parallel.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L118: {expect: true, expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L126: {expect: true, expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L137: {expect: true, expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L138: {expect: true, expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L154: {expect: true, expr: '(^|\n)([^\n]+:154:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L156: {expect: true, expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L157: {expect: true, expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L159: {expect: true, expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L160: {expect: true, expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incorrectly
          nested")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incorrectly
          nested")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incorrectly
          nested")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
test_loop-2-parallel_707:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-2-parallel.c'
    sources: {binary: loop-2-parallel.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L118: {expect: true, expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L126: {expect: true, expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L137: {expect: true, expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L138: {expect: true, expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L154: {expect: true, expr: '(^|\n)([^\n]+:154:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L156: {expect: true, expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L157: {expect: true, expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L159: {expect: true, expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L160: {expect: true, expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incorrectly
          nested")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incorrectly
          nested")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incorrectly
          nested")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
test_loop-2-parallel_708:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-2-parallel.c'
    sources: {binary: loop-2-parallel.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L118: {expect: true, expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L126: {expect: true, expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L137: {expect: true, expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L138: {expect: true, expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L154: {expect: true, expr: '(^|\n)([^\n]+:154:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L156: {expect: true, expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L157: {expect: true, expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L159: {expect: true, expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L160: {expect: true, expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incorrectly
          nested")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inner
          loop uses same")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incorrectly
          nested")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incorrectly
          nested")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''seq\''
          overrides")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''auto\''
          conflicts")[^\n]*\n?)+'}
test_loop-3_151:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-3.c'
    sources: {binary: loop-3.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
test_loop-3_346:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-3.c'
    sources: {binary: loop-3.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
test_loop-3_347:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-3.c'
    sources: {binary: loop-3.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
test_loop-3_348:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-3.c'
    sources: {binary: loop-3.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
test_loop-3_514:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-3.c'
    sources: {binary: loop-3.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
test_loop-3_55:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-3.c'
    sources: {binary: loop-3.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
test_loop-3_709:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-3.c'
    sources: {binary: loop-3.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
test_loop-3_710:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-3.c'
    sources: {binary: loop-3.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
test_loop-3_711:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-3.c'
    sources: {binary: loop-3.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument
          not permitted")[^\n]*\n?)+'}
test_loop-auto-1_152:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-auto-1.c'
    sources: {binary: loop-auto-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L104: {expect: true, expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L114: {expect: true, expr: '(^|\n)([^\n]+(:114:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L145: {expect: true, expr: '(^|\n)([^\n]+(:145:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L179: {expect: true, expr: '(^|\n)([^\n]+(:179:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L189: {expect: true, expr: '(^|\n)([^\n]+(:189:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L207: {expect: true, expr: '(^|\n)([^\n]+(:207:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L225: {expect: true, expr: '(^|\n)([^\n]+(:225:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L232: {expect: true, expr: '(^|\n)([^\n]+(:232:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L243: {expect: true, expr: '(^|\n)([^\n]+(:243:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
test_loop-auto-1_349:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-auto-1.c'
    sources: {binary: loop-auto-1.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L104: {expect: true, expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L114: {expect: true, expr: '(^|\n)([^\n]+(:114:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L145: {expect: true, expr: '(^|\n)([^\n]+(:145:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L179: {expect: true, expr: '(^|\n)([^\n]+(:179:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L189: {expect: true, expr: '(^|\n)([^\n]+(:189:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L207: {expect: true, expr: '(^|\n)([^\n]+(:207:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L225: {expect: true, expr: '(^|\n)([^\n]+(:225:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L232: {expect: true, expr: '(^|\n)([^\n]+(:232:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L243: {expect: true, expr: '(^|\n)([^\n]+(:243:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
test_loop-auto-1_350:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-auto-1.c'
    sources: {binary: loop-auto-1.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L104: {expect: true, expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L114: {expect: true, expr: '(^|\n)([^\n]+(:114:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L145: {expect: true, expr: '(^|\n)([^\n]+(:145:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L179: {expect: true, expr: '(^|\n)([^\n]+(:179:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L189: {expect: true, expr: '(^|\n)([^\n]+(:189:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L207: {expect: true, expr: '(^|\n)([^\n]+(:207:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L225: {expect: true, expr: '(^|\n)([^\n]+(:225:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L232: {expect: true, expr: '(^|\n)([^\n]+(:232:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L243: {expect: true, expr: '(^|\n)([^\n]+(:243:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
test_loop-auto-1_351:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-auto-1.c'
    sources: {binary: loop-auto-1.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L104: {expect: true, expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L114: {expect: true, expr: '(^|\n)([^\n]+(:114:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L145: {expect: true, expr: '(^|\n)([^\n]+(:145:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L179: {expect: true, expr: '(^|\n)([^\n]+(:179:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L189: {expect: true, expr: '(^|\n)([^\n]+(:189:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L207: {expect: true, expr: '(^|\n)([^\n]+(:207:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L225: {expect: true, expr: '(^|\n)([^\n]+(:225:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L232: {expect: true, expr: '(^|\n)([^\n]+(:232:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L243: {expect: true, expr: '(^|\n)([^\n]+(:243:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
test_loop-auto-1_515:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-auto-1.c'
    sources: {binary: loop-auto-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L104: {expect: true, expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L114: {expect: true, expr: '(^|\n)([^\n]+(:114:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L145: {expect: true, expr: '(^|\n)([^\n]+(:145:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L179: {expect: true, expr: '(^|\n)([^\n]+(:179:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L189: {expect: true, expr: '(^|\n)([^\n]+(:189:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L207: {expect: true, expr: '(^|\n)([^\n]+(:207:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L225: {expect: true, expr: '(^|\n)([^\n]+(:225:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L232: {expect: true, expr: '(^|\n)([^\n]+(:232:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L243: {expect: true, expr: '(^|\n)([^\n]+(:243:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
test_loop-auto-1_56:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-auto-1.c'
    sources: {binary: loop-auto-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L104: {expect: true, expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L114: {expect: true, expr: '(^|\n)([^\n]+(:114:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L145: {expect: true, expr: '(^|\n)([^\n]+(:145:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L179: {expect: true, expr: '(^|\n)([^\n]+(:179:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L189: {expect: true, expr: '(^|\n)([^\n]+(:189:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L207: {expect: true, expr: '(^|\n)([^\n]+(:207:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L225: {expect: true, expr: '(^|\n)([^\n]+(:225:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L232: {expect: true, expr: '(^|\n)([^\n]+(:232:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L243: {expect: true, expr: '(^|\n)([^\n]+(:243:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
test_loop-auto-1_712:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-auto-1.c'
    sources: {binary: loop-auto-1.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L104: {expect: true, expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L114: {expect: true, expr: '(^|\n)([^\n]+(:114:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L145: {expect: true, expr: '(^|\n)([^\n]+(:145:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L179: {expect: true, expr: '(^|\n)([^\n]+(:179:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L189: {expect: true, expr: '(^|\n)([^\n]+(:189:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L207: {expect: true, expr: '(^|\n)([^\n]+(:207:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L225: {expect: true, expr: '(^|\n)([^\n]+(:225:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L232: {expect: true, expr: '(^|\n)([^\n]+(:232:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L243: {expect: true, expr: '(^|\n)([^\n]+(:243:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
test_loop-auto-1_713:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-auto-1.c'
    sources: {binary: loop-auto-1.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L104: {expect: true, expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L114: {expect: true, expr: '(^|\n)([^\n]+(:114:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L145: {expect: true, expr: '(^|\n)([^\n]+(:145:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L179: {expect: true, expr: '(^|\n)([^\n]+(:179:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L189: {expect: true, expr: '(^|\n)([^\n]+(:189:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L207: {expect: true, expr: '(^|\n)([^\n]+(:207:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L225: {expect: true, expr: '(^|\n)([^\n]+(:225:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L232: {expect: true, expr: '(^|\n)([^\n]+(:232:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L243: {expect: true, expr: '(^|\n)([^\n]+(:243:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
test_loop-auto-1_714:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-auto-1.c'
    sources: {binary: loop-auto-1.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L104: {expect: true, expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L114: {expect: true, expr: '(^|\n)([^\n]+(:114:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L145: {expect: true, expr: '(^|\n)([^\n]+(:145:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L179: {expect: true, expr: '(^|\n)([^\n]+(:179:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L189: {expect: true, expr: '(^|\n)([^\n]+(:189:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L207: {expect: true, expr: '(^|\n)([^\n]+(:207:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L225: {expect: true, expr: '(^|\n)([^\n]+(:225:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L232: {expect: true, expr: '(^|\n)([^\n]+(:232:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L243: {expect: true, expr: '(^|\n)([^\n]+(:243:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
test_loop-auto-2_153:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-auto-2.c'
    sources: {binary: loop-auto-2.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L101: {expect: true, expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("uses
          same")[^\n]*\n?)+'}
      L75: {expect: true, expr: '(^|\n)([^\n]+(:75:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incorrectly
          nested")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
test_loop-auto-2_352:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-auto-2.c'
    sources: {binary: loop-auto-2.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L101: {expect: true, expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("uses
          same")[^\n]*\n?)+'}
      L75: {expect: true, expr: '(^|\n)([^\n]+(:75:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incorrectly
          nested")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
test_loop-auto-2_353:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-auto-2.c'
    sources: {binary: loop-auto-2.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L101: {expect: true, expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("uses
          same")[^\n]*\n?)+'}
      L75: {expect: true, expr: '(^|\n)([^\n]+(:75:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incorrectly
          nested")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
test_loop-auto-2_354:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-auto-2.c'
    sources: {binary: loop-auto-2.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L101: {expect: true, expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("uses
          same")[^\n]*\n?)+'}
      L75: {expect: true, expr: '(^|\n)([^\n]+(:75:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incorrectly
          nested")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
test_loop-auto-2_516:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-auto-2.c'
    sources: {binary: loop-auto-2.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L101: {expect: true, expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("uses
          same")[^\n]*\n?)+'}
      L75: {expect: true, expr: '(^|\n)([^\n]+(:75:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incorrectly
          nested")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
test_loop-auto-2_57:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-auto-2.c'
    sources: {binary: loop-auto-2.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L101: {expect: true, expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("uses
          same")[^\n]*\n?)+'}
      L75: {expect: true, expr: '(^|\n)([^\n]+(:75:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incorrectly
          nested")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
test_loop-auto-2_715:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-auto-2.c'
    sources: {binary: loop-auto-2.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L101: {expect: true, expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("uses
          same")[^\n]*\n?)+'}
      L75: {expect: true, expr: '(^|\n)([^\n]+(:75:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incorrectly
          nested")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
test_loop-auto-2_716:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-auto-2.c'
    sources: {binary: loop-auto-2.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L101: {expect: true, expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("uses
          same")[^\n]*\n?)+'}
      L75: {expect: true, expr: '(^|\n)([^\n]+(:75:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incorrectly
          nested")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
test_loop-auto-2_717:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-auto-2.c'
    sources: {binary: loop-auto-2.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L101: {expect: true, expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("uses
          same")[^\n]*\n?)+'}
      L75: {expect: true, expr: '(^|\n)([^\n]+(:75:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incorrectly
          nested")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
test_loop-clauses_154:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-clauses.c'
    sources: {binary: loop-clauses.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_loop-clauses_355:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-clauses.c'
    sources: {binary: loop-clauses.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
test_loop-clauses_356:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-clauses.c'
    sources: {binary: loop-clauses.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
test_loop-clauses_357:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-clauses.c'
    sources: {binary: loop-clauses.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
test_loop-clauses_517:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-clauses.c'
    sources: {binary: loop-clauses.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_loop-clauses_58:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-clauses.c'
    sources: {binary: loop-clauses.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_loop-clauses_718:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-clauses.c'
    sources: {binary: loop-clauses.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
test_loop-clauses_719:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-clauses.c'
    sources: {binary: loop-clauses.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
test_loop-clauses_720:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-clauses.c'
    sources: {binary: loop-clauses.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
test_loop-private-1_155:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-private-1.c'
    sources: {binary: loop-private-1.s, cflags: "-fopenacc -fdump-tree-gimple\n -S"}
  group: GRPSERIAL
test_loop-private-1_358:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-private-1.c'
    sources: {binary: loop-private-1.s, cflags: "-std=c++98 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_loop-private-1_359:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-private-1.c'
    sources: {binary: loop-private-1.s, cflags: "-std=c++11 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_loop-private-1_360:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-private-1.c'
    sources: {binary: loop-private-1.s, cflags: "-std=c++14 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_loop-private-1_518:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-private-1.c'
    sources: {binary: loop-private-1.s, cflags: "-fopenacc -fdump-tree-gimple\n -S"}
  group: GRPSERIAL
test_loop-private-1_59:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-private-1.c'
    sources: {binary: loop-private-1.s, cflags: "-fopenacc -fdump-tree-gimple\n -S"}
  group: GRPSERIAL
test_loop-private-1_721:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-private-1.c'
    sources: {binary: loop-private-1.s, cflags: "-std=c++98 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_loop-private-1_722:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-private-1.c'
    sources: {binary: loop-private-1.s, cflags: "-std=c++11 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_loop-private-1_723:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-private-1.c'
    sources: {binary: loop-private-1.s, cflags: "-std=c++14 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_loop-shape_156:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-shape.c'
    sources: {binary: loop-shape.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L148: {expect: true, expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L168: {expect: true, expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L183: {expect: true, expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L188: {expect: true, expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L208: {expect: true, expr: '(^|\n)([^\n]+:208:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L213: {expect: true, expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L218: {expect: true, expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L223: {expect: true, expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L228: {expect: true, expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L233: {expect: true, expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L238: {expect: true, expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L243: {expect: true, expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L248: {expect: true, expr: '(^|\n)([^\n]+(:248:)[^\n]*[0-9]+: warning:[^\n]*("")[^\n]*\n?)+'}
      L253: {expect: true, expr: '(^|\n)([^\n]+:253:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L258: {expect: true, expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L263: {expect: true, expr: '(^|\n)([^\n]+:263:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L268: {expect: true, expr: '(^|\n)([^\n]+:268:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L273: {expect: true, expr: '(^|\n)([^\n]+:273:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L278: {expect: true, expr: '(^|\n)([^\n]+:278:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L283: {expect: true, expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L288: {expect: true, expr: '(^|\n)([^\n]+:288:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L293: {expect: true, expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L298: {expect: true, expr: '(^|\n)([^\n]+:298:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L303: {expect: true, expr: '(^|\n)([^\n]+:303:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L308: {expect: true, expr: '(^|\n)([^\n]+:308:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L313: {expect: true, expr: '(^|\n)([^\n]+:313:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L318: {expect: true, expr: '(^|\n)([^\n]+:318:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_loop-shape_361:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-shape.c'
    sources: {binary: loop-shape.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L148: {expect: true, expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L168: {expect: true, expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L183: {expect: true, expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L188: {expect: true, expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L208: {expect: true, expr: '(^|\n)([^\n]+:208:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L213: {expect: true, expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L218: {expect: true, expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L223: {expect: true, expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L228: {expect: true, expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L233: {expect: true, expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L238: {expect: true, expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L243: {expect: true, expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L248: {expect: true, expr: '(^|\n)([^\n]+(:248:)[^\n]*[0-9]+: warning:[^\n]*("")[^\n]*\n?)+'}
      L253: {expect: true, expr: '(^|\n)([^\n]+:253:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L258: {expect: true, expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L263: {expect: true, expr: '(^|\n)([^\n]+:263:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L268: {expect: true, expr: '(^|\n)([^\n]+:268:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L273: {expect: true, expr: '(^|\n)([^\n]+:273:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L278: {expect: true, expr: '(^|\n)([^\n]+:278:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L283: {expect: true, expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L288: {expect: true, expr: '(^|\n)([^\n]+:288:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L293: {expect: true, expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L298: {expect: true, expr: '(^|\n)([^\n]+:298:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L303: {expect: true, expr: '(^|\n)([^\n]+:303:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L308: {expect: true, expr: '(^|\n)([^\n]+:308:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L313: {expect: true, expr: '(^|\n)([^\n]+:313:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L318: {expect: true, expr: '(^|\n)([^\n]+:318:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_loop-shape_362:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-shape.c'
    sources: {binary: loop-shape.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L148: {expect: true, expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L168: {expect: true, expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L183: {expect: true, expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L188: {expect: true, expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L208: {expect: true, expr: '(^|\n)([^\n]+:208:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L213: {expect: true, expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L218: {expect: true, expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L223: {expect: true, expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L228: {expect: true, expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L233: {expect: true, expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L238: {expect: true, expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L243: {expect: true, expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L248: {expect: true, expr: '(^|\n)([^\n]+(:248:)[^\n]*[0-9]+: warning:[^\n]*("")[^\n]*\n?)+'}
      L253: {expect: true, expr: '(^|\n)([^\n]+:253:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L258: {expect: true, expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L263: {expect: true, expr: '(^|\n)([^\n]+:263:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L268: {expect: true, expr: '(^|\n)([^\n]+:268:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L273: {expect: true, expr: '(^|\n)([^\n]+:273:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L278: {expect: true, expr: '(^|\n)([^\n]+:278:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L283: {expect: true, expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L288: {expect: true, expr: '(^|\n)([^\n]+:288:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L293: {expect: true, expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L298: {expect: true, expr: '(^|\n)([^\n]+:298:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L303: {expect: true, expr: '(^|\n)([^\n]+:303:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L308: {expect: true, expr: '(^|\n)([^\n]+:308:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L313: {expect: true, expr: '(^|\n)([^\n]+:313:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L318: {expect: true, expr: '(^|\n)([^\n]+:318:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_loop-shape_363:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-shape.c'
    sources: {binary: loop-shape.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L148: {expect: true, expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L168: {expect: true, expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L183: {expect: true, expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L188: {expect: true, expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L208: {expect: true, expr: '(^|\n)([^\n]+:208:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L213: {expect: true, expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L218: {expect: true, expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L223: {expect: true, expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L228: {expect: true, expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L233: {expect: true, expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L238: {expect: true, expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L243: {expect: true, expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L248: {expect: true, expr: '(^|\n)([^\n]+(:248:)[^\n]*[0-9]+: warning:[^\n]*("")[^\n]*\n?)+'}
      L253: {expect: true, expr: '(^|\n)([^\n]+:253:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L258: {expect: true, expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L263: {expect: true, expr: '(^|\n)([^\n]+:263:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L268: {expect: true, expr: '(^|\n)([^\n]+:268:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L273: {expect: true, expr: '(^|\n)([^\n]+:273:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L278: {expect: true, expr: '(^|\n)([^\n]+:278:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L283: {expect: true, expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L288: {expect: true, expr: '(^|\n)([^\n]+:288:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L293: {expect: true, expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L298: {expect: true, expr: '(^|\n)([^\n]+:298:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L303: {expect: true, expr: '(^|\n)([^\n]+:303:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L308: {expect: true, expr: '(^|\n)([^\n]+:308:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L313: {expect: true, expr: '(^|\n)([^\n]+:313:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L318: {expect: true, expr: '(^|\n)([^\n]+:318:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_loop-shape_519:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-shape.c'
    sources: {binary: loop-shape.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L148: {expect: true, expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L168: {expect: true, expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L183: {expect: true, expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L188: {expect: true, expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L208: {expect: true, expr: '(^|\n)([^\n]+:208:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L213: {expect: true, expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L218: {expect: true, expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L223: {expect: true, expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L228: {expect: true, expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L233: {expect: true, expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L238: {expect: true, expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L243: {expect: true, expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L248: {expect: true, expr: '(^|\n)([^\n]+(:248:)[^\n]*[0-9]+: warning:[^\n]*("")[^\n]*\n?)+'}
      L253: {expect: true, expr: '(^|\n)([^\n]+:253:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L258: {expect: true, expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L263: {expect: true, expr: '(^|\n)([^\n]+:263:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L268: {expect: true, expr: '(^|\n)([^\n]+:268:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L273: {expect: true, expr: '(^|\n)([^\n]+:273:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L278: {expect: true, expr: '(^|\n)([^\n]+:278:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L283: {expect: true, expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L288: {expect: true, expr: '(^|\n)([^\n]+:288:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L293: {expect: true, expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L298: {expect: true, expr: '(^|\n)([^\n]+:298:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L303: {expect: true, expr: '(^|\n)([^\n]+:303:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L308: {expect: true, expr: '(^|\n)([^\n]+:308:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L313: {expect: true, expr: '(^|\n)([^\n]+:313:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L318: {expect: true, expr: '(^|\n)([^\n]+:318:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_loop-shape_60:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-shape.c'
    sources: {binary: loop-shape.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L148: {expect: true, expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L168: {expect: true, expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L183: {expect: true, expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L188: {expect: true, expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L208: {expect: true, expr: '(^|\n)([^\n]+:208:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L213: {expect: true, expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L218: {expect: true, expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L223: {expect: true, expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L228: {expect: true, expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L233: {expect: true, expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L238: {expect: true, expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L243: {expect: true, expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L248: {expect: true, expr: '(^|\n)([^\n]+(:248:)[^\n]*[0-9]+: warning:[^\n]*("")[^\n]*\n?)+'}
      L253: {expect: true, expr: '(^|\n)([^\n]+:253:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L258: {expect: true, expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L263: {expect: true, expr: '(^|\n)([^\n]+:263:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L268: {expect: true, expr: '(^|\n)([^\n]+:268:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L273: {expect: true, expr: '(^|\n)([^\n]+:273:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L278: {expect: true, expr: '(^|\n)([^\n]+:278:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L283: {expect: true, expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L288: {expect: true, expr: '(^|\n)([^\n]+:288:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L293: {expect: true, expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L298: {expect: true, expr: '(^|\n)([^\n]+:298:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L303: {expect: true, expr: '(^|\n)([^\n]+:303:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L308: {expect: true, expr: '(^|\n)([^\n]+:308:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L313: {expect: true, expr: '(^|\n)([^\n]+:313:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L318: {expect: true, expr: '(^|\n)([^\n]+:318:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_loop-shape_724:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-shape.c'
    sources: {binary: loop-shape.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L148: {expect: true, expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L168: {expect: true, expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L183: {expect: true, expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L188: {expect: true, expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L208: {expect: true, expr: '(^|\n)([^\n]+:208:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L213: {expect: true, expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L218: {expect: true, expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L223: {expect: true, expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L228: {expect: true, expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L233: {expect: true, expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L238: {expect: true, expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L243: {expect: true, expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L248: {expect: true, expr: '(^|\n)([^\n]+(:248:)[^\n]*[0-9]+: warning:[^\n]*("")[^\n]*\n?)+'}
      L253: {expect: true, expr: '(^|\n)([^\n]+:253:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L258: {expect: true, expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L263: {expect: true, expr: '(^|\n)([^\n]+:263:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L268: {expect: true, expr: '(^|\n)([^\n]+:268:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L273: {expect: true, expr: '(^|\n)([^\n]+:273:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L278: {expect: true, expr: '(^|\n)([^\n]+:278:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L283: {expect: true, expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L288: {expect: true, expr: '(^|\n)([^\n]+:288:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L293: {expect: true, expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L298: {expect: true, expr: '(^|\n)([^\n]+:298:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L303: {expect: true, expr: '(^|\n)([^\n]+:303:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L308: {expect: true, expr: '(^|\n)([^\n]+:308:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L313: {expect: true, expr: '(^|\n)([^\n]+:313:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L318: {expect: true, expr: '(^|\n)([^\n]+:318:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_loop-shape_725:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-shape.c'
    sources: {binary: loop-shape.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L148: {expect: true, expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L168: {expect: true, expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L183: {expect: true, expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L188: {expect: true, expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L208: {expect: true, expr: '(^|\n)([^\n]+:208:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L213: {expect: true, expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L218: {expect: true, expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L223: {expect: true, expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L228: {expect: true, expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L233: {expect: true, expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L238: {expect: true, expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L243: {expect: true, expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L248: {expect: true, expr: '(^|\n)([^\n]+(:248:)[^\n]*[0-9]+: warning:[^\n]*("")[^\n]*\n?)+'}
      L253: {expect: true, expr: '(^|\n)([^\n]+:253:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L258: {expect: true, expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L263: {expect: true, expr: '(^|\n)([^\n]+:263:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L268: {expect: true, expr: '(^|\n)([^\n]+:268:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L273: {expect: true, expr: '(^|\n)([^\n]+:273:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L278: {expect: true, expr: '(^|\n)([^\n]+:278:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L283: {expect: true, expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L288: {expect: true, expr: '(^|\n)([^\n]+:288:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L293: {expect: true, expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L298: {expect: true, expr: '(^|\n)([^\n]+:298:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L303: {expect: true, expr: '(^|\n)([^\n]+:303:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L308: {expect: true, expr: '(^|\n)([^\n]+:308:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L313: {expect: true, expr: '(^|\n)([^\n]+:313:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L318: {expect: true, expr: '(^|\n)([^\n]+:318:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_loop-shape_726:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/loop-shape.c'
    sources: {binary: loop-shape.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L148: {expect: true, expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L168: {expect: true, expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected
          argument")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L183: {expect: true, expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L188: {expect: true, expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L208: {expect: true, expr: '(^|\n)([^\n]+:208:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L213: {expect: true, expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''.\'' before")[^\n]*\n?)+'}
      L218: {expect: true, expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L223: {expect: true, expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L228: {expect: true, expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L233: {expect: true, expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L238: {expect: true, expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L243: {expect: true, expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L248: {expect: true, expr: '(^|\n)([^\n]+(:248:)[^\n]*[0-9]+: warning:[^\n]*("")[^\n]*\n?)+'}
      L253: {expect: true, expr: '(^|\n)([^\n]+:253:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L258: {expect: true, expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L263: {expect: true, expr: '(^|\n)([^\n]+:263:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L268: {expect: true, expr: '(^|\n)([^\n]+:268:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L273: {expect: true, expr: '(^|\n)([^\n]+:273:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L278: {expect: true, expr: '(^|\n)([^\n]+:278:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L283: {expect: true, expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L288: {expect: true, expr: '(^|\n)([^\n]+:288:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L293: {expect: true, expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L298: {expect: true, expr: '(^|\n)([^\n]+:298:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L303: {expect: true, expr: '(^|\n)([^\n]+:303:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L308: {expect: true, expr: '(^|\n)([^\n]+:308:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L313: {expect: true, expr: '(^|\n)([^\n]+:313:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L318: {expect: true, expr: '(^|\n)([^\n]+:318:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_nesting-1_157:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/nesting-1.c'
    sources: {binary: nesting-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_nesting-1_364:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/nesting-1.c'
    sources: {binary: nesting-1.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
test_nesting-1_365:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/nesting-1.c'
    sources: {binary: nesting-1.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
test_nesting-1_366:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/nesting-1.c'
    sources: {binary: nesting-1.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
test_nesting-1_520:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/nesting-1.c'
    sources: {binary: nesting-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_nesting-1_61:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/nesting-1.c'
    sources: {binary: nesting-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_nesting-1_727:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/nesting-1.c'
    sources: {binary: nesting-1.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
test_nesting-1_728:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/nesting-1.c'
    sources: {binary: nesting-1.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
test_nesting-1_729:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/nesting-1.c'
    sources: {binary: nesting-1.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
test_nesting-data-1_158:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/nesting-data-1.c'
    sources: {binary: nesting-data-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_nesting-data-1_367:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/nesting-data-1.c'
    sources: {binary: nesting-data-1.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
test_nesting-data-1_368:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/nesting-data-1.c'
    sources: {binary: nesting-data-1.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
test_nesting-data-1_369:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/nesting-data-1.c'
    sources: {binary: nesting-data-1.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
test_nesting-data-1_521:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/nesting-data-1.c'
    sources: {binary: nesting-data-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_nesting-data-1_62:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/nesting-data-1.c'
    sources: {binary: nesting-data-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_nesting-data-1_730:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/nesting-data-1.c'
    sources: {binary: nesting-data-1.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
test_nesting-data-1_731:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/nesting-data-1.c'
    sources: {binary: nesting-data-1.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
test_nesting-data-1_732:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/nesting-data-1.c'
    sources: {binary: nesting-data-1.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
test_nesting-fail-1_159:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/nesting-fail-1.c'
    sources: {binary: nesting-fail-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".data.
          construct inside of .parallel. region")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".update.
          construct inside of .parallel. region")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".enter/exit
          data. construct inside of .parallel. region")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".enter/exit
          data. construct inside of .parallel. region")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".data.
          construct inside of .kernels. region")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".update.
          construct inside of .kernels. region")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".enter/exit
          data. construct inside of .kernels. region")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".enter/exit
          data. construct inside of .kernels. region")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OpenACC
          region inside of OpenACC routine, nested parallelism not supported yet")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
test_nesting-fail-1_370:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/nesting-fail-1.c'
    sources: {binary: nesting-fail-1.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".data.
          construct inside of .parallel. region")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".update.
          construct inside of .parallel. region")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".enter/exit
          data. construct inside of .parallel. region")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".enter/exit
          data. construct inside of .parallel. region")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".data.
          construct inside of .kernels. region")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".update.
          construct inside of .kernels. region")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".enter/exit
          data. construct inside of .kernels. region")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".enter/exit
          data. construct inside of .kernels. region")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OpenACC
          region inside of OpenACC routine, nested parallelism not supported yet")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
test_nesting-fail-1_371:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/nesting-fail-1.c'
    sources: {binary: nesting-fail-1.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".data.
          construct inside of .parallel. region")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".update.
          construct inside of .parallel. region")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".enter/exit
          data. construct inside of .parallel. region")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".enter/exit
          data. construct inside of .parallel. region")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".data.
          construct inside of .kernels. region")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".update.
          construct inside of .kernels. region")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".enter/exit
          data. construct inside of .kernels. region")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".enter/exit
          data. construct inside of .kernels. region")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OpenACC
          region inside of OpenACC routine, nested parallelism not supported yet")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
test_nesting-fail-1_372:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/nesting-fail-1.c'
    sources: {binary: nesting-fail-1.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".data.
          construct inside of .parallel. region")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".update.
          construct inside of .parallel. region")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".enter/exit
          data. construct inside of .parallel. region")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".enter/exit
          data. construct inside of .parallel. region")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".data.
          construct inside of .kernels. region")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".update.
          construct inside of .kernels. region")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".enter/exit
          data. construct inside of .kernels. region")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".enter/exit
          data. construct inside of .kernels. region")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OpenACC
          region inside of OpenACC routine, nested parallelism not supported yet")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
test_nesting-fail-1_522:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/nesting-fail-1.c'
    sources: {binary: nesting-fail-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".data.
          construct inside of .parallel. region")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".update.
          construct inside of .parallel. region")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".enter/exit
          data. construct inside of .parallel. region")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".enter/exit
          data. construct inside of .parallel. region")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".data.
          construct inside of .kernels. region")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".update.
          construct inside of .kernels. region")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".enter/exit
          data. construct inside of .kernels. region")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".enter/exit
          data. construct inside of .kernels. region")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OpenACC
          region inside of OpenACC routine, nested parallelism not supported yet")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
test_nesting-fail-1_63:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/nesting-fail-1.c'
    sources: {binary: nesting-fail-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".data.
          construct inside of .parallel. region")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".update.
          construct inside of .parallel. region")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".enter/exit
          data. construct inside of .parallel. region")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".enter/exit
          data. construct inside of .parallel. region")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".data.
          construct inside of .kernels. region")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".update.
          construct inside of .kernels. region")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".enter/exit
          data. construct inside of .kernels. region")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".enter/exit
          data. construct inside of .kernels. region")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OpenACC
          region inside of OpenACC routine, nested parallelism not supported yet")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
test_nesting-fail-1_733:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/nesting-fail-1.c'
    sources: {binary: nesting-fail-1.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".data.
          construct inside of .parallel. region")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".update.
          construct inside of .parallel. region")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".enter/exit
          data. construct inside of .parallel. region")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".enter/exit
          data. construct inside of .parallel. region")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".data.
          construct inside of .kernels. region")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".update.
          construct inside of .kernels. region")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".enter/exit
          data. construct inside of .kernels. region")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".enter/exit
          data. construct inside of .kernels. region")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OpenACC
          region inside of OpenACC routine, nested parallelism not supported yet")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
test_nesting-fail-1_734:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/nesting-fail-1.c'
    sources: {binary: nesting-fail-1.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".data.
          construct inside of .parallel. region")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".update.
          construct inside of .parallel. region")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".enter/exit
          data. construct inside of .parallel. region")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".enter/exit
          data. construct inside of .parallel. region")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".data.
          construct inside of .kernels. region")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".update.
          construct inside of .kernels. region")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".enter/exit
          data. construct inside of .kernels. region")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".enter/exit
          data. construct inside of .kernels. region")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OpenACC
          region inside of OpenACC routine, nested parallelism not supported yet")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
test_nesting-fail-1_735:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/nesting-fail-1.c'
    sources: {binary: nesting-fail-1.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".data.
          construct inside of .parallel. region")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".update.
          construct inside of .parallel. region")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".enter/exit
          data. construct inside of .parallel. region")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".enter/exit
          data. construct inside of .parallel. region")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".data.
          construct inside of .kernels. region")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".update.
          construct inside of .kernels. region")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".enter/exit
          data. construct inside of .kernels. region")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".enter/exit
          data. construct inside of .kernels. region")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OpenACC
          region inside of OpenACC routine, nested parallelism not supported yet")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
test_parallel-1_160:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/parallel-1.c'
    sources: {binary: parallel-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_parallel-1_373:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/parallel-1.c'
    sources: {binary: parallel-1.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
test_parallel-1_374:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/parallel-1.c'
    sources: {binary: parallel-1.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
test_parallel-1_375:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/parallel-1.c'
    sources: {binary: parallel-1.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
test_parallel-1_523:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/parallel-1.c'
    sources: {binary: parallel-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_parallel-1_64:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/parallel-1.c'
    sources: {binary: parallel-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_parallel-1_736:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/parallel-1.c'
    sources: {binary: parallel-1.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
test_parallel-1_737:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/parallel-1.c'
    sources: {binary: parallel-1.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
test_parallel-1_738:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/parallel-1.c'
    sources: {binary: parallel-1.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
test_pcopy_161:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pcopy.c'
    sources: {binary: pcopy.s, cflags: "-fopenacc -fdump-tree-original\n -S"}
  group: GRPSERIAL
test_pcopy_376:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pcopy.c'
    sources: {binary: pcopy.s, cflags: "-std=c++98 -fopenacc -fdump-tree-original\n
        -S"}
  group: GRPSERIAL
test_pcopy_377:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pcopy.c'
    sources: {binary: pcopy.s, cflags: "-std=c++11 -fopenacc -fdump-tree-original\n
        -S"}
  group: GRPSERIAL
test_pcopy_378:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pcopy.c'
    sources: {binary: pcopy.s, cflags: "-std=c++14 -fopenacc -fdump-tree-original\n
        -S"}
  group: GRPSERIAL
test_pcopy_524:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pcopy.c'
    sources: {binary: pcopy.s, cflags: "-fopenacc -fdump-tree-original\n -S"}
  group: GRPSERIAL
test_pcopy_65:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pcopy.c'
    sources: {binary: pcopy.s, cflags: "-fopenacc -fdump-tree-original\n -S"}
  group: GRPSERIAL
test_pcopy_739:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pcopy.c'
    sources: {binary: pcopy.s, cflags: "-std=c++98 -fopenacc -fdump-tree-original\n
        -S"}
  group: GRPSERIAL
test_pcopy_740:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pcopy.c'
    sources: {binary: pcopy.s, cflags: "-std=c++11 -fopenacc -fdump-tree-original\n
        -S"}
  group: GRPSERIAL
test_pcopy_741:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pcopy.c'
    sources: {binary: pcopy.s, cflags: "-std=c++14 -fopenacc -fdump-tree-original\n
        -S"}
  group: GRPSERIAL
test_pcopyin_162:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pcopyin.c'
    sources: {binary: pcopyin.s, cflags: "-fopenacc -fdump-tree-original\n -S"}
  group: GRPSERIAL
test_pcopyin_379:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pcopyin.c'
    sources: {binary: pcopyin.s, cflags: "-std=c++98 -fopenacc -fdump-tree-original\n
        -S"}
  group: GRPSERIAL
test_pcopyin_380:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pcopyin.c'
    sources: {binary: pcopyin.s, cflags: "-std=c++11 -fopenacc -fdump-tree-original\n
        -S"}
  group: GRPSERIAL
test_pcopyin_381:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pcopyin.c'
    sources: {binary: pcopyin.s, cflags: "-std=c++14 -fopenacc -fdump-tree-original\n
        -S"}
  group: GRPSERIAL
test_pcopyin_525:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pcopyin.c'
    sources: {binary: pcopyin.s, cflags: "-fopenacc -fdump-tree-original\n -S"}
  group: GRPSERIAL
test_pcopyin_66:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pcopyin.c'
    sources: {binary: pcopyin.s, cflags: "-fopenacc -fdump-tree-original\n -S"}
  group: GRPSERIAL
test_pcopyin_742:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pcopyin.c'
    sources: {binary: pcopyin.s, cflags: "-std=c++98 -fopenacc -fdump-tree-original\n
        -S"}
  group: GRPSERIAL
test_pcopyin_743:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pcopyin.c'
    sources: {binary: pcopyin.s, cflags: "-std=c++11 -fopenacc -fdump-tree-original\n
        -S"}
  group: GRPSERIAL
test_pcopyin_744:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pcopyin.c'
    sources: {binary: pcopyin.s, cflags: "-std=c++14 -fopenacc -fdump-tree-original\n
        -S"}
  group: GRPSERIAL
test_pcopyout_163:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pcopyout.c'
    sources: {binary: pcopyout.s, cflags: "-fopenacc -fdump-tree-original\n -S"}
  group: GRPSERIAL
test_pcopyout_382:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pcopyout.c'
    sources: {binary: pcopyout.s, cflags: "-std=c++98 -fopenacc -fdump-tree-original\n
        -S"}
  group: GRPSERIAL
test_pcopyout_383:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pcopyout.c'
    sources: {binary: pcopyout.s, cflags: "-std=c++11 -fopenacc -fdump-tree-original\n
        -S"}
  group: GRPSERIAL
test_pcopyout_384:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pcopyout.c'
    sources: {binary: pcopyout.s, cflags: "-std=c++14 -fopenacc -fdump-tree-original\n
        -S"}
  group: GRPSERIAL
test_pcopyout_526:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pcopyout.c'
    sources: {binary: pcopyout.s, cflags: "-fopenacc -fdump-tree-original\n -S"}
  group: GRPSERIAL
test_pcopyout_67:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pcopyout.c'
    sources: {binary: pcopyout.s, cflags: "-fopenacc -fdump-tree-original\n -S"}
  group: GRPSERIAL
test_pcopyout_745:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pcopyout.c'
    sources: {binary: pcopyout.s, cflags: "-std=c++98 -fopenacc -fdump-tree-original\n
        -S"}
  group: GRPSERIAL
test_pcopyout_746:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pcopyout.c'
    sources: {binary: pcopyout.s, cflags: "-std=c++11 -fopenacc -fdump-tree-original\n
        -S"}
  group: GRPSERIAL
test_pcopyout_747:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pcopyout.c'
    sources: {binary: pcopyout.s, cflags: "-std=c++14 -fopenacc -fdump-tree-original\n
        -S"}
  group: GRPSERIAL
test_pcreate_164:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pcreate.c'
    sources: {binary: pcreate.s, cflags: "-fopenacc -fdump-tree-original\n -S"}
  group: GRPSERIAL
test_pcreate_385:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pcreate.c'
    sources: {binary: pcreate.s, cflags: "-std=c++98 -fopenacc -fdump-tree-original\n
        -S"}
  group: GRPSERIAL
test_pcreate_386:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pcreate.c'
    sources: {binary: pcreate.s, cflags: "-std=c++11 -fopenacc -fdump-tree-original\n
        -S"}
  group: GRPSERIAL
test_pcreate_387:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pcreate.c'
    sources: {binary: pcreate.s, cflags: "-std=c++14 -fopenacc -fdump-tree-original\n
        -S"}
  group: GRPSERIAL
test_pcreate_527:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pcreate.c'
    sources: {binary: pcreate.s, cflags: "-fopenacc -fdump-tree-original\n -S"}
  group: GRPSERIAL
test_pcreate_68:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pcreate.c'
    sources: {binary: pcreate.s, cflags: "-fopenacc -fdump-tree-original\n -S"}
  group: GRPSERIAL
test_pcreate_748:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pcreate.c'
    sources: {binary: pcreate.s, cflags: "-std=c++98 -fopenacc -fdump-tree-original\n
        -S"}
  group: GRPSERIAL
test_pcreate_749:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pcreate.c'
    sources: {binary: pcreate.s, cflags: "-std=c++11 -fopenacc -fdump-tree-original\n
        -S"}
  group: GRPSERIAL
test_pcreate_750:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pcreate.c'
    sources: {binary: pcreate.s, cflags: "-std=c++14 -fopenacc -fdump-tree-original\n
        -S"}
  group: GRPSERIAL
test_pr69916_165:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pr69916.c'
    sources: {binary: pr69916.s, cflags: "-fopenacc -O2\n -S"}
  group: GRPSERIAL
test_pr69916_388:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pr69916.c'
    sources: {binary: pr69916.s, cflags: "-std=c++98 -fopenacc -O2\n -S"}
  group: GRPSERIAL
test_pr69916_389:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pr69916.c'
    sources: {binary: pr69916.s, cflags: "-std=c++11 -fopenacc -O2\n -S"}
  group: GRPSERIAL
test_pr69916_390:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pr69916.c'
    sources: {binary: pr69916.s, cflags: "-std=c++14 -fopenacc -O2\n -S"}
  group: GRPSERIAL
test_pr69916_528:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pr69916.c'
    sources: {binary: pr69916.s, cflags: "-fopenacc -O2\n -S"}
  group: GRPSERIAL
test_pr69916_69:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pr69916.c'
    sources: {binary: pr69916.s, cflags: "-fopenacc -O2\n -S"}
  group: GRPSERIAL
test_pr69916_751:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pr69916.c'
    sources: {binary: pr69916.s, cflags: "-std=c++98 -fopenacc -O2\n -S"}
  group: GRPSERIAL
test_pr69916_752:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pr69916.c'
    sources: {binary: pr69916.s, cflags: "-std=c++11 -fopenacc -O2\n -S"}
  group: GRPSERIAL
test_pr69916_753:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pr69916.c'
    sources: {binary: pr69916.s, cflags: "-std=c++14 -fopenacc -O2\n -S"}
  group: GRPSERIAL
test_pr70688_166:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pr70688.c'
    sources: {binary: pr70688.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_pr70688_391:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pr70688.c'
    sources: {binary: pr70688.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
test_pr70688_392:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pr70688.c'
    sources: {binary: pr70688.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
test_pr70688_393:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pr70688.c'
    sources: {binary: pr70688.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
test_pr70688_529:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pr70688.c'
    sources: {binary: pr70688.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_pr70688_70:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pr70688.c'
    sources: {binary: pr70688.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_pr70688_754:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pr70688.c'
    sources: {binary: pr70688.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
test_pr70688_755:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pr70688.c'
    sources: {binary: pr70688.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
test_pr70688_756:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pr70688.c'
    sources: {binary: pr70688.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
test_pr79428-1_167:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pr79428-1.c'
    sources: {binary: pr79428-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope|expected")[^\n]*\n?)+'}
test_pr79428-1_394:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pr79428-1.c'
    sources: {binary: pr79428-1.s, cflags: "-std=gnu++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope|expected")[^\n]*\n?)+'}
test_pr79428-1_395:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pr79428-1.c'
    sources: {binary: pr79428-1.s, cflags: "-std=gnu++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope|expected")[^\n]*\n?)+'}
test_pr79428-1_396:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pr79428-1.c'
    sources: {binary: pr79428-1.s, cflags: "-std=gnu++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope|expected")[^\n]*\n?)+'}
test_pr79428-1_530:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pr79428-1.c'
    sources: {binary: pr79428-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope|expected")[^\n]*\n?)+'}
test_pr79428-1_71:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pr79428-1.c'
    sources: {binary: pr79428-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope|expected")[^\n]*\n?)+'}
test_pr79428-1_757:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pr79428-1.c'
    sources: {binary: pr79428-1.s, cflags: "-std=gnu++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope|expected")[^\n]*\n?)+'}
test_pr79428-1_758:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pr79428-1.c'
    sources: {binary: pr79428-1.s, cflags: "-std=gnu++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope|expected")[^\n]*\n?)+'}
test_pr79428-1_759:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pr79428-1.c'
    sources: {binary: pr79428-1.s, cflags: "-std=gnu++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope|expected")[^\n]*\n?)+'}
test_pragma_context_168:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pragma_context.c'
    sources: {binary: pragma_context.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before \''#pragma\''")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''#pragma
          acc update\'' may only be used in compound statements")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before \''#pragma\''")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before \''#pragma\''")[^\n]*\n?)+'}
test_pragma_context_531:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pragma_context.c'
    sources: {binary: pragma_context.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before \''#pragma\''")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''#pragma
          acc update\'' may only be used in compound statements")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before \''#pragma\''")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before \''#pragma\''")[^\n]*\n?)+'}
test_pragma_context_72:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/pragma_context.c'
    sources: {binary: pragma_context.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before \''#pragma\''")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''#pragma
          acc update\'' may only be used in compound statements")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before \''#pragma\''")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before \''#pragma\''")[^\n]*\n?)+'}
test_present-1_169:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/present-1.c'
    sources: {binary: present-1.s, cflags: "-fopenacc -fdump-tree-original\n -S"}
  group: GRPSERIAL
test_present-1_397:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/present-1.c'
    sources: {binary: present-1.s, cflags: "-std=c++98 -fopenacc -fdump-tree-original\n
        -S"}
  group: GRPSERIAL
test_present-1_398:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/present-1.c'
    sources: {binary: present-1.s, cflags: "-std=c++11 -fopenacc -fdump-tree-original\n
        -S"}
  group: GRPSERIAL
test_present-1_399:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/present-1.c'
    sources: {binary: present-1.s, cflags: "-std=c++14 -fopenacc -fdump-tree-original\n
        -S"}
  group: GRPSERIAL
test_present-1_532:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/present-1.c'
    sources: {binary: present-1.s, cflags: "-fopenacc -fdump-tree-original\n -S"}
  group: GRPSERIAL
test_present-1_73:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/present-1.c'
    sources: {binary: present-1.s, cflags: "-fopenacc -fdump-tree-original\n -S"}
  group: GRPSERIAL
test_present-1_760:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/present-1.c'
    sources: {binary: present-1.s, cflags: "-std=c++98 -fopenacc -fdump-tree-original\n
        -S"}
  group: GRPSERIAL
test_present-1_761:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/present-1.c'
    sources: {binary: present-1.s, cflags: "-std=c++11 -fopenacc -fdump-tree-original\n
        -S"}
  group: GRPSERIAL
test_present-1_762:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/present-1.c'
    sources: {binary: present-1.s, cflags: "-std=c++14 -fopenacc -fdump-tree-original\n
        -S"}
  group: GRPSERIAL
test_reduction-1_170:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-1.c'
    sources: {binary: reduction-1.s, cflags: "-fopenacc -fdump-tree-gimple\n -S"}
  group: GRPSERIAL
test_reduction-1_400:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-1.c'
    sources: {binary: reduction-1.s, cflags: "-std=c++98 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_reduction-1_401:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-1.c'
    sources: {binary: reduction-1.s, cflags: "-std=c++11 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_reduction-1_402:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-1.c'
    sources: {binary: reduction-1.s, cflags: "-std=c++14 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_reduction-1_533:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-1.c'
    sources: {binary: reduction-1.s, cflags: "-fopenacc -fdump-tree-gimple\n -S"}
  group: GRPSERIAL
test_reduction-1_74:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-1.c'
    sources: {binary: reduction-1.s, cflags: "-fopenacc -fdump-tree-gimple\n -S"}
  group: GRPSERIAL
test_reduction-1_763:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-1.c'
    sources: {binary: reduction-1.s, cflags: "-std=c++98 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_reduction-1_764:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-1.c'
    sources: {binary: reduction-1.s, cflags: "-std=c++11 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_reduction-1_765:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-1.c'
    sources: {binary: reduction-1.s, cflags: "-std=c++14 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_reduction-2_171:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-2.c'
    sources: {binary: reduction-2.s, cflags: "-fopenacc -fdump-tree-gimple\n -S"}
  group: GRPSERIAL
test_reduction-2_403:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-2.c'
    sources: {binary: reduction-2.s, cflags: "-std=c++98 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_reduction-2_404:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-2.c'
    sources: {binary: reduction-2.s, cflags: "-std=c++11 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_reduction-2_405:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-2.c'
    sources: {binary: reduction-2.s, cflags: "-std=c++14 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_reduction-2_534:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-2.c'
    sources: {binary: reduction-2.s, cflags: "-fopenacc -fdump-tree-gimple\n -S"}
  group: GRPSERIAL
test_reduction-2_75:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-2.c'
    sources: {binary: reduction-2.s, cflags: "-fopenacc -fdump-tree-gimple\n -S"}
  group: GRPSERIAL
test_reduction-2_766:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-2.c'
    sources: {binary: reduction-2.s, cflags: "-std=c++98 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_reduction-2_767:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-2.c'
    sources: {binary: reduction-2.s, cflags: "-std=c++11 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_reduction-2_768:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-2.c'
    sources: {binary: reduction-2.s, cflags: "-std=c++14 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_reduction-3_172:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-3.c'
    sources: {binary: reduction-3.s, cflags: "-fopenacc -fdump-tree-gimple\n -S"}
  group: GRPSERIAL
test_reduction-3_406:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-3.c'
    sources: {binary: reduction-3.s, cflags: "-std=c++98 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_reduction-3_407:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-3.c'
    sources: {binary: reduction-3.s, cflags: "-std=c++11 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_reduction-3_408:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-3.c'
    sources: {binary: reduction-3.s, cflags: "-std=c++14 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_reduction-3_535:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-3.c'
    sources: {binary: reduction-3.s, cflags: "-fopenacc -fdump-tree-gimple\n -S"}
  group: GRPSERIAL
test_reduction-3_76:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-3.c'
    sources: {binary: reduction-3.s, cflags: "-fopenacc -fdump-tree-gimple\n -S"}
  group: GRPSERIAL
test_reduction-3_769:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-3.c'
    sources: {binary: reduction-3.s, cflags: "-std=c++98 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_reduction-3_770:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-3.c'
    sources: {binary: reduction-3.s, cflags: "-std=c++11 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_reduction-3_771:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-3.c'
    sources: {binary: reduction-3.s, cflags: "-std=c++14 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_reduction-4_173:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-4.c'
    sources: {binary: reduction-4.s, cflags: "-fopenacc -fdump-tree-gimple\n -S"}
  group: GRPSERIAL
test_reduction-4_409:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-4.c'
    sources: {binary: reduction-4.s, cflags: "-std=c++98 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_reduction-4_410:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-4.c'
    sources: {binary: reduction-4.s, cflags: "-std=c++11 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_reduction-4_411:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-4.c'
    sources: {binary: reduction-4.s, cflags: "-std=c++14 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_reduction-4_536:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-4.c'
    sources: {binary: reduction-4.s, cflags: "-fopenacc -fdump-tree-gimple\n -S"}
  group: GRPSERIAL
test_reduction-4_77:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-4.c'
    sources: {binary: reduction-4.s, cflags: "-fopenacc -fdump-tree-gimple\n -S"}
  group: GRPSERIAL
test_reduction-4_772:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-4.c'
    sources: {binary: reduction-4.s, cflags: "-std=c++98 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_reduction-4_773:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-4.c'
    sources: {binary: reduction-4.s, cflags: "-std=c++11 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_reduction-4_774:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-4.c'
    sources: {binary: reduction-4.s, cflags: "-std=c++14 -fopenacc -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_reduction-5_174:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-5.c'
    sources: {binary: reduction-5.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          private reduction")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          private reduction")[^\n]*\n?)+'}
test_reduction-5_412:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-5.c'
    sources: {binary: reduction-5.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          private reduction")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          private reduction")[^\n]*\n?)+'}
test_reduction-5_413:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-5.c'
    sources: {binary: reduction-5.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          private reduction")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          private reduction")[^\n]*\n?)+'}
test_reduction-5_414:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-5.c'
    sources: {binary: reduction-5.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          private reduction")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          private reduction")[^\n]*\n?)+'}
test_reduction-5_537:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-5.c'
    sources: {binary: reduction-5.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          private reduction")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          private reduction")[^\n]*\n?)+'}
test_reduction-5_775:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-5.c'
    sources: {binary: reduction-5.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          private reduction")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          private reduction")[^\n]*\n?)+'}
test_reduction-5_776:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-5.c'
    sources: {binary: reduction-5.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          private reduction")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          private reduction")[^\n]*\n?)+'}
test_reduction-5_777:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-5.c'
    sources: {binary: reduction-5.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          private reduction")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          private reduction")[^\n]*\n?)+'}
test_reduction-5_78:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-5.c'
    sources: {binary: reduction-5.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          private reduction")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          private reduction")[^\n]*\n?)+'}
test_reduction-6_175:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-6.c'
    sources: {binary: reduction-6.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_reduction-6_415:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-6.c'
    sources: {binary: reduction-6.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
test_reduction-6_416:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-6.c'
    sources: {binary: reduction-6.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
test_reduction-6_417:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-6.c'
    sources: {binary: reduction-6.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
test_reduction-6_538:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-6.c'
    sources: {binary: reduction-6.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_reduction-6_778:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-6.c'
    sources: {binary: reduction-6.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
test_reduction-6_779:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-6.c'
    sources: {binary: reduction-6.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
test_reduction-6_780:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-6.c'
    sources: {binary: reduction-6.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
test_reduction-6_79:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-6.c'
    sources: {binary: reduction-6.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_reduction-promotions_176:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-promotions.c'
    sources: {binary: reduction-promotions.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L18: {expect: true, expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
test_reduction-promotions_418:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-promotions.c'
    sources: {binary: reduction-promotions.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L18: {expect: true, expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
test_reduction-promotions_419:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-promotions.c'
    sources: {binary: reduction-promotions.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L18: {expect: true, expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
test_reduction-promotions_420:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-promotions.c'
    sources: {binary: reduction-promotions.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L18: {expect: true, expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
test_reduction-promotions_539:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-promotions.c'
    sources: {binary: reduction-promotions.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L18: {expect: true, expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
test_reduction-promotions_781:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-promotions.c'
    sources: {binary: reduction-promotions.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L18: {expect: true, expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
test_reduction-promotions_782:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-promotions.c'
    sources: {binary: reduction-promotions.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L18: {expect: true, expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
test_reduction-promotions_783:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-promotions.c'
    sources: {binary: reduction-promotions.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L18: {expect: true, expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
test_reduction-promotions_80:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/reduction-promotions.c'
    sources: {binary: reduction-promotions.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L18: {expect: true, expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          data clause with reduction")[^\n]*\n?)+'}
test_routine-1_177:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-1.c'
    sources: {binary: routine-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_routine-1_421:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-1.c'
    sources: {binary: routine-1.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
test_routine-1_422:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-1.c'
    sources: {binary: routine-1.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
test_routine-1_423:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-1.c'
    sources: {binary: routine-1.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
test_routine-1_540:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-1.c'
    sources: {binary: routine-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_routine-1_784:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-1.c'
    sources: {binary: routine-1.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
test_routine-1_785:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-1.c'
    sources: {binary: routine-1.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
test_routine-1_786:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-1.c'
    sources: {binary: routine-1.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
test_routine-1_81:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-1.c'
    sources: {binary: routine-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
test_routine-2_178:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-2.c'
    sources: {binary: routine-2.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L1: {expect: true, expr: '(^|\n)([^\n]+:1:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple
          loop axes")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple
          loop axes")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple
          loop axes")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          been declared")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple
          loop axes")[^\n]*\n?)+'}
test_routine-2_424:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-2.c'
    sources: {binary: routine-2.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L1: {expect: true, expr: '(^|\n)([^\n]+:1:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple
          loop axes")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple
          loop axes")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple
          loop axes")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          been declared")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple
          loop axes")[^\n]*\n?)+'}
test_routine-2_425:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-2.c'
    sources: {binary: routine-2.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L1: {expect: true, expr: '(^|\n)([^\n]+:1:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple
          loop axes")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple
          loop axes")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple
          loop axes")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          been declared")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple
          loop axes")[^\n]*\n?)+'}
test_routine-2_426:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-2.c'
    sources: {binary: routine-2.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L1: {expect: true, expr: '(^|\n)([^\n]+:1:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple
          loop axes")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple
          loop axes")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple
          loop axes")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          been declared")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple
          loop axes")[^\n]*\n?)+'}
test_routine-2_541:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-2.c'
    sources: {binary: routine-2.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L1: {expect: true, expr: '(^|\n)([^\n]+:1:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple
          loop axes")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple
          loop axes")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple
          loop axes")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          been declared")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple
          loop axes")[^\n]*\n?)+'}
test_routine-2_787:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-2.c'
    sources: {binary: routine-2.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L1: {expect: true, expr: '(^|\n)([^\n]+:1:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple
          loop axes")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple
          loop axes")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple
          loop axes")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          been declared")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple
          loop axes")[^\n]*\n?)+'}
test_routine-2_788:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-2.c'
    sources: {binary: routine-2.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L1: {expect: true, expr: '(^|\n)([^\n]+:1:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple
          loop axes")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple
          loop axes")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple
          loop axes")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          been declared")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple
          loop axes")[^\n]*\n?)+'}
test_routine-2_789:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-2.c'
    sources: {binary: routine-2.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L1: {expect: true, expr: '(^|\n)([^\n]+:1:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple
          loop axes")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple
          loop axes")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple
          loop axes")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          been declared")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple
          loop axes")[^\n]*\n?)+'}
test_routine-2_82:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-2.c'
    sources: {binary: routine-2.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L1: {expect: true, expr: '(^|\n)([^\n]+:1:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple
          loop axes")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple
          loop axes")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple
          loop axes")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          been declared")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple
          loop axes")[^\n]*\n?)+'}
test_routine-3_179:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-3.c'
    sources: {binary: routine-3.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L102: {expect: true, expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
test_routine-3_427:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-3.c'
    sources: {binary: routine-3.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L102: {expect: true, expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
test_routine-3_428:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-3.c'
    sources: {binary: routine-3.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L102: {expect: true, expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
test_routine-3_429:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-3.c'
    sources: {binary: routine-3.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L102: {expect: true, expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
test_routine-3_542:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-3.c'
    sources: {binary: routine-3.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L102: {expect: true, expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
test_routine-3_790:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-3.c'
    sources: {binary: routine-3.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L102: {expect: true, expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
test_routine-3_791:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-3.c'
    sources: {binary: routine-3.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L102: {expect: true, expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
test_routine-3_792:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-3.c'
    sources: {binary: routine-3.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L102: {expect: true, expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
test_routine-3_83:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-3.c'
    sources: {binary: routine-3.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L102: {expect: true, expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses same")[^\n]*\n?)+'}
test_routine-4_180:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-4.c'
    sources: {binary: routine-4.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
test_routine-4_430:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-4.c'
    sources: {binary: routine-4.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
test_routine-4_431:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-4.c'
    sources: {binary: routine-4.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
test_routine-4_432:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-4.c'
    sources: {binary: routine-4.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
test_routine-4_543:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-4.c'
    sources: {binary: routine-4.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
test_routine-4_793:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-4.c'
    sources: {binary: routine-4.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
test_routine-4_794:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-4.c'
    sources: {binary: routine-4.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
test_routine-4_795:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-4.c'
    sources: {binary: routine-4.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
test_routine-4_84:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-4.c'
    sources: {binary: routine-4.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("insufficient
          partitioning")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine
          call uses")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed
          by containing routine")[^\n]*\n?)+'}
test_routine-5_181:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-5.c'
    sources: {binary: routine-5.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L103: {expect: true, expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L108: {expect: true, expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L109: {expect: true, expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".fn6a.
          has not been declared")[^\n]*\n?)+'}
      L110: {expect: true, expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".fn6b.
          has not been declared")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope")[^\n]*\n?)+'}
      L120: {expect: true, expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L123: {expect: true, expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".g.
          does not refer to a function")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".a.
          does not refer to a function")[^\n]*\n?)+'}
      L129: {expect: true, expr: '(^|\n)([^\n]+:129:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".c.
          does not refer to a function")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma.
          is not allowed here")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+:136:[^\n]*[0-9]+: (fatal )?error:[^\n]*("static
          assertion failed")[^\n]*\n?)+'}
      L142: {expect: true, expr: '(^|\n)([^\n]+:142:[^\n]*[0-9]+: (fatal )?error:[^\n]*("static
          assertion failed")[^\n]*\n?)+'}
      L146: {expect: true, expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*f_static_assert")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*ex1")[^\n]*\n?)+'}
      L159: {expect: true, expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*ex2")[^\n]*\n?)+'}
      L161: {expect: true, expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ex3.
          does not refer to a function")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_1")[^\n]*\n?)+'}
      L171: {expect: true, expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_1")[^\n]*\n?)+'}
      L172: {expect: true, expr: '(^|\n)([^\n]+:172:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_1")[^\n]*\n?)+'}
      L176: {expect: true, expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_2.")[^\n]*\n?)+'}
      L177: {expect: true, expr: '(^|\n)([^\n]+:177:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_2.")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_2.")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_3.")[^\n]*\n?)+'}
      L189: {expect: true, expr: '(^|\n)([^\n]+:189:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_4.")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_5.")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_6.")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope")[^\n]*\n?)+'}
      L217: {expect: true, expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be applied before use")[^\n]*\n?)+'}
      L219: {expect: true, expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be applied before definition")[^\n]*\n?)+'}
      L221: {expect: true, expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          been declared")[^\n]*\n?)+'}
      L226: {expect: true, expr: '(^|\n)([^\n]+:226:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L227: {expect: true, expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L228: {expect: true, expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L245: {expect: true, expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L246: {expect: true, expr: '(^|\n)([^\n]+:246:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L254: {expect: true, expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          used in")[^\n]*\n?)+'}
      L256: {expect: true, expr: '(^|\n)([^\n]+:256:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          used in")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before end of line")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .\\\\). token")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .\\\\+. token")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .\\\\?. token")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .:. token")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before numeric constant")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .4.")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before string constant")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\). before .,. token")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\). before .R2.")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by a single function declaration or
          definition")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by a single function declaration or
          definition")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by a single function declaration or
          definition")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by a single function declaration or
          definition")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
test_routine-5_433:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-5.c'
    sources: {binary: routine-5.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L103: {expect: true, expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L108: {expect: true, expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L109: {expect: true, expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".fn6a.
          has not been declared")[^\n]*\n?)+'}
      L110: {expect: true, expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".fn6b.
          has not been declared")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope")[^\n]*\n?)+'}
      L120: {expect: true, expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L123: {expect: true, expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".g.
          does not refer to a function")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".a.
          does not refer to a function")[^\n]*\n?)+'}
      L129: {expect: true, expr: '(^|\n)([^\n]+:129:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".c.
          does not refer to a function")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma.
          is not allowed here")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+:136:[^\n]*[0-9]+: (fatal )?error:[^\n]*("static
          assertion failed")[^\n]*\n?)+'}
      L142: {expect: true, expr: '(^|\n)([^\n]+:142:[^\n]*[0-9]+: (fatal )?error:[^\n]*("static
          assertion failed")[^\n]*\n?)+'}
      L146: {expect: true, expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*f_static_assert")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*ex1")[^\n]*\n?)+'}
      L159: {expect: true, expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*ex2")[^\n]*\n?)+'}
      L161: {expect: true, expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ex3.
          does not refer to a function")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_1")[^\n]*\n?)+'}
      L171: {expect: true, expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_1")[^\n]*\n?)+'}
      L172: {expect: true, expr: '(^|\n)([^\n]+:172:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_1")[^\n]*\n?)+'}
      L176: {expect: true, expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_2.")[^\n]*\n?)+'}
      L177: {expect: true, expr: '(^|\n)([^\n]+:177:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_2.")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_2.")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_3.")[^\n]*\n?)+'}
      L189: {expect: true, expr: '(^|\n)([^\n]+:189:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_4.")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_5.")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_6.")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope")[^\n]*\n?)+'}
      L217: {expect: true, expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be applied before use")[^\n]*\n?)+'}
      L219: {expect: true, expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be applied before definition")[^\n]*\n?)+'}
      L221: {expect: true, expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          been declared")[^\n]*\n?)+'}
      L226: {expect: true, expr: '(^|\n)([^\n]+:226:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L227: {expect: true, expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L228: {expect: true, expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L245: {expect: true, expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L246: {expect: true, expr: '(^|\n)([^\n]+:246:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L254: {expect: true, expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          used in")[^\n]*\n?)+'}
      L256: {expect: true, expr: '(^|\n)([^\n]+:256:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          used in")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before end of line")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .\\\\). token")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .\\\\+. token")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .\\\\?. token")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .:. token")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before numeric constant")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .4.")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before string constant")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\). before .,. token")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\). before .R2.")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by a single function declaration or
          definition")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by a single function declaration or
          definition")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by a single function declaration or
          definition")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by a single function declaration or
          definition")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
test_routine-5_434:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-5.c'
    sources: {binary: routine-5.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L103: {expect: true, expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L108: {expect: true, expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L109: {expect: true, expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".fn6a.
          has not been declared")[^\n]*\n?)+'}
      L110: {expect: true, expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".fn6b.
          has not been declared")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope")[^\n]*\n?)+'}
      L120: {expect: true, expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L123: {expect: true, expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".g.
          does not refer to a function")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".a.
          does not refer to a function")[^\n]*\n?)+'}
      L129: {expect: true, expr: '(^|\n)([^\n]+:129:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".c.
          does not refer to a function")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma.
          is not allowed here")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+:136:[^\n]*[0-9]+: (fatal )?error:[^\n]*("static
          assertion failed")[^\n]*\n?)+'}
      L142: {expect: true, expr: '(^|\n)([^\n]+:142:[^\n]*[0-9]+: (fatal )?error:[^\n]*("static
          assertion failed")[^\n]*\n?)+'}
      L146: {expect: true, expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*f_static_assert")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*ex1")[^\n]*\n?)+'}
      L159: {expect: true, expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*ex2")[^\n]*\n?)+'}
      L161: {expect: true, expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ex3.
          does not refer to a function")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_1")[^\n]*\n?)+'}
      L171: {expect: true, expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_1")[^\n]*\n?)+'}
      L172: {expect: true, expr: '(^|\n)([^\n]+:172:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_1")[^\n]*\n?)+'}
      L176: {expect: true, expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_2.")[^\n]*\n?)+'}
      L177: {expect: true, expr: '(^|\n)([^\n]+:177:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_2.")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_2.")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_3.")[^\n]*\n?)+'}
      L189: {expect: true, expr: '(^|\n)([^\n]+:189:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_4.")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_5.")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_6.")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope")[^\n]*\n?)+'}
      L217: {expect: true, expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be applied before use")[^\n]*\n?)+'}
      L219: {expect: true, expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be applied before definition")[^\n]*\n?)+'}
      L221: {expect: true, expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          been declared")[^\n]*\n?)+'}
      L226: {expect: true, expr: '(^|\n)([^\n]+:226:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L227: {expect: true, expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L228: {expect: true, expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L245: {expect: true, expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L246: {expect: true, expr: '(^|\n)([^\n]+:246:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L254: {expect: true, expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          used in")[^\n]*\n?)+'}
      L256: {expect: true, expr: '(^|\n)([^\n]+:256:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          used in")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before end of line")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .\\\\). token")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .\\\\+. token")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .\\\\?. token")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .:. token")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before numeric constant")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .4.")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before string constant")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\). before .,. token")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\). before .R2.")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by a single function declaration or
          definition")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by a single function declaration or
          definition")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by a single function declaration or
          definition")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by a single function declaration or
          definition")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
test_routine-5_435:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-5.c'
    sources: {binary: routine-5.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L103: {expect: true, expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L108: {expect: true, expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L109: {expect: true, expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".fn6a.
          has not been declared")[^\n]*\n?)+'}
      L110: {expect: true, expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".fn6b.
          has not been declared")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope")[^\n]*\n?)+'}
      L120: {expect: true, expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L123: {expect: true, expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".g.
          does not refer to a function")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".a.
          does not refer to a function")[^\n]*\n?)+'}
      L129: {expect: true, expr: '(^|\n)([^\n]+:129:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".c.
          does not refer to a function")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma.
          is not allowed here")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+:136:[^\n]*[0-9]+: (fatal )?error:[^\n]*("static
          assertion failed")[^\n]*\n?)+'}
      L142: {expect: true, expr: '(^|\n)([^\n]+:142:[^\n]*[0-9]+: (fatal )?error:[^\n]*("static
          assertion failed")[^\n]*\n?)+'}
      L146: {expect: true, expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*f_static_assert")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*ex1")[^\n]*\n?)+'}
      L159: {expect: true, expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*ex2")[^\n]*\n?)+'}
      L161: {expect: true, expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ex3.
          does not refer to a function")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_1")[^\n]*\n?)+'}
      L171: {expect: true, expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_1")[^\n]*\n?)+'}
      L172: {expect: true, expr: '(^|\n)([^\n]+:172:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_1")[^\n]*\n?)+'}
      L176: {expect: true, expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_2.")[^\n]*\n?)+'}
      L177: {expect: true, expr: '(^|\n)([^\n]+:177:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_2.")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_2.")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_3.")[^\n]*\n?)+'}
      L189: {expect: true, expr: '(^|\n)([^\n]+:189:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_4.")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_5.")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_6.")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope")[^\n]*\n?)+'}
      L217: {expect: true, expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be applied before use")[^\n]*\n?)+'}
      L219: {expect: true, expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be applied before definition")[^\n]*\n?)+'}
      L221: {expect: true, expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          been declared")[^\n]*\n?)+'}
      L226: {expect: true, expr: '(^|\n)([^\n]+:226:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L227: {expect: true, expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L228: {expect: true, expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L245: {expect: true, expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L246: {expect: true, expr: '(^|\n)([^\n]+:246:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L254: {expect: true, expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          used in")[^\n]*\n?)+'}
      L256: {expect: true, expr: '(^|\n)([^\n]+:256:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          used in")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before end of line")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .\\\\). token")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .\\\\+. token")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .\\\\?. token")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .:. token")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before numeric constant")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .4.")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before string constant")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\). before .,. token")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\). before .R2.")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by a single function declaration or
          definition")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by a single function declaration or
          definition")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by a single function declaration or
          definition")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by a single function declaration or
          definition")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
test_routine-5_544:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-5.c'
    sources: {binary: routine-5.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L103: {expect: true, expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L108: {expect: true, expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L109: {expect: true, expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".fn6a.
          has not been declared")[^\n]*\n?)+'}
      L110: {expect: true, expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".fn6b.
          has not been declared")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope")[^\n]*\n?)+'}
      L120: {expect: true, expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L123: {expect: true, expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".g.
          does not refer to a function")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".a.
          does not refer to a function")[^\n]*\n?)+'}
      L129: {expect: true, expr: '(^|\n)([^\n]+:129:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".c.
          does not refer to a function")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma.
          is not allowed here")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+:136:[^\n]*[0-9]+: (fatal )?error:[^\n]*("static
          assertion failed")[^\n]*\n?)+'}
      L142: {expect: true, expr: '(^|\n)([^\n]+:142:[^\n]*[0-9]+: (fatal )?error:[^\n]*("static
          assertion failed")[^\n]*\n?)+'}
      L146: {expect: true, expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*f_static_assert")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*ex1")[^\n]*\n?)+'}
      L159: {expect: true, expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*ex2")[^\n]*\n?)+'}
      L161: {expect: true, expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ex3.
          does not refer to a function")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_1")[^\n]*\n?)+'}
      L171: {expect: true, expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_1")[^\n]*\n?)+'}
      L172: {expect: true, expr: '(^|\n)([^\n]+:172:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_1")[^\n]*\n?)+'}
      L176: {expect: true, expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_2.")[^\n]*\n?)+'}
      L177: {expect: true, expr: '(^|\n)([^\n]+:177:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_2.")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_2.")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_3.")[^\n]*\n?)+'}
      L189: {expect: true, expr: '(^|\n)([^\n]+:189:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_4.")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_5.")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_6.")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope")[^\n]*\n?)+'}
      L217: {expect: true, expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be applied before use")[^\n]*\n?)+'}
      L219: {expect: true, expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be applied before definition")[^\n]*\n?)+'}
      L221: {expect: true, expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          been declared")[^\n]*\n?)+'}
      L226: {expect: true, expr: '(^|\n)([^\n]+:226:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L227: {expect: true, expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L228: {expect: true, expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L245: {expect: true, expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L246: {expect: true, expr: '(^|\n)([^\n]+:246:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L254: {expect: true, expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          used in")[^\n]*\n?)+'}
      L256: {expect: true, expr: '(^|\n)([^\n]+:256:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          used in")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before end of line")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .\\\\). token")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .\\\\+. token")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .\\\\?. token")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .:. token")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before numeric constant")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .4.")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before string constant")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\). before .,. token")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\). before .R2.")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by a single function declaration or
          definition")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by a single function declaration or
          definition")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by a single function declaration or
          definition")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by a single function declaration or
          definition")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
test_routine-5_796:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-5.c'
    sources: {binary: routine-5.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L103: {expect: true, expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L108: {expect: true, expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L109: {expect: true, expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".fn6a.
          has not been declared")[^\n]*\n?)+'}
      L110: {expect: true, expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".fn6b.
          has not been declared")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope")[^\n]*\n?)+'}
      L120: {expect: true, expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L123: {expect: true, expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".g.
          does not refer to a function")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".a.
          does not refer to a function")[^\n]*\n?)+'}
      L129: {expect: true, expr: '(^|\n)([^\n]+:129:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".c.
          does not refer to a function")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma.
          is not allowed here")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+:136:[^\n]*[0-9]+: (fatal )?error:[^\n]*("static
          assertion failed")[^\n]*\n?)+'}
      L142: {expect: true, expr: '(^|\n)([^\n]+:142:[^\n]*[0-9]+: (fatal )?error:[^\n]*("static
          assertion failed")[^\n]*\n?)+'}
      L146: {expect: true, expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*f_static_assert")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*ex1")[^\n]*\n?)+'}
      L159: {expect: true, expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*ex2")[^\n]*\n?)+'}
      L161: {expect: true, expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ex3.
          does not refer to a function")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_1")[^\n]*\n?)+'}
      L171: {expect: true, expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_1")[^\n]*\n?)+'}
      L172: {expect: true, expr: '(^|\n)([^\n]+:172:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_1")[^\n]*\n?)+'}
      L176: {expect: true, expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_2.")[^\n]*\n?)+'}
      L177: {expect: true, expr: '(^|\n)([^\n]+:177:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_2.")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_2.")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_3.")[^\n]*\n?)+'}
      L189: {expect: true, expr: '(^|\n)([^\n]+:189:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_4.")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_5.")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_6.")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope")[^\n]*\n?)+'}
      L217: {expect: true, expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be applied before use")[^\n]*\n?)+'}
      L219: {expect: true, expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be applied before definition")[^\n]*\n?)+'}
      L221: {expect: true, expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          been declared")[^\n]*\n?)+'}
      L226: {expect: true, expr: '(^|\n)([^\n]+:226:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L227: {expect: true, expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L228: {expect: true, expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L245: {expect: true, expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L246: {expect: true, expr: '(^|\n)([^\n]+:246:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L254: {expect: true, expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          used in")[^\n]*\n?)+'}
      L256: {expect: true, expr: '(^|\n)([^\n]+:256:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          used in")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before end of line")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .\\\\). token")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .\\\\+. token")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .\\\\?. token")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .:. token")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before numeric constant")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .4.")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before string constant")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\). before .,. token")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\). before .R2.")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by a single function declaration or
          definition")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by a single function declaration or
          definition")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by a single function declaration or
          definition")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by a single function declaration or
          definition")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
test_routine-5_797:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-5.c'
    sources: {binary: routine-5.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L103: {expect: true, expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L108: {expect: true, expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L109: {expect: true, expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".fn6a.
          has not been declared")[^\n]*\n?)+'}
      L110: {expect: true, expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".fn6b.
          has not been declared")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope")[^\n]*\n?)+'}
      L120: {expect: true, expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L123: {expect: true, expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".g.
          does not refer to a function")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".a.
          does not refer to a function")[^\n]*\n?)+'}
      L129: {expect: true, expr: '(^|\n)([^\n]+:129:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".c.
          does not refer to a function")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma.
          is not allowed here")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+:136:[^\n]*[0-9]+: (fatal )?error:[^\n]*("static
          assertion failed")[^\n]*\n?)+'}
      L142: {expect: true, expr: '(^|\n)([^\n]+:142:[^\n]*[0-9]+: (fatal )?error:[^\n]*("static
          assertion failed")[^\n]*\n?)+'}
      L146: {expect: true, expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*f_static_assert")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*ex1")[^\n]*\n?)+'}
      L159: {expect: true, expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*ex2")[^\n]*\n?)+'}
      L161: {expect: true, expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ex3.
          does not refer to a function")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_1")[^\n]*\n?)+'}
      L171: {expect: true, expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_1")[^\n]*\n?)+'}
      L172: {expect: true, expr: '(^|\n)([^\n]+:172:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_1")[^\n]*\n?)+'}
      L176: {expect: true, expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_2.")[^\n]*\n?)+'}
      L177: {expect: true, expr: '(^|\n)([^\n]+:177:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_2.")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_2.")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_3.")[^\n]*\n?)+'}
      L189: {expect: true, expr: '(^|\n)([^\n]+:189:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_4.")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_5.")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_6.")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope")[^\n]*\n?)+'}
      L217: {expect: true, expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be applied before use")[^\n]*\n?)+'}
      L219: {expect: true, expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be applied before definition")[^\n]*\n?)+'}
      L221: {expect: true, expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          been declared")[^\n]*\n?)+'}
      L226: {expect: true, expr: '(^|\n)([^\n]+:226:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L227: {expect: true, expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L228: {expect: true, expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L245: {expect: true, expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L246: {expect: true, expr: '(^|\n)([^\n]+:246:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L254: {expect: true, expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          used in")[^\n]*\n?)+'}
      L256: {expect: true, expr: '(^|\n)([^\n]+:256:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          used in")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before end of line")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .\\\\). token")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .\\\\+. token")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .\\\\?. token")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .:. token")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before numeric constant")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .4.")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before string constant")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\). before .,. token")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\). before .R2.")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by a single function declaration or
          definition")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by a single function declaration or
          definition")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by a single function declaration or
          definition")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by a single function declaration or
          definition")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
test_routine-5_798:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-5.c'
    sources: {binary: routine-5.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L103: {expect: true, expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L108: {expect: true, expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L109: {expect: true, expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".fn6a.
          has not been declared")[^\n]*\n?)+'}
      L110: {expect: true, expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".fn6b.
          has not been declared")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope")[^\n]*\n?)+'}
      L120: {expect: true, expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L123: {expect: true, expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".g.
          does not refer to a function")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".a.
          does not refer to a function")[^\n]*\n?)+'}
      L129: {expect: true, expr: '(^|\n)([^\n]+:129:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".c.
          does not refer to a function")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma.
          is not allowed here")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+:136:[^\n]*[0-9]+: (fatal )?error:[^\n]*("static
          assertion failed")[^\n]*\n?)+'}
      L142: {expect: true, expr: '(^|\n)([^\n]+:142:[^\n]*[0-9]+: (fatal )?error:[^\n]*("static
          assertion failed")[^\n]*\n?)+'}
      L146: {expect: true, expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*f_static_assert")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*ex1")[^\n]*\n?)+'}
      L159: {expect: true, expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*ex2")[^\n]*\n?)+'}
      L161: {expect: true, expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ex3.
          does not refer to a function")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_1")[^\n]*\n?)+'}
      L171: {expect: true, expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_1")[^\n]*\n?)+'}
      L172: {expect: true, expr: '(^|\n)([^\n]+:172:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_1")[^\n]*\n?)+'}
      L176: {expect: true, expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_2.")[^\n]*\n?)+'}
      L177: {expect: true, expr: '(^|\n)([^\n]+:177:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_2.")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_2.")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_3.")[^\n]*\n?)+'}
      L189: {expect: true, expr: '(^|\n)([^\n]+:189:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_4.")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_5.")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_6.")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope")[^\n]*\n?)+'}
      L217: {expect: true, expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be applied before use")[^\n]*\n?)+'}
      L219: {expect: true, expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be applied before definition")[^\n]*\n?)+'}
      L221: {expect: true, expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          been declared")[^\n]*\n?)+'}
      L226: {expect: true, expr: '(^|\n)([^\n]+:226:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L227: {expect: true, expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L228: {expect: true, expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L245: {expect: true, expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L246: {expect: true, expr: '(^|\n)([^\n]+:246:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L254: {expect: true, expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          used in")[^\n]*\n?)+'}
      L256: {expect: true, expr: '(^|\n)([^\n]+:256:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          used in")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before end of line")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .\\\\). token")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .\\\\+. token")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .\\\\?. token")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .:. token")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before numeric constant")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .4.")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before string constant")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\). before .,. token")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\). before .R2.")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by a single function declaration or
          definition")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by a single function declaration or
          definition")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by a single function declaration or
          definition")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by a single function declaration or
          definition")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
test_routine-5_85:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/routine-5.c'
    sources: {binary: routine-5.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L103: {expect: true, expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L108: {expect: true, expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L109: {expect: true, expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".fn6a.
          has not been declared")[^\n]*\n?)+'}
      L110: {expect: true, expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".fn6b.
          has not been declared")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope")[^\n]*\n?)+'}
      L120: {expect: true, expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L123: {expect: true, expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".g.
          does not refer to a function")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".a.
          does not refer to a function")[^\n]*\n?)+'}
      L129: {expect: true, expr: '(^|\n)([^\n]+:129:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".c.
          does not refer to a function")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma.
          is not allowed here")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+:136:[^\n]*[0-9]+: (fatal )?error:[^\n]*("static
          assertion failed")[^\n]*\n?)+'}
      L142: {expect: true, expr: '(^|\n)([^\n]+:142:[^\n]*[0-9]+: (fatal )?error:[^\n]*("static
          assertion failed")[^\n]*\n?)+'}
      L146: {expect: true, expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*f_static_assert")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*ex1")[^\n]*\n?)+'}
      L159: {expect: true, expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*ex2")[^\n]*\n?)+'}
      L161: {expect: true, expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ex3.
          does not refer to a function")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_1")[^\n]*\n?)+'}
      L171: {expect: true, expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_1")[^\n]*\n?)+'}
      L172: {expect: true, expr: '(^|\n)([^\n]+:172:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_1")[^\n]*\n?)+'}
      L176: {expect: true, expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_2.")[^\n]*\n?)+'}
      L177: {expect: true, expr: '(^|\n)([^\n]+:177:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_2.")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_2.")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_3.")[^\n]*\n?)+'}
      L189: {expect: true, expr: '(^|\n)([^\n]+:189:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_4.")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_5.")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. already applied to .\\[void \\]*fungsi_6.")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope")[^\n]*\n?)+'}
      L217: {expect: true, expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be applied before use")[^\n]*\n?)+'}
      L219: {expect: true, expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be applied before definition")[^\n]*\n?)+'}
      L221: {expect: true, expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          been declared")[^\n]*\n?)+'}
      L226: {expect: true, expr: '(^|\n)([^\n]+:226:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L227: {expect: true, expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L228: {expect: true, expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L245: {expect: true, expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L246: {expect: true, expr: '(^|\n)([^\n]+:246:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive
          for use")[^\n]*\n?)+'}
      L254: {expect: true, expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          used in")[^\n]*\n?)+'}
      L256: {expect: true, expr: '(^|\n)([^\n]+:256:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          used in")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before end of line")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .\\\\). token")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .\\\\+. token")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .\\\\?. token")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .:. token")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before numeric constant")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before .4.")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          (function name|unqualified-id) before string constant")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\). before .,. token")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\). before .R2.")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by a single function declaration or
          definition")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by a single function declaration or
          definition")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. must be at file scope")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by a single function declaration or
          definition")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by a single function declaration or
          definition")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".#pragma
          acc routine. not immediately followed by function declaration or definition")[^\n]*\n?)+'}
test_sb-1_182:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/sb-1.c'
    sources: {binary: sb-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenACC structured block")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenACC structured block")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenACC structured block")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenACC structured block")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenACC structured block")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenACC structured block")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenACC structured block")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenACC structured block")[^\n]*\n?)+'}
test_sb-1_545:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/sb-1.c'
    sources: {binary: sb-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenACC structured block")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenACC structured block")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenACC structured block")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenACC structured block")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenACC structured block")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenACC structured block")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenACC structured block")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenACC structured block")[^\n]*\n?)+'}
test_sb-1_86:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/sb-1.c'
    sources: {binary: sb-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenACC structured block")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenACC structured block")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenACC structured block")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenACC structured block")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenACC structured block")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenACC structured block")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenACC structured block")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenACC structured block")[^\n]*\n?)+'}
test_sb-2_183:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/sb-2.c'
    sources: {binary: sb-2.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenACC structured block")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenACC structured block")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenACC structured block")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
test_sb-2_546:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/sb-2.c'
    sources: {binary: sb-2.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenACC structured block")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenACC structured block")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenACC structured block")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
test_sb-2_87:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/sb-2.c'
    sources: {binary: sb-2.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenACC structured block")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenACC structured block")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenACC structured block")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
test_sb-3_184:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/sb-3.c'
    sources: {binary: sb-3.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenACC structured block")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenACC structured block")[^\n]*\n?)+'}
test_sb-3_547:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/sb-3.c'
    sources: {binary: sb-3.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenACC structured block")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenACC structured block")[^\n]*\n?)+'}
test_sb-3_88:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/sb-3.c'
    sources: {binary: sb-3.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenACC structured block")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop
          directive must be associated with an OpenACC compute region")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenACC structured block")[^\n]*\n?)+'}
test_tile-2_185:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/tile-2.c'
    sources: {binary: tile-2.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          enough")[^\n]*\n?)+'}
test_tile-2_436:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/tile-2.c'
    sources: {binary: tile-2.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          enough")[^\n]*\n?)+'}
test_tile-2_437:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/tile-2.c'
    sources: {binary: tile-2.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          enough")[^\n]*\n?)+'}
test_tile-2_438:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/tile-2.c'
    sources: {binary: tile-2.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          enough")[^\n]*\n?)+'}
test_tile-2_548:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/tile-2.c'
    sources: {binary: tile-2.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          enough")[^\n]*\n?)+'}
test_tile-2_799:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/tile-2.c'
    sources: {binary: tile-2.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          enough")[^\n]*\n?)+'}
test_tile-2_800:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/tile-2.c'
    sources: {binary: tile-2.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          enough")[^\n]*\n?)+'}
test_tile-2_801:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/tile-2.c'
    sources: {binary: tile-2.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          enough")[^\n]*\n?)+'}
test_tile-2_89:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/tile-2.c'
    sources: {binary: tile-2.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          enough")[^\n]*\n?)+'}
test_tile_186:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/tile.c'
    sources: {binary: tile.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L110: {expect: true, expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L113: {expect: true, expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L125: {expect: true, expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L156: {expect: true, expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L171: {expect: true, expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L174: {expect: true, expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L215: {expect: true, expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L218: {expect: true, expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L239: {expect: true, expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression")[^\n]*\n?)+'}
      L242: {expect: true, expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L245: {expect: true, expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L255: {expect: true, expr: '(^|\n)([^\n]+:255:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\(\''")[^\n]*\n?)+'}
      L283: {expect: true, expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L286: {expect: true, expr: '(^|\n)([^\n]+:286:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L301: {expect: true, expr: '(^|\n)([^\n]+:301:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L304: {expect: true, expr: '(^|\n)([^\n]+:304:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L315: {expect: true, expr: '(^|\n)([^\n]+:315:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
test_tile_439:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/tile.c'
    sources: {binary: tile.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L110: {expect: true, expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L113: {expect: true, expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L125: {expect: true, expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L156: {expect: true, expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L171: {expect: true, expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L174: {expect: true, expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L215: {expect: true, expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L218: {expect: true, expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L239: {expect: true, expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression")[^\n]*\n?)+'}
      L242: {expect: true, expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L245: {expect: true, expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L255: {expect: true, expr: '(^|\n)([^\n]+:255:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\(\''")[^\n]*\n?)+'}
      L283: {expect: true, expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L286: {expect: true, expr: '(^|\n)([^\n]+:286:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L301: {expect: true, expr: '(^|\n)([^\n]+:301:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L304: {expect: true, expr: '(^|\n)([^\n]+:304:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L315: {expect: true, expr: '(^|\n)([^\n]+:315:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
test_tile_440:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/tile.c'
    sources: {binary: tile.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L110: {expect: true, expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L113: {expect: true, expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L125: {expect: true, expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L156: {expect: true, expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L171: {expect: true, expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L174: {expect: true, expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L215: {expect: true, expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L218: {expect: true, expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L239: {expect: true, expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression")[^\n]*\n?)+'}
      L242: {expect: true, expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L245: {expect: true, expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L255: {expect: true, expr: '(^|\n)([^\n]+:255:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\(\''")[^\n]*\n?)+'}
      L283: {expect: true, expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L286: {expect: true, expr: '(^|\n)([^\n]+:286:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L301: {expect: true, expr: '(^|\n)([^\n]+:301:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L304: {expect: true, expr: '(^|\n)([^\n]+:304:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L315: {expect: true, expr: '(^|\n)([^\n]+:315:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
test_tile_441:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/tile.c'
    sources: {binary: tile.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L110: {expect: true, expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L113: {expect: true, expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L125: {expect: true, expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L156: {expect: true, expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L171: {expect: true, expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L174: {expect: true, expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L215: {expect: true, expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L218: {expect: true, expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L239: {expect: true, expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression")[^\n]*\n?)+'}
      L242: {expect: true, expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L245: {expect: true, expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L255: {expect: true, expr: '(^|\n)([^\n]+:255:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\(\''")[^\n]*\n?)+'}
      L283: {expect: true, expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L286: {expect: true, expr: '(^|\n)([^\n]+:286:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L301: {expect: true, expr: '(^|\n)([^\n]+:301:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L304: {expect: true, expr: '(^|\n)([^\n]+:304:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L315: {expect: true, expr: '(^|\n)([^\n]+:315:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
test_tile_549:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/tile.c'
    sources: {binary: tile.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L110: {expect: true, expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L113: {expect: true, expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L125: {expect: true, expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L156: {expect: true, expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L171: {expect: true, expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L174: {expect: true, expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L215: {expect: true, expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L218: {expect: true, expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L239: {expect: true, expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression")[^\n]*\n?)+'}
      L242: {expect: true, expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L245: {expect: true, expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L255: {expect: true, expr: '(^|\n)([^\n]+:255:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\(\''")[^\n]*\n?)+'}
      L283: {expect: true, expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L286: {expect: true, expr: '(^|\n)([^\n]+:286:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L301: {expect: true, expr: '(^|\n)([^\n]+:301:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L304: {expect: true, expr: '(^|\n)([^\n]+:304:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L315: {expect: true, expr: '(^|\n)([^\n]+:315:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
test_tile_802:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/tile.c'
    sources: {binary: tile.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L110: {expect: true, expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L113: {expect: true, expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L125: {expect: true, expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L156: {expect: true, expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L171: {expect: true, expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L174: {expect: true, expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L215: {expect: true, expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L218: {expect: true, expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L239: {expect: true, expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression")[^\n]*\n?)+'}
      L242: {expect: true, expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L245: {expect: true, expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L255: {expect: true, expr: '(^|\n)([^\n]+:255:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\(\''")[^\n]*\n?)+'}
      L283: {expect: true, expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L286: {expect: true, expr: '(^|\n)([^\n]+:286:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L301: {expect: true, expr: '(^|\n)([^\n]+:301:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L304: {expect: true, expr: '(^|\n)([^\n]+:304:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L315: {expect: true, expr: '(^|\n)([^\n]+:315:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
test_tile_803:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/tile.c'
    sources: {binary: tile.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L110: {expect: true, expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L113: {expect: true, expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L125: {expect: true, expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L156: {expect: true, expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L171: {expect: true, expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L174: {expect: true, expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L215: {expect: true, expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L218: {expect: true, expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L239: {expect: true, expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression")[^\n]*\n?)+'}
      L242: {expect: true, expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L245: {expect: true, expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L255: {expect: true, expr: '(^|\n)([^\n]+:255:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\(\''")[^\n]*\n?)+'}
      L283: {expect: true, expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L286: {expect: true, expr: '(^|\n)([^\n]+:286:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L301: {expect: true, expr: '(^|\n)([^\n]+:301:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L304: {expect: true, expr: '(^|\n)([^\n]+:304:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L315: {expect: true, expr: '(^|\n)([^\n]+:315:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
test_tile_804:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/tile.c'
    sources: {binary: tile.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L110: {expect: true, expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L113: {expect: true, expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L125: {expect: true, expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L156: {expect: true, expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L171: {expect: true, expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L174: {expect: true, expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L215: {expect: true, expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L218: {expect: true, expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L239: {expect: true, expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression")[^\n]*\n?)+'}
      L242: {expect: true, expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L245: {expect: true, expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L255: {expect: true, expr: '(^|\n)([^\n]+:255:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\(\''")[^\n]*\n?)+'}
      L283: {expect: true, expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L286: {expect: true, expr: '(^|\n)([^\n]+:286:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L301: {expect: true, expr: '(^|\n)([^\n]+:301:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L304: {expect: true, expr: '(^|\n)([^\n]+:304:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L315: {expect: true, expr: '(^|\n)([^\n]+:315:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
test_tile_90:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/tile.c'
    sources: {binary: tile.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L110: {expect: true, expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L113: {expect: true, expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L125: {expect: true, expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L156: {expect: true, expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L171: {expect: true, expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L174: {expect: true, expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L215: {expect: true, expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L218: {expect: true, expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L239: {expect: true, expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression")[^\n]*\n?)+'}
      L242: {expect: true, expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L245: {expect: true, expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L255: {expect: true, expr: '(^|\n)([^\n]+:255:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\(\''")[^\n]*\n?)+'}
      L283: {expect: true, expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L286: {expect: true, expr: '(^|\n)([^\n]+:286:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L301: {expect: true, expr: '(^|\n)([^\n]+:301:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L304: {expect: true, expr: '(^|\n)([^\n]+:304:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L315: {expect: true, expr: '(^|\n)([^\n]+:315:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''tile\''
          argument needs")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
test_uninit-copy-clause_187:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-copy-clause.c'
    sources: {binary: uninit-copy-clause.s, cflags: "-fopenacc -Wuninitialized\n -S"}
  group: GRPSERIAL
test_uninit-copy-clause_442:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-copy-clause.c'
    sources: {binary: uninit-copy-clause.s, cflags: "-std=c++98 -fopenacc -Wuninitialized\n
        -S"}
  group: GRPSERIAL
test_uninit-copy-clause_443:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-copy-clause.c'
    sources: {binary: uninit-copy-clause.s, cflags: "-std=c++11 -fopenacc -Wuninitialized\n
        -S"}
  group: GRPSERIAL
test_uninit-copy-clause_444:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-copy-clause.c'
    sources: {binary: uninit-copy-clause.s, cflags: "-std=c++14 -fopenacc -Wuninitialized\n
        -S"}
  group: GRPSERIAL
test_uninit-copy-clause_550:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-copy-clause.c'
    sources: {binary: uninit-copy-clause.s, cflags: "-fopenacc -Wuninitialized\n -S"}
  group: GRPSERIAL
test_uninit-copy-clause_805:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-copy-clause.c'
    sources: {binary: uninit-copy-clause.s, cflags: "-std=c++98 -fopenacc -Wuninitialized\n
        -S"}
  group: GRPSERIAL
test_uninit-copy-clause_806:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-copy-clause.c'
    sources: {binary: uninit-copy-clause.s, cflags: "-std=c++11 -fopenacc -Wuninitialized\n
        -S"}
  group: GRPSERIAL
test_uninit-copy-clause_807:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-copy-clause.c'
    sources: {binary: uninit-copy-clause.s, cflags: "-std=c++14 -fopenacc -Wuninitialized\n
        -S"}
  group: GRPSERIAL
test_uninit-copy-clause_91:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-copy-clause.c'
    sources: {binary: uninit-copy-clause.s, cflags: "-fopenacc -Wuninitialized\n -S"}
  group: GRPSERIAL
test_uninit-dim-clause_188:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-dim-clause.c'
    sources: {binary: uninit-dim-clause.s, cflags: "-fopenacc -Wuninitialized\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_uninit-dim-clause_445:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-dim-clause.c'
    sources: {binary: uninit-dim-clause.s, cflags: "-std=c++98 -fopenacc -Wuninitialized\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_uninit-dim-clause_446:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-dim-clause.c'
    sources: {binary: uninit-dim-clause.s, cflags: "-std=c++11 -fopenacc -Wuninitialized\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_uninit-dim-clause_447:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-dim-clause.c'
    sources: {binary: uninit-dim-clause.s, cflags: "-std=c++14 -fopenacc -Wuninitialized\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_uninit-dim-clause_551:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-dim-clause.c'
    sources: {binary: uninit-dim-clause.s, cflags: "-fopenacc -Wuninitialized\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_uninit-dim-clause_808:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-dim-clause.c'
    sources: {binary: uninit-dim-clause.s, cflags: "-std=c++98 -fopenacc -Wuninitialized\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_uninit-dim-clause_809:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-dim-clause.c'
    sources: {binary: uninit-dim-clause.s, cflags: "-std=c++11 -fopenacc -Wuninitialized\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_uninit-dim-clause_810:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-dim-clause.c'
    sources: {binary: uninit-dim-clause.s, cflags: "-std=c++14 -fopenacc -Wuninitialized\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_uninit-dim-clause_92:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-dim-clause.c'
    sources: {binary: uninit-dim-clause.s, cflags: "-fopenacc -Wuninitialized\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_uninit-firstprivate-clause_189:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-firstprivate-clause.c'
    sources: {binary: uninit-firstprivate-clause.s, cflags: "-fopenacc -Wuninitialized\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_uninit-firstprivate-clause_448:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-firstprivate-clause.c'
    sources: {binary: uninit-firstprivate-clause.s, cflags: "-std=c++98 -fopenacc
        -Wuninitialized\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_uninit-firstprivate-clause_449:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-firstprivate-clause.c'
    sources: {binary: uninit-firstprivate-clause.s, cflags: "-std=c++11 -fopenacc
        -Wuninitialized\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_uninit-firstprivate-clause_450:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-firstprivate-clause.c'
    sources: {binary: uninit-firstprivate-clause.s, cflags: "-std=c++14 -fopenacc
        -Wuninitialized\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_uninit-firstprivate-clause_552:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-firstprivate-clause.c'
    sources: {binary: uninit-firstprivate-clause.s, cflags: "-fopenacc -Wuninitialized\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_uninit-firstprivate-clause_811:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-firstprivate-clause.c'
    sources: {binary: uninit-firstprivate-clause.s, cflags: "-std=c++98 -fopenacc
        -Wuninitialized\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_uninit-firstprivate-clause_812:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-firstprivate-clause.c'
    sources: {binary: uninit-firstprivate-clause.s, cflags: "-std=c++11 -fopenacc
        -Wuninitialized\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_uninit-firstprivate-clause_813:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-firstprivate-clause.c'
    sources: {binary: uninit-firstprivate-clause.s, cflags: "-std=c++14 -fopenacc
        -Wuninitialized\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_uninit-firstprivate-clause_93:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-firstprivate-clause.c'
    sources: {binary: uninit-firstprivate-clause.s, cflags: "-fopenacc -Wuninitialized\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_uninit-if-clause_190:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-if-clause.c'
    sources: {binary: uninit-if-clause.s, cflags: "-fopenacc -Wuninitialized\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_uninit-if-clause_451:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-if-clause.c'
    sources: {binary: uninit-if-clause.s, cflags: "-std=c++98 -fopenacc -Wuninitialized\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_uninit-if-clause_452:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-if-clause.c'
    sources: {binary: uninit-if-clause.s, cflags: "-std=c++11 -fopenacc -Wuninitialized\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_uninit-if-clause_453:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-if-clause.c'
    sources: {binary: uninit-if-clause.s, cflags: "-std=c++14 -fopenacc -Wuninitialized\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_uninit-if-clause_553:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-if-clause.c'
    sources: {binary: uninit-if-clause.s, cflags: "-fopenacc -Wuninitialized\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_uninit-if-clause_814:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-if-clause.c'
    sources: {binary: uninit-if-clause.s, cflags: "-std=c++98 -fopenacc -Wuninitialized\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_uninit-if-clause_815:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-if-clause.c'
    sources: {binary: uninit-if-clause.s, cflags: "-std=c++11 -fopenacc -Wuninitialized\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_uninit-if-clause_816:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-if-clause.c'
    sources: {binary: uninit-if-clause.s, cflags: "-std=c++14 -fopenacc -Wuninitialized\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_uninit-if-clause_94:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-if-clause.c'
    sources: {binary: uninit-if-clause.s, cflags: "-fopenacc -Wuninitialized\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_uninit-use-device-clause_191:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-use-device-clause.c'
    sources: {binary: uninit-use-device-clause.s, cflags: "-fopenacc -Wuninitialized\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_uninit-use-device-clause_454:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-use-device-clause.c'
    sources: {binary: uninit-use-device-clause.s, cflags: "-std=c++98 -fopenacc -Wuninitialized\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_uninit-use-device-clause_455:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-use-device-clause.c'
    sources: {binary: uninit-use-device-clause.s, cflags: "-std=c++11 -fopenacc -Wuninitialized\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_uninit-use-device-clause_456:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-use-device-clause.c'
    sources: {binary: uninit-use-device-clause.s, cflags: "-std=c++14 -fopenacc -Wuninitialized\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_uninit-use-device-clause_554:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-use-device-clause.c'
    sources: {binary: uninit-use-device-clause.s, cflags: "-fopenacc -Wuninitialized\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_uninit-use-device-clause_817:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-use-device-clause.c'
    sources: {binary: uninit-use-device-clause.s, cflags: "-std=c++98 -fopenacc -Wuninitialized\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_uninit-use-device-clause_818:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-use-device-clause.c'
    sources: {binary: uninit-use-device-clause.s, cflags: "-std=c++11 -fopenacc -Wuninitialized\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_uninit-use-device-clause_819:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-use-device-clause.c'
    sources: {binary: uninit-use-device-clause.s, cflags: "-std=c++14 -fopenacc -Wuninitialized\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_uninit-use-device-clause_95:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/uninit-use-device-clause.c'
    sources: {binary: uninit-use-device-clause.s, cflags: "-fopenacc -Wuninitialized\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_update-1_192:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/update-1.c'
    sources: {binary: update-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\(\'' token")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\(\'' token")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\(\'' token")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''#pragma
          acc update\'' must contain at least one \''device\'' or \''host\'' or \''self\''
          clause")[^\n]*\n?)+'}
test_update-1_457:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/update-1.c'
    sources: {binary: update-1.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\(\'' token")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\(\'' token")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\(\'' token")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''#pragma
          acc update\'' must contain at least one \''device\'' or \''host\'' or \''self\''
          clause")[^\n]*\n?)+'}
test_update-1_458:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/update-1.c'
    sources: {binary: update-1.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\(\'' token")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\(\'' token")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\(\'' token")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''#pragma
          acc update\'' must contain at least one \''device\'' or \''host\'' or \''self\''
          clause")[^\n]*\n?)+'}
test_update-1_459:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/update-1.c'
    sources: {binary: update-1.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\(\'' token")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\(\'' token")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\(\'' token")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''#pragma
          acc update\'' must contain at least one \''device\'' or \''host\'' or \''self\''
          clause")[^\n]*\n?)+'}
test_update-1_555:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/update-1.c'
    sources: {binary: update-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\(\'' token")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\(\'' token")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\(\'' token")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''#pragma
          acc update\'' must contain at least one \''device\'' or \''host\'' or \''self\''
          clause")[^\n]*\n?)+'}
test_update-1_820:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/update-1.c'
    sources: {binary: update-1.s, cflags: "-std=c++98 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\(\'' token")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\(\'' token")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\(\'' token")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''#pragma
          acc update\'' must contain at least one \''device\'' or \''host\'' or \''self\''
          clause")[^\n]*\n?)+'}
test_update-1_821:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/update-1.c'
    sources: {binary: update-1.s, cflags: "-std=c++11 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\(\'' token")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\(\'' token")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\(\'' token")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''#pragma
          acc update\'' must contain at least one \''device\'' or \''host\'' or \''self\''
          clause")[^\n]*\n?)+'}
test_update-1_822:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/update-1.c'
    sources: {binary: update-1.s, cflags: "-std=c++14 -fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\(\'' token")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\(\'' token")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\(\'' token")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''#pragma
          acc update\'' must contain at least one \''device\'' or \''host\'' or \''self\''
          clause")[^\n]*\n?)+'}
test_update-1_96:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/goacc/update-1.c'
    sources: {binary: update-1.s, cflags: "-fopenacc\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\(\'' token")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\(\'' token")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\\\)\'' before \''\\\\\\(\'' token")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''#pragma
          acc update\'' must contain at least one \''device\'' or \''host\'' or \''self\''
          clause")[^\n]*\n?)+'}
