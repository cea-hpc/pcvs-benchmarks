test_Wparentheses-1_1:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/Wparentheses-1.c'
    sources: {binary: Wparentheses-1.s, cflags: "-fopenmp -Wno-hsa -Wparentheses\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L104: {expect: true, expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L111: {expect: true, expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+(:118:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L307: {expect: true, expr: '(^|\n)([^\n]+(:307:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L314: {expect: true, expr: '(^|\n)([^\n]+(:314:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-1_110:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/Wparentheses-1.c'
    sources: {binary: Wparentheses-1.s, cflags: "-fopenmp -Wno-hsa -Wparentheses\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L104: {expect: true, expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L111: {expect: true, expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+(:118:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L307: {expect: true, expr: '(^|\n)([^\n]+(:307:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L314: {expect: true, expr: '(^|\n)([^\n]+(:314:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-1_219:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/Wparentheses-1.c'
    sources: {binary: Wparentheses-1.s, cflags: "-std=c++98 -fopenmp -Wno-hsa -Wparentheses\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L104: {expect: true, expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L111: {expect: true, expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+(:118:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L307: {expect: true, expr: '(^|\n)([^\n]+(:307:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L314: {expect: true, expr: '(^|\n)([^\n]+(:314:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-1_220:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/Wparentheses-1.c'
    sources: {binary: Wparentheses-1.s, cflags: "-std=c++11 -fopenmp -Wno-hsa -Wparentheses\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L104: {expect: true, expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L111: {expect: true, expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+(:118:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L307: {expect: true, expr: '(^|\n)([^\n]+(:307:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L314: {expect: true, expr: '(^|\n)([^\n]+(:314:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-1_221:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/Wparentheses-1.c'
    sources: {binary: Wparentheses-1.s, cflags: "-std=c++14 -fopenmp -Wno-hsa -Wparentheses\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L104: {expect: true, expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L111: {expect: true, expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+(:118:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L307: {expect: true, expr: '(^|\n)([^\n]+(:307:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L314: {expect: true, expr: '(^|\n)([^\n]+(:314:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-1_544:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/Wparentheses-1.c'
    sources: {binary: Wparentheses-1.s, cflags: "-fopenmp -Wno-hsa -Wparentheses\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L104: {expect: true, expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L111: {expect: true, expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+(:118:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L307: {expect: true, expr: '(^|\n)([^\n]+(:307:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L314: {expect: true, expr: '(^|\n)([^\n]+(:314:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-1_653:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/Wparentheses-1.c'
    sources: {binary: Wparentheses-1.s, cflags: "-std=c++98 -fopenmp -Wno-hsa -Wparentheses\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L104: {expect: true, expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L111: {expect: true, expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+(:118:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L307: {expect: true, expr: '(^|\n)([^\n]+(:307:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L314: {expect: true, expr: '(^|\n)([^\n]+(:314:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-1_654:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/Wparentheses-1.c'
    sources: {binary: Wparentheses-1.s, cflags: "-std=c++11 -fopenmp -Wno-hsa -Wparentheses\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L104: {expect: true, expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L111: {expect: true, expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+(:118:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L307: {expect: true, expr: '(^|\n)([^\n]+(:307:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L314: {expect: true, expr: '(^|\n)([^\n]+(:314:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-1_655:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/Wparentheses-1.c'
    sources: {binary: Wparentheses-1.s, cflags: "-std=c++14 -fopenmp -Wno-hsa -Wparentheses\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L104: {expect: true, expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L111: {expect: true, expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+(:118:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L307: {expect: true, expr: '(^|\n)([^\n]+(:307:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L314: {expect: true, expr: '(^|\n)([^\n]+(:314:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-2_111:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/Wparentheses-2.c'
    sources: {binary: Wparentheses-2.s, cflags: "-fopenmp -Wno-hsa -Wparentheses\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L107: {expect: true, expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+(:119:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L309: {expect: true, expr: '(^|\n)([^\n]+(:309:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L318: {expect: true, expr: '(^|\n)([^\n]+(:318:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L332: {expect: true, expr: '(^|\n)([^\n]+(:332:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L340: {expect: true, expr: '(^|\n)([^\n]+(:340:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L350: {expect: true, expr: '(^|\n)([^\n]+(:350:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L358: {expect: true, expr: '(^|\n)([^\n]+(:358:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L437: {expect: true, expr: '(^|\n)([^\n]+(:437:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-2_2:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/Wparentheses-2.c'
    sources: {binary: Wparentheses-2.s, cflags: "-fopenmp -Wno-hsa -Wparentheses\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L107: {expect: true, expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+(:119:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L309: {expect: true, expr: '(^|\n)([^\n]+(:309:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L318: {expect: true, expr: '(^|\n)([^\n]+(:318:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L332: {expect: true, expr: '(^|\n)([^\n]+(:332:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L340: {expect: true, expr: '(^|\n)([^\n]+(:340:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L350: {expect: true, expr: '(^|\n)([^\n]+(:350:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L358: {expect: true, expr: '(^|\n)([^\n]+(:358:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L437: {expect: true, expr: '(^|\n)([^\n]+(:437:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-2_222:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/Wparentheses-2.c'
    sources: {binary: Wparentheses-2.s, cflags: "-std=c++98 -fopenmp -Wno-hsa -Wparentheses\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L107: {expect: true, expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+(:119:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L309: {expect: true, expr: '(^|\n)([^\n]+(:309:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L318: {expect: true, expr: '(^|\n)([^\n]+(:318:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L332: {expect: true, expr: '(^|\n)([^\n]+(:332:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L340: {expect: true, expr: '(^|\n)([^\n]+(:340:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L350: {expect: true, expr: '(^|\n)([^\n]+(:350:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L358: {expect: true, expr: '(^|\n)([^\n]+(:358:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L437: {expect: true, expr: '(^|\n)([^\n]+(:437:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-2_223:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/Wparentheses-2.c'
    sources: {binary: Wparentheses-2.s, cflags: "-std=c++11 -fopenmp -Wno-hsa -Wparentheses\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L107: {expect: true, expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+(:119:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L309: {expect: true, expr: '(^|\n)([^\n]+(:309:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L318: {expect: true, expr: '(^|\n)([^\n]+(:318:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L332: {expect: true, expr: '(^|\n)([^\n]+(:332:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L340: {expect: true, expr: '(^|\n)([^\n]+(:340:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L350: {expect: true, expr: '(^|\n)([^\n]+(:350:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L358: {expect: true, expr: '(^|\n)([^\n]+(:358:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L437: {expect: true, expr: '(^|\n)([^\n]+(:437:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-2_224:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/Wparentheses-2.c'
    sources: {binary: Wparentheses-2.s, cflags: "-std=c++14 -fopenmp -Wno-hsa -Wparentheses\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L107: {expect: true, expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+(:119:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L309: {expect: true, expr: '(^|\n)([^\n]+(:309:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L318: {expect: true, expr: '(^|\n)([^\n]+(:318:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L332: {expect: true, expr: '(^|\n)([^\n]+(:332:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L340: {expect: true, expr: '(^|\n)([^\n]+(:340:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L350: {expect: true, expr: '(^|\n)([^\n]+(:350:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L358: {expect: true, expr: '(^|\n)([^\n]+(:358:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L437: {expect: true, expr: '(^|\n)([^\n]+(:437:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-2_545:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/Wparentheses-2.c'
    sources: {binary: Wparentheses-2.s, cflags: "-fopenmp -Wno-hsa -Wparentheses\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L107: {expect: true, expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+(:119:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L309: {expect: true, expr: '(^|\n)([^\n]+(:309:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L318: {expect: true, expr: '(^|\n)([^\n]+(:318:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L332: {expect: true, expr: '(^|\n)([^\n]+(:332:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L340: {expect: true, expr: '(^|\n)([^\n]+(:340:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L350: {expect: true, expr: '(^|\n)([^\n]+(:350:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L358: {expect: true, expr: '(^|\n)([^\n]+(:358:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L437: {expect: true, expr: '(^|\n)([^\n]+(:437:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-2_656:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/Wparentheses-2.c'
    sources: {binary: Wparentheses-2.s, cflags: "-std=c++98 -fopenmp -Wno-hsa -Wparentheses\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L107: {expect: true, expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+(:119:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L309: {expect: true, expr: '(^|\n)([^\n]+(:309:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L318: {expect: true, expr: '(^|\n)([^\n]+(:318:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L332: {expect: true, expr: '(^|\n)([^\n]+(:332:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L340: {expect: true, expr: '(^|\n)([^\n]+(:340:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L350: {expect: true, expr: '(^|\n)([^\n]+(:350:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L358: {expect: true, expr: '(^|\n)([^\n]+(:358:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L437: {expect: true, expr: '(^|\n)([^\n]+(:437:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-2_657:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/Wparentheses-2.c'
    sources: {binary: Wparentheses-2.s, cflags: "-std=c++11 -fopenmp -Wno-hsa -Wparentheses\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L107: {expect: true, expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+(:119:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L309: {expect: true, expr: '(^|\n)([^\n]+(:309:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L318: {expect: true, expr: '(^|\n)([^\n]+(:318:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L332: {expect: true, expr: '(^|\n)([^\n]+(:332:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L340: {expect: true, expr: '(^|\n)([^\n]+(:340:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L350: {expect: true, expr: '(^|\n)([^\n]+(:350:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L358: {expect: true, expr: '(^|\n)([^\n]+(:358:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L437: {expect: true, expr: '(^|\n)([^\n]+(:437:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-2_658:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/Wparentheses-2.c'
    sources: {binary: Wparentheses-2.s, cflags: "-std=c++14 -fopenmp -Wno-hsa -Wparentheses\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L107: {expect: true, expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+(:119:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L309: {expect: true, expr: '(^|\n)([^\n]+(:309:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L318: {expect: true, expr: '(^|\n)([^\n]+(:318:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L332: {expect: true, expr: '(^|\n)([^\n]+(:332:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L340: {expect: true, expr: '(^|\n)([^\n]+(:340:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L350: {expect: true, expr: '(^|\n)([^\n]+(:350:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L358: {expect: true, expr: '(^|\n)([^\n]+(:358:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L437: {expect: true, expr: '(^|\n)([^\n]+(:437:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-3_112:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/Wparentheses-3.c'
    sources: {binary: Wparentheses-3.s, cflags: "-fopenmp -Wno-hsa -Wparentheses -fno-openmp\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L104: {expect: true, expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L111: {expect: true, expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+(:118:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L307: {expect: true, expr: '(^|\n)([^\n]+(:307:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L314: {expect: true, expr: '(^|\n)([^\n]+(:314:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-3_225:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/Wparentheses-3.c'
    sources: {binary: Wparentheses-3.s, cflags: "-std=c++98 -fopenmp -Wno-hsa -Wparentheses
        -fno-openmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L104: {expect: true, expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L111: {expect: true, expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+(:118:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L307: {expect: true, expr: '(^|\n)([^\n]+(:307:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L314: {expect: true, expr: '(^|\n)([^\n]+(:314:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-3_226:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/Wparentheses-3.c'
    sources: {binary: Wparentheses-3.s, cflags: "-std=c++11 -fopenmp -Wno-hsa -Wparentheses
        -fno-openmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L104: {expect: true, expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L111: {expect: true, expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+(:118:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L307: {expect: true, expr: '(^|\n)([^\n]+(:307:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L314: {expect: true, expr: '(^|\n)([^\n]+(:314:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-3_227:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/Wparentheses-3.c'
    sources: {binary: Wparentheses-3.s, cflags: "-std=c++14 -fopenmp -Wno-hsa -Wparentheses
        -fno-openmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L104: {expect: true, expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L111: {expect: true, expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+(:118:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L307: {expect: true, expr: '(^|\n)([^\n]+(:307:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L314: {expect: true, expr: '(^|\n)([^\n]+(:314:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-3_3:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/Wparentheses-3.c'
    sources: {binary: Wparentheses-3.s, cflags: "-fopenmp -Wno-hsa -Wparentheses -fno-openmp\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L104: {expect: true, expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L111: {expect: true, expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+(:118:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L307: {expect: true, expr: '(^|\n)([^\n]+(:307:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L314: {expect: true, expr: '(^|\n)([^\n]+(:314:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-3_546:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/Wparentheses-3.c'
    sources: {binary: Wparentheses-3.s, cflags: "-fopenmp -Wno-hsa -Wparentheses -fno-openmp\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L104: {expect: true, expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L111: {expect: true, expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+(:118:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L307: {expect: true, expr: '(^|\n)([^\n]+(:307:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L314: {expect: true, expr: '(^|\n)([^\n]+(:314:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-3_659:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/Wparentheses-3.c'
    sources: {binary: Wparentheses-3.s, cflags: "-std=c++98 -fopenmp -Wno-hsa -Wparentheses
        -fno-openmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L104: {expect: true, expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L111: {expect: true, expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+(:118:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L307: {expect: true, expr: '(^|\n)([^\n]+(:307:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L314: {expect: true, expr: '(^|\n)([^\n]+(:314:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-3_660:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/Wparentheses-3.c'
    sources: {binary: Wparentheses-3.s, cflags: "-std=c++11 -fopenmp -Wno-hsa -Wparentheses
        -fno-openmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L104: {expect: true, expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L111: {expect: true, expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+(:118:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L307: {expect: true, expr: '(^|\n)([^\n]+(:307:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L314: {expect: true, expr: '(^|\n)([^\n]+(:314:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-3_661:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/Wparentheses-3.c'
    sources: {binary: Wparentheses-3.s, cflags: "-std=c++14 -fopenmp -Wno-hsa -Wparentheses
        -fno-openmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L104: {expect: true, expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L111: {expect: true, expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+(:118:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L307: {expect: true, expr: '(^|\n)([^\n]+(:307:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L314: {expect: true, expr: '(^|\n)([^\n]+(:314:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-4_113:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/Wparentheses-4.c'
    sources: {binary: Wparentheses-4.s, cflags: "-fopenmp -Wno-hsa -Wparentheses -fno-openmp\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L107: {expect: true, expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+(:119:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L309: {expect: true, expr: '(^|\n)([^\n]+(:309:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L318: {expect: true, expr: '(^|\n)([^\n]+(:318:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L332: {expect: true, expr: '(^|\n)([^\n]+(:332:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L340: {expect: true, expr: '(^|\n)([^\n]+(:340:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L350: {expect: true, expr: '(^|\n)([^\n]+(:350:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L358: {expect: true, expr: '(^|\n)([^\n]+(:358:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L437: {expect: true, expr: '(^|\n)([^\n]+(:437:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-4_228:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/Wparentheses-4.c'
    sources: {binary: Wparentheses-4.s, cflags: "-std=c++98 -fopenmp -Wno-hsa -Wparentheses
        -fno-openmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L107: {expect: true, expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+(:119:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L309: {expect: true, expr: '(^|\n)([^\n]+(:309:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L318: {expect: true, expr: '(^|\n)([^\n]+(:318:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L332: {expect: true, expr: '(^|\n)([^\n]+(:332:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L340: {expect: true, expr: '(^|\n)([^\n]+(:340:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L350: {expect: true, expr: '(^|\n)([^\n]+(:350:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L358: {expect: true, expr: '(^|\n)([^\n]+(:358:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L437: {expect: true, expr: '(^|\n)([^\n]+(:437:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-4_229:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/Wparentheses-4.c'
    sources: {binary: Wparentheses-4.s, cflags: "-std=c++11 -fopenmp -Wno-hsa -Wparentheses
        -fno-openmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L107: {expect: true, expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+(:119:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L309: {expect: true, expr: '(^|\n)([^\n]+(:309:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L318: {expect: true, expr: '(^|\n)([^\n]+(:318:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L332: {expect: true, expr: '(^|\n)([^\n]+(:332:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L340: {expect: true, expr: '(^|\n)([^\n]+(:340:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L350: {expect: true, expr: '(^|\n)([^\n]+(:350:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L358: {expect: true, expr: '(^|\n)([^\n]+(:358:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L437: {expect: true, expr: '(^|\n)([^\n]+(:437:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-4_230:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/Wparentheses-4.c'
    sources: {binary: Wparentheses-4.s, cflags: "-std=c++14 -fopenmp -Wno-hsa -Wparentheses
        -fno-openmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L107: {expect: true, expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+(:119:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L309: {expect: true, expr: '(^|\n)([^\n]+(:309:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L318: {expect: true, expr: '(^|\n)([^\n]+(:318:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L332: {expect: true, expr: '(^|\n)([^\n]+(:332:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L340: {expect: true, expr: '(^|\n)([^\n]+(:340:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L350: {expect: true, expr: '(^|\n)([^\n]+(:350:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L358: {expect: true, expr: '(^|\n)([^\n]+(:358:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L437: {expect: true, expr: '(^|\n)([^\n]+(:437:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-4_4:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/Wparentheses-4.c'
    sources: {binary: Wparentheses-4.s, cflags: "-fopenmp -Wno-hsa -Wparentheses -fno-openmp\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L107: {expect: true, expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+(:119:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L309: {expect: true, expr: '(^|\n)([^\n]+(:309:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L318: {expect: true, expr: '(^|\n)([^\n]+(:318:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L332: {expect: true, expr: '(^|\n)([^\n]+(:332:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L340: {expect: true, expr: '(^|\n)([^\n]+(:340:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L350: {expect: true, expr: '(^|\n)([^\n]+(:350:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L358: {expect: true, expr: '(^|\n)([^\n]+(:358:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L437: {expect: true, expr: '(^|\n)([^\n]+(:437:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-4_547:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/Wparentheses-4.c'
    sources: {binary: Wparentheses-4.s, cflags: "-fopenmp -Wno-hsa -Wparentheses -fno-openmp\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L107: {expect: true, expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+(:119:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L309: {expect: true, expr: '(^|\n)([^\n]+(:309:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L318: {expect: true, expr: '(^|\n)([^\n]+(:318:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L332: {expect: true, expr: '(^|\n)([^\n]+(:332:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L340: {expect: true, expr: '(^|\n)([^\n]+(:340:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L350: {expect: true, expr: '(^|\n)([^\n]+(:350:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L358: {expect: true, expr: '(^|\n)([^\n]+(:358:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L437: {expect: true, expr: '(^|\n)([^\n]+(:437:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-4_662:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/Wparentheses-4.c'
    sources: {binary: Wparentheses-4.s, cflags: "-std=c++98 -fopenmp -Wno-hsa -Wparentheses
        -fno-openmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L107: {expect: true, expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+(:119:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L309: {expect: true, expr: '(^|\n)([^\n]+(:309:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L318: {expect: true, expr: '(^|\n)([^\n]+(:318:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L332: {expect: true, expr: '(^|\n)([^\n]+(:332:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L340: {expect: true, expr: '(^|\n)([^\n]+(:340:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L350: {expect: true, expr: '(^|\n)([^\n]+(:350:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L358: {expect: true, expr: '(^|\n)([^\n]+(:358:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L437: {expect: true, expr: '(^|\n)([^\n]+(:437:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-4_663:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/Wparentheses-4.c'
    sources: {binary: Wparentheses-4.s, cflags: "-std=c++11 -fopenmp -Wno-hsa -Wparentheses
        -fno-openmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L107: {expect: true, expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+(:119:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L309: {expect: true, expr: '(^|\n)([^\n]+(:309:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L318: {expect: true, expr: '(^|\n)([^\n]+(:318:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L332: {expect: true, expr: '(^|\n)([^\n]+(:332:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L340: {expect: true, expr: '(^|\n)([^\n]+(:340:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L350: {expect: true, expr: '(^|\n)([^\n]+(:350:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L358: {expect: true, expr: '(^|\n)([^\n]+(:358:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L437: {expect: true, expr: '(^|\n)([^\n]+(:437:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-4_664:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/Wparentheses-4.c'
    sources: {binary: Wparentheses-4.s, cflags: "-std=c++14 -fopenmp -Wno-hsa -Wparentheses
        -fno-openmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L107: {expect: true, expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+(:119:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L309: {expect: true, expr: '(^|\n)([^\n]+(:309:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L318: {expect: true, expr: '(^|\n)([^\n]+(:318:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L332: {expect: true, expr: '(^|\n)([^\n]+(:332:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L340: {expect: true, expr: '(^|\n)([^\n]+(:340:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L350: {expect: true, expr: '(^|\n)([^\n]+(:350:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L358: {expect: true, expr: '(^|\n)([^\n]+(:358:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L437: {expect: true, expr: '(^|\n)([^\n]+(:437:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_atomic-10_115:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-10.c'
    sources: {binary: atomic-10.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_atomic-10_234:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-10.c'
    sources: {binary: atomic-10.s, cflags: "-std=gnu++98 -fopenmp -fdump-tree-ompexp\n
        -S"}
  group: GRPSERIAL
test_atomic-10_235:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-10.c'
    sources: {binary: atomic-10.s, cflags: "-std=gnu++11 -fopenmp -fdump-tree-ompexp\n
        -S"}
  group: GRPSERIAL
test_atomic-10_236:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-10.c'
    sources: {binary: atomic-10.s, cflags: "-std=gnu++14 -fopenmp -fdump-tree-ompexp\n
        -S"}
  group: GRPSERIAL
test_atomic-10_549:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-10.c'
    sources: {binary: atomic-10.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_atomic-10_6:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-10.c'
    sources: {binary: atomic-10.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_atomic-10_668:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-10.c'
    sources: {binary: atomic-10.s, cflags: "-std=gnu++98 -fopenmp -fdump-tree-ompexp\n
        -S"}
  group: GRPSERIAL
test_atomic-10_669:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-10.c'
    sources: {binary: atomic-10.s, cflags: "-std=gnu++11 -fopenmp -fdump-tree-ompexp\n
        -S"}
  group: GRPSERIAL
test_atomic-10_670:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-10.c'
    sources: {binary: atomic-10.s, cflags: "-std=gnu++14 -fopenmp -fdump-tree-ompexp\n
        -S"}
  group: GRPSERIAL
test_atomic-12_116:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-12.c'
    sources: {binary: atomic-12.s, cflags: "-fopenmp -fdump-tree-gimple -g0 -Wno-deprecated\n
        -S"}
  group: GRPSERIAL
test_atomic-12_237:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-12.c'
    sources: {binary: atomic-12.s, cflags: "-std=gnu++98 -fopenmp -fdump-tree-gimple
        -g0 -Wno-deprecated\n -S"}
  group: GRPSERIAL
test_atomic-12_238:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-12.c'
    sources: {binary: atomic-12.s, cflags: "-std=gnu++11 -fopenmp -fdump-tree-gimple
        -g0 -Wno-deprecated\n -S"}
  group: GRPSERIAL
test_atomic-12_239:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-12.c'
    sources: {binary: atomic-12.s, cflags: "-std=gnu++14 -fopenmp -fdump-tree-gimple
        -g0 -Wno-deprecated\n -S"}
  group: GRPSERIAL
test_atomic-12_550:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-12.c'
    sources: {binary: atomic-12.s, cflags: "-fopenmp -fdump-tree-gimple -g0 -Wno-deprecated\n
        -S"}
  group: GRPSERIAL
test_atomic-12_671:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-12.c'
    sources: {binary: atomic-12.s, cflags: "-std=gnu++98 -fopenmp -fdump-tree-gimple
        -g0 -Wno-deprecated\n -S"}
  group: GRPSERIAL
test_atomic-12_672:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-12.c'
    sources: {binary: atomic-12.s, cflags: "-std=gnu++11 -fopenmp -fdump-tree-gimple
        -g0 -Wno-deprecated\n -S"}
  group: GRPSERIAL
test_atomic-12_673:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-12.c'
    sources: {binary: atomic-12.s, cflags: "-std=gnu++14 -fopenmp -fdump-tree-gimple
        -g0 -Wno-deprecated\n -S"}
  group: GRPSERIAL
test_atomic-12_7:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-12.c'
    sources: {binary: atomic-12.s, cflags: "-fopenmp -fdump-tree-gimple -g0 -Wno-deprecated\n
        -S"}
  group: GRPSERIAL
test_atomic-13_117:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-13.c'
    sources: {binary: atomic-13.s, cflags: "-fopenmp -fdump-tree-gimple -g0 -O2 -Wno-deprecated\n
        -S"}
  group: GRPSERIAL
test_atomic-13_240:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-13.c'
    sources: {binary: atomic-13.s, cflags: "-std=gnu++98 -fopenmp -fdump-tree-gimple
        -g0 -O2 -Wno-deprecated\n -S"}
  group: GRPSERIAL
test_atomic-13_241:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-13.c'
    sources: {binary: atomic-13.s, cflags: "-std=gnu++11 -fopenmp -fdump-tree-gimple
        -g0 -O2 -Wno-deprecated\n -S"}
  group: GRPSERIAL
test_atomic-13_242:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-13.c'
    sources: {binary: atomic-13.s, cflags: "-std=gnu++14 -fopenmp -fdump-tree-gimple
        -g0 -O2 -Wno-deprecated\n -S"}
  group: GRPSERIAL
test_atomic-13_551:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-13.c'
    sources: {binary: atomic-13.s, cflags: "-fopenmp -fdump-tree-gimple -g0 -O2 -Wno-deprecated\n
        -S"}
  group: GRPSERIAL
test_atomic-13_674:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-13.c'
    sources: {binary: atomic-13.s, cflags: "-std=gnu++98 -fopenmp -fdump-tree-gimple
        -g0 -O2 -Wno-deprecated\n -S"}
  group: GRPSERIAL
test_atomic-13_675:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-13.c'
    sources: {binary: atomic-13.s, cflags: "-std=gnu++11 -fopenmp -fdump-tree-gimple
        -g0 -O2 -Wno-deprecated\n -S"}
  group: GRPSERIAL
test_atomic-13_676:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-13.c'
    sources: {binary: atomic-13.s, cflags: "-std=gnu++14 -fopenmp -fdump-tree-gimple
        -g0 -O2 -Wno-deprecated\n -S"}
  group: GRPSERIAL
test_atomic-13_8:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-13.c'
    sources: {binary: atomic-13.s, cflags: "-fopenmp -fdump-tree-gimple -g0 -O2 -Wno-deprecated\n
        -S"}
  group: GRPSERIAL
test_atomic-14_118:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-14.c'
    sources: {binary: atomic-14.s, cflags: "-fopenmp -Wno-deprecated\n -S"}
  group: GRPSERIAL
test_atomic-14_243:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-14.c'
    sources: {binary: atomic-14.s, cflags: "-std=gnu++98 -fopenmp -Wno-deprecated\n
        -S"}
  group: GRPSERIAL
test_atomic-14_244:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-14.c'
    sources: {binary: atomic-14.s, cflags: "-std=gnu++11 -fopenmp -Wno-deprecated\n
        -S"}
  group: GRPSERIAL
test_atomic-14_245:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-14.c'
    sources: {binary: atomic-14.s, cflags: "-std=gnu++14 -fopenmp -Wno-deprecated\n
        -S"}
  group: GRPSERIAL
test_atomic-14_552:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-14.c'
    sources: {binary: atomic-14.s, cflags: "-fopenmp -Wno-deprecated\n -S"}
  group: GRPSERIAL
test_atomic-14_677:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-14.c'
    sources: {binary: atomic-14.s, cflags: "-std=gnu++98 -fopenmp -Wno-deprecated\n
        -S"}
  group: GRPSERIAL
test_atomic-14_678:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-14.c'
    sources: {binary: atomic-14.s, cflags: "-std=gnu++11 -fopenmp -Wno-deprecated\n
        -S"}
  group: GRPSERIAL
test_atomic-14_679:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-14.c'
    sources: {binary: atomic-14.s, cflags: "-std=gnu++14 -fopenmp -Wno-deprecated\n
        -S"}
  group: GRPSERIAL
test_atomic-14_9:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-14.c'
    sources: {binary: atomic-14.s, cflags: "-fopenmp -Wno-deprecated\n -S"}
  group: GRPSERIAL
test_atomic-15_10:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-15.c'
    sources: {binary: atomic-15.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|uses
          two different expressions for memory")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|uses
          two different expressions for memory")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|uses
          two different expressions for memory")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|uses
          two different expressions for memory")[^\n]*\n?)+'}
test_atomic-15_119:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-15.c'
    sources: {binary: atomic-15.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|uses
          two different expressions for memory")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|uses
          two different expressions for memory")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|uses
          two different expressions for memory")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|uses
          two different expressions for memory")[^\n]*\n?)+'}
test_atomic-15_246:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-15.c'
    sources: {binary: atomic-15.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|uses
          two different expressions for memory")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|uses
          two different expressions for memory")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|uses
          two different expressions for memory")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|uses
          two different expressions for memory")[^\n]*\n?)+'}
test_atomic-15_247:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-15.c'
    sources: {binary: atomic-15.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|uses
          two different expressions for memory")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|uses
          two different expressions for memory")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|uses
          two different expressions for memory")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|uses
          two different expressions for memory")[^\n]*\n?)+'}
test_atomic-15_248:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-15.c'
    sources: {binary: atomic-15.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|uses
          two different expressions for memory")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|uses
          two different expressions for memory")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|uses
          two different expressions for memory")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|uses
          two different expressions for memory")[^\n]*\n?)+'}
test_atomic-15_553:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-15.c'
    sources: {binary: atomic-15.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|uses
          two different expressions for memory")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|uses
          two different expressions for memory")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|uses
          two different expressions for memory")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|uses
          two different expressions for memory")[^\n]*\n?)+'}
test_atomic-15_680:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-15.c'
    sources: {binary: atomic-15.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|uses
          two different expressions for memory")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|uses
          two different expressions for memory")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|uses
          two different expressions for memory")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|uses
          two different expressions for memory")[^\n]*\n?)+'}
test_atomic-15_681:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-15.c'
    sources: {binary: atomic-15.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|uses
          two different expressions for memory")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|uses
          two different expressions for memory")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|uses
          two different expressions for memory")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|uses
          two different expressions for memory")[^\n]*\n?)+'}
test_atomic-15_682:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-15.c'
    sources: {binary: atomic-15.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|invalid
          form of")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|uses
          two different expressions for memory")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|uses
          two different expressions for memory")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|uses
          two different expressions for memory")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|uses
          two different expressions for memory")[^\n]*\n?)+'}
test_atomic-16_11:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-16.c'
    sources: {binary: atomic-16.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_atomic-16_120:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-16.c'
    sources: {binary: atomic-16.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_atomic-16_249:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-16.c'
    sources: {binary: atomic-16.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
test_atomic-16_250:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-16.c'
    sources: {binary: atomic-16.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
test_atomic-16_251:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-16.c'
    sources: {binary: atomic-16.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
test_atomic-16_554:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-16.c'
    sources: {binary: atomic-16.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_atomic-16_683:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-16.c'
    sources: {binary: atomic-16.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
test_atomic-16_684:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-16.c'
    sources: {binary: atomic-16.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
test_atomic-16_685:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-16.c'
    sources: {binary: atomic-16.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
test_atomic-1_114:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-1.c'
    sources: {binary: atomic-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-1_231:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-1.c'
    sources: {binary: atomic-1.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-1_232:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-1.c'
    sources: {binary: atomic-1.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-1_233:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-1.c'
    sources: {binary: atomic-1.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-1_5:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-1.c'
    sources: {binary: atomic-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-1_548:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-1.c'
    sources: {binary: atomic-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-1_665:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-1.c'
    sources: {binary: atomic-1.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-1_666:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-1.c'
    sources: {binary: atomic-1.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-1_667:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-1.c'
    sources: {binary: atomic-1.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-2_12:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-2.c'
    sources: {binary: atomic-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-2_121:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-2.c'
    sources: {binary: atomic-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-2_252:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-2.c'
    sources: {binary: atomic-2.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-2_253:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-2.c'
    sources: {binary: atomic-2.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-2_254:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-2.c'
    sources: {binary: atomic-2.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-2_555:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-2.c'
    sources: {binary: atomic-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-2_686:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-2.c'
    sources: {binary: atomic-2.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-2_687:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-2.c'
    sources: {binary: atomic-2.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-2_688:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-2.c'
    sources: {binary: atomic-2.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-3_122:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-3.c'
    sources: {binary: atomic-3.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_atomic-3_13:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-3.c'
    sources: {binary: atomic-3.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_atomic-3_255:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-3.c'
    sources: {binary: atomic-3.s, cflags: "-std=gnu++98 -fopenmp -fdump-tree-ompexp\n
        -S"}
  group: GRPSERIAL
test_atomic-3_256:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-3.c'
    sources: {binary: atomic-3.s, cflags: "-std=gnu++11 -fopenmp -fdump-tree-ompexp\n
        -S"}
  group: GRPSERIAL
test_atomic-3_257:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-3.c'
    sources: {binary: atomic-3.s, cflags: "-std=gnu++14 -fopenmp -fdump-tree-ompexp\n
        -S"}
  group: GRPSERIAL
test_atomic-3_556:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-3.c'
    sources: {binary: atomic-3.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_atomic-3_689:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-3.c'
    sources: {binary: atomic-3.s, cflags: "-std=gnu++98 -fopenmp -fdump-tree-ompexp\n
        -S"}
  group: GRPSERIAL
test_atomic-3_690:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-3.c'
    sources: {binary: atomic-3.s, cflags: "-std=gnu++11 -fopenmp -fdump-tree-ompexp\n
        -S"}
  group: GRPSERIAL
test_atomic-3_691:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-3.c'
    sources: {binary: atomic-3.s, cflags: "-std=gnu++14 -fopenmp -fdump-tree-ompexp\n
        -S"}
  group: GRPSERIAL
test_atomic-4_123:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-4.c'
    sources: {binary: atomic-4.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-4_14:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-4.c'
    sources: {binary: atomic-4.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-4_258:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-4.c'
    sources: {binary: atomic-4.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-4_259:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-4.c'
    sources: {binary: atomic-4.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-4_260:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-4.c'
    sources: {binary: atomic-4.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-4_557:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-4.c'
    sources: {binary: atomic-4.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-4_692:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-4.c'
    sources: {binary: atomic-4.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-4_693:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-4.c'
    sources: {binary: atomic-4.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-4_694:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-4.c'
    sources: {binary: atomic-4.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-7_124:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-7.c'
    sources: {binary: atomic-7.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-7_15:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-7.c'
    sources: {binary: atomic-7.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-7_261:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-7.c'
    sources: {binary: atomic-7.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-7_262:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-7.c'
    sources: {binary: atomic-7.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-7_263:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-7.c'
    sources: {binary: atomic-7.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-7_558:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-7.c'
    sources: {binary: atomic-7.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-7_695:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-7.c'
    sources: {binary: atomic-7.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-7_696:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-7.c'
    sources: {binary: atomic-7.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-7_697:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-7.c'
    sources: {binary: atomic-7.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-8_125:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-8.c'
    sources: {binary: atomic-8.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-8_16:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-8.c'
    sources: {binary: atomic-8.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-8_264:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-8.c'
    sources: {binary: atomic-8.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-8_265:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-8.c'
    sources: {binary: atomic-8.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-8_266:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-8.c'
    sources: {binary: atomic-8.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-8_559:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-8.c'
    sources: {binary: atomic-8.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-8_698:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-8.c'
    sources: {binary: atomic-8.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-8_699:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-8.c'
    sources: {binary: atomic-8.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-8_700:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-8.c'
    sources: {binary: atomic-8.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-9_126:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-9.c'
    sources: {binary: atomic-9.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_atomic-9_17:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-9.c'
    sources: {binary: atomic-9.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_atomic-9_267:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-9.c'
    sources: {binary: atomic-9.s, cflags: "-std=gnu++98 -fopenmp -fdump-tree-ompexp\n
        -S"}
  group: GRPSERIAL
test_atomic-9_268:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-9.c'
    sources: {binary: atomic-9.s, cflags: "-std=gnu++11 -fopenmp -fdump-tree-ompexp\n
        -S"}
  group: GRPSERIAL
test_atomic-9_269:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-9.c'
    sources: {binary: atomic-9.s, cflags: "-std=gnu++14 -fopenmp -fdump-tree-ompexp\n
        -S"}
  group: GRPSERIAL
test_atomic-9_560:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-9.c'
    sources: {binary: atomic-9.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_atomic-9_701:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-9.c'
    sources: {binary: atomic-9.s, cflags: "-std=gnu++98 -fopenmp -fdump-tree-ompexp\n
        -S"}
  group: GRPSERIAL
test_atomic-9_702:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-9.c'
    sources: {binary: atomic-9.s, cflags: "-std=gnu++11 -fopenmp -fdump-tree-ompexp\n
        -S"}
  group: GRPSERIAL
test_atomic-9_703:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/atomic-9.c'
    sources: {binary: atomic-9.s, cflags: "-std=gnu++14 -fopenmp -fdump-tree-ompexp\n
        -S"}
  group: GRPSERIAL
test_cancel-1_127:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/cancel-1.c'
    sources: {binary: cancel-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L116: {expect: true, expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L123: {expect: true, expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L124: {expect: true, expr: '(^|\n)([^\n]+:124:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L134: {expect: true, expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L135: {expect: true, expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L152: {expect: true, expr: '(^|\n)([^\n]+:152:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L154: {expect: true, expr: '(^|\n)([^\n]+:154:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L156: {expect: true, expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L157: {expect: true, expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L164: {expect: true, expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L166: {expect: true, expr: '(^|\n)([^\n]+:166:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L167: {expect: true, expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L168: {expect: true, expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L169: {expect: true, expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L175: {expect: true, expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L176: {expect: true, expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L179: {expect: true, expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L180: {expect: true, expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L186: {expect: true, expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L189: {expect: true, expr: '(^|\n)([^\n]+:189:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L190: {expect: true, expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L191: {expect: true, expr: '(^|\n)([^\n]+:191:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L199: {expect: true, expr: '(^|\n)([^\n]+:199:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L201: {expect: true, expr: '(^|\n)([^\n]+:201:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L202: {expect: true, expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L203: {expect: true, expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L205: {expect: true, expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L209: {expect: true, expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L210: {expect: true, expr: '(^|\n)([^\n]+:210:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L211: {expect: true, expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L212: {expect: true, expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L213: {expect: true, expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L214: {expect: true, expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L215: {expect: true, expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L216: {expect: true, expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L221: {expect: true, expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L222: {expect: true, expr: '(^|\n)([^\n]+:222:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L223: {expect: true, expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L224: {expect: true, expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L225: {expect: true, expr: '(^|\n)([^\n]+:225:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L226: {expect: true, expr: '(^|\n)([^\n]+:226:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L227: {expect: true, expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L228: {expect: true, expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L232: {expect: true, expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L233: {expect: true, expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L234: {expect: true, expr: '(^|\n)([^\n]+:234:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L235: {expect: true, expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L236: {expect: true, expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L237: {expect: true, expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L238: {expect: true, expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L239: {expect: true, expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L243: {expect: true, expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L244: {expect: true, expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L245: {expect: true, expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L246: {expect: true, expr: '(^|\n)([^\n]+:246:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L247: {expect: true, expr: '(^|\n)([^\n]+:247:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L248: {expect: true, expr: '(^|\n)([^\n]+:248:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L249: {expect: true, expr: '(^|\n)([^\n]+:249:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L250: {expect: true, expr: '(^|\n)([^\n]+:250:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L255: {expect: true, expr: '(^|\n)([^\n]+:255:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L256: {expect: true, expr: '(^|\n)([^\n]+:256:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L257: {expect: true, expr: '(^|\n)([^\n]+:257:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L258: {expect: true, expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L259: {expect: true, expr: '(^|\n)([^\n]+:259:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L260: {expect: true, expr: '(^|\n)([^\n]+:260:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L261: {expect: true, expr: '(^|\n)([^\n]+:261:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L262: {expect: true, expr: '(^|\n)([^\n]+:262:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L267: {expect: true, expr: '(^|\n)([^\n]+:267:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L269: {expect: true, expr: '(^|\n)([^\n]+:269:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L270: {expect: true, expr: '(^|\n)([^\n]+:270:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L271: {expect: true, expr: '(^|\n)([^\n]+:271:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L273: {expect: true, expr: '(^|\n)([^\n]+:273:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L274: {expect: true, expr: '(^|\n)([^\n]+:274:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L280: {expect: true, expr: '(^|\n)([^\n]+:280:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L281: {expect: true, expr: '(^|\n)([^\n]+:281:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L282: {expect: true, expr: '(^|\n)([^\n]+:282:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L283: {expect: true, expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L284: {expect: true, expr: '(^|\n)([^\n]+:284:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L285: {expect: true, expr: '(^|\n)([^\n]+:285:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L286: {expect: true, expr: '(^|\n)([^\n]+:286:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L287: {expect: true, expr: '(^|\n)([^\n]+:287:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L293: {expect: true, expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L294: {expect: true, expr: '(^|\n)([^\n]+:294:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L295: {expect: true, expr: '(^|\n)([^\n]+:295:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L296: {expect: true, expr: '(^|\n)([^\n]+:296:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L297: {expect: true, expr: '(^|\n)([^\n]+:297:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L298: {expect: true, expr: '(^|\n)([^\n]+:298:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L299: {expect: true, expr: '(^|\n)([^\n]+:299:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L300: {expect: true, expr: '(^|\n)([^\n]+:300:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L307: {expect: true, expr: '(^|\n)([^\n]+:307:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L308: {expect: true, expr: '(^|\n)([^\n]+:308:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L309: {expect: true, expr: '(^|\n)([^\n]+:309:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L310: {expect: true, expr: '(^|\n)([^\n]+:310:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L311: {expect: true, expr: '(^|\n)([^\n]+:311:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L312: {expect: true, expr: '(^|\n)([^\n]+:312:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L313: {expect: true, expr: '(^|\n)([^\n]+:313:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L314: {expect: true, expr: '(^|\n)([^\n]+:314:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L321: {expect: true, expr: '(^|\n)([^\n]+:321:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L322: {expect: true, expr: '(^|\n)([^\n]+:322:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L323: {expect: true, expr: '(^|\n)([^\n]+:323:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L324: {expect: true, expr: '(^|\n)([^\n]+:324:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L325: {expect: true, expr: '(^|\n)([^\n]+:325:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L326: {expect: true, expr: '(^|\n)([^\n]+:326:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L327: {expect: true, expr: '(^|\n)([^\n]+:327:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L328: {expect: true, expr: '(^|\n)([^\n]+:328:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L333: {expect: true, expr: '(^|\n)([^\n]+:333:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L334: {expect: true, expr: '(^|\n)([^\n]+:334:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L336: {expect: true, expr: '(^|\n)([^\n]+:336:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L337: {expect: true, expr: '(^|\n)([^\n]+:337:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L338: {expect: true, expr: '(^|\n)([^\n]+:338:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L340: {expect: true, expr: '(^|\n)([^\n]+:340:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L344: {expect: true, expr: '(^|\n)([^\n]+:344:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L345: {expect: true, expr: '(^|\n)([^\n]+:345:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L347: {expect: true, expr: '(^|\n)([^\n]+:347:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L348: {expect: true, expr: '(^|\n)([^\n]+:348:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L349: {expect: true, expr: '(^|\n)([^\n]+:349:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L351: {expect: true, expr: '(^|\n)([^\n]+:351:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L358: {expect: true, expr: '(^|\n)([^\n]+:358:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L359: {expect: true, expr: '(^|\n)([^\n]+:359:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L360: {expect: true, expr: '(^|\n)([^\n]+:360:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L361: {expect: true, expr: '(^|\n)([^\n]+:361:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L362: {expect: true, expr: '(^|\n)([^\n]+:362:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L363: {expect: true, expr: '(^|\n)([^\n]+:363:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L364: {expect: true, expr: '(^|\n)([^\n]+:364:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L365: {expect: true, expr: '(^|\n)([^\n]+:365:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L370: {expect: true, expr: '(^|\n)([^\n]+:370:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L371: {expect: true, expr: '(^|\n)([^\n]+:371:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L372: {expect: true, expr: '(^|\n)([^\n]+:372:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L373: {expect: true, expr: '(^|\n)([^\n]+:373:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L374: {expect: true, expr: '(^|\n)([^\n]+:374:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L375: {expect: true, expr: '(^|\n)([^\n]+:375:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L376: {expect: true, expr: '(^|\n)([^\n]+:376:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L377: {expect: true, expr: '(^|\n)([^\n]+:377:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L384: {expect: true, expr: '(^|\n)([^\n]+:384:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L385: {expect: true, expr: '(^|\n)([^\n]+:385:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L386: {expect: true, expr: '(^|\n)([^\n]+:386:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L387: {expect: true, expr: '(^|\n)([^\n]+:387:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L388: {expect: true, expr: '(^|\n)([^\n]+:388:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L389: {expect: true, expr: '(^|\n)([^\n]+:389:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L390: {expect: true, expr: '(^|\n)([^\n]+:390:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L391: {expect: true, expr: '(^|\n)([^\n]+:391:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L396: {expect: true, expr: '(^|\n)([^\n]+:396:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L397: {expect: true, expr: '(^|\n)([^\n]+:397:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L398: {expect: true, expr: '(^|\n)([^\n]+:398:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L399: {expect: true, expr: '(^|\n)([^\n]+:399:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L400: {expect: true, expr: '(^|\n)([^\n]+:400:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L401: {expect: true, expr: '(^|\n)([^\n]+:401:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L402: {expect: true, expr: '(^|\n)([^\n]+:402:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L403: {expect: true, expr: '(^|\n)([^\n]+:403:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L408: {expect: true, expr: '(^|\n)([^\n]+:408:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L409: {expect: true, expr: '(^|\n)([^\n]+:409:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L410: {expect: true, expr: '(^|\n)([^\n]+:410:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L412: {expect: true, expr: '(^|\n)([^\n]+:412:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L413: {expect: true, expr: '(^|\n)([^\n]+:413:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L414: {expect: true, expr: '(^|\n)([^\n]+:414:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L418: {expect: true, expr: '(^|\n)([^\n]+:418:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L419: {expect: true, expr: '(^|\n)([^\n]+:419:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L420: {expect: true, expr: '(^|\n)([^\n]+:420:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L421: {expect: true, expr: '(^|\n)([^\n]+:421:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L422: {expect: true, expr: '(^|\n)([^\n]+:422:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L423: {expect: true, expr: '(^|\n)([^\n]+:423:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L424: {expect: true, expr: '(^|\n)([^\n]+:424:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L425: {expect: true, expr: '(^|\n)([^\n]+:425:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L437: {expect: true, expr: '(^|\n)([^\n]+(:437:)[^\n]*[0-9]+: warning:[^\n]*("nowait")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L442: {expect: true, expr: '(^|\n)([^\n]+(:442:)[^\n]*[0-9]+: warning:[^\n]*("nowait")[^\n]*\n?)+'}
      L446: {expect: true, expr: '(^|\n)([^\n]+(:446:)[^\n]*[0-9]+: warning:[^\n]*("nowait")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L452: {expect: true, expr: '(^|\n)([^\n]+(:452:)[^\n]*[0-9]+: warning:[^\n]*("ordered")[^\n]*\n?)+'}
      L459: {expect: true, expr: '(^|\n)([^\n]+:459:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before end of line")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L465: {expect: true, expr: '(^|\n)([^\n]+:465:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .point. before .EKAHI.")[^\n]*\n?)+'}
      L467: {expect: true, expr: '(^|\n)([^\n]+:467:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .point. before .HO.")[^\n]*\n?)+'}
      L469: {expect: true, expr: '(^|\n)([^\n]+:469:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".pragma
          omp cancellation point. may only be used in compound statements")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L471: {expect: true, expr: '(^|\n)([^\n]+:471:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".pragma
          omp cancellation point. must specify one of")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L69: {expect: true, expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
test_cancel-1_18:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/cancel-1.c'
    sources: {binary: cancel-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L116: {expect: true, expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L123: {expect: true, expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L124: {expect: true, expr: '(^|\n)([^\n]+:124:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L134: {expect: true, expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L135: {expect: true, expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L152: {expect: true, expr: '(^|\n)([^\n]+:152:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L154: {expect: true, expr: '(^|\n)([^\n]+:154:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L156: {expect: true, expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L157: {expect: true, expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L164: {expect: true, expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L166: {expect: true, expr: '(^|\n)([^\n]+:166:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L167: {expect: true, expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L168: {expect: true, expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L169: {expect: true, expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L175: {expect: true, expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L176: {expect: true, expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L179: {expect: true, expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L180: {expect: true, expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L186: {expect: true, expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L189: {expect: true, expr: '(^|\n)([^\n]+:189:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L190: {expect: true, expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L191: {expect: true, expr: '(^|\n)([^\n]+:191:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L199: {expect: true, expr: '(^|\n)([^\n]+:199:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L201: {expect: true, expr: '(^|\n)([^\n]+:201:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L202: {expect: true, expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L203: {expect: true, expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L205: {expect: true, expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L209: {expect: true, expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L210: {expect: true, expr: '(^|\n)([^\n]+:210:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L211: {expect: true, expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L212: {expect: true, expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L213: {expect: true, expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L214: {expect: true, expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L215: {expect: true, expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L216: {expect: true, expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L221: {expect: true, expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L222: {expect: true, expr: '(^|\n)([^\n]+:222:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L223: {expect: true, expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L224: {expect: true, expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L225: {expect: true, expr: '(^|\n)([^\n]+:225:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L226: {expect: true, expr: '(^|\n)([^\n]+:226:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L227: {expect: true, expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L228: {expect: true, expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L232: {expect: true, expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L233: {expect: true, expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L234: {expect: true, expr: '(^|\n)([^\n]+:234:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L235: {expect: true, expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L236: {expect: true, expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L237: {expect: true, expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L238: {expect: true, expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L239: {expect: true, expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L243: {expect: true, expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L244: {expect: true, expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L245: {expect: true, expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L246: {expect: true, expr: '(^|\n)([^\n]+:246:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L247: {expect: true, expr: '(^|\n)([^\n]+:247:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L248: {expect: true, expr: '(^|\n)([^\n]+:248:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L249: {expect: true, expr: '(^|\n)([^\n]+:249:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L250: {expect: true, expr: '(^|\n)([^\n]+:250:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L255: {expect: true, expr: '(^|\n)([^\n]+:255:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L256: {expect: true, expr: '(^|\n)([^\n]+:256:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L257: {expect: true, expr: '(^|\n)([^\n]+:257:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L258: {expect: true, expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L259: {expect: true, expr: '(^|\n)([^\n]+:259:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L260: {expect: true, expr: '(^|\n)([^\n]+:260:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L261: {expect: true, expr: '(^|\n)([^\n]+:261:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L262: {expect: true, expr: '(^|\n)([^\n]+:262:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L267: {expect: true, expr: '(^|\n)([^\n]+:267:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L269: {expect: true, expr: '(^|\n)([^\n]+:269:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L270: {expect: true, expr: '(^|\n)([^\n]+:270:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L271: {expect: true, expr: '(^|\n)([^\n]+:271:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L273: {expect: true, expr: '(^|\n)([^\n]+:273:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L274: {expect: true, expr: '(^|\n)([^\n]+:274:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L280: {expect: true, expr: '(^|\n)([^\n]+:280:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L281: {expect: true, expr: '(^|\n)([^\n]+:281:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L282: {expect: true, expr: '(^|\n)([^\n]+:282:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L283: {expect: true, expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L284: {expect: true, expr: '(^|\n)([^\n]+:284:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L285: {expect: true, expr: '(^|\n)([^\n]+:285:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L286: {expect: true, expr: '(^|\n)([^\n]+:286:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L287: {expect: true, expr: '(^|\n)([^\n]+:287:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L293: {expect: true, expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L294: {expect: true, expr: '(^|\n)([^\n]+:294:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L295: {expect: true, expr: '(^|\n)([^\n]+:295:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L296: {expect: true, expr: '(^|\n)([^\n]+:296:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L297: {expect: true, expr: '(^|\n)([^\n]+:297:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L298: {expect: true, expr: '(^|\n)([^\n]+:298:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L299: {expect: true, expr: '(^|\n)([^\n]+:299:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L300: {expect: true, expr: '(^|\n)([^\n]+:300:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L307: {expect: true, expr: '(^|\n)([^\n]+:307:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L308: {expect: true, expr: '(^|\n)([^\n]+:308:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L309: {expect: true, expr: '(^|\n)([^\n]+:309:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L310: {expect: true, expr: '(^|\n)([^\n]+:310:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L311: {expect: true, expr: '(^|\n)([^\n]+:311:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L312: {expect: true, expr: '(^|\n)([^\n]+:312:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L313: {expect: true, expr: '(^|\n)([^\n]+:313:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L314: {expect: true, expr: '(^|\n)([^\n]+:314:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L321: {expect: true, expr: '(^|\n)([^\n]+:321:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L322: {expect: true, expr: '(^|\n)([^\n]+:322:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L323: {expect: true, expr: '(^|\n)([^\n]+:323:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L324: {expect: true, expr: '(^|\n)([^\n]+:324:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L325: {expect: true, expr: '(^|\n)([^\n]+:325:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L326: {expect: true, expr: '(^|\n)([^\n]+:326:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L327: {expect: true, expr: '(^|\n)([^\n]+:327:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L328: {expect: true, expr: '(^|\n)([^\n]+:328:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L333: {expect: true, expr: '(^|\n)([^\n]+:333:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L334: {expect: true, expr: '(^|\n)([^\n]+:334:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L336: {expect: true, expr: '(^|\n)([^\n]+:336:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L337: {expect: true, expr: '(^|\n)([^\n]+:337:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L338: {expect: true, expr: '(^|\n)([^\n]+:338:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L340: {expect: true, expr: '(^|\n)([^\n]+:340:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L344: {expect: true, expr: '(^|\n)([^\n]+:344:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L345: {expect: true, expr: '(^|\n)([^\n]+:345:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L347: {expect: true, expr: '(^|\n)([^\n]+:347:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L348: {expect: true, expr: '(^|\n)([^\n]+:348:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L349: {expect: true, expr: '(^|\n)([^\n]+:349:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L351: {expect: true, expr: '(^|\n)([^\n]+:351:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L358: {expect: true, expr: '(^|\n)([^\n]+:358:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L359: {expect: true, expr: '(^|\n)([^\n]+:359:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L360: {expect: true, expr: '(^|\n)([^\n]+:360:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L361: {expect: true, expr: '(^|\n)([^\n]+:361:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L362: {expect: true, expr: '(^|\n)([^\n]+:362:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L363: {expect: true, expr: '(^|\n)([^\n]+:363:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L364: {expect: true, expr: '(^|\n)([^\n]+:364:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L365: {expect: true, expr: '(^|\n)([^\n]+:365:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L370: {expect: true, expr: '(^|\n)([^\n]+:370:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L371: {expect: true, expr: '(^|\n)([^\n]+:371:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L372: {expect: true, expr: '(^|\n)([^\n]+:372:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L373: {expect: true, expr: '(^|\n)([^\n]+:373:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L374: {expect: true, expr: '(^|\n)([^\n]+:374:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L375: {expect: true, expr: '(^|\n)([^\n]+:375:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L376: {expect: true, expr: '(^|\n)([^\n]+:376:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L377: {expect: true, expr: '(^|\n)([^\n]+:377:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L384: {expect: true, expr: '(^|\n)([^\n]+:384:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L385: {expect: true, expr: '(^|\n)([^\n]+:385:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L386: {expect: true, expr: '(^|\n)([^\n]+:386:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L387: {expect: true, expr: '(^|\n)([^\n]+:387:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L388: {expect: true, expr: '(^|\n)([^\n]+:388:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L389: {expect: true, expr: '(^|\n)([^\n]+:389:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L390: {expect: true, expr: '(^|\n)([^\n]+:390:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L391: {expect: true, expr: '(^|\n)([^\n]+:391:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L396: {expect: true, expr: '(^|\n)([^\n]+:396:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L397: {expect: true, expr: '(^|\n)([^\n]+:397:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L398: {expect: true, expr: '(^|\n)([^\n]+:398:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L399: {expect: true, expr: '(^|\n)([^\n]+:399:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L400: {expect: true, expr: '(^|\n)([^\n]+:400:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L401: {expect: true, expr: '(^|\n)([^\n]+:401:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L402: {expect: true, expr: '(^|\n)([^\n]+:402:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L403: {expect: true, expr: '(^|\n)([^\n]+:403:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L408: {expect: true, expr: '(^|\n)([^\n]+:408:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L409: {expect: true, expr: '(^|\n)([^\n]+:409:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L410: {expect: true, expr: '(^|\n)([^\n]+:410:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L412: {expect: true, expr: '(^|\n)([^\n]+:412:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L413: {expect: true, expr: '(^|\n)([^\n]+:413:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L414: {expect: true, expr: '(^|\n)([^\n]+:414:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L418: {expect: true, expr: '(^|\n)([^\n]+:418:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L419: {expect: true, expr: '(^|\n)([^\n]+:419:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L420: {expect: true, expr: '(^|\n)([^\n]+:420:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L421: {expect: true, expr: '(^|\n)([^\n]+:421:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L422: {expect: true, expr: '(^|\n)([^\n]+:422:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L423: {expect: true, expr: '(^|\n)([^\n]+:423:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L424: {expect: true, expr: '(^|\n)([^\n]+:424:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L425: {expect: true, expr: '(^|\n)([^\n]+:425:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L437: {expect: true, expr: '(^|\n)([^\n]+(:437:)[^\n]*[0-9]+: warning:[^\n]*("nowait")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L442: {expect: true, expr: '(^|\n)([^\n]+(:442:)[^\n]*[0-9]+: warning:[^\n]*("nowait")[^\n]*\n?)+'}
      L446: {expect: true, expr: '(^|\n)([^\n]+(:446:)[^\n]*[0-9]+: warning:[^\n]*("nowait")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L452: {expect: true, expr: '(^|\n)([^\n]+(:452:)[^\n]*[0-9]+: warning:[^\n]*("ordered")[^\n]*\n?)+'}
      L459: {expect: true, expr: '(^|\n)([^\n]+:459:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before end of line")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L465: {expect: true, expr: '(^|\n)([^\n]+:465:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .point. before .EKAHI.")[^\n]*\n?)+'}
      L467: {expect: true, expr: '(^|\n)([^\n]+:467:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .point. before .HO.")[^\n]*\n?)+'}
      L469: {expect: true, expr: '(^|\n)([^\n]+:469:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".pragma
          omp cancellation point. may only be used in compound statements")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L471: {expect: true, expr: '(^|\n)([^\n]+:471:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".pragma
          omp cancellation point. must specify one of")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L69: {expect: true, expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
test_cancel-1_270:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/cancel-1.c'
    sources: {binary: cancel-1.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L116: {expect: true, expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L123: {expect: true, expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L124: {expect: true, expr: '(^|\n)([^\n]+:124:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L134: {expect: true, expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L135: {expect: true, expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L152: {expect: true, expr: '(^|\n)([^\n]+:152:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L154: {expect: true, expr: '(^|\n)([^\n]+:154:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L156: {expect: true, expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L157: {expect: true, expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L164: {expect: true, expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L166: {expect: true, expr: '(^|\n)([^\n]+:166:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L167: {expect: true, expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L168: {expect: true, expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L169: {expect: true, expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L175: {expect: true, expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L176: {expect: true, expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L179: {expect: true, expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L180: {expect: true, expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L186: {expect: true, expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L189: {expect: true, expr: '(^|\n)([^\n]+:189:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L190: {expect: true, expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L191: {expect: true, expr: '(^|\n)([^\n]+:191:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L199: {expect: true, expr: '(^|\n)([^\n]+:199:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L201: {expect: true, expr: '(^|\n)([^\n]+:201:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L202: {expect: true, expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L203: {expect: true, expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L205: {expect: true, expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L209: {expect: true, expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L210: {expect: true, expr: '(^|\n)([^\n]+:210:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L211: {expect: true, expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L212: {expect: true, expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L213: {expect: true, expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L214: {expect: true, expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L215: {expect: true, expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L216: {expect: true, expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L221: {expect: true, expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L222: {expect: true, expr: '(^|\n)([^\n]+:222:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L223: {expect: true, expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L224: {expect: true, expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L225: {expect: true, expr: '(^|\n)([^\n]+:225:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L226: {expect: true, expr: '(^|\n)([^\n]+:226:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L227: {expect: true, expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L228: {expect: true, expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L232: {expect: true, expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L233: {expect: true, expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L234: {expect: true, expr: '(^|\n)([^\n]+:234:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L235: {expect: true, expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L236: {expect: true, expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L237: {expect: true, expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L238: {expect: true, expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L239: {expect: true, expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L243: {expect: true, expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L244: {expect: true, expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L245: {expect: true, expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L246: {expect: true, expr: '(^|\n)([^\n]+:246:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L247: {expect: true, expr: '(^|\n)([^\n]+:247:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L248: {expect: true, expr: '(^|\n)([^\n]+:248:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L249: {expect: true, expr: '(^|\n)([^\n]+:249:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L250: {expect: true, expr: '(^|\n)([^\n]+:250:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L255: {expect: true, expr: '(^|\n)([^\n]+:255:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L256: {expect: true, expr: '(^|\n)([^\n]+:256:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L257: {expect: true, expr: '(^|\n)([^\n]+:257:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L258: {expect: true, expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L259: {expect: true, expr: '(^|\n)([^\n]+:259:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L260: {expect: true, expr: '(^|\n)([^\n]+:260:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L261: {expect: true, expr: '(^|\n)([^\n]+:261:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L262: {expect: true, expr: '(^|\n)([^\n]+:262:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L267: {expect: true, expr: '(^|\n)([^\n]+:267:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L269: {expect: true, expr: '(^|\n)([^\n]+:269:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L270: {expect: true, expr: '(^|\n)([^\n]+:270:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L271: {expect: true, expr: '(^|\n)([^\n]+:271:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L273: {expect: true, expr: '(^|\n)([^\n]+:273:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L274: {expect: true, expr: '(^|\n)([^\n]+:274:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L280: {expect: true, expr: '(^|\n)([^\n]+:280:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L281: {expect: true, expr: '(^|\n)([^\n]+:281:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L282: {expect: true, expr: '(^|\n)([^\n]+:282:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L283: {expect: true, expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L284: {expect: true, expr: '(^|\n)([^\n]+:284:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L285: {expect: true, expr: '(^|\n)([^\n]+:285:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L286: {expect: true, expr: '(^|\n)([^\n]+:286:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L287: {expect: true, expr: '(^|\n)([^\n]+:287:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L293: {expect: true, expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L294: {expect: true, expr: '(^|\n)([^\n]+:294:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L295: {expect: true, expr: '(^|\n)([^\n]+:295:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L296: {expect: true, expr: '(^|\n)([^\n]+:296:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L297: {expect: true, expr: '(^|\n)([^\n]+:297:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L298: {expect: true, expr: '(^|\n)([^\n]+:298:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L299: {expect: true, expr: '(^|\n)([^\n]+:299:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L300: {expect: true, expr: '(^|\n)([^\n]+:300:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L307: {expect: true, expr: '(^|\n)([^\n]+:307:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L308: {expect: true, expr: '(^|\n)([^\n]+:308:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L309: {expect: true, expr: '(^|\n)([^\n]+:309:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L310: {expect: true, expr: '(^|\n)([^\n]+:310:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L311: {expect: true, expr: '(^|\n)([^\n]+:311:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L312: {expect: true, expr: '(^|\n)([^\n]+:312:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L313: {expect: true, expr: '(^|\n)([^\n]+:313:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L314: {expect: true, expr: '(^|\n)([^\n]+:314:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L321: {expect: true, expr: '(^|\n)([^\n]+:321:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L322: {expect: true, expr: '(^|\n)([^\n]+:322:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L323: {expect: true, expr: '(^|\n)([^\n]+:323:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L324: {expect: true, expr: '(^|\n)([^\n]+:324:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L325: {expect: true, expr: '(^|\n)([^\n]+:325:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L326: {expect: true, expr: '(^|\n)([^\n]+:326:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L327: {expect: true, expr: '(^|\n)([^\n]+:327:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L328: {expect: true, expr: '(^|\n)([^\n]+:328:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L333: {expect: true, expr: '(^|\n)([^\n]+:333:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L334: {expect: true, expr: '(^|\n)([^\n]+:334:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L336: {expect: true, expr: '(^|\n)([^\n]+:336:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L337: {expect: true, expr: '(^|\n)([^\n]+:337:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L338: {expect: true, expr: '(^|\n)([^\n]+:338:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L340: {expect: true, expr: '(^|\n)([^\n]+:340:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L344: {expect: true, expr: '(^|\n)([^\n]+:344:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L345: {expect: true, expr: '(^|\n)([^\n]+:345:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L347: {expect: true, expr: '(^|\n)([^\n]+:347:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L348: {expect: true, expr: '(^|\n)([^\n]+:348:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L349: {expect: true, expr: '(^|\n)([^\n]+:349:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L351: {expect: true, expr: '(^|\n)([^\n]+:351:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L358: {expect: true, expr: '(^|\n)([^\n]+:358:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L359: {expect: true, expr: '(^|\n)([^\n]+:359:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L360: {expect: true, expr: '(^|\n)([^\n]+:360:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L361: {expect: true, expr: '(^|\n)([^\n]+:361:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L362: {expect: true, expr: '(^|\n)([^\n]+:362:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L363: {expect: true, expr: '(^|\n)([^\n]+:363:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L364: {expect: true, expr: '(^|\n)([^\n]+:364:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L365: {expect: true, expr: '(^|\n)([^\n]+:365:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L370: {expect: true, expr: '(^|\n)([^\n]+:370:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L371: {expect: true, expr: '(^|\n)([^\n]+:371:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L372: {expect: true, expr: '(^|\n)([^\n]+:372:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L373: {expect: true, expr: '(^|\n)([^\n]+:373:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L374: {expect: true, expr: '(^|\n)([^\n]+:374:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L375: {expect: true, expr: '(^|\n)([^\n]+:375:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L376: {expect: true, expr: '(^|\n)([^\n]+:376:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L377: {expect: true, expr: '(^|\n)([^\n]+:377:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L384: {expect: true, expr: '(^|\n)([^\n]+:384:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L385: {expect: true, expr: '(^|\n)([^\n]+:385:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L386: {expect: true, expr: '(^|\n)([^\n]+:386:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L387: {expect: true, expr: '(^|\n)([^\n]+:387:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L388: {expect: true, expr: '(^|\n)([^\n]+:388:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L389: {expect: true, expr: '(^|\n)([^\n]+:389:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L390: {expect: true, expr: '(^|\n)([^\n]+:390:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L391: {expect: true, expr: '(^|\n)([^\n]+:391:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L396: {expect: true, expr: '(^|\n)([^\n]+:396:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L397: {expect: true, expr: '(^|\n)([^\n]+:397:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L398: {expect: true, expr: '(^|\n)([^\n]+:398:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L399: {expect: true, expr: '(^|\n)([^\n]+:399:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L400: {expect: true, expr: '(^|\n)([^\n]+:400:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L401: {expect: true, expr: '(^|\n)([^\n]+:401:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L402: {expect: true, expr: '(^|\n)([^\n]+:402:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L403: {expect: true, expr: '(^|\n)([^\n]+:403:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L408: {expect: true, expr: '(^|\n)([^\n]+:408:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L409: {expect: true, expr: '(^|\n)([^\n]+:409:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L410: {expect: true, expr: '(^|\n)([^\n]+:410:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L412: {expect: true, expr: '(^|\n)([^\n]+:412:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L413: {expect: true, expr: '(^|\n)([^\n]+:413:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L414: {expect: true, expr: '(^|\n)([^\n]+:414:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L418: {expect: true, expr: '(^|\n)([^\n]+:418:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L419: {expect: true, expr: '(^|\n)([^\n]+:419:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L420: {expect: true, expr: '(^|\n)([^\n]+:420:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L421: {expect: true, expr: '(^|\n)([^\n]+:421:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L422: {expect: true, expr: '(^|\n)([^\n]+:422:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L423: {expect: true, expr: '(^|\n)([^\n]+:423:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L424: {expect: true, expr: '(^|\n)([^\n]+:424:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L425: {expect: true, expr: '(^|\n)([^\n]+:425:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L437: {expect: true, expr: '(^|\n)([^\n]+(:437:)[^\n]*[0-9]+: warning:[^\n]*("nowait")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L442: {expect: true, expr: '(^|\n)([^\n]+(:442:)[^\n]*[0-9]+: warning:[^\n]*("nowait")[^\n]*\n?)+'}
      L446: {expect: true, expr: '(^|\n)([^\n]+(:446:)[^\n]*[0-9]+: warning:[^\n]*("nowait")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L452: {expect: true, expr: '(^|\n)([^\n]+(:452:)[^\n]*[0-9]+: warning:[^\n]*("ordered")[^\n]*\n?)+'}
      L459: {expect: true, expr: '(^|\n)([^\n]+:459:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before end of line")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L465: {expect: true, expr: '(^|\n)([^\n]+:465:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .point. before .EKAHI.")[^\n]*\n?)+'}
      L467: {expect: true, expr: '(^|\n)([^\n]+:467:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .point. before .HO.")[^\n]*\n?)+'}
      L469: {expect: true, expr: '(^|\n)([^\n]+:469:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".pragma
          omp cancellation point. may only be used in compound statements")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L471: {expect: true, expr: '(^|\n)([^\n]+:471:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".pragma
          omp cancellation point. must specify one of")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L69: {expect: true, expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
test_cancel-1_271:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/cancel-1.c'
    sources: {binary: cancel-1.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L116: {expect: true, expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L123: {expect: true, expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L124: {expect: true, expr: '(^|\n)([^\n]+:124:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L134: {expect: true, expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L135: {expect: true, expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L152: {expect: true, expr: '(^|\n)([^\n]+:152:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L154: {expect: true, expr: '(^|\n)([^\n]+:154:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L156: {expect: true, expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L157: {expect: true, expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L164: {expect: true, expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L166: {expect: true, expr: '(^|\n)([^\n]+:166:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L167: {expect: true, expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L168: {expect: true, expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L169: {expect: true, expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L175: {expect: true, expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L176: {expect: true, expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L179: {expect: true, expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L180: {expect: true, expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L186: {expect: true, expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L189: {expect: true, expr: '(^|\n)([^\n]+:189:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L190: {expect: true, expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L191: {expect: true, expr: '(^|\n)([^\n]+:191:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L199: {expect: true, expr: '(^|\n)([^\n]+:199:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L201: {expect: true, expr: '(^|\n)([^\n]+:201:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L202: {expect: true, expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L203: {expect: true, expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L205: {expect: true, expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L209: {expect: true, expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L210: {expect: true, expr: '(^|\n)([^\n]+:210:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L211: {expect: true, expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L212: {expect: true, expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L213: {expect: true, expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L214: {expect: true, expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L215: {expect: true, expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L216: {expect: true, expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L221: {expect: true, expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L222: {expect: true, expr: '(^|\n)([^\n]+:222:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L223: {expect: true, expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L224: {expect: true, expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L225: {expect: true, expr: '(^|\n)([^\n]+:225:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L226: {expect: true, expr: '(^|\n)([^\n]+:226:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L227: {expect: true, expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L228: {expect: true, expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L232: {expect: true, expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L233: {expect: true, expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L234: {expect: true, expr: '(^|\n)([^\n]+:234:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L235: {expect: true, expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L236: {expect: true, expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L237: {expect: true, expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L238: {expect: true, expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L239: {expect: true, expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L243: {expect: true, expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L244: {expect: true, expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L245: {expect: true, expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L246: {expect: true, expr: '(^|\n)([^\n]+:246:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L247: {expect: true, expr: '(^|\n)([^\n]+:247:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L248: {expect: true, expr: '(^|\n)([^\n]+:248:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L249: {expect: true, expr: '(^|\n)([^\n]+:249:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L250: {expect: true, expr: '(^|\n)([^\n]+:250:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L255: {expect: true, expr: '(^|\n)([^\n]+:255:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L256: {expect: true, expr: '(^|\n)([^\n]+:256:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L257: {expect: true, expr: '(^|\n)([^\n]+:257:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L258: {expect: true, expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L259: {expect: true, expr: '(^|\n)([^\n]+:259:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L260: {expect: true, expr: '(^|\n)([^\n]+:260:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L261: {expect: true, expr: '(^|\n)([^\n]+:261:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L262: {expect: true, expr: '(^|\n)([^\n]+:262:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L267: {expect: true, expr: '(^|\n)([^\n]+:267:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L269: {expect: true, expr: '(^|\n)([^\n]+:269:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L270: {expect: true, expr: '(^|\n)([^\n]+:270:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L271: {expect: true, expr: '(^|\n)([^\n]+:271:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L273: {expect: true, expr: '(^|\n)([^\n]+:273:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L274: {expect: true, expr: '(^|\n)([^\n]+:274:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L280: {expect: true, expr: '(^|\n)([^\n]+:280:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L281: {expect: true, expr: '(^|\n)([^\n]+:281:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L282: {expect: true, expr: '(^|\n)([^\n]+:282:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L283: {expect: true, expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L284: {expect: true, expr: '(^|\n)([^\n]+:284:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L285: {expect: true, expr: '(^|\n)([^\n]+:285:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L286: {expect: true, expr: '(^|\n)([^\n]+:286:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L287: {expect: true, expr: '(^|\n)([^\n]+:287:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L293: {expect: true, expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L294: {expect: true, expr: '(^|\n)([^\n]+:294:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L295: {expect: true, expr: '(^|\n)([^\n]+:295:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L296: {expect: true, expr: '(^|\n)([^\n]+:296:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L297: {expect: true, expr: '(^|\n)([^\n]+:297:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L298: {expect: true, expr: '(^|\n)([^\n]+:298:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L299: {expect: true, expr: '(^|\n)([^\n]+:299:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L300: {expect: true, expr: '(^|\n)([^\n]+:300:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L307: {expect: true, expr: '(^|\n)([^\n]+:307:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L308: {expect: true, expr: '(^|\n)([^\n]+:308:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L309: {expect: true, expr: '(^|\n)([^\n]+:309:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L310: {expect: true, expr: '(^|\n)([^\n]+:310:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L311: {expect: true, expr: '(^|\n)([^\n]+:311:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L312: {expect: true, expr: '(^|\n)([^\n]+:312:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L313: {expect: true, expr: '(^|\n)([^\n]+:313:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L314: {expect: true, expr: '(^|\n)([^\n]+:314:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L321: {expect: true, expr: '(^|\n)([^\n]+:321:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L322: {expect: true, expr: '(^|\n)([^\n]+:322:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L323: {expect: true, expr: '(^|\n)([^\n]+:323:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L324: {expect: true, expr: '(^|\n)([^\n]+:324:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L325: {expect: true, expr: '(^|\n)([^\n]+:325:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L326: {expect: true, expr: '(^|\n)([^\n]+:326:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L327: {expect: true, expr: '(^|\n)([^\n]+:327:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L328: {expect: true, expr: '(^|\n)([^\n]+:328:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L333: {expect: true, expr: '(^|\n)([^\n]+:333:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L334: {expect: true, expr: '(^|\n)([^\n]+:334:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L336: {expect: true, expr: '(^|\n)([^\n]+:336:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L337: {expect: true, expr: '(^|\n)([^\n]+:337:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L338: {expect: true, expr: '(^|\n)([^\n]+:338:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L340: {expect: true, expr: '(^|\n)([^\n]+:340:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L344: {expect: true, expr: '(^|\n)([^\n]+:344:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L345: {expect: true, expr: '(^|\n)([^\n]+:345:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L347: {expect: true, expr: '(^|\n)([^\n]+:347:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L348: {expect: true, expr: '(^|\n)([^\n]+:348:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L349: {expect: true, expr: '(^|\n)([^\n]+:349:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L351: {expect: true, expr: '(^|\n)([^\n]+:351:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L358: {expect: true, expr: '(^|\n)([^\n]+:358:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L359: {expect: true, expr: '(^|\n)([^\n]+:359:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L360: {expect: true, expr: '(^|\n)([^\n]+:360:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L361: {expect: true, expr: '(^|\n)([^\n]+:361:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L362: {expect: true, expr: '(^|\n)([^\n]+:362:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L363: {expect: true, expr: '(^|\n)([^\n]+:363:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L364: {expect: true, expr: '(^|\n)([^\n]+:364:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L365: {expect: true, expr: '(^|\n)([^\n]+:365:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L370: {expect: true, expr: '(^|\n)([^\n]+:370:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L371: {expect: true, expr: '(^|\n)([^\n]+:371:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L372: {expect: true, expr: '(^|\n)([^\n]+:372:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L373: {expect: true, expr: '(^|\n)([^\n]+:373:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L374: {expect: true, expr: '(^|\n)([^\n]+:374:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L375: {expect: true, expr: '(^|\n)([^\n]+:375:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L376: {expect: true, expr: '(^|\n)([^\n]+:376:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L377: {expect: true, expr: '(^|\n)([^\n]+:377:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L384: {expect: true, expr: '(^|\n)([^\n]+:384:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L385: {expect: true, expr: '(^|\n)([^\n]+:385:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L386: {expect: true, expr: '(^|\n)([^\n]+:386:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L387: {expect: true, expr: '(^|\n)([^\n]+:387:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L388: {expect: true, expr: '(^|\n)([^\n]+:388:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L389: {expect: true, expr: '(^|\n)([^\n]+:389:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L390: {expect: true, expr: '(^|\n)([^\n]+:390:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L391: {expect: true, expr: '(^|\n)([^\n]+:391:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L396: {expect: true, expr: '(^|\n)([^\n]+:396:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L397: {expect: true, expr: '(^|\n)([^\n]+:397:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L398: {expect: true, expr: '(^|\n)([^\n]+:398:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L399: {expect: true, expr: '(^|\n)([^\n]+:399:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L400: {expect: true, expr: '(^|\n)([^\n]+:400:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L401: {expect: true, expr: '(^|\n)([^\n]+:401:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L402: {expect: true, expr: '(^|\n)([^\n]+:402:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L403: {expect: true, expr: '(^|\n)([^\n]+:403:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L408: {expect: true, expr: '(^|\n)([^\n]+:408:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L409: {expect: true, expr: '(^|\n)([^\n]+:409:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L410: {expect: true, expr: '(^|\n)([^\n]+:410:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L412: {expect: true, expr: '(^|\n)([^\n]+:412:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L413: {expect: true, expr: '(^|\n)([^\n]+:413:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L414: {expect: true, expr: '(^|\n)([^\n]+:414:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L418: {expect: true, expr: '(^|\n)([^\n]+:418:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L419: {expect: true, expr: '(^|\n)([^\n]+:419:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L420: {expect: true, expr: '(^|\n)([^\n]+:420:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L421: {expect: true, expr: '(^|\n)([^\n]+:421:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L422: {expect: true, expr: '(^|\n)([^\n]+:422:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L423: {expect: true, expr: '(^|\n)([^\n]+:423:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L424: {expect: true, expr: '(^|\n)([^\n]+:424:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L425: {expect: true, expr: '(^|\n)([^\n]+:425:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L437: {expect: true, expr: '(^|\n)([^\n]+(:437:)[^\n]*[0-9]+: warning:[^\n]*("nowait")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L442: {expect: true, expr: '(^|\n)([^\n]+(:442:)[^\n]*[0-9]+: warning:[^\n]*("nowait")[^\n]*\n?)+'}
      L446: {expect: true, expr: '(^|\n)([^\n]+(:446:)[^\n]*[0-9]+: warning:[^\n]*("nowait")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L452: {expect: true, expr: '(^|\n)([^\n]+(:452:)[^\n]*[0-9]+: warning:[^\n]*("ordered")[^\n]*\n?)+'}
      L459: {expect: true, expr: '(^|\n)([^\n]+:459:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before end of line")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L465: {expect: true, expr: '(^|\n)([^\n]+:465:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .point. before .EKAHI.")[^\n]*\n?)+'}
      L467: {expect: true, expr: '(^|\n)([^\n]+:467:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .point. before .HO.")[^\n]*\n?)+'}
      L469: {expect: true, expr: '(^|\n)([^\n]+:469:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".pragma
          omp cancellation point. may only be used in compound statements")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L471: {expect: true, expr: '(^|\n)([^\n]+:471:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".pragma
          omp cancellation point. must specify one of")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L69: {expect: true, expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
test_cancel-1_272:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/cancel-1.c'
    sources: {binary: cancel-1.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L116: {expect: true, expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L123: {expect: true, expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L124: {expect: true, expr: '(^|\n)([^\n]+:124:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L134: {expect: true, expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L135: {expect: true, expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L152: {expect: true, expr: '(^|\n)([^\n]+:152:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L154: {expect: true, expr: '(^|\n)([^\n]+:154:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L156: {expect: true, expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L157: {expect: true, expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L164: {expect: true, expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L166: {expect: true, expr: '(^|\n)([^\n]+:166:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L167: {expect: true, expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L168: {expect: true, expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L169: {expect: true, expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L175: {expect: true, expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L176: {expect: true, expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L179: {expect: true, expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L180: {expect: true, expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L186: {expect: true, expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L189: {expect: true, expr: '(^|\n)([^\n]+:189:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L190: {expect: true, expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L191: {expect: true, expr: '(^|\n)([^\n]+:191:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L199: {expect: true, expr: '(^|\n)([^\n]+:199:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L201: {expect: true, expr: '(^|\n)([^\n]+:201:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L202: {expect: true, expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L203: {expect: true, expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L205: {expect: true, expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L209: {expect: true, expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L210: {expect: true, expr: '(^|\n)([^\n]+:210:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L211: {expect: true, expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L212: {expect: true, expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L213: {expect: true, expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L214: {expect: true, expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L215: {expect: true, expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L216: {expect: true, expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L221: {expect: true, expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L222: {expect: true, expr: '(^|\n)([^\n]+:222:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L223: {expect: true, expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L224: {expect: true, expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L225: {expect: true, expr: '(^|\n)([^\n]+:225:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L226: {expect: true, expr: '(^|\n)([^\n]+:226:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L227: {expect: true, expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L228: {expect: true, expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L232: {expect: true, expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L233: {expect: true, expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L234: {expect: true, expr: '(^|\n)([^\n]+:234:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L235: {expect: true, expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L236: {expect: true, expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L237: {expect: true, expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L238: {expect: true, expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L239: {expect: true, expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L243: {expect: true, expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L244: {expect: true, expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L245: {expect: true, expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L246: {expect: true, expr: '(^|\n)([^\n]+:246:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L247: {expect: true, expr: '(^|\n)([^\n]+:247:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L248: {expect: true, expr: '(^|\n)([^\n]+:248:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L249: {expect: true, expr: '(^|\n)([^\n]+:249:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L250: {expect: true, expr: '(^|\n)([^\n]+:250:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L255: {expect: true, expr: '(^|\n)([^\n]+:255:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L256: {expect: true, expr: '(^|\n)([^\n]+:256:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L257: {expect: true, expr: '(^|\n)([^\n]+:257:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L258: {expect: true, expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L259: {expect: true, expr: '(^|\n)([^\n]+:259:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L260: {expect: true, expr: '(^|\n)([^\n]+:260:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L261: {expect: true, expr: '(^|\n)([^\n]+:261:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L262: {expect: true, expr: '(^|\n)([^\n]+:262:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L267: {expect: true, expr: '(^|\n)([^\n]+:267:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L269: {expect: true, expr: '(^|\n)([^\n]+:269:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L270: {expect: true, expr: '(^|\n)([^\n]+:270:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L271: {expect: true, expr: '(^|\n)([^\n]+:271:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L273: {expect: true, expr: '(^|\n)([^\n]+:273:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L274: {expect: true, expr: '(^|\n)([^\n]+:274:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L280: {expect: true, expr: '(^|\n)([^\n]+:280:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L281: {expect: true, expr: '(^|\n)([^\n]+:281:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L282: {expect: true, expr: '(^|\n)([^\n]+:282:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L283: {expect: true, expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L284: {expect: true, expr: '(^|\n)([^\n]+:284:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L285: {expect: true, expr: '(^|\n)([^\n]+:285:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L286: {expect: true, expr: '(^|\n)([^\n]+:286:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L287: {expect: true, expr: '(^|\n)([^\n]+:287:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L293: {expect: true, expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L294: {expect: true, expr: '(^|\n)([^\n]+:294:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L295: {expect: true, expr: '(^|\n)([^\n]+:295:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L296: {expect: true, expr: '(^|\n)([^\n]+:296:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L297: {expect: true, expr: '(^|\n)([^\n]+:297:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L298: {expect: true, expr: '(^|\n)([^\n]+:298:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L299: {expect: true, expr: '(^|\n)([^\n]+:299:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L300: {expect: true, expr: '(^|\n)([^\n]+:300:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L307: {expect: true, expr: '(^|\n)([^\n]+:307:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L308: {expect: true, expr: '(^|\n)([^\n]+:308:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L309: {expect: true, expr: '(^|\n)([^\n]+:309:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L310: {expect: true, expr: '(^|\n)([^\n]+:310:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L311: {expect: true, expr: '(^|\n)([^\n]+:311:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L312: {expect: true, expr: '(^|\n)([^\n]+:312:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L313: {expect: true, expr: '(^|\n)([^\n]+:313:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L314: {expect: true, expr: '(^|\n)([^\n]+:314:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L321: {expect: true, expr: '(^|\n)([^\n]+:321:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L322: {expect: true, expr: '(^|\n)([^\n]+:322:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L323: {expect: true, expr: '(^|\n)([^\n]+:323:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L324: {expect: true, expr: '(^|\n)([^\n]+:324:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L325: {expect: true, expr: '(^|\n)([^\n]+:325:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L326: {expect: true, expr: '(^|\n)([^\n]+:326:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L327: {expect: true, expr: '(^|\n)([^\n]+:327:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L328: {expect: true, expr: '(^|\n)([^\n]+:328:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L333: {expect: true, expr: '(^|\n)([^\n]+:333:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L334: {expect: true, expr: '(^|\n)([^\n]+:334:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L336: {expect: true, expr: '(^|\n)([^\n]+:336:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L337: {expect: true, expr: '(^|\n)([^\n]+:337:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L338: {expect: true, expr: '(^|\n)([^\n]+:338:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L340: {expect: true, expr: '(^|\n)([^\n]+:340:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L344: {expect: true, expr: '(^|\n)([^\n]+:344:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L345: {expect: true, expr: '(^|\n)([^\n]+:345:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L347: {expect: true, expr: '(^|\n)([^\n]+:347:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L348: {expect: true, expr: '(^|\n)([^\n]+:348:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L349: {expect: true, expr: '(^|\n)([^\n]+:349:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L351: {expect: true, expr: '(^|\n)([^\n]+:351:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L358: {expect: true, expr: '(^|\n)([^\n]+:358:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L359: {expect: true, expr: '(^|\n)([^\n]+:359:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L360: {expect: true, expr: '(^|\n)([^\n]+:360:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L361: {expect: true, expr: '(^|\n)([^\n]+:361:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L362: {expect: true, expr: '(^|\n)([^\n]+:362:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L363: {expect: true, expr: '(^|\n)([^\n]+:363:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L364: {expect: true, expr: '(^|\n)([^\n]+:364:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L365: {expect: true, expr: '(^|\n)([^\n]+:365:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L370: {expect: true, expr: '(^|\n)([^\n]+:370:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L371: {expect: true, expr: '(^|\n)([^\n]+:371:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L372: {expect: true, expr: '(^|\n)([^\n]+:372:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L373: {expect: true, expr: '(^|\n)([^\n]+:373:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L374: {expect: true, expr: '(^|\n)([^\n]+:374:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L375: {expect: true, expr: '(^|\n)([^\n]+:375:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L376: {expect: true, expr: '(^|\n)([^\n]+:376:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L377: {expect: true, expr: '(^|\n)([^\n]+:377:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L384: {expect: true, expr: '(^|\n)([^\n]+:384:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L385: {expect: true, expr: '(^|\n)([^\n]+:385:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L386: {expect: true, expr: '(^|\n)([^\n]+:386:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L387: {expect: true, expr: '(^|\n)([^\n]+:387:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L388: {expect: true, expr: '(^|\n)([^\n]+:388:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L389: {expect: true, expr: '(^|\n)([^\n]+:389:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L390: {expect: true, expr: '(^|\n)([^\n]+:390:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L391: {expect: true, expr: '(^|\n)([^\n]+:391:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L396: {expect: true, expr: '(^|\n)([^\n]+:396:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L397: {expect: true, expr: '(^|\n)([^\n]+:397:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L398: {expect: true, expr: '(^|\n)([^\n]+:398:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L399: {expect: true, expr: '(^|\n)([^\n]+:399:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L400: {expect: true, expr: '(^|\n)([^\n]+:400:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L401: {expect: true, expr: '(^|\n)([^\n]+:401:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L402: {expect: true, expr: '(^|\n)([^\n]+:402:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L403: {expect: true, expr: '(^|\n)([^\n]+:403:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L408: {expect: true, expr: '(^|\n)([^\n]+:408:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L409: {expect: true, expr: '(^|\n)([^\n]+:409:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L410: {expect: true, expr: '(^|\n)([^\n]+:410:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L412: {expect: true, expr: '(^|\n)([^\n]+:412:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L413: {expect: true, expr: '(^|\n)([^\n]+:413:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L414: {expect: true, expr: '(^|\n)([^\n]+:414:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L418: {expect: true, expr: '(^|\n)([^\n]+:418:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L419: {expect: true, expr: '(^|\n)([^\n]+:419:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L420: {expect: true, expr: '(^|\n)([^\n]+:420:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L421: {expect: true, expr: '(^|\n)([^\n]+:421:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L422: {expect: true, expr: '(^|\n)([^\n]+:422:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L423: {expect: true, expr: '(^|\n)([^\n]+:423:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L424: {expect: true, expr: '(^|\n)([^\n]+:424:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L425: {expect: true, expr: '(^|\n)([^\n]+:425:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L437: {expect: true, expr: '(^|\n)([^\n]+(:437:)[^\n]*[0-9]+: warning:[^\n]*("nowait")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L442: {expect: true, expr: '(^|\n)([^\n]+(:442:)[^\n]*[0-9]+: warning:[^\n]*("nowait")[^\n]*\n?)+'}
      L446: {expect: true, expr: '(^|\n)([^\n]+(:446:)[^\n]*[0-9]+: warning:[^\n]*("nowait")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L452: {expect: true, expr: '(^|\n)([^\n]+(:452:)[^\n]*[0-9]+: warning:[^\n]*("ordered")[^\n]*\n?)+'}
      L459: {expect: true, expr: '(^|\n)([^\n]+:459:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before end of line")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L465: {expect: true, expr: '(^|\n)([^\n]+:465:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .point. before .EKAHI.")[^\n]*\n?)+'}
      L467: {expect: true, expr: '(^|\n)([^\n]+:467:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .point. before .HO.")[^\n]*\n?)+'}
      L469: {expect: true, expr: '(^|\n)([^\n]+:469:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".pragma
          omp cancellation point. may only be used in compound statements")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L471: {expect: true, expr: '(^|\n)([^\n]+:471:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".pragma
          omp cancellation point. must specify one of")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L69: {expect: true, expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
test_cancel-1_561:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/cancel-1.c'
    sources: {binary: cancel-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L116: {expect: true, expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L123: {expect: true, expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L124: {expect: true, expr: '(^|\n)([^\n]+:124:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L134: {expect: true, expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L135: {expect: true, expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L152: {expect: true, expr: '(^|\n)([^\n]+:152:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L154: {expect: true, expr: '(^|\n)([^\n]+:154:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L156: {expect: true, expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L157: {expect: true, expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L164: {expect: true, expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L166: {expect: true, expr: '(^|\n)([^\n]+:166:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L167: {expect: true, expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L168: {expect: true, expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L169: {expect: true, expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L175: {expect: true, expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L176: {expect: true, expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L179: {expect: true, expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L180: {expect: true, expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L186: {expect: true, expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L189: {expect: true, expr: '(^|\n)([^\n]+:189:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L190: {expect: true, expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L191: {expect: true, expr: '(^|\n)([^\n]+:191:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L199: {expect: true, expr: '(^|\n)([^\n]+:199:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L201: {expect: true, expr: '(^|\n)([^\n]+:201:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L202: {expect: true, expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L203: {expect: true, expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L205: {expect: true, expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L209: {expect: true, expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L210: {expect: true, expr: '(^|\n)([^\n]+:210:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L211: {expect: true, expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L212: {expect: true, expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L213: {expect: true, expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L214: {expect: true, expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L215: {expect: true, expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L216: {expect: true, expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L221: {expect: true, expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L222: {expect: true, expr: '(^|\n)([^\n]+:222:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L223: {expect: true, expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L224: {expect: true, expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L225: {expect: true, expr: '(^|\n)([^\n]+:225:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L226: {expect: true, expr: '(^|\n)([^\n]+:226:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L227: {expect: true, expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L228: {expect: true, expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L232: {expect: true, expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L233: {expect: true, expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L234: {expect: true, expr: '(^|\n)([^\n]+:234:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L235: {expect: true, expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L236: {expect: true, expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L237: {expect: true, expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L238: {expect: true, expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L239: {expect: true, expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L243: {expect: true, expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L244: {expect: true, expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L245: {expect: true, expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L246: {expect: true, expr: '(^|\n)([^\n]+:246:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L247: {expect: true, expr: '(^|\n)([^\n]+:247:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L248: {expect: true, expr: '(^|\n)([^\n]+:248:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L249: {expect: true, expr: '(^|\n)([^\n]+:249:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L250: {expect: true, expr: '(^|\n)([^\n]+:250:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L255: {expect: true, expr: '(^|\n)([^\n]+:255:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L256: {expect: true, expr: '(^|\n)([^\n]+:256:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L257: {expect: true, expr: '(^|\n)([^\n]+:257:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L258: {expect: true, expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L259: {expect: true, expr: '(^|\n)([^\n]+:259:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L260: {expect: true, expr: '(^|\n)([^\n]+:260:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L261: {expect: true, expr: '(^|\n)([^\n]+:261:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L262: {expect: true, expr: '(^|\n)([^\n]+:262:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L267: {expect: true, expr: '(^|\n)([^\n]+:267:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L269: {expect: true, expr: '(^|\n)([^\n]+:269:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L270: {expect: true, expr: '(^|\n)([^\n]+:270:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L271: {expect: true, expr: '(^|\n)([^\n]+:271:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L273: {expect: true, expr: '(^|\n)([^\n]+:273:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L274: {expect: true, expr: '(^|\n)([^\n]+:274:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L280: {expect: true, expr: '(^|\n)([^\n]+:280:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L281: {expect: true, expr: '(^|\n)([^\n]+:281:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L282: {expect: true, expr: '(^|\n)([^\n]+:282:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L283: {expect: true, expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L284: {expect: true, expr: '(^|\n)([^\n]+:284:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L285: {expect: true, expr: '(^|\n)([^\n]+:285:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L286: {expect: true, expr: '(^|\n)([^\n]+:286:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L287: {expect: true, expr: '(^|\n)([^\n]+:287:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L293: {expect: true, expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L294: {expect: true, expr: '(^|\n)([^\n]+:294:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L295: {expect: true, expr: '(^|\n)([^\n]+:295:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L296: {expect: true, expr: '(^|\n)([^\n]+:296:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L297: {expect: true, expr: '(^|\n)([^\n]+:297:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L298: {expect: true, expr: '(^|\n)([^\n]+:298:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L299: {expect: true, expr: '(^|\n)([^\n]+:299:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L300: {expect: true, expr: '(^|\n)([^\n]+:300:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L307: {expect: true, expr: '(^|\n)([^\n]+:307:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L308: {expect: true, expr: '(^|\n)([^\n]+:308:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L309: {expect: true, expr: '(^|\n)([^\n]+:309:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L310: {expect: true, expr: '(^|\n)([^\n]+:310:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L311: {expect: true, expr: '(^|\n)([^\n]+:311:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L312: {expect: true, expr: '(^|\n)([^\n]+:312:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L313: {expect: true, expr: '(^|\n)([^\n]+:313:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L314: {expect: true, expr: '(^|\n)([^\n]+:314:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L321: {expect: true, expr: '(^|\n)([^\n]+:321:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L322: {expect: true, expr: '(^|\n)([^\n]+:322:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L323: {expect: true, expr: '(^|\n)([^\n]+:323:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L324: {expect: true, expr: '(^|\n)([^\n]+:324:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L325: {expect: true, expr: '(^|\n)([^\n]+:325:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L326: {expect: true, expr: '(^|\n)([^\n]+:326:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L327: {expect: true, expr: '(^|\n)([^\n]+:327:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L328: {expect: true, expr: '(^|\n)([^\n]+:328:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L333: {expect: true, expr: '(^|\n)([^\n]+:333:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L334: {expect: true, expr: '(^|\n)([^\n]+:334:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L336: {expect: true, expr: '(^|\n)([^\n]+:336:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L337: {expect: true, expr: '(^|\n)([^\n]+:337:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L338: {expect: true, expr: '(^|\n)([^\n]+:338:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L340: {expect: true, expr: '(^|\n)([^\n]+:340:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L344: {expect: true, expr: '(^|\n)([^\n]+:344:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L345: {expect: true, expr: '(^|\n)([^\n]+:345:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L347: {expect: true, expr: '(^|\n)([^\n]+:347:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L348: {expect: true, expr: '(^|\n)([^\n]+:348:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L349: {expect: true, expr: '(^|\n)([^\n]+:349:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L351: {expect: true, expr: '(^|\n)([^\n]+:351:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L358: {expect: true, expr: '(^|\n)([^\n]+:358:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L359: {expect: true, expr: '(^|\n)([^\n]+:359:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L360: {expect: true, expr: '(^|\n)([^\n]+:360:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L361: {expect: true, expr: '(^|\n)([^\n]+:361:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L362: {expect: true, expr: '(^|\n)([^\n]+:362:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L363: {expect: true, expr: '(^|\n)([^\n]+:363:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L364: {expect: true, expr: '(^|\n)([^\n]+:364:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L365: {expect: true, expr: '(^|\n)([^\n]+:365:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L370: {expect: true, expr: '(^|\n)([^\n]+:370:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L371: {expect: true, expr: '(^|\n)([^\n]+:371:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L372: {expect: true, expr: '(^|\n)([^\n]+:372:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L373: {expect: true, expr: '(^|\n)([^\n]+:373:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L374: {expect: true, expr: '(^|\n)([^\n]+:374:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L375: {expect: true, expr: '(^|\n)([^\n]+:375:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L376: {expect: true, expr: '(^|\n)([^\n]+:376:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L377: {expect: true, expr: '(^|\n)([^\n]+:377:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L384: {expect: true, expr: '(^|\n)([^\n]+:384:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L385: {expect: true, expr: '(^|\n)([^\n]+:385:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L386: {expect: true, expr: '(^|\n)([^\n]+:386:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L387: {expect: true, expr: '(^|\n)([^\n]+:387:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L388: {expect: true, expr: '(^|\n)([^\n]+:388:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L389: {expect: true, expr: '(^|\n)([^\n]+:389:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L390: {expect: true, expr: '(^|\n)([^\n]+:390:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L391: {expect: true, expr: '(^|\n)([^\n]+:391:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L396: {expect: true, expr: '(^|\n)([^\n]+:396:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L397: {expect: true, expr: '(^|\n)([^\n]+:397:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L398: {expect: true, expr: '(^|\n)([^\n]+:398:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L399: {expect: true, expr: '(^|\n)([^\n]+:399:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L400: {expect: true, expr: '(^|\n)([^\n]+:400:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L401: {expect: true, expr: '(^|\n)([^\n]+:401:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L402: {expect: true, expr: '(^|\n)([^\n]+:402:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L403: {expect: true, expr: '(^|\n)([^\n]+:403:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L408: {expect: true, expr: '(^|\n)([^\n]+:408:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L409: {expect: true, expr: '(^|\n)([^\n]+:409:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L410: {expect: true, expr: '(^|\n)([^\n]+:410:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L412: {expect: true, expr: '(^|\n)([^\n]+:412:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L413: {expect: true, expr: '(^|\n)([^\n]+:413:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L414: {expect: true, expr: '(^|\n)([^\n]+:414:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L418: {expect: true, expr: '(^|\n)([^\n]+:418:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L419: {expect: true, expr: '(^|\n)([^\n]+:419:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L420: {expect: true, expr: '(^|\n)([^\n]+:420:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L421: {expect: true, expr: '(^|\n)([^\n]+:421:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L422: {expect: true, expr: '(^|\n)([^\n]+:422:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L423: {expect: true, expr: '(^|\n)([^\n]+:423:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L424: {expect: true, expr: '(^|\n)([^\n]+:424:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L425: {expect: true, expr: '(^|\n)([^\n]+:425:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L437: {expect: true, expr: '(^|\n)([^\n]+(:437:)[^\n]*[0-9]+: warning:[^\n]*("nowait")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L442: {expect: true, expr: '(^|\n)([^\n]+(:442:)[^\n]*[0-9]+: warning:[^\n]*("nowait")[^\n]*\n?)+'}
      L446: {expect: true, expr: '(^|\n)([^\n]+(:446:)[^\n]*[0-9]+: warning:[^\n]*("nowait")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L452: {expect: true, expr: '(^|\n)([^\n]+(:452:)[^\n]*[0-9]+: warning:[^\n]*("ordered")[^\n]*\n?)+'}
      L459: {expect: true, expr: '(^|\n)([^\n]+:459:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before end of line")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L465: {expect: true, expr: '(^|\n)([^\n]+:465:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .point. before .EKAHI.")[^\n]*\n?)+'}
      L467: {expect: true, expr: '(^|\n)([^\n]+:467:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .point. before .HO.")[^\n]*\n?)+'}
      L469: {expect: true, expr: '(^|\n)([^\n]+:469:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".pragma
          omp cancellation point. may only be used in compound statements")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L471: {expect: true, expr: '(^|\n)([^\n]+:471:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".pragma
          omp cancellation point. must specify one of")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L69: {expect: true, expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
test_cancel-1_704:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/cancel-1.c'
    sources: {binary: cancel-1.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L116: {expect: true, expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L123: {expect: true, expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L124: {expect: true, expr: '(^|\n)([^\n]+:124:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L134: {expect: true, expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L135: {expect: true, expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L152: {expect: true, expr: '(^|\n)([^\n]+:152:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L154: {expect: true, expr: '(^|\n)([^\n]+:154:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L156: {expect: true, expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L157: {expect: true, expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L164: {expect: true, expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L166: {expect: true, expr: '(^|\n)([^\n]+:166:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L167: {expect: true, expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L168: {expect: true, expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L169: {expect: true, expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L175: {expect: true, expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L176: {expect: true, expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L179: {expect: true, expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L180: {expect: true, expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L186: {expect: true, expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L189: {expect: true, expr: '(^|\n)([^\n]+:189:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L190: {expect: true, expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L191: {expect: true, expr: '(^|\n)([^\n]+:191:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L199: {expect: true, expr: '(^|\n)([^\n]+:199:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L201: {expect: true, expr: '(^|\n)([^\n]+:201:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L202: {expect: true, expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L203: {expect: true, expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L205: {expect: true, expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L209: {expect: true, expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L210: {expect: true, expr: '(^|\n)([^\n]+:210:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L211: {expect: true, expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L212: {expect: true, expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L213: {expect: true, expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L214: {expect: true, expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L215: {expect: true, expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L216: {expect: true, expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L221: {expect: true, expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L222: {expect: true, expr: '(^|\n)([^\n]+:222:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L223: {expect: true, expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L224: {expect: true, expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L225: {expect: true, expr: '(^|\n)([^\n]+:225:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L226: {expect: true, expr: '(^|\n)([^\n]+:226:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L227: {expect: true, expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L228: {expect: true, expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L232: {expect: true, expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L233: {expect: true, expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L234: {expect: true, expr: '(^|\n)([^\n]+:234:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L235: {expect: true, expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L236: {expect: true, expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L237: {expect: true, expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L238: {expect: true, expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L239: {expect: true, expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L243: {expect: true, expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L244: {expect: true, expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L245: {expect: true, expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L246: {expect: true, expr: '(^|\n)([^\n]+:246:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L247: {expect: true, expr: '(^|\n)([^\n]+:247:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L248: {expect: true, expr: '(^|\n)([^\n]+:248:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L249: {expect: true, expr: '(^|\n)([^\n]+:249:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L250: {expect: true, expr: '(^|\n)([^\n]+:250:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L255: {expect: true, expr: '(^|\n)([^\n]+:255:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L256: {expect: true, expr: '(^|\n)([^\n]+:256:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L257: {expect: true, expr: '(^|\n)([^\n]+:257:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L258: {expect: true, expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L259: {expect: true, expr: '(^|\n)([^\n]+:259:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L260: {expect: true, expr: '(^|\n)([^\n]+:260:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L261: {expect: true, expr: '(^|\n)([^\n]+:261:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L262: {expect: true, expr: '(^|\n)([^\n]+:262:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L267: {expect: true, expr: '(^|\n)([^\n]+:267:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L269: {expect: true, expr: '(^|\n)([^\n]+:269:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L270: {expect: true, expr: '(^|\n)([^\n]+:270:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L271: {expect: true, expr: '(^|\n)([^\n]+:271:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L273: {expect: true, expr: '(^|\n)([^\n]+:273:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L274: {expect: true, expr: '(^|\n)([^\n]+:274:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L280: {expect: true, expr: '(^|\n)([^\n]+:280:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L281: {expect: true, expr: '(^|\n)([^\n]+:281:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L282: {expect: true, expr: '(^|\n)([^\n]+:282:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L283: {expect: true, expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L284: {expect: true, expr: '(^|\n)([^\n]+:284:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L285: {expect: true, expr: '(^|\n)([^\n]+:285:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L286: {expect: true, expr: '(^|\n)([^\n]+:286:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L287: {expect: true, expr: '(^|\n)([^\n]+:287:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L293: {expect: true, expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L294: {expect: true, expr: '(^|\n)([^\n]+:294:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L295: {expect: true, expr: '(^|\n)([^\n]+:295:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L296: {expect: true, expr: '(^|\n)([^\n]+:296:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L297: {expect: true, expr: '(^|\n)([^\n]+:297:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L298: {expect: true, expr: '(^|\n)([^\n]+:298:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L299: {expect: true, expr: '(^|\n)([^\n]+:299:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L300: {expect: true, expr: '(^|\n)([^\n]+:300:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L307: {expect: true, expr: '(^|\n)([^\n]+:307:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L308: {expect: true, expr: '(^|\n)([^\n]+:308:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L309: {expect: true, expr: '(^|\n)([^\n]+:309:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L310: {expect: true, expr: '(^|\n)([^\n]+:310:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L311: {expect: true, expr: '(^|\n)([^\n]+:311:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L312: {expect: true, expr: '(^|\n)([^\n]+:312:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L313: {expect: true, expr: '(^|\n)([^\n]+:313:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L314: {expect: true, expr: '(^|\n)([^\n]+:314:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L321: {expect: true, expr: '(^|\n)([^\n]+:321:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L322: {expect: true, expr: '(^|\n)([^\n]+:322:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L323: {expect: true, expr: '(^|\n)([^\n]+:323:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L324: {expect: true, expr: '(^|\n)([^\n]+:324:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L325: {expect: true, expr: '(^|\n)([^\n]+:325:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L326: {expect: true, expr: '(^|\n)([^\n]+:326:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L327: {expect: true, expr: '(^|\n)([^\n]+:327:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L328: {expect: true, expr: '(^|\n)([^\n]+:328:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L333: {expect: true, expr: '(^|\n)([^\n]+:333:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L334: {expect: true, expr: '(^|\n)([^\n]+:334:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L336: {expect: true, expr: '(^|\n)([^\n]+:336:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L337: {expect: true, expr: '(^|\n)([^\n]+:337:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L338: {expect: true, expr: '(^|\n)([^\n]+:338:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L340: {expect: true, expr: '(^|\n)([^\n]+:340:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L344: {expect: true, expr: '(^|\n)([^\n]+:344:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L345: {expect: true, expr: '(^|\n)([^\n]+:345:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L347: {expect: true, expr: '(^|\n)([^\n]+:347:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L348: {expect: true, expr: '(^|\n)([^\n]+:348:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L349: {expect: true, expr: '(^|\n)([^\n]+:349:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L351: {expect: true, expr: '(^|\n)([^\n]+:351:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L358: {expect: true, expr: '(^|\n)([^\n]+:358:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L359: {expect: true, expr: '(^|\n)([^\n]+:359:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L360: {expect: true, expr: '(^|\n)([^\n]+:360:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L361: {expect: true, expr: '(^|\n)([^\n]+:361:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L362: {expect: true, expr: '(^|\n)([^\n]+:362:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L363: {expect: true, expr: '(^|\n)([^\n]+:363:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L364: {expect: true, expr: '(^|\n)([^\n]+:364:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L365: {expect: true, expr: '(^|\n)([^\n]+:365:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L370: {expect: true, expr: '(^|\n)([^\n]+:370:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L371: {expect: true, expr: '(^|\n)([^\n]+:371:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L372: {expect: true, expr: '(^|\n)([^\n]+:372:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L373: {expect: true, expr: '(^|\n)([^\n]+:373:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L374: {expect: true, expr: '(^|\n)([^\n]+:374:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L375: {expect: true, expr: '(^|\n)([^\n]+:375:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L376: {expect: true, expr: '(^|\n)([^\n]+:376:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L377: {expect: true, expr: '(^|\n)([^\n]+:377:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L384: {expect: true, expr: '(^|\n)([^\n]+:384:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L385: {expect: true, expr: '(^|\n)([^\n]+:385:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L386: {expect: true, expr: '(^|\n)([^\n]+:386:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L387: {expect: true, expr: '(^|\n)([^\n]+:387:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L388: {expect: true, expr: '(^|\n)([^\n]+:388:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L389: {expect: true, expr: '(^|\n)([^\n]+:389:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L390: {expect: true, expr: '(^|\n)([^\n]+:390:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L391: {expect: true, expr: '(^|\n)([^\n]+:391:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L396: {expect: true, expr: '(^|\n)([^\n]+:396:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L397: {expect: true, expr: '(^|\n)([^\n]+:397:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L398: {expect: true, expr: '(^|\n)([^\n]+:398:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L399: {expect: true, expr: '(^|\n)([^\n]+:399:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L400: {expect: true, expr: '(^|\n)([^\n]+:400:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L401: {expect: true, expr: '(^|\n)([^\n]+:401:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L402: {expect: true, expr: '(^|\n)([^\n]+:402:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L403: {expect: true, expr: '(^|\n)([^\n]+:403:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L408: {expect: true, expr: '(^|\n)([^\n]+:408:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L409: {expect: true, expr: '(^|\n)([^\n]+:409:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L410: {expect: true, expr: '(^|\n)([^\n]+:410:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L412: {expect: true, expr: '(^|\n)([^\n]+:412:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L413: {expect: true, expr: '(^|\n)([^\n]+:413:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L414: {expect: true, expr: '(^|\n)([^\n]+:414:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L418: {expect: true, expr: '(^|\n)([^\n]+:418:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L419: {expect: true, expr: '(^|\n)([^\n]+:419:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L420: {expect: true, expr: '(^|\n)([^\n]+:420:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L421: {expect: true, expr: '(^|\n)([^\n]+:421:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L422: {expect: true, expr: '(^|\n)([^\n]+:422:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L423: {expect: true, expr: '(^|\n)([^\n]+:423:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L424: {expect: true, expr: '(^|\n)([^\n]+:424:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L425: {expect: true, expr: '(^|\n)([^\n]+:425:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L437: {expect: true, expr: '(^|\n)([^\n]+(:437:)[^\n]*[0-9]+: warning:[^\n]*("nowait")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L442: {expect: true, expr: '(^|\n)([^\n]+(:442:)[^\n]*[0-9]+: warning:[^\n]*("nowait")[^\n]*\n?)+'}
      L446: {expect: true, expr: '(^|\n)([^\n]+(:446:)[^\n]*[0-9]+: warning:[^\n]*("nowait")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L452: {expect: true, expr: '(^|\n)([^\n]+(:452:)[^\n]*[0-9]+: warning:[^\n]*("ordered")[^\n]*\n?)+'}
      L459: {expect: true, expr: '(^|\n)([^\n]+:459:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before end of line")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L465: {expect: true, expr: '(^|\n)([^\n]+:465:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .point. before .EKAHI.")[^\n]*\n?)+'}
      L467: {expect: true, expr: '(^|\n)([^\n]+:467:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .point. before .HO.")[^\n]*\n?)+'}
      L469: {expect: true, expr: '(^|\n)([^\n]+:469:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".pragma
          omp cancellation point. may only be used in compound statements")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L471: {expect: true, expr: '(^|\n)([^\n]+:471:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".pragma
          omp cancellation point. must specify one of")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L69: {expect: true, expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
test_cancel-1_705:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/cancel-1.c'
    sources: {binary: cancel-1.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L116: {expect: true, expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L123: {expect: true, expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L124: {expect: true, expr: '(^|\n)([^\n]+:124:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L134: {expect: true, expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L135: {expect: true, expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L152: {expect: true, expr: '(^|\n)([^\n]+:152:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L154: {expect: true, expr: '(^|\n)([^\n]+:154:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L156: {expect: true, expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L157: {expect: true, expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L164: {expect: true, expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L166: {expect: true, expr: '(^|\n)([^\n]+:166:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L167: {expect: true, expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L168: {expect: true, expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L169: {expect: true, expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L175: {expect: true, expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L176: {expect: true, expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L179: {expect: true, expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L180: {expect: true, expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L186: {expect: true, expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L189: {expect: true, expr: '(^|\n)([^\n]+:189:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L190: {expect: true, expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L191: {expect: true, expr: '(^|\n)([^\n]+:191:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L199: {expect: true, expr: '(^|\n)([^\n]+:199:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L201: {expect: true, expr: '(^|\n)([^\n]+:201:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L202: {expect: true, expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L203: {expect: true, expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L205: {expect: true, expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L209: {expect: true, expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L210: {expect: true, expr: '(^|\n)([^\n]+:210:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L211: {expect: true, expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L212: {expect: true, expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L213: {expect: true, expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L214: {expect: true, expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L215: {expect: true, expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L216: {expect: true, expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L221: {expect: true, expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L222: {expect: true, expr: '(^|\n)([^\n]+:222:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L223: {expect: true, expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L224: {expect: true, expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L225: {expect: true, expr: '(^|\n)([^\n]+:225:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L226: {expect: true, expr: '(^|\n)([^\n]+:226:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L227: {expect: true, expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L228: {expect: true, expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L232: {expect: true, expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L233: {expect: true, expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L234: {expect: true, expr: '(^|\n)([^\n]+:234:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L235: {expect: true, expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L236: {expect: true, expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L237: {expect: true, expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L238: {expect: true, expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L239: {expect: true, expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L243: {expect: true, expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L244: {expect: true, expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L245: {expect: true, expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L246: {expect: true, expr: '(^|\n)([^\n]+:246:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L247: {expect: true, expr: '(^|\n)([^\n]+:247:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L248: {expect: true, expr: '(^|\n)([^\n]+:248:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L249: {expect: true, expr: '(^|\n)([^\n]+:249:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L250: {expect: true, expr: '(^|\n)([^\n]+:250:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L255: {expect: true, expr: '(^|\n)([^\n]+:255:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L256: {expect: true, expr: '(^|\n)([^\n]+:256:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L257: {expect: true, expr: '(^|\n)([^\n]+:257:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L258: {expect: true, expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L259: {expect: true, expr: '(^|\n)([^\n]+:259:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L260: {expect: true, expr: '(^|\n)([^\n]+:260:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L261: {expect: true, expr: '(^|\n)([^\n]+:261:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L262: {expect: true, expr: '(^|\n)([^\n]+:262:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L267: {expect: true, expr: '(^|\n)([^\n]+:267:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L269: {expect: true, expr: '(^|\n)([^\n]+:269:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L270: {expect: true, expr: '(^|\n)([^\n]+:270:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L271: {expect: true, expr: '(^|\n)([^\n]+:271:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L273: {expect: true, expr: '(^|\n)([^\n]+:273:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L274: {expect: true, expr: '(^|\n)([^\n]+:274:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L280: {expect: true, expr: '(^|\n)([^\n]+:280:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L281: {expect: true, expr: '(^|\n)([^\n]+:281:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L282: {expect: true, expr: '(^|\n)([^\n]+:282:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L283: {expect: true, expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L284: {expect: true, expr: '(^|\n)([^\n]+:284:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L285: {expect: true, expr: '(^|\n)([^\n]+:285:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L286: {expect: true, expr: '(^|\n)([^\n]+:286:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L287: {expect: true, expr: '(^|\n)([^\n]+:287:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L293: {expect: true, expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L294: {expect: true, expr: '(^|\n)([^\n]+:294:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L295: {expect: true, expr: '(^|\n)([^\n]+:295:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L296: {expect: true, expr: '(^|\n)([^\n]+:296:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L297: {expect: true, expr: '(^|\n)([^\n]+:297:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L298: {expect: true, expr: '(^|\n)([^\n]+:298:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L299: {expect: true, expr: '(^|\n)([^\n]+:299:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L300: {expect: true, expr: '(^|\n)([^\n]+:300:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L307: {expect: true, expr: '(^|\n)([^\n]+:307:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L308: {expect: true, expr: '(^|\n)([^\n]+:308:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L309: {expect: true, expr: '(^|\n)([^\n]+:309:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L310: {expect: true, expr: '(^|\n)([^\n]+:310:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L311: {expect: true, expr: '(^|\n)([^\n]+:311:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L312: {expect: true, expr: '(^|\n)([^\n]+:312:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L313: {expect: true, expr: '(^|\n)([^\n]+:313:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L314: {expect: true, expr: '(^|\n)([^\n]+:314:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L321: {expect: true, expr: '(^|\n)([^\n]+:321:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L322: {expect: true, expr: '(^|\n)([^\n]+:322:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L323: {expect: true, expr: '(^|\n)([^\n]+:323:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L324: {expect: true, expr: '(^|\n)([^\n]+:324:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L325: {expect: true, expr: '(^|\n)([^\n]+:325:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L326: {expect: true, expr: '(^|\n)([^\n]+:326:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L327: {expect: true, expr: '(^|\n)([^\n]+:327:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L328: {expect: true, expr: '(^|\n)([^\n]+:328:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L333: {expect: true, expr: '(^|\n)([^\n]+:333:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L334: {expect: true, expr: '(^|\n)([^\n]+:334:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L336: {expect: true, expr: '(^|\n)([^\n]+:336:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L337: {expect: true, expr: '(^|\n)([^\n]+:337:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L338: {expect: true, expr: '(^|\n)([^\n]+:338:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L340: {expect: true, expr: '(^|\n)([^\n]+:340:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L344: {expect: true, expr: '(^|\n)([^\n]+:344:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L345: {expect: true, expr: '(^|\n)([^\n]+:345:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L347: {expect: true, expr: '(^|\n)([^\n]+:347:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L348: {expect: true, expr: '(^|\n)([^\n]+:348:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L349: {expect: true, expr: '(^|\n)([^\n]+:349:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L351: {expect: true, expr: '(^|\n)([^\n]+:351:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L358: {expect: true, expr: '(^|\n)([^\n]+:358:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L359: {expect: true, expr: '(^|\n)([^\n]+:359:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L360: {expect: true, expr: '(^|\n)([^\n]+:360:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L361: {expect: true, expr: '(^|\n)([^\n]+:361:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L362: {expect: true, expr: '(^|\n)([^\n]+:362:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L363: {expect: true, expr: '(^|\n)([^\n]+:363:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L364: {expect: true, expr: '(^|\n)([^\n]+:364:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L365: {expect: true, expr: '(^|\n)([^\n]+:365:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L370: {expect: true, expr: '(^|\n)([^\n]+:370:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L371: {expect: true, expr: '(^|\n)([^\n]+:371:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L372: {expect: true, expr: '(^|\n)([^\n]+:372:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L373: {expect: true, expr: '(^|\n)([^\n]+:373:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L374: {expect: true, expr: '(^|\n)([^\n]+:374:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L375: {expect: true, expr: '(^|\n)([^\n]+:375:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L376: {expect: true, expr: '(^|\n)([^\n]+:376:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L377: {expect: true, expr: '(^|\n)([^\n]+:377:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L384: {expect: true, expr: '(^|\n)([^\n]+:384:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L385: {expect: true, expr: '(^|\n)([^\n]+:385:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L386: {expect: true, expr: '(^|\n)([^\n]+:386:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L387: {expect: true, expr: '(^|\n)([^\n]+:387:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L388: {expect: true, expr: '(^|\n)([^\n]+:388:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L389: {expect: true, expr: '(^|\n)([^\n]+:389:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L390: {expect: true, expr: '(^|\n)([^\n]+:390:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L391: {expect: true, expr: '(^|\n)([^\n]+:391:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L396: {expect: true, expr: '(^|\n)([^\n]+:396:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L397: {expect: true, expr: '(^|\n)([^\n]+:397:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L398: {expect: true, expr: '(^|\n)([^\n]+:398:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L399: {expect: true, expr: '(^|\n)([^\n]+:399:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L400: {expect: true, expr: '(^|\n)([^\n]+:400:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L401: {expect: true, expr: '(^|\n)([^\n]+:401:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L402: {expect: true, expr: '(^|\n)([^\n]+:402:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L403: {expect: true, expr: '(^|\n)([^\n]+:403:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L408: {expect: true, expr: '(^|\n)([^\n]+:408:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L409: {expect: true, expr: '(^|\n)([^\n]+:409:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L410: {expect: true, expr: '(^|\n)([^\n]+:410:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L412: {expect: true, expr: '(^|\n)([^\n]+:412:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L413: {expect: true, expr: '(^|\n)([^\n]+:413:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L414: {expect: true, expr: '(^|\n)([^\n]+:414:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L418: {expect: true, expr: '(^|\n)([^\n]+:418:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L419: {expect: true, expr: '(^|\n)([^\n]+:419:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L420: {expect: true, expr: '(^|\n)([^\n]+:420:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L421: {expect: true, expr: '(^|\n)([^\n]+:421:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L422: {expect: true, expr: '(^|\n)([^\n]+:422:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L423: {expect: true, expr: '(^|\n)([^\n]+:423:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L424: {expect: true, expr: '(^|\n)([^\n]+:424:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L425: {expect: true, expr: '(^|\n)([^\n]+:425:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L437: {expect: true, expr: '(^|\n)([^\n]+(:437:)[^\n]*[0-9]+: warning:[^\n]*("nowait")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L442: {expect: true, expr: '(^|\n)([^\n]+(:442:)[^\n]*[0-9]+: warning:[^\n]*("nowait")[^\n]*\n?)+'}
      L446: {expect: true, expr: '(^|\n)([^\n]+(:446:)[^\n]*[0-9]+: warning:[^\n]*("nowait")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L452: {expect: true, expr: '(^|\n)([^\n]+(:452:)[^\n]*[0-9]+: warning:[^\n]*("ordered")[^\n]*\n?)+'}
      L459: {expect: true, expr: '(^|\n)([^\n]+:459:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before end of line")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L465: {expect: true, expr: '(^|\n)([^\n]+:465:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .point. before .EKAHI.")[^\n]*\n?)+'}
      L467: {expect: true, expr: '(^|\n)([^\n]+:467:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .point. before .HO.")[^\n]*\n?)+'}
      L469: {expect: true, expr: '(^|\n)([^\n]+:469:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".pragma
          omp cancellation point. may only be used in compound statements")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L471: {expect: true, expr: '(^|\n)([^\n]+:471:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".pragma
          omp cancellation point. must specify one of")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L69: {expect: true, expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
test_cancel-1_706:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/cancel-1.c'
    sources: {binary: cancel-1.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L116: {expect: true, expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L123: {expect: true, expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L124: {expect: true, expr: '(^|\n)([^\n]+:124:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L134: {expect: true, expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L135: {expect: true, expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L152: {expect: true, expr: '(^|\n)([^\n]+:152:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L154: {expect: true, expr: '(^|\n)([^\n]+:154:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L156: {expect: true, expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L157: {expect: true, expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L164: {expect: true, expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L166: {expect: true, expr: '(^|\n)([^\n]+:166:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L167: {expect: true, expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L168: {expect: true, expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L169: {expect: true, expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L175: {expect: true, expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L176: {expect: true, expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L179: {expect: true, expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L180: {expect: true, expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L186: {expect: true, expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L189: {expect: true, expr: '(^|\n)([^\n]+:189:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L190: {expect: true, expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L191: {expect: true, expr: '(^|\n)([^\n]+:191:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L199: {expect: true, expr: '(^|\n)([^\n]+:199:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L201: {expect: true, expr: '(^|\n)([^\n]+:201:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L202: {expect: true, expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L203: {expect: true, expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L205: {expect: true, expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L209: {expect: true, expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L210: {expect: true, expr: '(^|\n)([^\n]+:210:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L211: {expect: true, expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L212: {expect: true, expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L213: {expect: true, expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L214: {expect: true, expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L215: {expect: true, expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L216: {expect: true, expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L221: {expect: true, expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L222: {expect: true, expr: '(^|\n)([^\n]+:222:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L223: {expect: true, expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L224: {expect: true, expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L225: {expect: true, expr: '(^|\n)([^\n]+:225:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L226: {expect: true, expr: '(^|\n)([^\n]+:226:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L227: {expect: true, expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L228: {expect: true, expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L232: {expect: true, expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L233: {expect: true, expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L234: {expect: true, expr: '(^|\n)([^\n]+:234:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L235: {expect: true, expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L236: {expect: true, expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L237: {expect: true, expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L238: {expect: true, expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L239: {expect: true, expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L243: {expect: true, expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L244: {expect: true, expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L245: {expect: true, expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L246: {expect: true, expr: '(^|\n)([^\n]+:246:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L247: {expect: true, expr: '(^|\n)([^\n]+:247:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L248: {expect: true, expr: '(^|\n)([^\n]+:248:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L249: {expect: true, expr: '(^|\n)([^\n]+:249:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L250: {expect: true, expr: '(^|\n)([^\n]+:250:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          .distribute. or .parallel. regions are allowed to be strictly nested")[^\n]*\n?)+'}
      L255: {expect: true, expr: '(^|\n)([^\n]+:255:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L256: {expect: true, expr: '(^|\n)([^\n]+:256:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L257: {expect: true, expr: '(^|\n)([^\n]+:257:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L258: {expect: true, expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L259: {expect: true, expr: '(^|\n)([^\n]+:259:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L260: {expect: true, expr: '(^|\n)([^\n]+:260:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L261: {expect: true, expr: '(^|\n)([^\n]+:261:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L262: {expect: true, expr: '(^|\n)([^\n]+:262:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L267: {expect: true, expr: '(^|\n)([^\n]+:267:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L269: {expect: true, expr: '(^|\n)([^\n]+:269:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L270: {expect: true, expr: '(^|\n)([^\n]+:270:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L271: {expect: true, expr: '(^|\n)([^\n]+:271:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L273: {expect: true, expr: '(^|\n)([^\n]+:273:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L274: {expect: true, expr: '(^|\n)([^\n]+:274:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L280: {expect: true, expr: '(^|\n)([^\n]+:280:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L281: {expect: true, expr: '(^|\n)([^\n]+:281:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L282: {expect: true, expr: '(^|\n)([^\n]+:282:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L283: {expect: true, expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L284: {expect: true, expr: '(^|\n)([^\n]+:284:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L285: {expect: true, expr: '(^|\n)([^\n]+:285:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L286: {expect: true, expr: '(^|\n)([^\n]+:286:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L287: {expect: true, expr: '(^|\n)([^\n]+:287:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L293: {expect: true, expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L294: {expect: true, expr: '(^|\n)([^\n]+:294:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L295: {expect: true, expr: '(^|\n)([^\n]+:295:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L296: {expect: true, expr: '(^|\n)([^\n]+:296:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L297: {expect: true, expr: '(^|\n)([^\n]+:297:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L298: {expect: true, expr: '(^|\n)([^\n]+:298:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L299: {expect: true, expr: '(^|\n)([^\n]+:299:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L300: {expect: true, expr: '(^|\n)([^\n]+:300:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L307: {expect: true, expr: '(^|\n)([^\n]+:307:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L308: {expect: true, expr: '(^|\n)([^\n]+:308:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L309: {expect: true, expr: '(^|\n)([^\n]+:309:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L310: {expect: true, expr: '(^|\n)([^\n]+:310:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L311: {expect: true, expr: '(^|\n)([^\n]+:311:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L312: {expect: true, expr: '(^|\n)([^\n]+:312:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L313: {expect: true, expr: '(^|\n)([^\n]+:313:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L314: {expect: true, expr: '(^|\n)([^\n]+:314:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L321: {expect: true, expr: '(^|\n)([^\n]+:321:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L322: {expect: true, expr: '(^|\n)([^\n]+:322:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L323: {expect: true, expr: '(^|\n)([^\n]+:323:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L324: {expect: true, expr: '(^|\n)([^\n]+:324:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L325: {expect: true, expr: '(^|\n)([^\n]+:325:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L326: {expect: true, expr: '(^|\n)([^\n]+:326:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L327: {expect: true, expr: '(^|\n)([^\n]+:327:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L328: {expect: true, expr: '(^|\n)([^\n]+:328:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L333: {expect: true, expr: '(^|\n)([^\n]+:333:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L334: {expect: true, expr: '(^|\n)([^\n]+:334:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L336: {expect: true, expr: '(^|\n)([^\n]+:336:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L337: {expect: true, expr: '(^|\n)([^\n]+:337:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L338: {expect: true, expr: '(^|\n)([^\n]+:338:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L340: {expect: true, expr: '(^|\n)([^\n]+:340:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L344: {expect: true, expr: '(^|\n)([^\n]+:344:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L345: {expect: true, expr: '(^|\n)([^\n]+:345:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L347: {expect: true, expr: '(^|\n)([^\n]+:347:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L348: {expect: true, expr: '(^|\n)([^\n]+:348:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L349: {expect: true, expr: '(^|\n)([^\n]+:349:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L351: {expect: true, expr: '(^|\n)([^\n]+:351:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L358: {expect: true, expr: '(^|\n)([^\n]+:358:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L359: {expect: true, expr: '(^|\n)([^\n]+:359:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L360: {expect: true, expr: '(^|\n)([^\n]+:360:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L361: {expect: true, expr: '(^|\n)([^\n]+:361:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L362: {expect: true, expr: '(^|\n)([^\n]+:362:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L363: {expect: true, expr: '(^|\n)([^\n]+:363:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L364: {expect: true, expr: '(^|\n)([^\n]+:364:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L365: {expect: true, expr: '(^|\n)([^\n]+:365:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L370: {expect: true, expr: '(^|\n)([^\n]+:370:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L371: {expect: true, expr: '(^|\n)([^\n]+:371:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L372: {expect: true, expr: '(^|\n)([^\n]+:372:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L373: {expect: true, expr: '(^|\n)([^\n]+:373:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L374: {expect: true, expr: '(^|\n)([^\n]+:374:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L375: {expect: true, expr: '(^|\n)([^\n]+:375:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L376: {expect: true, expr: '(^|\n)([^\n]+:376:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L377: {expect: true, expr: '(^|\n)([^\n]+:377:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L384: {expect: true, expr: '(^|\n)([^\n]+:384:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L385: {expect: true, expr: '(^|\n)([^\n]+:385:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L386: {expect: true, expr: '(^|\n)([^\n]+:386:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L387: {expect: true, expr: '(^|\n)([^\n]+:387:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L388: {expect: true, expr: '(^|\n)([^\n]+:388:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L389: {expect: true, expr: '(^|\n)([^\n]+:389:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L390: {expect: true, expr: '(^|\n)([^\n]+:390:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L391: {expect: true, expr: '(^|\n)([^\n]+:391:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L396: {expect: true, expr: '(^|\n)([^\n]+:396:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L397: {expect: true, expr: '(^|\n)([^\n]+:397:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L398: {expect: true, expr: '(^|\n)([^\n]+:398:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L399: {expect: true, expr: '(^|\n)([^\n]+:399:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L400: {expect: true, expr: '(^|\n)([^\n]+:400:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L401: {expect: true, expr: '(^|\n)([^\n]+:401:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L402: {expect: true, expr: '(^|\n)([^\n]+:402:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L403: {expect: true, expr: '(^|\n)([^\n]+:403:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L408: {expect: true, expr: '(^|\n)([^\n]+:408:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L409: {expect: true, expr: '(^|\n)([^\n]+:409:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L410: {expect: true, expr: '(^|\n)([^\n]+:410:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L412: {expect: true, expr: '(^|\n)([^\n]+:412:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L413: {expect: true, expr: '(^|\n)([^\n]+:413:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L414: {expect: true, expr: '(^|\n)([^\n]+:414:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L418: {expect: true, expr: '(^|\n)([^\n]+:418:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L419: {expect: true, expr: '(^|\n)([^\n]+:419:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L420: {expect: true, expr: '(^|\n)([^\n]+:420:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L421: {expect: true, expr: '(^|\n)([^\n]+:421:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L422: {expect: true, expr: '(^|\n)([^\n]+:422:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L423: {expect: true, expr: '(^|\n)([^\n]+:423:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L424: {expect: true, expr: '(^|\n)([^\n]+:424:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L425: {expect: true, expr: '(^|\n)([^\n]+:425:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L437: {expect: true, expr: '(^|\n)([^\n]+(:437:)[^\n]*[0-9]+: warning:[^\n]*("nowait")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L442: {expect: true, expr: '(^|\n)([^\n]+(:442:)[^\n]*[0-9]+: warning:[^\n]*("nowait")[^\n]*\n?)+'}
      L446: {expect: true, expr: '(^|\n)([^\n]+(:446:)[^\n]*[0-9]+: warning:[^\n]*("nowait")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L452: {expect: true, expr: '(^|\n)([^\n]+(:452:)[^\n]*[0-9]+: warning:[^\n]*("ordered")[^\n]*\n?)+'}
      L459: {expect: true, expr: '(^|\n)([^\n]+:459:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before end of line")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L465: {expect: true, expr: '(^|\n)([^\n]+:465:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .point. before .EKAHI.")[^\n]*\n?)+'}
      L467: {expect: true, expr: '(^|\n)([^\n]+:467:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .point. before .HO.")[^\n]*\n?)+'}
      L469: {expect: true, expr: '(^|\n)([^\n]+:469:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".pragma
          omp cancellation point. may only be used in compound statements")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L471: {expect: true, expr: '(^|\n)([^\n]+:471:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".pragma
          omp cancellation point. must specify one of")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L69: {expect: true, expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("construct
          not closely nested inside of .taskgroup. region")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("orphaned")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          closely nested inside")[^\n]*\n?)+'}
test_clauses-1_128:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/clauses-1.c'
    sources: {binary: clauses-1.s, cflags: "-fopenmp -Wno-hsa -std=c99\n -S"}
  group: GRPSERIAL
test_clauses-1_19:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/clauses-1.c'
    sources: {binary: clauses-1.s, cflags: "-fopenmp -Wno-hsa -std=c99\n -S"}
  group: GRPSERIAL
test_clauses-1_273:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/clauses-1.c'
    sources: {binary: clauses-1.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_clauses-1_274:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/clauses-1.c'
    sources: {binary: clauses-1.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_clauses-1_275:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/clauses-1.c'
    sources: {binary: clauses-1.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_clauses-1_562:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/clauses-1.c'
    sources: {binary: clauses-1.s, cflags: "-fopenmp -Wno-hsa -std=c99\n -S"}
  group: GRPSERIAL
test_clauses-1_707:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/clauses-1.c'
    sources: {binary: clauses-1.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_clauses-1_708:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/clauses-1.c'
    sources: {binary: clauses-1.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_clauses-1_709:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/clauses-1.c'
    sources: {binary: clauses-1.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_clauses-2_129:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/clauses-2.c'
    sources: {binary: clauses-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in data clauses")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in data clauses")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in data clauses")[^\n]*\n?)+'}
test_clauses-2_20:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/clauses-2.c'
    sources: {binary: clauses-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in data clauses")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in data clauses")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in data clauses")[^\n]*\n?)+'}
test_clauses-2_276:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/clauses-2.c'
    sources: {binary: clauses-2.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in data clauses")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in data clauses")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in data clauses")[^\n]*\n?)+'}
test_clauses-2_277:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/clauses-2.c'
    sources: {binary: clauses-2.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in data clauses")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in data clauses")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in data clauses")[^\n]*\n?)+'}
test_clauses-2_278:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/clauses-2.c'
    sources: {binary: clauses-2.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in data clauses")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in data clauses")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in data clauses")[^\n]*\n?)+'}
test_clauses-2_563:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/clauses-2.c'
    sources: {binary: clauses-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in data clauses")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in data clauses")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in data clauses")[^\n]*\n?)+'}
test_clauses-2_710:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/clauses-2.c'
    sources: {binary: clauses-2.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in data clauses")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in data clauses")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in data clauses")[^\n]*\n?)+'}
test_clauses-2_711:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/clauses-2.c'
    sources: {binary: clauses-2.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in data clauses")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in data clauses")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in data clauses")[^\n]*\n?)+'}
test_clauses-2_712:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/clauses-2.c'
    sources: {binary: clauses-2.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in data clauses")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in data clauses")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in map clauses")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          both in data and map clauses")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once in data clauses")[^\n]*\n?)+'}
test_clauses-3_130:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/clauses-3.c'
    sources: {binary: clauses-3.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_clauses-3_21:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/clauses-3.c'
    sources: {binary: clauses-3.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_clauses-3_279:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/clauses-3.c'
    sources: {binary: clauses-3.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_clauses-3_280:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/clauses-3.c'
    sources: {binary: clauses-3.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_clauses-3_281:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/clauses-3.c'
    sources: {binary: clauses-3.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_clauses-3_564:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/clauses-3.c'
    sources: {binary: clauses-3.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_clauses-3_713:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/clauses-3.c'
    sources: {binary: clauses-3.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_clauses-3_714:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/clauses-3.c'
    sources: {binary: clauses-3.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_clauses-3_715:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/clauses-3.c'
    sources: {binary: clauses-3.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_clauses-4_131:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/clauses-4.c'
    sources: {binary: clauses-4.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L108: {expect: true, expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered
          simd threads. must be closely nested inside of .for simd. region")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause for variable other than loop iterator specified on construct combined
          with .distribute.")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause for variable other than loop iterator specified on construct combined
          with .distribute.")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          is not valid for .#pragma omp distribute parallel for.")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause for variable other than loop iterator specified on construct combined
          with .distribute.")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause for variable other than loop iterator specified on construct combined
          with .distribute.")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          is not valid for .#pragma omp teams distribute parallel for.")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".copyin.
          is not valid for .#pragma omp target parallel.")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".copyin.
          is not valid for .#pragma omp target parallel for.")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".copyin.
          is not valid for .#pragma omp target parallel for simd.")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp distribute parallel for.")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp distribute parallel for simd.")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp teams distribute parallel for.")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp teams distribute parallel for simd.")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp target teams distribute parallel for.")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp target teams distribute parallel for simd.")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered
          simd threads. must be closely nested inside of .for simd. region")[^\n]*\n?)+'}
test_clauses-4_22:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/clauses-4.c'
    sources: {binary: clauses-4.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L108: {expect: true, expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered
          simd threads. must be closely nested inside of .for simd. region")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause for variable other than loop iterator specified on construct combined
          with .distribute.")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause for variable other than loop iterator specified on construct combined
          with .distribute.")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          is not valid for .#pragma omp distribute parallel for.")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause for variable other than loop iterator specified on construct combined
          with .distribute.")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause for variable other than loop iterator specified on construct combined
          with .distribute.")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          is not valid for .#pragma omp teams distribute parallel for.")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".copyin.
          is not valid for .#pragma omp target parallel.")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".copyin.
          is not valid for .#pragma omp target parallel for.")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".copyin.
          is not valid for .#pragma omp target parallel for simd.")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp distribute parallel for.")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp distribute parallel for simd.")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp teams distribute parallel for.")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp teams distribute parallel for simd.")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp target teams distribute parallel for.")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp target teams distribute parallel for simd.")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered
          simd threads. must be closely nested inside of .for simd. region")[^\n]*\n?)+'}
test_clauses-4_282:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/clauses-4.c'
    sources: {binary: clauses-4.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L108: {expect: true, expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered
          simd threads. must be closely nested inside of .for simd. region")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause for variable other than loop iterator specified on construct combined
          with .distribute.")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause for variable other than loop iterator specified on construct combined
          with .distribute.")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          is not valid for .#pragma omp distribute parallel for.")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause for variable other than loop iterator specified on construct combined
          with .distribute.")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause for variable other than loop iterator specified on construct combined
          with .distribute.")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          is not valid for .#pragma omp teams distribute parallel for.")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".copyin.
          is not valid for .#pragma omp target parallel.")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".copyin.
          is not valid for .#pragma omp target parallel for.")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".copyin.
          is not valid for .#pragma omp target parallel for simd.")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp distribute parallel for.")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp distribute parallel for simd.")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp teams distribute parallel for.")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp teams distribute parallel for simd.")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp target teams distribute parallel for.")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp target teams distribute parallel for simd.")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered
          simd threads. must be closely nested inside of .for simd. region")[^\n]*\n?)+'}
test_clauses-4_283:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/clauses-4.c'
    sources: {binary: clauses-4.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L108: {expect: true, expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered
          simd threads. must be closely nested inside of .for simd. region")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause for variable other than loop iterator specified on construct combined
          with .distribute.")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause for variable other than loop iterator specified on construct combined
          with .distribute.")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          is not valid for .#pragma omp distribute parallel for.")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause for variable other than loop iterator specified on construct combined
          with .distribute.")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause for variable other than loop iterator specified on construct combined
          with .distribute.")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          is not valid for .#pragma omp teams distribute parallel for.")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".copyin.
          is not valid for .#pragma omp target parallel.")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".copyin.
          is not valid for .#pragma omp target parallel for.")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".copyin.
          is not valid for .#pragma omp target parallel for simd.")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp distribute parallel for.")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp distribute parallel for simd.")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp teams distribute parallel for.")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp teams distribute parallel for simd.")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp target teams distribute parallel for.")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp target teams distribute parallel for simd.")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered
          simd threads. must be closely nested inside of .for simd. region")[^\n]*\n?)+'}
test_clauses-4_284:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/clauses-4.c'
    sources: {binary: clauses-4.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L108: {expect: true, expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered
          simd threads. must be closely nested inside of .for simd. region")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause for variable other than loop iterator specified on construct combined
          with .distribute.")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause for variable other than loop iterator specified on construct combined
          with .distribute.")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          is not valid for .#pragma omp distribute parallel for.")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause for variable other than loop iterator specified on construct combined
          with .distribute.")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause for variable other than loop iterator specified on construct combined
          with .distribute.")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          is not valid for .#pragma omp teams distribute parallel for.")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".copyin.
          is not valid for .#pragma omp target parallel.")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".copyin.
          is not valid for .#pragma omp target parallel for.")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".copyin.
          is not valid for .#pragma omp target parallel for simd.")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp distribute parallel for.")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp distribute parallel for simd.")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp teams distribute parallel for.")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp teams distribute parallel for simd.")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp target teams distribute parallel for.")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp target teams distribute parallel for simd.")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered
          simd threads. must be closely nested inside of .for simd. region")[^\n]*\n?)+'}
test_clauses-4_565:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/clauses-4.c'
    sources: {binary: clauses-4.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L108: {expect: true, expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered
          simd threads. must be closely nested inside of .for simd. region")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause for variable other than loop iterator specified on construct combined
          with .distribute.")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause for variable other than loop iterator specified on construct combined
          with .distribute.")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          is not valid for .#pragma omp distribute parallel for.")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause for variable other than loop iterator specified on construct combined
          with .distribute.")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause for variable other than loop iterator specified on construct combined
          with .distribute.")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          is not valid for .#pragma omp teams distribute parallel for.")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".copyin.
          is not valid for .#pragma omp target parallel.")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".copyin.
          is not valid for .#pragma omp target parallel for.")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".copyin.
          is not valid for .#pragma omp target parallel for simd.")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp distribute parallel for.")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp distribute parallel for simd.")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp teams distribute parallel for.")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp teams distribute parallel for simd.")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp target teams distribute parallel for.")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp target teams distribute parallel for simd.")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered
          simd threads. must be closely nested inside of .for simd. region")[^\n]*\n?)+'}
test_clauses-4_716:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/clauses-4.c'
    sources: {binary: clauses-4.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L108: {expect: true, expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered
          simd threads. must be closely nested inside of .for simd. region")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause for variable other than loop iterator specified on construct combined
          with .distribute.")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause for variable other than loop iterator specified on construct combined
          with .distribute.")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          is not valid for .#pragma omp distribute parallel for.")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause for variable other than loop iterator specified on construct combined
          with .distribute.")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause for variable other than loop iterator specified on construct combined
          with .distribute.")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          is not valid for .#pragma omp teams distribute parallel for.")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".copyin.
          is not valid for .#pragma omp target parallel.")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".copyin.
          is not valid for .#pragma omp target parallel for.")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".copyin.
          is not valid for .#pragma omp target parallel for simd.")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp distribute parallel for.")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp distribute parallel for simd.")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp teams distribute parallel for.")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp teams distribute parallel for simd.")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp target teams distribute parallel for.")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp target teams distribute parallel for simd.")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered
          simd threads. must be closely nested inside of .for simd. region")[^\n]*\n?)+'}
test_clauses-4_717:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/clauses-4.c'
    sources: {binary: clauses-4.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L108: {expect: true, expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered
          simd threads. must be closely nested inside of .for simd. region")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause for variable other than loop iterator specified on construct combined
          with .distribute.")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause for variable other than loop iterator specified on construct combined
          with .distribute.")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          is not valid for .#pragma omp distribute parallel for.")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause for variable other than loop iterator specified on construct combined
          with .distribute.")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause for variable other than loop iterator specified on construct combined
          with .distribute.")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          is not valid for .#pragma omp teams distribute parallel for.")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".copyin.
          is not valid for .#pragma omp target parallel.")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".copyin.
          is not valid for .#pragma omp target parallel for.")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".copyin.
          is not valid for .#pragma omp target parallel for simd.")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp distribute parallel for.")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp distribute parallel for simd.")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp teams distribute parallel for.")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp teams distribute parallel for simd.")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp target teams distribute parallel for.")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp target teams distribute parallel for simd.")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered
          simd threads. must be closely nested inside of .for simd. region")[^\n]*\n?)+'}
test_clauses-4_718:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/clauses-4.c'
    sources: {binary: clauses-4.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L108: {expect: true, expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered
          simd threads. must be closely nested inside of .for simd. region")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause for variable other than loop iterator specified on construct combined
          with .distribute.")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause for variable other than loop iterator specified on construct combined
          with .distribute.")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          is not valid for .#pragma omp distribute parallel for.")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause for variable other than loop iterator specified on construct combined
          with .distribute.")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause for variable other than loop iterator specified on construct combined
          with .distribute.")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          is not valid for .#pragma omp teams distribute parallel for.")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".copyin.
          is not valid for .#pragma omp target parallel.")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".copyin.
          is not valid for .#pragma omp target parallel for.")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".copyin.
          is not valid for .#pragma omp target parallel for simd.")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp distribute parallel for.")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp distribute parallel for simd.")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp teams distribute parallel for.")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp teams distribute parallel for simd.")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp target teams distribute parallel for.")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          is not valid for .#pragma omp target teams distribute parallel for simd.")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered
          simd threads. must be closely nested inside of .for simd. region")[^\n]*\n?)+'}
test_declare-target-1_132:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/declare-target-1.c'
    sources: {binary: declare-target-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_declare-target-1_23:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/declare-target-1.c'
    sources: {binary: declare-target-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_declare-target-1_285:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/declare-target-1.c'
    sources: {binary: declare-target-1.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
test_declare-target-1_286:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/declare-target-1.c'
    sources: {binary: declare-target-1.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
test_declare-target-1_287:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/declare-target-1.c'
    sources: {binary: declare-target-1.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
test_declare-target-1_566:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/declare-target-1.c'
    sources: {binary: declare-target-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_declare-target-1_719:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/declare-target-1.c'
    sources: {binary: declare-target-1.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
test_declare-target-1_720:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/declare-target-1.c'
    sources: {binary: declare-target-1.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
test_declare-target-1_721:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/declare-target-1.c'
    sources: {binary: declare-target-1.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
test_declare-target-2_133:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/declare-target-2.c'
    sources: {binary: declare-target-2.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("specified
          both in declare target")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a variable in clause")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type has incomplete element type")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have a mappable type in")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have a mappable type in")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have a mappable type in")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          threadprivate variable in")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          threadprivate variable in")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once on the same .declare target. directive")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once on the same .declare target. directive")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once on the same .declare target. directive")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before .to.")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .#pragma omp. clause before")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .#pragma omp. clause before")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before .to.")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with
          clauses in between")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once on the same .declare target. directive")[^\n]*\n?)+'}
test_declare-target-2_24:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/declare-target-2.c'
    sources: {binary: declare-target-2.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("specified
          both in declare target")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a variable in clause")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type has incomplete element type")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have a mappable type in")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have a mappable type in")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have a mappable type in")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          threadprivate variable in")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          threadprivate variable in")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once on the same .declare target. directive")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once on the same .declare target. directive")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once on the same .declare target. directive")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before .to.")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .#pragma omp. clause before")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .#pragma omp. clause before")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before .to.")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with
          clauses in between")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once on the same .declare target. directive")[^\n]*\n?)+'}
test_declare-target-2_288:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/declare-target-2.c'
    sources: {binary: declare-target-2.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("specified
          both in declare target")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a variable in clause")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type has incomplete element type")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have a mappable type in")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have a mappable type in")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have a mappable type in")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          threadprivate variable in")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          threadprivate variable in")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once on the same .declare target. directive")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once on the same .declare target. directive")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once on the same .declare target. directive")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before .to.")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .#pragma omp. clause before")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .#pragma omp. clause before")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before .to.")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with
          clauses in between")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once on the same .declare target. directive")[^\n]*\n?)+'}
test_declare-target-2_289:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/declare-target-2.c'
    sources: {binary: declare-target-2.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("specified
          both in declare target")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a variable in clause")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type has incomplete element type")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have a mappable type in")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have a mappable type in")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have a mappable type in")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          threadprivate variable in")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          threadprivate variable in")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once on the same .declare target. directive")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once on the same .declare target. directive")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once on the same .declare target. directive")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before .to.")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .#pragma omp. clause before")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .#pragma omp. clause before")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before .to.")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with
          clauses in between")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once on the same .declare target. directive")[^\n]*\n?)+'}
test_declare-target-2_290:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/declare-target-2.c'
    sources: {binary: declare-target-2.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("specified
          both in declare target")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a variable in clause")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type has incomplete element type")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have a mappable type in")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have a mappable type in")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have a mappable type in")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          threadprivate variable in")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          threadprivate variable in")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once on the same .declare target. directive")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once on the same .declare target. directive")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once on the same .declare target. directive")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before .to.")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .#pragma omp. clause before")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .#pragma omp. clause before")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before .to.")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with
          clauses in between")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once on the same .declare target. directive")[^\n]*\n?)+'}
test_declare-target-2_567:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/declare-target-2.c'
    sources: {binary: declare-target-2.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("specified
          both in declare target")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a variable in clause")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type has incomplete element type")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have a mappable type in")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have a mappable type in")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have a mappable type in")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          threadprivate variable in")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          threadprivate variable in")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once on the same .declare target. directive")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once on the same .declare target. directive")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once on the same .declare target. directive")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before .to.")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .#pragma omp. clause before")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .#pragma omp. clause before")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before .to.")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with
          clauses in between")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once on the same .declare target. directive")[^\n]*\n?)+'}
test_declare-target-2_722:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/declare-target-2.c'
    sources: {binary: declare-target-2.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("specified
          both in declare target")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a variable in clause")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type has incomplete element type")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have a mappable type in")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have a mappable type in")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have a mappable type in")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          threadprivate variable in")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          threadprivate variable in")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once on the same .declare target. directive")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once on the same .declare target. directive")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once on the same .declare target. directive")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before .to.")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .#pragma omp. clause before")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .#pragma omp. clause before")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before .to.")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with
          clauses in between")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once on the same .declare target. directive")[^\n]*\n?)+'}
test_declare-target-2_723:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/declare-target-2.c'
    sources: {binary: declare-target-2.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("specified
          both in declare target")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a variable in clause")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type has incomplete element type")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have a mappable type in")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have a mappable type in")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have a mappable type in")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          threadprivate variable in")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          threadprivate variable in")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once on the same .declare target. directive")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once on the same .declare target. directive")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once on the same .declare target. directive")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before .to.")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .#pragma omp. clause before")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .#pragma omp. clause before")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before .to.")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with
          clauses in between")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once on the same .declare target. directive")[^\n]*\n?)+'}
test_declare-target-2_724:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/declare-target-2.c'
    sources: {binary: declare-target-2.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("specified
          both in declare target")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a variable in clause")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type has incomplete element type")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have a mappable type in")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have a mappable type in")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have a mappable type in")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          threadprivate variable in")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          threadprivate variable in")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once on the same .declare target. directive")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once on the same .declare target. directive")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once on the same .declare target. directive")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before .to.")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .#pragma omp. clause before")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .#pragma omp. clause before")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line before .to.")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with
          clauses in between")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once on the same .declare target. directive")[^\n]*\n?)+'}
test_depend-1_134:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/depend-1.c'
    sources: {binary: depend-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a variable")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have pointer or array type")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type length expression must be specified")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          pointer type length expression must be specified")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
test_depend-1_25:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/depend-1.c'
    sources: {binary: depend-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a variable")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have pointer or array type")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type length expression must be specified")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          pointer type length expression must be specified")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
test_depend-1_291:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/depend-1.c'
    sources: {binary: depend-1.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a variable")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have pointer or array type")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type length expression must be specified")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          pointer type length expression must be specified")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
test_depend-1_292:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/depend-1.c'
    sources: {binary: depend-1.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a variable")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have pointer or array type")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type length expression must be specified")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          pointer type length expression must be specified")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
test_depend-1_293:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/depend-1.c'
    sources: {binary: depend-1.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a variable")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have pointer or array type")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type length expression must be specified")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          pointer type length expression must be specified")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
test_depend-1_568:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/depend-1.c'
    sources: {binary: depend-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a variable")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have pointer or array type")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type length expression must be specified")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          pointer type length expression must be specified")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
test_depend-1_725:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/depend-1.c'
    sources: {binary: depend-1.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a variable")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have pointer or array type")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type length expression must be specified")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          pointer type length expression must be specified")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
test_depend-1_726:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/depend-1.c'
    sources: {binary: depend-1.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a variable")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have pointer or array type")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type length expression must be specified")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          pointer type length expression must be specified")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
test_depend-1_727:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/depend-1.c'
    sources: {binary: depend-1.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a variable")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have pointer or array type")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type length expression must be specified")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          pointer type length expression must be specified")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
test_depend-2_135:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/depend-2.c'
    sources: {binary: depend-2.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_depend-2_26:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/depend-2.c'
    sources: {binary: depend-2.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_depend-2_294:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/depend-2.c'
    sources: {binary: depend-2.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
test_depend-2_295:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/depend-2.c'
    sources: {binary: depend-2.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
test_depend-2_296:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/depend-2.c'
    sources: {binary: depend-2.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
test_depend-2_569:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/depend-2.c'
    sources: {binary: depend-2.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_depend-2_728:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/depend-2.c'
    sources: {binary: depend-2.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
test_depend-2_729:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/depend-2.c'
    sources: {binary: depend-2.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
test_depend-2_730:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/depend-2.c'
    sources: {binary: depend-2.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
test_depend-3_136:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/depend-3.c'
    sources: {binary: depend-3.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
test_depend-3_27:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/depend-3.c'
    sources: {binary: depend-3.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
test_depend-3_297:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/depend-3.c'
    sources: {binary: depend-3.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
test_depend-3_298:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/depend-3.c'
    sources: {binary: depend-3.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
test_depend-3_299:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/depend-3.c'
    sources: {binary: depend-3.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
test_depend-3_570:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/depend-3.c'
    sources: {binary: depend-3.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
test_depend-3_731:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/depend-3.c'
    sources: {binary: depend-3.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
test_depend-3_732:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/depend-3.c'
    sources: {binary: depend-3.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
test_depend-3_733:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/depend-3.c'
    sources: {binary: depend-3.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
test_depend-4_137:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/depend-4.c'
    sources: {binary: depend-4.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
test_depend-4_28:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/depend-4.c'
    sources: {binary: depend-4.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
test_depend-4_300:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/depend-4.c'
    sources: {binary: depend-4.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
test_depend-4_301:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/depend-4.c'
    sources: {binary: depend-4.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
test_depend-4_302:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/depend-4.c'
    sources: {binary: depend-4.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
test_depend-4_571:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/depend-4.c'
    sources: {binary: depend-4.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
test_depend-4_734:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/depend-4.c'
    sources: {binary: depend-4.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
test_depend-4_735:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/depend-4.c'
    sources: {binary: depend-4.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
test_depend-4_736:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/depend-4.c'
    sources: {binary: depend-4.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
test_distribute-1_138:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/distribute-1.c'
    sources: {binary: distribute-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lastprivate
          variable .i. is private in outer context")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("same
          variable used in .firstprivate. and .lastprivate. clauses on .distribute.
          construct")[^\n]*\n?)+'}
test_distribute-1_29:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/distribute-1.c'
    sources: {binary: distribute-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lastprivate
          variable .i. is private in outer context")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("same
          variable used in .firstprivate. and .lastprivate. clauses on .distribute.
          construct")[^\n]*\n?)+'}
test_distribute-1_303:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/distribute-1.c'
    sources: {binary: distribute-1.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lastprivate
          variable .i. is private in outer context")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("same
          variable used in .firstprivate. and .lastprivate. clauses on .distribute.
          construct")[^\n]*\n?)+'}
test_distribute-1_304:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/distribute-1.c'
    sources: {binary: distribute-1.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lastprivate
          variable .i. is private in outer context")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("same
          variable used in .firstprivate. and .lastprivate. clauses on .distribute.
          construct")[^\n]*\n?)+'}
test_distribute-1_305:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/distribute-1.c'
    sources: {binary: distribute-1.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lastprivate
          variable .i. is private in outer context")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("same
          variable used in .firstprivate. and .lastprivate. clauses on .distribute.
          construct")[^\n]*\n?)+'}
test_distribute-1_572:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/distribute-1.c'
    sources: {binary: distribute-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lastprivate
          variable .i. is private in outer context")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("same
          variable used in .firstprivate. and .lastprivate. clauses on .distribute.
          construct")[^\n]*\n?)+'}
test_distribute-1_737:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/distribute-1.c'
    sources: {binary: distribute-1.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lastprivate
          variable .i. is private in outer context")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("same
          variable used in .firstprivate. and .lastprivate. clauses on .distribute.
          construct")[^\n]*\n?)+'}
test_distribute-1_738:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/distribute-1.c'
    sources: {binary: distribute-1.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lastprivate
          variable .i. is private in outer context")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("same
          variable used in .firstprivate. and .lastprivate. clauses on .distribute.
          construct")[^\n]*\n?)+'}
test_distribute-1_739:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/distribute-1.c'
    sources: {binary: distribute-1.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lastprivate
          variable .i. is private in outer context")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("same
          variable used in .firstprivate. and .lastprivate. clauses on .distribute.
          construct")[^\n]*\n?)+'}
test_doacross-1_139:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/doacross-1.c'
    sources: {binary: doacross-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          parameter is less than")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not match number")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          parameter is less than")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not match number")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside an .ordered. loop")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside an .ordered. loop")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than one .depend.source.. clause on an")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          specified together with")[^\n]*\n?)+'}
test_doacross-1_30:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/doacross-1.c'
    sources: {binary: doacross-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          parameter is less than")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not match number")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          parameter is less than")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not match number")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside an .ordered. loop")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside an .ordered. loop")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than one .depend.source.. clause on an")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          specified together with")[^\n]*\n?)+'}
test_doacross-1_306:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/doacross-1.c'
    sources: {binary: doacross-1.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          parameter is less than")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not match number")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          parameter is less than")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not match number")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside an .ordered. loop")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside an .ordered. loop")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than one .depend.source.. clause on an")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          specified together with")[^\n]*\n?)+'}
test_doacross-1_307:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/doacross-1.c'
    sources: {binary: doacross-1.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          parameter is less than")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not match number")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          parameter is less than")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not match number")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside an .ordered. loop")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside an .ordered. loop")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than one .depend.source.. clause on an")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          specified together with")[^\n]*\n?)+'}
test_doacross-1_308:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/doacross-1.c'
    sources: {binary: doacross-1.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          parameter is less than")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not match number")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          parameter is less than")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not match number")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside an .ordered. loop")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside an .ordered. loop")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than one .depend.source.. clause on an")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          specified together with")[^\n]*\n?)+'}
test_doacross-1_573:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/doacross-1.c'
    sources: {binary: doacross-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          parameter is less than")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not match number")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          parameter is less than")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not match number")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside an .ordered. loop")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside an .ordered. loop")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than one .depend.source.. clause on an")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          specified together with")[^\n]*\n?)+'}
test_doacross-1_740:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/doacross-1.c'
    sources: {binary: doacross-1.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          parameter is less than")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not match number")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          parameter is less than")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not match number")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside an .ordered. loop")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside an .ordered. loop")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than one .depend.source.. clause on an")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          specified together with")[^\n]*\n?)+'}
test_doacross-1_741:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/doacross-1.c'
    sources: {binary: doacross-1.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          parameter is less than")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not match number")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          parameter is less than")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not match number")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside an .ordered. loop")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside an .ordered. loop")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than one .depend.source.. clause on an")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          specified together with")[^\n]*\n?)+'}
test_doacross-1_742:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/doacross-1.c'
    sources: {binary: doacross-1.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          parameter is less than")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not match number")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          parameter is less than")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not match number")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside an .ordered. loop")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside an .ordered. loop")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than one .depend.source.. clause on an")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          specified together with")[^\n]*\n?)+'}
test_element-1_140:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/element-1.c'
    sources: {binary: element-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\). before .\\\\.. token")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\). before .->. token")[^\n]*\n?)+'}
test_element-1_309:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/element-1.c'
    sources: {binary: element-1.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\). before .\\\\.. token")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\). before .->. token")[^\n]*\n?)+'}
test_element-1_31:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/element-1.c'
    sources: {binary: element-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\). before .\\\\.. token")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\). before .->. token")[^\n]*\n?)+'}
test_element-1_310:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/element-1.c'
    sources: {binary: element-1.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\). before .\\\\.. token")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\). before .->. token")[^\n]*\n?)+'}
test_element-1_311:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/element-1.c'
    sources: {binary: element-1.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\). before .\\\\.. token")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\). before .->. token")[^\n]*\n?)+'}
test_element-1_574:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/element-1.c'
    sources: {binary: element-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\). before .\\\\.. token")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\). before .->. token")[^\n]*\n?)+'}
test_element-1_743:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/element-1.c'
    sources: {binary: element-1.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\). before .\\\\.. token")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\). before .->. token")[^\n]*\n?)+'}
test_element-1_744:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/element-1.c'
    sources: {binary: element-1.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\). before .\\\\.. token")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\). before .->. token")[^\n]*\n?)+'}
test_element-1_745:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/element-1.c'
    sources: {binary: element-1.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\). before .\\\\.. token")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\). before .->. token")[^\n]*\n?)+'}
test_gridify-1_141:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/gridify-1.c'
    sources: {binary: gridify-1.s, cflags: "-fopenmp -fdump-tree-omplower-details\n
        -S"}
  group: GRPSERIAL
test_gridify-1_312:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/gridify-1.c'
    sources: {binary: gridify-1.s, cflags: "-std=gnu++98 -fopenmp -fdump-tree-omplower-details\n
        -S"}
  group: GRPSERIAL
test_gridify-1_313:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/gridify-1.c'
    sources: {binary: gridify-1.s, cflags: "-std=gnu++11 -fopenmp -fdump-tree-omplower-details\n
        -S"}
  group: GRPSERIAL
test_gridify-1_314:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/gridify-1.c'
    sources: {binary: gridify-1.s, cflags: "-std=gnu++14 -fopenmp -fdump-tree-omplower-details\n
        -S"}
  group: GRPSERIAL
test_gridify-1_32:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/gridify-1.c'
    sources: {binary: gridify-1.s, cflags: "-fopenmp -fdump-tree-omplower-details\n
        -S"}
  group: GRPSERIAL
test_gridify-1_575:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/gridify-1.c'
    sources: {binary: gridify-1.s, cflags: "-fopenmp -fdump-tree-omplower-details\n
        -S"}
  group: GRPSERIAL
test_gridify-1_746:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/gridify-1.c'
    sources: {binary: gridify-1.s, cflags: "-std=gnu++98 -fopenmp -fdump-tree-omplower-details\n
        -S"}
  group: GRPSERIAL
test_gridify-1_747:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/gridify-1.c'
    sources: {binary: gridify-1.s, cflags: "-std=gnu++11 -fopenmp -fdump-tree-omplower-details\n
        -S"}
  group: GRPSERIAL
test_gridify-1_748:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/gridify-1.c'
    sources: {binary: gridify-1.s, cflags: "-std=gnu++14 -fopenmp -fdump-tree-omplower-details\n
        -S"}
  group: GRPSERIAL
test_gridify-2_142:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/gridify-2.c'
    sources: {binary: gridify-2.s, cflags: "-fopenmp -fdump-tree-omplower-details\n
        -S"}
  group: GRPSERIAL
test_gridify-2_315:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/gridify-2.c'
    sources: {binary: gridify-2.s, cflags: "-std=gnu++98 -fopenmp -fdump-tree-omplower-details\n
        -S"}
  group: GRPSERIAL
test_gridify-2_316:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/gridify-2.c'
    sources: {binary: gridify-2.s, cflags: "-std=gnu++11 -fopenmp -fdump-tree-omplower-details\n
        -S"}
  group: GRPSERIAL
test_gridify-2_317:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/gridify-2.c'
    sources: {binary: gridify-2.s, cflags: "-std=gnu++14 -fopenmp -fdump-tree-omplower-details\n
        -S"}
  group: GRPSERIAL
test_gridify-2_33:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/gridify-2.c'
    sources: {binary: gridify-2.s, cflags: "-fopenmp -fdump-tree-omplower-details\n
        -S"}
  group: GRPSERIAL
test_gridify-2_576:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/gridify-2.c'
    sources: {binary: gridify-2.s, cflags: "-fopenmp -fdump-tree-omplower-details\n
        -S"}
  group: GRPSERIAL
test_gridify-2_749:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/gridify-2.c'
    sources: {binary: gridify-2.s, cflags: "-std=gnu++98 -fopenmp -fdump-tree-omplower-details\n
        -S"}
  group: GRPSERIAL
test_gridify-2_750:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/gridify-2.c'
    sources: {binary: gridify-2.s, cflags: "-std=gnu++11 -fopenmp -fdump-tree-omplower-details\n
        -S"}
  group: GRPSERIAL
test_gridify-2_751:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/gridify-2.c'
    sources: {binary: gridify-2.s, cflags: "-std=gnu++14 -fopenmp -fdump-tree-omplower-details\n
        -S"}
  group: GRPSERIAL
test_gridify-3_143:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/gridify-3.c'
    sources: {binary: gridify-3.s, cflags: "-fopenmp -fdump-tree-omplower-details\n
        -S"}
  group: GRPSERIAL
test_gridify-3_318:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/gridify-3.c'
    sources: {binary: gridify-3.s, cflags: "-std=gnu++98 -fopenmp -fdump-tree-omplower-details\n
        -S"}
  group: GRPSERIAL
test_gridify-3_319:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/gridify-3.c'
    sources: {binary: gridify-3.s, cflags: "-std=gnu++11 -fopenmp -fdump-tree-omplower-details\n
        -S"}
  group: GRPSERIAL
test_gridify-3_320:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/gridify-3.c'
    sources: {binary: gridify-3.s, cflags: "-std=gnu++14 -fopenmp -fdump-tree-omplower-details\n
        -S"}
  group: GRPSERIAL
test_gridify-3_34:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/gridify-3.c'
    sources: {binary: gridify-3.s, cflags: "-fopenmp -fdump-tree-omplower-details\n
        -S"}
  group: GRPSERIAL
test_gridify-3_577:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/gridify-3.c'
    sources: {binary: gridify-3.s, cflags: "-fopenmp -fdump-tree-omplower-details\n
        -S"}
  group: GRPSERIAL
test_gridify-3_752:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/gridify-3.c'
    sources: {binary: gridify-3.s, cflags: "-std=gnu++98 -fopenmp -fdump-tree-omplower-details\n
        -S"}
  group: GRPSERIAL
test_gridify-3_753:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/gridify-3.c'
    sources: {binary: gridify-3.s, cflags: "-std=gnu++11 -fopenmp -fdump-tree-omplower-details\n
        -S"}
  group: GRPSERIAL
test_gridify-3_754:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/gridify-3.c'
    sources: {binary: gridify-3.s, cflags: "-std=gnu++14 -fopenmp -fdump-tree-omplower-details\n
        -S"}
  group: GRPSERIAL
test_if-1_144:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/if-1.c'
    sources: {binary: if-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_if-1_321:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/if-1.c'
    sources: {binary: if-1.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_if-1_322:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/if-1.c'
    sources: {binary: if-1.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_if-1_323:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/if-1.c'
    sources: {binary: if-1.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_if-1_35:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/if-1.c'
    sources: {binary: if-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_if-1_578:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/if-1.c'
    sources: {binary: if-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_if-1_755:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/if-1.c'
    sources: {binary: if-1.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_if-1_756:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/if-1.c'
    sources: {binary: if-1.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_if-1_757:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/if-1.c'
    sources: {binary: if-1.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_if-2_145:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/if-2.c'
    sources: {binary: if-2.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("if
          any .if. clause has modifier, then all .if. clauses have to use modifier")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("if
          any .if. clause has modifier, then all .if. clauses have to use modifier")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .if. clauses with .parallel. modifier")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. .if. clause modifier rather than .task.")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. .if. clause modifier rather than .taskloop.")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. .if. clause modifier rather than .target update.")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. .if. clause modifier rather than .target update.")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .task. .if. clause modifier rather than .parallel.")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .taskloop. .if. clause modifier rather than .task.")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target. .if. clause modifier rather than .taskloop.")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. or .target. .if. clause modifier")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target data. .if. clause modifier rather than .target.")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target enter data. .if. clause modifier rather than .target data.")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target exit data. .if. clause modifier rather than .target enter data.")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target update. .if. clause modifier rather than .target exit data.")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .if. clauses without modifier")[^\n]*\n?)+'}
test_if-2_324:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/if-2.c'
    sources: {binary: if-2.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("if
          any .if. clause has modifier, then all .if. clauses have to use modifier")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("if
          any .if. clause has modifier, then all .if. clauses have to use modifier")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .if. clauses with .parallel. modifier")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. .if. clause modifier rather than .task.")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. .if. clause modifier rather than .taskloop.")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. .if. clause modifier rather than .target update.")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. .if. clause modifier rather than .target update.")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .task. .if. clause modifier rather than .parallel.")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .taskloop. .if. clause modifier rather than .task.")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target. .if. clause modifier rather than .taskloop.")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. or .target. .if. clause modifier")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target data. .if. clause modifier rather than .target.")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target enter data. .if. clause modifier rather than .target data.")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target exit data. .if. clause modifier rather than .target enter data.")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target update. .if. clause modifier rather than .target exit data.")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .if. clauses without modifier")[^\n]*\n?)+'}
test_if-2_325:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/if-2.c'
    sources: {binary: if-2.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("if
          any .if. clause has modifier, then all .if. clauses have to use modifier")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("if
          any .if. clause has modifier, then all .if. clauses have to use modifier")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .if. clauses with .parallel. modifier")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. .if. clause modifier rather than .task.")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. .if. clause modifier rather than .taskloop.")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. .if. clause modifier rather than .target update.")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. .if. clause modifier rather than .target update.")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .task. .if. clause modifier rather than .parallel.")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .taskloop. .if. clause modifier rather than .task.")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target. .if. clause modifier rather than .taskloop.")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. or .target. .if. clause modifier")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target data. .if. clause modifier rather than .target.")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target enter data. .if. clause modifier rather than .target data.")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target exit data. .if. clause modifier rather than .target enter data.")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target update. .if. clause modifier rather than .target exit data.")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .if. clauses without modifier")[^\n]*\n?)+'}
test_if-2_326:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/if-2.c'
    sources: {binary: if-2.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("if
          any .if. clause has modifier, then all .if. clauses have to use modifier")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("if
          any .if. clause has modifier, then all .if. clauses have to use modifier")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .if. clauses with .parallel. modifier")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. .if. clause modifier rather than .task.")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. .if. clause modifier rather than .taskloop.")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. .if. clause modifier rather than .target update.")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. .if. clause modifier rather than .target update.")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .task. .if. clause modifier rather than .parallel.")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .taskloop. .if. clause modifier rather than .task.")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target. .if. clause modifier rather than .taskloop.")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. or .target. .if. clause modifier")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target data. .if. clause modifier rather than .target.")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target enter data. .if. clause modifier rather than .target data.")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target exit data. .if. clause modifier rather than .target enter data.")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target update. .if. clause modifier rather than .target exit data.")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .if. clauses without modifier")[^\n]*\n?)+'}
test_if-2_36:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/if-2.c'
    sources: {binary: if-2.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("if
          any .if. clause has modifier, then all .if. clauses have to use modifier")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("if
          any .if. clause has modifier, then all .if. clauses have to use modifier")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .if. clauses with .parallel. modifier")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. .if. clause modifier rather than .task.")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. .if. clause modifier rather than .taskloop.")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. .if. clause modifier rather than .target update.")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. .if. clause modifier rather than .target update.")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .task. .if. clause modifier rather than .parallel.")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .taskloop. .if. clause modifier rather than .task.")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target. .if. clause modifier rather than .taskloop.")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. or .target. .if. clause modifier")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target data. .if. clause modifier rather than .target.")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target enter data. .if. clause modifier rather than .target data.")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target exit data. .if. clause modifier rather than .target enter data.")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target update. .if. clause modifier rather than .target exit data.")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .if. clauses without modifier")[^\n]*\n?)+'}
test_if-2_579:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/if-2.c'
    sources: {binary: if-2.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("if
          any .if. clause has modifier, then all .if. clauses have to use modifier")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("if
          any .if. clause has modifier, then all .if. clauses have to use modifier")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .if. clauses with .parallel. modifier")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. .if. clause modifier rather than .task.")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. .if. clause modifier rather than .taskloop.")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. .if. clause modifier rather than .target update.")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. .if. clause modifier rather than .target update.")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .task. .if. clause modifier rather than .parallel.")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .taskloop. .if. clause modifier rather than .task.")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target. .if. clause modifier rather than .taskloop.")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. or .target. .if. clause modifier")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target data. .if. clause modifier rather than .target.")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target enter data. .if. clause modifier rather than .target data.")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target exit data. .if. clause modifier rather than .target enter data.")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target update. .if. clause modifier rather than .target exit data.")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .if. clauses without modifier")[^\n]*\n?)+'}
test_if-2_758:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/if-2.c'
    sources: {binary: if-2.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("if
          any .if. clause has modifier, then all .if. clauses have to use modifier")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("if
          any .if. clause has modifier, then all .if. clauses have to use modifier")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .if. clauses with .parallel. modifier")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. .if. clause modifier rather than .task.")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. .if. clause modifier rather than .taskloop.")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. .if. clause modifier rather than .target update.")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. .if. clause modifier rather than .target update.")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .task. .if. clause modifier rather than .parallel.")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .taskloop. .if. clause modifier rather than .task.")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target. .if. clause modifier rather than .taskloop.")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. or .target. .if. clause modifier")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target data. .if. clause modifier rather than .target.")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target enter data. .if. clause modifier rather than .target data.")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target exit data. .if. clause modifier rather than .target enter data.")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target update. .if. clause modifier rather than .target exit data.")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .if. clauses without modifier")[^\n]*\n?)+'}
test_if-2_759:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/if-2.c'
    sources: {binary: if-2.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("if
          any .if. clause has modifier, then all .if. clauses have to use modifier")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("if
          any .if. clause has modifier, then all .if. clauses have to use modifier")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .if. clauses with .parallel. modifier")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. .if. clause modifier rather than .task.")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. .if. clause modifier rather than .taskloop.")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. .if. clause modifier rather than .target update.")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. .if. clause modifier rather than .target update.")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .task. .if. clause modifier rather than .parallel.")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .taskloop. .if. clause modifier rather than .task.")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target. .if. clause modifier rather than .taskloop.")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. or .target. .if. clause modifier")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target data. .if. clause modifier rather than .target.")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target enter data. .if. clause modifier rather than .target data.")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target exit data. .if. clause modifier rather than .target enter data.")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target update. .if. clause modifier rather than .target exit data.")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .if. clauses without modifier")[^\n]*\n?)+'}
test_if-2_760:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/if-2.c'
    sources: {binary: if-2.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("if
          any .if. clause has modifier, then all .if. clauses have to use modifier")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("if
          any .if. clause has modifier, then all .if. clauses have to use modifier")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .if. clauses with .parallel. modifier")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. .if. clause modifier rather than .task.")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. .if. clause modifier rather than .taskloop.")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. .if. clause modifier rather than .target update.")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. .if. clause modifier rather than .target update.")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .task. .if. clause modifier rather than .parallel.")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .taskloop. .if. clause modifier rather than .task.")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target. .if. clause modifier rather than .taskloop.")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .parallel. or .target. .if. clause modifier")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target data. .if. clause modifier rather than .target.")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target enter data. .if. clause modifier rather than .target data.")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target exit data. .if. clause modifier rather than .target enter data.")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .target update. .if. clause modifier rather than .target exit data.")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .if. clauses without modifier")[^\n]*\n?)+'}
test_linear-1_146:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/linear-1.c'
    sources: {binary: linear-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
test_linear-1_327:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/linear-1.c'
    sources: {binary: linear-1.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
test_linear-1_328:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/linear-1.c'
    sources: {binary: linear-1.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
test_linear-1_329:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/linear-1.c'
    sources: {binary: linear-1.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
test_linear-1_37:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/linear-1.c'
    sources: {binary: linear-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
test_linear-1_580:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/linear-1.c'
    sources: {binary: linear-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
test_linear-1_761:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/linear-1.c'
    sources: {binary: linear-1.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
test_linear-1_762:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/linear-1.c'
    sources: {binary: linear-1.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
test_linear-1_763:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/linear-1.c'
    sources: {binary: linear-1.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier
          should not be specified in")[^\n]*\n?)+'}
test_map-1_147:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/map-1.c'
    sources: {binary: map-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L101: {expect: true, expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L103: {expect: true, expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L105: {expect: true, expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L107: {expect: true, expr: '(^|\n)([^\n]+:107:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type has incomplete element type")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a variable")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          threadprivate variable")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have pointer or array type")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''s1\''
          does not have a mappable type in \''map\'' clause")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''s2\''
          does not have a mappable type in \''map\'' clause")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type length expression must be specified")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("referenced
          in target region does not have a mappable type")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          pointer type length expression must be specified")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
test_map-1_330:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/map-1.c'
    sources: {binary: map-1.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L101: {expect: true, expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L103: {expect: true, expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L105: {expect: true, expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L107: {expect: true, expr: '(^|\n)([^\n]+:107:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type has incomplete element type")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a variable")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          threadprivate variable")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have pointer or array type")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''s1\''
          does not have a mappable type in \''map\'' clause")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''s2\''
          does not have a mappable type in \''map\'' clause")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type length expression must be specified")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("referenced
          in target region does not have a mappable type")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          pointer type length expression must be specified")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
test_map-1_331:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/map-1.c'
    sources: {binary: map-1.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L101: {expect: true, expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L103: {expect: true, expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L105: {expect: true, expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L107: {expect: true, expr: '(^|\n)([^\n]+:107:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type has incomplete element type")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a variable")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          threadprivate variable")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have pointer or array type")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''s1\''
          does not have a mappable type in \''map\'' clause")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''s2\''
          does not have a mappable type in \''map\'' clause")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type length expression must be specified")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("referenced
          in target region does not have a mappable type")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          pointer type length expression must be specified")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
test_map-1_332:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/map-1.c'
    sources: {binary: map-1.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L101: {expect: true, expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L103: {expect: true, expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L105: {expect: true, expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L107: {expect: true, expr: '(^|\n)([^\n]+:107:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type has incomplete element type")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a variable")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          threadprivate variable")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have pointer or array type")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''s1\''
          does not have a mappable type in \''map\'' clause")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''s2\''
          does not have a mappable type in \''map\'' clause")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type length expression must be specified")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("referenced
          in target region does not have a mappable type")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          pointer type length expression must be specified")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
test_map-1_38:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/map-1.c'
    sources: {binary: map-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L101: {expect: true, expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L103: {expect: true, expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L105: {expect: true, expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L107: {expect: true, expr: '(^|\n)([^\n]+:107:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type has incomplete element type")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a variable")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          threadprivate variable")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have pointer or array type")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''s1\''
          does not have a mappable type in \''map\'' clause")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''s2\''
          does not have a mappable type in \''map\'' clause")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type length expression must be specified")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("referenced
          in target region does not have a mappable type")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          pointer type length expression must be specified")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
test_map-1_581:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/map-1.c'
    sources: {binary: map-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L101: {expect: true, expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L103: {expect: true, expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L105: {expect: true, expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L107: {expect: true, expr: '(^|\n)([^\n]+:107:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type has incomplete element type")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a variable")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          threadprivate variable")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have pointer or array type")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''s1\''
          does not have a mappable type in \''map\'' clause")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''s2\''
          does not have a mappable type in \''map\'' clause")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type length expression must be specified")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("referenced
          in target region does not have a mappable type")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          pointer type length expression must be specified")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
test_map-1_764:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/map-1.c'
    sources: {binary: map-1.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L101: {expect: true, expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L103: {expect: true, expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L105: {expect: true, expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L107: {expect: true, expr: '(^|\n)([^\n]+:107:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type has incomplete element type")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a variable")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          threadprivate variable")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have pointer or array type")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''s1\''
          does not have a mappable type in \''map\'' clause")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''s2\''
          does not have a mappable type in \''map\'' clause")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type length expression must be specified")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("referenced
          in target region does not have a mappable type")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          pointer type length expression must be specified")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
test_map-1_765:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/map-1.c'
    sources: {binary: map-1.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L101: {expect: true, expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L103: {expect: true, expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L105: {expect: true, expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L107: {expect: true, expr: '(^|\n)([^\n]+:107:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type has incomplete element type")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a variable")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          threadprivate variable")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have pointer or array type")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''s1\''
          does not have a mappable type in \''map\'' clause")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''s2\''
          does not have a mappable type in \''map\'' clause")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type length expression must be specified")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("referenced
          in target region does not have a mappable type")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          pointer type length expression must be specified")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
test_map-1_766:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/map-1.c'
    sources: {binary: map-1.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L101: {expect: true, expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L103: {expect: true, expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L105: {expect: true, expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L107: {expect: true, expr: '(^|\n)([^\n]+:107:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type has incomplete element type")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a variable")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          threadprivate variable")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have pointer or array type")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''s1\''
          does not have a mappable type in \''map\'' clause")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''s2\''
          does not have a mappable type in \''map\'' clause")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type length expression must be specified")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("referenced
          in target region does not have a mappable type")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          pointer type length expression must be specified")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high
          bound \\[^\\n\\r]* above array section size")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
test_map-2_148:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/map-2.c'
    sources: {binary: map-2.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
test_map-2_333:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/map-2.c'
    sources: {binary: map-2.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
test_map-2_334:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/map-2.c'
    sources: {binary: map-2.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
test_map-2_335:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/map-2.c'
    sources: {binary: map-2.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
test_map-2_39:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/map-2.c'
    sources: {binary: map-2.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
test_map-2_582:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/map-2.c'
    sources: {binary: map-2.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
test_map-2_767:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/map-2.c'
    sources: {binary: map-2.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
test_map-2_768:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/map-2.c'
    sources: {binary: map-2.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
test_map-2_769:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/map-2.c'
    sources: {binary: map-2.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          low bound in array section in")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          length in array section in")[^\n]*\n?)+'}
test_map-3_149:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/map-3.c'
    sources: {binary: map-3.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .b.\\(S::\\|\\)i. in .map. clause")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .b.\\(S::\\|\\)j. in .map. clause")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .b.\\(S::\\|\\)k. in .map. clause")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .b.\\(S::\\|\\)i. in .map. clause")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .c.\\(S::\\|\\)j. in .map. clause")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .d.\\(S::\\|\\)k. in .map. clause")[^\n]*\n?)+'}
test_map-3_336:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/map-3.c'
    sources: {binary: map-3.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .b.\\(S::\\|\\)i. in .map. clause")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .b.\\(S::\\|\\)j. in .map. clause")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .b.\\(S::\\|\\)k. in .map. clause")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .b.\\(S::\\|\\)i. in .map. clause")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .c.\\(S::\\|\\)j. in .map. clause")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .d.\\(S::\\|\\)k. in .map. clause")[^\n]*\n?)+'}
test_map-3_337:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/map-3.c'
    sources: {binary: map-3.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .b.\\(S::\\|\\)i. in .map. clause")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .b.\\(S::\\|\\)j. in .map. clause")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .b.\\(S::\\|\\)k. in .map. clause")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .b.\\(S::\\|\\)i. in .map. clause")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .c.\\(S::\\|\\)j. in .map. clause")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .d.\\(S::\\|\\)k. in .map. clause")[^\n]*\n?)+'}
test_map-3_338:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/map-3.c'
    sources: {binary: map-3.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .b.\\(S::\\|\\)i. in .map. clause")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .b.\\(S::\\|\\)j. in .map. clause")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .b.\\(S::\\|\\)k. in .map. clause")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .b.\\(S::\\|\\)i. in .map. clause")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .c.\\(S::\\|\\)j. in .map. clause")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .d.\\(S::\\|\\)k. in .map. clause")[^\n]*\n?)+'}
test_map-3_40:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/map-3.c'
    sources: {binary: map-3.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .b.\\(S::\\|\\)i. in .map. clause")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .b.\\(S::\\|\\)j. in .map. clause")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .b.\\(S::\\|\\)k. in .map. clause")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .b.\\(S::\\|\\)i. in .map. clause")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .c.\\(S::\\|\\)j. in .map. clause")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .d.\\(S::\\|\\)k. in .map. clause")[^\n]*\n?)+'}
test_map-3_583:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/map-3.c'
    sources: {binary: map-3.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .b.\\(S::\\|\\)i. in .map. clause")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .b.\\(S::\\|\\)j. in .map. clause")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .b.\\(S::\\|\\)k. in .map. clause")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .b.\\(S::\\|\\)i. in .map. clause")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .c.\\(S::\\|\\)j. in .map. clause")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .d.\\(S::\\|\\)k. in .map. clause")[^\n]*\n?)+'}
test_map-3_770:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/map-3.c'
    sources: {binary: map-3.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .b.\\(S::\\|\\)i. in .map. clause")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .b.\\(S::\\|\\)j. in .map. clause")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .b.\\(S::\\|\\)k. in .map. clause")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .b.\\(S::\\|\\)i. in .map. clause")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .c.\\(S::\\|\\)j. in .map. clause")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .d.\\(S::\\|\\)k. in .map. clause")[^\n]*\n?)+'}
test_map-3_771:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/map-3.c'
    sources: {binary: map-3.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .b.\\(S::\\|\\)i. in .map. clause")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .b.\\(S::\\|\\)j. in .map. clause")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .b.\\(S::\\|\\)k. in .map. clause")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .b.\\(S::\\|\\)i. in .map. clause")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .c.\\(S::\\|\\)j. in .map. clause")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .d.\\(S::\\|\\)k. in .map. clause")[^\n]*\n?)+'}
test_map-3_772:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/map-3.c'
    sources: {binary: map-3.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .b.\\(S::\\|\\)i. in .map. clause")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .b.\\(S::\\|\\)j. in .map. clause")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .b.\\(S::\\|\\)k. in .map. clause")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .b.\\(S::\\|\\)i. in .map. clause")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .c.\\(S::\\|\\)j. in .map. clause")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          .d.\\(S::\\|\\)k. in .map. clause")[^\n]*\n?)+'}
test_nesting-1_150:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/nesting-1.c'
    sources: {binary: nesting-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_nesting-1_339:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/nesting-1.c'
    sources: {binary: nesting-1.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_nesting-1_340:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/nesting-1.c'
    sources: {binary: nesting-1.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_nesting-1_341:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/nesting-1.c'
    sources: {binary: nesting-1.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_nesting-1_41:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/nesting-1.c'
    sources: {binary: nesting-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_nesting-1_584:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/nesting-1.c'
    sources: {binary: nesting-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_nesting-1_773:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/nesting-1.c'
    sources: {binary: nesting-1.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_nesting-1_774:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/nesting-1.c'
    sources: {binary: nesting-1.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_nesting-1_775:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/nesting-1.c'
    sources: {binary: nesting-1.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_nesting-2_151:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/nesting-2.c'
    sources: {binary: nesting-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L110: {expect: true, expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L120: {expect: true, expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L125: {expect: true, expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L130: {expect: true, expr: '(^|\n)([^\n]+:130:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          .simd. must be closely nested inside .simd. region")[^\n]*\n?)+'}
      L137: {expect: true, expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L144: {expect: true, expr: '(^|\n)([^\n]+:144:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          construct with .depend. clause must be closely nested inside a loop with
          .ordered. clause with a parameter")[^\n]*\n?)+'}
      L152: {expect: true, expr: '(^|\n)([^\n]+:152:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          construct with .depend. clause must be closely nested inside a loop with
          .ordered. clause with a parameter")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          .simd. must be closely nested inside .simd. region")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
test_nesting-2_342:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/nesting-2.c'
    sources: {binary: nesting-2.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L110: {expect: true, expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L120: {expect: true, expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L125: {expect: true, expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L130: {expect: true, expr: '(^|\n)([^\n]+:130:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          .simd. must be closely nested inside .simd. region")[^\n]*\n?)+'}
      L137: {expect: true, expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L144: {expect: true, expr: '(^|\n)([^\n]+:144:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          construct with .depend. clause must be closely nested inside a loop with
          .ordered. clause with a parameter")[^\n]*\n?)+'}
      L152: {expect: true, expr: '(^|\n)([^\n]+:152:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          construct with .depend. clause must be closely nested inside a loop with
          .ordered. clause with a parameter")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          .simd. must be closely nested inside .simd. region")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
test_nesting-2_343:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/nesting-2.c'
    sources: {binary: nesting-2.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L110: {expect: true, expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L120: {expect: true, expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L125: {expect: true, expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L130: {expect: true, expr: '(^|\n)([^\n]+:130:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          .simd. must be closely nested inside .simd. region")[^\n]*\n?)+'}
      L137: {expect: true, expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L144: {expect: true, expr: '(^|\n)([^\n]+:144:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          construct with .depend. clause must be closely nested inside a loop with
          .ordered. clause with a parameter")[^\n]*\n?)+'}
      L152: {expect: true, expr: '(^|\n)([^\n]+:152:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          construct with .depend. clause must be closely nested inside a loop with
          .ordered. clause with a parameter")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          .simd. must be closely nested inside .simd. region")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
test_nesting-2_344:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/nesting-2.c'
    sources: {binary: nesting-2.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L110: {expect: true, expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L120: {expect: true, expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L125: {expect: true, expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L130: {expect: true, expr: '(^|\n)([^\n]+:130:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          .simd. must be closely nested inside .simd. region")[^\n]*\n?)+'}
      L137: {expect: true, expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L144: {expect: true, expr: '(^|\n)([^\n]+:144:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          construct with .depend. clause must be closely nested inside a loop with
          .ordered. clause with a parameter")[^\n]*\n?)+'}
      L152: {expect: true, expr: '(^|\n)([^\n]+:152:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          construct with .depend. clause must be closely nested inside a loop with
          .ordered. clause with a parameter")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          .simd. must be closely nested inside .simd. region")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
test_nesting-2_42:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/nesting-2.c'
    sources: {binary: nesting-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L110: {expect: true, expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L120: {expect: true, expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L125: {expect: true, expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L130: {expect: true, expr: '(^|\n)([^\n]+:130:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          .simd. must be closely nested inside .simd. region")[^\n]*\n?)+'}
      L137: {expect: true, expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L144: {expect: true, expr: '(^|\n)([^\n]+:144:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          construct with .depend. clause must be closely nested inside a loop with
          .ordered. clause with a parameter")[^\n]*\n?)+'}
      L152: {expect: true, expr: '(^|\n)([^\n]+:152:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          construct with .depend. clause must be closely nested inside a loop with
          .ordered. clause with a parameter")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          .simd. must be closely nested inside .simd. region")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
test_nesting-2_585:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/nesting-2.c'
    sources: {binary: nesting-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L110: {expect: true, expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L120: {expect: true, expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L125: {expect: true, expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L130: {expect: true, expr: '(^|\n)([^\n]+:130:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          .simd. must be closely nested inside .simd. region")[^\n]*\n?)+'}
      L137: {expect: true, expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L144: {expect: true, expr: '(^|\n)([^\n]+:144:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          construct with .depend. clause must be closely nested inside a loop with
          .ordered. clause with a parameter")[^\n]*\n?)+'}
      L152: {expect: true, expr: '(^|\n)([^\n]+:152:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          construct with .depend. clause must be closely nested inside a loop with
          .ordered. clause with a parameter")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          .simd. must be closely nested inside .simd. region")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
test_nesting-2_776:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/nesting-2.c'
    sources: {binary: nesting-2.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L110: {expect: true, expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L120: {expect: true, expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L125: {expect: true, expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L130: {expect: true, expr: '(^|\n)([^\n]+:130:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          .simd. must be closely nested inside .simd. region")[^\n]*\n?)+'}
      L137: {expect: true, expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L144: {expect: true, expr: '(^|\n)([^\n]+:144:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          construct with .depend. clause must be closely nested inside a loop with
          .ordered. clause with a parameter")[^\n]*\n?)+'}
      L152: {expect: true, expr: '(^|\n)([^\n]+:152:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          construct with .depend. clause must be closely nested inside a loop with
          .ordered. clause with a parameter")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          .simd. must be closely nested inside .simd. region")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
test_nesting-2_777:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/nesting-2.c'
    sources: {binary: nesting-2.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L110: {expect: true, expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L120: {expect: true, expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L125: {expect: true, expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L130: {expect: true, expr: '(^|\n)([^\n]+:130:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          .simd. must be closely nested inside .simd. region")[^\n]*\n?)+'}
      L137: {expect: true, expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L144: {expect: true, expr: '(^|\n)([^\n]+:144:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          construct with .depend. clause must be closely nested inside a loop with
          .ordered. clause with a parameter")[^\n]*\n?)+'}
      L152: {expect: true, expr: '(^|\n)([^\n]+:152:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          construct with .depend. clause must be closely nested inside a loop with
          .ordered. clause with a parameter")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          .simd. must be closely nested inside .simd. region")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
test_nesting-2_778:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/nesting-2.c'
    sources: {binary: nesting-2.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L110: {expect: true, expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L120: {expect: true, expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L125: {expect: true, expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L130: {expect: true, expr: '(^|\n)([^\n]+:130:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          .simd. must be closely nested inside .simd. region")[^\n]*\n?)+'}
      L137: {expect: true, expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L144: {expect: true, expr: '(^|\n)([^\n]+:144:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          construct with .depend. clause must be closely nested inside a loop with
          .ordered. clause with a parameter")[^\n]*\n?)+'}
      L152: {expect: true, expr: '(^|\n)([^\n]+:152:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          construct with .depend. clause must be closely nested inside a loop with
          .ordered. clause with a parameter")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          .simd. must be closely nested inside .simd. region")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          region must be closely nested inside a loop region with an .ordered. clause")[^\n]*\n?)+'}
test_nesting-warn-1_152:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/nesting-warn-1.c'
    sources: {binary: nesting-warn-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*(".target
          data. construct inside of .target. region")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*(".target
          update. construct inside of .target. region")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*(".target.
          construct inside of .target. region")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*(".target
          data. construct inside of .target. region")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*(".target
          update. construct inside of .target. region")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*(".target.
          construct inside of .target. region")[^\n]*\n?)+'}
test_nesting-warn-1_345:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/nesting-warn-1.c'
    sources: {binary: nesting-warn-1.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*(".target
          data. construct inside of .target. region")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*(".target
          update. construct inside of .target. region")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*(".target.
          construct inside of .target. region")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*(".target
          data. construct inside of .target. region")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*(".target
          update. construct inside of .target. region")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*(".target.
          construct inside of .target. region")[^\n]*\n?)+'}
test_nesting-warn-1_346:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/nesting-warn-1.c'
    sources: {binary: nesting-warn-1.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*(".target
          data. construct inside of .target. region")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*(".target
          update. construct inside of .target. region")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*(".target.
          construct inside of .target. region")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*(".target
          data. construct inside of .target. region")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*(".target
          update. construct inside of .target. region")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*(".target.
          construct inside of .target. region")[^\n]*\n?)+'}
test_nesting-warn-1_347:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/nesting-warn-1.c'
    sources: {binary: nesting-warn-1.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*(".target
          data. construct inside of .target. region")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*(".target
          update. construct inside of .target. region")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*(".target.
          construct inside of .target. region")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*(".target
          data. construct inside of .target. region")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*(".target
          update. construct inside of .target. region")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*(".target.
          construct inside of .target. region")[^\n]*\n?)+'}
test_nesting-warn-1_43:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/nesting-warn-1.c'
    sources: {binary: nesting-warn-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*(".target
          data. construct inside of .target. region")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*(".target
          update. construct inside of .target. region")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*(".target.
          construct inside of .target. region")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*(".target
          data. construct inside of .target. region")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*(".target
          update. construct inside of .target. region")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*(".target.
          construct inside of .target. region")[^\n]*\n?)+'}
test_nesting-warn-1_586:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/nesting-warn-1.c'
    sources: {binary: nesting-warn-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*(".target
          data. construct inside of .target. region")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*(".target
          update. construct inside of .target. region")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*(".target.
          construct inside of .target. region")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*(".target
          data. construct inside of .target. region")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*(".target
          update. construct inside of .target. region")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*(".target.
          construct inside of .target. region")[^\n]*\n?)+'}
test_nesting-warn-1_779:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/nesting-warn-1.c'
    sources: {binary: nesting-warn-1.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*(".target
          data. construct inside of .target. region")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*(".target
          update. construct inside of .target. region")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*(".target.
          construct inside of .target. region")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*(".target
          data. construct inside of .target. region")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*(".target
          update. construct inside of .target. region")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*(".target.
          construct inside of .target. region")[^\n]*\n?)+'}
test_nesting-warn-1_780:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/nesting-warn-1.c'
    sources: {binary: nesting-warn-1.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*(".target
          data. construct inside of .target. region")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*(".target
          update. construct inside of .target. region")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*(".target.
          construct inside of .target. region")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*(".target
          data. construct inside of .target. region")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*(".target
          update. construct inside of .target. region")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*(".target.
          construct inside of .target. region")[^\n]*\n?)+'}
test_nesting-warn-1_781:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/nesting-warn-1.c'
    sources: {binary: nesting-warn-1.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*(".target
          data. construct inside of .target. region")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*(".target
          update. construct inside of .target. region")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*(".target.
          construct inside of .target. region")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*(".target
          data. construct inside of .target. region")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*(".target
          update. construct inside of .target. region")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*(".target.
          construct inside of .target. region")[^\n]*\n?)+'}
test_ordered-1_153:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/ordered-1.c'
    sources: {binary: ./ordered-1.exe, cflags: -O2 -fopenmp-simd}
  group: GRPSERIAL
  run: {cwd: .}
test_ordered-1_348:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/ordered-1.c'
    sources: {binary: ./ordered-1.exe, cflags: -std=gnu++98 -O2 -fopenmp-simd}
  group: GRPSERIAL
  run: {cwd: .}
test_ordered-1_349:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/ordered-1.c'
    sources: {binary: ./ordered-1.exe, cflags: -std=gnu++11 -O2 -fopenmp-simd}
  group: GRPSERIAL
  run: {cwd: .}
test_ordered-1_350:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/ordered-1.c'
    sources: {binary: ./ordered-1.exe, cflags: -std=gnu++14 -O2 -fopenmp-simd}
  group: GRPSERIAL
  run: {cwd: .}
test_ordered-1_44:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/ordered-1.c'
    sources: {binary: ./ordered-1.exe, cflags: -O2 -fopenmp-simd}
  group: GRPSERIAL
  run: {cwd: .}
test_ordered-1_587:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/ordered-1.c'
    sources: {binary: ./ordered-1.exe, cflags: -O2 -fopenmp-simd}
  group: GRPSERIAL
  run: {cwd: .}
test_ordered-1_782:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/ordered-1.c'
    sources: {binary: ./ordered-1.exe, cflags: -std=gnu++98 -O2 -fopenmp-simd}
  group: GRPSERIAL
  run: {cwd: .}
test_ordered-1_783:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/ordered-1.c'
    sources: {binary: ./ordered-1.exe, cflags: -std=gnu++11 -O2 -fopenmp-simd}
  group: GRPSERIAL
  run: {cwd: .}
test_ordered-1_784:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/ordered-1.c'
    sources: {binary: ./ordered-1.exe, cflags: -std=gnu++14 -O2 -fopenmp-simd}
  group: GRPSERIAL
  run: {cwd: .}
test_ordered-2_154:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/ordered-2.c'
    sources: {binary: ./ordered-2.exe, cflags: -O0 -fopenmp-simd}
  group: GRPSERIAL
  run: {cwd: .}
test_ordered-2_351:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/ordered-2.c'
    sources: {binary: ./ordered-2.exe, cflags: -std=gnu++98 -O0 -fopenmp-simd}
  group: GRPSERIAL
  run: {cwd: .}
test_ordered-2_352:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/ordered-2.c'
    sources: {binary: ./ordered-2.exe, cflags: -std=gnu++11 -O0 -fopenmp-simd}
  group: GRPSERIAL
  run: {cwd: .}
test_ordered-2_353:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/ordered-2.c'
    sources: {binary: ./ordered-2.exe, cflags: -std=gnu++14 -O0 -fopenmp-simd}
  group: GRPSERIAL
  run: {cwd: .}
test_ordered-2_45:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/ordered-2.c'
    sources: {binary: ./ordered-2.exe, cflags: -O0 -fopenmp-simd}
  group: GRPSERIAL
  run: {cwd: .}
test_ordered-2_588:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/ordered-2.c'
    sources: {binary: ./ordered-2.exe, cflags: -O0 -fopenmp-simd}
  group: GRPSERIAL
  run: {cwd: .}
test_ordered-2_785:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/ordered-2.c'
    sources: {binary: ./ordered-2.exe, cflags: -std=gnu++98 -O0 -fopenmp-simd}
  group: GRPSERIAL
  run: {cwd: .}
test_ordered-2_786:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/ordered-2.c'
    sources: {binary: ./ordered-2.exe, cflags: -std=gnu++11 -O0 -fopenmp-simd}
  group: GRPSERIAL
  run: {cwd: .}
test_ordered-2_787:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/ordered-2.c'
    sources: {binary: ./ordered-2.exe, cflags: -std=gnu++14 -O0 -fopenmp-simd}
  group: GRPSERIAL
  run: {cwd: .}
test_ordered-3_155:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/ordered-3.c'
    sources: {binary: ordered-3.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L101: {expect: true, expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .simd. clauses")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .threads. clauses")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .simd. clauses")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .threads. clauses")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .simd. clauses")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          clause with parameter may not be specified on .#pragma omp for simd. construct")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          clause with parameter may not be specified on .#pragma omp parallel for
          simd. construct")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .threads. clauses")[^\n]*\n?)+'}
test_ordered-3_354:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/ordered-3.c'
    sources: {binary: ordered-3.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L101: {expect: true, expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .simd. clauses")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .threads. clauses")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .simd. clauses")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .threads. clauses")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .simd. clauses")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          clause with parameter may not be specified on .#pragma omp for simd. construct")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          clause with parameter may not be specified on .#pragma omp parallel for
          simd. construct")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .threads. clauses")[^\n]*\n?)+'}
test_ordered-3_355:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/ordered-3.c'
    sources: {binary: ordered-3.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L101: {expect: true, expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .simd. clauses")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .threads. clauses")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .simd. clauses")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .threads. clauses")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .simd. clauses")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          clause with parameter may not be specified on .#pragma omp for simd. construct")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          clause with parameter may not be specified on .#pragma omp parallel for
          simd. construct")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .threads. clauses")[^\n]*\n?)+'}
test_ordered-3_356:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/ordered-3.c'
    sources: {binary: ordered-3.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L101: {expect: true, expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .simd. clauses")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .threads. clauses")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .simd. clauses")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .threads. clauses")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .simd. clauses")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          clause with parameter may not be specified on .#pragma omp for simd. construct")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          clause with parameter may not be specified on .#pragma omp parallel for
          simd. construct")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .threads. clauses")[^\n]*\n?)+'}
test_ordered-3_46:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/ordered-3.c'
    sources: {binary: ordered-3.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L101: {expect: true, expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .simd. clauses")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .threads. clauses")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .simd. clauses")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .threads. clauses")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .simd. clauses")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          clause with parameter may not be specified on .#pragma omp for simd. construct")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          clause with parameter may not be specified on .#pragma omp parallel for
          simd. construct")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .threads. clauses")[^\n]*\n?)+'}
test_ordered-3_589:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/ordered-3.c'
    sources: {binary: ordered-3.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L101: {expect: true, expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .simd. clauses")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .threads. clauses")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .simd. clauses")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .threads. clauses")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .simd. clauses")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          clause with parameter may not be specified on .#pragma omp for simd. construct")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          clause with parameter may not be specified on .#pragma omp parallel for
          simd. construct")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .threads. clauses")[^\n]*\n?)+'}
test_ordered-3_788:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/ordered-3.c'
    sources: {binary: ordered-3.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L101: {expect: true, expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .simd. clauses")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .threads. clauses")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .simd. clauses")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .threads. clauses")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .simd. clauses")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          clause with parameter may not be specified on .#pragma omp for simd. construct")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          clause with parameter may not be specified on .#pragma omp parallel for
          simd. construct")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .threads. clauses")[^\n]*\n?)+'}
test_ordered-3_789:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/ordered-3.c'
    sources: {binary: ordered-3.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L101: {expect: true, expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .simd. clauses")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .threads. clauses")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .simd. clauses")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .threads. clauses")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .simd. clauses")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          clause with parameter may not be specified on .#pragma omp for simd. construct")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          clause with parameter may not be specified on .#pragma omp parallel for
          simd. construct")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .threads. clauses")[^\n]*\n?)+'}
test_ordered-3_790:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/ordered-3.c'
    sources: {binary: ordered-3.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L101: {expect: true, expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .simd. clauses")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .threads. clauses")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .simd. clauses")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .threads. clauses")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .simd. clauses")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          clause with parameter may not be specified on .#pragma omp for simd. construct")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".ordered.
          clause with parameter may not be specified on .#pragma omp parallel for
          simd. construct")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must be closely nested inside a loop with .ordered. clause with a parameter")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many .threads. clauses")[^\n]*\n?)+'}
test_ordered-4_156:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/ordered-4.c'
    sources: {binary: ordered-4.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_ordered-4_357:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/ordered-4.c'
    sources: {binary: ordered-4.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_ordered-4_358:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/ordered-4.c'
    sources: {binary: ordered-4.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_ordered-4_359:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/ordered-4.c'
    sources: {binary: ordered-4.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_ordered-4_47:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/ordered-4.c'
    sources: {binary: ordered-4.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_ordered-4_590:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/ordered-4.c'
    sources: {binary: ordered-4.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_ordered-4_791:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/ordered-4.c'
    sources: {binary: ordered-4.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_ordered-4_792:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/ordered-4.c'
    sources: {binary: ordered-4.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_ordered-4_793:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/ordered-4.c'
    sources: {binary: ordered-4.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr51360_157:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr51360.c'
    sources: {binary: pr51360.s, cflags: "-Wunused -W -fopenmp\n -S"}
  group: GRPSERIAL
test_pr51360_360:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr51360.c'
    sources: {binary: pr51360.s, cflags: "-std=gnu++98 -Wunused -W -fopenmp\n -S"}
  group: GRPSERIAL
test_pr51360_361:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr51360.c'
    sources: {binary: pr51360.s, cflags: "-std=gnu++11 -Wunused -W -fopenmp\n -S"}
  group: GRPSERIAL
test_pr51360_362:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr51360.c'
    sources: {binary: pr51360.s, cflags: "-std=gnu++14 -Wunused -W -fopenmp\n -S"}
  group: GRPSERIAL
test_pr51360_48:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr51360.c'
    sources: {binary: pr51360.s, cflags: "-Wunused -W -fopenmp\n -S"}
  group: GRPSERIAL
test_pr51360_591:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr51360.c'
    sources: {binary: pr51360.s, cflags: "-Wunused -W -fopenmp\n -S"}
  group: GRPSERIAL
test_pr51360_794:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr51360.c'
    sources: {binary: pr51360.s, cflags: "-std=gnu++98 -Wunused -W -fopenmp\n -S"}
  group: GRPSERIAL
test_pr51360_795:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr51360.c'
    sources: {binary: pr51360.s, cflags: "-std=gnu++11 -Wunused -W -fopenmp\n -S"}
  group: GRPSERIAL
test_pr51360_796:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr51360.c'
    sources: {binary: pr51360.s, cflags: "-std=gnu++14 -Wunused -W -fopenmp\n -S"}
  group: GRPSERIAL
test_pr53580_158:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr53580.c'
    sources: {binary: pr53580.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("work-sharing
          region may not be closely nested inside of work-sharing")[^\n]*\n?)+'}
test_pr53580_363:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr53580.c'
    sources: {binary: pr53580.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("work-sharing
          region may not be closely nested inside of work-sharing")[^\n]*\n?)+'}
test_pr53580_364:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr53580.c'
    sources: {binary: pr53580.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("work-sharing
          region may not be closely nested inside of work-sharing")[^\n]*\n?)+'}
test_pr53580_365:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr53580.c'
    sources: {binary: pr53580.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("work-sharing
          region may not be closely nested inside of work-sharing")[^\n]*\n?)+'}
test_pr53580_49:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr53580.c'
    sources: {binary: pr53580.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("work-sharing
          region may not be closely nested inside of work-sharing")[^\n]*\n?)+'}
test_pr53580_592:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr53580.c'
    sources: {binary: pr53580.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("work-sharing
          region may not be closely nested inside of work-sharing")[^\n]*\n?)+'}
test_pr53580_797:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr53580.c'
    sources: {binary: pr53580.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("work-sharing
          region may not be closely nested inside of work-sharing")[^\n]*\n?)+'}
test_pr53580_798:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr53580.c'
    sources: {binary: pr53580.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("work-sharing
          region may not be closely nested inside of work-sharing")[^\n]*\n?)+'}
test_pr53580_799:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr53580.c'
    sources: {binary: pr53580.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("work-sharing
          region may not be closely nested inside of work-sharing")[^\n]*\n?)+'}
test_pr54017_159:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr54017.c'
    sources: {binary: pr54017.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr54017_366:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr54017.c'
    sources: {binary: pr54017.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr54017_367:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr54017.c'
    sources: {binary: pr54017.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr54017_368:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr54017.c'
    sources: {binary: pr54017.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr54017_50:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr54017.c'
    sources: {binary: pr54017.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr54017_593:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr54017.c'
    sources: {binary: pr54017.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr54017_800:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr54017.c'
    sources: {binary: pr54017.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr54017_801:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr54017.c'
    sources: {binary: pr54017.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr54017_802:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr54017.c'
    sources: {binary: pr54017.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr56883_160:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr56883.c'
    sources: {binary: pr56883.s, cflags: "-O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr56883_369:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr56883.c'
    sources: {binary: pr56883.s, cflags: "-std=gnu++98 -O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr56883_370:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr56883.c'
    sources: {binary: pr56883.s, cflags: "-std=gnu++11 -O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr56883_371:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr56883.c'
    sources: {binary: pr56883.s, cflags: "-std=gnu++14 -O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr56883_51:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr56883.c'
    sources: {binary: pr56883.s, cflags: "-O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr56883_594:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr56883.c'
    sources: {binary: pr56883.s, cflags: "-O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr56883_803:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr56883.c'
    sources: {binary: pr56883.s, cflags: "-std=gnu++98 -O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr56883_804:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr56883.c'
    sources: {binary: pr56883.s, cflags: "-std=gnu++11 -O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr56883_805:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr56883.c'
    sources: {binary: pr56883.s, cflags: "-std=gnu++14 -O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr57580_161:
  build:
    cwd: /home/adamj/mnt/projects/pcvs/compilers/gcc/c-c++-common/gomp
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr57580.c'
    sources: {binary: pr57580.s, cflags: "-fopenmp -save-temps -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
  run: {cwd: /home/adamj/mnt/projects/pcvs/compilers/gcc/c-c++-common/gomp}
test_pr57580_372:
  build:
    cwd: /home/adamj/mnt/projects/pcvs/compilers/gcc/c-c++-common/gomp
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr57580.c'
    sources: {binary: pr57580.s, cflags: "-std=gnu++98 -fopenmp -save-temps -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
  run: {cwd: /home/adamj/mnt/projects/pcvs/compilers/gcc/c-c++-common/gomp}
test_pr57580_373:
  build:
    cwd: /home/adamj/mnt/projects/pcvs/compilers/gcc/c-c++-common/gomp
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr57580.c'
    sources: {binary: pr57580.s, cflags: "-std=gnu++11 -fopenmp -save-temps -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
  run: {cwd: /home/adamj/mnt/projects/pcvs/compilers/gcc/c-c++-common/gomp}
test_pr57580_374:
  build:
    cwd: /home/adamj/mnt/projects/pcvs/compilers/gcc/c-c++-common/gomp
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr57580.c'
    sources: {binary: pr57580.s, cflags: "-std=gnu++14 -fopenmp -save-temps -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
  run: {cwd: /home/adamj/mnt/projects/pcvs/compilers/gcc/c-c++-common/gomp}
test_pr57580_52:
  build:
    cwd: /home/adamj/mnt/projects/pcvs/compilers/gcc/c-c++-common/gomp
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr57580.c'
    sources: {binary: pr57580.s, cflags: "-fopenmp -save-temps -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
  run: {cwd: /home/adamj/mnt/projects/pcvs/compilers/gcc/c-c++-common/gomp}
test_pr57580_595:
  build:
    cwd: /home/adamj/mnt/projects/pcvs/compilers/gcc/c-c++-common/gomp
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr57580.c'
    sources: {binary: pr57580.s, cflags: "-fopenmp -save-temps -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
  run: {cwd: /home/adamj/mnt/projects/pcvs/compilers/gcc/c-c++-common/gomp}
test_pr57580_806:
  build:
    cwd: /home/adamj/mnt/projects/pcvs/compilers/gcc/c-c++-common/gomp
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr57580.c'
    sources: {binary: pr57580.s, cflags: "-std=gnu++98 -fopenmp -save-temps -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
  run: {cwd: /home/adamj/mnt/projects/pcvs/compilers/gcc/c-c++-common/gomp}
test_pr57580_807:
  build:
    cwd: /home/adamj/mnt/projects/pcvs/compilers/gcc/c-c++-common/gomp
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr57580.c'
    sources: {binary: pr57580.s, cflags: "-std=gnu++11 -fopenmp -save-temps -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
  run: {cwd: /home/adamj/mnt/projects/pcvs/compilers/gcc/c-c++-common/gomp}
test_pr57580_808:
  build:
    cwd: /home/adamj/mnt/projects/pcvs/compilers/gcc/c-c++-common/gomp
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr57580.c'
    sources: {binary: pr57580.s, cflags: "-std=gnu++14 -fopenmp -save-temps -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
  run: {cwd: /home/adamj/mnt/projects/pcvs/compilers/gcc/c-c++-common/gomp}
test_pr57824_162:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr57824.c'
    sources: {binary: pr57824.s, cflags: "-std=gnu99 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr57824_375:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr57824.c'
    sources: {binary: pr57824.s, cflags: "-std=c++11 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr57824_53:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr57824.c'
    sources: {binary: pr57824.s, cflags: "-std=gnu99 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr57824_596:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr57824.c'
    sources: {binary: pr57824.s, cflags: "-std=gnu99 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr57824_809:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr57824.c'
    sources: {binary: pr57824.s, cflags: "-std=c++11 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr58257_163:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58257.c'
    sources: {binary: pr58257.s, cflags: "-O2 -fopenmp -Wall\n -S"}
  group: GRPSERIAL
test_pr58257_376:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58257.c'
    sources: {binary: pr58257.s, cflags: "-std=gnu++98 -O2 -fopenmp -Wall\n -S"}
  group: GRPSERIAL
test_pr58257_377:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58257.c'
    sources: {binary: pr58257.s, cflags: "-std=gnu++11 -O2 -fopenmp -Wall\n -S"}
  group: GRPSERIAL
test_pr58257_378:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58257.c'
    sources: {binary: pr58257.s, cflags: "-std=gnu++14 -O2 -fopenmp -Wall\n -S"}
  group: GRPSERIAL
test_pr58257_54:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58257.c'
    sources: {binary: pr58257.s, cflags: "-O2 -fopenmp -Wall\n -S"}
  group: GRPSERIAL
test_pr58257_597:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58257.c'
    sources: {binary: pr58257.s, cflags: "-O2 -fopenmp -Wall\n -S"}
  group: GRPSERIAL
test_pr58257_810:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58257.c'
    sources: {binary: pr58257.s, cflags: "-std=gnu++98 -O2 -fopenmp -Wall\n -S"}
  group: GRPSERIAL
test_pr58257_811:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58257.c'
    sources: {binary: pr58257.s, cflags: "-std=gnu++11 -O2 -fopenmp -Wall\n -S"}
  group: GRPSERIAL
test_pr58257_812:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58257.c'
    sources: {binary: pr58257.s, cflags: "-std=gnu++14 -O2 -fopenmp -Wall\n -S"}
  group: GRPSERIAL
test_pr58472_164:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58472.c'
    sources: {binary: pr58472.s, cflags: "-O2 -Wall -fopenmp\n -S"}
  group: GRPSERIAL
test_pr58472_379:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58472.c'
    sources: {binary: pr58472.s, cflags: "-std=gnu++98 -O2 -Wall -fopenmp\n -S"}
  group: GRPSERIAL
test_pr58472_380:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58472.c'
    sources: {binary: pr58472.s, cflags: "-std=gnu++11 -O2 -Wall -fopenmp\n -S"}
  group: GRPSERIAL
test_pr58472_381:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58472.c'
    sources: {binary: pr58472.s, cflags: "-std=gnu++14 -O2 -Wall -fopenmp\n -S"}
  group: GRPSERIAL
test_pr58472_55:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58472.c'
    sources: {binary: pr58472.s, cflags: "-O2 -Wall -fopenmp\n -S"}
  group: GRPSERIAL
test_pr58472_598:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58472.c'
    sources: {binary: pr58472.s, cflags: "-O2 -Wall -fopenmp\n -S"}
  group: GRPSERIAL
test_pr58472_813:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58472.c'
    sources: {binary: pr58472.s, cflags: "-std=gnu++98 -O2 -Wall -fopenmp\n -S"}
  group: GRPSERIAL
test_pr58472_814:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58472.c'
    sources: {binary: pr58472.s, cflags: "-std=gnu++11 -O2 -Wall -fopenmp\n -S"}
  group: GRPSERIAL
test_pr58472_815:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58472.c'
    sources: {binary: pr58472.s, cflags: "-std=gnu++14 -O2 -Wall -fopenmp\n -S"}
  group: GRPSERIAL
test_pr58551_165:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58551.c'
    sources: {binary: pr58551.s, cflags: "-O0 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr58551_382:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58551.c'
    sources: {binary: pr58551.s, cflags: "-std=gnu++98 -O0 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr58551_383:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58551.c'
    sources: {binary: pr58551.s, cflags: "-std=gnu++11 -O0 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr58551_384:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58551.c'
    sources: {binary: pr58551.s, cflags: "-std=gnu++14 -O0 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr58551_56:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58551.c'
    sources: {binary: pr58551.s, cflags: "-O0 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr58551_599:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58551.c'
    sources: {binary: pr58551.s, cflags: "-O0 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr58551_816:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58551.c'
    sources: {binary: pr58551.s, cflags: "-std=gnu++98 -O0 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr58551_817:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58551.c'
    sources: {binary: pr58551.s, cflags: "-std=gnu++11 -O0 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr58551_818:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58551.c'
    sources: {binary: pr58551.s, cflags: "-std=gnu++14 -O0 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr58703_166:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58703.c'
    sources: {binary: pr58703.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function
          or array type")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function
          or array type")[^\n]*\n?)+'}
test_pr58703_385:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58703.c'
    sources: {binary: pr58703.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function
          or array type")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function
          or array type")[^\n]*\n?)+'}
test_pr58703_386:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58703.c'
    sources: {binary: pr58703.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function
          or array type")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function
          or array type")[^\n]*\n?)+'}
test_pr58703_387:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58703.c'
    sources: {binary: pr58703.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function
          or array type")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function
          or array type")[^\n]*\n?)+'}
test_pr58703_57:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58703.c'
    sources: {binary: pr58703.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function
          or array type")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function
          or array type")[^\n]*\n?)+'}
test_pr58703_600:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58703.c'
    sources: {binary: pr58703.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function
          or array type")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function
          or array type")[^\n]*\n?)+'}
test_pr58703_819:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58703.c'
    sources: {binary: pr58703.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function
          or array type")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function
          or array type")[^\n]*\n?)+'}
test_pr58703_820:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58703.c'
    sources: {binary: pr58703.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function
          or array type")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function
          or array type")[^\n]*\n?)+'}
test_pr58703_821:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58703.c'
    sources: {binary: pr58703.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function
          or array type")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function
          or array type")[^\n]*\n?)+'}
test_pr58809_167:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58809.c'
    sources: {binary: pr58809.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
test_pr58809_388:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58809.c'
    sources: {binary: pr58809.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
test_pr58809_389:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58809.c'
    sources: {binary: pr58809.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
test_pr58809_390:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58809.c'
    sources: {binary: pr58809.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
test_pr58809_58:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58809.c'
    sources: {binary: pr58809.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
test_pr58809_601:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58809.c'
    sources: {binary: pr58809.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
test_pr58809_822:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58809.c'
    sources: {binary: pr58809.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
test_pr58809_823:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58809.c'
    sources: {binary: pr58809.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
test_pr58809_824:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr58809.c'
    sources: {binary: pr58809.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for|user defined reduction not found for")[^\n]*\n?)+'}
test_pr59073_168:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59073.c'
    sources: {binary: pr59073.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          increment expression")[^\n]*\n?)+'}
test_pr59073_391:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59073.c'
    sources: {binary: pr59073.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          increment expression")[^\n]*\n?)+'}
test_pr59073_392:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59073.c'
    sources: {binary: pr59073.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          increment expression")[^\n]*\n?)+'}
test_pr59073_393:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59073.c'
    sources: {binary: pr59073.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          increment expression")[^\n]*\n?)+'}
test_pr59073_59:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59073.c'
    sources: {binary: pr59073.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          increment expression")[^\n]*\n?)+'}
test_pr59073_602:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59073.c'
    sources: {binary: pr59073.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          increment expression")[^\n]*\n?)+'}
test_pr59073_825:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59073.c'
    sources: {binary: pr59073.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          increment expression")[^\n]*\n?)+'}
test_pr59073_826:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59073.c'
    sources: {binary: pr59073.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          increment expression")[^\n]*\n?)+'}
test_pr59073_827:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59073.c'
    sources: {binary: pr59073.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          increment expression")[^\n]*\n?)+'}
test_pr59152_169:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59152.c'
    sources: {binary: pr59152.s, cflags: "-fopenmp -fipa-pure-const\n -S"}
  group: GRPSERIAL
test_pr59152_394:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59152.c'
    sources: {binary: pr59152.s, cflags: "-std=gnu++98 -fopenmp -fipa-pure-const\n
        -S"}
  group: GRPSERIAL
test_pr59152_395:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59152.c'
    sources: {binary: pr59152.s, cflags: "-std=gnu++11 -fopenmp -fipa-pure-const\n
        -S"}
  group: GRPSERIAL
test_pr59152_396:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59152.c'
    sources: {binary: pr59152.s, cflags: "-std=gnu++14 -fopenmp -fipa-pure-const\n
        -S"}
  group: GRPSERIAL
test_pr59152_60:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59152.c'
    sources: {binary: pr59152.s, cflags: "-fopenmp -fipa-pure-const\n -S"}
  group: GRPSERIAL
test_pr59152_603:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59152.c'
    sources: {binary: pr59152.s, cflags: "-fopenmp -fipa-pure-const\n -S"}
  group: GRPSERIAL
test_pr59152_828:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59152.c'
    sources: {binary: pr59152.s, cflags: "-std=gnu++98 -fopenmp -fipa-pure-const\n
        -S"}
  group: GRPSERIAL
test_pr59152_829:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59152.c'
    sources: {binary: pr59152.s, cflags: "-std=gnu++11 -fopenmp -fipa-pure-const\n
        -S"}
  group: GRPSERIAL
test_pr59152_830:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59152.c'
    sources: {binary: pr59152.s, cflags: "-std=gnu++14 -fopenmp -fipa-pure-const\n
        -S"}
  group: GRPSERIAL
test_pr59467_170:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59467.c'
    sources: {binary: pr59467.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not threadprivate or private in outer context")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not threadprivate or private in outer context")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not threadprivate or private in outer context")[^\n]*\n?)+'}
test_pr59467_397:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59467.c'
    sources: {binary: pr59467.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not threadprivate or private in outer context")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not threadprivate or private in outer context")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not threadprivate or private in outer context")[^\n]*\n?)+'}
test_pr59467_398:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59467.c'
    sources: {binary: pr59467.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not threadprivate or private in outer context")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not threadprivate or private in outer context")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not threadprivate or private in outer context")[^\n]*\n?)+'}
test_pr59467_399:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59467.c'
    sources: {binary: pr59467.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not threadprivate or private in outer context")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not threadprivate or private in outer context")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not threadprivate or private in outer context")[^\n]*\n?)+'}
test_pr59467_604:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59467.c'
    sources: {binary: pr59467.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not threadprivate or private in outer context")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not threadprivate or private in outer context")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not threadprivate or private in outer context")[^\n]*\n?)+'}
test_pr59467_61:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59467.c'
    sources: {binary: pr59467.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not threadprivate or private in outer context")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not threadprivate or private in outer context")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not threadprivate or private in outer context")[^\n]*\n?)+'}
test_pr59467_831:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59467.c'
    sources: {binary: pr59467.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not threadprivate or private in outer context")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not threadprivate or private in outer context")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not threadprivate or private in outer context")[^\n]*\n?)+'}
test_pr59467_832:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59467.c'
    sources: {binary: pr59467.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not threadprivate or private in outer context")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not threadprivate or private in outer context")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not threadprivate or private in outer context")[^\n]*\n?)+'}
test_pr59467_833:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59467.c'
    sources: {binary: pr59467.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not threadprivate or private in outer context")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not threadprivate or private in outer context")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not threadprivate or private in outer context")[^\n]*\n?)+'}
test_pr59917-1_171:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59917-1.c'
    sources: {binary: pr59917-1.s, cflags: "-O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr59917-1_400:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59917-1.c'
    sources: {binary: pr59917-1.s, cflags: "-std=gnu++98 -O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr59917-1_401:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59917-1.c'
    sources: {binary: pr59917-1.s, cflags: "-std=gnu++11 -O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr59917-1_402:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59917-1.c'
    sources: {binary: pr59917-1.s, cflags: "-std=gnu++14 -O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr59917-1_605:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59917-1.c'
    sources: {binary: pr59917-1.s, cflags: "-O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr59917-1_62:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59917-1.c'
    sources: {binary: pr59917-1.s, cflags: "-O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr59917-1_834:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59917-1.c'
    sources: {binary: pr59917-1.s, cflags: "-std=gnu++98 -O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr59917-1_835:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59917-1.c'
    sources: {binary: pr59917-1.s, cflags: "-std=gnu++11 -O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr59917-1_836:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59917-1.c'
    sources: {binary: pr59917-1.s, cflags: "-std=gnu++14 -O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr59917-2_172:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59917-2.c'
    sources: {binary: pr59917-2.s, cflags: "-O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr59917-2_403:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59917-2.c'
    sources: {binary: pr59917-2.s, cflags: "-std=gnu++98 -O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr59917-2_404:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59917-2.c'
    sources: {binary: pr59917-2.s, cflags: "-std=gnu++11 -O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr59917-2_405:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59917-2.c'
    sources: {binary: pr59917-2.s, cflags: "-std=gnu++14 -O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr59917-2_606:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59917-2.c'
    sources: {binary: pr59917-2.s, cflags: "-O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr59917-2_63:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59917-2.c'
    sources: {binary: pr59917-2.s, cflags: "-O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr59917-2_837:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59917-2.c'
    sources: {binary: pr59917-2.s, cflags: "-std=gnu++98 -O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr59917-2_838:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59917-2.c'
    sources: {binary: pr59917-2.s, cflags: "-std=gnu++11 -O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr59917-2_839:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr59917-2.c'
    sources: {binary: pr59917-2.s, cflags: "-std=gnu++14 -O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr60823-1_173:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr60823-1.c'
    sources: {binary: pr60823-1.s, cflags: "-O2 -fopenmp-simd\n -S"}
  group: GRPSERIAL
test_pr60823-1_406:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr60823-1.c'
    sources: {binary: pr60823-1.s, cflags: "-std=gnu++98 -O2 -fopenmp-simd\n -S"}
  group: GRPSERIAL
test_pr60823-1_407:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr60823-1.c'
    sources: {binary: pr60823-1.s, cflags: "-std=gnu++11 -O2 -fopenmp-simd\n -S"}
  group: GRPSERIAL
test_pr60823-1_408:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr60823-1.c'
    sources: {binary: pr60823-1.s, cflags: "-std=gnu++14 -O2 -fopenmp-simd\n -S"}
  group: GRPSERIAL
test_pr60823-1_607:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr60823-1.c'
    sources: {binary: pr60823-1.s, cflags: "-O2 -fopenmp-simd\n -S"}
  group: GRPSERIAL
test_pr60823-1_64:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr60823-1.c'
    sources: {binary: pr60823-1.s, cflags: "-O2 -fopenmp-simd\n -S"}
  group: GRPSERIAL
test_pr60823-1_840:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr60823-1.c'
    sources: {binary: pr60823-1.s, cflags: "-std=gnu++98 -O2 -fopenmp-simd\n -S"}
  group: GRPSERIAL
test_pr60823-1_841:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr60823-1.c'
    sources: {binary: pr60823-1.s, cflags: "-std=gnu++11 -O2 -fopenmp-simd\n -S"}
  group: GRPSERIAL
test_pr60823-1_842:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr60823-1.c'
    sources: {binary: pr60823-1.s, cflags: "-std=gnu++14 -O2 -fopenmp-simd\n -S"}
  group: GRPSERIAL
test_pr60823-2_174:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr60823-2.c'
    sources: {binary: ./pr60823-2.exe, cflags: -O2 -fopenmp-simd}
  group: GRPSERIAL
  run: {cwd: .}
test_pr60823-2_409:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr60823-2.c'
    sources: {binary: ./pr60823-2.exe, cflags: -std=gnu++98 -O2 -fopenmp-simd}
  group: GRPSERIAL
  run: {cwd: .}
test_pr60823-2_410:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr60823-2.c'
    sources: {binary: ./pr60823-2.exe, cflags: -std=gnu++11 -O2 -fopenmp-simd}
  group: GRPSERIAL
  run: {cwd: .}
test_pr60823-2_411:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr60823-2.c'
    sources: {binary: ./pr60823-2.exe, cflags: -std=gnu++14 -O2 -fopenmp-simd}
  group: GRPSERIAL
  run: {cwd: .}
test_pr60823-2_608:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr60823-2.c'
    sources: {binary: ./pr60823-2.exe, cflags: -O2 -fopenmp-simd}
  group: GRPSERIAL
  run: {cwd: .}
test_pr60823-2_65:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr60823-2.c'
    sources: {binary: ./pr60823-2.exe, cflags: -O2 -fopenmp-simd}
  group: GRPSERIAL
  run: {cwd: .}
test_pr60823-2_843:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr60823-2.c'
    sources: {binary: ./pr60823-2.exe, cflags: -std=gnu++98 -O2 -fopenmp-simd}
  group: GRPSERIAL
  run: {cwd: .}
test_pr60823-2_844:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr60823-2.c'
    sources: {binary: ./pr60823-2.exe, cflags: -std=gnu++11 -O2 -fopenmp-simd}
  group: GRPSERIAL
  run: {cwd: .}
test_pr60823-2_845:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr60823-2.c'
    sources: {binary: ./pr60823-2.exe, cflags: -std=gnu++14 -O2 -fopenmp-simd}
  group: GRPSERIAL
  run: {cwd: .}
test_pr60823-3_175:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr60823-3.c'
    sources: {binary: pr60823-3.s, cflags: "-O2 -fopenmp-simd -fno-strict-aliasing\n
        -S"}
  group: GRPSERIAL
test_pr60823-3_412:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr60823-3.c'
    sources: {binary: pr60823-3.s, cflags: "-std=gnu++98 -O2 -fopenmp-simd -fno-strict-aliasing\n
        -S"}
  group: GRPSERIAL
test_pr60823-3_413:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr60823-3.c'
    sources: {binary: pr60823-3.s, cflags: "-std=gnu++11 -O2 -fopenmp-simd -fno-strict-aliasing\n
        -S"}
  group: GRPSERIAL
test_pr60823-3_414:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr60823-3.c'
    sources: {binary: pr60823-3.s, cflags: "-std=gnu++14 -O2 -fopenmp-simd -fno-strict-aliasing\n
        -S"}
  group: GRPSERIAL
test_pr60823-3_609:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr60823-3.c'
    sources: {binary: pr60823-3.s, cflags: "-O2 -fopenmp-simd -fno-strict-aliasing\n
        -S"}
  group: GRPSERIAL
test_pr60823-3_66:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr60823-3.c'
    sources: {binary: pr60823-3.s, cflags: "-O2 -fopenmp-simd -fno-strict-aliasing\n
        -S"}
  group: GRPSERIAL
test_pr60823-3_846:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr60823-3.c'
    sources: {binary: pr60823-3.s, cflags: "-std=gnu++98 -O2 -fopenmp-simd -fno-strict-aliasing\n
        -S"}
  group: GRPSERIAL
test_pr60823-3_847:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr60823-3.c'
    sources: {binary: pr60823-3.s, cflags: "-std=gnu++11 -O2 -fopenmp-simd -fno-strict-aliasing\n
        -S"}
  group: GRPSERIAL
test_pr60823-3_848:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr60823-3.c'
    sources: {binary: pr60823-3.s, cflags: "-std=gnu++14 -O2 -fopenmp-simd -fno-strict-aliasing\n
        -S"}
  group: GRPSERIAL
test_pr60823-4_176:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr60823-4.c'
    sources: {binary: ./pr60823-4.exe, cflags: -O2 -fopenmp-simd -fpic}
  group: GRPSERIAL
  run: {cwd: .}
test_pr60823-4_415:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr60823-4.c'
    sources: {binary: ./pr60823-4.exe, cflags: -std=gnu++98 -O2 -fopenmp-simd -fpic}
  group: GRPSERIAL
  run: {cwd: .}
test_pr60823-4_416:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr60823-4.c'
    sources: {binary: ./pr60823-4.exe, cflags: -std=gnu++11 -O2 -fopenmp-simd -fpic}
  group: GRPSERIAL
  run: {cwd: .}
test_pr60823-4_417:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr60823-4.c'
    sources: {binary: ./pr60823-4.exe, cflags: -std=gnu++14 -O2 -fopenmp-simd -fpic}
  group: GRPSERIAL
  run: {cwd: .}
test_pr60823-4_610:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr60823-4.c'
    sources: {binary: ./pr60823-4.exe, cflags: -O2 -fopenmp-simd -fpic}
  group: GRPSERIAL
  run: {cwd: .}
test_pr60823-4_67:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr60823-4.c'
    sources: {binary: ./pr60823-4.exe, cflags: -O2 -fopenmp-simd -fpic}
  group: GRPSERIAL
  run: {cwd: .}
test_pr60823-4_849:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr60823-4.c'
    sources: {binary: ./pr60823-4.exe, cflags: -std=gnu++98 -O2 -fopenmp-simd -fpic}
  group: GRPSERIAL
  run: {cwd: .}
test_pr60823-4_850:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr60823-4.c'
    sources: {binary: ./pr60823-4.exe, cflags: -std=gnu++11 -O2 -fopenmp-simd -fpic}
  group: GRPSERIAL
  run: {cwd: .}
test_pr60823-4_851:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr60823-4.c'
    sources: {binary: ./pr60823-4.exe, cflags: -std=gnu++14 -O2 -fopenmp-simd -fpic}
  group: GRPSERIAL
  run: {cwd: .}
test_pr61200_177:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr61200.c'
    sources: {binary: pr61200.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr61200_418:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr61200.c'
    sources: {binary: pr61200.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr61200_419:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr61200.c'
    sources: {binary: pr61200.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr61200_420:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr61200.c'
    sources: {binary: pr61200.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr61200_611:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr61200.c'
    sources: {binary: pr61200.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr61200_68:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr61200.c'
    sources: {binary: pr61200.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr61200_852:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr61200.c'
    sources: {binary: pr61200.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr61200_853:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr61200.c'
    sources: {binary: pr61200.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr61200_854:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr61200.c'
    sources: {binary: pr61200.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr61486-1_178:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr61486-1.c'
    sources: {binary: pr61486-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr61486-1_421:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr61486-1.c'
    sources: {binary: pr61486-1.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr61486-1_422:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr61486-1.c'
    sources: {binary: pr61486-1.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr61486-1_423:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr61486-1.c'
    sources: {binary: pr61486-1.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr61486-1_612:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr61486-1.c'
    sources: {binary: pr61486-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr61486-1_69:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr61486-1.c'
    sources: {binary: pr61486-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr61486-1_855:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr61486-1.c'
    sources: {binary: pr61486-1.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr61486-1_856:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr61486-1.c'
    sources: {binary: pr61486-1.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr61486-1_857:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr61486-1.c'
    sources: {binary: pr61486-1.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr61486-2_179:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr61486-2.c'
    sources: {binary: pr61486-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr61486-2_424:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr61486-2.c'
    sources: {binary: pr61486-2.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr61486-2_425:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr61486-2.c'
    sources: {binary: pr61486-2.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr61486-2_426:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr61486-2.c'
    sources: {binary: pr61486-2.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr61486-2_613:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr61486-2.c'
    sources: {binary: pr61486-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr61486-2_70:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr61486-2.c'
    sources: {binary: pr61486-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr61486-2_858:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr61486-2.c'
    sources: {binary: pr61486-2.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr61486-2_859:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr61486-2.c'
    sources: {binary: pr61486-2.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr61486-2_860:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr61486-2.c'
    sources: {binary: pr61486-2.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr63249_180:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr63249.c'
    sources: {binary: pr63249.s, cflags: "-Wall -W -fopenmp\n -S"}
  group: GRPSERIAL
test_pr63249_427:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr63249.c'
    sources: {binary: pr63249.s, cflags: "-std=gnu++98 -Wall -W -fopenmp\n -S"}
  group: GRPSERIAL
test_pr63249_428:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr63249.c'
    sources: {binary: pr63249.s, cflags: "-std=gnu++11 -Wall -W -fopenmp\n -S"}
  group: GRPSERIAL
test_pr63249_429:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr63249.c'
    sources: {binary: pr63249.s, cflags: "-std=gnu++14 -Wall -W -fopenmp\n -S"}
  group: GRPSERIAL
test_pr63249_614:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr63249.c'
    sources: {binary: pr63249.s, cflags: "-Wall -W -fopenmp\n -S"}
  group: GRPSERIAL
test_pr63249_71:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr63249.c'
    sources: {binary: pr63249.s, cflags: "-Wall -W -fopenmp\n -S"}
  group: GRPSERIAL
test_pr63249_861:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr63249.c'
    sources: {binary: pr63249.s, cflags: "-std=gnu++98 -Wall -W -fopenmp\n -S"}
  group: GRPSERIAL
test_pr63249_862:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr63249.c'
    sources: {binary: pr63249.s, cflags: "-std=gnu++11 -Wall -W -fopenmp\n -S"}
  group: GRPSERIAL
test_pr63249_863:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr63249.c'
    sources: {binary: pr63249.s, cflags: "-std=gnu++14 -Wall -W -fopenmp\n -S"}
  group: GRPSERIAL
test_pr63326_181:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr63326.c'
    sources: {binary: pr63326.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L108: {expect: true, expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L111: {expect: true, expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L114: {expect: true, expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L117: {expect: true, expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L122: {expect: true, expr: '(^|\n)([^\n]+:122:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L128: {expect: true, expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L135: {expect: true, expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L138: {expect: true, expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L142: {expect: true, expr: '(^|\n)([^\n]+:142:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L145: {expect: true, expr: '(^|\n)([^\n]+:145:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L148: {expect: true, expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L160: {expect: true, expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L168: {expect: true, expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L175: {expect: true, expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L179: {expect: true, expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L181: {expect: true, expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L185: {expect: true, expr: '(^|\n)([^\n]+:185:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L195: {expect: true, expr: '(^|\n)([^\n]+:195:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L206: {expect: true, expr: '(^|\n)([^\n]+:206:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L209: {expect: true, expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L211: {expect: true, expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L214: {expect: true, expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L216: {expect: true, expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L224: {expect: true, expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L227: {expect: true, expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L230: {expect: true, expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L233: {expect: true, expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L238: {expect: true, expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L244: {expect: true, expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L251: {expect: true, expr: '(^|\n)([^\n]+:251:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L254: {expect: true, expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L258: {expect: true, expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L261: {expect: true, expr: '(^|\n)([^\n]+:261:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L264: {expect: true, expr: '(^|\n)([^\n]+:264:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L275: {expect: true, expr: '(^|\n)([^\n]+:275:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L281: {expect: true, expr: '(^|\n)([^\n]+:281:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L287: {expect: true, expr: '(^|\n)([^\n]+:287:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L293: {expect: true, expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L301: {expect: true, expr: '(^|\n)([^\n]+:301:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L310: {expect: true, expr: '(^|\n)([^\n]+:310:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L320: {expect: true, expr: '(^|\n)([^\n]+:320:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L326: {expect: true, expr: '(^|\n)([^\n]+:326:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L333: {expect: true, expr: '(^|\n)([^\n]+:333:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L339: {expect: true, expr: '(^|\n)([^\n]+:339:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L345: {expect: true, expr: '(^|\n)([^\n]+:345:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L357: {expect: true, expr: '(^|\n)([^\n]+:357:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L363: {expect: true, expr: '(^|\n)([^\n]+:363:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L369: {expect: true, expr: '(^|\n)([^\n]+:369:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L375: {expect: true, expr: '(^|\n)([^\n]+:375:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L383: {expect: true, expr: '(^|\n)([^\n]+:383:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L392: {expect: true, expr: '(^|\n)([^\n]+:392:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L402: {expect: true, expr: '(^|\n)([^\n]+:402:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L408: {expect: true, expr: '(^|\n)([^\n]+:408:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L415: {expect: true, expr: '(^|\n)([^\n]+:415:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L421: {expect: true, expr: '(^|\n)([^\n]+:421:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L427: {expect: true, expr: '(^|\n)([^\n]+:427:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L437: {expect: true, expr: '(^|\n)([^\n]+:437:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L440: {expect: true, expr: '(^|\n)([^\n]+:440:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L443: {expect: true, expr: '(^|\n)([^\n]+:443:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L446: {expect: true, expr: '(^|\n)([^\n]+:446:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L451: {expect: true, expr: '(^|\n)([^\n]+:451:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L457: {expect: true, expr: '(^|\n)([^\n]+:457:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L464: {expect: true, expr: '(^|\n)([^\n]+:464:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L467: {expect: true, expr: '(^|\n)([^\n]+:467:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L471: {expect: true, expr: '(^|\n)([^\n]+:471:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L474: {expect: true, expr: '(^|\n)([^\n]+:474:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L477: {expect: true, expr: '(^|\n)([^\n]+:477:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
test_pr63326_430:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr63326.c'
    sources: {binary: pr63326.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L108: {expect: true, expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L111: {expect: true, expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L114: {expect: true, expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L117: {expect: true, expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L122: {expect: true, expr: '(^|\n)([^\n]+:122:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L128: {expect: true, expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L135: {expect: true, expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L138: {expect: true, expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L142: {expect: true, expr: '(^|\n)([^\n]+:142:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L145: {expect: true, expr: '(^|\n)([^\n]+:145:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L148: {expect: true, expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L160: {expect: true, expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L168: {expect: true, expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L175: {expect: true, expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L179: {expect: true, expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L181: {expect: true, expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L185: {expect: true, expr: '(^|\n)([^\n]+:185:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L195: {expect: true, expr: '(^|\n)([^\n]+:195:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L206: {expect: true, expr: '(^|\n)([^\n]+:206:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L209: {expect: true, expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L211: {expect: true, expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L214: {expect: true, expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L216: {expect: true, expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L224: {expect: true, expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L227: {expect: true, expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L230: {expect: true, expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L233: {expect: true, expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L238: {expect: true, expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L244: {expect: true, expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L251: {expect: true, expr: '(^|\n)([^\n]+:251:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L254: {expect: true, expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L258: {expect: true, expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L261: {expect: true, expr: '(^|\n)([^\n]+:261:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L264: {expect: true, expr: '(^|\n)([^\n]+:264:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L275: {expect: true, expr: '(^|\n)([^\n]+:275:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L281: {expect: true, expr: '(^|\n)([^\n]+:281:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L287: {expect: true, expr: '(^|\n)([^\n]+:287:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L293: {expect: true, expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L301: {expect: true, expr: '(^|\n)([^\n]+:301:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L310: {expect: true, expr: '(^|\n)([^\n]+:310:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L320: {expect: true, expr: '(^|\n)([^\n]+:320:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L326: {expect: true, expr: '(^|\n)([^\n]+:326:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L333: {expect: true, expr: '(^|\n)([^\n]+:333:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L339: {expect: true, expr: '(^|\n)([^\n]+:339:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L345: {expect: true, expr: '(^|\n)([^\n]+:345:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L357: {expect: true, expr: '(^|\n)([^\n]+:357:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L363: {expect: true, expr: '(^|\n)([^\n]+:363:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L369: {expect: true, expr: '(^|\n)([^\n]+:369:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L375: {expect: true, expr: '(^|\n)([^\n]+:375:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L383: {expect: true, expr: '(^|\n)([^\n]+:383:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L392: {expect: true, expr: '(^|\n)([^\n]+:392:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L402: {expect: true, expr: '(^|\n)([^\n]+:402:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L408: {expect: true, expr: '(^|\n)([^\n]+:408:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L415: {expect: true, expr: '(^|\n)([^\n]+:415:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L421: {expect: true, expr: '(^|\n)([^\n]+:421:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L427: {expect: true, expr: '(^|\n)([^\n]+:427:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L437: {expect: true, expr: '(^|\n)([^\n]+:437:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L440: {expect: true, expr: '(^|\n)([^\n]+:440:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L443: {expect: true, expr: '(^|\n)([^\n]+:443:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L446: {expect: true, expr: '(^|\n)([^\n]+:446:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L451: {expect: true, expr: '(^|\n)([^\n]+:451:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L457: {expect: true, expr: '(^|\n)([^\n]+:457:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L464: {expect: true, expr: '(^|\n)([^\n]+:464:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L467: {expect: true, expr: '(^|\n)([^\n]+:467:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L471: {expect: true, expr: '(^|\n)([^\n]+:471:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L474: {expect: true, expr: '(^|\n)([^\n]+:474:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L477: {expect: true, expr: '(^|\n)([^\n]+:477:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
test_pr63326_431:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr63326.c'
    sources: {binary: pr63326.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L108: {expect: true, expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L111: {expect: true, expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L114: {expect: true, expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L117: {expect: true, expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L122: {expect: true, expr: '(^|\n)([^\n]+:122:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L128: {expect: true, expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L135: {expect: true, expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L138: {expect: true, expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L142: {expect: true, expr: '(^|\n)([^\n]+:142:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L145: {expect: true, expr: '(^|\n)([^\n]+:145:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L148: {expect: true, expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L160: {expect: true, expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L168: {expect: true, expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L175: {expect: true, expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L179: {expect: true, expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L181: {expect: true, expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L185: {expect: true, expr: '(^|\n)([^\n]+:185:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L195: {expect: true, expr: '(^|\n)([^\n]+:195:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L206: {expect: true, expr: '(^|\n)([^\n]+:206:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L209: {expect: true, expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L211: {expect: true, expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L214: {expect: true, expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L216: {expect: true, expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L224: {expect: true, expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L227: {expect: true, expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L230: {expect: true, expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L233: {expect: true, expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L238: {expect: true, expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L244: {expect: true, expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L251: {expect: true, expr: '(^|\n)([^\n]+:251:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L254: {expect: true, expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L258: {expect: true, expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L261: {expect: true, expr: '(^|\n)([^\n]+:261:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L264: {expect: true, expr: '(^|\n)([^\n]+:264:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L275: {expect: true, expr: '(^|\n)([^\n]+:275:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L281: {expect: true, expr: '(^|\n)([^\n]+:281:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L287: {expect: true, expr: '(^|\n)([^\n]+:287:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L293: {expect: true, expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L301: {expect: true, expr: '(^|\n)([^\n]+:301:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L310: {expect: true, expr: '(^|\n)([^\n]+:310:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L320: {expect: true, expr: '(^|\n)([^\n]+:320:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L326: {expect: true, expr: '(^|\n)([^\n]+:326:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L333: {expect: true, expr: '(^|\n)([^\n]+:333:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L339: {expect: true, expr: '(^|\n)([^\n]+:339:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L345: {expect: true, expr: '(^|\n)([^\n]+:345:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L357: {expect: true, expr: '(^|\n)([^\n]+:357:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L363: {expect: true, expr: '(^|\n)([^\n]+:363:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L369: {expect: true, expr: '(^|\n)([^\n]+:369:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L375: {expect: true, expr: '(^|\n)([^\n]+:375:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L383: {expect: true, expr: '(^|\n)([^\n]+:383:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L392: {expect: true, expr: '(^|\n)([^\n]+:392:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L402: {expect: true, expr: '(^|\n)([^\n]+:402:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L408: {expect: true, expr: '(^|\n)([^\n]+:408:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L415: {expect: true, expr: '(^|\n)([^\n]+:415:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L421: {expect: true, expr: '(^|\n)([^\n]+:421:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L427: {expect: true, expr: '(^|\n)([^\n]+:427:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L437: {expect: true, expr: '(^|\n)([^\n]+:437:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L440: {expect: true, expr: '(^|\n)([^\n]+:440:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L443: {expect: true, expr: '(^|\n)([^\n]+:443:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L446: {expect: true, expr: '(^|\n)([^\n]+:446:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L451: {expect: true, expr: '(^|\n)([^\n]+:451:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L457: {expect: true, expr: '(^|\n)([^\n]+:457:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L464: {expect: true, expr: '(^|\n)([^\n]+:464:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L467: {expect: true, expr: '(^|\n)([^\n]+:467:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L471: {expect: true, expr: '(^|\n)([^\n]+:471:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L474: {expect: true, expr: '(^|\n)([^\n]+:474:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L477: {expect: true, expr: '(^|\n)([^\n]+:477:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
test_pr63326_432:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr63326.c'
    sources: {binary: pr63326.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L108: {expect: true, expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L111: {expect: true, expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L114: {expect: true, expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L117: {expect: true, expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L122: {expect: true, expr: '(^|\n)([^\n]+:122:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L128: {expect: true, expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L135: {expect: true, expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L138: {expect: true, expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L142: {expect: true, expr: '(^|\n)([^\n]+:142:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L145: {expect: true, expr: '(^|\n)([^\n]+:145:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L148: {expect: true, expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L160: {expect: true, expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L168: {expect: true, expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L175: {expect: true, expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L179: {expect: true, expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L181: {expect: true, expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L185: {expect: true, expr: '(^|\n)([^\n]+:185:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L195: {expect: true, expr: '(^|\n)([^\n]+:195:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L206: {expect: true, expr: '(^|\n)([^\n]+:206:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L209: {expect: true, expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L211: {expect: true, expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L214: {expect: true, expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L216: {expect: true, expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L224: {expect: true, expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L227: {expect: true, expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L230: {expect: true, expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L233: {expect: true, expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L238: {expect: true, expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L244: {expect: true, expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L251: {expect: true, expr: '(^|\n)([^\n]+:251:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L254: {expect: true, expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L258: {expect: true, expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L261: {expect: true, expr: '(^|\n)([^\n]+:261:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L264: {expect: true, expr: '(^|\n)([^\n]+:264:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L275: {expect: true, expr: '(^|\n)([^\n]+:275:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L281: {expect: true, expr: '(^|\n)([^\n]+:281:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L287: {expect: true, expr: '(^|\n)([^\n]+:287:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L293: {expect: true, expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L301: {expect: true, expr: '(^|\n)([^\n]+:301:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L310: {expect: true, expr: '(^|\n)([^\n]+:310:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L320: {expect: true, expr: '(^|\n)([^\n]+:320:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L326: {expect: true, expr: '(^|\n)([^\n]+:326:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L333: {expect: true, expr: '(^|\n)([^\n]+:333:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L339: {expect: true, expr: '(^|\n)([^\n]+:339:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L345: {expect: true, expr: '(^|\n)([^\n]+:345:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L357: {expect: true, expr: '(^|\n)([^\n]+:357:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L363: {expect: true, expr: '(^|\n)([^\n]+:363:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L369: {expect: true, expr: '(^|\n)([^\n]+:369:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L375: {expect: true, expr: '(^|\n)([^\n]+:375:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L383: {expect: true, expr: '(^|\n)([^\n]+:383:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L392: {expect: true, expr: '(^|\n)([^\n]+:392:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L402: {expect: true, expr: '(^|\n)([^\n]+:402:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L408: {expect: true, expr: '(^|\n)([^\n]+:408:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L415: {expect: true, expr: '(^|\n)([^\n]+:415:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L421: {expect: true, expr: '(^|\n)([^\n]+:421:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L427: {expect: true, expr: '(^|\n)([^\n]+:427:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L437: {expect: true, expr: '(^|\n)([^\n]+:437:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L440: {expect: true, expr: '(^|\n)([^\n]+:440:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L443: {expect: true, expr: '(^|\n)([^\n]+:443:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L446: {expect: true, expr: '(^|\n)([^\n]+:446:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L451: {expect: true, expr: '(^|\n)([^\n]+:451:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L457: {expect: true, expr: '(^|\n)([^\n]+:457:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L464: {expect: true, expr: '(^|\n)([^\n]+:464:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L467: {expect: true, expr: '(^|\n)([^\n]+:467:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L471: {expect: true, expr: '(^|\n)([^\n]+:471:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L474: {expect: true, expr: '(^|\n)([^\n]+:474:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L477: {expect: true, expr: '(^|\n)([^\n]+:477:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
test_pr63326_615:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr63326.c'
    sources: {binary: pr63326.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L108: {expect: true, expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L111: {expect: true, expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L114: {expect: true, expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L117: {expect: true, expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L122: {expect: true, expr: '(^|\n)([^\n]+:122:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L128: {expect: true, expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L135: {expect: true, expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L138: {expect: true, expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L142: {expect: true, expr: '(^|\n)([^\n]+:142:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L145: {expect: true, expr: '(^|\n)([^\n]+:145:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L148: {expect: true, expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L160: {expect: true, expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L168: {expect: true, expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L175: {expect: true, expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L179: {expect: true, expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L181: {expect: true, expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L185: {expect: true, expr: '(^|\n)([^\n]+:185:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L195: {expect: true, expr: '(^|\n)([^\n]+:195:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L206: {expect: true, expr: '(^|\n)([^\n]+:206:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L209: {expect: true, expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L211: {expect: true, expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L214: {expect: true, expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L216: {expect: true, expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L224: {expect: true, expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L227: {expect: true, expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L230: {expect: true, expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L233: {expect: true, expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L238: {expect: true, expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L244: {expect: true, expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L251: {expect: true, expr: '(^|\n)([^\n]+:251:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L254: {expect: true, expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L258: {expect: true, expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L261: {expect: true, expr: '(^|\n)([^\n]+:261:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L264: {expect: true, expr: '(^|\n)([^\n]+:264:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L275: {expect: true, expr: '(^|\n)([^\n]+:275:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L281: {expect: true, expr: '(^|\n)([^\n]+:281:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L287: {expect: true, expr: '(^|\n)([^\n]+:287:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L293: {expect: true, expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L301: {expect: true, expr: '(^|\n)([^\n]+:301:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L310: {expect: true, expr: '(^|\n)([^\n]+:310:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L320: {expect: true, expr: '(^|\n)([^\n]+:320:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L326: {expect: true, expr: '(^|\n)([^\n]+:326:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L333: {expect: true, expr: '(^|\n)([^\n]+:333:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L339: {expect: true, expr: '(^|\n)([^\n]+:339:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L345: {expect: true, expr: '(^|\n)([^\n]+:345:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L357: {expect: true, expr: '(^|\n)([^\n]+:357:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L363: {expect: true, expr: '(^|\n)([^\n]+:363:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L369: {expect: true, expr: '(^|\n)([^\n]+:369:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L375: {expect: true, expr: '(^|\n)([^\n]+:375:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L383: {expect: true, expr: '(^|\n)([^\n]+:383:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L392: {expect: true, expr: '(^|\n)([^\n]+:392:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L402: {expect: true, expr: '(^|\n)([^\n]+:402:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L408: {expect: true, expr: '(^|\n)([^\n]+:408:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L415: {expect: true, expr: '(^|\n)([^\n]+:415:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L421: {expect: true, expr: '(^|\n)([^\n]+:421:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L427: {expect: true, expr: '(^|\n)([^\n]+:427:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L437: {expect: true, expr: '(^|\n)([^\n]+:437:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L440: {expect: true, expr: '(^|\n)([^\n]+:440:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L443: {expect: true, expr: '(^|\n)([^\n]+:443:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L446: {expect: true, expr: '(^|\n)([^\n]+:446:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L451: {expect: true, expr: '(^|\n)([^\n]+:451:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L457: {expect: true, expr: '(^|\n)([^\n]+:457:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L464: {expect: true, expr: '(^|\n)([^\n]+:464:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L467: {expect: true, expr: '(^|\n)([^\n]+:467:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L471: {expect: true, expr: '(^|\n)([^\n]+:471:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L474: {expect: true, expr: '(^|\n)([^\n]+:474:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L477: {expect: true, expr: '(^|\n)([^\n]+:477:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
test_pr63326_72:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr63326.c'
    sources: {binary: pr63326.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L108: {expect: true, expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L111: {expect: true, expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L114: {expect: true, expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L117: {expect: true, expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L122: {expect: true, expr: '(^|\n)([^\n]+:122:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L128: {expect: true, expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L135: {expect: true, expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L138: {expect: true, expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L142: {expect: true, expr: '(^|\n)([^\n]+:142:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L145: {expect: true, expr: '(^|\n)([^\n]+:145:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L148: {expect: true, expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L160: {expect: true, expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L168: {expect: true, expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L175: {expect: true, expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L179: {expect: true, expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L181: {expect: true, expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L185: {expect: true, expr: '(^|\n)([^\n]+:185:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L195: {expect: true, expr: '(^|\n)([^\n]+:195:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L206: {expect: true, expr: '(^|\n)([^\n]+:206:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L209: {expect: true, expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L211: {expect: true, expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L214: {expect: true, expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L216: {expect: true, expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L224: {expect: true, expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L227: {expect: true, expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L230: {expect: true, expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L233: {expect: true, expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L238: {expect: true, expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L244: {expect: true, expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L251: {expect: true, expr: '(^|\n)([^\n]+:251:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L254: {expect: true, expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L258: {expect: true, expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L261: {expect: true, expr: '(^|\n)([^\n]+:261:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L264: {expect: true, expr: '(^|\n)([^\n]+:264:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L275: {expect: true, expr: '(^|\n)([^\n]+:275:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L281: {expect: true, expr: '(^|\n)([^\n]+:281:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L287: {expect: true, expr: '(^|\n)([^\n]+:287:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L293: {expect: true, expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L301: {expect: true, expr: '(^|\n)([^\n]+:301:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L310: {expect: true, expr: '(^|\n)([^\n]+:310:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L320: {expect: true, expr: '(^|\n)([^\n]+:320:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L326: {expect: true, expr: '(^|\n)([^\n]+:326:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L333: {expect: true, expr: '(^|\n)([^\n]+:333:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L339: {expect: true, expr: '(^|\n)([^\n]+:339:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L345: {expect: true, expr: '(^|\n)([^\n]+:345:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L357: {expect: true, expr: '(^|\n)([^\n]+:357:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L363: {expect: true, expr: '(^|\n)([^\n]+:363:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L369: {expect: true, expr: '(^|\n)([^\n]+:369:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L375: {expect: true, expr: '(^|\n)([^\n]+:375:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L383: {expect: true, expr: '(^|\n)([^\n]+:383:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L392: {expect: true, expr: '(^|\n)([^\n]+:392:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L402: {expect: true, expr: '(^|\n)([^\n]+:402:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L408: {expect: true, expr: '(^|\n)([^\n]+:408:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L415: {expect: true, expr: '(^|\n)([^\n]+:415:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L421: {expect: true, expr: '(^|\n)([^\n]+:421:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L427: {expect: true, expr: '(^|\n)([^\n]+:427:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L437: {expect: true, expr: '(^|\n)([^\n]+:437:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L440: {expect: true, expr: '(^|\n)([^\n]+:440:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L443: {expect: true, expr: '(^|\n)([^\n]+:443:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L446: {expect: true, expr: '(^|\n)([^\n]+:446:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L451: {expect: true, expr: '(^|\n)([^\n]+:451:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L457: {expect: true, expr: '(^|\n)([^\n]+:457:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L464: {expect: true, expr: '(^|\n)([^\n]+:464:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L467: {expect: true, expr: '(^|\n)([^\n]+:467:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L471: {expect: true, expr: '(^|\n)([^\n]+:471:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L474: {expect: true, expr: '(^|\n)([^\n]+:474:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L477: {expect: true, expr: '(^|\n)([^\n]+:477:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
test_pr63326_864:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr63326.c'
    sources: {binary: pr63326.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L108: {expect: true, expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L111: {expect: true, expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L114: {expect: true, expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L117: {expect: true, expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L122: {expect: true, expr: '(^|\n)([^\n]+:122:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L128: {expect: true, expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L135: {expect: true, expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L138: {expect: true, expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L142: {expect: true, expr: '(^|\n)([^\n]+:142:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L145: {expect: true, expr: '(^|\n)([^\n]+:145:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L148: {expect: true, expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L160: {expect: true, expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L168: {expect: true, expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L175: {expect: true, expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L179: {expect: true, expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L181: {expect: true, expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L185: {expect: true, expr: '(^|\n)([^\n]+:185:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L195: {expect: true, expr: '(^|\n)([^\n]+:195:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L206: {expect: true, expr: '(^|\n)([^\n]+:206:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L209: {expect: true, expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L211: {expect: true, expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L214: {expect: true, expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L216: {expect: true, expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L224: {expect: true, expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L227: {expect: true, expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L230: {expect: true, expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L233: {expect: true, expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L238: {expect: true, expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L244: {expect: true, expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L251: {expect: true, expr: '(^|\n)([^\n]+:251:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L254: {expect: true, expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L258: {expect: true, expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L261: {expect: true, expr: '(^|\n)([^\n]+:261:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L264: {expect: true, expr: '(^|\n)([^\n]+:264:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L275: {expect: true, expr: '(^|\n)([^\n]+:275:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L281: {expect: true, expr: '(^|\n)([^\n]+:281:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L287: {expect: true, expr: '(^|\n)([^\n]+:287:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L293: {expect: true, expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L301: {expect: true, expr: '(^|\n)([^\n]+:301:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L310: {expect: true, expr: '(^|\n)([^\n]+:310:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L320: {expect: true, expr: '(^|\n)([^\n]+:320:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L326: {expect: true, expr: '(^|\n)([^\n]+:326:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L333: {expect: true, expr: '(^|\n)([^\n]+:333:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L339: {expect: true, expr: '(^|\n)([^\n]+:339:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L345: {expect: true, expr: '(^|\n)([^\n]+:345:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L357: {expect: true, expr: '(^|\n)([^\n]+:357:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L363: {expect: true, expr: '(^|\n)([^\n]+:363:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L369: {expect: true, expr: '(^|\n)([^\n]+:369:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L375: {expect: true, expr: '(^|\n)([^\n]+:375:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L383: {expect: true, expr: '(^|\n)([^\n]+:383:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L392: {expect: true, expr: '(^|\n)([^\n]+:392:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L402: {expect: true, expr: '(^|\n)([^\n]+:402:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L408: {expect: true, expr: '(^|\n)([^\n]+:408:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L415: {expect: true, expr: '(^|\n)([^\n]+:415:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L421: {expect: true, expr: '(^|\n)([^\n]+:421:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L427: {expect: true, expr: '(^|\n)([^\n]+:427:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L437: {expect: true, expr: '(^|\n)([^\n]+:437:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L440: {expect: true, expr: '(^|\n)([^\n]+:440:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L443: {expect: true, expr: '(^|\n)([^\n]+:443:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L446: {expect: true, expr: '(^|\n)([^\n]+:446:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L451: {expect: true, expr: '(^|\n)([^\n]+:451:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L457: {expect: true, expr: '(^|\n)([^\n]+:457:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L464: {expect: true, expr: '(^|\n)([^\n]+:464:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L467: {expect: true, expr: '(^|\n)([^\n]+:467:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L471: {expect: true, expr: '(^|\n)([^\n]+:471:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L474: {expect: true, expr: '(^|\n)([^\n]+:474:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L477: {expect: true, expr: '(^|\n)([^\n]+:477:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
test_pr63326_865:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr63326.c'
    sources: {binary: pr63326.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L108: {expect: true, expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L111: {expect: true, expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L114: {expect: true, expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L117: {expect: true, expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L122: {expect: true, expr: '(^|\n)([^\n]+:122:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L128: {expect: true, expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L135: {expect: true, expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L138: {expect: true, expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L142: {expect: true, expr: '(^|\n)([^\n]+:142:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L145: {expect: true, expr: '(^|\n)([^\n]+:145:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L148: {expect: true, expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L160: {expect: true, expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L168: {expect: true, expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L175: {expect: true, expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L179: {expect: true, expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L181: {expect: true, expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L185: {expect: true, expr: '(^|\n)([^\n]+:185:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L195: {expect: true, expr: '(^|\n)([^\n]+:195:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L206: {expect: true, expr: '(^|\n)([^\n]+:206:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L209: {expect: true, expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L211: {expect: true, expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L214: {expect: true, expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L216: {expect: true, expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L224: {expect: true, expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L227: {expect: true, expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L230: {expect: true, expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L233: {expect: true, expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L238: {expect: true, expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L244: {expect: true, expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L251: {expect: true, expr: '(^|\n)([^\n]+:251:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L254: {expect: true, expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L258: {expect: true, expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L261: {expect: true, expr: '(^|\n)([^\n]+:261:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L264: {expect: true, expr: '(^|\n)([^\n]+:264:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L275: {expect: true, expr: '(^|\n)([^\n]+:275:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L281: {expect: true, expr: '(^|\n)([^\n]+:281:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L287: {expect: true, expr: '(^|\n)([^\n]+:287:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L293: {expect: true, expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L301: {expect: true, expr: '(^|\n)([^\n]+:301:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L310: {expect: true, expr: '(^|\n)([^\n]+:310:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L320: {expect: true, expr: '(^|\n)([^\n]+:320:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L326: {expect: true, expr: '(^|\n)([^\n]+:326:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L333: {expect: true, expr: '(^|\n)([^\n]+:333:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L339: {expect: true, expr: '(^|\n)([^\n]+:339:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L345: {expect: true, expr: '(^|\n)([^\n]+:345:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L357: {expect: true, expr: '(^|\n)([^\n]+:357:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L363: {expect: true, expr: '(^|\n)([^\n]+:363:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L369: {expect: true, expr: '(^|\n)([^\n]+:369:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L375: {expect: true, expr: '(^|\n)([^\n]+:375:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L383: {expect: true, expr: '(^|\n)([^\n]+:383:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L392: {expect: true, expr: '(^|\n)([^\n]+:392:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L402: {expect: true, expr: '(^|\n)([^\n]+:402:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L408: {expect: true, expr: '(^|\n)([^\n]+:408:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L415: {expect: true, expr: '(^|\n)([^\n]+:415:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L421: {expect: true, expr: '(^|\n)([^\n]+:421:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L427: {expect: true, expr: '(^|\n)([^\n]+:427:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L437: {expect: true, expr: '(^|\n)([^\n]+:437:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L440: {expect: true, expr: '(^|\n)([^\n]+:440:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L443: {expect: true, expr: '(^|\n)([^\n]+:443:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L446: {expect: true, expr: '(^|\n)([^\n]+:446:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L451: {expect: true, expr: '(^|\n)([^\n]+:451:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L457: {expect: true, expr: '(^|\n)([^\n]+:457:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L464: {expect: true, expr: '(^|\n)([^\n]+:464:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L467: {expect: true, expr: '(^|\n)([^\n]+:467:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L471: {expect: true, expr: '(^|\n)([^\n]+:471:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L474: {expect: true, expr: '(^|\n)([^\n]+:474:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L477: {expect: true, expr: '(^|\n)([^\n]+:477:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
test_pr63326_866:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr63326.c'
    sources: {binary: pr63326.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L108: {expect: true, expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L111: {expect: true, expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L114: {expect: true, expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L117: {expect: true, expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L122: {expect: true, expr: '(^|\n)([^\n]+:122:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L128: {expect: true, expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L135: {expect: true, expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L138: {expect: true, expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L142: {expect: true, expr: '(^|\n)([^\n]+:142:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L145: {expect: true, expr: '(^|\n)([^\n]+:145:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L148: {expect: true, expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L160: {expect: true, expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L168: {expect: true, expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L175: {expect: true, expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L179: {expect: true, expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L181: {expect: true, expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L185: {expect: true, expr: '(^|\n)([^\n]+:185:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L195: {expect: true, expr: '(^|\n)([^\n]+:195:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L206: {expect: true, expr: '(^|\n)([^\n]+:206:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L209: {expect: true, expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L211: {expect: true, expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L214: {expect: true, expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L216: {expect: true, expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before")[^\n]*\n?)+'}
      L224: {expect: true, expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L227: {expect: true, expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L230: {expect: true, expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L233: {expect: true, expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L238: {expect: true, expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L244: {expect: true, expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L251: {expect: true, expr: '(^|\n)([^\n]+:251:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L254: {expect: true, expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L258: {expect: true, expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L261: {expect: true, expr: '(^|\n)([^\n]+:261:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L264: {expect: true, expr: '(^|\n)([^\n]+:264:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L275: {expect: true, expr: '(^|\n)([^\n]+:275:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L281: {expect: true, expr: '(^|\n)([^\n]+:281:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L287: {expect: true, expr: '(^|\n)([^\n]+:287:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L293: {expect: true, expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L301: {expect: true, expr: '(^|\n)([^\n]+:301:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L310: {expect: true, expr: '(^|\n)([^\n]+:310:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L320: {expect: true, expr: '(^|\n)([^\n]+:320:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L326: {expect: true, expr: '(^|\n)([^\n]+:326:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L333: {expect: true, expr: '(^|\n)([^\n]+:333:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L339: {expect: true, expr: '(^|\n)([^\n]+:339:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L345: {expect: true, expr: '(^|\n)([^\n]+:345:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L357: {expect: true, expr: '(^|\n)([^\n]+:357:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L363: {expect: true, expr: '(^|\n)([^\n]+:363:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L369: {expect: true, expr: '(^|\n)([^\n]+:369:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L375: {expect: true, expr: '(^|\n)([^\n]+:375:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L383: {expect: true, expr: '(^|\n)([^\n]+:383:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L392: {expect: true, expr: '(^|\n)([^\n]+:392:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L402: {expect: true, expr: '(^|\n)([^\n]+:402:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L408: {expect: true, expr: '(^|\n)([^\n]+:408:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L415: {expect: true, expr: '(^|\n)([^\n]+:415:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L421: {expect: true, expr: '(^|\n)([^\n]+:421:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L427: {expect: true, expr: '(^|\n)([^\n]+:427:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L437: {expect: true, expr: '(^|\n)([^\n]+:437:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L440: {expect: true, expr: '(^|\n)([^\n]+:440:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L443: {expect: true, expr: '(^|\n)([^\n]+:443:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L446: {expect: true, expr: '(^|\n)([^\n]+:446:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L451: {expect: true, expr: '(^|\n)([^\n]+:451:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L457: {expect: true, expr: '(^|\n)([^\n]+:457:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L464: {expect: true, expr: '(^|\n)([^\n]+:464:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L467: {expect: true, expr: '(^|\n)([^\n]+:467:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L471: {expect: true, expr: '(^|\n)([^\n]+:471:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L474: {expect: true, expr: '(^|\n)([^\n]+:474:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L477: {expect: true, expr: '(^|\n)([^\n]+:477:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
test_pr63328_182:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr63328.c'
    sources: {binary: pr63328.s, cflags: "-O2 -fopenmp-simd -fno-strict-aliasing -fcompare-debug\n
        -S"}
  group: GRPSERIAL
test_pr63328_433:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr63328.c'
    sources: {binary: pr63328.s, cflags: "-std=gnu++98 -O2 -fopenmp-simd -fno-strict-aliasing
        -fcompare-debug\n -S"}
  group: GRPSERIAL
test_pr63328_434:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr63328.c'
    sources: {binary: pr63328.s, cflags: "-std=gnu++11 -O2 -fopenmp-simd -fno-strict-aliasing
        -fcompare-debug\n -S"}
  group: GRPSERIAL
test_pr63328_435:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr63328.c'
    sources: {binary: pr63328.s, cflags: "-std=gnu++14 -O2 -fopenmp-simd -fno-strict-aliasing
        -fcompare-debug\n -S"}
  group: GRPSERIAL
test_pr63328_616:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr63328.c'
    sources: {binary: pr63328.s, cflags: "-O2 -fopenmp-simd -fno-strict-aliasing -fcompare-debug\n
        -S"}
  group: GRPSERIAL
test_pr63328_73:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr63328.c'
    sources: {binary: pr63328.s, cflags: "-O2 -fopenmp-simd -fno-strict-aliasing -fcompare-debug\n
        -S"}
  group: GRPSERIAL
test_pr63328_867:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr63328.c'
    sources: {binary: pr63328.s, cflags: "-std=gnu++98 -O2 -fopenmp-simd -fno-strict-aliasing
        -fcompare-debug\n -S"}
  group: GRPSERIAL
test_pr63328_868:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr63328.c'
    sources: {binary: pr63328.s, cflags: "-std=gnu++11 -O2 -fopenmp-simd -fno-strict-aliasing
        -fcompare-debug\n -S"}
  group: GRPSERIAL
test_pr63328_869:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr63328.c'
    sources: {binary: pr63328.s, cflags: "-std=gnu++14 -O2 -fopenmp-simd -fno-strict-aliasing
        -fcompare-debug\n -S"}
  group: GRPSERIAL
test_pr64769_183:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr64769.c'
    sources: {binary: pr64769.s, cflags: "-fopenmp-simd\n -S"}
  group: GRPSERIAL
test_pr64769_436:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr64769.c'
    sources: {binary: pr64769.s, cflags: "-std=gnu++98 -fopenmp-simd\n -S"}
  group: GRPSERIAL
test_pr64769_437:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr64769.c'
    sources: {binary: pr64769.s, cflags: "-std=gnu++11 -fopenmp-simd\n -S"}
  group: GRPSERIAL
test_pr64769_438:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr64769.c'
    sources: {binary: pr64769.s, cflags: "-std=gnu++14 -fopenmp-simd\n -S"}
  group: GRPSERIAL
test_pr64769_617:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr64769.c'
    sources: {binary: pr64769.s, cflags: "-fopenmp-simd\n -S"}
  group: GRPSERIAL
test_pr64769_74:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr64769.c'
    sources: {binary: pr64769.s, cflags: "-fopenmp-simd\n -S"}
  group: GRPSERIAL
test_pr64769_870:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr64769.c'
    sources: {binary: pr64769.s, cflags: "-std=gnu++98 -fopenmp-simd\n -S"}
  group: GRPSERIAL
test_pr64769_871:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr64769.c'
    sources: {binary: pr64769.s, cflags: "-std=gnu++11 -fopenmp-simd\n -S"}
  group: GRPSERIAL
test_pr64769_872:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr64769.c'
    sources: {binary: pr64769.s, cflags: "-std=gnu++14 -fopenmp-simd\n -S"}
  group: GRPSERIAL
test_pr66429_184:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr66429.c'
    sources: {binary: pr66429.s, cflags: "-O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr66429_439:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr66429.c'
    sources: {binary: pr66429.s, cflags: "-std=gnu++98 -O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr66429_440:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr66429.c'
    sources: {binary: pr66429.s, cflags: "-std=gnu++11 -O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr66429_441:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr66429.c'
    sources: {binary: pr66429.s, cflags: "-std=gnu++14 -O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr66429_618:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr66429.c'
    sources: {binary: pr66429.s, cflags: "-O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr66429_75:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr66429.c'
    sources: {binary: pr66429.s, cflags: "-O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr66429_873:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr66429.c'
    sources: {binary: pr66429.s, cflags: "-std=gnu++98 -O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr66429_874:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr66429.c'
    sources: {binary: pr66429.s, cflags: "-std=gnu++11 -O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr66429_875:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr66429.c'
    sources: {binary: pr66429.s, cflags: "-std=gnu++14 -O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr67501_185:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr67501.c'
    sources: {binary: pr67501.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not valid for")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before
          end of line")[^\n]*\n?)+'}
test_pr67501_442:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr67501.c'
    sources: {binary: pr67501.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not valid for")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before
          end of line")[^\n]*\n?)+'}
test_pr67501_443:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr67501.c'
    sources: {binary: pr67501.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not valid for")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before
          end of line")[^\n]*\n?)+'}
test_pr67501_444:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr67501.c'
    sources: {binary: pr67501.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not valid for")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before
          end of line")[^\n]*\n?)+'}
test_pr67501_619:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr67501.c'
    sources: {binary: pr67501.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not valid for")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before
          end of line")[^\n]*\n?)+'}
test_pr67501_76:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr67501.c'
    sources: {binary: pr67501.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not valid for")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before
          end of line")[^\n]*\n?)+'}
test_pr67501_876:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr67501.c'
    sources: {binary: pr67501.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not valid for")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before
          end of line")[^\n]*\n?)+'}
test_pr67501_877:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr67501.c'
    sources: {binary: pr67501.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not valid for")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before
          end of line")[^\n]*\n?)+'}
test_pr67501_878:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr67501.c'
    sources: {binary: pr67501.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not valid for")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("before
          end of line")[^\n]*\n?)+'}
test_pr67502_186:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr67502.c'
    sources: {binary: pr67502.s, cflags: "-fopenmp -std=c99\n -S"}
  group: GRPSERIAL
test_pr67502_445:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr67502.c'
    sources: {binary: pr67502.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr67502_446:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr67502.c'
    sources: {binary: pr67502.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr67502_447:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr67502.c'
    sources: {binary: pr67502.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr67502_620:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr67502.c'
    sources: {binary: pr67502.s, cflags: "-fopenmp -std=c99\n -S"}
  group: GRPSERIAL
test_pr67502_77:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr67502.c'
    sources: {binary: pr67502.s, cflags: "-fopenmp -std=c99\n -S"}
  group: GRPSERIAL
test_pr67502_879:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr67502.c'
    sources: {binary: pr67502.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr67502_880:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr67502.c'
    sources: {binary: pr67502.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr67502_881:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr67502.c'
    sources: {binary: pr67502.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr67517_187:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr67517.c'
    sources: {binary: pr67517.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr67517_448:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr67517.c'
    sources: {binary: pr67517.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr67517_449:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr67517.c'
    sources: {binary: pr67517.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr67517_450:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr67517.c'
    sources: {binary: pr67517.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr67517_621:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr67517.c'
    sources: {binary: pr67517.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr67517_78:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr67517.c'
    sources: {binary: pr67517.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr67517_882:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr67517.c'
    sources: {binary: pr67517.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr67517_883:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr67517.c'
    sources: {binary: pr67517.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr67517_884:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr67517.c'
    sources: {binary: pr67517.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr67521_188:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr67521.c'
    sources: {binary: pr67521.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
test_pr67521_451:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr67521.c'
    sources: {binary: pr67521.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
test_pr67521_452:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr67521.c'
    sources: {binary: pr67521.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
test_pr67521_453:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr67521.c'
    sources: {binary: pr67521.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
test_pr67521_622:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr67521.c'
    sources: {binary: pr67521.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
test_pr67521_79:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr67521.c'
    sources: {binary: pr67521.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
test_pr67521_885:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr67521.c'
    sources: {binary: pr67521.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
test_pr67521_886:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr67521.c'
    sources: {binary: pr67521.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
test_pr67521_887:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr67521.c'
    sources: {binary: pr67521.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
test_pr70550-1_189:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr70550-1.c'
    sources: {binary: pr70550-1.s, cflags: "-fopenmp -Wno-hsa -Wuninitialized\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L51: {expect: true, expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_pr70550-1_454:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr70550-1.c'
    sources: {binary: pr70550-1.s, cflags: "-std=c++98 -fopenmp -Wno-hsa -Wuninitialized\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L51: {expect: true, expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_pr70550-1_455:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr70550-1.c'
    sources: {binary: pr70550-1.s, cflags: "-std=c++11 -fopenmp -Wno-hsa -Wuninitialized\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L51: {expect: true, expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_pr70550-1_456:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr70550-1.c'
    sources: {binary: pr70550-1.s, cflags: "-std=c++14 -fopenmp -Wno-hsa -Wuninitialized\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L51: {expect: true, expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_pr70550-1_623:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr70550-1.c'
    sources: {binary: pr70550-1.s, cflags: "-fopenmp -Wno-hsa -Wuninitialized\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L51: {expect: true, expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_pr70550-1_80:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr70550-1.c'
    sources: {binary: pr70550-1.s, cflags: "-fopenmp -Wno-hsa -Wuninitialized\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L51: {expect: true, expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_pr70550-1_888:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr70550-1.c'
    sources: {binary: pr70550-1.s, cflags: "-std=c++98 -fopenmp -Wno-hsa -Wuninitialized\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L51: {expect: true, expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_pr70550-1_889:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr70550-1.c'
    sources: {binary: pr70550-1.s, cflags: "-std=c++11 -fopenmp -Wno-hsa -Wuninitialized\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L51: {expect: true, expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_pr70550-1_890:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr70550-1.c'
    sources: {binary: pr70550-1.s, cflags: "-std=c++14 -fopenmp -Wno-hsa -Wuninitialized\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L51: {expect: true, expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_pr70550-2_190:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr70550-2.c'
    sources: {binary: pr70550-2.s, cflags: "-fopenmp -Wno-hsa -Wuninitialized\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_pr70550-2_457:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr70550-2.c'
    sources: {binary: pr70550-2.s, cflags: "-std=c++98 -fopenmp -Wno-hsa -Wuninitialized\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_pr70550-2_458:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr70550-2.c'
    sources: {binary: pr70550-2.s, cflags: "-std=c++11 -fopenmp -Wno-hsa -Wuninitialized\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_pr70550-2_459:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr70550-2.c'
    sources: {binary: pr70550-2.s, cflags: "-std=c++14 -fopenmp -Wno-hsa -Wuninitialized\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_pr70550-2_624:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr70550-2.c'
    sources: {binary: pr70550-2.s, cflags: "-fopenmp -Wno-hsa -Wuninitialized\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_pr70550-2_81:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr70550-2.c'
    sources: {binary: pr70550-2.s, cflags: "-fopenmp -Wno-hsa -Wuninitialized\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_pr70550-2_891:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr70550-2.c'
    sources: {binary: pr70550-2.s, cflags: "-std=c++98 -fopenmp -Wno-hsa -Wuninitialized\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_pr70550-2_892:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr70550-2.c'
    sources: {binary: pr70550-2.s, cflags: "-std=c++11 -fopenmp -Wno-hsa -Wuninitialized\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_pr70550-2_893:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr70550-2.c'
    sources: {binary: pr70550-2.s, cflags: "-std=c++14 -fopenmp -Wno-hsa -Wuninitialized\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized in this function")[^\n]*\n?)+'}
test_pr71371_191:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr71371.c'
    sources: {binary: pr71371.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr71371_460:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr71371.c'
    sources: {binary: pr71371.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr71371_461:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr71371.c'
    sources: {binary: pr71371.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr71371_462:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr71371.c'
    sources: {binary: pr71371.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr71371_625:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr71371.c'
    sources: {binary: pr71371.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr71371_82:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr71371.c'
    sources: {binary: pr71371.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr71371_894:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr71371.c'
    sources: {binary: pr71371.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr71371_895:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr71371.c'
    sources: {binary: pr71371.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr71371_896:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr71371.c'
    sources: {binary: pr71371.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr71758_192:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr71758.c'
    sources: {binary: pr71758.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr71758_463:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr71758.c'
    sources: {binary: pr71758.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr71758_464:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr71758.c'
    sources: {binary: pr71758.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr71758_465:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr71758.c'
    sources: {binary: pr71758.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr71758_626:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr71758.c'
    sources: {binary: pr71758.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr71758_83:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr71758.c'
    sources: {binary: pr71758.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr71758_897:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr71758.c'
    sources: {binary: pr71758.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr71758_898:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr71758.c'
    sources: {binary: pr71758.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr71758_899:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr71758.c'
    sources: {binary: pr71758.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr79428-2_193:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79428-2.c'
    sources: {binary: pr79428-2.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''#pragma
          omp section\'' may only be used in \''#pragma omp sections\'' construct|not
          allowed|expected")[^\n]*\n?)+'}
test_pr79428-2_466:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79428-2.c'
    sources: {binary: pr79428-2.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''#pragma
          omp section\'' may only be used in \''#pragma omp sections\'' construct|not
          allowed|expected")[^\n]*\n?)+'}
test_pr79428-2_467:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79428-2.c'
    sources: {binary: pr79428-2.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''#pragma
          omp section\'' may only be used in \''#pragma omp sections\'' construct|not
          allowed|expected")[^\n]*\n?)+'}
test_pr79428-2_468:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79428-2.c'
    sources: {binary: pr79428-2.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''#pragma
          omp section\'' may only be used in \''#pragma omp sections\'' construct|not
          allowed|expected")[^\n]*\n?)+'}
test_pr79428-2_627:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79428-2.c'
    sources: {binary: pr79428-2.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''#pragma
          omp section\'' may only be used in \''#pragma omp sections\'' construct|not
          allowed|expected")[^\n]*\n?)+'}
test_pr79428-2_84:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79428-2.c'
    sources: {binary: pr79428-2.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''#pragma
          omp section\'' may only be used in \''#pragma omp sections\'' construct|not
          allowed|expected")[^\n]*\n?)+'}
test_pr79428-2_900:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79428-2.c'
    sources: {binary: pr79428-2.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''#pragma
          omp section\'' may only be used in \''#pragma omp sections\'' construct|not
          allowed|expected")[^\n]*\n?)+'}
test_pr79428-2_901:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79428-2.c'
    sources: {binary: pr79428-2.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''#pragma
          omp section\'' may only be used in \''#pragma omp sections\'' construct|not
          allowed|expected")[^\n]*\n?)+'}
test_pr79428-2_902:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79428-2.c'
    sources: {binary: pr79428-2.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''#pragma
          omp section\'' may only be used in \''#pragma omp sections\'' construct|not
          allowed|expected")[^\n]*\n?)+'}
test_pr79428-5_194:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79428-5.c'
    sources: {binary: pr79428-5.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L3: {expect: true, expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before end of line")[^\n]*\n?)+'}
test_pr79428-5_469:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79428-5.c'
    sources: {binary: pr79428-5.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L3: {expect: true, expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before end of line")[^\n]*\n?)+'}
test_pr79428-5_470:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79428-5.c'
    sources: {binary: pr79428-5.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L3: {expect: true, expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before end of line")[^\n]*\n?)+'}
test_pr79428-5_471:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79428-5.c'
    sources: {binary: pr79428-5.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L3: {expect: true, expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before end of line")[^\n]*\n?)+'}
test_pr79428-5_628:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79428-5.c'
    sources: {binary: pr79428-5.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L3: {expect: true, expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before end of line")[^\n]*\n?)+'}
test_pr79428-5_85:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79428-5.c'
    sources: {binary: pr79428-5.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L3: {expect: true, expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before end of line")[^\n]*\n?)+'}
test_pr79428-5_903:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79428-5.c'
    sources: {binary: pr79428-5.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L3: {expect: true, expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before end of line")[^\n]*\n?)+'}
test_pr79428-5_904:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79428-5.c'
    sources: {binary: pr79428-5.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L3: {expect: true, expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before end of line")[^\n]*\n?)+'}
test_pr79428-5_905:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79428-5.c'
    sources: {binary: pr79428-5.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L3: {expect: true, expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before end of line")[^\n]*\n?)+'}
test_pr79428-6_195:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79428-6.c'
    sources: {binary: pr79428-6.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L3: {expect: true, expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before end of line")[^\n]*\n?)+'}
test_pr79428-6_472:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79428-6.c'
    sources: {binary: pr79428-6.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L3: {expect: true, expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before end of line")[^\n]*\n?)+'}
test_pr79428-6_473:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79428-6.c'
    sources: {binary: pr79428-6.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L3: {expect: true, expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before end of line")[^\n]*\n?)+'}
test_pr79428-6_474:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79428-6.c'
    sources: {binary: pr79428-6.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L3: {expect: true, expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before end of line")[^\n]*\n?)+'}
test_pr79428-6_629:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79428-6.c'
    sources: {binary: pr79428-6.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L3: {expect: true, expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before end of line")[^\n]*\n?)+'}
test_pr79428-6_86:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79428-6.c'
    sources: {binary: pr79428-6.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L3: {expect: true, expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before end of line")[^\n]*\n?)+'}
test_pr79428-6_906:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79428-6.c'
    sources: {binary: pr79428-6.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L3: {expect: true, expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before end of line")[^\n]*\n?)+'}
test_pr79428-6_907:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79428-6.c'
    sources: {binary: pr79428-6.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L3: {expect: true, expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before end of line")[^\n]*\n?)+'}
test_pr79428-6_908:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79428-6.c'
    sources: {binary: pr79428-6.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L3: {expect: true, expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before end of line")[^\n]*\n?)+'}
test_pr79429_196:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79429.c'
    sources: {binary: pr79429.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L3: {expect: true, expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers")[^\n]*\n?)+'}
test_pr79429_475:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79429.c'
    sources: {binary: pr79429.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L3: {expect: true, expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers")[^\n]*\n?)+'}
test_pr79429_476:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79429.c'
    sources: {binary: pr79429.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L3: {expect: true, expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers")[^\n]*\n?)+'}
test_pr79429_477:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79429.c'
    sources: {binary: pr79429.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L3: {expect: true, expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers")[^\n]*\n?)+'}
test_pr79429_630:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79429.c'
    sources: {binary: pr79429.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L3: {expect: true, expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers")[^\n]*\n?)+'}
test_pr79429_87:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79429.c'
    sources: {binary: pr79429.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L3: {expect: true, expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers")[^\n]*\n?)+'}
test_pr79429_909:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79429.c'
    sources: {binary: pr79429.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L3: {expect: true, expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers")[^\n]*\n?)+'}
test_pr79429_910:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79429.c'
    sources: {binary: pr79429.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L3: {expect: true, expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers")[^\n]*\n?)+'}
test_pr79429_911:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79429.c'
    sources: {binary: pr79429.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L3: {expect: true, expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers")[^\n]*\n?)+'}
test_pr79431_197:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79431.c'
    sources: {binary: pr79431.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr79431_478:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79431.c'
    sources: {binary: pr79431.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr79431_479:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79431.c'
    sources: {binary: pr79431.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr79431_480:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79431.c'
    sources: {binary: pr79431.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr79431_631:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79431.c'
    sources: {binary: pr79431.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr79431_88:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79431.c'
    sources: {binary: pr79431.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr79431_912:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79431.c'
    sources: {binary: pr79431.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr79431_913:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79431.c'
    sources: {binary: pr79431.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr79431_914:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79431.c'
    sources: {binary: pr79431.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr79512_198:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79512.c'
    sources: {binary: pr79512.s, cflags: "-fopenmp-simd\n -S"}
  group: GRPSERIAL
test_pr79512_481:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79512.c'
    sources: {binary: pr79512.s, cflags: "-std=gnu++98 -fopenmp-simd\n -S"}
  group: GRPSERIAL
test_pr79512_482:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79512.c'
    sources: {binary: pr79512.s, cflags: "-std=gnu++11 -fopenmp-simd\n -S"}
  group: GRPSERIAL
test_pr79512_483:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79512.c'
    sources: {binary: pr79512.s, cflags: "-std=gnu++14 -fopenmp-simd\n -S"}
  group: GRPSERIAL
test_pr79512_632:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79512.c'
    sources: {binary: pr79512.s, cflags: "-fopenmp-simd\n -S"}
  group: GRPSERIAL
test_pr79512_89:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79512.c'
    sources: {binary: pr79512.s, cflags: "-fopenmp-simd\n -S"}
  group: GRPSERIAL
test_pr79512_915:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79512.c'
    sources: {binary: pr79512.s, cflags: "-std=gnu++98 -fopenmp-simd\n -S"}
  group: GRPSERIAL
test_pr79512_916:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79512.c'
    sources: {binary: pr79512.s, cflags: "-std=gnu++11 -fopenmp-simd\n -S"}
  group: GRPSERIAL
test_pr79512_917:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr79512.c'
    sources: {binary: pr79512.s, cflags: "-std=gnu++14 -fopenmp-simd\n -S"}
  group: GRPSERIAL
test_pr81006_199:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr81006.c'
    sources: {binary: pr81006.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section in .depend. clause")[^\n]*\n?)+'}
test_pr81006_484:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr81006.c'
    sources: {binary: pr81006.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section in .depend. clause")[^\n]*\n?)+'}
test_pr81006_485:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr81006.c'
    sources: {binary: pr81006.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section in .depend. clause")[^\n]*\n?)+'}
test_pr81006_486:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr81006.c'
    sources: {binary: pr81006.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section in .depend. clause")[^\n]*\n?)+'}
test_pr81006_633:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr81006.c'
    sources: {binary: pr81006.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section in .depend. clause")[^\n]*\n?)+'}
test_pr81006_90:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr81006.c'
    sources: {binary: pr81006.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section in .depend. clause")[^\n]*\n?)+'}
test_pr81006_918:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr81006.c'
    sources: {binary: pr81006.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section in .depend. clause")[^\n]*\n?)+'}
test_pr81006_919:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr81006.c'
    sources: {binary: pr81006.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section in .depend. clause")[^\n]*\n?)+'}
test_pr81006_920:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/pr81006.c'
    sources: {binary: pr81006.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section in .depend. clause")[^\n]*\n?)+'}
test_priority-1_200:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/priority-1.c'
    sources: {binary: priority-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_priority-1_487:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/priority-1.c'
    sources: {binary: priority-1.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_priority-1_488:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/priority-1.c'
    sources: {binary: priority-1.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_priority-1_489:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/priority-1.c'
    sources: {binary: priority-1.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_priority-1_634:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/priority-1.c'
    sources: {binary: priority-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_priority-1_91:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/priority-1.c'
    sources: {binary: priority-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_priority-1_921:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/priority-1.c'
    sources: {binary: priority-1.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_priority-1_922:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/priority-1.c'
    sources: {binary: priority-1.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_priority-1_923:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/priority-1.c'
    sources: {binary: priority-1.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_reduction-1_201:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/reduction-1.c'
    sources: {binary: reduction-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section|for unknown bound array type length expression must
          be specified")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section|for unknown bound array type length expression must
          be specified")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          a zero size array")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          unknown bound array type length expression must be specified")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          pointer type length expression must be specified")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("above
          array section size")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          incomplete type")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          an incomplete type|invalid use of array with unspecified bounds")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          an incomplete type|invalid use of array with unspecified bounds")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          incomplete type")[^\n]*\n?)+'}
test_reduction-1_490:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/reduction-1.c'
    sources: {binary: reduction-1.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section|for unknown bound array type length expression must
          be specified")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section|for unknown bound array type length expression must
          be specified")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          a zero size array")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          unknown bound array type length expression must be specified")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          pointer type length expression must be specified")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("above
          array section size")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          incomplete type")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          an incomplete type|invalid use of array with unspecified bounds")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          an incomplete type|invalid use of array with unspecified bounds")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          incomplete type")[^\n]*\n?)+'}
test_reduction-1_491:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/reduction-1.c'
    sources: {binary: reduction-1.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section|for unknown bound array type length expression must
          be specified")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section|for unknown bound array type length expression must
          be specified")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          a zero size array")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          unknown bound array type length expression must be specified")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          pointer type length expression must be specified")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("above
          array section size")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          incomplete type")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          an incomplete type|invalid use of array with unspecified bounds")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          an incomplete type|invalid use of array with unspecified bounds")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          incomplete type")[^\n]*\n?)+'}
test_reduction-1_492:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/reduction-1.c'
    sources: {binary: reduction-1.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section|for unknown bound array type length expression must
          be specified")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section|for unknown bound array type length expression must
          be specified")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          a zero size array")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          unknown bound array type length expression must be specified")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          pointer type length expression must be specified")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("above
          array section size")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          incomplete type")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          an incomplete type|invalid use of array with unspecified bounds")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          an incomplete type|invalid use of array with unspecified bounds")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          incomplete type")[^\n]*\n?)+'}
test_reduction-1_635:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/reduction-1.c'
    sources: {binary: reduction-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section|for unknown bound array type length expression must
          be specified")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section|for unknown bound array type length expression must
          be specified")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          a zero size array")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          unknown bound array type length expression must be specified")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          pointer type length expression must be specified")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("above
          array section size")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          incomplete type")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          an incomplete type|invalid use of array with unspecified bounds")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          an incomplete type|invalid use of array with unspecified bounds")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          incomplete type")[^\n]*\n?)+'}
test_reduction-1_92:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/reduction-1.c'
    sources: {binary: reduction-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section|for unknown bound array type length expression must
          be specified")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section|for unknown bound array type length expression must
          be specified")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          a zero size array")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          unknown bound array type length expression must be specified")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          pointer type length expression must be specified")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("above
          array section size")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          incomplete type")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          an incomplete type|invalid use of array with unspecified bounds")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          an incomplete type|invalid use of array with unspecified bounds")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          incomplete type")[^\n]*\n?)+'}
test_reduction-1_924:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/reduction-1.c'
    sources: {binary: reduction-1.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section|for unknown bound array type length expression must
          be specified")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section|for unknown bound array type length expression must
          be specified")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          a zero size array")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          unknown bound array type length expression must be specified")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          pointer type length expression must be specified")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("above
          array section size")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          incomplete type")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          an incomplete type|invalid use of array with unspecified bounds")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          an incomplete type|invalid use of array with unspecified bounds")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          incomplete type")[^\n]*\n?)+'}
test_reduction-1_925:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/reduction-1.c'
    sources: {binary: reduction-1.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section|for unknown bound array type length expression must
          be specified")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section|for unknown bound array type length expression must
          be specified")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          a zero size array")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          unknown bound array type length expression must be specified")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          pointer type length expression must be specified")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("above
          array section size")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          incomplete type")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          an incomplete type|invalid use of array with unspecified bounds")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          an incomplete type|invalid use of array with unspecified bounds")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          incomplete type")[^\n]*\n?)+'}
test_reduction-1_926:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/reduction-1.c'
    sources: {binary: reduction-1.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section|for unknown bound array type length expression must
          be specified")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section|for unknown bound array type length expression must
          be specified")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          a zero size array")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low
          bound \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length
          \\[^\\n\\r]* of array section does not have integral type")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          unknown bound array type length expression must be specified")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          pointer type length expression must be specified")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("above
          array section size")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          incomplete type")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          section is not contiguous")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          an incomplete type|invalid use of array with unspecified bounds")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          an incomplete type|invalid use of array with unspecified bounds")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          incomplete type")[^\n]*\n?)+'}
test_schedule-1_202:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/schedule-1.c'
    sources: {binary: schedule-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("chunk
          size value must be positive")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("chunk
          size value must be positive")[^\n]*\n?)+'}
test_schedule-1_493:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/schedule-1.c'
    sources: {binary: schedule-1.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("chunk
          size value must be positive")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("chunk
          size value must be positive")[^\n]*\n?)+'}
test_schedule-1_494:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/schedule-1.c'
    sources: {binary: schedule-1.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("chunk
          size value must be positive")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("chunk
          size value must be positive")[^\n]*\n?)+'}
test_schedule-1_495:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/schedule-1.c'
    sources: {binary: schedule-1.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("chunk
          size value must be positive")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("chunk
          size value must be positive")[^\n]*\n?)+'}
test_schedule-1_636:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/schedule-1.c'
    sources: {binary: schedule-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("chunk
          size value must be positive")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("chunk
          size value must be positive")[^\n]*\n?)+'}
test_schedule-1_927:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/schedule-1.c'
    sources: {binary: schedule-1.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("chunk
          size value must be positive")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("chunk
          size value must be positive")[^\n]*\n?)+'}
test_schedule-1_928:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/schedule-1.c'
    sources: {binary: schedule-1.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("chunk
          size value must be positive")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("chunk
          size value must be positive")[^\n]*\n?)+'}
test_schedule-1_929:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/schedule-1.c'
    sources: {binary: schedule-1.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("chunk
          size value must be positive")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("chunk
          size value must be positive")[^\n]*\n?)+'}
test_schedule-1_93:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/schedule-1.c'
    sources: {binary: schedule-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("chunk
          size value must be positive")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("chunk
          size value must be positive")[^\n]*\n?)+'}
test_schedule-modifiers-1_203:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/schedule-modifiers-1.c'
    sources: {binary: schedule-modifiers-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L103: {expect: true, expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("both
          .monotonic. and .nonmonotonic. modifiers specified")[^\n]*\n?)+'}
      L106: {expect: true, expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("both
          .monotonic. and .nonmonotonic. modifiers specified")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          modifier specified for .static. schedule kind")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          modifier specified for .static. schedule kind")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          modifier specified for .runtime. schedule kind")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          modifier specified for .auto. schedule kind")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          schedule modifier specified together with .ordered. clause")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          schedule modifier specified together with .ordered. clause")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          schedule modifier specified together with .ordered. clause")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          schedule modifier specified together with .ordered. clause")[^\n]*\n?)+'}
test_schedule-modifiers-1_496:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/schedule-modifiers-1.c'
    sources: {binary: schedule-modifiers-1.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L103: {expect: true, expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("both
          .monotonic. and .nonmonotonic. modifiers specified")[^\n]*\n?)+'}
      L106: {expect: true, expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("both
          .monotonic. and .nonmonotonic. modifiers specified")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          modifier specified for .static. schedule kind")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          modifier specified for .static. schedule kind")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          modifier specified for .runtime. schedule kind")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          modifier specified for .auto. schedule kind")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          schedule modifier specified together with .ordered. clause")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          schedule modifier specified together with .ordered. clause")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          schedule modifier specified together with .ordered. clause")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          schedule modifier specified together with .ordered. clause")[^\n]*\n?)+'}
test_schedule-modifiers-1_497:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/schedule-modifiers-1.c'
    sources: {binary: schedule-modifiers-1.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L103: {expect: true, expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("both
          .monotonic. and .nonmonotonic. modifiers specified")[^\n]*\n?)+'}
      L106: {expect: true, expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("both
          .monotonic. and .nonmonotonic. modifiers specified")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          modifier specified for .static. schedule kind")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          modifier specified for .static. schedule kind")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          modifier specified for .runtime. schedule kind")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          modifier specified for .auto. schedule kind")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          schedule modifier specified together with .ordered. clause")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          schedule modifier specified together with .ordered. clause")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          schedule modifier specified together with .ordered. clause")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          schedule modifier specified together with .ordered. clause")[^\n]*\n?)+'}
test_schedule-modifiers-1_498:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/schedule-modifiers-1.c'
    sources: {binary: schedule-modifiers-1.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L103: {expect: true, expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("both
          .monotonic. and .nonmonotonic. modifiers specified")[^\n]*\n?)+'}
      L106: {expect: true, expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("both
          .monotonic. and .nonmonotonic. modifiers specified")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          modifier specified for .static. schedule kind")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          modifier specified for .static. schedule kind")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          modifier specified for .runtime. schedule kind")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          modifier specified for .auto. schedule kind")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          schedule modifier specified together with .ordered. clause")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          schedule modifier specified together with .ordered. clause")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          schedule modifier specified together with .ordered. clause")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          schedule modifier specified together with .ordered. clause")[^\n]*\n?)+'}
test_schedule-modifiers-1_637:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/schedule-modifiers-1.c'
    sources: {binary: schedule-modifiers-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L103: {expect: true, expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("both
          .monotonic. and .nonmonotonic. modifiers specified")[^\n]*\n?)+'}
      L106: {expect: true, expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("both
          .monotonic. and .nonmonotonic. modifiers specified")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          modifier specified for .static. schedule kind")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          modifier specified for .static. schedule kind")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          modifier specified for .runtime. schedule kind")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          modifier specified for .auto. schedule kind")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          schedule modifier specified together with .ordered. clause")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          schedule modifier specified together with .ordered. clause")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          schedule modifier specified together with .ordered. clause")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          schedule modifier specified together with .ordered. clause")[^\n]*\n?)+'}
test_schedule-modifiers-1_930:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/schedule-modifiers-1.c'
    sources: {binary: schedule-modifiers-1.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L103: {expect: true, expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("both
          .monotonic. and .nonmonotonic. modifiers specified")[^\n]*\n?)+'}
      L106: {expect: true, expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("both
          .monotonic. and .nonmonotonic. modifiers specified")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          modifier specified for .static. schedule kind")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          modifier specified for .static. schedule kind")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          modifier specified for .runtime. schedule kind")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          modifier specified for .auto. schedule kind")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          schedule modifier specified together with .ordered. clause")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          schedule modifier specified together with .ordered. clause")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          schedule modifier specified together with .ordered. clause")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          schedule modifier specified together with .ordered. clause")[^\n]*\n?)+'}
test_schedule-modifiers-1_931:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/schedule-modifiers-1.c'
    sources: {binary: schedule-modifiers-1.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L103: {expect: true, expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("both
          .monotonic. and .nonmonotonic. modifiers specified")[^\n]*\n?)+'}
      L106: {expect: true, expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("both
          .monotonic. and .nonmonotonic. modifiers specified")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          modifier specified for .static. schedule kind")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          modifier specified for .static. schedule kind")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          modifier specified for .runtime. schedule kind")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          modifier specified for .auto. schedule kind")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          schedule modifier specified together with .ordered. clause")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          schedule modifier specified together with .ordered. clause")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          schedule modifier specified together with .ordered. clause")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          schedule modifier specified together with .ordered. clause")[^\n]*\n?)+'}
test_schedule-modifiers-1_932:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/schedule-modifiers-1.c'
    sources: {binary: schedule-modifiers-1.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L103: {expect: true, expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("both
          .monotonic. and .nonmonotonic. modifiers specified")[^\n]*\n?)+'}
      L106: {expect: true, expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("both
          .monotonic. and .nonmonotonic. modifiers specified")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          modifier specified for .static. schedule kind")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          modifier specified for .static. schedule kind")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          modifier specified for .runtime. schedule kind")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          modifier specified for .auto. schedule kind")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          schedule modifier specified together with .ordered. clause")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          schedule modifier specified together with .ordered. clause")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          schedule modifier specified together with .ordered. clause")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          schedule modifier specified together with .ordered. clause")[^\n]*\n?)+'}
test_schedule-modifiers-1_94:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/schedule-modifiers-1.c'
    sources: {binary: schedule-modifiers-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L103: {expect: true, expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("both
          .monotonic. and .nonmonotonic. modifiers specified")[^\n]*\n?)+'}
      L106: {expect: true, expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("both
          .monotonic. and .nonmonotonic. modifiers specified")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          modifier specified for .static. schedule kind")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          modifier specified for .static. schedule kind")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          modifier specified for .runtime. schedule kind")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          modifier specified for .auto. schedule kind")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          schedule modifier specified together with .ordered. clause")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          schedule modifier specified together with .ordered. clause")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          schedule modifier specified together with .ordered. clause")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".nonmonotonic.
          schedule modifier specified together with .ordered. clause")[^\n]*\n?)+'}
test_schedule-simd-1_204:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/schedule-simd-1.c'
    sources: {binary: schedule-simd-1.s, cflags: "-fopenmp -O2 -mavx512f\n -S"}
  group: GRPSERIAL
test_schedule-simd-1_499:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/schedule-simd-1.c'
    sources: {binary: schedule-simd-1.s, cflags: "-std=gnu++98 -fopenmp -O2 -mavx512f\n
        -S"}
  group: GRPSERIAL
test_schedule-simd-1_500:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/schedule-simd-1.c'
    sources: {binary: schedule-simd-1.s, cflags: "-std=gnu++11 -fopenmp -O2 -mavx512f\n
        -S"}
  group: GRPSERIAL
test_schedule-simd-1_501:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/schedule-simd-1.c'
    sources: {binary: schedule-simd-1.s, cflags: "-std=gnu++14 -fopenmp -O2 -mavx512f\n
        -S"}
  group: GRPSERIAL
test_schedule-simd-1_638:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/schedule-simd-1.c'
    sources: {binary: schedule-simd-1.s, cflags: "-fopenmp -O2 -mavx512f\n -S"}
  group: GRPSERIAL
test_schedule-simd-1_933:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/schedule-simd-1.c'
    sources: {binary: schedule-simd-1.s, cflags: "-std=gnu++98 -fopenmp -O2 -mavx512f\n
        -S"}
  group: GRPSERIAL
test_schedule-simd-1_934:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/schedule-simd-1.c'
    sources: {binary: schedule-simd-1.s, cflags: "-std=gnu++11 -fopenmp -O2 -mavx512f\n
        -S"}
  group: GRPSERIAL
test_schedule-simd-1_935:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/schedule-simd-1.c'
    sources: {binary: schedule-simd-1.s, cflags: "-std=gnu++14 -fopenmp -O2 -mavx512f\n
        -S"}
  group: GRPSERIAL
test_schedule-simd-1_95:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/schedule-simd-1.c'
    sources: {binary: schedule-simd-1.s, cflags: "-fopenmp -O2 -mavx512f\n -S"}
  group: GRPSERIAL
test_sections1_205:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sections1.c'
    sources: {binary: sections1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          before")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pragma
          omp section")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          before")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pragma
          omp section")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          before")[^\n]*\n?)+'}
test_sections1_502:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sections1.c'
    sources: {binary: sections1.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          before")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pragma
          omp section")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          before")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pragma
          omp section")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          before")[^\n]*\n?)+'}
test_sections1_503:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sections1.c'
    sources: {binary: sections1.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          before")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pragma
          omp section")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          before")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pragma
          omp section")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          before")[^\n]*\n?)+'}
test_sections1_504:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sections1.c'
    sources: {binary: sections1.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          before")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pragma
          omp section")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          before")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pragma
          omp section")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          before")[^\n]*\n?)+'}
test_sections1_639:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sections1.c'
    sources: {binary: sections1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          before")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pragma
          omp section")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          before")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pragma
          omp section")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          before")[^\n]*\n?)+'}
test_sections1_936:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sections1.c'
    sources: {binary: sections1.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          before")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pragma
          omp section")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          before")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pragma
          omp section")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          before")[^\n]*\n?)+'}
test_sections1_937:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sections1.c'
    sources: {binary: sections1.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          before")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pragma
          omp section")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          before")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pragma
          omp section")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          before")[^\n]*\n?)+'}
test_sections1_938:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sections1.c'
    sources: {binary: sections1.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          before")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pragma
          omp section")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          before")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pragma
          omp section")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          before")[^\n]*\n?)+'}
test_sections1_96:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sections1.c'
    sources: {binary: sections1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          before")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pragma
          omp section")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          before")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pragma
          omp section")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression
          before")[^\n]*\n?)+'}
test_simd1_206:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd1.c'
    sources: {binary: simd1.s, cflags: "-fopenmp -std=c99\n -S"}
  group: GRPSERIAL
test_simd1_505:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd1.c'
    sources: {binary: simd1.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
test_simd1_506:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd1.c'
    sources: {binary: simd1.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
test_simd1_507:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd1.c'
    sources: {binary: simd1.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
test_simd1_640:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd1.c'
    sources: {binary: simd1.s, cflags: "-fopenmp -std=c99\n -S"}
  group: GRPSERIAL
test_simd1_939:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd1.c'
    sources: {binary: simd1.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
test_simd1_940:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd1.c'
    sources: {binary: simd1.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
test_simd1_941:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd1.c'
    sources: {binary: simd1.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
test_simd1_97:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd1.c'
    sources: {binary: simd1.s, cflags: "-fopenmp -std=c99\n -S"}
  group: GRPSERIAL
test_simd2_207:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd2.c'
    sources: {binary: simd2.s, cflags: "-fopenmp -std=c99\n -S"}
  group: GRPSERIAL
test_simd2_508:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd2.c'
    sources: {binary: simd2.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
test_simd2_509:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd2.c'
    sources: {binary: simd2.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
test_simd2_510:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd2.c'
    sources: {binary: simd2.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
test_simd2_641:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd2.c'
    sources: {binary: simd2.s, cflags: "-fopenmp -std=c99\n -S"}
  group: GRPSERIAL
test_simd2_942:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd2.c'
    sources: {binary: simd2.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
test_simd2_943:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd2.c'
    sources: {binary: simd2.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
test_simd2_944:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd2.c'
    sources: {binary: simd2.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
test_simd2_98:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd2.c'
    sources: {binary: simd2.s, cflags: "-fopenmp -std=c99\n -S"}
  group: GRPSERIAL
test_simd3_208:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd3.c'
    sources: {binary: simd3.s, cflags: "-fopenmp -std=c99\n -S"}
  group: GRPSERIAL
test_simd3_511:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd3.c'
    sources: {binary: simd3.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
test_simd3_512:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd3.c'
    sources: {binary: simd3.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
test_simd3_513:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd3.c'
    sources: {binary: simd3.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
test_simd3_642:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd3.c'
    sources: {binary: simd3.s, cflags: "-fopenmp -std=c99\n -S"}
  group: GRPSERIAL
test_simd3_945:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd3.c'
    sources: {binary: simd3.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
test_simd3_946:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd3.c'
    sources: {binary: simd3.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
test_simd3_947:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd3.c'
    sources: {binary: simd3.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
test_simd3_99:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd3.c'
    sources: {binary: simd3.s, cflags: "-fopenmp -std=c99\n -S"}
  group: GRPSERIAL
test_simd4_100:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd4.c'
    sources: {binary: simd4.s, cflags: "-fopenmp -std=c99\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("step
          expression must be integral")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("linear
          clause applied to")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("(incomplete|undefined)
          type")[^\n]*\n?)+'}
test_simd4_209:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd4.c'
    sources: {binary: simd4.s, cflags: "-fopenmp -std=c99\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("step
          expression must be integral")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("linear
          clause applied to")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("(incomplete|undefined)
          type")[^\n]*\n?)+'}
test_simd4_514:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd4.c'
    sources: {binary: simd4.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("step
          expression must be integral")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("linear
          clause applied to")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("(incomplete|undefined)
          type")[^\n]*\n?)+'}
test_simd4_515:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd4.c'
    sources: {binary: simd4.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("step
          expression must be integral")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("linear
          clause applied to")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("(incomplete|undefined)
          type")[^\n]*\n?)+'}
test_simd4_516:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd4.c'
    sources: {binary: simd4.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("step
          expression must be integral")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("linear
          clause applied to")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("(incomplete|undefined)
          type")[^\n]*\n?)+'}
test_simd4_643:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd4.c'
    sources: {binary: simd4.s, cflags: "-fopenmp -std=c99\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("step
          expression must be integral")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("linear
          clause applied to")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("(incomplete|undefined)
          type")[^\n]*\n?)+'}
test_simd4_948:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd4.c'
    sources: {binary: simd4.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("step
          expression must be integral")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("linear
          clause applied to")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("(incomplete|undefined)
          type")[^\n]*\n?)+'}
test_simd4_949:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd4.c'
    sources: {binary: simd4.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("step
          expression must be integral")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("linear
          clause applied to")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("(incomplete|undefined)
          type")[^\n]*\n?)+'}
test_simd4_950:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd4.c'
    sources: {binary: simd4.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("step
          expression must be integral")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("linear
          clause applied to")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("(incomplete|undefined)
          type")[^\n]*\n?)+'}
test_simd5_101:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd5.c'
    sources: {binary: simd5.s, cflags: "-fopenmp -std=c99\n -S"}
  group: GRPSERIAL
test_simd5_210:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd5.c'
    sources: {binary: simd5.s, cflags: "-fopenmp -std=c99\n -S"}
  group: GRPSERIAL
test_simd5_517:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd5.c'
    sources: {binary: simd5.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
test_simd5_518:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd5.c'
    sources: {binary: simd5.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
test_simd5_519:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd5.c'
    sources: {binary: simd5.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
test_simd5_644:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd5.c'
    sources: {binary: simd5.s, cflags: "-fopenmp -std=c99\n -S"}
  group: GRPSERIAL
test_simd5_951:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd5.c'
    sources: {binary: simd5.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
test_simd5_952:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd5.c'
    sources: {binary: simd5.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
test_simd5_953:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd5.c'
    sources: {binary: simd5.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
test_simd6_102:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd6.c'
    sources: {binary: simd6.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither
          a pointer nor an array")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither
          a pointer nor an array")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither
          a pointer nor an array")[^\n]*\n?)+'}
test_simd6_211:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd6.c'
    sources: {binary: simd6.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither
          a pointer nor an array")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither
          a pointer nor an array")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither
          a pointer nor an array")[^\n]*\n?)+'}
test_simd6_520:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd6.c'
    sources: {binary: simd6.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither
          a pointer nor an array")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither
          a pointer nor an array")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither
          a pointer nor an array")[^\n]*\n?)+'}
test_simd6_521:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd6.c'
    sources: {binary: simd6.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither
          a pointer nor an array")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither
          a pointer nor an array")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither
          a pointer nor an array")[^\n]*\n?)+'}
test_simd6_522:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd6.c'
    sources: {binary: simd6.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither
          a pointer nor an array")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither
          a pointer nor an array")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither
          a pointer nor an array")[^\n]*\n?)+'}
test_simd6_645:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd6.c'
    sources: {binary: simd6.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither
          a pointer nor an array")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither
          a pointer nor an array")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither
          a pointer nor an array")[^\n]*\n?)+'}
test_simd6_954:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd6.c'
    sources: {binary: simd6.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither
          a pointer nor an array")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither
          a pointer nor an array")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither
          a pointer nor an array")[^\n]*\n?)+'}
test_simd6_955:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd6.c'
    sources: {binary: simd6.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither
          a pointer nor an array")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither
          a pointer nor an array")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither
          a pointer nor an array")[^\n]*\n?)+'}
test_simd6_956:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/simd6.c'
    sources: {binary: simd6.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither
          a pointer nor an array")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither
          a pointer nor an array")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither
          a pointer nor an array")[^\n]*\n?)+'}
test_single1_103:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/single1.c'
    sources: {binary: single1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must not be used together with")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must not be used together with")[^\n]*\n?)+'}
test_single1_212:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/single1.c'
    sources: {binary: single1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must not be used together with")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must not be used together with")[^\n]*\n?)+'}
test_single1_523:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/single1.c'
    sources: {binary: single1.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must not be used together with")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must not be used together with")[^\n]*\n?)+'}
test_single1_524:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/single1.c'
    sources: {binary: single1.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must not be used together with")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must not be used together with")[^\n]*\n?)+'}
test_single1_525:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/single1.c'
    sources: {binary: single1.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must not be used together with")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must not be used together with")[^\n]*\n?)+'}
test_single1_646:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/single1.c'
    sources: {binary: single1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must not be used together with")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must not be used together with")[^\n]*\n?)+'}
test_single1_957:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/single1.c'
    sources: {binary: single1.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must not be used together with")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must not be used together with")[^\n]*\n?)+'}
test_single1_958:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/single1.c'
    sources: {binary: single1.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must not be used together with")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must not be used together with")[^\n]*\n?)+'}
test_single1_959:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/single1.c'
    sources: {binary: single1.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must not be used together with")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          must not be used together with")[^\n]*\n?)+'}
test_sink-1_104:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sink-1.c'
    sources: {binary: sink-1.s, cflags: "-fopenmp -Wunknown-pragmas -Werror\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          depend kind")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          allowed in \''omp ordered\''")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''depend\''
          clause must be closely nested")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not match number of iteration var")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not match number of iteration variables")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not an iteration")[^\n]*\n?)+'}
test_sink-1_213:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sink-1.c'
    sources: {binary: sink-1.s, cflags: "-fopenmp -Wunknown-pragmas -Werror\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          depend kind")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          allowed in \''omp ordered\''")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''depend\''
          clause must be closely nested")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not match number of iteration var")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not match number of iteration variables")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not an iteration")[^\n]*\n?)+'}
test_sink-1_526:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sink-1.c'
    sources: {binary: sink-1.s, cflags: "-std=gnu++98 -fopenmp -Wunknown-pragmas -Werror\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          depend kind")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          allowed in \''omp ordered\''")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''depend\''
          clause must be closely nested")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not match number of iteration var")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not match number of iteration variables")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not an iteration")[^\n]*\n?)+'}
test_sink-1_527:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sink-1.c'
    sources: {binary: sink-1.s, cflags: "-std=gnu++11 -fopenmp -Wunknown-pragmas -Werror\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          depend kind")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          allowed in \''omp ordered\''")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''depend\''
          clause must be closely nested")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not match number of iteration var")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not match number of iteration variables")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not an iteration")[^\n]*\n?)+'}
test_sink-1_528:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sink-1.c'
    sources: {binary: sink-1.s, cflags: "-std=gnu++14 -fopenmp -Wunknown-pragmas -Werror\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          depend kind")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          allowed in \''omp ordered\''")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''depend\''
          clause must be closely nested")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not match number of iteration var")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not match number of iteration variables")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not an iteration")[^\n]*\n?)+'}
test_sink-1_647:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sink-1.c'
    sources: {binary: sink-1.s, cflags: "-fopenmp -Wunknown-pragmas -Werror\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          depend kind")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          allowed in \''omp ordered\''")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''depend\''
          clause must be closely nested")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not match number of iteration var")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not match number of iteration variables")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not an iteration")[^\n]*\n?)+'}
test_sink-1_960:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sink-1.c'
    sources: {binary: sink-1.s, cflags: "-std=gnu++98 -fopenmp -Wunknown-pragmas -Werror\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          depend kind")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          allowed in \''omp ordered\''")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''depend\''
          clause must be closely nested")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not match number of iteration var")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not match number of iteration variables")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not an iteration")[^\n]*\n?)+'}
test_sink-1_961:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sink-1.c'
    sources: {binary: sink-1.s, cflags: "-std=gnu++11 -fopenmp -Wunknown-pragmas -Werror\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          depend kind")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          allowed in \''omp ordered\''")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''depend\''
          clause must be closely nested")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not match number of iteration var")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not match number of iteration variables")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not an iteration")[^\n]*\n?)+'}
test_sink-1_962:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sink-1.c'
    sources: {binary: sink-1.s, cflags: "-std=gnu++14 -fopenmp -Wunknown-pragmas -Werror\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          depend kind")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          allowed in \''omp ordered\''")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''depend\''
          clause must be closely nested")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not match number of iteration var")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not match number of iteration variables")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not an iteration")[^\n]*\n?)+'}
test_sink-2_105:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sink-2.c'
    sources: {binary: sink-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_sink-2_214:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sink-2.c'
    sources: {binary: sink-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_sink-2_529:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sink-2.c'
    sources: {binary: sink-2.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_sink-2_530:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sink-2.c'
    sources: {binary: sink-2.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_sink-2_531:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sink-2.c'
    sources: {binary: sink-2.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_sink-2_648:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sink-2.c'
    sources: {binary: sink-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_sink-2_963:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sink-2.c'
    sources: {binary: sink-2.s, cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_sink-2_964:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sink-2.c'
    sources: {binary: sink-2.s, cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_sink-2_965:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sink-2.c'
    sources: {binary: sink-2.s, cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_sink-3_106:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sink-3.c'
    sources: {binary: sink-3.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("poo.*declared.*paa.*declared")[^\n]*\n?)+'}
test_sink-3_215:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sink-3.c'
    sources: {binary: sink-3.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("poo.*declared.*paa.*declared")[^\n]*\n?)+'}
test_sink-3_532:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sink-3.c'
    sources: {binary: sink-3.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("poo.*declared.*paa.*declared")[^\n]*\n?)+'}
test_sink-3_533:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sink-3.c'
    sources: {binary: sink-3.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("poo.*declared.*paa.*declared")[^\n]*\n?)+'}
test_sink-3_534:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sink-3.c'
    sources: {binary: sink-3.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("poo.*declared.*paa.*declared")[^\n]*\n?)+'}
test_sink-3_649:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sink-3.c'
    sources: {binary: sink-3.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("poo.*declared.*paa.*declared")[^\n]*\n?)+'}
test_sink-3_966:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sink-3.c'
    sources: {binary: sink-3.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("poo.*declared.*paa.*declared")[^\n]*\n?)+'}
test_sink-3_967:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sink-3.c'
    sources: {binary: sink-3.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("poo.*declared.*paa.*declared")[^\n]*\n?)+'}
test_sink-3_968:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sink-3.c'
    sources: {binary: sink-3.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("poo.*declared.*paa.*declared")[^\n]*\n?)+'}
test_sink-4_107:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sink-4.c'
    sources: {binary: sink-4.s, cflags: "-fopenmp -fdump-tree-omplower\n -S"}
  group: GRPSERIAL
test_sink-4_216:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sink-4.c'
    sources: {binary: sink-4.s, cflags: "-fopenmp -fdump-tree-omplower\n -S"}
  group: GRPSERIAL
test_sink-4_535:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sink-4.c'
    sources: {binary: sink-4.s, cflags: "-std=gnu++98 -fopenmp -fdump-tree-omplower\n
        -S"}
  group: GRPSERIAL
test_sink-4_536:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sink-4.c'
    sources: {binary: sink-4.s, cflags: "-std=gnu++11 -fopenmp -fdump-tree-omplower\n
        -S"}
  group: GRPSERIAL
test_sink-4_537:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sink-4.c'
    sources: {binary: sink-4.s, cflags: "-std=gnu++14 -fopenmp -fdump-tree-omplower\n
        -S"}
  group: GRPSERIAL
test_sink-4_650:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sink-4.c'
    sources: {binary: sink-4.s, cflags: "-fopenmp -fdump-tree-omplower\n -S"}
  group: GRPSERIAL
test_sink-4_969:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sink-4.c'
    sources: {binary: sink-4.s, cflags: "-std=gnu++98 -fopenmp -fdump-tree-omplower\n
        -S"}
  group: GRPSERIAL
test_sink-4_970:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sink-4.c'
    sources: {binary: sink-4.s, cflags: "-std=gnu++11 -fopenmp -fdump-tree-omplower\n
        -S"}
  group: GRPSERIAL
test_sink-4_971:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/sink-4.c'
    sources: {binary: sink-4.s, cflags: "-std=gnu++14 -fopenmp -fdump-tree-omplower\n
        -S"}
  group: GRPSERIAL
test_target-teams-1_108:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/target-teams-1.c'
    sources: {binary: target-teams-1.s, cflags: "-fopenmp -Wno-hsa -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_target-teams-1_217:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/target-teams-1.c'
    sources: {binary: target-teams-1.s, cflags: "-fopenmp -Wno-hsa -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_target-teams-1_538:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/target-teams-1.c'
    sources: {binary: target-teams-1.s, cflags: "-std=c++98 -fopenmp -Wno-hsa -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_target-teams-1_539:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/target-teams-1.c'
    sources: {binary: target-teams-1.s, cflags: "-std=c++11 -fopenmp -Wno-hsa -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_target-teams-1_540:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/target-teams-1.c'
    sources: {binary: target-teams-1.s, cflags: "-std=c++14 -fopenmp -Wno-hsa -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_target-teams-1_651:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/target-teams-1.c'
    sources: {binary: target-teams-1.s, cflags: "-fopenmp -Wno-hsa -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_target-teams-1_972:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/target-teams-1.c'
    sources: {binary: target-teams-1.s, cflags: "-std=c++98 -fopenmp -Wno-hsa -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_target-teams-1_973:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/target-teams-1.c'
    sources: {binary: target-teams-1.s, cflags: "-std=c++11 -fopenmp -Wno-hsa -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_target-teams-1_974:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/target-teams-1.c'
    sources: {binary: target-teams-1.s, cflags: "-std=c++14 -fopenmp -Wno-hsa -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_udr-1_109:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/udr-1.c'
    sources: {binary: udr-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_udr-1_218:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/udr-1.c'
    sources: {binary: udr-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_udr-1_541:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/udr-1.c'
    sources: {binary: udr-1.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
test_udr-1_542:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/udr-1.c'
    sources: {binary: udr-1.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
test_udr-1_543:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/udr-1.c'
    sources: {binary: udr-1.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
test_udr-1_652:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/udr-1.c'
    sources: {binary: udr-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_udr-1_975:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/udr-1.c'
    sources: {binary: udr-1.s, cflags: "-std=gnu++98 -fopenmp\n -S"}
  group: GRPSERIAL
test_udr-1_976:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/udr-1.c'
    sources: {binary: udr-1.s, cflags: "-std=gnu++11 -fopenmp\n -S"}
  group: GRPSERIAL
test_udr-1_977:
  build:
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/gomp/udr-1.c'
    sources: {binary: udr-1.s, cflags: "-std=gnu++14 -fopenmp\n -S"}
  group: GRPSERIAL
