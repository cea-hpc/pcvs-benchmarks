test_Waddress-1_1:
  build:
    cflags: "-Wc++-compat  -Waddress\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Waddress-1.c'
    sources:
      binary: Waddress-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("comparison with string
          literal results in unspecified behavior")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("comparison with string
          literal results in unspecified behavior")[^\n]*\n?)+'
test_Waddress-1_1882:
  build:
    cflags: "-Wc++-compat  -Waddress\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Waddress-1.c'
    sources:
      binary: Waddress-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("comparison with string
          literal results in unspecified behavior")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("comparison with string
          literal results in unspecified behavior")[^\n]*\n?)+'
test_Waddress-1_2271:
  build:
    cflags: "-std=gnu++98 -Waddress\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Waddress-1.c'
    sources:
      binary: Waddress-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("comparison with string
          literal results in unspecified behavior")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("comparison with string
          literal results in unspecified behavior")[^\n]*\n?)+'
test_Waddress-1_2272:
  build:
    cflags: "-std=gnu++11 -Waddress\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Waddress-1.c'
    sources:
      binary: Waddress-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("comparison with string
          literal results in unspecified behavior")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("comparison with string
          literal results in unspecified behavior")[^\n]*\n?)+'
test_Waddress-1_2273:
  build:
    cflags: "-std=gnu++14 -Waddress\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Waddress-1.c'
    sources:
      binary: Waddress-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("comparison with string
          literal results in unspecified behavior")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("comparison with string
          literal results in unspecified behavior")[^\n]*\n?)+'
test_Waddress-1_390:
  build:
    cflags: "-Wc++-compat  -Waddress\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Waddress-1.c'
    sources:
      binary: Waddress-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("comparison with string
          literal results in unspecified behavior")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("comparison with string
          literal results in unspecified behavior")[^\n]*\n?)+'
test_Waddress-1_779:
  build:
    cflags: "-std=gnu++98 -Waddress\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Waddress-1.c'
    sources:
      binary: Waddress-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("comparison with string
          literal results in unspecified behavior")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("comparison with string
          literal results in unspecified behavior")[^\n]*\n?)+'
test_Waddress-1_780:
  build:
    cflags: "-std=gnu++11 -Waddress\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Waddress-1.c'
    sources:
      binary: Waddress-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("comparison with string
          literal results in unspecified behavior")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("comparison with string
          literal results in unspecified behavior")[^\n]*\n?)+'
test_Waddress-1_781:
  build:
    cflags: "-std=gnu++14 -Waddress\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Waddress-1.c'
    sources:
      binary: Waddress-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("comparison with string
          literal results in unspecified behavior")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("comparison with string
          literal results in unspecified behavior")[^\n]*\n?)+'
test_Waddress-2_1883:
  build:
    cflags: "-Wc++-compat  -Waddress\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Waddress-2.c'
    sources:
      binary: Waddress-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("the address of .i.
          will never be NULL")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("the address of .i.
          will never be NULL")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("the address of .i.
          will never be NULL")[^\n]*\n?)+'
test_Waddress-2_2:
  build:
    cflags: "-Wc++-compat  -Waddress\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Waddress-2.c'
    sources:
      binary: Waddress-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("the address of .i.
          will never be NULL")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("the address of .i.
          will never be NULL")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("the address of .i.
          will never be NULL")[^\n]*\n?)+'
test_Waddress-2_2274:
  build:
    cflags: "-std=gnu++98 -Waddress\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Waddress-2.c'
    sources:
      binary: Waddress-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("the address of .i.
          will never be NULL")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("the address of .i.
          will never be NULL")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("the address of .i.
          will never be NULL")[^\n]*\n?)+'
test_Waddress-2_2275:
  build:
    cflags: "-std=gnu++11 -Waddress\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Waddress-2.c'
    sources:
      binary: Waddress-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("the address of .i.
          will never be NULL")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("the address of .i.
          will never be NULL")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("the address of .i.
          will never be NULL")[^\n]*\n?)+'
test_Waddress-2_2276:
  build:
    cflags: "-std=gnu++14 -Waddress\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Waddress-2.c'
    sources:
      binary: Waddress-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("the address of .i.
          will never be NULL")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("the address of .i.
          will never be NULL")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("the address of .i.
          will never be NULL")[^\n]*\n?)+'
test_Waddress-2_391:
  build:
    cflags: "-Wc++-compat  -Waddress\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Waddress-2.c'
    sources:
      binary: Waddress-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("the address of .i.
          will never be NULL")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("the address of .i.
          will never be NULL")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("the address of .i.
          will never be NULL")[^\n]*\n?)+'
test_Waddress-2_782:
  build:
    cflags: "-std=gnu++98 -Waddress\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Waddress-2.c'
    sources:
      binary: Waddress-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("the address of .i.
          will never be NULL")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("the address of .i.
          will never be NULL")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("the address of .i.
          will never be NULL")[^\n]*\n?)+'
test_Waddress-2_783:
  build:
    cflags: "-std=gnu++11 -Waddress\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Waddress-2.c'
    sources:
      binary: Waddress-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("the address of .i.
          will never be NULL")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("the address of .i.
          will never be NULL")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("the address of .i.
          will never be NULL")[^\n]*\n?)+'
test_Waddress-2_784:
  build:
    cflags: "-std=gnu++14 -Waddress\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Waddress-2.c'
    sources:
      binary: Waddress-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("the address of .i.
          will never be NULL")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("the address of .i.
          will never be NULL")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("the address of .i.
          will never be NULL")[^\n]*\n?)+'
test_Wbool-compare-1_1884:
  build:
    cflags: "-Wc++-compat  -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wbool-compare-1.c'
    sources:
      binary: Wbool-compare-1.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+(:100:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+(:102:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+(:103:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
test_Wbool-compare-1_2277:
  build:
    cflags: "-std=gnu++98 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wbool-compare-1.c'
    sources:
      binary: Wbool-compare-1.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+(:100:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+(:102:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+(:103:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
test_Wbool-compare-1_2278:
  build:
    cflags: "-std=gnu++11 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wbool-compare-1.c'
    sources:
      binary: Wbool-compare-1.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+(:100:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+(:102:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+(:103:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
test_Wbool-compare-1_2279:
  build:
    cflags: "-std=gnu++14 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wbool-compare-1.c'
    sources:
      binary: Wbool-compare-1.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+(:100:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+(:102:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+(:103:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
test_Wbool-compare-1_3:
  build:
    cflags: "-Wc++-compat  -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wbool-compare-1.c'
    sources:
      binary: Wbool-compare-1.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+(:100:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+(:102:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+(:103:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
test_Wbool-compare-1_392:
  build:
    cflags: "-Wc++-compat  -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wbool-compare-1.c'
    sources:
      binary: Wbool-compare-1.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+(:100:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+(:102:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+(:103:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
test_Wbool-compare-1_785:
  build:
    cflags: "-std=gnu++98 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wbool-compare-1.c'
    sources:
      binary: Wbool-compare-1.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+(:100:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+(:102:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+(:103:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
test_Wbool-compare-1_786:
  build:
    cflags: "-std=gnu++11 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wbool-compare-1.c'
    sources:
      binary: Wbool-compare-1.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+(:100:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+(:102:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+(:103:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
test_Wbool-compare-1_787:
  build:
    cflags: "-std=gnu++14 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wbool-compare-1.c'
    sources:
      binary: Wbool-compare-1.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+(:100:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+(:102:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+(:103:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
test_Wbool-compare-2_1885:
  build:
    cflags: "-Wc++-compat  -Wbool-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wbool-compare-2.c'
    sources:
      binary: Wbool-compare-2.s
  group: GRPSERIAL
  validate:
    match:
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+(:74:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
test_Wbool-compare-2_2280:
  build:
    cflags: "-std=gnu++98 -Wbool-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wbool-compare-2.c'
    sources:
      binary: Wbool-compare-2.s
  group: GRPSERIAL
  validate:
    match:
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+(:74:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
test_Wbool-compare-2_2281:
  build:
    cflags: "-std=gnu++11 -Wbool-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wbool-compare-2.c'
    sources:
      binary: Wbool-compare-2.s
  group: GRPSERIAL
  validate:
    match:
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+(:74:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
test_Wbool-compare-2_2282:
  build:
    cflags: "-std=gnu++14 -Wbool-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wbool-compare-2.c'
    sources:
      binary: Wbool-compare-2.s
  group: GRPSERIAL
  validate:
    match:
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+(:74:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
test_Wbool-compare-2_393:
  build:
    cflags: "-Wc++-compat  -Wbool-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wbool-compare-2.c'
    sources:
      binary: Wbool-compare-2.s
  group: GRPSERIAL
  validate:
    match:
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+(:74:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
test_Wbool-compare-2_4:
  build:
    cflags: "-Wc++-compat  -Wbool-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wbool-compare-2.c'
    sources:
      binary: Wbool-compare-2.s
  group: GRPSERIAL
  validate:
    match:
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+(:74:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
test_Wbool-compare-2_788:
  build:
    cflags: "-std=gnu++98 -Wbool-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wbool-compare-2.c'
    sources:
      binary: Wbool-compare-2.s
  group: GRPSERIAL
  validate:
    match:
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+(:74:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
test_Wbool-compare-2_789:
  build:
    cflags: "-std=gnu++11 -Wbool-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wbool-compare-2.c'
    sources:
      binary: Wbool-compare-2.s
  group: GRPSERIAL
  validate:
    match:
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+(:74:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
test_Wbool-compare-2_790:
  build:
    cflags: "-std=gnu++14 -Wbool-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wbool-compare-2.c'
    sources:
      binary: Wbool-compare-2.s
  group: GRPSERIAL
  validate:
    match:
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+(:74:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always false")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("with boolean expression
          is always true")[^\n]*\n?)+'
test_Wbool-compare-3_1886:
  build:
    cflags: "-Wc++-compat  -Wbool-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wbool-compare-3.c'
    sources:
      binary: Wbool-compare-3.s
  group: GRPSERIAL
test_Wbool-compare-3_2283:
  build:
    cflags: "-std=gnu++98 -Wbool-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wbool-compare-3.c'
    sources:
      binary: Wbool-compare-3.s
  group: GRPSERIAL
test_Wbool-compare-3_2284:
  build:
    cflags: "-std=gnu++11 -Wbool-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wbool-compare-3.c'
    sources:
      binary: Wbool-compare-3.s
  group: GRPSERIAL
test_Wbool-compare-3_2285:
  build:
    cflags: "-std=gnu++14 -Wbool-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wbool-compare-3.c'
    sources:
      binary: Wbool-compare-3.s
  group: GRPSERIAL
test_Wbool-compare-3_394:
  build:
    cflags: "-Wc++-compat  -Wbool-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wbool-compare-3.c'
    sources:
      binary: Wbool-compare-3.s
  group: GRPSERIAL
test_Wbool-compare-3_5:
  build:
    cflags: "-Wc++-compat  -Wbool-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wbool-compare-3.c'
    sources:
      binary: Wbool-compare-3.s
  group: GRPSERIAL
test_Wbool-compare-3_791:
  build:
    cflags: "-std=gnu++98 -Wbool-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wbool-compare-3.c'
    sources:
      binary: Wbool-compare-3.s
  group: GRPSERIAL
test_Wbool-compare-3_792:
  build:
    cflags: "-std=gnu++11 -Wbool-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wbool-compare-3.c'
    sources:
      binary: Wbool-compare-3.s
  group: GRPSERIAL
test_Wbool-compare-3_793:
  build:
    cflags: "-std=gnu++14 -Wbool-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wbool-compare-3.c'
    sources:
      binary: Wbool-compare-3.s
  group: GRPSERIAL
test_Wbool-operation-1_1887:
  build:
    cflags: "-Wc++-compat  -Wall -Wno-psabi\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wbool-operation-1.c'
    sources:
      binary: Wbool-operation-1.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
test_Wbool-operation-1_2286:
  build:
    cflags: "-std=gnu++98 -Wall -Wno-psabi\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wbool-operation-1.c'
    sources:
      binary: Wbool-operation-1.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
test_Wbool-operation-1_2287:
  build:
    cflags: "-std=gnu++11 -Wall -Wno-psabi\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wbool-operation-1.c'
    sources:
      binary: Wbool-operation-1.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
test_Wbool-operation-1_2288:
  build:
    cflags: "-std=gnu++14 -Wall -Wno-psabi\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wbool-operation-1.c'
    sources:
      binary: Wbool-operation-1.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
test_Wbool-operation-1_395:
  build:
    cflags: "-Wc++-compat  -Wall -Wno-psabi\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wbool-operation-1.c'
    sources:
      binary: Wbool-operation-1.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
test_Wbool-operation-1_6:
  build:
    cflags: "-Wc++-compat  -Wall -Wno-psabi\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wbool-operation-1.c'
    sources:
      binary: Wbool-operation-1.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
test_Wbool-operation-1_794:
  build:
    cflags: "-std=gnu++98 -Wall -Wno-psabi\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wbool-operation-1.c'
    sources:
      binary: Wbool-operation-1.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
test_Wbool-operation-1_795:
  build:
    cflags: "-std=gnu++11 -Wall -Wno-psabi\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wbool-operation-1.c'
    sources:
      binary: Wbool-operation-1.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
test_Wbool-operation-1_796:
  build:
    cflags: "-std=gnu++14 -Wall -Wno-psabi\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wbool-operation-1.c'
    sources:
      binary: Wbool-operation-1.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("on an expression of
          type bool|on a boolean expression")[^\n]*\n?)+'
test_Wcast-qual-1_1888:
  build:
    cflags: "-Wc++-compat  -Wcast-qual\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wcast-qual-1.c'
    sources:
      binary: Wcast-qual-1.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+(:100:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+(:102:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+(:103:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+(:113:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+(:115:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+(:116:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+(:128:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L149:
        expect: true
        expr: '(^|\n)([^\n]+(:149:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+(:155:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+(:69:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+(:75:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+(:77:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
test_Wcast-qual-1_2289:
  build:
    cflags: "-std=gnu++98 -Wcast-qual\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wcast-qual-1.c'
    sources:
      binary: Wcast-qual-1.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+(:100:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+(:102:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+(:103:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+(:113:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+(:115:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+(:116:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+(:128:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L149:
        expect: true
        expr: '(^|\n)([^\n]+(:149:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+(:155:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+(:69:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+(:75:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+(:77:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
test_Wcast-qual-1_2290:
  build:
    cflags: "-std=gnu++11 -Wcast-qual\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wcast-qual-1.c'
    sources:
      binary: Wcast-qual-1.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+(:100:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+(:102:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+(:103:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+(:113:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+(:115:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+(:116:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+(:128:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L149:
        expect: true
        expr: '(^|\n)([^\n]+(:149:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+(:155:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+(:69:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+(:75:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+(:77:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
test_Wcast-qual-1_2291:
  build:
    cflags: "-std=gnu++14 -Wcast-qual\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wcast-qual-1.c'
    sources:
      binary: Wcast-qual-1.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+(:100:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+(:102:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+(:103:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+(:113:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+(:115:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+(:116:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+(:128:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L149:
        expect: true
        expr: '(^|\n)([^\n]+(:149:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+(:155:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+(:69:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+(:75:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+(:77:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
test_Wcast-qual-1_396:
  build:
    cflags: "-Wc++-compat  -Wcast-qual\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wcast-qual-1.c'
    sources:
      binary: Wcast-qual-1.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+(:100:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+(:102:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+(:103:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+(:113:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+(:115:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+(:116:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+(:128:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L149:
        expect: true
        expr: '(^|\n)([^\n]+(:149:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+(:155:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+(:69:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+(:75:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+(:77:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
test_Wcast-qual-1_7:
  build:
    cflags: "-Wc++-compat  -Wcast-qual\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wcast-qual-1.c'
    sources:
      binary: Wcast-qual-1.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+(:100:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+(:102:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+(:103:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+(:113:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+(:115:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+(:116:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+(:128:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L149:
        expect: true
        expr: '(^|\n)([^\n]+(:149:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+(:155:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+(:69:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+(:75:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+(:77:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
test_Wcast-qual-1_797:
  build:
    cflags: "-std=gnu++98 -Wcast-qual\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wcast-qual-1.c'
    sources:
      binary: Wcast-qual-1.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+(:100:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+(:102:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+(:103:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+(:113:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+(:115:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+(:116:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+(:128:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L149:
        expect: true
        expr: '(^|\n)([^\n]+(:149:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+(:155:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+(:69:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+(:75:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+(:77:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
test_Wcast-qual-1_798:
  build:
    cflags: "-std=gnu++11 -Wcast-qual\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wcast-qual-1.c'
    sources:
      binary: Wcast-qual-1.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+(:100:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+(:102:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+(:103:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+(:113:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+(:115:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+(:116:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+(:128:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L149:
        expect: true
        expr: '(^|\n)([^\n]+(:149:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+(:155:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+(:69:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+(:75:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+(:77:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
test_Wcast-qual-1_799:
  build:
    cflags: "-std=gnu++14 -Wcast-qual\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wcast-qual-1.c'
    sources:
      binary: Wcast-qual-1.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+(:100:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+(:102:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+(:103:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+(:113:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+(:115:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+(:116:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+(:128:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L149:
        expect: true
        expr: '(^|\n)([^\n]+(:149:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+(:155:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+(:69:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+(:75:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+(:77:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("cast")[^\n]*\n?)+'
test_Wconversion-real_1889:
  build:
    cflags: "-Wc++-compat  -std=c99 -Wconversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wconversion-real.c'
    sources:
      binary: Wconversion-real.s
  group: GRPSERIAL
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
test_Wconversion-real_2292:
  build:
    cflags: "-std=gnu++98 -Wconversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wconversion-real.c'
    sources:
      binary: Wconversion-real.s
  group: GRPSERIAL
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
test_Wconversion-real_2293:
  build:
    cflags: "-std=gnu++11 -Wconversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wconversion-real.c'
    sources:
      binary: Wconversion-real.s
  group: GRPSERIAL
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
test_Wconversion-real_2294:
  build:
    cflags: "-std=gnu++14 -Wconversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wconversion-real.c'
    sources:
      binary: Wconversion-real.s
  group: GRPSERIAL
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
test_Wconversion-real_397:
  build:
    cflags: "-Wc++-compat  -std=c99 -Wconversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wconversion-real.c'
    sources:
      binary: Wconversion-real.s
  group: GRPSERIAL
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
test_Wconversion-real_8:
  build:
    cflags: "-Wc++-compat  -std=c99 -Wconversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wconversion-real.c'
    sources:
      binary: Wconversion-real.s
  group: GRPSERIAL
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
test_Wconversion-real_800:
  build:
    cflags: "-std=gnu++98 -Wconversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wconversion-real.c'
    sources:
      binary: Wconversion-real.s
  group: GRPSERIAL
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
test_Wconversion-real_801:
  build:
    cflags: "-std=gnu++11 -Wconversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wconversion-real.c'
    sources:
      binary: Wconversion-real.s
  group: GRPSERIAL
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
test_Wconversion-real_802:
  build:
    cflags: "-std=gnu++14 -Wconversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wconversion-real.c'
    sources:
      binary: Wconversion-real.s
  group: GRPSERIAL
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
test_Wdangling-else-1_1890:
  build:
    cflags: "-Wc++-compat  -Wdangling-else\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wdangling-else-1.c'
    sources:
      binary: Wdangling-else-1.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("suggest explicit braces
          to avoid ambiguous")[^\n]*\n?)+'
test_Wdangling-else-1_2295:
  build:
    cflags: "-std=gnu++98 -Wdangling-else\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wdangling-else-1.c'
    sources:
      binary: Wdangling-else-1.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("suggest explicit braces
          to avoid ambiguous")[^\n]*\n?)+'
test_Wdangling-else-1_2296:
  build:
    cflags: "-std=gnu++11 -Wdangling-else\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wdangling-else-1.c'
    sources:
      binary: Wdangling-else-1.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("suggest explicit braces
          to avoid ambiguous")[^\n]*\n?)+'
test_Wdangling-else-1_2297:
  build:
    cflags: "-std=gnu++14 -Wdangling-else\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wdangling-else-1.c'
    sources:
      binary: Wdangling-else-1.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("suggest explicit braces
          to avoid ambiguous")[^\n]*\n?)+'
test_Wdangling-else-1_398:
  build:
    cflags: "-Wc++-compat  -Wdangling-else\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wdangling-else-1.c'
    sources:
      binary: Wdangling-else-1.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("suggest explicit braces
          to avoid ambiguous")[^\n]*\n?)+'
test_Wdangling-else-1_803:
  build:
    cflags: "-std=gnu++98 -Wdangling-else\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wdangling-else-1.c'
    sources:
      binary: Wdangling-else-1.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("suggest explicit braces
          to avoid ambiguous")[^\n]*\n?)+'
test_Wdangling-else-1_804:
  build:
    cflags: "-std=gnu++11 -Wdangling-else\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wdangling-else-1.c'
    sources:
      binary: Wdangling-else-1.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("suggest explicit braces
          to avoid ambiguous")[^\n]*\n?)+'
test_Wdangling-else-1_805:
  build:
    cflags: "-std=gnu++14 -Wdangling-else\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wdangling-else-1.c'
    sources:
      binary: Wdangling-else-1.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("suggest explicit braces
          to avoid ambiguous")[^\n]*\n?)+'
test_Wdangling-else-1_9:
  build:
    cflags: "-Wc++-compat  -Wdangling-else\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wdangling-else-1.c'
    sources:
      binary: Wdangling-else-1.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("suggest explicit braces
          to avoid ambiguous")[^\n]*\n?)+'
test_Wdangling-else-2_10:
  build:
    cflags: "-Wc++-compat  -Wparentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wdangling-else-2.c'
    sources:
      binary: Wdangling-else-2.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("suggest explicit braces
          to avoid ambiguous")[^\n]*\n?)+'
test_Wdangling-else-2_1891:
  build:
    cflags: "-Wc++-compat  -Wparentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wdangling-else-2.c'
    sources:
      binary: Wdangling-else-2.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("suggest explicit braces
          to avoid ambiguous")[^\n]*\n?)+'
test_Wdangling-else-2_2298:
  build:
    cflags: "-std=gnu++98 -Wparentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wdangling-else-2.c'
    sources:
      binary: Wdangling-else-2.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("suggest explicit braces
          to avoid ambiguous")[^\n]*\n?)+'
test_Wdangling-else-2_2299:
  build:
    cflags: "-std=gnu++11 -Wparentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wdangling-else-2.c'
    sources:
      binary: Wdangling-else-2.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("suggest explicit braces
          to avoid ambiguous")[^\n]*\n?)+'
test_Wdangling-else-2_2300:
  build:
    cflags: "-std=gnu++14 -Wparentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wdangling-else-2.c'
    sources:
      binary: Wdangling-else-2.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("suggest explicit braces
          to avoid ambiguous")[^\n]*\n?)+'
test_Wdangling-else-2_399:
  build:
    cflags: "-Wc++-compat  -Wparentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wdangling-else-2.c'
    sources:
      binary: Wdangling-else-2.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("suggest explicit braces
          to avoid ambiguous")[^\n]*\n?)+'
test_Wdangling-else-2_806:
  build:
    cflags: "-std=gnu++98 -Wparentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wdangling-else-2.c'
    sources:
      binary: Wdangling-else-2.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("suggest explicit braces
          to avoid ambiguous")[^\n]*\n?)+'
test_Wdangling-else-2_807:
  build:
    cflags: "-std=gnu++11 -Wparentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wdangling-else-2.c'
    sources:
      binary: Wdangling-else-2.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("suggest explicit braces
          to avoid ambiguous")[^\n]*\n?)+'
test_Wdangling-else-2_808:
  build:
    cflags: "-std=gnu++14 -Wparentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wdangling-else-2.c'
    sources:
      binary: Wdangling-else-2.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("suggest explicit braces
          to avoid ambiguous")[^\n]*\n?)+'
test_Wdangling-else-3_11:
  build:
    cflags: "-Wc++-compat  -Wparentheses -Wno-dangling-else\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wdangling-else-3.c'
    sources:
      binary: Wdangling-else-3.s
  group: GRPSERIAL
test_Wdangling-else-3_1892:
  build:
    cflags: "-Wc++-compat  -Wparentheses -Wno-dangling-else\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wdangling-else-3.c'
    sources:
      binary: Wdangling-else-3.s
  group: GRPSERIAL
test_Wdangling-else-3_2301:
  build:
    cflags: "-std=gnu++98 -Wparentheses -Wno-dangling-else\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wdangling-else-3.c'
    sources:
      binary: Wdangling-else-3.s
  group: GRPSERIAL
test_Wdangling-else-3_2302:
  build:
    cflags: "-std=gnu++11 -Wparentheses -Wno-dangling-else\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wdangling-else-3.c'
    sources:
      binary: Wdangling-else-3.s
  group: GRPSERIAL
test_Wdangling-else-3_2303:
  build:
    cflags: "-std=gnu++14 -Wparentheses -Wno-dangling-else\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wdangling-else-3.c'
    sources:
      binary: Wdangling-else-3.s
  group: GRPSERIAL
test_Wdangling-else-3_400:
  build:
    cflags: "-Wc++-compat  -Wparentheses -Wno-dangling-else\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wdangling-else-3.c'
    sources:
      binary: Wdangling-else-3.s
  group: GRPSERIAL
test_Wdangling-else-3_809:
  build:
    cflags: "-std=gnu++98 -Wparentheses -Wno-dangling-else\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wdangling-else-3.c'
    sources:
      binary: Wdangling-else-3.s
  group: GRPSERIAL
test_Wdangling-else-3_810:
  build:
    cflags: "-std=gnu++11 -Wparentheses -Wno-dangling-else\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wdangling-else-3.c'
    sources:
      binary: Wdangling-else-3.s
  group: GRPSERIAL
test_Wdangling-else-3_811:
  build:
    cflags: "-std=gnu++14 -Wparentheses -Wno-dangling-else\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wdangling-else-3.c'
    sources:
      binary: Wdangling-else-3.s
  group: GRPSERIAL
test_Wdangling-else-4_12:
  build:
    cflags: "-Wc++-compat  -Wdangling-else\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wdangling-else-4.c'
    sources:
      binary: Wdangling-else-4.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("suggest explicit braces
          to avoid ambiguous .else.")[^\n]*\n?)+'
test_Wdangling-else-4_1893:
  build:
    cflags: "-Wc++-compat  -Wdangling-else\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wdangling-else-4.c'
    sources:
      binary: Wdangling-else-4.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("suggest explicit braces
          to avoid ambiguous .else.")[^\n]*\n?)+'
test_Wdangling-else-4_2304:
  build:
    cflags: "-std=gnu++98 -Wdangling-else\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wdangling-else-4.c'
    sources:
      binary: Wdangling-else-4.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("suggest explicit braces
          to avoid ambiguous .else.")[^\n]*\n?)+'
test_Wdangling-else-4_2305:
  build:
    cflags: "-std=gnu++11 -Wdangling-else\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wdangling-else-4.c'
    sources:
      binary: Wdangling-else-4.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("suggest explicit braces
          to avoid ambiguous .else.")[^\n]*\n?)+'
test_Wdangling-else-4_2306:
  build:
    cflags: "-std=gnu++14 -Wdangling-else\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wdangling-else-4.c'
    sources:
      binary: Wdangling-else-4.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("suggest explicit braces
          to avoid ambiguous .else.")[^\n]*\n?)+'
test_Wdangling-else-4_401:
  build:
    cflags: "-Wc++-compat  -Wdangling-else\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wdangling-else-4.c'
    sources:
      binary: Wdangling-else-4.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("suggest explicit braces
          to avoid ambiguous .else.")[^\n]*\n?)+'
test_Wdangling-else-4_812:
  build:
    cflags: "-std=gnu++98 -Wdangling-else\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wdangling-else-4.c'
    sources:
      binary: Wdangling-else-4.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("suggest explicit braces
          to avoid ambiguous .else.")[^\n]*\n?)+'
test_Wdangling-else-4_813:
  build:
    cflags: "-std=gnu++11 -Wdangling-else\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wdangling-else-4.c'
    sources:
      binary: Wdangling-else-4.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("suggest explicit braces
          to avoid ambiguous .else.")[^\n]*\n?)+'
test_Wdangling-else-4_814:
  build:
    cflags: "-std=gnu++14 -Wdangling-else\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wdangling-else-4.c'
    sources:
      binary: Wdangling-else-4.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("suggest explicit braces
          to avoid ambiguous .else.")[^\n]*\n?)+'
test_Wduplicated-branches-10_14:
  build:
    cflags: "-Wc++-compat  -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-10.c'
    sources:
      binary: Wduplicated-branches-10.s
  group: GRPSERIAL
test_Wduplicated-branches-10_1895:
  build:
    cflags: "-Wc++-compat  -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-10.c'
    sources:
      binary: Wduplicated-branches-10.s
  group: GRPSERIAL
test_Wduplicated-branches-10_2310:
  build:
    cflags: "-std=gnu++98 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-10.c'
    sources:
      binary: Wduplicated-branches-10.s
  group: GRPSERIAL
test_Wduplicated-branches-10_2311:
  build:
    cflags: "-std=gnu++11 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-10.c'
    sources:
      binary: Wduplicated-branches-10.s
  group: GRPSERIAL
test_Wduplicated-branches-10_2312:
  build:
    cflags: "-std=gnu++14 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-10.c'
    sources:
      binary: Wduplicated-branches-10.s
  group: GRPSERIAL
test_Wduplicated-branches-10_403:
  build:
    cflags: "-Wc++-compat  -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-10.c'
    sources:
      binary: Wduplicated-branches-10.s
  group: GRPSERIAL
test_Wduplicated-branches-10_818:
  build:
    cflags: "-std=gnu++98 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-10.c'
    sources:
      binary: Wduplicated-branches-10.s
  group: GRPSERIAL
test_Wduplicated-branches-10_819:
  build:
    cflags: "-std=gnu++11 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-10.c'
    sources:
      binary: Wduplicated-branches-10.s
  group: GRPSERIAL
test_Wduplicated-branches-10_820:
  build:
    cflags: "-std=gnu++14 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-10.c'
    sources:
      binary: Wduplicated-branches-10.s
  group: GRPSERIAL
test_Wduplicated-branches-11_15:
  build:
    cflags: "-Wc++-compat  -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-11.c'
    sources:
      binary: Wduplicated-branches-11.s
  group: GRPSERIAL
test_Wduplicated-branches-11_1896:
  build:
    cflags: "-Wc++-compat  -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-11.c'
    sources:
      binary: Wduplicated-branches-11.s
  group: GRPSERIAL
test_Wduplicated-branches-11_2313:
  build:
    cflags: "-std=gnu++98 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-11.c'
    sources:
      binary: Wduplicated-branches-11.s
  group: GRPSERIAL
test_Wduplicated-branches-11_2314:
  build:
    cflags: "-std=gnu++11 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-11.c'
    sources:
      binary: Wduplicated-branches-11.s
  group: GRPSERIAL
test_Wduplicated-branches-11_2315:
  build:
    cflags: "-std=gnu++14 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-11.c'
    sources:
      binary: Wduplicated-branches-11.s
  group: GRPSERIAL
test_Wduplicated-branches-11_404:
  build:
    cflags: "-Wc++-compat  -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-11.c'
    sources:
      binary: Wduplicated-branches-11.s
  group: GRPSERIAL
test_Wduplicated-branches-11_821:
  build:
    cflags: "-std=gnu++98 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-11.c'
    sources:
      binary: Wduplicated-branches-11.s
  group: GRPSERIAL
test_Wduplicated-branches-11_822:
  build:
    cflags: "-std=gnu++11 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-11.c'
    sources:
      binary: Wduplicated-branches-11.s
  group: GRPSERIAL
test_Wduplicated-branches-11_823:
  build:
    cflags: "-std=gnu++14 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-11.c'
    sources:
      binary: Wduplicated-branches-11.s
  group: GRPSERIAL
test_Wduplicated-branches-12_16:
  build:
    cflags: "-Wc++-compat  -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-12.c'
    sources:
      binary: Wduplicated-branches-12.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*(".return. with a value")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("return-statement
          with a value")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*(".return. with a value")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("return-statement
          with a value")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-12_1897:
  build:
    cflags: "-Wc++-compat  -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-12.c'
    sources:
      binary: Wduplicated-branches-12.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*(".return. with a value")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("return-statement
          with a value")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*(".return. with a value")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("return-statement
          with a value")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-12_2316:
  build:
    cflags: "-std=gnu++98 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-12.c'
    sources:
      binary: Wduplicated-branches-12.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*(".return. with a value")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("return-statement
          with a value")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*(".return. with a value")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("return-statement
          with a value")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-12_2317:
  build:
    cflags: "-std=gnu++11 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-12.c'
    sources:
      binary: Wduplicated-branches-12.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*(".return. with a value")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("return-statement
          with a value")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*(".return. with a value")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("return-statement
          with a value")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-12_2318:
  build:
    cflags: "-std=gnu++14 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-12.c'
    sources:
      binary: Wduplicated-branches-12.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*(".return. with a value")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("return-statement
          with a value")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*(".return. with a value")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("return-statement
          with a value")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-12_405:
  build:
    cflags: "-Wc++-compat  -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-12.c'
    sources:
      binary: Wduplicated-branches-12.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*(".return. with a value")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("return-statement
          with a value")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*(".return. with a value")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("return-statement
          with a value")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-12_824:
  build:
    cflags: "-std=gnu++98 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-12.c'
    sources:
      binary: Wduplicated-branches-12.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*(".return. with a value")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("return-statement
          with a value")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*(".return. with a value")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("return-statement
          with a value")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-12_825:
  build:
    cflags: "-std=gnu++11 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-12.c'
    sources:
      binary: Wduplicated-branches-12.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*(".return. with a value")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("return-statement
          with a value")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*(".return. with a value")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("return-statement
          with a value")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-12_826:
  build:
    cflags: "-std=gnu++14 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-12.c'
    sources:
      binary: Wduplicated-branches-12.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*(".return. with a value")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("return-statement
          with a value")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*(".return. with a value")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("return-statement
          with a value")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-13_17:
  build:
    cflags: "-Wc++-compat  -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-13.c'
    sources:
      binary: Wduplicated-branches-13.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-13_1898:
  build:
    cflags: "-Wc++-compat  -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-13.c'
    sources:
      binary: Wduplicated-branches-13.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-13_2319:
  build:
    cflags: "-std=gnu++98 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-13.c'
    sources:
      binary: Wduplicated-branches-13.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-13_2320:
  build:
    cflags: "-std=gnu++11 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-13.c'
    sources:
      binary: Wduplicated-branches-13.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-13_2321:
  build:
    cflags: "-std=gnu++14 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-13.c'
    sources:
      binary: Wduplicated-branches-13.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-13_406:
  build:
    cflags: "-Wc++-compat  -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-13.c'
    sources:
      binary: Wduplicated-branches-13.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-13_827:
  build:
    cflags: "-std=gnu++98 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-13.c'
    sources:
      binary: Wduplicated-branches-13.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-13_828:
  build:
    cflags: "-std=gnu++11 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-13.c'
    sources:
      binary: Wduplicated-branches-13.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-13_829:
  build:
    cflags: "-std=gnu++14 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-13.c'
    sources:
      binary: Wduplicated-branches-13.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-1_13:
  build:
    cflags: "-Wc++-compat  -Wduplicated-branches -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-1.c'
    sources:
      binary: Wduplicated-branches-1.s
  group: GRPSERIAL
  validate:
    match:
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L130:
        expect: true
        expr: '(^|\n)([^\n]+(:130:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+(:135:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L167:
        expect: true
        expr: '(^|\n)([^\n]+(:167:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-1_1894:
  build:
    cflags: "-Wc++-compat  -Wduplicated-branches -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-1.c'
    sources:
      binary: Wduplicated-branches-1.s
  group: GRPSERIAL
  validate:
    match:
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L130:
        expect: true
        expr: '(^|\n)([^\n]+(:130:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+(:135:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L167:
        expect: true
        expr: '(^|\n)([^\n]+(:167:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-1_2307:
  build:
    cflags: "-std=gnu++98 -Wduplicated-branches -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-1.c'
    sources:
      binary: Wduplicated-branches-1.s
  group: GRPSERIAL
  validate:
    match:
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L130:
        expect: true
        expr: '(^|\n)([^\n]+(:130:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+(:135:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L167:
        expect: true
        expr: '(^|\n)([^\n]+(:167:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-1_2308:
  build:
    cflags: "-std=gnu++11 -Wduplicated-branches -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-1.c'
    sources:
      binary: Wduplicated-branches-1.s
  group: GRPSERIAL
  validate:
    match:
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L130:
        expect: true
        expr: '(^|\n)([^\n]+(:130:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+(:135:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L167:
        expect: true
        expr: '(^|\n)([^\n]+(:167:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-1_2309:
  build:
    cflags: "-std=gnu++14 -Wduplicated-branches -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-1.c'
    sources:
      binary: Wduplicated-branches-1.s
  group: GRPSERIAL
  validate:
    match:
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L130:
        expect: true
        expr: '(^|\n)([^\n]+(:130:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+(:135:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L167:
        expect: true
        expr: '(^|\n)([^\n]+(:167:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-1_402:
  build:
    cflags: "-Wc++-compat  -Wduplicated-branches -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-1.c'
    sources:
      binary: Wduplicated-branches-1.s
  group: GRPSERIAL
  validate:
    match:
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L130:
        expect: true
        expr: '(^|\n)([^\n]+(:130:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+(:135:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L167:
        expect: true
        expr: '(^|\n)([^\n]+(:167:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-1_815:
  build:
    cflags: "-std=gnu++98 -Wduplicated-branches -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-1.c'
    sources:
      binary: Wduplicated-branches-1.s
  group: GRPSERIAL
  validate:
    match:
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L130:
        expect: true
        expr: '(^|\n)([^\n]+(:130:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+(:135:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L167:
        expect: true
        expr: '(^|\n)([^\n]+(:167:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-1_816:
  build:
    cflags: "-std=gnu++11 -Wduplicated-branches -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-1.c'
    sources:
      binary: Wduplicated-branches-1.s
  group: GRPSERIAL
  validate:
    match:
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L130:
        expect: true
        expr: '(^|\n)([^\n]+(:130:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+(:135:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L167:
        expect: true
        expr: '(^|\n)([^\n]+(:167:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-1_817:
  build:
    cflags: "-std=gnu++14 -Wduplicated-branches -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-1.c'
    sources:
      binary: Wduplicated-branches-1.s
  group: GRPSERIAL
  validate:
    match:
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L130:
        expect: true
        expr: '(^|\n)([^\n]+(:130:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+(:135:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L167:
        expect: true
        expr: '(^|\n)([^\n]+(:167:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-2_18:
  build:
    cflags: "-Wc++-compat  -Wduplicated-branches -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-2.c'
    sources:
      binary: Wduplicated-branches-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared")[^\n]*\n?)+'
test_Wduplicated-branches-2_1899:
  build:
    cflags: "-Wc++-compat  -Wduplicated-branches -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-2.c'
    sources:
      binary: Wduplicated-branches-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared")[^\n]*\n?)+'
test_Wduplicated-branches-2_2322:
  build:
    cflags: "-std=gnu++98 -Wduplicated-branches -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-2.c'
    sources:
      binary: Wduplicated-branches-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared")[^\n]*\n?)+'
test_Wduplicated-branches-2_2323:
  build:
    cflags: "-std=gnu++11 -Wduplicated-branches -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-2.c'
    sources:
      binary: Wduplicated-branches-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared")[^\n]*\n?)+'
test_Wduplicated-branches-2_2324:
  build:
    cflags: "-std=gnu++14 -Wduplicated-branches -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-2.c'
    sources:
      binary: Wduplicated-branches-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared")[^\n]*\n?)+'
test_Wduplicated-branches-2_407:
  build:
    cflags: "-Wc++-compat  -Wduplicated-branches -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-2.c'
    sources:
      binary: Wduplicated-branches-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared")[^\n]*\n?)+'
test_Wduplicated-branches-2_830:
  build:
    cflags: "-std=gnu++98 -Wduplicated-branches -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-2.c'
    sources:
      binary: Wduplicated-branches-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared")[^\n]*\n?)+'
test_Wduplicated-branches-2_831:
  build:
    cflags: "-std=gnu++11 -Wduplicated-branches -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-2.c'
    sources:
      binary: Wduplicated-branches-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared")[^\n]*\n?)+'
test_Wduplicated-branches-2_832:
  build:
    cflags: "-std=gnu++14 -Wduplicated-branches -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-2.c'
    sources:
      binary: Wduplicated-branches-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|not
          declared")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared")[^\n]*\n?)+'
test_Wduplicated-branches-3_19:
  build:
    cflags: "-Wc++-compat  -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-3.c'
    sources:
      binary: Wduplicated-branches-3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-3_1900:
  build:
    cflags: "-Wc++-compat  -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-3.c'
    sources:
      binary: Wduplicated-branches-3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-3_2325:
  build:
    cflags: "-std=gnu++98 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-3.c'
    sources:
      binary: Wduplicated-branches-3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-3_2326:
  build:
    cflags: "-std=gnu++11 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-3.c'
    sources:
      binary: Wduplicated-branches-3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-3_2327:
  build:
    cflags: "-std=gnu++14 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-3.c'
    sources:
      binary: Wduplicated-branches-3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-3_408:
  build:
    cflags: "-Wc++-compat  -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-3.c'
    sources:
      binary: Wduplicated-branches-3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-3_833:
  build:
    cflags: "-std=gnu++98 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-3.c'
    sources:
      binary: Wduplicated-branches-3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-3_834:
  build:
    cflags: "-std=gnu++11 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-3.c'
    sources:
      binary: Wduplicated-branches-3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-3_835:
  build:
    cflags: "-std=gnu++14 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-3.c'
    sources:
      binary: Wduplicated-branches-3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-4_1901:
  build:
    cflags: "-Wc++-compat  -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-4.c'
    sources:
      binary: Wduplicated-branches-4.s
  group: GRPSERIAL
test_Wduplicated-branches-4_20:
  build:
    cflags: "-Wc++-compat  -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-4.c'
    sources:
      binary: Wduplicated-branches-4.s
  group: GRPSERIAL
test_Wduplicated-branches-4_2328:
  build:
    cflags: "-std=gnu++98 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-4.c'
    sources:
      binary: Wduplicated-branches-4.s
  group: GRPSERIAL
test_Wduplicated-branches-4_2329:
  build:
    cflags: "-std=gnu++11 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-4.c'
    sources:
      binary: Wduplicated-branches-4.s
  group: GRPSERIAL
test_Wduplicated-branches-4_2330:
  build:
    cflags: "-std=gnu++14 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-4.c'
    sources:
      binary: Wduplicated-branches-4.s
  group: GRPSERIAL
test_Wduplicated-branches-4_409:
  build:
    cflags: "-Wc++-compat  -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-4.c'
    sources:
      binary: Wduplicated-branches-4.s
  group: GRPSERIAL
test_Wduplicated-branches-4_836:
  build:
    cflags: "-std=gnu++98 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-4.c'
    sources:
      binary: Wduplicated-branches-4.s
  group: GRPSERIAL
test_Wduplicated-branches-4_837:
  build:
    cflags: "-std=gnu++11 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-4.c'
    sources:
      binary: Wduplicated-branches-4.s
  group: GRPSERIAL
test_Wduplicated-branches-4_838:
  build:
    cflags: "-std=gnu++14 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-4.c'
    sources:
      binary: Wduplicated-branches-4.s
  group: GRPSERIAL
test_Wduplicated-branches-5_1902:
  build:
    cflags: "-Wc++-compat  -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-5.c'
    sources:
      binary: Wduplicated-branches-5.s
  group: GRPSERIAL
test_Wduplicated-branches-5_21:
  build:
    cflags: "-Wc++-compat  -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-5.c'
    sources:
      binary: Wduplicated-branches-5.s
  group: GRPSERIAL
test_Wduplicated-branches-5_2331:
  build:
    cflags: "-std=gnu++98 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-5.c'
    sources:
      binary: Wduplicated-branches-5.s
  group: GRPSERIAL
test_Wduplicated-branches-5_2332:
  build:
    cflags: "-std=gnu++11 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-5.c'
    sources:
      binary: Wduplicated-branches-5.s
  group: GRPSERIAL
test_Wduplicated-branches-5_2333:
  build:
    cflags: "-std=gnu++14 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-5.c'
    sources:
      binary: Wduplicated-branches-5.s
  group: GRPSERIAL
test_Wduplicated-branches-5_410:
  build:
    cflags: "-Wc++-compat  -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-5.c'
    sources:
      binary: Wduplicated-branches-5.s
  group: GRPSERIAL
test_Wduplicated-branches-5_839:
  build:
    cflags: "-std=gnu++98 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-5.c'
    sources:
      binary: Wduplicated-branches-5.s
  group: GRPSERIAL
test_Wduplicated-branches-5_840:
  build:
    cflags: "-std=gnu++11 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-5.c'
    sources:
      binary: Wduplicated-branches-5.s
  group: GRPSERIAL
test_Wduplicated-branches-5_841:
  build:
    cflags: "-std=gnu++14 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-5.c'
    sources:
      binary: Wduplicated-branches-5.s
  group: GRPSERIAL
test_Wduplicated-branches-6_1903:
  build:
    cflags: "-Wc++-compat  -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-6.c'
    sources:
      binary: Wduplicated-branches-6.s
  group: GRPSERIAL
test_Wduplicated-branches-6_22:
  build:
    cflags: "-Wc++-compat  -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-6.c'
    sources:
      binary: Wduplicated-branches-6.s
  group: GRPSERIAL
test_Wduplicated-branches-6_2334:
  build:
    cflags: "-std=gnu++98 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-6.c'
    sources:
      binary: Wduplicated-branches-6.s
  group: GRPSERIAL
test_Wduplicated-branches-6_2335:
  build:
    cflags: "-std=gnu++11 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-6.c'
    sources:
      binary: Wduplicated-branches-6.s
  group: GRPSERIAL
test_Wduplicated-branches-6_2336:
  build:
    cflags: "-std=gnu++14 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-6.c'
    sources:
      binary: Wduplicated-branches-6.s
  group: GRPSERIAL
test_Wduplicated-branches-6_411:
  build:
    cflags: "-Wc++-compat  -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-6.c'
    sources:
      binary: Wduplicated-branches-6.s
  group: GRPSERIAL
test_Wduplicated-branches-6_842:
  build:
    cflags: "-std=gnu++98 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-6.c'
    sources:
      binary: Wduplicated-branches-6.s
  group: GRPSERIAL
test_Wduplicated-branches-6_843:
  build:
    cflags: "-std=gnu++11 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-6.c'
    sources:
      binary: Wduplicated-branches-6.s
  group: GRPSERIAL
test_Wduplicated-branches-6_844:
  build:
    cflags: "-std=gnu++14 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-6.c'
    sources:
      binary: Wduplicated-branches-6.s
  group: GRPSERIAL
test_Wduplicated-branches-7_1904:
  build:
    cflags: "-Wc++-compat  -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-7.c'
    sources:
      binary: Wduplicated-branches-7.s
  group: GRPSERIAL
  validate:
    match:
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-7_23:
  build:
    cflags: "-Wc++-compat  -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-7.c'
    sources:
      binary: Wduplicated-branches-7.s
  group: GRPSERIAL
  validate:
    match:
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-7_2337:
  build:
    cflags: "-std=gnu++98 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-7.c'
    sources:
      binary: Wduplicated-branches-7.s
  group: GRPSERIAL
  validate:
    match:
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-7_2338:
  build:
    cflags: "-std=gnu++11 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-7.c'
    sources:
      binary: Wduplicated-branches-7.s
  group: GRPSERIAL
  validate:
    match:
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-7_2339:
  build:
    cflags: "-std=gnu++14 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-7.c'
    sources:
      binary: Wduplicated-branches-7.s
  group: GRPSERIAL
  validate:
    match:
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-7_412:
  build:
    cflags: "-Wc++-compat  -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-7.c'
    sources:
      binary: Wduplicated-branches-7.s
  group: GRPSERIAL
  validate:
    match:
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-7_845:
  build:
    cflags: "-std=gnu++98 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-7.c'
    sources:
      binary: Wduplicated-branches-7.s
  group: GRPSERIAL
  validate:
    match:
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-7_846:
  build:
    cflags: "-std=gnu++11 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-7.c'
    sources:
      binary: Wduplicated-branches-7.s
  group: GRPSERIAL
  validate:
    match:
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-7_847:
  build:
    cflags: "-std=gnu++14 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-7.c'
    sources:
      binary: Wduplicated-branches-7.s
  group: GRPSERIAL
  validate:
    match:
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-8_1905:
  build:
    cflags: "-Wc++-compat  -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-8.c'
    sources:
      binary: Wduplicated-branches-8.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-8_2340:
  build:
    cflags: "-std=gnu++98 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-8.c'
    sources:
      binary: Wduplicated-branches-8.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-8_2341:
  build:
    cflags: "-std=gnu++11 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-8.c'
    sources:
      binary: Wduplicated-branches-8.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-8_2342:
  build:
    cflags: "-std=gnu++14 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-8.c'
    sources:
      binary: Wduplicated-branches-8.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-8_24:
  build:
    cflags: "-Wc++-compat  -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-8.c'
    sources:
      binary: Wduplicated-branches-8.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-8_413:
  build:
    cflags: "-Wc++-compat  -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-8.c'
    sources:
      binary: Wduplicated-branches-8.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-8_848:
  build:
    cflags: "-std=gnu++98 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-8.c'
    sources:
      binary: Wduplicated-branches-8.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-8_849:
  build:
    cflags: "-std=gnu++11 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-8.c'
    sources:
      binary: Wduplicated-branches-8.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-8_850:
  build:
    cflags: "-std=gnu++14 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-8.c'
    sources:
      binary: Wduplicated-branches-8.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-9_1906:
  build:
    cflags: "-Wc++-compat  -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-9.c'
    sources:
      binary: Wduplicated-branches-9.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-9_2343:
  build:
    cflags: "-std=gnu++98 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-9.c'
    sources:
      binary: Wduplicated-branches-9.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-9_2344:
  build:
    cflags: "-std=gnu++11 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-9.c'
    sources:
      binary: Wduplicated-branches-9.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-9_2345:
  build:
    cflags: "-std=gnu++14 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-9.c'
    sources:
      binary: Wduplicated-branches-9.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-9_25:
  build:
    cflags: "-Wc++-compat  -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-9.c'
    sources:
      binary: Wduplicated-branches-9.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-9_414:
  build:
    cflags: "-Wc++-compat  -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-9.c'
    sources:
      binary: Wduplicated-branches-9.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-9_851:
  build:
    cflags: "-std=gnu++98 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-9.c'
    sources:
      binary: Wduplicated-branches-9.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-9_852:
  build:
    cflags: "-std=gnu++11 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-9.c'
    sources:
      binary: Wduplicated-branches-9.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-branches-9_853:
  build:
    cflags: "-std=gnu++14 -Wduplicated-branches\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-branches-9.c'
    sources:
      binary: Wduplicated-branches-9.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("this condition has
          identical branches")[^\n]*\n?)+'
test_Wduplicated-cond-1_1907:
  build:
    cflags: "-Wc++-compat  -Wduplicated-cond\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-cond-1.c'
    sources:
      binary: Wduplicated-cond-1.s
  group: GRPSERIAL
  validate:
    match:
      L104:
        expect: true
        expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+(:106:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+(:108:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+(:110:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+(:114:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+(:116:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L140:
        expect: true
        expr: '(^|\n)([^\n]+(:140:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+(:142:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+(:146:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+(:164:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
test_Wduplicated-cond-1_2346:
  build:
    cflags: "-std=gnu++98 -Wduplicated-cond\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-cond-1.c'
    sources:
      binary: Wduplicated-cond-1.s
  group: GRPSERIAL
  validate:
    match:
      L104:
        expect: true
        expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+(:106:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+(:108:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+(:110:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+(:114:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+(:116:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L140:
        expect: true
        expr: '(^|\n)([^\n]+(:140:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+(:142:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+(:146:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+(:164:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
test_Wduplicated-cond-1_2347:
  build:
    cflags: "-std=gnu++11 -Wduplicated-cond\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-cond-1.c'
    sources:
      binary: Wduplicated-cond-1.s
  group: GRPSERIAL
  validate:
    match:
      L104:
        expect: true
        expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+(:106:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+(:108:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+(:110:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+(:114:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+(:116:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L140:
        expect: true
        expr: '(^|\n)([^\n]+(:140:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+(:142:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+(:146:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+(:164:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
test_Wduplicated-cond-1_2348:
  build:
    cflags: "-std=gnu++14 -Wduplicated-cond\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-cond-1.c'
    sources:
      binary: Wduplicated-cond-1.s
  group: GRPSERIAL
  validate:
    match:
      L104:
        expect: true
        expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+(:106:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+(:108:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+(:110:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+(:114:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+(:116:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L140:
        expect: true
        expr: '(^|\n)([^\n]+(:140:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+(:142:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+(:146:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+(:164:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
test_Wduplicated-cond-1_26:
  build:
    cflags: "-Wc++-compat  -Wduplicated-cond\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-cond-1.c'
    sources:
      binary: Wduplicated-cond-1.s
  group: GRPSERIAL
  validate:
    match:
      L104:
        expect: true
        expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+(:106:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+(:108:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+(:110:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+(:114:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+(:116:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L140:
        expect: true
        expr: '(^|\n)([^\n]+(:140:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+(:142:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+(:146:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+(:164:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
test_Wduplicated-cond-1_415:
  build:
    cflags: "-Wc++-compat  -Wduplicated-cond\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-cond-1.c'
    sources:
      binary: Wduplicated-cond-1.s
  group: GRPSERIAL
  validate:
    match:
      L104:
        expect: true
        expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+(:106:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+(:108:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+(:110:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+(:114:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+(:116:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L140:
        expect: true
        expr: '(^|\n)([^\n]+(:140:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+(:142:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+(:146:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+(:164:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
test_Wduplicated-cond-1_854:
  build:
    cflags: "-std=gnu++98 -Wduplicated-cond\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-cond-1.c'
    sources:
      binary: Wduplicated-cond-1.s
  group: GRPSERIAL
  validate:
    match:
      L104:
        expect: true
        expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+(:106:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+(:108:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+(:110:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+(:114:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+(:116:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L140:
        expect: true
        expr: '(^|\n)([^\n]+(:140:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+(:142:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+(:146:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+(:164:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
test_Wduplicated-cond-1_855:
  build:
    cflags: "-std=gnu++11 -Wduplicated-cond\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-cond-1.c'
    sources:
      binary: Wduplicated-cond-1.s
  group: GRPSERIAL
  validate:
    match:
      L104:
        expect: true
        expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+(:106:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+(:108:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+(:110:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+(:114:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+(:116:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L140:
        expect: true
        expr: '(^|\n)([^\n]+(:140:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+(:142:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+(:146:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+(:164:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
test_Wduplicated-cond-1_856:
  build:
    cflags: "-std=gnu++14 -Wduplicated-cond\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-cond-1.c'
    sources:
      binary: Wduplicated-cond-1.s
  group: GRPSERIAL
  validate:
    match:
      L104:
        expect: true
        expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+(:106:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+(:108:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+(:110:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+(:114:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+(:116:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L140:
        expect: true
        expr: '(^|\n)([^\n]+(:140:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+(:142:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+(:146:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+(:164:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("duplicated .if. condition")[^\n]*\n?)+'
test_Wduplicated-cond-3_1908:
  build:
    cflags: "-Wc++-compat  -Wall -Wno-duplicated-cond\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-cond-3.c'
    sources:
      binary: Wduplicated-cond-3.s
  group: GRPSERIAL
test_Wduplicated-cond-3_2349:
  build:
    cflags: "-std=gnu++98 -Wall -Wno-duplicated-cond\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-cond-3.c'
    sources:
      binary: Wduplicated-cond-3.s
  group: GRPSERIAL
test_Wduplicated-cond-3_2350:
  build:
    cflags: "-std=gnu++11 -Wall -Wno-duplicated-cond\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-cond-3.c'
    sources:
      binary: Wduplicated-cond-3.s
  group: GRPSERIAL
test_Wduplicated-cond-3_2351:
  build:
    cflags: "-std=gnu++14 -Wall -Wno-duplicated-cond\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-cond-3.c'
    sources:
      binary: Wduplicated-cond-3.s
  group: GRPSERIAL
test_Wduplicated-cond-3_27:
  build:
    cflags: "-Wc++-compat  -Wall -Wno-duplicated-cond\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-cond-3.c'
    sources:
      binary: Wduplicated-cond-3.s
  group: GRPSERIAL
test_Wduplicated-cond-3_416:
  build:
    cflags: "-Wc++-compat  -Wall -Wno-duplicated-cond\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-cond-3.c'
    sources:
      binary: Wduplicated-cond-3.s
  group: GRPSERIAL
test_Wduplicated-cond-3_857:
  build:
    cflags: "-std=gnu++98 -Wall -Wno-duplicated-cond\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-cond-3.c'
    sources:
      binary: Wduplicated-cond-3.s
  group: GRPSERIAL
test_Wduplicated-cond-3_858:
  build:
    cflags: "-std=gnu++11 -Wall -Wno-duplicated-cond\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-cond-3.c'
    sources:
      binary: Wduplicated-cond-3.s
  group: GRPSERIAL
test_Wduplicated-cond-3_859:
  build:
    cflags: "-std=gnu++14 -Wall -Wno-duplicated-cond\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-cond-3.c'
    sources:
      binary: Wduplicated-cond-3.s
  group: GRPSERIAL
test_Wduplicated-cond-4_1909:
  build:
    cflags: "-Wc++-compat  -Wduplicated-cond\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-cond-4.c'
    sources:
      binary: Wduplicated-cond-4.s
  group: GRPSERIAL
test_Wduplicated-cond-4_2352:
  build:
    cflags: "-std=gnu++98 -Wduplicated-cond\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-cond-4.c'
    sources:
      binary: Wduplicated-cond-4.s
  group: GRPSERIAL
test_Wduplicated-cond-4_2353:
  build:
    cflags: "-std=gnu++11 -Wduplicated-cond\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-cond-4.c'
    sources:
      binary: Wduplicated-cond-4.s
  group: GRPSERIAL
test_Wduplicated-cond-4_2354:
  build:
    cflags: "-std=gnu++14 -Wduplicated-cond\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-cond-4.c'
    sources:
      binary: Wduplicated-cond-4.s
  group: GRPSERIAL
test_Wduplicated-cond-4_28:
  build:
    cflags: "-Wc++-compat  -Wduplicated-cond\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-cond-4.c'
    sources:
      binary: Wduplicated-cond-4.s
  group: GRPSERIAL
test_Wduplicated-cond-4_417:
  build:
    cflags: "-Wc++-compat  -Wduplicated-cond\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-cond-4.c'
    sources:
      binary: Wduplicated-cond-4.s
  group: GRPSERIAL
test_Wduplicated-cond-4_860:
  build:
    cflags: "-std=gnu++98 -Wduplicated-cond\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-cond-4.c'
    sources:
      binary: Wduplicated-cond-4.s
  group: GRPSERIAL
test_Wduplicated-cond-4_861:
  build:
    cflags: "-std=gnu++11 -Wduplicated-cond\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-cond-4.c'
    sources:
      binary: Wduplicated-cond-4.s
  group: GRPSERIAL
test_Wduplicated-cond-4_862:
  build:
    cflags: "-std=gnu++14 -Wduplicated-cond\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wduplicated-cond-4.c'
    sources:
      binary: Wduplicated-cond-4.s
  group: GRPSERIAL
test_Wfloat-conversion_1910:
  build:
    cflags: "-Wc++-compat  -std=c99 -Wfloat-conversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wfloat-conversion.c'
    sources:
      binary: Wfloat-conversion.s
  group: GRPSERIAL
  validate:
    match:
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''double\'' constant value")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''double\'' constant value")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''long double\'' constant value")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''long double\'' constant value")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''double\''
          alters \''long double\'' constant value")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''double\''
          alters \''long double\'' constant value")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          from \''double\'' may alter its value")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          from \''double\'' may alter its value")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          from \''long double\'' may alter its value")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          from \''long double\'' may alter its value")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''double\''
          from \''long double\'' may alter its value")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''double\''
          from \''long double\'' may alter its value")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          alters \''float\'' constant value")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          alters \''float\'' constant value")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          alters \''double\'' constant value")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          alters \''double\'' constant value")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          from \''double\'' may alter its value")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          from \''double\'' may alter its value")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''int\'' constant value")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''int\'' constant value")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''int\'' constant value")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''int\'' constant value")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''signed
          char\'' alters \''double\'' constant value")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''unsigned
          char\'' alters \''double\'' constant value")[^\n]*\n?)+'
test_Wfloat-conversion_2355:
  build:
    cflags: "-std=gnu++98 -Wfloat-conversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wfloat-conversion.c'
    sources:
      binary: Wfloat-conversion.s
  group: GRPSERIAL
  validate:
    match:
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''double\'' constant value")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''double\'' constant value")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''long double\'' constant value")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''long double\'' constant value")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''double\''
          alters \''long double\'' constant value")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''double\''
          alters \''long double\'' constant value")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          from \''double\'' may alter its value")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          from \''double\'' may alter its value")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          from \''long double\'' may alter its value")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          from \''long double\'' may alter its value")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''double\''
          from \''long double\'' may alter its value")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''double\''
          from \''long double\'' may alter its value")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          alters \''float\'' constant value")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          alters \''float\'' constant value")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          alters \''double\'' constant value")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          alters \''double\'' constant value")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          from \''double\'' may alter its value")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          from \''double\'' may alter its value")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''int\'' constant value")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''int\'' constant value")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''int\'' constant value")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''int\'' constant value")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''signed
          char\'' alters \''double\'' constant value")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''unsigned
          char\'' alters \''double\'' constant value")[^\n]*\n?)+'
test_Wfloat-conversion_2356:
  build:
    cflags: "-std=gnu++11 -Wfloat-conversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wfloat-conversion.c'
    sources:
      binary: Wfloat-conversion.s
  group: GRPSERIAL
  validate:
    match:
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''double\'' constant value")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''double\'' constant value")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''long double\'' constant value")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''long double\'' constant value")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''double\''
          alters \''long double\'' constant value")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''double\''
          alters \''long double\'' constant value")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          from \''double\'' may alter its value")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          from \''double\'' may alter its value")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          from \''long double\'' may alter its value")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          from \''long double\'' may alter its value")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''double\''
          from \''long double\'' may alter its value")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''double\''
          from \''long double\'' may alter its value")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          alters \''float\'' constant value")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          alters \''float\'' constant value")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          alters \''double\'' constant value")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          alters \''double\'' constant value")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          from \''double\'' may alter its value")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          from \''double\'' may alter its value")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''int\'' constant value")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''int\'' constant value")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''int\'' constant value")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''int\'' constant value")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''signed
          char\'' alters \''double\'' constant value")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''unsigned
          char\'' alters \''double\'' constant value")[^\n]*\n?)+'
test_Wfloat-conversion_2357:
  build:
    cflags: "-std=gnu++14 -Wfloat-conversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wfloat-conversion.c'
    sources:
      binary: Wfloat-conversion.s
  group: GRPSERIAL
  validate:
    match:
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''double\'' constant value")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''double\'' constant value")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''long double\'' constant value")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''long double\'' constant value")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''double\''
          alters \''long double\'' constant value")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''double\''
          alters \''long double\'' constant value")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          from \''double\'' may alter its value")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          from \''double\'' may alter its value")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          from \''long double\'' may alter its value")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          from \''long double\'' may alter its value")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''double\''
          from \''long double\'' may alter its value")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''double\''
          from \''long double\'' may alter its value")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          alters \''float\'' constant value")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          alters \''float\'' constant value")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          alters \''double\'' constant value")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          alters \''double\'' constant value")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          from \''double\'' may alter its value")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          from \''double\'' may alter its value")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''int\'' constant value")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''int\'' constant value")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''int\'' constant value")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''int\'' constant value")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''signed
          char\'' alters \''double\'' constant value")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''unsigned
          char\'' alters \''double\'' constant value")[^\n]*\n?)+'
test_Wfloat-conversion_29:
  build:
    cflags: "-Wc++-compat  -std=c99 -Wfloat-conversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wfloat-conversion.c'
    sources:
      binary: Wfloat-conversion.s
  group: GRPSERIAL
  validate:
    match:
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''double\'' constant value")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''double\'' constant value")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''long double\'' constant value")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''long double\'' constant value")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''double\''
          alters \''long double\'' constant value")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''double\''
          alters \''long double\'' constant value")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          from \''double\'' may alter its value")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          from \''double\'' may alter its value")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          from \''long double\'' may alter its value")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          from \''long double\'' may alter its value")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''double\''
          from \''long double\'' may alter its value")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''double\''
          from \''long double\'' may alter its value")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          alters \''float\'' constant value")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          alters \''float\'' constant value")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          alters \''double\'' constant value")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          alters \''double\'' constant value")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          from \''double\'' may alter its value")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          from \''double\'' may alter its value")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''int\'' constant value")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''int\'' constant value")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''int\'' constant value")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''int\'' constant value")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''signed
          char\'' alters \''double\'' constant value")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''unsigned
          char\'' alters \''double\'' constant value")[^\n]*\n?)+'
test_Wfloat-conversion_418:
  build:
    cflags: "-Wc++-compat  -std=c99 -Wfloat-conversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wfloat-conversion.c'
    sources:
      binary: Wfloat-conversion.s
  group: GRPSERIAL
  validate:
    match:
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''double\'' constant value")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''double\'' constant value")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''long double\'' constant value")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''long double\'' constant value")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''double\''
          alters \''long double\'' constant value")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''double\''
          alters \''long double\'' constant value")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          from \''double\'' may alter its value")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          from \''double\'' may alter its value")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          from \''long double\'' may alter its value")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          from \''long double\'' may alter its value")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''double\''
          from \''long double\'' may alter its value")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''double\''
          from \''long double\'' may alter its value")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          alters \''float\'' constant value")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          alters \''float\'' constant value")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          alters \''double\'' constant value")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          alters \''double\'' constant value")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          from \''double\'' may alter its value")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          from \''double\'' may alter its value")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''int\'' constant value")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''int\'' constant value")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''int\'' constant value")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''int\'' constant value")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''signed
          char\'' alters \''double\'' constant value")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''unsigned
          char\'' alters \''double\'' constant value")[^\n]*\n?)+'
test_Wfloat-conversion_863:
  build:
    cflags: "-std=gnu++98 -Wfloat-conversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wfloat-conversion.c'
    sources:
      binary: Wfloat-conversion.s
  group: GRPSERIAL
  validate:
    match:
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''double\'' constant value")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''double\'' constant value")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''long double\'' constant value")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''long double\'' constant value")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''double\''
          alters \''long double\'' constant value")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''double\''
          alters \''long double\'' constant value")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          from \''double\'' may alter its value")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          from \''double\'' may alter its value")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          from \''long double\'' may alter its value")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          from \''long double\'' may alter its value")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''double\''
          from \''long double\'' may alter its value")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''double\''
          from \''long double\'' may alter its value")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          alters \''float\'' constant value")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          alters \''float\'' constant value")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          alters \''double\'' constant value")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          alters \''double\'' constant value")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          from \''double\'' may alter its value")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          from \''double\'' may alter its value")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''int\'' constant value")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''int\'' constant value")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''int\'' constant value")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''int\'' constant value")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''signed
          char\'' alters \''double\'' constant value")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''unsigned
          char\'' alters \''double\'' constant value")[^\n]*\n?)+'
test_Wfloat-conversion_864:
  build:
    cflags: "-std=gnu++11 -Wfloat-conversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wfloat-conversion.c'
    sources:
      binary: Wfloat-conversion.s
  group: GRPSERIAL
  validate:
    match:
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''double\'' constant value")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''double\'' constant value")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''long double\'' constant value")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''long double\'' constant value")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''double\''
          alters \''long double\'' constant value")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''double\''
          alters \''long double\'' constant value")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          from \''double\'' may alter its value")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          from \''double\'' may alter its value")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          from \''long double\'' may alter its value")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          from \''long double\'' may alter its value")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''double\''
          from \''long double\'' may alter its value")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''double\''
          from \''long double\'' may alter its value")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          alters \''float\'' constant value")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          alters \''float\'' constant value")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          alters \''double\'' constant value")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          alters \''double\'' constant value")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          from \''double\'' may alter its value")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          from \''double\'' may alter its value")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''int\'' constant value")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''int\'' constant value")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''int\'' constant value")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''int\'' constant value")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''signed
          char\'' alters \''double\'' constant value")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''unsigned
          char\'' alters \''double\'' constant value")[^\n]*\n?)+'
test_Wfloat-conversion_865:
  build:
    cflags: "-std=gnu++14 -Wfloat-conversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wfloat-conversion.c'
    sources:
      binary: Wfloat-conversion.s
  group: GRPSERIAL
  validate:
    match:
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''double\'' constant value")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''double\'' constant value")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''long double\'' constant value")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''long double\'' constant value")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''double\''
          alters \''long double\'' constant value")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''double\''
          alters \''long double\'' constant value")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          from \''double\'' may alter its value")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          from \''double\'' may alter its value")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          from \''long double\'' may alter its value")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          from \''long double\'' may alter its value")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''double\''
          from \''long double\'' may alter its value")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''double\''
          from \''long double\'' may alter its value")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          alters \''float\'' constant value")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          alters \''float\'' constant value")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          alters \''double\'' constant value")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          alters \''double\'' constant value")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          from \''double\'' may alter its value")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''int\''
          from \''double\'' may alter its value")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''int\'' constant value")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''int\'' constant value")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''int\'' constant value")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''float\''
          alters \''int\'' constant value")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''signed
          char\'' alters \''double\'' constant value")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("conversion to \''unsigned
          char\'' alters \''double\'' constant value")[^\n]*\n?)+'
test_Wimplicit-fallthrough-10_1912:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-10.c'
    sources:
      binary: Wimplicit-fallthrough-10.s
  group: GRPSERIAL
  validate:
    match:
      L115:
        expect: true
        expr: '(^|\n)([^\n]+(:115:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+(:166:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+(:180:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+(:227:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-10_2361:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-10.c'
    sources:
      binary: Wimplicit-fallthrough-10.s
  group: GRPSERIAL
  validate:
    match:
      L115:
        expect: true
        expr: '(^|\n)([^\n]+(:115:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+(:166:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+(:180:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+(:227:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-10_2362:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-10.c'
    sources:
      binary: Wimplicit-fallthrough-10.s
  group: GRPSERIAL
  validate:
    match:
      L115:
        expect: true
        expr: '(^|\n)([^\n]+(:115:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+(:166:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+(:180:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+(:227:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-10_2363:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-10.c'
    sources:
      binary: Wimplicit-fallthrough-10.s
  group: GRPSERIAL
  validate:
    match:
      L115:
        expect: true
        expr: '(^|\n)([^\n]+(:115:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+(:166:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+(:180:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+(:227:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-10_31:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-10.c'
    sources:
      binary: Wimplicit-fallthrough-10.s
  group: GRPSERIAL
  validate:
    match:
      L115:
        expect: true
        expr: '(^|\n)([^\n]+(:115:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+(:166:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+(:180:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+(:227:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-10_420:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-10.c'
    sources:
      binary: Wimplicit-fallthrough-10.s
  group: GRPSERIAL
  validate:
    match:
      L115:
        expect: true
        expr: '(^|\n)([^\n]+(:115:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+(:166:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+(:180:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+(:227:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-10_869:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-10.c'
    sources:
      binary: Wimplicit-fallthrough-10.s
  group: GRPSERIAL
  validate:
    match:
      L115:
        expect: true
        expr: '(^|\n)([^\n]+(:115:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+(:166:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+(:180:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+(:227:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-10_870:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-10.c'
    sources:
      binary: Wimplicit-fallthrough-10.s
  group: GRPSERIAL
  validate:
    match:
      L115:
        expect: true
        expr: '(^|\n)([^\n]+(:115:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+(:166:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+(:180:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+(:227:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-10_871:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-10.c'
    sources:
      binary: Wimplicit-fallthrough-10.s
  group: GRPSERIAL
  validate:
    match:
      L115:
        expect: true
        expr: '(^|\n)([^\n]+(:115:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+(:166:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+(:180:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+(:227:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-11_1913:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-11.c'
    sources:
      binary: Wimplicit-fallthrough-11.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-11_2364:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-11.c'
    sources:
      binary: Wimplicit-fallthrough-11.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-11_2365:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-11.c'
    sources:
      binary: Wimplicit-fallthrough-11.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-11_2366:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-11.c'
    sources:
      binary: Wimplicit-fallthrough-11.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-11_32:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-11.c'
    sources:
      binary: Wimplicit-fallthrough-11.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-11_421:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-11.c'
    sources:
      binary: Wimplicit-fallthrough-11.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-11_872:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-11.c'
    sources:
      binary: Wimplicit-fallthrough-11.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-11_873:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-11.c'
    sources:
      binary: Wimplicit-fallthrough-11.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-11_874:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-11.c'
    sources:
      binary: Wimplicit-fallthrough-11.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-12_1914:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-12.c'
    sources:
      binary: Wimplicit-fallthrough-12.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-12_2367:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-12.c'
    sources:
      binary: Wimplicit-fallthrough-12.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-12_2368:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-12.c'
    sources:
      binary: Wimplicit-fallthrough-12.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-12_2369:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-12.c'
    sources:
      binary: Wimplicit-fallthrough-12.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-12_33:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-12.c'
    sources:
      binary: Wimplicit-fallthrough-12.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-12_422:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-12.c'
    sources:
      binary: Wimplicit-fallthrough-12.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-12_875:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-12.c'
    sources:
      binary: Wimplicit-fallthrough-12.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-12_876:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-12.c'
    sources:
      binary: Wimplicit-fallthrough-12.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-12_877:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-12.c'
    sources:
      binary: Wimplicit-fallthrough-12.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-13_1915:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-13.c'
    sources:
      binary: Wimplicit-fallthrough-13.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-13_2370:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-13.c'
    sources:
      binary: Wimplicit-fallthrough-13.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-13_2371:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-13.c'
    sources:
      binary: Wimplicit-fallthrough-13.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-13_2372:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-13.c'
    sources:
      binary: Wimplicit-fallthrough-13.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-13_34:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-13.c'
    sources:
      binary: Wimplicit-fallthrough-13.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-13_423:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-13.c'
    sources:
      binary: Wimplicit-fallthrough-13.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-13_878:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-13.c'
    sources:
      binary: Wimplicit-fallthrough-13.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-13_879:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-13.c'
    sources:
      binary: Wimplicit-fallthrough-13.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-13_880:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-13.c'
    sources:
      binary: Wimplicit-fallthrough-13.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-14_1916:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-14.c'
    sources:
      binary: Wimplicit-fallthrough-14.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-14_2373:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-14.c'
    sources:
      binary: Wimplicit-fallthrough-14.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-14_2374:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-14.c'
    sources:
      binary: Wimplicit-fallthrough-14.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-14_2375:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-14.c'
    sources:
      binary: Wimplicit-fallthrough-14.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-14_35:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-14.c'
    sources:
      binary: Wimplicit-fallthrough-14.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-14_424:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-14.c'
    sources:
      binary: Wimplicit-fallthrough-14.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-14_881:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-14.c'
    sources:
      binary: Wimplicit-fallthrough-14.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-14_882:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-14.c'
    sources:
      binary: Wimplicit-fallthrough-14.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-14_883:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-14.c'
    sources:
      binary: Wimplicit-fallthrough-14.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-15_1917:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-15.c'
    sources:
      binary: Wimplicit-fallthrough-15.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-15_2376:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-15.c'
    sources:
      binary: Wimplicit-fallthrough-15.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-15_2377:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-15.c'
    sources:
      binary: Wimplicit-fallthrough-15.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-15_2378:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-15.c'
    sources:
      binary: Wimplicit-fallthrough-15.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-15_36:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-15.c'
    sources:
      binary: Wimplicit-fallthrough-15.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-15_425:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-15.c'
    sources:
      binary: Wimplicit-fallthrough-15.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-15_884:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-15.c'
    sources:
      binary: Wimplicit-fallthrough-15.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-15_885:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-15.c'
    sources:
      binary: Wimplicit-fallthrough-15.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-15_886:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-15.c'
    sources:
      binary: Wimplicit-fallthrough-15.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-16_1918:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-16.c'
    sources:
      binary: Wimplicit-fallthrough-16.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-16_2379:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-16.c'
    sources:
      binary: Wimplicit-fallthrough-16.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-16_2380:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-16.c'
    sources:
      binary: Wimplicit-fallthrough-16.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-16_2381:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-16.c'
    sources:
      binary: Wimplicit-fallthrough-16.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-16_37:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-16.c'
    sources:
      binary: Wimplicit-fallthrough-16.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-16_426:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-16.c'
    sources:
      binary: Wimplicit-fallthrough-16.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-16_887:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-16.c'
    sources:
      binary: Wimplicit-fallthrough-16.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-16_888:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-16.c'
    sources:
      binary: Wimplicit-fallthrough-16.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-16_889:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-16.c'
    sources:
      binary: Wimplicit-fallthrough-16.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-17_1919:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-17.c'
    sources:
      binary: Wimplicit-fallthrough-17.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-17_2382:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-17.c'
    sources:
      binary: Wimplicit-fallthrough-17.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-17_2383:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-17.c'
    sources:
      binary: Wimplicit-fallthrough-17.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-17_2384:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-17.c'
    sources:
      binary: Wimplicit-fallthrough-17.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-17_38:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-17.c'
    sources:
      binary: Wimplicit-fallthrough-17.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-17_427:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-17.c'
    sources:
      binary: Wimplicit-fallthrough-17.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-17_890:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-17.c'
    sources:
      binary: Wimplicit-fallthrough-17.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-17_891:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-17.c'
    sources:
      binary: Wimplicit-fallthrough-17.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-17_892:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-17.c'
    sources:
      binary: Wimplicit-fallthrough-17.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-18_1920:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-18.c'
    sources:
      binary: Wimplicit-fallthrough-18.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-18_2385:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-18.c'
    sources:
      binary: Wimplicit-fallthrough-18.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-18_2386:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-18.c'
    sources:
      binary: Wimplicit-fallthrough-18.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-18_2387:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-18.c'
    sources:
      binary: Wimplicit-fallthrough-18.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-18_39:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-18.c'
    sources:
      binary: Wimplicit-fallthrough-18.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-18_428:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-18.c'
    sources:
      binary: Wimplicit-fallthrough-18.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-18_893:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-18.c'
    sources:
      binary: Wimplicit-fallthrough-18.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-18_894:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-18.c'
    sources:
      binary: Wimplicit-fallthrough-18.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-18_895:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-18.c'
    sources:
      binary: Wimplicit-fallthrough-18.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-19_1921:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-19.c'
    sources:
      binary: Wimplicit-fallthrough-19.s
  group: GRPSERIAL
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-19_2388:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-19.c'
    sources:
      binary: Wimplicit-fallthrough-19.s
  group: GRPSERIAL
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-19_2389:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-19.c'
    sources:
      binary: Wimplicit-fallthrough-19.s
  group: GRPSERIAL
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-19_2390:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-19.c'
    sources:
      binary: Wimplicit-fallthrough-19.s
  group: GRPSERIAL
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-19_40:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-19.c'
    sources:
      binary: Wimplicit-fallthrough-19.s
  group: GRPSERIAL
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-19_429:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-19.c'
    sources:
      binary: Wimplicit-fallthrough-19.s
  group: GRPSERIAL
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-19_896:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-19.c'
    sources:
      binary: Wimplicit-fallthrough-19.s
  group: GRPSERIAL
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-19_897:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-19.c'
    sources:
      binary: Wimplicit-fallthrough-19.s
  group: GRPSERIAL
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-19_898:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-19.c'
    sources:
      binary: Wimplicit-fallthrough-19.s
  group: GRPSERIAL
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-1_1911:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-1.c'
    sources:
      binary: Wimplicit-fallthrough-1.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("not preceding")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-1_2358:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-1.c'
    sources:
      binary: Wimplicit-fallthrough-1.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("not preceding")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-1_2359:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-1.c'
    sources:
      binary: Wimplicit-fallthrough-1.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("not preceding")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-1_2360:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-1.c'
    sources:
      binary: Wimplicit-fallthrough-1.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("not preceding")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-1_30:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-1.c'
    sources:
      binary: Wimplicit-fallthrough-1.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("not preceding")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-1_419:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-1.c'
    sources:
      binary: Wimplicit-fallthrough-1.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("not preceding")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-1_866:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-1.c'
    sources:
      binary: Wimplicit-fallthrough-1.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("not preceding")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-1_867:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-1.c'
    sources:
      binary: Wimplicit-fallthrough-1.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("not preceding")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-1_868:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-1.c'
    sources:
      binary: Wimplicit-fallthrough-1.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("not preceding")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-20_1923:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-20.c'
    sources:
      binary: Wimplicit-fallthrough-20.s
  group: GRPSERIAL
  validate:
    match:
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("ignored|only attribute")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("ignored|only attribute")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("ignored|only attribute")[^\n]*\n?)+'
test_Wimplicit-fallthrough-20_2394:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-20.c'
    sources:
      binary: Wimplicit-fallthrough-20.s
  group: GRPSERIAL
  validate:
    match:
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("ignored|only attribute")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("ignored|only attribute")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("ignored|only attribute")[^\n]*\n?)+'
test_Wimplicit-fallthrough-20_2395:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-20.c'
    sources:
      binary: Wimplicit-fallthrough-20.s
  group: GRPSERIAL
  validate:
    match:
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("ignored|only attribute")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("ignored|only attribute")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("ignored|only attribute")[^\n]*\n?)+'
test_Wimplicit-fallthrough-20_2396:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-20.c'
    sources:
      binary: Wimplicit-fallthrough-20.s
  group: GRPSERIAL
  validate:
    match:
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("ignored|only attribute")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("ignored|only attribute")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("ignored|only attribute")[^\n]*\n?)+'
test_Wimplicit-fallthrough-20_42:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-20.c'
    sources:
      binary: Wimplicit-fallthrough-20.s
  group: GRPSERIAL
  validate:
    match:
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("ignored|only attribute")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("ignored|only attribute")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("ignored|only attribute")[^\n]*\n?)+'
test_Wimplicit-fallthrough-20_431:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-20.c'
    sources:
      binary: Wimplicit-fallthrough-20.s
  group: GRPSERIAL
  validate:
    match:
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("ignored|only attribute")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("ignored|only attribute")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("ignored|only attribute")[^\n]*\n?)+'
test_Wimplicit-fallthrough-20_902:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-20.c'
    sources:
      binary: Wimplicit-fallthrough-20.s
  group: GRPSERIAL
  validate:
    match:
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("ignored|only attribute")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("ignored|only attribute")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("ignored|only attribute")[^\n]*\n?)+'
test_Wimplicit-fallthrough-20_903:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-20.c'
    sources:
      binary: Wimplicit-fallthrough-20.s
  group: GRPSERIAL
  validate:
    match:
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("ignored|only attribute")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("ignored|only attribute")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("ignored|only attribute")[^\n]*\n?)+'
test_Wimplicit-fallthrough-20_904:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-20.c'
    sources:
      binary: Wimplicit-fallthrough-20.s
  group: GRPSERIAL
  validate:
    match:
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("ignored|only attribute")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("ignored|only attribute")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("ignored|only attribute")[^\n]*\n?)+'
test_Wimplicit-fallthrough-21_1924:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-21.c'
    sources:
      binary: Wimplicit-fallthrough-21.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("not preceding")[^\n]*\n?)+'
test_Wimplicit-fallthrough-21_2397:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-21.c'
    sources:
      binary: Wimplicit-fallthrough-21.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("not preceding")[^\n]*\n?)+'
test_Wimplicit-fallthrough-21_2398:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-21.c'
    sources:
      binary: Wimplicit-fallthrough-21.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("not preceding")[^\n]*\n?)+'
test_Wimplicit-fallthrough-21_2399:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-21.c'
    sources:
      binary: Wimplicit-fallthrough-21.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("not preceding")[^\n]*\n?)+'
test_Wimplicit-fallthrough-21_43:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-21.c'
    sources:
      binary: Wimplicit-fallthrough-21.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("not preceding")[^\n]*\n?)+'
test_Wimplicit-fallthrough-21_432:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-21.c'
    sources:
      binary: Wimplicit-fallthrough-21.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("not preceding")[^\n]*\n?)+'
test_Wimplicit-fallthrough-21_905:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-21.c'
    sources:
      binary: Wimplicit-fallthrough-21.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("not preceding")[^\n]*\n?)+'
test_Wimplicit-fallthrough-21_906:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-21.c'
    sources:
      binary: Wimplicit-fallthrough-21.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("not preceding")[^\n]*\n?)+'
test_Wimplicit-fallthrough-21_907:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-21.c'
    sources:
      binary: Wimplicit-fallthrough-21.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("not preceding")[^\n]*\n?)+'
test_Wimplicit-fallthrough-22_1925:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-22.c'
    sources:
      binary: Wimplicit-fallthrough-22.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-22_2400:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-22.c'
    sources:
      binary: Wimplicit-fallthrough-22.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-22_2401:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-22.c'
    sources:
      binary: Wimplicit-fallthrough-22.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-22_2402:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-22.c'
    sources:
      binary: Wimplicit-fallthrough-22.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-22_433:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-22.c'
    sources:
      binary: Wimplicit-fallthrough-22.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-22_44:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-22.c'
    sources:
      binary: Wimplicit-fallthrough-22.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-22_908:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-22.c'
    sources:
      binary: Wimplicit-fallthrough-22.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-22_909:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-22.c'
    sources:
      binary: Wimplicit-fallthrough-22.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-22_910:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-22.c'
    sources:
      binary: Wimplicit-fallthrough-22.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-23_1926:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-23.c'
    sources:
      binary: Wimplicit-fallthrough-23.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-23_2403:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-23.c'
    sources:
      binary: Wimplicit-fallthrough-23.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-23_2404:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-23.c'
    sources:
      binary: Wimplicit-fallthrough-23.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-23_2405:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-23.c'
    sources:
      binary: Wimplicit-fallthrough-23.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-23_434:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-23.c'
    sources:
      binary: Wimplicit-fallthrough-23.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-23_45:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-23.c'
    sources:
      binary: Wimplicit-fallthrough-23.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-23_911:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-23.c'
    sources:
      binary: Wimplicit-fallthrough-23.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-23_912:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-23.c'
    sources:
      binary: Wimplicit-fallthrough-23.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-23_913:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-23.c'
    sources:
      binary: Wimplicit-fallthrough-23.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-24_1927:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough -C\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-24.c'
    sources:
      binary: Wimplicit-fallthrough-24.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-24_2406:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough -C\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-24.c'
    sources:
      binary: Wimplicit-fallthrough-24.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-24_2407:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough -C\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-24.c'
    sources:
      binary: Wimplicit-fallthrough-24.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-24_2408:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough -C\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-24.c'
    sources:
      binary: Wimplicit-fallthrough-24.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-24_435:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough -C\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-24.c'
    sources:
      binary: Wimplicit-fallthrough-24.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-24_46:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough -C\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-24.c'
    sources:
      binary: Wimplicit-fallthrough-24.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-24_914:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough -C\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-24.c'
    sources:
      binary: Wimplicit-fallthrough-24.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-24_915:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough -C\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-24.c'
    sources:
      binary: Wimplicit-fallthrough-24.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-24_916:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough -C\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-24.c'
    sources:
      binary: Wimplicit-fallthrough-24.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-25_1928:
  build:
    cflags: "-Wc++-compat  -Wextra\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-25.c'
    sources:
      binary: Wimplicit-fallthrough-25.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-25_2409:
  build:
    cflags: "-std=gnu++98 -Wextra\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-25.c'
    sources:
      binary: Wimplicit-fallthrough-25.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-25_2410:
  build:
    cflags: "-std=gnu++11 -Wextra\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-25.c'
    sources:
      binary: Wimplicit-fallthrough-25.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-25_2411:
  build:
    cflags: "-std=gnu++14 -Wextra\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-25.c'
    sources:
      binary: Wimplicit-fallthrough-25.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-25_436:
  build:
    cflags: "-Wc++-compat  -Wextra\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-25.c'
    sources:
      binary: Wimplicit-fallthrough-25.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-25_47:
  build:
    cflags: "-Wc++-compat  -Wextra\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-25.c'
    sources:
      binary: Wimplicit-fallthrough-25.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-25_917:
  build:
    cflags: "-std=gnu++98 -Wextra\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-25.c'
    sources:
      binary: Wimplicit-fallthrough-25.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-25_918:
  build:
    cflags: "-std=gnu++11 -Wextra\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-25.c'
    sources:
      binary: Wimplicit-fallthrough-25.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-25_919:
  build:
    cflags: "-std=gnu++14 -Wextra\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-25.c'
    sources:
      binary: Wimplicit-fallthrough-25.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-26_1929:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-26.c'
    sources:
      binary: Wimplicit-fallthrough-26.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-26_2412:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-26.c'
    sources:
      binary: Wimplicit-fallthrough-26.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-26_2413:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-26.c'
    sources:
      binary: Wimplicit-fallthrough-26.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-26_2414:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-26.c'
    sources:
      binary: Wimplicit-fallthrough-26.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-26_437:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-26.c'
    sources:
      binary: Wimplicit-fallthrough-26.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-26_48:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-26.c'
    sources:
      binary: Wimplicit-fallthrough-26.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-26_920:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-26.c'
    sources:
      binary: Wimplicit-fallthrough-26.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-26_921:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-26.c'
    sources:
      binary: Wimplicit-fallthrough-26.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-26_922:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-26.c'
    sources:
      binary: Wimplicit-fallthrough-26.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-27_1930:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough=1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-27.c'
    sources:
      binary: Wimplicit-fallthrough-27.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-27_2415:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough=1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-27.c'
    sources:
      binary: Wimplicit-fallthrough-27.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-27_2416:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough=1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-27.c'
    sources:
      binary: Wimplicit-fallthrough-27.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-27_2417:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough=1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-27.c'
    sources:
      binary: Wimplicit-fallthrough-27.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-27_438:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough=1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-27.c'
    sources:
      binary: Wimplicit-fallthrough-27.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-27_49:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough=1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-27.c'
    sources:
      binary: Wimplicit-fallthrough-27.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-27_923:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough=1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-27.c'
    sources:
      binary: Wimplicit-fallthrough-27.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-27_924:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough=1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-27.c'
    sources:
      binary: Wimplicit-fallthrough-27.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-27_925:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough=1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-27.c'
    sources:
      binary: Wimplicit-fallthrough-27.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-28_1931:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough=2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-28.c'
    sources:
      binary: Wimplicit-fallthrough-28.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-28_2418:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough=2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-28.c'
    sources:
      binary: Wimplicit-fallthrough-28.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-28_2419:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough=2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-28.c'
    sources:
      binary: Wimplicit-fallthrough-28.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-28_2420:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough=2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-28.c'
    sources:
      binary: Wimplicit-fallthrough-28.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-28_439:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough=2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-28.c'
    sources:
      binary: Wimplicit-fallthrough-28.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-28_50:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough=2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-28.c'
    sources:
      binary: Wimplicit-fallthrough-28.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-28_926:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough=2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-28.c'
    sources:
      binary: Wimplicit-fallthrough-28.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-28_927:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough=2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-28.c'
    sources:
      binary: Wimplicit-fallthrough-28.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-28_928:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough=2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-28.c'
    sources:
      binary: Wimplicit-fallthrough-28.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-29_1932:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough=3\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-29.c'
    sources:
      binary: Wimplicit-fallthrough-29.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-29_2421:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough=3\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-29.c'
    sources:
      binary: Wimplicit-fallthrough-29.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-29_2422:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough=3\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-29.c'
    sources:
      binary: Wimplicit-fallthrough-29.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-29_2423:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough=3\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-29.c'
    sources:
      binary: Wimplicit-fallthrough-29.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-29_440:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough=3\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-29.c'
    sources:
      binary: Wimplicit-fallthrough-29.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-29_51:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough=3\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-29.c'
    sources:
      binary: Wimplicit-fallthrough-29.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-29_929:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough=3\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-29.c'
    sources:
      binary: Wimplicit-fallthrough-29.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-29_930:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough=3\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-29.c'
    sources:
      binary: Wimplicit-fallthrough-29.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-29_931:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough=3\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-29.c'
    sources:
      binary: Wimplicit-fallthrough-29.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-2_1922:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-2.c'
    sources:
      binary: Wimplicit-fallthrough-2.s
  group: GRPSERIAL
  validate:
    match:
      L118:
        expect: true
        expr: '(^|\n)([^\n]+(:118:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+(:131:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L189:
        expect: true
        expr: '(^|\n)([^\n]+(:189:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-2_2391:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-2.c'
    sources:
      binary: Wimplicit-fallthrough-2.s
  group: GRPSERIAL
  validate:
    match:
      L118:
        expect: true
        expr: '(^|\n)([^\n]+(:118:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+(:131:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L189:
        expect: true
        expr: '(^|\n)([^\n]+(:189:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-2_2392:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-2.c'
    sources:
      binary: Wimplicit-fallthrough-2.s
  group: GRPSERIAL
  validate:
    match:
      L118:
        expect: true
        expr: '(^|\n)([^\n]+(:118:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+(:131:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L189:
        expect: true
        expr: '(^|\n)([^\n]+(:189:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-2_2393:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-2.c'
    sources:
      binary: Wimplicit-fallthrough-2.s
  group: GRPSERIAL
  validate:
    match:
      L118:
        expect: true
        expr: '(^|\n)([^\n]+(:118:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+(:131:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L189:
        expect: true
        expr: '(^|\n)([^\n]+(:189:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-2_41:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-2.c'
    sources:
      binary: Wimplicit-fallthrough-2.s
  group: GRPSERIAL
  validate:
    match:
      L118:
        expect: true
        expr: '(^|\n)([^\n]+(:118:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+(:131:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L189:
        expect: true
        expr: '(^|\n)([^\n]+(:189:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-2_430:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-2.c'
    sources:
      binary: Wimplicit-fallthrough-2.s
  group: GRPSERIAL
  validate:
    match:
      L118:
        expect: true
        expr: '(^|\n)([^\n]+(:118:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+(:131:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L189:
        expect: true
        expr: '(^|\n)([^\n]+(:189:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-2_899:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-2.c'
    sources:
      binary: Wimplicit-fallthrough-2.s
  group: GRPSERIAL
  validate:
    match:
      L118:
        expect: true
        expr: '(^|\n)([^\n]+(:118:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+(:131:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L189:
        expect: true
        expr: '(^|\n)([^\n]+(:189:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-2_900:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-2.c'
    sources:
      binary: Wimplicit-fallthrough-2.s
  group: GRPSERIAL
  validate:
    match:
      L118:
        expect: true
        expr: '(^|\n)([^\n]+(:118:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+(:131:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L189:
        expect: true
        expr: '(^|\n)([^\n]+(:189:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-2_901:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-2.c'
    sources:
      binary: Wimplicit-fallthrough-2.s
  group: GRPSERIAL
  validate:
    match:
      L118:
        expect: true
        expr: '(^|\n)([^\n]+(:118:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+(:131:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L189:
        expect: true
        expr: '(^|\n)([^\n]+(:189:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-30_1934:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough=4\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-30.c'
    sources:
      binary: Wimplicit-fallthrough-30.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-30_2427:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough=4\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-30.c'
    sources:
      binary: Wimplicit-fallthrough-30.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-30_2428:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough=4\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-30.c'
    sources:
      binary: Wimplicit-fallthrough-30.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-30_2429:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough=4\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-30.c'
    sources:
      binary: Wimplicit-fallthrough-30.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-30_442:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough=4\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-30.c'
    sources:
      binary: Wimplicit-fallthrough-30.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-30_53:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough=4\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-30.c'
    sources:
      binary: Wimplicit-fallthrough-30.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-30_935:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough=4\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-30.c'
    sources:
      binary: Wimplicit-fallthrough-30.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-30_936:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough=4\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-30.c'
    sources:
      binary: Wimplicit-fallthrough-30.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-30_937:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough=4\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-30.c'
    sources:
      binary: Wimplicit-fallthrough-30.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-31_1935:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough=5\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-31.c'
    sources:
      binary: Wimplicit-fallthrough-31.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-31_2430:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough=5\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-31.c'
    sources:
      binary: Wimplicit-fallthrough-31.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-31_2431:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough=5\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-31.c'
    sources:
      binary: Wimplicit-fallthrough-31.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-31_2432:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough=5\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-31.c'
    sources:
      binary: Wimplicit-fallthrough-31.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-31_443:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough=5\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-31.c'
    sources:
      binary: Wimplicit-fallthrough-31.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-31_54:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough=5\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-31.c'
    sources:
      binary: Wimplicit-fallthrough-31.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-31_938:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough=5\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-31.c'
    sources:
      binary: Wimplicit-fallthrough-31.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-31_939:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough=5\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-31.c'
    sources:
      binary: Wimplicit-fallthrough-31.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-31_940:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough=5\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-31.c'
    sources:
      binary: Wimplicit-fallthrough-31.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("this statement may
          \\[fla\\]* through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-32_1936:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough=0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-32.c'
    sources:
      binary: Wimplicit-fallthrough-32.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-32_2433:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough=0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-32.c'
    sources:
      binary: Wimplicit-fallthrough-32.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-32_2434:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough=0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-32.c'
    sources:
      binary: Wimplicit-fallthrough-32.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-32_2435:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough=0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-32.c'
    sources:
      binary: Wimplicit-fallthrough-32.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-32_444:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough=0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-32.c'
    sources:
      binary: Wimplicit-fallthrough-32.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-32_55:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough=0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-32.c'
    sources:
      binary: Wimplicit-fallthrough-32.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-32_941:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough=0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-32.c'
    sources:
      binary: Wimplicit-fallthrough-32.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-32_942:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough=0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-32.c'
    sources:
      binary: Wimplicit-fallthrough-32.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-32_943:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough=0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-32.c'
    sources:
      binary: Wimplicit-fallthrough-32.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-33_1937:
  build:
    cflags: "-Wc++-compat  -Wno-implicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-33.c'
    sources:
      binary: Wimplicit-fallthrough-33.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-33_2436:
  build:
    cflags: "-std=gnu++98 -Wno-implicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-33.c'
    sources:
      binary: Wimplicit-fallthrough-33.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-33_2437:
  build:
    cflags: "-std=gnu++11 -Wno-implicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-33.c'
    sources:
      binary: Wimplicit-fallthrough-33.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-33_2438:
  build:
    cflags: "-std=gnu++14 -Wno-implicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-33.c'
    sources:
      binary: Wimplicit-fallthrough-33.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-33_445:
  build:
    cflags: "-Wc++-compat  -Wno-implicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-33.c'
    sources:
      binary: Wimplicit-fallthrough-33.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-33_56:
  build:
    cflags: "-Wc++-compat  -Wno-implicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-33.c'
    sources:
      binary: Wimplicit-fallthrough-33.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-33_944:
  build:
    cflags: "-std=gnu++98 -Wno-implicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-33.c'
    sources:
      binary: Wimplicit-fallthrough-33.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-33_945:
  build:
    cflags: "-std=gnu++11 -Wno-implicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-33.c'
    sources:
      binary: Wimplicit-fallthrough-33.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-33_946:
  build:
    cflags: "-std=gnu++14 -Wno-implicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-33.c'
    sources:
      binary: Wimplicit-fallthrough-33.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-34_1938:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-34.c'
    sources:
      binary: Wimplicit-fallthrough-34.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-34_2439:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-34.c'
    sources:
      binary: Wimplicit-fallthrough-34.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-34_2440:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-34.c'
    sources:
      binary: Wimplicit-fallthrough-34.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-34_2441:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-34.c'
    sources:
      binary: Wimplicit-fallthrough-34.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-34_446:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-34.c'
    sources:
      binary: Wimplicit-fallthrough-34.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-34_57:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-34.c'
    sources:
      binary: Wimplicit-fallthrough-34.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-34_947:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-34.c'
    sources:
      binary: Wimplicit-fallthrough-34.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-34_948:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-34.c'
    sources:
      binary: Wimplicit-fallthrough-34.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-34_949:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-34.c'
    sources:
      binary: Wimplicit-fallthrough-34.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-35_1939:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-35.c'
    sources:
      binary: Wimplicit-fallthrough-35.s
  group: GRPSERIAL
  validate:
    match:
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-35_2442:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-35.c'
    sources:
      binary: Wimplicit-fallthrough-35.s
  group: GRPSERIAL
  validate:
    match:
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-35_2443:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-35.c'
    sources:
      binary: Wimplicit-fallthrough-35.s
  group: GRPSERIAL
  validate:
    match:
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-35_2444:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-35.c'
    sources:
      binary: Wimplicit-fallthrough-35.s
  group: GRPSERIAL
  validate:
    match:
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-35_447:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-35.c'
    sources:
      binary: Wimplicit-fallthrough-35.s
  group: GRPSERIAL
  validate:
    match:
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-35_58:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-35.c'
    sources:
      binary: Wimplicit-fallthrough-35.s
  group: GRPSERIAL
  validate:
    match:
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-35_950:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-35.c'
    sources:
      binary: Wimplicit-fallthrough-35.s
  group: GRPSERIAL
  validate:
    match:
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-35_951:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-35.c'
    sources:
      binary: Wimplicit-fallthrough-35.s
  group: GRPSERIAL
  validate:
    match:
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-35_952:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-35.c'
    sources:
      binary: Wimplicit-fallthrough-35.s
  group: GRPSERIAL
  validate:
    match:
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-3_1933:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-3.c'
    sources:
      binary: Wimplicit-fallthrough-3.s
  group: GRPSERIAL
  validate:
    match:
      L107:
        expect: true
        expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+(:142:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L162:
        expect: true
        expr: '(^|\n)([^\n]+(:162:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L174:
        expect: true
        expr: '(^|\n)([^\n]+(:174:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L199:
        expect: true
        expr: '(^|\n)([^\n]+(:199:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+(:214:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L226:
        expect: true
        expr: '(^|\n)([^\n]+(:226:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L235:
        expect: true
        expr: '(^|\n)([^\n]+(:235:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L247:
        expect: true
        expr: '(^|\n)([^\n]+(:247:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-3_2424:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-3.c'
    sources:
      binary: Wimplicit-fallthrough-3.s
  group: GRPSERIAL
  validate:
    match:
      L107:
        expect: true
        expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+(:142:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L162:
        expect: true
        expr: '(^|\n)([^\n]+(:162:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L174:
        expect: true
        expr: '(^|\n)([^\n]+(:174:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L199:
        expect: true
        expr: '(^|\n)([^\n]+(:199:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+(:214:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L226:
        expect: true
        expr: '(^|\n)([^\n]+(:226:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L235:
        expect: true
        expr: '(^|\n)([^\n]+(:235:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L247:
        expect: true
        expr: '(^|\n)([^\n]+(:247:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-3_2425:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-3.c'
    sources:
      binary: Wimplicit-fallthrough-3.s
  group: GRPSERIAL
  validate:
    match:
      L107:
        expect: true
        expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+(:142:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L162:
        expect: true
        expr: '(^|\n)([^\n]+(:162:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L174:
        expect: true
        expr: '(^|\n)([^\n]+(:174:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L199:
        expect: true
        expr: '(^|\n)([^\n]+(:199:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+(:214:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L226:
        expect: true
        expr: '(^|\n)([^\n]+(:226:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L235:
        expect: true
        expr: '(^|\n)([^\n]+(:235:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L247:
        expect: true
        expr: '(^|\n)([^\n]+(:247:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-3_2426:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-3.c'
    sources:
      binary: Wimplicit-fallthrough-3.s
  group: GRPSERIAL
  validate:
    match:
      L107:
        expect: true
        expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+(:142:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L162:
        expect: true
        expr: '(^|\n)([^\n]+(:162:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L174:
        expect: true
        expr: '(^|\n)([^\n]+(:174:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L199:
        expect: true
        expr: '(^|\n)([^\n]+(:199:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+(:214:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L226:
        expect: true
        expr: '(^|\n)([^\n]+(:226:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L235:
        expect: true
        expr: '(^|\n)([^\n]+(:235:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L247:
        expect: true
        expr: '(^|\n)([^\n]+(:247:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-3_441:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-3.c'
    sources:
      binary: Wimplicit-fallthrough-3.s
  group: GRPSERIAL
  validate:
    match:
      L107:
        expect: true
        expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+(:142:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L162:
        expect: true
        expr: '(^|\n)([^\n]+(:162:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L174:
        expect: true
        expr: '(^|\n)([^\n]+(:174:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L199:
        expect: true
        expr: '(^|\n)([^\n]+(:199:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+(:214:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L226:
        expect: true
        expr: '(^|\n)([^\n]+(:226:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L235:
        expect: true
        expr: '(^|\n)([^\n]+(:235:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L247:
        expect: true
        expr: '(^|\n)([^\n]+(:247:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-3_52:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-3.c'
    sources:
      binary: Wimplicit-fallthrough-3.s
  group: GRPSERIAL
  validate:
    match:
      L107:
        expect: true
        expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+(:142:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L162:
        expect: true
        expr: '(^|\n)([^\n]+(:162:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L174:
        expect: true
        expr: '(^|\n)([^\n]+(:174:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L199:
        expect: true
        expr: '(^|\n)([^\n]+(:199:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+(:214:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L226:
        expect: true
        expr: '(^|\n)([^\n]+(:226:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L235:
        expect: true
        expr: '(^|\n)([^\n]+(:235:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L247:
        expect: true
        expr: '(^|\n)([^\n]+(:247:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-3_932:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-3.c'
    sources:
      binary: Wimplicit-fallthrough-3.s
  group: GRPSERIAL
  validate:
    match:
      L107:
        expect: true
        expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+(:142:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L162:
        expect: true
        expr: '(^|\n)([^\n]+(:162:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L174:
        expect: true
        expr: '(^|\n)([^\n]+(:174:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L199:
        expect: true
        expr: '(^|\n)([^\n]+(:199:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+(:214:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L226:
        expect: true
        expr: '(^|\n)([^\n]+(:226:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L235:
        expect: true
        expr: '(^|\n)([^\n]+(:235:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L247:
        expect: true
        expr: '(^|\n)([^\n]+(:247:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-3_933:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-3.c'
    sources:
      binary: Wimplicit-fallthrough-3.s
  group: GRPSERIAL
  validate:
    match:
      L107:
        expect: true
        expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+(:142:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L162:
        expect: true
        expr: '(^|\n)([^\n]+(:162:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L174:
        expect: true
        expr: '(^|\n)([^\n]+(:174:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L199:
        expect: true
        expr: '(^|\n)([^\n]+(:199:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+(:214:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L226:
        expect: true
        expr: '(^|\n)([^\n]+(:226:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L235:
        expect: true
        expr: '(^|\n)([^\n]+(:235:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L247:
        expect: true
        expr: '(^|\n)([^\n]+(:247:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-3_934:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-3.c'
    sources:
      binary: Wimplicit-fallthrough-3.s
  group: GRPSERIAL
  validate:
    match:
      L107:
        expect: true
        expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+(:142:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L162:
        expect: true
        expr: '(^|\n)([^\n]+(:162:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L174:
        expect: true
        expr: '(^|\n)([^\n]+(:174:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L199:
        expect: true
        expr: '(^|\n)([^\n]+(:199:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+(:214:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L226:
        expect: true
        expr: '(^|\n)([^\n]+(:226:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L235:
        expect: true
        expr: '(^|\n)([^\n]+(:235:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L247:
        expect: true
        expr: '(^|\n)([^\n]+(:247:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-4_1940:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-4.c'
    sources:
      binary: Wimplicit-fallthrough-4.s
  group: GRPSERIAL
  validate:
    match:
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+(:131:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L170:
        expect: true
        expr: '(^|\n)([^\n]+(:170:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+(:183:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+(:196:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+(:215:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L231:
        expect: true
        expr: '(^|\n)([^\n]+(:231:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-4_2445:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-4.c'
    sources:
      binary: Wimplicit-fallthrough-4.s
  group: GRPSERIAL
  validate:
    match:
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+(:131:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L170:
        expect: true
        expr: '(^|\n)([^\n]+(:170:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+(:183:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+(:196:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+(:215:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L231:
        expect: true
        expr: '(^|\n)([^\n]+(:231:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-4_2446:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-4.c'
    sources:
      binary: Wimplicit-fallthrough-4.s
  group: GRPSERIAL
  validate:
    match:
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+(:131:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L170:
        expect: true
        expr: '(^|\n)([^\n]+(:170:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+(:183:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+(:196:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+(:215:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L231:
        expect: true
        expr: '(^|\n)([^\n]+(:231:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-4_2447:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-4.c'
    sources:
      binary: Wimplicit-fallthrough-4.s
  group: GRPSERIAL
  validate:
    match:
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+(:131:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L170:
        expect: true
        expr: '(^|\n)([^\n]+(:170:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+(:183:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+(:196:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+(:215:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L231:
        expect: true
        expr: '(^|\n)([^\n]+(:231:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-4_448:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-4.c'
    sources:
      binary: Wimplicit-fallthrough-4.s
  group: GRPSERIAL
  validate:
    match:
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+(:131:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L170:
        expect: true
        expr: '(^|\n)([^\n]+(:170:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+(:183:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+(:196:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+(:215:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L231:
        expect: true
        expr: '(^|\n)([^\n]+(:231:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-4_59:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-4.c'
    sources:
      binary: Wimplicit-fallthrough-4.s
  group: GRPSERIAL
  validate:
    match:
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+(:131:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L170:
        expect: true
        expr: '(^|\n)([^\n]+(:170:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+(:183:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+(:196:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+(:215:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L231:
        expect: true
        expr: '(^|\n)([^\n]+(:231:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-4_953:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-4.c'
    sources:
      binary: Wimplicit-fallthrough-4.s
  group: GRPSERIAL
  validate:
    match:
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+(:131:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L170:
        expect: true
        expr: '(^|\n)([^\n]+(:170:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+(:183:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+(:196:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+(:215:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L231:
        expect: true
        expr: '(^|\n)([^\n]+(:231:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-4_954:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-4.c'
    sources:
      binary: Wimplicit-fallthrough-4.s
  group: GRPSERIAL
  validate:
    match:
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+(:131:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L170:
        expect: true
        expr: '(^|\n)([^\n]+(:170:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+(:183:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+(:196:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+(:215:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L231:
        expect: true
        expr: '(^|\n)([^\n]+(:231:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-4_955:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-4.c'
    sources:
      binary: Wimplicit-fallthrough-4.s
  group: GRPSERIAL
  validate:
    match:
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+(:131:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L170:
        expect: true
        expr: '(^|\n)([^\n]+(:170:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+(:183:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+(:196:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+(:215:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L231:
        expect: true
        expr: '(^|\n)([^\n]+(:231:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-5_1941:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-5.c'
    sources:
      binary: Wimplicit-fallthrough-5.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-5_2448:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-5.c'
    sources:
      binary: Wimplicit-fallthrough-5.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-5_2449:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-5.c'
    sources:
      binary: Wimplicit-fallthrough-5.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-5_2450:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-5.c'
    sources:
      binary: Wimplicit-fallthrough-5.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-5_449:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-5.c'
    sources:
      binary: Wimplicit-fallthrough-5.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-5_60:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-5.c'
    sources:
      binary: Wimplicit-fallthrough-5.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-5_956:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-5.c'
    sources:
      binary: Wimplicit-fallthrough-5.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-5_957:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-5.c'
    sources:
      binary: Wimplicit-fallthrough-5.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-5_958:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-5.c'
    sources:
      binary: Wimplicit-fallthrough-5.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-6_1942:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-6.c'
    sources:
      binary: Wimplicit-fallthrough-6.s
  group: GRPSERIAL
  validate:
    match:
      L120:
        expect: true
        expr: '(^|\n)([^\n]+(:120:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L169:
        expect: true
        expr: '(^|\n)([^\n]+(:169:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+(:184:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L282:
        expect: true
        expr: '(^|\n)([^\n]+(:282:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L284:
        expect: true
        expr: '(^|\n)([^\n]+(:284:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-6_2451:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-6.c'
    sources:
      binary: Wimplicit-fallthrough-6.s
  group: GRPSERIAL
  validate:
    match:
      L120:
        expect: true
        expr: '(^|\n)([^\n]+(:120:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L169:
        expect: true
        expr: '(^|\n)([^\n]+(:169:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+(:184:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L282:
        expect: true
        expr: '(^|\n)([^\n]+(:282:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L284:
        expect: true
        expr: '(^|\n)([^\n]+(:284:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-6_2452:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-6.c'
    sources:
      binary: Wimplicit-fallthrough-6.s
  group: GRPSERIAL
  validate:
    match:
      L120:
        expect: true
        expr: '(^|\n)([^\n]+(:120:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L169:
        expect: true
        expr: '(^|\n)([^\n]+(:169:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+(:184:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L282:
        expect: true
        expr: '(^|\n)([^\n]+(:282:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L284:
        expect: true
        expr: '(^|\n)([^\n]+(:284:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-6_2453:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-6.c'
    sources:
      binary: Wimplicit-fallthrough-6.s
  group: GRPSERIAL
  validate:
    match:
      L120:
        expect: true
        expr: '(^|\n)([^\n]+(:120:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L169:
        expect: true
        expr: '(^|\n)([^\n]+(:169:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+(:184:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L282:
        expect: true
        expr: '(^|\n)([^\n]+(:282:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L284:
        expect: true
        expr: '(^|\n)([^\n]+(:284:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-6_450:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-6.c'
    sources:
      binary: Wimplicit-fallthrough-6.s
  group: GRPSERIAL
  validate:
    match:
      L120:
        expect: true
        expr: '(^|\n)([^\n]+(:120:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L169:
        expect: true
        expr: '(^|\n)([^\n]+(:169:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+(:184:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L282:
        expect: true
        expr: '(^|\n)([^\n]+(:282:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L284:
        expect: true
        expr: '(^|\n)([^\n]+(:284:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-6_61:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-6.c'
    sources:
      binary: Wimplicit-fallthrough-6.s
  group: GRPSERIAL
  validate:
    match:
      L120:
        expect: true
        expr: '(^|\n)([^\n]+(:120:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L169:
        expect: true
        expr: '(^|\n)([^\n]+(:169:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+(:184:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L282:
        expect: true
        expr: '(^|\n)([^\n]+(:282:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L284:
        expect: true
        expr: '(^|\n)([^\n]+(:284:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-6_959:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-6.c'
    sources:
      binary: Wimplicit-fallthrough-6.s
  group: GRPSERIAL
  validate:
    match:
      L120:
        expect: true
        expr: '(^|\n)([^\n]+(:120:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L169:
        expect: true
        expr: '(^|\n)([^\n]+(:169:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+(:184:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L282:
        expect: true
        expr: '(^|\n)([^\n]+(:282:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L284:
        expect: true
        expr: '(^|\n)([^\n]+(:284:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-6_960:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-6.c'
    sources:
      binary: Wimplicit-fallthrough-6.s
  group: GRPSERIAL
  validate:
    match:
      L120:
        expect: true
        expr: '(^|\n)([^\n]+(:120:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L169:
        expect: true
        expr: '(^|\n)([^\n]+(:169:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+(:184:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L282:
        expect: true
        expr: '(^|\n)([^\n]+(:282:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L284:
        expect: true
        expr: '(^|\n)([^\n]+(:284:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-6_961:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-6.c'
    sources:
      binary: Wimplicit-fallthrough-6.s
  group: GRPSERIAL
  validate:
    match:
      L120:
        expect: true
        expr: '(^|\n)([^\n]+(:120:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L169:
        expect: true
        expr: '(^|\n)([^\n]+(:169:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+(:184:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L282:
        expect: true
        expr: '(^|\n)([^\n]+(:282:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L284:
        expect: true
        expr: '(^|\n)([^\n]+(:284:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-7_1943:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-7.c'
    sources:
      binary: Wimplicit-fallthrough-7.s
  group: GRPSERIAL
  validate:
    match:
      L108:
        expect: true
        expr: '(^|\n)([^\n]+(:108:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+(:120:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-7_2454:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-7.c'
    sources:
      binary: Wimplicit-fallthrough-7.s
  group: GRPSERIAL
  validate:
    match:
      L108:
        expect: true
        expr: '(^|\n)([^\n]+(:108:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+(:120:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-7_2455:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-7.c'
    sources:
      binary: Wimplicit-fallthrough-7.s
  group: GRPSERIAL
  validate:
    match:
      L108:
        expect: true
        expr: '(^|\n)([^\n]+(:108:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+(:120:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-7_2456:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-7.c'
    sources:
      binary: Wimplicit-fallthrough-7.s
  group: GRPSERIAL
  validate:
    match:
      L108:
        expect: true
        expr: '(^|\n)([^\n]+(:108:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+(:120:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-7_451:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-7.c'
    sources:
      binary: Wimplicit-fallthrough-7.s
  group: GRPSERIAL
  validate:
    match:
      L108:
        expect: true
        expr: '(^|\n)([^\n]+(:108:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+(:120:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-7_62:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-7.c'
    sources:
      binary: Wimplicit-fallthrough-7.s
  group: GRPSERIAL
  validate:
    match:
      L108:
        expect: true
        expr: '(^|\n)([^\n]+(:108:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+(:120:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-7_962:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-7.c'
    sources:
      binary: Wimplicit-fallthrough-7.s
  group: GRPSERIAL
  validate:
    match:
      L108:
        expect: true
        expr: '(^|\n)([^\n]+(:108:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+(:120:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-7_963:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-7.c'
    sources:
      binary: Wimplicit-fallthrough-7.s
  group: GRPSERIAL
  validate:
    match:
      L108:
        expect: true
        expr: '(^|\n)([^\n]+(:108:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+(:120:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-7_964:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-7.c'
    sources:
      binary: Wimplicit-fallthrough-7.s
  group: GRPSERIAL
  validate:
    match:
      L108:
        expect: true
        expr: '(^|\n)([^\n]+(:108:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+(:120:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-8_1944:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-8.c'
    sources:
      binary: Wimplicit-fallthrough-8.s
  group: GRPSERIAL
  validate:
    match:
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-8_2457:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-8.c'
    sources:
      binary: Wimplicit-fallthrough-8.s
  group: GRPSERIAL
  validate:
    match:
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-8_2458:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-8.c'
    sources:
      binary: Wimplicit-fallthrough-8.s
  group: GRPSERIAL
  validate:
    match:
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-8_2459:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-8.c'
    sources:
      binary: Wimplicit-fallthrough-8.s
  group: GRPSERIAL
  validate:
    match:
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-8_452:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-8.c'
    sources:
      binary: Wimplicit-fallthrough-8.s
  group: GRPSERIAL
  validate:
    match:
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-8_63:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-8.c'
    sources:
      binary: Wimplicit-fallthrough-8.s
  group: GRPSERIAL
  validate:
    match:
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-8_965:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-8.c'
    sources:
      binary: Wimplicit-fallthrough-8.s
  group: GRPSERIAL
  validate:
    match:
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-8_966:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-8.c'
    sources:
      binary: Wimplicit-fallthrough-8.s
  group: GRPSERIAL
  validate:
    match:
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-8_967:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-8.c'
    sources:
      binary: Wimplicit-fallthrough-8.s
  group: GRPSERIAL
  validate:
    match:
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
test_Wimplicit-fallthrough-9_1945:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-9.c'
    sources:
      binary: Wimplicit-fallthrough-9.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-9_2460:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-9.c'
    sources:
      binary: Wimplicit-fallthrough-9.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-9_2461:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-9.c'
    sources:
      binary: Wimplicit-fallthrough-9.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-9_2462:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-9.c'
    sources:
      binary: Wimplicit-fallthrough-9.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-9_453:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-9.c'
    sources:
      binary: Wimplicit-fallthrough-9.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-9_64:
  build:
    cflags: "-Wc++-compat  -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-9.c'
    sources:
      binary: Wimplicit-fallthrough-9.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-9_968:
  build:
    cflags: "-std=gnu++98 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-9.c'
    sources:
      binary: Wimplicit-fallthrough-9.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-9_969:
  build:
    cflags: "-std=gnu++11 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-9.c'
    sources:
      binary: Wimplicit-fallthrough-9.s
  group: GRPSERIAL
test_Wimplicit-fallthrough-9_970:
  build:
    cflags: "-std=gnu++14 -Wimplicit-fallthrough\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wimplicit-fallthrough-9.c'
    sources:
      binary: Wimplicit-fallthrough-9.s
  group: GRPSERIAL
test_Wint-in-bool-context-2_1946:
  build:
    cflags: "-Wc++-compat  -Wint-in-bool-context\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-in-bool-context-2.c'
    sources:
      binary: Wint-in-bool-context-2.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
test_Wint-in-bool-context-2_2463:
  build:
    cflags: "-std=gnu++98 -Wint-in-bool-context\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-in-bool-context-2.c'
    sources:
      binary: Wint-in-bool-context-2.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
test_Wint-in-bool-context-2_2464:
  build:
    cflags: "-std=gnu++11 -Wint-in-bool-context\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-in-bool-context-2.c'
    sources:
      binary: Wint-in-bool-context-2.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
test_Wint-in-bool-context-2_2465:
  build:
    cflags: "-std=gnu++14 -Wint-in-bool-context\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-in-bool-context-2.c'
    sources:
      binary: Wint-in-bool-context-2.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
test_Wint-in-bool-context-2_454:
  build:
    cflags: "-Wc++-compat  -Wint-in-bool-context\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-in-bool-context-2.c'
    sources:
      binary: Wint-in-bool-context-2.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
test_Wint-in-bool-context-2_65:
  build:
    cflags: "-Wc++-compat  -Wint-in-bool-context\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-in-bool-context-2.c'
    sources:
      binary: Wint-in-bool-context-2.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
test_Wint-in-bool-context-2_971:
  build:
    cflags: "-std=gnu++98 -Wint-in-bool-context\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-in-bool-context-2.c'
    sources:
      binary: Wint-in-bool-context-2.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
test_Wint-in-bool-context-2_972:
  build:
    cflags: "-std=gnu++11 -Wint-in-bool-context\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-in-bool-context-2.c'
    sources:
      binary: Wint-in-bool-context-2.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
test_Wint-in-bool-context-2_973:
  build:
    cflags: "-std=gnu++14 -Wint-in-bool-context\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-in-bool-context-2.c'
    sources:
      binary: Wint-in-bool-context-2.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
test_Wint-in-bool-context-3_1947:
  build:
    cflags: "-Wc++-compat  -Wint-in-bool-context\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-in-bool-context-3.c'
    sources:
      binary: Wint-in-bool-context-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
test_Wint-in-bool-context-3_2466:
  build:
    cflags: "-std=gnu++98 -Wint-in-bool-context\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-in-bool-context-3.c'
    sources:
      binary: Wint-in-bool-context-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
test_Wint-in-bool-context-3_2467:
  build:
    cflags: "-std=gnu++11 -Wint-in-bool-context\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-in-bool-context-3.c'
    sources:
      binary: Wint-in-bool-context-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
test_Wint-in-bool-context-3_2468:
  build:
    cflags: "-std=gnu++14 -Wint-in-bool-context\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-in-bool-context-3.c'
    sources:
      binary: Wint-in-bool-context-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
test_Wint-in-bool-context-3_455:
  build:
    cflags: "-Wc++-compat  -Wint-in-bool-context\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-in-bool-context-3.c'
    sources:
      binary: Wint-in-bool-context-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
test_Wint-in-bool-context-3_66:
  build:
    cflags: "-Wc++-compat  -Wint-in-bool-context\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-in-bool-context-3.c'
    sources:
      binary: Wint-in-bool-context-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
test_Wint-in-bool-context-3_974:
  build:
    cflags: "-std=gnu++98 -Wint-in-bool-context\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-in-bool-context-3.c'
    sources:
      binary: Wint-in-bool-context-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
test_Wint-in-bool-context-3_975:
  build:
    cflags: "-std=gnu++11 -Wint-in-bool-context\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-in-bool-context-3.c'
    sources:
      binary: Wint-in-bool-context-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
test_Wint-in-bool-context-3_976:
  build:
    cflags: "-std=gnu++14 -Wint-in-bool-context\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-in-bool-context-3.c'
    sources:
      binary: Wint-in-bool-context-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
test_Wint-in-bool-context_1948:
  build:
    cflags: "-Wc++-compat  -Wint-in-bool-context\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-in-bool-context.c'
    sources:
      binary: Wint-in-bool-context.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
test_Wint-in-bool-context_2469:
  build:
    cflags: "-std=gnu++98 -Wint-in-bool-context\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-in-bool-context.c'
    sources:
      binary: Wint-in-bool-context.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
test_Wint-in-bool-context_2470:
  build:
    cflags: "-std=gnu++11 -Wint-in-bool-context\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-in-bool-context.c'
    sources:
      binary: Wint-in-bool-context.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
test_Wint-in-bool-context_2471:
  build:
    cflags: "-std=gnu++14 -Wint-in-bool-context\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-in-bool-context.c'
    sources:
      binary: Wint-in-bool-context.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
test_Wint-in-bool-context_456:
  build:
    cflags: "-Wc++-compat  -Wint-in-bool-context\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-in-bool-context.c'
    sources:
      binary: Wint-in-bool-context.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
test_Wint-in-bool-context_67:
  build:
    cflags: "-Wc++-compat  -Wint-in-bool-context\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-in-bool-context.c'
    sources:
      binary: Wint-in-bool-context.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
test_Wint-in-bool-context_977:
  build:
    cflags: "-std=gnu++98 -Wint-in-bool-context\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-in-bool-context.c'
    sources:
      binary: Wint-in-bool-context.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
test_Wint-in-bool-context_978:
  build:
    cflags: "-std=gnu++11 -Wint-in-bool-context\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-in-bool-context.c'
    sources:
      binary: Wint-in-bool-context.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
test_Wint-in-bool-context_979:
  build:
    cflags: "-std=gnu++14 -Wint-in-bool-context\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-in-bool-context.c'
    sources:
      binary: Wint-in-bool-context.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("boolean context")[^\n]*\n?)+'
test_Wint-to-pointer-cast-1_1949:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-to-pointer-cast-1.c'
    sources:
      binary: Wint-to-pointer-cast-1.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("cast to pointer from
          integer of different size")[^\n]*\n?)+'
test_Wint-to-pointer-cast-1_2472:
  build:
    cflags: "-std=gnu++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-to-pointer-cast-1.c'
    sources:
      binary: Wint-to-pointer-cast-1.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("cast to pointer from
          integer of different size")[^\n]*\n?)+'
test_Wint-to-pointer-cast-1_2473:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-to-pointer-cast-1.c'
    sources:
      binary: Wint-to-pointer-cast-1.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("cast to pointer from
          integer of different size")[^\n]*\n?)+'
test_Wint-to-pointer-cast-1_2474:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-to-pointer-cast-1.c'
    sources:
      binary: Wint-to-pointer-cast-1.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("cast to pointer from
          integer of different size")[^\n]*\n?)+'
test_Wint-to-pointer-cast-1_457:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-to-pointer-cast-1.c'
    sources:
      binary: Wint-to-pointer-cast-1.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("cast to pointer from
          integer of different size")[^\n]*\n?)+'
test_Wint-to-pointer-cast-1_68:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-to-pointer-cast-1.c'
    sources:
      binary: Wint-to-pointer-cast-1.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("cast to pointer from
          integer of different size")[^\n]*\n?)+'
test_Wint-to-pointer-cast-1_980:
  build:
    cflags: "-std=gnu++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-to-pointer-cast-1.c'
    sources:
      binary: Wint-to-pointer-cast-1.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("cast to pointer from
          integer of different size")[^\n]*\n?)+'
test_Wint-to-pointer-cast-1_981:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-to-pointer-cast-1.c'
    sources:
      binary: Wint-to-pointer-cast-1.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("cast to pointer from
          integer of different size")[^\n]*\n?)+'
test_Wint-to-pointer-cast-1_982:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-to-pointer-cast-1.c'
    sources:
      binary: Wint-to-pointer-cast-1.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("cast to pointer from
          integer of different size")[^\n]*\n?)+'
test_Wint-to-pointer-cast-2_1950:
  build:
    cflags: "-Wc++-compat  -Wint-to-pointer-cast\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-to-pointer-cast-2.c'
    sources:
      binary: Wint-to-pointer-cast-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("cast to pointer from
          integer of different size")[^\n]*\n?)+'
test_Wint-to-pointer-cast-2_2475:
  build:
    cflags: "-std=gnu++98 -Wint-to-pointer-cast\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-to-pointer-cast-2.c'
    sources:
      binary: Wint-to-pointer-cast-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("cast to pointer from
          integer of different size")[^\n]*\n?)+'
test_Wint-to-pointer-cast-2_2476:
  build:
    cflags: "-std=gnu++11 -Wint-to-pointer-cast\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-to-pointer-cast-2.c'
    sources:
      binary: Wint-to-pointer-cast-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("cast to pointer from
          integer of different size")[^\n]*\n?)+'
test_Wint-to-pointer-cast-2_2477:
  build:
    cflags: "-std=gnu++14 -Wint-to-pointer-cast\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-to-pointer-cast-2.c'
    sources:
      binary: Wint-to-pointer-cast-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("cast to pointer from
          integer of different size")[^\n]*\n?)+'
test_Wint-to-pointer-cast-2_458:
  build:
    cflags: "-Wc++-compat  -Wint-to-pointer-cast\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-to-pointer-cast-2.c'
    sources:
      binary: Wint-to-pointer-cast-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("cast to pointer from
          integer of different size")[^\n]*\n?)+'
test_Wint-to-pointer-cast-2_69:
  build:
    cflags: "-Wc++-compat  -Wint-to-pointer-cast\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-to-pointer-cast-2.c'
    sources:
      binary: Wint-to-pointer-cast-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("cast to pointer from
          integer of different size")[^\n]*\n?)+'
test_Wint-to-pointer-cast-2_983:
  build:
    cflags: "-std=gnu++98 -Wint-to-pointer-cast\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-to-pointer-cast-2.c'
    sources:
      binary: Wint-to-pointer-cast-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("cast to pointer from
          integer of different size")[^\n]*\n?)+'
test_Wint-to-pointer-cast-2_984:
  build:
    cflags: "-std=gnu++11 -Wint-to-pointer-cast\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-to-pointer-cast-2.c'
    sources:
      binary: Wint-to-pointer-cast-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("cast to pointer from
          integer of different size")[^\n]*\n?)+'
test_Wint-to-pointer-cast-2_985:
  build:
    cflags: "-std=gnu++14 -Wint-to-pointer-cast\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-to-pointer-cast-2.c'
    sources:
      binary: Wint-to-pointer-cast-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("cast to pointer from
          integer of different size")[^\n]*\n?)+'
test_Wint-to-pointer-cast-3_1951:
  build:
    cflags: "-Wc++-compat  -Wno-int-to-pointer-cast\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-to-pointer-cast-3.c'
    sources:
      binary: Wint-to-pointer-cast-3.s
  group: GRPSERIAL
  validate:
    match:
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("cast from pointer
          to integer of different size")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast from \''void\\\\*\''
          to \''char\'' loses precision")[^\n]*\n?)+'
test_Wint-to-pointer-cast-3_2478:
  build:
    cflags: "-std=gnu++98 -Wno-int-to-pointer-cast\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-to-pointer-cast-3.c'
    sources:
      binary: Wint-to-pointer-cast-3.s
  group: GRPSERIAL
  validate:
    match:
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("cast from pointer
          to integer of different size")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast from \''void\\\\*\''
          to \''char\'' loses precision")[^\n]*\n?)+'
test_Wint-to-pointer-cast-3_2479:
  build:
    cflags: "-std=gnu++11 -Wno-int-to-pointer-cast\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-to-pointer-cast-3.c'
    sources:
      binary: Wint-to-pointer-cast-3.s
  group: GRPSERIAL
  validate:
    match:
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("cast from pointer
          to integer of different size")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast from \''void\\\\*\''
          to \''char\'' loses precision")[^\n]*\n?)+'
test_Wint-to-pointer-cast-3_2480:
  build:
    cflags: "-std=gnu++14 -Wno-int-to-pointer-cast\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-to-pointer-cast-3.c'
    sources:
      binary: Wint-to-pointer-cast-3.s
  group: GRPSERIAL
  validate:
    match:
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("cast from pointer
          to integer of different size")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast from \''void\\\\*\''
          to \''char\'' loses precision")[^\n]*\n?)+'
test_Wint-to-pointer-cast-3_459:
  build:
    cflags: "-Wc++-compat  -Wno-int-to-pointer-cast\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-to-pointer-cast-3.c'
    sources:
      binary: Wint-to-pointer-cast-3.s
  group: GRPSERIAL
  validate:
    match:
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("cast from pointer
          to integer of different size")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast from \''void\\\\*\''
          to \''char\'' loses precision")[^\n]*\n?)+'
test_Wint-to-pointer-cast-3_70:
  build:
    cflags: "-Wc++-compat  -Wno-int-to-pointer-cast\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-to-pointer-cast-3.c'
    sources:
      binary: Wint-to-pointer-cast-3.s
  group: GRPSERIAL
  validate:
    match:
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("cast from pointer
          to integer of different size")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast from \''void\\\\*\''
          to \''char\'' loses precision")[^\n]*\n?)+'
test_Wint-to-pointer-cast-3_986:
  build:
    cflags: "-std=gnu++98 -Wno-int-to-pointer-cast\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-to-pointer-cast-3.c'
    sources:
      binary: Wint-to-pointer-cast-3.s
  group: GRPSERIAL
  validate:
    match:
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("cast from pointer
          to integer of different size")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast from \''void\\\\*\''
          to \''char\'' loses precision")[^\n]*\n?)+'
test_Wint-to-pointer-cast-3_987:
  build:
    cflags: "-std=gnu++11 -Wno-int-to-pointer-cast\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-to-pointer-cast-3.c'
    sources:
      binary: Wint-to-pointer-cast-3.s
  group: GRPSERIAL
  validate:
    match:
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("cast from pointer
          to integer of different size")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast from \''void\\\\*\''
          to \''char\'' loses precision")[^\n]*\n?)+'
test_Wint-to-pointer-cast-3_988:
  build:
    cflags: "-std=gnu++14 -Wno-int-to-pointer-cast\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wint-to-pointer-cast-3.c'
    sources:
      binary: Wint-to-pointer-cast-3.s
  group: GRPSERIAL
  validate:
    match:
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("cast from pointer
          to integer of different size")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast from \''void\\\\*\''
          to \''char\'' loses precision")[^\n]*\n?)+'
test_Wlogical-not-parentheses-1_1952:
  build:
    cflags: "-Wc++-compat  -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-not-parentheses-1.c'
    sources:
      binary: Wlogical-not-parentheses-1.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_Wlogical-not-parentheses-1_2481:
  build:
    cflags: "-std=gnu++98 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-not-parentheses-1.c'
    sources:
      binary: Wlogical-not-parentheses-1.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_Wlogical-not-parentheses-1_2482:
  build:
    cflags: "-std=gnu++11 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-not-parentheses-1.c'
    sources:
      binary: Wlogical-not-parentheses-1.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_Wlogical-not-parentheses-1_2483:
  build:
    cflags: "-std=gnu++14 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-not-parentheses-1.c'
    sources:
      binary: Wlogical-not-parentheses-1.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_Wlogical-not-parentheses-1_460:
  build:
    cflags: "-Wc++-compat  -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-not-parentheses-1.c'
    sources:
      binary: Wlogical-not-parentheses-1.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_Wlogical-not-parentheses-1_71:
  build:
    cflags: "-Wc++-compat  -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-not-parentheses-1.c'
    sources:
      binary: Wlogical-not-parentheses-1.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_Wlogical-not-parentheses-1_989:
  build:
    cflags: "-std=gnu++98 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-not-parentheses-1.c'
    sources:
      binary: Wlogical-not-parentheses-1.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_Wlogical-not-parentheses-1_990:
  build:
    cflags: "-std=gnu++11 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-not-parentheses-1.c'
    sources:
      binary: Wlogical-not-parentheses-1.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_Wlogical-not-parentheses-1_991:
  build:
    cflags: "-std=gnu++14 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-not-parentheses-1.c'
    sources:
      binary: Wlogical-not-parentheses-1.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_Wlogical-not-parentheses-2_1953:
  build:
    cflags: "-Wc++-compat  -Wlogical-not-parentheses -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-not-parentheses-2.c'
    sources:
      binary: Wlogical-not-parentheses-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied")[^\n]*\n?)+'
test_Wlogical-not-parentheses-2_2484:
  build:
    cflags: "-std=gnu++98 -Wlogical-not-parentheses -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-not-parentheses-2.c'
    sources:
      binary: Wlogical-not-parentheses-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied")[^\n]*\n?)+'
test_Wlogical-not-parentheses-2_2485:
  build:
    cflags: "-std=gnu++11 -Wlogical-not-parentheses -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-not-parentheses-2.c'
    sources:
      binary: Wlogical-not-parentheses-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied")[^\n]*\n?)+'
test_Wlogical-not-parentheses-2_2486:
  build:
    cflags: "-std=gnu++14 -Wlogical-not-parentheses -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-not-parentheses-2.c'
    sources:
      binary: Wlogical-not-parentheses-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied")[^\n]*\n?)+'
test_Wlogical-not-parentheses-2_461:
  build:
    cflags: "-Wc++-compat  -Wlogical-not-parentheses -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-not-parentheses-2.c'
    sources:
      binary: Wlogical-not-parentheses-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied")[^\n]*\n?)+'
test_Wlogical-not-parentheses-2_72:
  build:
    cflags: "-Wc++-compat  -Wlogical-not-parentheses -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-not-parentheses-2.c'
    sources:
      binary: Wlogical-not-parentheses-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied")[^\n]*\n?)+'
test_Wlogical-not-parentheses-2_992:
  build:
    cflags: "-std=gnu++98 -Wlogical-not-parentheses -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-not-parentheses-2.c'
    sources:
      binary: Wlogical-not-parentheses-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied")[^\n]*\n?)+'
test_Wlogical-not-parentheses-2_993:
  build:
    cflags: "-std=gnu++11 -Wlogical-not-parentheses -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-not-parentheses-2.c'
    sources:
      binary: Wlogical-not-parentheses-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied")[^\n]*\n?)+'
test_Wlogical-not-parentheses-2_994:
  build:
    cflags: "-std=gnu++14 -Wlogical-not-parentheses -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-not-parentheses-2.c'
    sources:
      binary: Wlogical-not-parentheses-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied")[^\n]*\n?)+'
test_Wlogical-not-parentheses-3_1954:
  build:
    cflags: "-Wc++-compat  -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-not-parentheses-3.c'
    sources:
      binary: Wlogical-not-parentheses-3.s
  group: GRPSERIAL
  validate:
    match:
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_Wlogical-not-parentheses-3_2487:
  build:
    cflags: "-std=gnu++98 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-not-parentheses-3.c'
    sources:
      binary: Wlogical-not-parentheses-3.s
  group: GRPSERIAL
  validate:
    match:
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_Wlogical-not-parentheses-3_2488:
  build:
    cflags: "-std=gnu++11 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-not-parentheses-3.c'
    sources:
      binary: Wlogical-not-parentheses-3.s
  group: GRPSERIAL
  validate:
    match:
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_Wlogical-not-parentheses-3_2489:
  build:
    cflags: "-std=gnu++14 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-not-parentheses-3.c'
    sources:
      binary: Wlogical-not-parentheses-3.s
  group: GRPSERIAL
  validate:
    match:
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_Wlogical-not-parentheses-3_462:
  build:
    cflags: "-Wc++-compat  -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-not-parentheses-3.c'
    sources:
      binary: Wlogical-not-parentheses-3.s
  group: GRPSERIAL
  validate:
    match:
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_Wlogical-not-parentheses-3_73:
  build:
    cflags: "-Wc++-compat  -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-not-parentheses-3.c'
    sources:
      binary: Wlogical-not-parentheses-3.s
  group: GRPSERIAL
  validate:
    match:
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_Wlogical-not-parentheses-3_995:
  build:
    cflags: "-std=gnu++98 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-not-parentheses-3.c'
    sources:
      binary: Wlogical-not-parentheses-3.s
  group: GRPSERIAL
  validate:
    match:
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_Wlogical-not-parentheses-3_996:
  build:
    cflags: "-std=gnu++11 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-not-parentheses-3.c'
    sources:
      binary: Wlogical-not-parentheses-3.s
  group: GRPSERIAL
  validate:
    match:
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_Wlogical-not-parentheses-3_997:
  build:
    cflags: "-std=gnu++14 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-not-parentheses-3.c'
    sources:
      binary: Wlogical-not-parentheses-3.s
  group: GRPSERIAL
  validate:
    match:
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_Wlogical-op-1_1000:
  build:
    cflags: "-std=gnu++14 -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-op-1.c'
    sources:
      binary: Wlogical-op-1.s
  group: GRPSERIAL
  validate:
    match:
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+(:77:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+(:83:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
test_Wlogical-op-1_1955:
  build:
    cflags: "-Wc++-compat  -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-op-1.c'
    sources:
      binary: Wlogical-op-1.s
  group: GRPSERIAL
  validate:
    match:
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+(:77:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+(:83:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
test_Wlogical-op-1_2490:
  build:
    cflags: "-std=gnu++98 -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-op-1.c'
    sources:
      binary: Wlogical-op-1.s
  group: GRPSERIAL
  validate:
    match:
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+(:77:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+(:83:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
test_Wlogical-op-1_2491:
  build:
    cflags: "-std=gnu++11 -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-op-1.c'
    sources:
      binary: Wlogical-op-1.s
  group: GRPSERIAL
  validate:
    match:
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+(:77:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+(:83:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
test_Wlogical-op-1_2492:
  build:
    cflags: "-std=gnu++14 -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-op-1.c'
    sources:
      binary: Wlogical-op-1.s
  group: GRPSERIAL
  validate:
    match:
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+(:77:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+(:83:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
test_Wlogical-op-1_463:
  build:
    cflags: "-Wc++-compat  -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-op-1.c'
    sources:
      binary: Wlogical-op-1.s
  group: GRPSERIAL
  validate:
    match:
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+(:77:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+(:83:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
test_Wlogical-op-1_74:
  build:
    cflags: "-Wc++-compat  -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-op-1.c'
    sources:
      binary: Wlogical-op-1.s
  group: GRPSERIAL
  validate:
    match:
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+(:77:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+(:83:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
test_Wlogical-op-1_998:
  build:
    cflags: "-std=gnu++98 -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-op-1.c'
    sources:
      binary: Wlogical-op-1.s
  group: GRPSERIAL
  validate:
    match:
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+(:77:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+(:83:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
test_Wlogical-op-1_999:
  build:
    cflags: "-std=gnu++11 -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-op-1.c'
    sources:
      binary: Wlogical-op-1.s
  group: GRPSERIAL
  validate:
    match:
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+(:77:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+(:83:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
test_Wlogical-op-3_1001:
  build:
    cflags: "-std=gnu++98 -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-op-3.c'
    sources:
      binary: Wlogical-op-3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
test_Wlogical-op-3_1002:
  build:
    cflags: "-std=gnu++11 -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-op-3.c'
    sources:
      binary: Wlogical-op-3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
test_Wlogical-op-3_1003:
  build:
    cflags: "-std=gnu++14 -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-op-3.c'
    sources:
      binary: Wlogical-op-3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
test_Wlogical-op-3_1956:
  build:
    cflags: "-Wc++-compat  -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-op-3.c'
    sources:
      binary: Wlogical-op-3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
test_Wlogical-op-3_2493:
  build:
    cflags: "-std=gnu++98 -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-op-3.c'
    sources:
      binary: Wlogical-op-3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
test_Wlogical-op-3_2494:
  build:
    cflags: "-std=gnu++11 -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-op-3.c'
    sources:
      binary: Wlogical-op-3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
test_Wlogical-op-3_2495:
  build:
    cflags: "-std=gnu++14 -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-op-3.c'
    sources:
      binary: Wlogical-op-3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
test_Wlogical-op-3_464:
  build:
    cflags: "-Wc++-compat  -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-op-3.c'
    sources:
      binary: Wlogical-op-3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
test_Wlogical-op-3_75:
  build:
    cflags: "-Wc++-compat  -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wlogical-op-3.c'
    sources:
      binary: Wlogical-op-3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("logical .or. of equal
          expressions")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("logical .and. of equal
          expressions")[^\n]*\n?)+'
test_Wmemset-transposed-args1_1004:
  build:
    cflags: "-std=gnu++98 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmemset-transposed-args1.c'
    sources:
      binary: Wmemset-transposed-args1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
test_Wmemset-transposed-args1_1005:
  build:
    cflags: "-std=gnu++11 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmemset-transposed-args1.c'
    sources:
      binary: Wmemset-transposed-args1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
test_Wmemset-transposed-args1_1006:
  build:
    cflags: "-std=gnu++14 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmemset-transposed-args1.c'
    sources:
      binary: Wmemset-transposed-args1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
test_Wmemset-transposed-args1_1957:
  build:
    cflags: "-Wc++-compat  -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmemset-transposed-args1.c'
    sources:
      binary: Wmemset-transposed-args1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
test_Wmemset-transposed-args1_2496:
  build:
    cflags: "-std=gnu++98 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmemset-transposed-args1.c'
    sources:
      binary: Wmemset-transposed-args1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
test_Wmemset-transposed-args1_2497:
  build:
    cflags: "-std=gnu++11 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmemset-transposed-args1.c'
    sources:
      binary: Wmemset-transposed-args1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
test_Wmemset-transposed-args1_2498:
  build:
    cflags: "-std=gnu++14 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmemset-transposed-args1.c'
    sources:
      binary: Wmemset-transposed-args1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
test_Wmemset-transposed-args1_465:
  build:
    cflags: "-Wc++-compat  -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmemset-transposed-args1.c'
    sources:
      binary: Wmemset-transposed-args1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
test_Wmemset-transposed-args1_76:
  build:
    cflags: "-Wc++-compat  -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmemset-transposed-args1.c'
    sources:
      binary: Wmemset-transposed-args1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
test_Wmemset-transposed-args2_1007:
  build:
    cflags: "-std=gnu++11 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmemset-transposed-args2.c'
    sources:
      binary: Wmemset-transposed-args2.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
test_Wmemset-transposed-args2_1008:
  build:
    cflags: "-std=gnu++14 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmemset-transposed-args2.c'
    sources:
      binary: Wmemset-transposed-args2.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
test_Wmemset-transposed-args2_1958:
  build:
    cflags: "-Wc++-compat  -Wall -std=gnu99\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmemset-transposed-args2.c'
    sources:
      binary: Wmemset-transposed-args2.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
test_Wmemset-transposed-args2_2499:
  build:
    cflags: "-std=gnu++11 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmemset-transposed-args2.c'
    sources:
      binary: Wmemset-transposed-args2.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
test_Wmemset-transposed-args2_2500:
  build:
    cflags: "-std=gnu++14 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmemset-transposed-args2.c'
    sources:
      binary: Wmemset-transposed-args2.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
test_Wmemset-transposed-args2_466:
  build:
    cflags: "-Wc++-compat  -Wall -std=gnu99\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmemset-transposed-args2.c'
    sources:
      binary: Wmemset-transposed-args2.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
test_Wmemset-transposed-args2_77:
  build:
    cflags: "-Wc++-compat  -Wall -std=gnu99\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmemset-transposed-args2.c'
    sources:
      binary: Wmemset-transposed-args2.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*(".memset. used with
          constant zero length parameter; this could be due to transposed parameters")[^\n]*\n?)+'
test_Wmisleading-indentation-2_1009:
  build:
    cflags: "-std=gnu++98 -Wmisleading-indentation\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmisleading-indentation-2.c'
    sources:
      binary: Wmisleading-indentation-2.s
  group: GRPSERIAL
test_Wmisleading-indentation-2_1010:
  build:
    cflags: "-std=gnu++11 -Wmisleading-indentation\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmisleading-indentation-2.c'
    sources:
      binary: Wmisleading-indentation-2.s
  group: GRPSERIAL
test_Wmisleading-indentation-2_1011:
  build:
    cflags: "-std=gnu++14 -Wmisleading-indentation\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmisleading-indentation-2.c'
    sources:
      binary: Wmisleading-indentation-2.s
  group: GRPSERIAL
test_Wmisleading-indentation-2_1959:
  build:
    cflags: "-Wc++-compat  -Wmisleading-indentation\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmisleading-indentation-2.c'
    sources:
      binary: Wmisleading-indentation-2.s
  group: GRPSERIAL
test_Wmisleading-indentation-2_2501:
  build:
    cflags: "-std=gnu++98 -Wmisleading-indentation\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmisleading-indentation-2.c'
    sources:
      binary: Wmisleading-indentation-2.s
  group: GRPSERIAL
test_Wmisleading-indentation-2_2502:
  build:
    cflags: "-std=gnu++11 -Wmisleading-indentation\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmisleading-indentation-2.c'
    sources:
      binary: Wmisleading-indentation-2.s
  group: GRPSERIAL
test_Wmisleading-indentation-2_2503:
  build:
    cflags: "-std=gnu++14 -Wmisleading-indentation\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmisleading-indentation-2.c'
    sources:
      binary: Wmisleading-indentation-2.s
  group: GRPSERIAL
test_Wmisleading-indentation-2_467:
  build:
    cflags: "-Wc++-compat  -Wmisleading-indentation\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmisleading-indentation-2.c'
    sources:
      binary: Wmisleading-indentation-2.s
  group: GRPSERIAL
test_Wmisleading-indentation-2_78:
  build:
    cflags: "-Wc++-compat  -Wmisleading-indentation\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmisleading-indentation-2.c'
    sources:
      binary: Wmisleading-indentation-2.s
  group: GRPSERIAL
test_Wmisleading-indentation-3_1012:
  build:
    cflags: "-std=gnu++98 -Wmisleading-indentation -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmisleading-indentation-3.c'
    sources:
      binary: Wmisleading-indentation-3.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
test_Wmisleading-indentation-3_1013:
  build:
    cflags: "-std=gnu++11 -Wmisleading-indentation -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmisleading-indentation-3.c'
    sources:
      binary: Wmisleading-indentation-3.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
test_Wmisleading-indentation-3_1014:
  build:
    cflags: "-std=gnu++14 -Wmisleading-indentation -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmisleading-indentation-3.c'
    sources:
      binary: Wmisleading-indentation-3.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
test_Wmisleading-indentation-3_1960:
  build:
    cflags: "-Wc++-compat  -Wmisleading-indentation -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmisleading-indentation-3.c'
    sources:
      binary: Wmisleading-indentation-3.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
test_Wmisleading-indentation-3_2504:
  build:
    cflags: "-std=gnu++98 -Wmisleading-indentation -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmisleading-indentation-3.c'
    sources:
      binary: Wmisleading-indentation-3.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
test_Wmisleading-indentation-3_2505:
  build:
    cflags: "-std=gnu++11 -Wmisleading-indentation -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmisleading-indentation-3.c'
    sources:
      binary: Wmisleading-indentation-3.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
test_Wmisleading-indentation-3_2506:
  build:
    cflags: "-std=gnu++14 -Wmisleading-indentation -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmisleading-indentation-3.c'
    sources:
      binary: Wmisleading-indentation-3.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
test_Wmisleading-indentation-3_468:
  build:
    cflags: "-Wc++-compat  -Wmisleading-indentation -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmisleading-indentation-3.c'
    sources:
      binary: Wmisleading-indentation-3.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
test_Wmisleading-indentation-3_79:
  build:
    cflags: "-Wc++-compat  -Wmisleading-indentation -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmisleading-indentation-3.c'
    sources:
      binary: Wmisleading-indentation-3.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
test_Wmisleading-indentation-4_1015:
  build:
    cflags: "-std=gnu++98 -Wmisleading-indentation\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmisleading-indentation-4.c'
    sources:
      binary: Wmisleading-indentation-4.s
  group: GRPSERIAL
test_Wmisleading-indentation-4_1016:
  build:
    cflags: "-std=gnu++11 -Wmisleading-indentation\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmisleading-indentation-4.c'
    sources:
      binary: Wmisleading-indentation-4.s
  group: GRPSERIAL
test_Wmisleading-indentation-4_1017:
  build:
    cflags: "-std=gnu++14 -Wmisleading-indentation\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmisleading-indentation-4.c'
    sources:
      binary: Wmisleading-indentation-4.s
  group: GRPSERIAL
test_Wmisleading-indentation-4_1961:
  build:
    cflags: "-Wc++-compat  -Wmisleading-indentation\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmisleading-indentation-4.c'
    sources:
      binary: Wmisleading-indentation-4.s
  group: GRPSERIAL
test_Wmisleading-indentation-4_2507:
  build:
    cflags: "-std=gnu++98 -Wmisleading-indentation\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmisleading-indentation-4.c'
    sources:
      binary: Wmisleading-indentation-4.s
  group: GRPSERIAL
test_Wmisleading-indentation-4_2508:
  build:
    cflags: "-std=gnu++11 -Wmisleading-indentation\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmisleading-indentation-4.c'
    sources:
      binary: Wmisleading-indentation-4.s
  group: GRPSERIAL
test_Wmisleading-indentation-4_2509:
  build:
    cflags: "-std=gnu++14 -Wmisleading-indentation\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmisleading-indentation-4.c'
    sources:
      binary: Wmisleading-indentation-4.s
  group: GRPSERIAL
test_Wmisleading-indentation-4_469:
  build:
    cflags: "-Wc++-compat  -Wmisleading-indentation\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmisleading-indentation-4.c'
    sources:
      binary: Wmisleading-indentation-4.s
  group: GRPSERIAL
test_Wmisleading-indentation-4_80:
  build:
    cflags: "-Wc++-compat  -Wmisleading-indentation\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmisleading-indentation-4.c'
    sources:
      binary: Wmisleading-indentation-4.s
  group: GRPSERIAL
test_Wmisleading-indentation_1018:
  build:
    cflags: "-std=gnu++98 -Wmisleading-indentation -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmisleading-indentation.c'
    sources:
      binary: Wmisleading-indentation.s
  group: GRPSERIAL
  validate:
    match:
      L1028:
        expect: true
        expr: '(^|\n)([^\n]+(:1028:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L105:
        expect: true
        expr: '(^|\n)([^\n]+(:105:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause does not guard...")[^\n]*\n?)+'
      L1154:
        expect: true
        expr: '(^|\n)([^\n]+(:1154:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L1213:
        expect: true
        expr: '(^|\n)([^\n]+(:1213:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L1225:
        expect: true
        expr: '(^|\n)([^\n]+(:1225:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L1237:
        expect: true
        expr: '(^|\n)([^\n]+(:1237:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+(:135:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause does not guard...")[^\n]*\n?)+'
      L143:
        expect: true
        expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\'' clause
          does not guard...")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+(:197:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\'' clause
          does not guard...")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''else\''
          clause does not guard...")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''while\''
          clause does not guard...")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L704:
        expect: true
        expr: '(^|\n)([^\n]+(:704:)[^\n]*[0-9]+: warning:[^\n]*("this \''for\'' clause")[^\n]*\n?)+'
      L706:
        expect: true
        expr: '(^|\n)([^\n]+(:706:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''while\''
          clause")[^\n]*\n?)+'
      L711:
        expect: true
        expr: '(^|\n)([^\n]+(:711:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L713:
        expect: true
        expr: '(^|\n)([^\n]+(:713:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''while\''
          clause")[^\n]*\n?)+'
      L719:
        expect: true
        expr: '(^|\n)([^\n]+(:719:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L725:
        expect: true
        expr: '(^|\n)([^\n]+(:725:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L729:
        expect: true
        expr: '(^|\n)([^\n]+(:729:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L735:
        expect: true
        expr: '(^|\n)([^\n]+(:735:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L744:
        expect: true
        expr: '(^|\n)([^\n]+(:744:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''else\''
          clause")[^\n]*\n?)+'
      L746:
        expect: true
        expr: '(^|\n)([^\n]+(:746:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L748:
        expect: true
        expr: '(^|\n)([^\n]+(:748:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L753:
        expect: true
        expr: '(^|\n)([^\n]+(:753:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L756:
        expect: true
        expr: '(^|\n)([^\n]+(:756:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L759:
        expect: true
        expr: '(^|\n)([^\n]+(:759:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause")[^\n]*\n?)+'
      L775:
        expect: true
        expr: '(^|\n)([^\n]+(:775:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''while\''
          clause")[^\n]*\n?)+'
      L779:
        expect: true
        expr: '(^|\n)([^\n]+(:779:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L785:
        expect: true
        expr: '(^|\n)([^\n]+(:785:)[^\n]*[0-9]+: warning:[^\n]*("5: this \''else\''
          clause")[^\n]*\n?)+'
      L792:
        expect: true
        expr: '(^|\n)([^\n]+(:792:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L795:
        expect: true
        expr: '(^|\n)([^\n]+(:795:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause")[^\n]*\n?)+'
      L804:
        expect: true
        expr: '(^|\n)([^\n]+(:804:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\'' clause
          does not guard...")[^\n]*\n?)+'
test_Wmisleading-indentation_1019:
  build:
    cflags: "-std=gnu++11 -Wmisleading-indentation -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmisleading-indentation.c'
    sources:
      binary: Wmisleading-indentation.s
  group: GRPSERIAL
  validate:
    match:
      L1028:
        expect: true
        expr: '(^|\n)([^\n]+(:1028:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L105:
        expect: true
        expr: '(^|\n)([^\n]+(:105:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause does not guard...")[^\n]*\n?)+'
      L1154:
        expect: true
        expr: '(^|\n)([^\n]+(:1154:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L1213:
        expect: true
        expr: '(^|\n)([^\n]+(:1213:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L1225:
        expect: true
        expr: '(^|\n)([^\n]+(:1225:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L1237:
        expect: true
        expr: '(^|\n)([^\n]+(:1237:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+(:135:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause does not guard...")[^\n]*\n?)+'
      L143:
        expect: true
        expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\'' clause
          does not guard...")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+(:197:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\'' clause
          does not guard...")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''else\''
          clause does not guard...")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''while\''
          clause does not guard...")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L704:
        expect: true
        expr: '(^|\n)([^\n]+(:704:)[^\n]*[0-9]+: warning:[^\n]*("this \''for\'' clause")[^\n]*\n?)+'
      L706:
        expect: true
        expr: '(^|\n)([^\n]+(:706:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''while\''
          clause")[^\n]*\n?)+'
      L711:
        expect: true
        expr: '(^|\n)([^\n]+(:711:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L713:
        expect: true
        expr: '(^|\n)([^\n]+(:713:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''while\''
          clause")[^\n]*\n?)+'
      L719:
        expect: true
        expr: '(^|\n)([^\n]+(:719:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L725:
        expect: true
        expr: '(^|\n)([^\n]+(:725:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L729:
        expect: true
        expr: '(^|\n)([^\n]+(:729:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L735:
        expect: true
        expr: '(^|\n)([^\n]+(:735:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L744:
        expect: true
        expr: '(^|\n)([^\n]+(:744:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''else\''
          clause")[^\n]*\n?)+'
      L746:
        expect: true
        expr: '(^|\n)([^\n]+(:746:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L748:
        expect: true
        expr: '(^|\n)([^\n]+(:748:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L753:
        expect: true
        expr: '(^|\n)([^\n]+(:753:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L756:
        expect: true
        expr: '(^|\n)([^\n]+(:756:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L759:
        expect: true
        expr: '(^|\n)([^\n]+(:759:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause")[^\n]*\n?)+'
      L775:
        expect: true
        expr: '(^|\n)([^\n]+(:775:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''while\''
          clause")[^\n]*\n?)+'
      L779:
        expect: true
        expr: '(^|\n)([^\n]+(:779:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L785:
        expect: true
        expr: '(^|\n)([^\n]+(:785:)[^\n]*[0-9]+: warning:[^\n]*("5: this \''else\''
          clause")[^\n]*\n?)+'
      L792:
        expect: true
        expr: '(^|\n)([^\n]+(:792:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L795:
        expect: true
        expr: '(^|\n)([^\n]+(:795:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause")[^\n]*\n?)+'
      L804:
        expect: true
        expr: '(^|\n)([^\n]+(:804:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\'' clause
          does not guard...")[^\n]*\n?)+'
test_Wmisleading-indentation_1020:
  build:
    cflags: "-std=gnu++14 -Wmisleading-indentation -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmisleading-indentation.c'
    sources:
      binary: Wmisleading-indentation.s
  group: GRPSERIAL
  validate:
    match:
      L1028:
        expect: true
        expr: '(^|\n)([^\n]+(:1028:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L105:
        expect: true
        expr: '(^|\n)([^\n]+(:105:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause does not guard...")[^\n]*\n?)+'
      L1154:
        expect: true
        expr: '(^|\n)([^\n]+(:1154:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L1213:
        expect: true
        expr: '(^|\n)([^\n]+(:1213:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L1225:
        expect: true
        expr: '(^|\n)([^\n]+(:1225:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L1237:
        expect: true
        expr: '(^|\n)([^\n]+(:1237:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+(:135:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause does not guard...")[^\n]*\n?)+'
      L143:
        expect: true
        expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\'' clause
          does not guard...")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+(:197:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\'' clause
          does not guard...")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''else\''
          clause does not guard...")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''while\''
          clause does not guard...")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L704:
        expect: true
        expr: '(^|\n)([^\n]+(:704:)[^\n]*[0-9]+: warning:[^\n]*("this \''for\'' clause")[^\n]*\n?)+'
      L706:
        expect: true
        expr: '(^|\n)([^\n]+(:706:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''while\''
          clause")[^\n]*\n?)+'
      L711:
        expect: true
        expr: '(^|\n)([^\n]+(:711:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L713:
        expect: true
        expr: '(^|\n)([^\n]+(:713:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''while\''
          clause")[^\n]*\n?)+'
      L719:
        expect: true
        expr: '(^|\n)([^\n]+(:719:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L725:
        expect: true
        expr: '(^|\n)([^\n]+(:725:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L729:
        expect: true
        expr: '(^|\n)([^\n]+(:729:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L735:
        expect: true
        expr: '(^|\n)([^\n]+(:735:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L744:
        expect: true
        expr: '(^|\n)([^\n]+(:744:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''else\''
          clause")[^\n]*\n?)+'
      L746:
        expect: true
        expr: '(^|\n)([^\n]+(:746:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L748:
        expect: true
        expr: '(^|\n)([^\n]+(:748:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L753:
        expect: true
        expr: '(^|\n)([^\n]+(:753:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L756:
        expect: true
        expr: '(^|\n)([^\n]+(:756:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L759:
        expect: true
        expr: '(^|\n)([^\n]+(:759:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause")[^\n]*\n?)+'
      L775:
        expect: true
        expr: '(^|\n)([^\n]+(:775:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''while\''
          clause")[^\n]*\n?)+'
      L779:
        expect: true
        expr: '(^|\n)([^\n]+(:779:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L785:
        expect: true
        expr: '(^|\n)([^\n]+(:785:)[^\n]*[0-9]+: warning:[^\n]*("5: this \''else\''
          clause")[^\n]*\n?)+'
      L792:
        expect: true
        expr: '(^|\n)([^\n]+(:792:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L795:
        expect: true
        expr: '(^|\n)([^\n]+(:795:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause")[^\n]*\n?)+'
      L804:
        expect: true
        expr: '(^|\n)([^\n]+(:804:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\'' clause
          does not guard...")[^\n]*\n?)+'
test_Wmisleading-indentation_1962:
  build:
    cflags: "-Wc++-compat  -Wmisleading-indentation -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmisleading-indentation.c'
    sources:
      binary: Wmisleading-indentation.s
  group: GRPSERIAL
  validate:
    match:
      L1028:
        expect: true
        expr: '(^|\n)([^\n]+(:1028:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L105:
        expect: true
        expr: '(^|\n)([^\n]+(:105:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause does not guard...")[^\n]*\n?)+'
      L1154:
        expect: true
        expr: '(^|\n)([^\n]+(:1154:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L1213:
        expect: true
        expr: '(^|\n)([^\n]+(:1213:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L1225:
        expect: true
        expr: '(^|\n)([^\n]+(:1225:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L1237:
        expect: true
        expr: '(^|\n)([^\n]+(:1237:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+(:135:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause does not guard...")[^\n]*\n?)+'
      L143:
        expect: true
        expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\'' clause
          does not guard...")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+(:197:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\'' clause
          does not guard...")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''else\''
          clause does not guard...")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''while\''
          clause does not guard...")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L704:
        expect: true
        expr: '(^|\n)([^\n]+(:704:)[^\n]*[0-9]+: warning:[^\n]*("this \''for\'' clause")[^\n]*\n?)+'
      L706:
        expect: true
        expr: '(^|\n)([^\n]+(:706:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''while\''
          clause")[^\n]*\n?)+'
      L711:
        expect: true
        expr: '(^|\n)([^\n]+(:711:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L713:
        expect: true
        expr: '(^|\n)([^\n]+(:713:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''while\''
          clause")[^\n]*\n?)+'
      L719:
        expect: true
        expr: '(^|\n)([^\n]+(:719:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L725:
        expect: true
        expr: '(^|\n)([^\n]+(:725:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L729:
        expect: true
        expr: '(^|\n)([^\n]+(:729:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L735:
        expect: true
        expr: '(^|\n)([^\n]+(:735:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L744:
        expect: true
        expr: '(^|\n)([^\n]+(:744:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''else\''
          clause")[^\n]*\n?)+'
      L746:
        expect: true
        expr: '(^|\n)([^\n]+(:746:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L748:
        expect: true
        expr: '(^|\n)([^\n]+(:748:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L753:
        expect: true
        expr: '(^|\n)([^\n]+(:753:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L756:
        expect: true
        expr: '(^|\n)([^\n]+(:756:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L759:
        expect: true
        expr: '(^|\n)([^\n]+(:759:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause")[^\n]*\n?)+'
      L775:
        expect: true
        expr: '(^|\n)([^\n]+(:775:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''while\''
          clause")[^\n]*\n?)+'
      L779:
        expect: true
        expr: '(^|\n)([^\n]+(:779:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L785:
        expect: true
        expr: '(^|\n)([^\n]+(:785:)[^\n]*[0-9]+: warning:[^\n]*("5: this \''else\''
          clause")[^\n]*\n?)+'
      L792:
        expect: true
        expr: '(^|\n)([^\n]+(:792:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L795:
        expect: true
        expr: '(^|\n)([^\n]+(:795:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause")[^\n]*\n?)+'
      L804:
        expect: true
        expr: '(^|\n)([^\n]+(:804:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\'' clause
          does not guard...")[^\n]*\n?)+'
test_Wmisleading-indentation_2510:
  build:
    cflags: "-std=gnu++98 -Wmisleading-indentation -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmisleading-indentation.c'
    sources:
      binary: Wmisleading-indentation.s
  group: GRPSERIAL
  validate:
    match:
      L1028:
        expect: true
        expr: '(^|\n)([^\n]+(:1028:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L105:
        expect: true
        expr: '(^|\n)([^\n]+(:105:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause does not guard...")[^\n]*\n?)+'
      L1154:
        expect: true
        expr: '(^|\n)([^\n]+(:1154:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L1213:
        expect: true
        expr: '(^|\n)([^\n]+(:1213:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L1225:
        expect: true
        expr: '(^|\n)([^\n]+(:1225:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L1237:
        expect: true
        expr: '(^|\n)([^\n]+(:1237:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+(:135:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause does not guard...")[^\n]*\n?)+'
      L143:
        expect: true
        expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\'' clause
          does not guard...")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+(:197:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\'' clause
          does not guard...")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''else\''
          clause does not guard...")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''while\''
          clause does not guard...")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L704:
        expect: true
        expr: '(^|\n)([^\n]+(:704:)[^\n]*[0-9]+: warning:[^\n]*("this \''for\'' clause")[^\n]*\n?)+'
      L706:
        expect: true
        expr: '(^|\n)([^\n]+(:706:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''while\''
          clause")[^\n]*\n?)+'
      L711:
        expect: true
        expr: '(^|\n)([^\n]+(:711:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L713:
        expect: true
        expr: '(^|\n)([^\n]+(:713:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''while\''
          clause")[^\n]*\n?)+'
      L719:
        expect: true
        expr: '(^|\n)([^\n]+(:719:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L725:
        expect: true
        expr: '(^|\n)([^\n]+(:725:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L729:
        expect: true
        expr: '(^|\n)([^\n]+(:729:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L735:
        expect: true
        expr: '(^|\n)([^\n]+(:735:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L744:
        expect: true
        expr: '(^|\n)([^\n]+(:744:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''else\''
          clause")[^\n]*\n?)+'
      L746:
        expect: true
        expr: '(^|\n)([^\n]+(:746:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L748:
        expect: true
        expr: '(^|\n)([^\n]+(:748:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L753:
        expect: true
        expr: '(^|\n)([^\n]+(:753:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L756:
        expect: true
        expr: '(^|\n)([^\n]+(:756:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L759:
        expect: true
        expr: '(^|\n)([^\n]+(:759:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause")[^\n]*\n?)+'
      L775:
        expect: true
        expr: '(^|\n)([^\n]+(:775:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''while\''
          clause")[^\n]*\n?)+'
      L779:
        expect: true
        expr: '(^|\n)([^\n]+(:779:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L785:
        expect: true
        expr: '(^|\n)([^\n]+(:785:)[^\n]*[0-9]+: warning:[^\n]*("5: this \''else\''
          clause")[^\n]*\n?)+'
      L792:
        expect: true
        expr: '(^|\n)([^\n]+(:792:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L795:
        expect: true
        expr: '(^|\n)([^\n]+(:795:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause")[^\n]*\n?)+'
      L804:
        expect: true
        expr: '(^|\n)([^\n]+(:804:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\'' clause
          does not guard...")[^\n]*\n?)+'
test_Wmisleading-indentation_2511:
  build:
    cflags: "-std=gnu++11 -Wmisleading-indentation -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmisleading-indentation.c'
    sources:
      binary: Wmisleading-indentation.s
  group: GRPSERIAL
  validate:
    match:
      L1028:
        expect: true
        expr: '(^|\n)([^\n]+(:1028:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L105:
        expect: true
        expr: '(^|\n)([^\n]+(:105:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause does not guard...")[^\n]*\n?)+'
      L1154:
        expect: true
        expr: '(^|\n)([^\n]+(:1154:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L1213:
        expect: true
        expr: '(^|\n)([^\n]+(:1213:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L1225:
        expect: true
        expr: '(^|\n)([^\n]+(:1225:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L1237:
        expect: true
        expr: '(^|\n)([^\n]+(:1237:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+(:135:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause does not guard...")[^\n]*\n?)+'
      L143:
        expect: true
        expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\'' clause
          does not guard...")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+(:197:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\'' clause
          does not guard...")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''else\''
          clause does not guard...")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''while\''
          clause does not guard...")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L704:
        expect: true
        expr: '(^|\n)([^\n]+(:704:)[^\n]*[0-9]+: warning:[^\n]*("this \''for\'' clause")[^\n]*\n?)+'
      L706:
        expect: true
        expr: '(^|\n)([^\n]+(:706:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''while\''
          clause")[^\n]*\n?)+'
      L711:
        expect: true
        expr: '(^|\n)([^\n]+(:711:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L713:
        expect: true
        expr: '(^|\n)([^\n]+(:713:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''while\''
          clause")[^\n]*\n?)+'
      L719:
        expect: true
        expr: '(^|\n)([^\n]+(:719:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L725:
        expect: true
        expr: '(^|\n)([^\n]+(:725:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L729:
        expect: true
        expr: '(^|\n)([^\n]+(:729:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L735:
        expect: true
        expr: '(^|\n)([^\n]+(:735:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L744:
        expect: true
        expr: '(^|\n)([^\n]+(:744:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''else\''
          clause")[^\n]*\n?)+'
      L746:
        expect: true
        expr: '(^|\n)([^\n]+(:746:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L748:
        expect: true
        expr: '(^|\n)([^\n]+(:748:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L753:
        expect: true
        expr: '(^|\n)([^\n]+(:753:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L756:
        expect: true
        expr: '(^|\n)([^\n]+(:756:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L759:
        expect: true
        expr: '(^|\n)([^\n]+(:759:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause")[^\n]*\n?)+'
      L775:
        expect: true
        expr: '(^|\n)([^\n]+(:775:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''while\''
          clause")[^\n]*\n?)+'
      L779:
        expect: true
        expr: '(^|\n)([^\n]+(:779:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L785:
        expect: true
        expr: '(^|\n)([^\n]+(:785:)[^\n]*[0-9]+: warning:[^\n]*("5: this \''else\''
          clause")[^\n]*\n?)+'
      L792:
        expect: true
        expr: '(^|\n)([^\n]+(:792:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L795:
        expect: true
        expr: '(^|\n)([^\n]+(:795:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause")[^\n]*\n?)+'
      L804:
        expect: true
        expr: '(^|\n)([^\n]+(:804:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\'' clause
          does not guard...")[^\n]*\n?)+'
test_Wmisleading-indentation_2512:
  build:
    cflags: "-std=gnu++14 -Wmisleading-indentation -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmisleading-indentation.c'
    sources:
      binary: Wmisleading-indentation.s
  group: GRPSERIAL
  validate:
    match:
      L1028:
        expect: true
        expr: '(^|\n)([^\n]+(:1028:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L105:
        expect: true
        expr: '(^|\n)([^\n]+(:105:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause does not guard...")[^\n]*\n?)+'
      L1154:
        expect: true
        expr: '(^|\n)([^\n]+(:1154:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L1213:
        expect: true
        expr: '(^|\n)([^\n]+(:1213:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L1225:
        expect: true
        expr: '(^|\n)([^\n]+(:1225:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L1237:
        expect: true
        expr: '(^|\n)([^\n]+(:1237:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+(:135:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause does not guard...")[^\n]*\n?)+'
      L143:
        expect: true
        expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\'' clause
          does not guard...")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+(:197:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\'' clause
          does not guard...")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''else\''
          clause does not guard...")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''while\''
          clause does not guard...")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L704:
        expect: true
        expr: '(^|\n)([^\n]+(:704:)[^\n]*[0-9]+: warning:[^\n]*("this \''for\'' clause")[^\n]*\n?)+'
      L706:
        expect: true
        expr: '(^|\n)([^\n]+(:706:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''while\''
          clause")[^\n]*\n?)+'
      L711:
        expect: true
        expr: '(^|\n)([^\n]+(:711:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L713:
        expect: true
        expr: '(^|\n)([^\n]+(:713:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''while\''
          clause")[^\n]*\n?)+'
      L719:
        expect: true
        expr: '(^|\n)([^\n]+(:719:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L725:
        expect: true
        expr: '(^|\n)([^\n]+(:725:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L729:
        expect: true
        expr: '(^|\n)([^\n]+(:729:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L735:
        expect: true
        expr: '(^|\n)([^\n]+(:735:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L744:
        expect: true
        expr: '(^|\n)([^\n]+(:744:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''else\''
          clause")[^\n]*\n?)+'
      L746:
        expect: true
        expr: '(^|\n)([^\n]+(:746:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L748:
        expect: true
        expr: '(^|\n)([^\n]+(:748:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L753:
        expect: true
        expr: '(^|\n)([^\n]+(:753:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L756:
        expect: true
        expr: '(^|\n)([^\n]+(:756:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L759:
        expect: true
        expr: '(^|\n)([^\n]+(:759:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause")[^\n]*\n?)+'
      L775:
        expect: true
        expr: '(^|\n)([^\n]+(:775:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''while\''
          clause")[^\n]*\n?)+'
      L779:
        expect: true
        expr: '(^|\n)([^\n]+(:779:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L785:
        expect: true
        expr: '(^|\n)([^\n]+(:785:)[^\n]*[0-9]+: warning:[^\n]*("5: this \''else\''
          clause")[^\n]*\n?)+'
      L792:
        expect: true
        expr: '(^|\n)([^\n]+(:792:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L795:
        expect: true
        expr: '(^|\n)([^\n]+(:795:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause")[^\n]*\n?)+'
      L804:
        expect: true
        expr: '(^|\n)([^\n]+(:804:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\'' clause
          does not guard...")[^\n]*\n?)+'
test_Wmisleading-indentation_470:
  build:
    cflags: "-Wc++-compat  -Wmisleading-indentation -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmisleading-indentation.c'
    sources:
      binary: Wmisleading-indentation.s
  group: GRPSERIAL
  validate:
    match:
      L1028:
        expect: true
        expr: '(^|\n)([^\n]+(:1028:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L105:
        expect: true
        expr: '(^|\n)([^\n]+(:105:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause does not guard...")[^\n]*\n?)+'
      L1154:
        expect: true
        expr: '(^|\n)([^\n]+(:1154:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L1213:
        expect: true
        expr: '(^|\n)([^\n]+(:1213:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L1225:
        expect: true
        expr: '(^|\n)([^\n]+(:1225:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L1237:
        expect: true
        expr: '(^|\n)([^\n]+(:1237:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+(:135:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause does not guard...")[^\n]*\n?)+'
      L143:
        expect: true
        expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\'' clause
          does not guard...")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+(:197:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\'' clause
          does not guard...")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''else\''
          clause does not guard...")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''while\''
          clause does not guard...")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L704:
        expect: true
        expr: '(^|\n)([^\n]+(:704:)[^\n]*[0-9]+: warning:[^\n]*("this \''for\'' clause")[^\n]*\n?)+'
      L706:
        expect: true
        expr: '(^|\n)([^\n]+(:706:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''while\''
          clause")[^\n]*\n?)+'
      L711:
        expect: true
        expr: '(^|\n)([^\n]+(:711:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L713:
        expect: true
        expr: '(^|\n)([^\n]+(:713:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''while\''
          clause")[^\n]*\n?)+'
      L719:
        expect: true
        expr: '(^|\n)([^\n]+(:719:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L725:
        expect: true
        expr: '(^|\n)([^\n]+(:725:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L729:
        expect: true
        expr: '(^|\n)([^\n]+(:729:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L735:
        expect: true
        expr: '(^|\n)([^\n]+(:735:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L744:
        expect: true
        expr: '(^|\n)([^\n]+(:744:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''else\''
          clause")[^\n]*\n?)+'
      L746:
        expect: true
        expr: '(^|\n)([^\n]+(:746:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L748:
        expect: true
        expr: '(^|\n)([^\n]+(:748:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L753:
        expect: true
        expr: '(^|\n)([^\n]+(:753:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L756:
        expect: true
        expr: '(^|\n)([^\n]+(:756:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L759:
        expect: true
        expr: '(^|\n)([^\n]+(:759:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause")[^\n]*\n?)+'
      L775:
        expect: true
        expr: '(^|\n)([^\n]+(:775:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''while\''
          clause")[^\n]*\n?)+'
      L779:
        expect: true
        expr: '(^|\n)([^\n]+(:779:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L785:
        expect: true
        expr: '(^|\n)([^\n]+(:785:)[^\n]*[0-9]+: warning:[^\n]*("5: this \''else\''
          clause")[^\n]*\n?)+'
      L792:
        expect: true
        expr: '(^|\n)([^\n]+(:792:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L795:
        expect: true
        expr: '(^|\n)([^\n]+(:795:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause")[^\n]*\n?)+'
      L804:
        expect: true
        expr: '(^|\n)([^\n]+(:804:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\'' clause
          does not guard...")[^\n]*\n?)+'
test_Wmisleading-indentation_81:
  build:
    cflags: "-Wc++-compat  -Wmisleading-indentation -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wmisleading-indentation.c'
    sources:
      binary: Wmisleading-indentation.s
  group: GRPSERIAL
  validate:
    match:
      L1028:
        expect: true
        expr: '(^|\n)([^\n]+(:1028:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L105:
        expect: true
        expr: '(^|\n)([^\n]+(:105:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause does not guard...")[^\n]*\n?)+'
      L1154:
        expect: true
        expr: '(^|\n)([^\n]+(:1154:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L1213:
        expect: true
        expr: '(^|\n)([^\n]+(:1213:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L1225:
        expect: true
        expr: '(^|\n)([^\n]+(:1225:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L1237:
        expect: true
        expr: '(^|\n)([^\n]+(:1237:)[^\n]*[0-9]+: warning:[^\n]*("this .else. clause")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+(:135:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause does not guard...")[^\n]*\n?)+'
      L143:
        expect: true
        expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\'' clause
          does not guard...")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+(:197:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\'' clause
          does not guard...")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''else\''
          clause does not guard...")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''while\''
          clause does not guard...")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause does not guard...")[^\n]*\n?)+'
      L704:
        expect: true
        expr: '(^|\n)([^\n]+(:704:)[^\n]*[0-9]+: warning:[^\n]*("this \''for\'' clause")[^\n]*\n?)+'
      L706:
        expect: true
        expr: '(^|\n)([^\n]+(:706:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''while\''
          clause")[^\n]*\n?)+'
      L711:
        expect: true
        expr: '(^|\n)([^\n]+(:711:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L713:
        expect: true
        expr: '(^|\n)([^\n]+(:713:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''while\''
          clause")[^\n]*\n?)+'
      L719:
        expect: true
        expr: '(^|\n)([^\n]+(:719:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L725:
        expect: true
        expr: '(^|\n)([^\n]+(:725:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L729:
        expect: true
        expr: '(^|\n)([^\n]+(:729:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L735:
        expect: true
        expr: '(^|\n)([^\n]+(:735:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L744:
        expect: true
        expr: '(^|\n)([^\n]+(:744:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''else\''
          clause")[^\n]*\n?)+'
      L746:
        expect: true
        expr: '(^|\n)([^\n]+(:746:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L748:
        expect: true
        expr: '(^|\n)([^\n]+(:748:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L753:
        expect: true
        expr: '(^|\n)([^\n]+(:753:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L756:
        expect: true
        expr: '(^|\n)([^\n]+(:756:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L759:
        expect: true
        expr: '(^|\n)([^\n]+(:759:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause")[^\n]*\n?)+'
      L775:
        expect: true
        expr: '(^|\n)([^\n]+(:775:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''while\''
          clause")[^\n]*\n?)+'
      L779:
        expect: true
        expr: '(^|\n)([^\n]+(:779:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\''
          clause")[^\n]*\n?)+'
      L785:
        expect: true
        expr: '(^|\n)([^\n]+(:785:)[^\n]*[0-9]+: warning:[^\n]*("5: this \''else\''
          clause")[^\n]*\n?)+'
      L792:
        expect: true
        expr: '(^|\n)([^\n]+(:792:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L795:
        expect: true
        expr: '(^|\n)([^\n]+(:795:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''for\''
          clause")[^\n]*\n?)+'
      L804:
        expect: true
        expr: '(^|\n)([^\n]+(:804:)[^\n]*[0-9]+: warning:[^\n]*("8: this \''if\''
          clause")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("3: this \''if\'' clause
          does not guard...")[^\n]*\n?)+'
test_Wparentheses-1_1021:
  build:
    cflags: "-std=gnu++98 -Wparentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wparentheses-1.c'
    sources:
      binary: Wparentheses-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'
test_Wparentheses-1_1022:
  build:
    cflags: "-std=gnu++11 -Wparentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wparentheses-1.c'
    sources:
      binary: Wparentheses-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'
test_Wparentheses-1_1023:
  build:
    cflags: "-std=gnu++14 -Wparentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wparentheses-1.c'
    sources:
      binary: Wparentheses-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'
test_Wparentheses-1_1963:
  build:
    cflags: "-Wc++-compat  -Wparentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wparentheses-1.c'
    sources:
      binary: Wparentheses-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'
test_Wparentheses-1_2513:
  build:
    cflags: "-std=gnu++98 -Wparentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wparentheses-1.c'
    sources:
      binary: Wparentheses-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'
test_Wparentheses-1_2514:
  build:
    cflags: "-std=gnu++11 -Wparentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wparentheses-1.c'
    sources:
      binary: Wparentheses-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'
test_Wparentheses-1_2515:
  build:
    cflags: "-std=gnu++14 -Wparentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wparentheses-1.c'
    sources:
      binary: Wparentheses-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'
test_Wparentheses-1_471:
  build:
    cflags: "-Wc++-compat  -Wparentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wparentheses-1.c'
    sources:
      binary: Wparentheses-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'
test_Wparentheses-1_82:
  build:
    cflags: "-Wc++-compat  -Wparentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wparentheses-1.c'
    sources:
      binary: Wparentheses-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'
test_Wpointer-arith-1_1024:
  build:
    cflags: "-std=gnu++98 -Wpedantic -Wno-pointer-arith\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wpointer-arith-1.c'
    sources:
      binary: Wpointer-arith-1.s
  group: GRPSERIAL
test_Wpointer-arith-1_1025:
  build:
    cflags: "-std=gnu++11 -Wpedantic -Wno-pointer-arith\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wpointer-arith-1.c'
    sources:
      binary: Wpointer-arith-1.s
  group: GRPSERIAL
test_Wpointer-arith-1_1026:
  build:
    cflags: "-std=gnu++14 -Wpedantic -Wno-pointer-arith\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wpointer-arith-1.c'
    sources:
      binary: Wpointer-arith-1.s
  group: GRPSERIAL
test_Wpointer-arith-1_1964:
  build:
    cflags: "-Wc++-compat  -Wpedantic -Wno-pointer-arith\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wpointer-arith-1.c'
    sources:
      binary: Wpointer-arith-1.s
  group: GRPSERIAL
test_Wpointer-arith-1_2516:
  build:
    cflags: "-std=gnu++98 -Wpedantic -Wno-pointer-arith\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wpointer-arith-1.c'
    sources:
      binary: Wpointer-arith-1.s
  group: GRPSERIAL
test_Wpointer-arith-1_2517:
  build:
    cflags: "-std=gnu++11 -Wpedantic -Wno-pointer-arith\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wpointer-arith-1.c'
    sources:
      binary: Wpointer-arith-1.s
  group: GRPSERIAL
test_Wpointer-arith-1_2518:
  build:
    cflags: "-std=gnu++14 -Wpedantic -Wno-pointer-arith\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wpointer-arith-1.c'
    sources:
      binary: Wpointer-arith-1.s
  group: GRPSERIAL
test_Wpointer-arith-1_472:
  build:
    cflags: "-Wc++-compat  -Wpedantic -Wno-pointer-arith\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wpointer-arith-1.c'
    sources:
      binary: Wpointer-arith-1.s
  group: GRPSERIAL
test_Wpointer-arith-1_83:
  build:
    cflags: "-Wc++-compat  -Wpedantic -Wno-pointer-arith\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wpointer-arith-1.c'
    sources:
      binary: Wpointer-arith-1.s
  group: GRPSERIAL
test_Wpointer-compare-1_1027:
  build:
    cflags: "-Wpointer-compare -std=c++03\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wpointer-compare-1.c'
    sources:
      binary: Wpointer-compare-1.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
test_Wpointer-compare-1_1965:
  build:
    cflags: "-Wc++-compat  -Wpointer-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wpointer-compare-1.c'
    sources:
      binary: Wpointer-compare-1.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
test_Wpointer-compare-1_2519:
  build:
    cflags: "-Wpointer-compare -std=c++03\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wpointer-compare-1.c'
    sources:
      binary: Wpointer-compare-1.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
test_Wpointer-compare-1_473:
  build:
    cflags: "-Wc++-compat  -Wpointer-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wpointer-compare-1.c'
    sources:
      binary: Wpointer-compare-1.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
test_Wpointer-compare-1_84:
  build:
    cflags: "-Wc++-compat  -Wpointer-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wpointer-compare-1.c'
    sources:
      binary: Wpointer-compare-1.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          pointer and zero character")[^\n]*\n?)+'
test_Wsequence-point-1_1028:
  build:
    cflags: "-std=gnu++98 -Wsequence-point\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wsequence-point-1.c'
    sources:
      binary: Wsequence-point-1.s
  group: GRPSERIAL
test_Wsequence-point-1_1029:
  build:
    cflags: "-std=gnu++11 -Wsequence-point\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wsequence-point-1.c'
    sources:
      binary: Wsequence-point-1.s
  group: GRPSERIAL
test_Wsequence-point-1_1030:
  build:
    cflags: "-std=gnu++14 -Wsequence-point\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wsequence-point-1.c'
    sources:
      binary: Wsequence-point-1.s
  group: GRPSERIAL
test_Wsequence-point-1_1966:
  build:
    cflags: "-Wc++-compat  -Wsequence-point\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wsequence-point-1.c'
    sources:
      binary: Wsequence-point-1.s
  group: GRPSERIAL
test_Wsequence-point-1_2520:
  build:
    cflags: "-std=gnu++98 -Wsequence-point\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wsequence-point-1.c'
    sources:
      binary: Wsequence-point-1.s
  group: GRPSERIAL
test_Wsequence-point-1_2521:
  build:
    cflags: "-std=gnu++11 -Wsequence-point\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wsequence-point-1.c'
    sources:
      binary: Wsequence-point-1.s
  group: GRPSERIAL
test_Wsequence-point-1_2522:
  build:
    cflags: "-std=gnu++14 -Wsequence-point\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wsequence-point-1.c'
    sources:
      binary: Wsequence-point-1.s
  group: GRPSERIAL
test_Wsequence-point-1_474:
  build:
    cflags: "-Wc++-compat  -Wsequence-point\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wsequence-point-1.c'
    sources:
      binary: Wsequence-point-1.s
  group: GRPSERIAL
test_Wsequence-point-1_85:
  build:
    cflags: "-Wc++-compat  -Wsequence-point\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wsequence-point-1.c'
    sources:
      binary: Wsequence-point-1.s
  group: GRPSERIAL
test_Wshift-count-negative-1_1031:
  build:
    cflags: "-std=gnu++98 -Wshift-count-negative\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-count-negative-1.c'
    sources:
      binary: Wshift-count-negative-1.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("left shift count is
          negative")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("right shift count is
          negative")[^\n]*\n?)+'
test_Wshift-count-negative-1_1032:
  build:
    cflags: "-std=gnu++11 -Wshift-count-negative\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-count-negative-1.c'
    sources:
      binary: Wshift-count-negative-1.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("left shift count is
          negative")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("right shift count is
          negative")[^\n]*\n?)+'
test_Wshift-count-negative-1_1033:
  build:
    cflags: "-std=gnu++14 -Wshift-count-negative\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-count-negative-1.c'
    sources:
      binary: Wshift-count-negative-1.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("left shift count is
          negative")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("right shift count is
          negative")[^\n]*\n?)+'
test_Wshift-count-negative-1_1967:
  build:
    cflags: "-Wc++-compat  -Wshift-count-negative\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-count-negative-1.c'
    sources:
      binary: Wshift-count-negative-1.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("left shift count is
          negative")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("right shift count is
          negative")[^\n]*\n?)+'
test_Wshift-count-negative-1_2523:
  build:
    cflags: "-std=gnu++98 -Wshift-count-negative\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-count-negative-1.c'
    sources:
      binary: Wshift-count-negative-1.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("left shift count is
          negative")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("right shift count is
          negative")[^\n]*\n?)+'
test_Wshift-count-negative-1_2524:
  build:
    cflags: "-std=gnu++11 -Wshift-count-negative\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-count-negative-1.c'
    sources:
      binary: Wshift-count-negative-1.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("left shift count is
          negative")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("right shift count is
          negative")[^\n]*\n?)+'
test_Wshift-count-negative-1_2525:
  build:
    cflags: "-std=gnu++14 -Wshift-count-negative\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-count-negative-1.c'
    sources:
      binary: Wshift-count-negative-1.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("left shift count is
          negative")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("right shift count is
          negative")[^\n]*\n?)+'
test_Wshift-count-negative-1_475:
  build:
    cflags: "-Wc++-compat  -Wshift-count-negative\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-count-negative-1.c'
    sources:
      binary: Wshift-count-negative-1.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("left shift count is
          negative")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("right shift count is
          negative")[^\n]*\n?)+'
test_Wshift-count-negative-1_86:
  build:
    cflags: "-Wc++-compat  -Wshift-count-negative\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-count-negative-1.c'
    sources:
      binary: Wshift-count-negative-1.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("left shift count is
          negative")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("right shift count is
          negative")[^\n]*\n?)+'
test_Wshift-count-negative-2_1034:
  build:
    cflags: "-std=gnu++98 -Wno-shift-count-negative\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-count-negative-2.c'
    sources:
      binary: Wshift-count-negative-2.s
  group: GRPSERIAL
test_Wshift-count-negative-2_1035:
  build:
    cflags: "-std=gnu++11 -Wno-shift-count-negative\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-count-negative-2.c'
    sources:
      binary: Wshift-count-negative-2.s
  group: GRPSERIAL
test_Wshift-count-negative-2_1036:
  build:
    cflags: "-std=gnu++14 -Wno-shift-count-negative\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-count-negative-2.c'
    sources:
      binary: Wshift-count-negative-2.s
  group: GRPSERIAL
test_Wshift-count-negative-2_1968:
  build:
    cflags: "-Wc++-compat  -Wno-shift-count-negative\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-count-negative-2.c'
    sources:
      binary: Wshift-count-negative-2.s
  group: GRPSERIAL
test_Wshift-count-negative-2_2526:
  build:
    cflags: "-std=gnu++98 -Wno-shift-count-negative\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-count-negative-2.c'
    sources:
      binary: Wshift-count-negative-2.s
  group: GRPSERIAL
test_Wshift-count-negative-2_2527:
  build:
    cflags: "-std=gnu++11 -Wno-shift-count-negative\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-count-negative-2.c'
    sources:
      binary: Wshift-count-negative-2.s
  group: GRPSERIAL
test_Wshift-count-negative-2_2528:
  build:
    cflags: "-std=gnu++14 -Wno-shift-count-negative\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-count-negative-2.c'
    sources:
      binary: Wshift-count-negative-2.s
  group: GRPSERIAL
test_Wshift-count-negative-2_476:
  build:
    cflags: "-Wc++-compat  -Wno-shift-count-negative\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-count-negative-2.c'
    sources:
      binary: Wshift-count-negative-2.s
  group: GRPSERIAL
test_Wshift-count-negative-2_87:
  build:
    cflags: "-Wc++-compat  -Wno-shift-count-negative\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-count-negative-2.c'
    sources:
      binary: Wshift-count-negative-2.s
  group: GRPSERIAL
test_Wshift-count-overflow-1_1037:
  build:
    cflags: "-std=gnu++98 -Wshift-count-overflow\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-count-overflow-1.c'
    sources:
      binary: Wshift-count-overflow-1.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("left shift count >=
          width of type")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("right shift count >=
          width of type")[^\n]*\n?)+'
test_Wshift-count-overflow-1_1038:
  build:
    cflags: "-std=gnu++11 -Wshift-count-overflow\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-count-overflow-1.c'
    sources:
      binary: Wshift-count-overflow-1.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("left shift count >=
          width of type")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("right shift count >=
          width of type")[^\n]*\n?)+'
test_Wshift-count-overflow-1_1039:
  build:
    cflags: "-std=gnu++14 -Wshift-count-overflow\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-count-overflow-1.c'
    sources:
      binary: Wshift-count-overflow-1.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("left shift count >=
          width of type")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("right shift count >=
          width of type")[^\n]*\n?)+'
test_Wshift-count-overflow-1_1969:
  build:
    cflags: "-Wc++-compat  -Wshift-count-overflow\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-count-overflow-1.c'
    sources:
      binary: Wshift-count-overflow-1.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("left shift count >=
          width of type")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("right shift count >=
          width of type")[^\n]*\n?)+'
test_Wshift-count-overflow-1_2529:
  build:
    cflags: "-std=gnu++98 -Wshift-count-overflow\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-count-overflow-1.c'
    sources:
      binary: Wshift-count-overflow-1.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("left shift count >=
          width of type")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("right shift count >=
          width of type")[^\n]*\n?)+'
test_Wshift-count-overflow-1_2530:
  build:
    cflags: "-std=gnu++11 -Wshift-count-overflow\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-count-overflow-1.c'
    sources:
      binary: Wshift-count-overflow-1.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("left shift count >=
          width of type")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("right shift count >=
          width of type")[^\n]*\n?)+'
test_Wshift-count-overflow-1_2531:
  build:
    cflags: "-std=gnu++14 -Wshift-count-overflow\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-count-overflow-1.c'
    sources:
      binary: Wshift-count-overflow-1.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("left shift count >=
          width of type")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("right shift count >=
          width of type")[^\n]*\n?)+'
test_Wshift-count-overflow-1_477:
  build:
    cflags: "-Wc++-compat  -Wshift-count-overflow\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-count-overflow-1.c'
    sources:
      binary: Wshift-count-overflow-1.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("left shift count >=
          width of type")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("right shift count >=
          width of type")[^\n]*\n?)+'
test_Wshift-count-overflow-1_88:
  build:
    cflags: "-Wc++-compat  -Wshift-count-overflow\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-count-overflow-1.c'
    sources:
      binary: Wshift-count-overflow-1.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("left shift count >=
          width of type")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("right shift count >=
          width of type")[^\n]*\n?)+'
test_Wshift-count-overflow-2_1040:
  build:
    cflags: "-std=gnu++98 -Wno-shift-count-overflow\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-count-overflow-2.c'
    sources:
      binary: Wshift-count-overflow-2.s
  group: GRPSERIAL
test_Wshift-count-overflow-2_1041:
  build:
    cflags: "-std=gnu++11 -Wno-shift-count-overflow\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-count-overflow-2.c'
    sources:
      binary: Wshift-count-overflow-2.s
  group: GRPSERIAL
test_Wshift-count-overflow-2_1042:
  build:
    cflags: "-std=gnu++14 -Wno-shift-count-overflow\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-count-overflow-2.c'
    sources:
      binary: Wshift-count-overflow-2.s
  group: GRPSERIAL
test_Wshift-count-overflow-2_1970:
  build:
    cflags: "-Wc++-compat  -Wno-shift-count-overflow\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-count-overflow-2.c'
    sources:
      binary: Wshift-count-overflow-2.s
  group: GRPSERIAL
test_Wshift-count-overflow-2_2532:
  build:
    cflags: "-std=gnu++98 -Wno-shift-count-overflow\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-count-overflow-2.c'
    sources:
      binary: Wshift-count-overflow-2.s
  group: GRPSERIAL
test_Wshift-count-overflow-2_2533:
  build:
    cflags: "-std=gnu++11 -Wno-shift-count-overflow\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-count-overflow-2.c'
    sources:
      binary: Wshift-count-overflow-2.s
  group: GRPSERIAL
test_Wshift-count-overflow-2_2534:
  build:
    cflags: "-std=gnu++14 -Wno-shift-count-overflow\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-count-overflow-2.c'
    sources:
      binary: Wshift-count-overflow-2.s
  group: GRPSERIAL
test_Wshift-count-overflow-2_478:
  build:
    cflags: "-Wc++-compat  -Wno-shift-count-overflow\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-count-overflow-2.c'
    sources:
      binary: Wshift-count-overflow-2.s
  group: GRPSERIAL
test_Wshift-count-overflow-2_89:
  build:
    cflags: "-Wc++-compat  -Wno-shift-count-overflow\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-count-overflow-2.c'
    sources:
      binary: Wshift-count-overflow-2.s
  group: GRPSERIAL
test_Wshift-negative-value-1_1043:
  build:
    cflags: "-O -Wextra -std=c++11\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-negative-value-1.c'
    sources:
      binary: Wshift-negative-value-1.s
  group: GRPSERIAL
  validate:
    match:
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("left operand
          of shift expression")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value|not an integer constant")[^\n]*\n?)+'
test_Wshift-negative-value-1_1971:
  build:
    cflags: "-Wc++-compat  -O -Wextra\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-negative-value-1.c'
    sources:
      binary: Wshift-negative-value-1.s
  group: GRPSERIAL
  validate:
    match:
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("left operand
          of shift expression")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value|not an integer constant")[^\n]*\n?)+'
test_Wshift-negative-value-1_2535:
  build:
    cflags: "-O -Wextra -std=c++11\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-negative-value-1.c'
    sources:
      binary: Wshift-negative-value-1.s
  group: GRPSERIAL
  validate:
    match:
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("left operand
          of shift expression")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value|not an integer constant")[^\n]*\n?)+'
test_Wshift-negative-value-1_479:
  build:
    cflags: "-Wc++-compat  -O -Wextra\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-negative-value-1.c'
    sources:
      binary: Wshift-negative-value-1.s
  group: GRPSERIAL
  validate:
    match:
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("left operand
          of shift expression")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value|not an integer constant")[^\n]*\n?)+'
test_Wshift-negative-value-1_90:
  build:
    cflags: "-Wc++-compat  -O -Wextra\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-negative-value-1.c'
    sources:
      binary: Wshift-negative-value-1.s
  group: GRPSERIAL
  validate:
    match:
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("left operand
          of shift expression")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value|not an integer constant")[^\n]*\n?)+'
test_Wshift-negative-value-2_1044:
  build:
    cflags: "-O -Wshift-negative-value -std=c++11\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-negative-value-2.c'
    sources:
      binary: Wshift-negative-value-2.s
  group: GRPSERIAL
  validate:
    match:
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not an integer
          constant")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("left operand
          of shift expression")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
test_Wshift-negative-value-2_1972:
  build:
    cflags: "-Wc++-compat  -O -Wshift-negative-value\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-negative-value-2.c'
    sources:
      binary: Wshift-negative-value-2.s
  group: GRPSERIAL
  validate:
    match:
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not an integer
          constant")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("left operand
          of shift expression")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
test_Wshift-negative-value-2_2536:
  build:
    cflags: "-O -Wshift-negative-value -std=c++11\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-negative-value-2.c'
    sources:
      binary: Wshift-negative-value-2.s
  group: GRPSERIAL
  validate:
    match:
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not an integer
          constant")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("left operand
          of shift expression")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
test_Wshift-negative-value-2_480:
  build:
    cflags: "-Wc++-compat  -O -Wshift-negative-value\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-negative-value-2.c'
    sources:
      binary: Wshift-negative-value-2.s
  group: GRPSERIAL
  validate:
    match:
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not an integer
          constant")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("left operand
          of shift expression")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
test_Wshift-negative-value-2_91:
  build:
    cflags: "-Wc++-compat  -O -Wshift-negative-value\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-negative-value-2.c'
    sources:
      binary: Wshift-negative-value-2.s
  group: GRPSERIAL
  validate:
    match:
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not an integer
          constant")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("left operand
          of shift expression")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
test_Wshift-negative-value-3_1045:
  build:
    cflags: "-O -Wextra -Wno-shift-negative-value -std=c++11\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-negative-value-3.c'
    sources:
      binary: Wshift-negative-value-3.s
  group: GRPSERIAL
  validate:
    match:
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not an integer
          constant")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("left operand
          of shift expression")[^\n]*\n?)+'
test_Wshift-negative-value-3_1973:
  build:
    cflags: "-Wc++-compat  -O -Wextra -Wno-shift-negative-value\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-negative-value-3.c'
    sources:
      binary: Wshift-negative-value-3.s
  group: GRPSERIAL
  validate:
    match:
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not an integer
          constant")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("left operand
          of shift expression")[^\n]*\n?)+'
test_Wshift-negative-value-3_2537:
  build:
    cflags: "-O -Wextra -Wno-shift-negative-value -std=c++11\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-negative-value-3.c'
    sources:
      binary: Wshift-negative-value-3.s
  group: GRPSERIAL
  validate:
    match:
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not an integer
          constant")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("left operand
          of shift expression")[^\n]*\n?)+'
test_Wshift-negative-value-3_481:
  build:
    cflags: "-Wc++-compat  -O -Wextra -Wno-shift-negative-value\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-negative-value-3.c'
    sources:
      binary: Wshift-negative-value-3.s
  group: GRPSERIAL
  validate:
    match:
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not an integer
          constant")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("left operand
          of shift expression")[^\n]*\n?)+'
test_Wshift-negative-value-3_92:
  build:
    cflags: "-Wc++-compat  -O -Wextra -Wno-shift-negative-value\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-negative-value-3.c'
    sources:
      binary: Wshift-negative-value-3.s
  group: GRPSERIAL
  validate:
    match:
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not an integer
          constant")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("left operand
          of shift expression")[^\n]*\n?)+'
test_Wshift-negative-value-4_1046:
  build:
    cflags: "-O -std=c++11\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-negative-value-4.c'
    sources:
      binary: Wshift-negative-value-4.s
  group: GRPSERIAL
  validate:
    match:
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not an integer
          constant")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("left operand
          of shift expression")[^\n]*\n?)+'
test_Wshift-negative-value-4_1974:
  build:
    cflags: "-Wc++-compat  -O\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-negative-value-4.c'
    sources:
      binary: Wshift-negative-value-4.s
  group: GRPSERIAL
  validate:
    match:
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not an integer
          constant")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("left operand
          of shift expression")[^\n]*\n?)+'
test_Wshift-negative-value-4_2538:
  build:
    cflags: "-O -std=c++11\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-negative-value-4.c'
    sources:
      binary: Wshift-negative-value-4.s
  group: GRPSERIAL
  validate:
    match:
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not an integer
          constant")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("left operand
          of shift expression")[^\n]*\n?)+'
test_Wshift-negative-value-4_482:
  build:
    cflags: "-Wc++-compat  -O\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-negative-value-4.c'
    sources:
      binary: Wshift-negative-value-4.s
  group: GRPSERIAL
  validate:
    match:
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not an integer
          constant")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("left operand
          of shift expression")[^\n]*\n?)+'
test_Wshift-negative-value-4_93:
  build:
    cflags: "-Wc++-compat  -O\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-negative-value-4.c'
    sources:
      binary: Wshift-negative-value-4.s
  group: GRPSERIAL
  validate:
    match:
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not an integer
          constant")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("left operand
          of shift expression")[^\n]*\n?)+'
test_Wshift-negative-value-5_1047:
  build:
    cflags: "-O -Wshift-negative-value -std=c++03\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-negative-value-5.c'
    sources:
      binary: Wshift-negative-value-5.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
test_Wshift-negative-value-5_1975:
  build:
    cflags: "-Wc++-compat  -O -Wshift-negative-value -std=c90\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-negative-value-5.c'
    sources:
      binary: Wshift-negative-value-5.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
test_Wshift-negative-value-5_2539:
  build:
    cflags: "-O -Wshift-negative-value -std=c++03\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-negative-value-5.c'
    sources:
      binary: Wshift-negative-value-5.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
test_Wshift-negative-value-5_483:
  build:
    cflags: "-Wc++-compat  -O -Wshift-negative-value -std=c90\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-negative-value-5.c'
    sources:
      binary: Wshift-negative-value-5.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
test_Wshift-negative-value-5_94:
  build:
    cflags: "-Wc++-compat  -O -Wshift-negative-value -std=c90\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-negative-value-5.c'
    sources:
      binary: Wshift-negative-value-5.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("left shift of negative
          value")[^\n]*\n?)+'
test_Wshift-negative-value-6_1048:
  build:
    cflags: "-O -Wextra -std=c++11 -std=c++03\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-negative-value-6.c'
    sources:
      binary: Wshift-negative-value-6.s
  group: GRPSERIAL
test_Wshift-negative-value-6_1976:
  build:
    cflags: "-Wc++-compat  -O -Wextra -std=c90\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-negative-value-6.c'
    sources:
      binary: Wshift-negative-value-6.s
  group: GRPSERIAL
test_Wshift-negative-value-6_2540:
  build:
    cflags: "-O -Wextra -std=c++11 -std=c++03\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-negative-value-6.c'
    sources:
      binary: Wshift-negative-value-6.s
  group: GRPSERIAL
test_Wshift-negative-value-6_484:
  build:
    cflags: "-Wc++-compat  -O -Wextra -std=c90\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-negative-value-6.c'
    sources:
      binary: Wshift-negative-value-6.s
  group: GRPSERIAL
test_Wshift-negative-value-6_95:
  build:
    cflags: "-Wc++-compat  -O -Wextra -std=c90\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-negative-value-6.c'
    sources:
      binary: Wshift-negative-value-6.s
  group: GRPSERIAL
test_Wshift-overflow-1_1049:
  build:
    cflags: "-O -std=c++11\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-overflow-1.c'
    sources:
      binary: Wshift-overflow-1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("requires 35 bits to
          represent")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("requires 34 bits to
          represent")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("requires 63 bits to
          represent")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("requires 35 bits to
          represent")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("requires 34 bits to
          represent")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("requires 63 bits to
          represent")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("requires 68 bits to
          represent")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("requires 67 bits to
          represent")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("requires 66 bits to
          represent")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("requires 127 bits
          to represent")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("requires 68 bits to
          represent")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("requires 67 bits to
          represent")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("requires 66 bits to
          represent")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("requires 127 bits
          to represent")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("requires 65 bits to
          represent")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
test_Wshift-overflow-1_1977:
  build:
    cflags: "-Wc++-compat  -O\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-overflow-1.c'
    sources:
      binary: Wshift-overflow-1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("requires 35 bits to
          represent")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("requires 34 bits to
          represent")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("requires 63 bits to
          represent")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("requires 35 bits to
          represent")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("requires 34 bits to
          represent")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("requires 63 bits to
          represent")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("requires 68 bits to
          represent")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("requires 67 bits to
          represent")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("requires 66 bits to
          represent")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("requires 127 bits
          to represent")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("requires 68 bits to
          represent")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("requires 67 bits to
          represent")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("requires 66 bits to
          represent")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("requires 127 bits
          to represent")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("requires 65 bits to
          represent")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
test_Wshift-overflow-1_2541:
  build:
    cflags: "-O -std=c++11\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-overflow-1.c'
    sources:
      binary: Wshift-overflow-1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("requires 35 bits to
          represent")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("requires 34 bits to
          represent")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("requires 63 bits to
          represent")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("requires 35 bits to
          represent")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("requires 34 bits to
          represent")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("requires 63 bits to
          represent")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("requires 68 bits to
          represent")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("requires 67 bits to
          represent")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("requires 66 bits to
          represent")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("requires 127 bits
          to represent")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("requires 68 bits to
          represent")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("requires 67 bits to
          represent")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("requires 66 bits to
          represent")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("requires 127 bits
          to represent")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("requires 65 bits to
          represent")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
test_Wshift-overflow-1_485:
  build:
    cflags: "-Wc++-compat  -O\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-overflow-1.c'
    sources:
      binary: Wshift-overflow-1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("requires 35 bits to
          represent")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("requires 34 bits to
          represent")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("requires 63 bits to
          represent")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("requires 35 bits to
          represent")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("requires 34 bits to
          represent")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("requires 63 bits to
          represent")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("requires 68 bits to
          represent")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("requires 67 bits to
          represent")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("requires 66 bits to
          represent")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("requires 127 bits
          to represent")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("requires 68 bits to
          represent")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("requires 67 bits to
          represent")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("requires 66 bits to
          represent")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("requires 127 bits
          to represent")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("requires 65 bits to
          represent")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
test_Wshift-overflow-1_96:
  build:
    cflags: "-Wc++-compat  -O\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-overflow-1.c'
    sources:
      binary: Wshift-overflow-1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("requires 35 bits to
          represent")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("requires 34 bits to
          represent")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("requires 63 bits to
          represent")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("requires 35 bits to
          represent")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("requires 34 bits to
          represent")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("requires 63 bits to
          represent")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("requires 68 bits to
          represent")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("requires 67 bits to
          represent")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("requires 66 bits to
          represent")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("requires 127 bits
          to represent")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("requires 68 bits to
          represent")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("requires 67 bits to
          represent")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("requires 66 bits to
          represent")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("requires 127 bits
          to represent")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("requires 65 bits to
          represent")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
test_Wshift-overflow-2_1050:
  build:
    cflags: "-O -Wno-shift-overflow -std=c++11\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-overflow-2.c'
    sources:
      binary: Wshift-overflow-2.s
  group: GRPSERIAL
test_Wshift-overflow-2_1978:
  build:
    cflags: "-Wc++-compat  -O -Wno-shift-overflow\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-overflow-2.c'
    sources:
      binary: Wshift-overflow-2.s
  group: GRPSERIAL
test_Wshift-overflow-2_2542:
  build:
    cflags: "-O -Wno-shift-overflow -std=c++11\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-overflow-2.c'
    sources:
      binary: Wshift-overflow-2.s
  group: GRPSERIAL
test_Wshift-overflow-2_486:
  build:
    cflags: "-Wc++-compat  -O -Wno-shift-overflow\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-overflow-2.c'
    sources:
      binary: Wshift-overflow-2.s
  group: GRPSERIAL
test_Wshift-overflow-2_97:
  build:
    cflags: "-Wc++-compat  -O -Wno-shift-overflow\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-overflow-2.c'
    sources:
      binary: Wshift-overflow-2.s
  group: GRPSERIAL
test_Wshift-overflow-3_1051:
  build:
    cflags: "-O -Wshift-overflow -std=c++03\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-overflow-3.c'
    sources:
      binary: Wshift-overflow-3.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("requires 35 bits to
          represent")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("requires 34 bits to
          represent")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("requires 63 bits to
          represent")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("requires 35 bits to
          represent")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("requires 34 bits to
          represent")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("requires 63 bits to
          represent")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("requires 68 bits to
          represent")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("requires 67 bits to
          represent")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("requires 66 bits to
          represent")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("requires 127 bits
          to represent")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("requires 68 bits to
          represent")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("requires 67 bits to
          represent")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("requires 66 bits to
          represent")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("requires 127 bits
          to represent")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("requires 65 bits to
          represent")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
test_Wshift-overflow-3_1979:
  build:
    cflags: "-Wc++-compat  -O -Wshift-overflow -std=gnu90\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-overflow-3.c'
    sources:
      binary: Wshift-overflow-3.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("requires 35 bits to
          represent")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("requires 34 bits to
          represent")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("requires 63 bits to
          represent")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("requires 35 bits to
          represent")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("requires 34 bits to
          represent")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("requires 63 bits to
          represent")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("requires 68 bits to
          represent")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("requires 67 bits to
          represent")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("requires 66 bits to
          represent")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("requires 127 bits
          to represent")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("requires 68 bits to
          represent")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("requires 67 bits to
          represent")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("requires 66 bits to
          represent")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("requires 127 bits
          to represent")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("requires 65 bits to
          represent")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
test_Wshift-overflow-3_2543:
  build:
    cflags: "-O -Wshift-overflow -std=c++03\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-overflow-3.c'
    sources:
      binary: Wshift-overflow-3.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("requires 35 bits to
          represent")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("requires 34 bits to
          represent")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("requires 63 bits to
          represent")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("requires 35 bits to
          represent")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("requires 34 bits to
          represent")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("requires 63 bits to
          represent")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("requires 68 bits to
          represent")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("requires 67 bits to
          represent")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("requires 66 bits to
          represent")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("requires 127 bits
          to represent")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("requires 68 bits to
          represent")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("requires 67 bits to
          represent")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("requires 66 bits to
          represent")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("requires 127 bits
          to represent")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("requires 65 bits to
          represent")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
test_Wshift-overflow-3_487:
  build:
    cflags: "-Wc++-compat  -O -Wshift-overflow -std=gnu90\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-overflow-3.c'
    sources:
      binary: Wshift-overflow-3.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("requires 35 bits to
          represent")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("requires 34 bits to
          represent")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("requires 63 bits to
          represent")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("requires 35 bits to
          represent")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("requires 34 bits to
          represent")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("requires 63 bits to
          represent")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("requires 68 bits to
          represent")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("requires 67 bits to
          represent")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("requires 66 bits to
          represent")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("requires 127 bits
          to represent")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("requires 68 bits to
          represent")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("requires 67 bits to
          represent")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("requires 66 bits to
          represent")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("requires 127 bits
          to represent")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("requires 65 bits to
          represent")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
test_Wshift-overflow-3_98:
  build:
    cflags: "-Wc++-compat  -O -Wshift-overflow -std=gnu90\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-overflow-3.c'
    sources:
      binary: Wshift-overflow-3.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("requires 35 bits to
          represent")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("requires 34 bits to
          represent")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("requires 63 bits to
          represent")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("requires 35 bits to
          represent")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("requires 34 bits to
          represent")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("requires 63 bits to
          represent")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("requires 68 bits to
          represent")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("requires 67 bits to
          represent")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("requires 66 bits to
          represent")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("requires 127 bits
          to represent")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("requires 68 bits to
          represent")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("requires 67 bits to
          represent")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("requires 66 bits to
          represent")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("requires 127 bits
          to represent")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("requires 65 bits to
          represent")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("requires 36 bits to
          represent")[^\n]*\n?)+'
test_Wshift-overflow-4_1052:
  build:
    cflags: "-O -std=c++03\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-overflow-4.c'
    sources:
      binary: Wshift-overflow-4.s
  group: GRPSERIAL
test_Wshift-overflow-4_1980:
  build:
    cflags: "-Wc++-compat  -O -std=gnu90\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-overflow-4.c'
    sources:
      binary: Wshift-overflow-4.s
  group: GRPSERIAL
test_Wshift-overflow-4_2544:
  build:
    cflags: "-O -std=c++03\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-overflow-4.c'
    sources:
      binary: Wshift-overflow-4.s
  group: GRPSERIAL
test_Wshift-overflow-4_488:
  build:
    cflags: "-Wc++-compat  -O -std=gnu90\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-overflow-4.c'
    sources:
      binary: Wshift-overflow-4.s
  group: GRPSERIAL
test_Wshift-overflow-4_99:
  build:
    cflags: "-Wc++-compat  -O -std=gnu90\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-overflow-4.c'
    sources:
      binary: Wshift-overflow-4.s
  group: GRPSERIAL
test_Wshift-overflow-5_100:
  build:
    cflags: "-Wc++-compat  -O -Wshift-overflow=2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-overflow-5.c'
    sources:
      binary: Wshift-overflow-5.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("requires 65 bits to
          represent")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
test_Wshift-overflow-5_1053:
  build:
    cflags: "-O -Wshift-overflow=2 -std=c++11\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-overflow-5.c'
    sources:
      binary: Wshift-overflow-5.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("requires 65 bits to
          represent")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
test_Wshift-overflow-5_1981:
  build:
    cflags: "-Wc++-compat  -O -Wshift-overflow=2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-overflow-5.c'
    sources:
      binary: Wshift-overflow-5.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("requires 65 bits to
          represent")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
test_Wshift-overflow-5_2545:
  build:
    cflags: "-O -Wshift-overflow=2 -std=c++11\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-overflow-5.c'
    sources:
      binary: Wshift-overflow-5.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("requires 65 bits to
          represent")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
test_Wshift-overflow-5_489:
  build:
    cflags: "-Wc++-compat  -O -Wshift-overflow=2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-overflow-5.c'
    sources:
      binary: Wshift-overflow-5.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("requires 65 bits to
          represent")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
test_Wshift-overflow-6_101:
  build:
    cflags: "-Wc++-compat  -Wshift-overflow=1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-overflow-6.c'
    sources:
      binary: Wshift-overflow-6.s
  group: GRPSERIAL
  validate:
    match:
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
test_Wshift-overflow-6_1054:
  build:
    cflags: "-Wshift-overflow=1 -std=c++11\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-overflow-6.c'
    sources:
      binary: Wshift-overflow-6.s
  group: GRPSERIAL
  validate:
    match:
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
test_Wshift-overflow-6_1982:
  build:
    cflags: "-Wc++-compat  -Wshift-overflow=1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-overflow-6.c'
    sources:
      binary: Wshift-overflow-6.s
  group: GRPSERIAL
  validate:
    match:
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
test_Wshift-overflow-6_2546:
  build:
    cflags: "-Wshift-overflow=1 -std=c++11\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-overflow-6.c'
    sources:
      binary: Wshift-overflow-6.s
  group: GRPSERIAL
  validate:
    match:
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
test_Wshift-overflow-6_490:
  build:
    cflags: "-Wc++-compat  -Wshift-overflow=1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-overflow-6.c'
    sources:
      binary: Wshift-overflow-6.s
  group: GRPSERIAL
  validate:
    match:
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
test_Wshift-overflow-7_102:
  build:
    cflags: "-Wc++-compat  -Wshift-overflow=2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-overflow-7.c'
    sources:
      binary: Wshift-overflow-7.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
test_Wshift-overflow-7_1055:
  build:
    cflags: "-Wshift-overflow=2 -std=c++11\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-overflow-7.c'
    sources:
      binary: Wshift-overflow-7.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
test_Wshift-overflow-7_1983:
  build:
    cflags: "-Wc++-compat  -Wshift-overflow=2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-overflow-7.c'
    sources:
      binary: Wshift-overflow-7.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
test_Wshift-overflow-7_2547:
  build:
    cflags: "-Wshift-overflow=2 -std=c++11\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-overflow-7.c'
    sources:
      binary: Wshift-overflow-7.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
test_Wshift-overflow-7_491:
  build:
    cflags: "-Wc++-compat  -Wshift-overflow=2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wshift-overflow-7.c'
    sources:
      binary: Wshift-overflow-7.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("requires 33 bits to
          represent")[^\n]*\n?)+'
test_Wsizeof-pointer-memaccess1_103:
  build:
    cflags: "-Wc++-compat  -Wall -Wno-sizeof-array-argument -Wno-c++-compat\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wsizeof-pointer-memaccess1.c'
    sources:
      binary: Wsizeof-pointer-memaccess1.s
  group: GRPSERIAL
  validate:
    match:
      L122:
        expect: true
        expr: '(^|\n)([^\n]+(:122:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L123:
        expect: true
        expr: '(^|\n)([^\n]+(:123:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L126:
        expect: true
        expr: '(^|\n)([^\n]+(:126:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+(:155:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+(:83:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
test_Wsizeof-pointer-memaccess1_1056:
  build:
    cflags: "-std=gnu++98 -Wall -Wno-sizeof-array-argument\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wsizeof-pointer-memaccess1.c'
    sources:
      binary: Wsizeof-pointer-memaccess1.s
  group: GRPSERIAL
  validate:
    match:
      L122:
        expect: true
        expr: '(^|\n)([^\n]+(:122:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L123:
        expect: true
        expr: '(^|\n)([^\n]+(:123:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L126:
        expect: true
        expr: '(^|\n)([^\n]+(:126:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+(:155:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+(:83:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
test_Wsizeof-pointer-memaccess1_1057:
  build:
    cflags: "-std=gnu++11 -Wall -Wno-sizeof-array-argument\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wsizeof-pointer-memaccess1.c'
    sources:
      binary: Wsizeof-pointer-memaccess1.s
  group: GRPSERIAL
  validate:
    match:
      L122:
        expect: true
        expr: '(^|\n)([^\n]+(:122:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L123:
        expect: true
        expr: '(^|\n)([^\n]+(:123:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L126:
        expect: true
        expr: '(^|\n)([^\n]+(:126:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+(:155:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+(:83:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
test_Wsizeof-pointer-memaccess1_1058:
  build:
    cflags: "-std=gnu++14 -Wall -Wno-sizeof-array-argument\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wsizeof-pointer-memaccess1.c'
    sources:
      binary: Wsizeof-pointer-memaccess1.s
  group: GRPSERIAL
  validate:
    match:
      L122:
        expect: true
        expr: '(^|\n)([^\n]+(:122:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L123:
        expect: true
        expr: '(^|\n)([^\n]+(:123:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L126:
        expect: true
        expr: '(^|\n)([^\n]+(:126:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+(:155:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+(:83:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
test_Wsizeof-pointer-memaccess1_1984:
  build:
    cflags: "-Wc++-compat  -Wall -Wno-sizeof-array-argument -Wno-c++-compat\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wsizeof-pointer-memaccess1.c'
    sources:
      binary: Wsizeof-pointer-memaccess1.s
  group: GRPSERIAL
  validate:
    match:
      L122:
        expect: true
        expr: '(^|\n)([^\n]+(:122:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L123:
        expect: true
        expr: '(^|\n)([^\n]+(:123:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L126:
        expect: true
        expr: '(^|\n)([^\n]+(:126:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+(:155:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+(:83:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
test_Wsizeof-pointer-memaccess1_2548:
  build:
    cflags: "-std=gnu++98 -Wall -Wno-sizeof-array-argument\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wsizeof-pointer-memaccess1.c'
    sources:
      binary: Wsizeof-pointer-memaccess1.s
  group: GRPSERIAL
  validate:
    match:
      L122:
        expect: true
        expr: '(^|\n)([^\n]+(:122:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L123:
        expect: true
        expr: '(^|\n)([^\n]+(:123:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L126:
        expect: true
        expr: '(^|\n)([^\n]+(:126:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+(:155:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+(:83:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
test_Wsizeof-pointer-memaccess1_2549:
  build:
    cflags: "-std=gnu++11 -Wall -Wno-sizeof-array-argument\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wsizeof-pointer-memaccess1.c'
    sources:
      binary: Wsizeof-pointer-memaccess1.s
  group: GRPSERIAL
  validate:
    match:
      L122:
        expect: true
        expr: '(^|\n)([^\n]+(:122:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L123:
        expect: true
        expr: '(^|\n)([^\n]+(:123:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L126:
        expect: true
        expr: '(^|\n)([^\n]+(:126:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+(:155:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+(:83:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
test_Wsizeof-pointer-memaccess1_2550:
  build:
    cflags: "-std=gnu++14 -Wall -Wno-sizeof-array-argument\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wsizeof-pointer-memaccess1.c'
    sources:
      binary: Wsizeof-pointer-memaccess1.s
  group: GRPSERIAL
  validate:
    match:
      L122:
        expect: true
        expr: '(^|\n)([^\n]+(:122:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L123:
        expect: true
        expr: '(^|\n)([^\n]+(:123:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L126:
        expect: true
        expr: '(^|\n)([^\n]+(:126:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+(:155:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+(:83:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
test_Wsizeof-pointer-memaccess1_492:
  build:
    cflags: "-Wc++-compat  -Wall -Wno-sizeof-array-argument -Wno-c++-compat\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wsizeof-pointer-memaccess1.c'
    sources:
      binary: Wsizeof-pointer-memaccess1.s
  group: GRPSERIAL
  validate:
    match:
      L122:
        expect: true
        expr: '(^|\n)([^\n]+(:122:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L123:
        expect: true
        expr: '(^|\n)([^\n]+(:123:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L126:
        expect: true
        expr: '(^|\n)([^\n]+(:126:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+(:155:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+(:83:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
test_Wsizeof-pointer-memaccess2_104:
  build:
    cflags: "-Wc++-compat  -Wall -O2 -Wno-sizeof-array-argument -Wno-c++-compat\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wsizeof-pointer-memaccess2.c'
    sources:
      binary: Wsizeof-pointer-memaccess2.s
  group: GRPSERIAL
  validate:
    match:
      L182:
        expect: true
        expr: '(^|\n)([^\n]+(:182:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+(:183:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+(:184:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L185:
        expect: true
        expr: '(^|\n)([^\n]+(:185:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+(:186:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L188:
        expect: true
        expr: '(^|\n)([^\n]+(:188:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L189:
        expect: true
        expr: '(^|\n)([^\n]+(:189:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+(:190:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L192:
        expect: true
        expr: '(^|\n)([^\n]+(:192:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+(:193:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L194:
        expect: true
        expr: '(^|\n)([^\n]+(:194:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L195:
        expect: true
        expr: '(^|\n)([^\n]+(:195:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+(:196:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+(:197:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L198:
        expect: true
        expr: '(^|\n)([^\n]+(:198:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L199:
        expect: true
        expr: '(^|\n)([^\n]+(:199:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L200:
        expect: true
        expr: '(^|\n)([^\n]+(:200:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L202:
        expect: true
        expr: '(^|\n)([^\n]+(:202:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L203:
        expect: true
        expr: '(^|\n)([^\n]+(:203:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L204:
        expect: true
        expr: '(^|\n)([^\n]+(:204:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L205:
        expect: true
        expr: '(^|\n)([^\n]+(:205:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L206:
        expect: true
        expr: '(^|\n)([^\n]+(:206:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L207:
        expect: true
        expr: '(^|\n)([^\n]+(:207:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L208:
        expect: true
        expr: '(^|\n)([^\n]+(:208:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L209:
        expect: true
        expr: '(^|\n)([^\n]+(:209:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L210:
        expect: true
        expr: '(^|\n)([^\n]+(:210:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+(:212:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L213:
        expect: true
        expr: '(^|\n)([^\n]+(:213:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+(:214:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+(:215:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L216:
        expect: true
        expr: '(^|\n)([^\n]+(:216:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L217:
        expect: true
        expr: '(^|\n)([^\n]+(:217:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L218:
        expect: true
        expr: '(^|\n)([^\n]+(:218:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L219:
        expect: true
        expr: '(^|\n)([^\n]+(:219:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L220:
        expect: true
        expr: '(^|\n)([^\n]+(:220:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L222:
        expect: true
        expr: '(^|\n)([^\n]+(:222:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L223:
        expect: true
        expr: '(^|\n)([^\n]+(:223:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L224:
        expect: true
        expr: '(^|\n)([^\n]+(:224:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L225:
        expect: true
        expr: '(^|\n)([^\n]+(:225:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L226:
        expect: true
        expr: '(^|\n)([^\n]+(:226:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+(:227:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L228:
        expect: true
        expr: '(^|\n)([^\n]+(:228:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L229:
        expect: true
        expr: '(^|\n)([^\n]+(:229:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L230:
        expect: true
        expr: '(^|\n)([^\n]+(:230:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L334:
        expect: true
        expr: '(^|\n)([^\n]+(:334:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L335:
        expect: true
        expr: '(^|\n)([^\n]+(:335:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L336:
        expect: true
        expr: '(^|\n)([^\n]+(:336:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L337:
        expect: true
        expr: '(^|\n)([^\n]+(:337:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L338:
        expect: true
        expr: '(^|\n)([^\n]+(:338:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L340:
        expect: true
        expr: '(^|\n)([^\n]+(:340:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L341:
        expect: true
        expr: '(^|\n)([^\n]+(:341:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L342:
        expect: true
        expr: '(^|\n)([^\n]+(:342:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L343:
        expect: true
        expr: '(^|\n)([^\n]+(:343:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L344:
        expect: true
        expr: '(^|\n)([^\n]+(:344:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L346:
        expect: true
        expr: '(^|\n)([^\n]+(:346:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L347:
        expect: true
        expr: '(^|\n)([^\n]+(:347:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L348:
        expect: true
        expr: '(^|\n)([^\n]+(:348:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L349:
        expect: true
        expr: '(^|\n)([^\n]+(:349:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L350:
        expect: true
        expr: '(^|\n)([^\n]+(:350:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L352:
        expect: true
        expr: '(^|\n)([^\n]+(:352:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L353:
        expect: true
        expr: '(^|\n)([^\n]+(:353:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L354:
        expect: true
        expr: '(^|\n)([^\n]+(:354:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L355:
        expect: true
        expr: '(^|\n)([^\n]+(:355:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L356:
        expect: true
        expr: '(^|\n)([^\n]+(:356:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L358:
        expect: true
        expr: '(^|\n)([^\n]+(:358:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L359:
        expect: true
        expr: '(^|\n)([^\n]+(:359:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L360:
        expect: true
        expr: '(^|\n)([^\n]+(:360:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L361:
        expect: true
        expr: '(^|\n)([^\n]+(:361:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L362:
        expect: true
        expr: '(^|\n)([^\n]+(:362:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L468:
        expect: true
        expr: '(^|\n)([^\n]+(:468:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L469:
        expect: true
        expr: '(^|\n)([^\n]+(:469:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L470:
        expect: true
        expr: '(^|\n)([^\n]+(:470:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L472:
        expect: true
        expr: '(^|\n)([^\n]+(:472:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L473:
        expect: true
        expr: '(^|\n)([^\n]+(:473:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L474:
        expect: true
        expr: '(^|\n)([^\n]+(:474:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+(:69:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+(:70:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+(:74:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+(:75:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+(:77:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
test_Wsizeof-pointer-memaccess2_1059:
  build:
    cflags: "-std=gnu++98 -Wall -O2 -Wno-sizeof-array-argument\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wsizeof-pointer-memaccess2.c'
    sources:
      binary: Wsizeof-pointer-memaccess2.s
  group: GRPSERIAL
  validate:
    match:
      L182:
        expect: true
        expr: '(^|\n)([^\n]+(:182:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+(:183:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+(:184:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L185:
        expect: true
        expr: '(^|\n)([^\n]+(:185:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+(:186:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L188:
        expect: true
        expr: '(^|\n)([^\n]+(:188:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L189:
        expect: true
        expr: '(^|\n)([^\n]+(:189:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+(:190:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L192:
        expect: true
        expr: '(^|\n)([^\n]+(:192:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+(:193:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L194:
        expect: true
        expr: '(^|\n)([^\n]+(:194:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L195:
        expect: true
        expr: '(^|\n)([^\n]+(:195:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+(:196:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+(:197:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L198:
        expect: true
        expr: '(^|\n)([^\n]+(:198:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L199:
        expect: true
        expr: '(^|\n)([^\n]+(:199:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L200:
        expect: true
        expr: '(^|\n)([^\n]+(:200:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L202:
        expect: true
        expr: '(^|\n)([^\n]+(:202:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L203:
        expect: true
        expr: '(^|\n)([^\n]+(:203:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L204:
        expect: true
        expr: '(^|\n)([^\n]+(:204:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L205:
        expect: true
        expr: '(^|\n)([^\n]+(:205:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L206:
        expect: true
        expr: '(^|\n)([^\n]+(:206:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L207:
        expect: true
        expr: '(^|\n)([^\n]+(:207:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L208:
        expect: true
        expr: '(^|\n)([^\n]+(:208:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L209:
        expect: true
        expr: '(^|\n)([^\n]+(:209:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L210:
        expect: true
        expr: '(^|\n)([^\n]+(:210:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+(:212:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L213:
        expect: true
        expr: '(^|\n)([^\n]+(:213:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+(:214:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+(:215:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L216:
        expect: true
        expr: '(^|\n)([^\n]+(:216:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L217:
        expect: true
        expr: '(^|\n)([^\n]+(:217:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L218:
        expect: true
        expr: '(^|\n)([^\n]+(:218:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L219:
        expect: true
        expr: '(^|\n)([^\n]+(:219:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L220:
        expect: true
        expr: '(^|\n)([^\n]+(:220:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L222:
        expect: true
        expr: '(^|\n)([^\n]+(:222:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L223:
        expect: true
        expr: '(^|\n)([^\n]+(:223:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L224:
        expect: true
        expr: '(^|\n)([^\n]+(:224:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L225:
        expect: true
        expr: '(^|\n)([^\n]+(:225:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L226:
        expect: true
        expr: '(^|\n)([^\n]+(:226:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+(:227:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L228:
        expect: true
        expr: '(^|\n)([^\n]+(:228:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L229:
        expect: true
        expr: '(^|\n)([^\n]+(:229:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L230:
        expect: true
        expr: '(^|\n)([^\n]+(:230:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L334:
        expect: true
        expr: '(^|\n)([^\n]+(:334:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L335:
        expect: true
        expr: '(^|\n)([^\n]+(:335:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L336:
        expect: true
        expr: '(^|\n)([^\n]+(:336:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L337:
        expect: true
        expr: '(^|\n)([^\n]+(:337:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L338:
        expect: true
        expr: '(^|\n)([^\n]+(:338:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L340:
        expect: true
        expr: '(^|\n)([^\n]+(:340:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L341:
        expect: true
        expr: '(^|\n)([^\n]+(:341:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L342:
        expect: true
        expr: '(^|\n)([^\n]+(:342:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L343:
        expect: true
        expr: '(^|\n)([^\n]+(:343:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L344:
        expect: true
        expr: '(^|\n)([^\n]+(:344:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L346:
        expect: true
        expr: '(^|\n)([^\n]+(:346:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L347:
        expect: true
        expr: '(^|\n)([^\n]+(:347:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L348:
        expect: true
        expr: '(^|\n)([^\n]+(:348:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L349:
        expect: true
        expr: '(^|\n)([^\n]+(:349:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L350:
        expect: true
        expr: '(^|\n)([^\n]+(:350:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L352:
        expect: true
        expr: '(^|\n)([^\n]+(:352:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L353:
        expect: true
        expr: '(^|\n)([^\n]+(:353:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L354:
        expect: true
        expr: '(^|\n)([^\n]+(:354:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L355:
        expect: true
        expr: '(^|\n)([^\n]+(:355:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L356:
        expect: true
        expr: '(^|\n)([^\n]+(:356:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L358:
        expect: true
        expr: '(^|\n)([^\n]+(:358:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L359:
        expect: true
        expr: '(^|\n)([^\n]+(:359:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L360:
        expect: true
        expr: '(^|\n)([^\n]+(:360:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L361:
        expect: true
        expr: '(^|\n)([^\n]+(:361:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L362:
        expect: true
        expr: '(^|\n)([^\n]+(:362:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L468:
        expect: true
        expr: '(^|\n)([^\n]+(:468:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L469:
        expect: true
        expr: '(^|\n)([^\n]+(:469:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L470:
        expect: true
        expr: '(^|\n)([^\n]+(:470:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L472:
        expect: true
        expr: '(^|\n)([^\n]+(:472:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L473:
        expect: true
        expr: '(^|\n)([^\n]+(:473:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L474:
        expect: true
        expr: '(^|\n)([^\n]+(:474:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+(:69:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+(:70:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+(:74:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+(:75:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+(:77:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
test_Wsizeof-pointer-memaccess2_1060:
  build:
    cflags: "-std=gnu++11 -Wall -O2 -Wno-sizeof-array-argument\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wsizeof-pointer-memaccess2.c'
    sources:
      binary: Wsizeof-pointer-memaccess2.s
  group: GRPSERIAL
  validate:
    match:
      L182:
        expect: true
        expr: '(^|\n)([^\n]+(:182:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+(:183:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+(:184:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L185:
        expect: true
        expr: '(^|\n)([^\n]+(:185:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+(:186:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L188:
        expect: true
        expr: '(^|\n)([^\n]+(:188:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L189:
        expect: true
        expr: '(^|\n)([^\n]+(:189:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+(:190:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L192:
        expect: true
        expr: '(^|\n)([^\n]+(:192:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+(:193:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L194:
        expect: true
        expr: '(^|\n)([^\n]+(:194:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L195:
        expect: true
        expr: '(^|\n)([^\n]+(:195:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+(:196:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+(:197:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L198:
        expect: true
        expr: '(^|\n)([^\n]+(:198:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L199:
        expect: true
        expr: '(^|\n)([^\n]+(:199:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L200:
        expect: true
        expr: '(^|\n)([^\n]+(:200:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L202:
        expect: true
        expr: '(^|\n)([^\n]+(:202:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L203:
        expect: true
        expr: '(^|\n)([^\n]+(:203:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L204:
        expect: true
        expr: '(^|\n)([^\n]+(:204:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L205:
        expect: true
        expr: '(^|\n)([^\n]+(:205:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L206:
        expect: true
        expr: '(^|\n)([^\n]+(:206:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L207:
        expect: true
        expr: '(^|\n)([^\n]+(:207:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L208:
        expect: true
        expr: '(^|\n)([^\n]+(:208:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L209:
        expect: true
        expr: '(^|\n)([^\n]+(:209:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L210:
        expect: true
        expr: '(^|\n)([^\n]+(:210:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+(:212:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L213:
        expect: true
        expr: '(^|\n)([^\n]+(:213:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+(:214:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+(:215:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L216:
        expect: true
        expr: '(^|\n)([^\n]+(:216:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L217:
        expect: true
        expr: '(^|\n)([^\n]+(:217:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L218:
        expect: true
        expr: '(^|\n)([^\n]+(:218:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L219:
        expect: true
        expr: '(^|\n)([^\n]+(:219:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L220:
        expect: true
        expr: '(^|\n)([^\n]+(:220:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L222:
        expect: true
        expr: '(^|\n)([^\n]+(:222:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L223:
        expect: true
        expr: '(^|\n)([^\n]+(:223:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L224:
        expect: true
        expr: '(^|\n)([^\n]+(:224:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L225:
        expect: true
        expr: '(^|\n)([^\n]+(:225:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L226:
        expect: true
        expr: '(^|\n)([^\n]+(:226:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+(:227:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L228:
        expect: true
        expr: '(^|\n)([^\n]+(:228:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L229:
        expect: true
        expr: '(^|\n)([^\n]+(:229:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L230:
        expect: true
        expr: '(^|\n)([^\n]+(:230:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L334:
        expect: true
        expr: '(^|\n)([^\n]+(:334:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L335:
        expect: true
        expr: '(^|\n)([^\n]+(:335:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L336:
        expect: true
        expr: '(^|\n)([^\n]+(:336:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L337:
        expect: true
        expr: '(^|\n)([^\n]+(:337:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L338:
        expect: true
        expr: '(^|\n)([^\n]+(:338:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L340:
        expect: true
        expr: '(^|\n)([^\n]+(:340:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L341:
        expect: true
        expr: '(^|\n)([^\n]+(:341:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L342:
        expect: true
        expr: '(^|\n)([^\n]+(:342:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L343:
        expect: true
        expr: '(^|\n)([^\n]+(:343:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L344:
        expect: true
        expr: '(^|\n)([^\n]+(:344:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L346:
        expect: true
        expr: '(^|\n)([^\n]+(:346:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L347:
        expect: true
        expr: '(^|\n)([^\n]+(:347:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L348:
        expect: true
        expr: '(^|\n)([^\n]+(:348:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L349:
        expect: true
        expr: '(^|\n)([^\n]+(:349:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L350:
        expect: true
        expr: '(^|\n)([^\n]+(:350:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L352:
        expect: true
        expr: '(^|\n)([^\n]+(:352:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L353:
        expect: true
        expr: '(^|\n)([^\n]+(:353:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L354:
        expect: true
        expr: '(^|\n)([^\n]+(:354:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L355:
        expect: true
        expr: '(^|\n)([^\n]+(:355:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L356:
        expect: true
        expr: '(^|\n)([^\n]+(:356:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L358:
        expect: true
        expr: '(^|\n)([^\n]+(:358:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L359:
        expect: true
        expr: '(^|\n)([^\n]+(:359:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L360:
        expect: true
        expr: '(^|\n)([^\n]+(:360:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L361:
        expect: true
        expr: '(^|\n)([^\n]+(:361:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L362:
        expect: true
        expr: '(^|\n)([^\n]+(:362:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L468:
        expect: true
        expr: '(^|\n)([^\n]+(:468:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L469:
        expect: true
        expr: '(^|\n)([^\n]+(:469:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L470:
        expect: true
        expr: '(^|\n)([^\n]+(:470:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L472:
        expect: true
        expr: '(^|\n)([^\n]+(:472:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L473:
        expect: true
        expr: '(^|\n)([^\n]+(:473:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L474:
        expect: true
        expr: '(^|\n)([^\n]+(:474:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+(:69:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+(:70:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+(:74:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+(:75:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+(:77:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
test_Wsizeof-pointer-memaccess2_1061:
  build:
    cflags: "-std=gnu++14 -Wall -O2 -Wno-sizeof-array-argument\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wsizeof-pointer-memaccess2.c'
    sources:
      binary: Wsizeof-pointer-memaccess2.s
  group: GRPSERIAL
  validate:
    match:
      L182:
        expect: true
        expr: '(^|\n)([^\n]+(:182:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+(:183:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+(:184:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L185:
        expect: true
        expr: '(^|\n)([^\n]+(:185:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+(:186:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L188:
        expect: true
        expr: '(^|\n)([^\n]+(:188:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L189:
        expect: true
        expr: '(^|\n)([^\n]+(:189:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+(:190:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L192:
        expect: true
        expr: '(^|\n)([^\n]+(:192:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+(:193:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L194:
        expect: true
        expr: '(^|\n)([^\n]+(:194:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L195:
        expect: true
        expr: '(^|\n)([^\n]+(:195:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+(:196:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+(:197:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L198:
        expect: true
        expr: '(^|\n)([^\n]+(:198:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L199:
        expect: true
        expr: '(^|\n)([^\n]+(:199:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L200:
        expect: true
        expr: '(^|\n)([^\n]+(:200:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L202:
        expect: true
        expr: '(^|\n)([^\n]+(:202:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L203:
        expect: true
        expr: '(^|\n)([^\n]+(:203:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L204:
        expect: true
        expr: '(^|\n)([^\n]+(:204:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L205:
        expect: true
        expr: '(^|\n)([^\n]+(:205:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L206:
        expect: true
        expr: '(^|\n)([^\n]+(:206:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L207:
        expect: true
        expr: '(^|\n)([^\n]+(:207:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L208:
        expect: true
        expr: '(^|\n)([^\n]+(:208:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L209:
        expect: true
        expr: '(^|\n)([^\n]+(:209:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L210:
        expect: true
        expr: '(^|\n)([^\n]+(:210:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+(:212:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L213:
        expect: true
        expr: '(^|\n)([^\n]+(:213:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+(:214:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+(:215:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L216:
        expect: true
        expr: '(^|\n)([^\n]+(:216:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L217:
        expect: true
        expr: '(^|\n)([^\n]+(:217:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L218:
        expect: true
        expr: '(^|\n)([^\n]+(:218:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L219:
        expect: true
        expr: '(^|\n)([^\n]+(:219:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L220:
        expect: true
        expr: '(^|\n)([^\n]+(:220:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L222:
        expect: true
        expr: '(^|\n)([^\n]+(:222:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L223:
        expect: true
        expr: '(^|\n)([^\n]+(:223:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L224:
        expect: true
        expr: '(^|\n)([^\n]+(:224:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L225:
        expect: true
        expr: '(^|\n)([^\n]+(:225:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L226:
        expect: true
        expr: '(^|\n)([^\n]+(:226:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+(:227:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L228:
        expect: true
        expr: '(^|\n)([^\n]+(:228:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L229:
        expect: true
        expr: '(^|\n)([^\n]+(:229:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L230:
        expect: true
        expr: '(^|\n)([^\n]+(:230:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L334:
        expect: true
        expr: '(^|\n)([^\n]+(:334:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L335:
        expect: true
        expr: '(^|\n)([^\n]+(:335:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L336:
        expect: true
        expr: '(^|\n)([^\n]+(:336:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L337:
        expect: true
        expr: '(^|\n)([^\n]+(:337:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L338:
        expect: true
        expr: '(^|\n)([^\n]+(:338:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L340:
        expect: true
        expr: '(^|\n)([^\n]+(:340:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L341:
        expect: true
        expr: '(^|\n)([^\n]+(:341:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L342:
        expect: true
        expr: '(^|\n)([^\n]+(:342:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L343:
        expect: true
        expr: '(^|\n)([^\n]+(:343:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L344:
        expect: true
        expr: '(^|\n)([^\n]+(:344:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L346:
        expect: true
        expr: '(^|\n)([^\n]+(:346:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L347:
        expect: true
        expr: '(^|\n)([^\n]+(:347:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L348:
        expect: true
        expr: '(^|\n)([^\n]+(:348:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L349:
        expect: true
        expr: '(^|\n)([^\n]+(:349:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L350:
        expect: true
        expr: '(^|\n)([^\n]+(:350:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L352:
        expect: true
        expr: '(^|\n)([^\n]+(:352:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L353:
        expect: true
        expr: '(^|\n)([^\n]+(:353:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L354:
        expect: true
        expr: '(^|\n)([^\n]+(:354:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L355:
        expect: true
        expr: '(^|\n)([^\n]+(:355:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L356:
        expect: true
        expr: '(^|\n)([^\n]+(:356:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L358:
        expect: true
        expr: '(^|\n)([^\n]+(:358:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L359:
        expect: true
        expr: '(^|\n)([^\n]+(:359:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L360:
        expect: true
        expr: '(^|\n)([^\n]+(:360:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L361:
        expect: true
        expr: '(^|\n)([^\n]+(:361:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L362:
        expect: true
        expr: '(^|\n)([^\n]+(:362:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L468:
        expect: true
        expr: '(^|\n)([^\n]+(:468:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L469:
        expect: true
        expr: '(^|\n)([^\n]+(:469:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L470:
        expect: true
        expr: '(^|\n)([^\n]+(:470:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L472:
        expect: true
        expr: '(^|\n)([^\n]+(:472:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L473:
        expect: true
        expr: '(^|\n)([^\n]+(:473:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L474:
        expect: true
        expr: '(^|\n)([^\n]+(:474:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+(:69:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+(:70:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+(:74:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+(:75:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+(:77:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
test_Wsizeof-pointer-memaccess2_1985:
  build:
    cflags: "-Wc++-compat  -Wall -O2 -Wno-sizeof-array-argument -Wno-c++-compat\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wsizeof-pointer-memaccess2.c'
    sources:
      binary: Wsizeof-pointer-memaccess2.s
  group: GRPSERIAL
  validate:
    match:
      L182:
        expect: true
        expr: '(^|\n)([^\n]+(:182:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+(:183:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+(:184:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L185:
        expect: true
        expr: '(^|\n)([^\n]+(:185:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+(:186:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L188:
        expect: true
        expr: '(^|\n)([^\n]+(:188:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L189:
        expect: true
        expr: '(^|\n)([^\n]+(:189:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+(:190:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L192:
        expect: true
        expr: '(^|\n)([^\n]+(:192:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+(:193:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L194:
        expect: true
        expr: '(^|\n)([^\n]+(:194:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L195:
        expect: true
        expr: '(^|\n)([^\n]+(:195:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+(:196:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+(:197:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L198:
        expect: true
        expr: '(^|\n)([^\n]+(:198:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L199:
        expect: true
        expr: '(^|\n)([^\n]+(:199:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L200:
        expect: true
        expr: '(^|\n)([^\n]+(:200:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L202:
        expect: true
        expr: '(^|\n)([^\n]+(:202:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L203:
        expect: true
        expr: '(^|\n)([^\n]+(:203:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L204:
        expect: true
        expr: '(^|\n)([^\n]+(:204:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L205:
        expect: true
        expr: '(^|\n)([^\n]+(:205:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L206:
        expect: true
        expr: '(^|\n)([^\n]+(:206:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L207:
        expect: true
        expr: '(^|\n)([^\n]+(:207:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L208:
        expect: true
        expr: '(^|\n)([^\n]+(:208:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L209:
        expect: true
        expr: '(^|\n)([^\n]+(:209:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L210:
        expect: true
        expr: '(^|\n)([^\n]+(:210:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+(:212:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L213:
        expect: true
        expr: '(^|\n)([^\n]+(:213:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+(:214:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+(:215:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L216:
        expect: true
        expr: '(^|\n)([^\n]+(:216:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L217:
        expect: true
        expr: '(^|\n)([^\n]+(:217:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L218:
        expect: true
        expr: '(^|\n)([^\n]+(:218:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L219:
        expect: true
        expr: '(^|\n)([^\n]+(:219:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L220:
        expect: true
        expr: '(^|\n)([^\n]+(:220:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L222:
        expect: true
        expr: '(^|\n)([^\n]+(:222:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L223:
        expect: true
        expr: '(^|\n)([^\n]+(:223:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L224:
        expect: true
        expr: '(^|\n)([^\n]+(:224:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L225:
        expect: true
        expr: '(^|\n)([^\n]+(:225:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L226:
        expect: true
        expr: '(^|\n)([^\n]+(:226:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+(:227:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L228:
        expect: true
        expr: '(^|\n)([^\n]+(:228:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L229:
        expect: true
        expr: '(^|\n)([^\n]+(:229:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L230:
        expect: true
        expr: '(^|\n)([^\n]+(:230:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L334:
        expect: true
        expr: '(^|\n)([^\n]+(:334:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L335:
        expect: true
        expr: '(^|\n)([^\n]+(:335:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L336:
        expect: true
        expr: '(^|\n)([^\n]+(:336:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L337:
        expect: true
        expr: '(^|\n)([^\n]+(:337:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L338:
        expect: true
        expr: '(^|\n)([^\n]+(:338:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L340:
        expect: true
        expr: '(^|\n)([^\n]+(:340:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L341:
        expect: true
        expr: '(^|\n)([^\n]+(:341:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L342:
        expect: true
        expr: '(^|\n)([^\n]+(:342:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L343:
        expect: true
        expr: '(^|\n)([^\n]+(:343:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L344:
        expect: true
        expr: '(^|\n)([^\n]+(:344:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L346:
        expect: true
        expr: '(^|\n)([^\n]+(:346:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L347:
        expect: true
        expr: '(^|\n)([^\n]+(:347:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L348:
        expect: true
        expr: '(^|\n)([^\n]+(:348:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L349:
        expect: true
        expr: '(^|\n)([^\n]+(:349:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L350:
        expect: true
        expr: '(^|\n)([^\n]+(:350:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L352:
        expect: true
        expr: '(^|\n)([^\n]+(:352:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L353:
        expect: true
        expr: '(^|\n)([^\n]+(:353:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L354:
        expect: true
        expr: '(^|\n)([^\n]+(:354:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L355:
        expect: true
        expr: '(^|\n)([^\n]+(:355:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L356:
        expect: true
        expr: '(^|\n)([^\n]+(:356:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L358:
        expect: true
        expr: '(^|\n)([^\n]+(:358:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L359:
        expect: true
        expr: '(^|\n)([^\n]+(:359:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L360:
        expect: true
        expr: '(^|\n)([^\n]+(:360:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L361:
        expect: true
        expr: '(^|\n)([^\n]+(:361:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L362:
        expect: true
        expr: '(^|\n)([^\n]+(:362:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L468:
        expect: true
        expr: '(^|\n)([^\n]+(:468:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L469:
        expect: true
        expr: '(^|\n)([^\n]+(:469:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L470:
        expect: true
        expr: '(^|\n)([^\n]+(:470:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L472:
        expect: true
        expr: '(^|\n)([^\n]+(:472:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L473:
        expect: true
        expr: '(^|\n)([^\n]+(:473:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L474:
        expect: true
        expr: '(^|\n)([^\n]+(:474:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+(:69:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+(:70:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+(:74:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+(:75:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+(:77:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
test_Wsizeof-pointer-memaccess2_2551:
  build:
    cflags: "-std=gnu++98 -Wall -O2 -Wno-sizeof-array-argument\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wsizeof-pointer-memaccess2.c'
    sources:
      binary: Wsizeof-pointer-memaccess2.s
  group: GRPSERIAL
  validate:
    match:
      L182:
        expect: true
        expr: '(^|\n)([^\n]+(:182:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+(:183:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+(:184:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L185:
        expect: true
        expr: '(^|\n)([^\n]+(:185:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+(:186:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L188:
        expect: true
        expr: '(^|\n)([^\n]+(:188:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L189:
        expect: true
        expr: '(^|\n)([^\n]+(:189:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+(:190:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L192:
        expect: true
        expr: '(^|\n)([^\n]+(:192:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+(:193:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L194:
        expect: true
        expr: '(^|\n)([^\n]+(:194:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L195:
        expect: true
        expr: '(^|\n)([^\n]+(:195:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+(:196:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+(:197:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L198:
        expect: true
        expr: '(^|\n)([^\n]+(:198:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L199:
        expect: true
        expr: '(^|\n)([^\n]+(:199:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L200:
        expect: true
        expr: '(^|\n)([^\n]+(:200:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L202:
        expect: true
        expr: '(^|\n)([^\n]+(:202:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L203:
        expect: true
        expr: '(^|\n)([^\n]+(:203:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L204:
        expect: true
        expr: '(^|\n)([^\n]+(:204:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L205:
        expect: true
        expr: '(^|\n)([^\n]+(:205:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L206:
        expect: true
        expr: '(^|\n)([^\n]+(:206:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L207:
        expect: true
        expr: '(^|\n)([^\n]+(:207:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L208:
        expect: true
        expr: '(^|\n)([^\n]+(:208:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L209:
        expect: true
        expr: '(^|\n)([^\n]+(:209:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L210:
        expect: true
        expr: '(^|\n)([^\n]+(:210:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+(:212:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L213:
        expect: true
        expr: '(^|\n)([^\n]+(:213:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+(:214:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+(:215:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L216:
        expect: true
        expr: '(^|\n)([^\n]+(:216:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L217:
        expect: true
        expr: '(^|\n)([^\n]+(:217:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L218:
        expect: true
        expr: '(^|\n)([^\n]+(:218:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L219:
        expect: true
        expr: '(^|\n)([^\n]+(:219:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L220:
        expect: true
        expr: '(^|\n)([^\n]+(:220:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L222:
        expect: true
        expr: '(^|\n)([^\n]+(:222:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L223:
        expect: true
        expr: '(^|\n)([^\n]+(:223:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L224:
        expect: true
        expr: '(^|\n)([^\n]+(:224:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L225:
        expect: true
        expr: '(^|\n)([^\n]+(:225:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L226:
        expect: true
        expr: '(^|\n)([^\n]+(:226:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+(:227:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L228:
        expect: true
        expr: '(^|\n)([^\n]+(:228:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L229:
        expect: true
        expr: '(^|\n)([^\n]+(:229:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L230:
        expect: true
        expr: '(^|\n)([^\n]+(:230:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L334:
        expect: true
        expr: '(^|\n)([^\n]+(:334:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L335:
        expect: true
        expr: '(^|\n)([^\n]+(:335:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L336:
        expect: true
        expr: '(^|\n)([^\n]+(:336:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L337:
        expect: true
        expr: '(^|\n)([^\n]+(:337:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L338:
        expect: true
        expr: '(^|\n)([^\n]+(:338:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L340:
        expect: true
        expr: '(^|\n)([^\n]+(:340:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L341:
        expect: true
        expr: '(^|\n)([^\n]+(:341:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L342:
        expect: true
        expr: '(^|\n)([^\n]+(:342:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L343:
        expect: true
        expr: '(^|\n)([^\n]+(:343:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L344:
        expect: true
        expr: '(^|\n)([^\n]+(:344:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L346:
        expect: true
        expr: '(^|\n)([^\n]+(:346:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L347:
        expect: true
        expr: '(^|\n)([^\n]+(:347:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L348:
        expect: true
        expr: '(^|\n)([^\n]+(:348:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L349:
        expect: true
        expr: '(^|\n)([^\n]+(:349:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L350:
        expect: true
        expr: '(^|\n)([^\n]+(:350:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L352:
        expect: true
        expr: '(^|\n)([^\n]+(:352:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L353:
        expect: true
        expr: '(^|\n)([^\n]+(:353:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L354:
        expect: true
        expr: '(^|\n)([^\n]+(:354:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L355:
        expect: true
        expr: '(^|\n)([^\n]+(:355:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L356:
        expect: true
        expr: '(^|\n)([^\n]+(:356:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L358:
        expect: true
        expr: '(^|\n)([^\n]+(:358:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L359:
        expect: true
        expr: '(^|\n)([^\n]+(:359:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L360:
        expect: true
        expr: '(^|\n)([^\n]+(:360:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L361:
        expect: true
        expr: '(^|\n)([^\n]+(:361:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L362:
        expect: true
        expr: '(^|\n)([^\n]+(:362:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L468:
        expect: true
        expr: '(^|\n)([^\n]+(:468:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L469:
        expect: true
        expr: '(^|\n)([^\n]+(:469:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L470:
        expect: true
        expr: '(^|\n)([^\n]+(:470:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L472:
        expect: true
        expr: '(^|\n)([^\n]+(:472:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L473:
        expect: true
        expr: '(^|\n)([^\n]+(:473:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L474:
        expect: true
        expr: '(^|\n)([^\n]+(:474:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+(:69:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+(:70:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+(:74:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+(:75:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+(:77:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
test_Wsizeof-pointer-memaccess2_2552:
  build:
    cflags: "-std=gnu++11 -Wall -O2 -Wno-sizeof-array-argument\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wsizeof-pointer-memaccess2.c'
    sources:
      binary: Wsizeof-pointer-memaccess2.s
  group: GRPSERIAL
  validate:
    match:
      L182:
        expect: true
        expr: '(^|\n)([^\n]+(:182:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+(:183:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+(:184:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L185:
        expect: true
        expr: '(^|\n)([^\n]+(:185:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+(:186:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L188:
        expect: true
        expr: '(^|\n)([^\n]+(:188:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L189:
        expect: true
        expr: '(^|\n)([^\n]+(:189:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+(:190:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L192:
        expect: true
        expr: '(^|\n)([^\n]+(:192:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+(:193:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L194:
        expect: true
        expr: '(^|\n)([^\n]+(:194:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L195:
        expect: true
        expr: '(^|\n)([^\n]+(:195:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+(:196:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+(:197:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L198:
        expect: true
        expr: '(^|\n)([^\n]+(:198:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L199:
        expect: true
        expr: '(^|\n)([^\n]+(:199:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L200:
        expect: true
        expr: '(^|\n)([^\n]+(:200:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L202:
        expect: true
        expr: '(^|\n)([^\n]+(:202:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L203:
        expect: true
        expr: '(^|\n)([^\n]+(:203:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L204:
        expect: true
        expr: '(^|\n)([^\n]+(:204:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L205:
        expect: true
        expr: '(^|\n)([^\n]+(:205:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L206:
        expect: true
        expr: '(^|\n)([^\n]+(:206:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L207:
        expect: true
        expr: '(^|\n)([^\n]+(:207:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L208:
        expect: true
        expr: '(^|\n)([^\n]+(:208:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L209:
        expect: true
        expr: '(^|\n)([^\n]+(:209:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L210:
        expect: true
        expr: '(^|\n)([^\n]+(:210:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+(:212:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L213:
        expect: true
        expr: '(^|\n)([^\n]+(:213:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+(:214:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+(:215:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L216:
        expect: true
        expr: '(^|\n)([^\n]+(:216:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L217:
        expect: true
        expr: '(^|\n)([^\n]+(:217:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L218:
        expect: true
        expr: '(^|\n)([^\n]+(:218:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L219:
        expect: true
        expr: '(^|\n)([^\n]+(:219:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L220:
        expect: true
        expr: '(^|\n)([^\n]+(:220:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L222:
        expect: true
        expr: '(^|\n)([^\n]+(:222:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L223:
        expect: true
        expr: '(^|\n)([^\n]+(:223:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L224:
        expect: true
        expr: '(^|\n)([^\n]+(:224:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L225:
        expect: true
        expr: '(^|\n)([^\n]+(:225:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L226:
        expect: true
        expr: '(^|\n)([^\n]+(:226:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+(:227:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L228:
        expect: true
        expr: '(^|\n)([^\n]+(:228:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L229:
        expect: true
        expr: '(^|\n)([^\n]+(:229:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L230:
        expect: true
        expr: '(^|\n)([^\n]+(:230:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L334:
        expect: true
        expr: '(^|\n)([^\n]+(:334:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L335:
        expect: true
        expr: '(^|\n)([^\n]+(:335:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L336:
        expect: true
        expr: '(^|\n)([^\n]+(:336:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L337:
        expect: true
        expr: '(^|\n)([^\n]+(:337:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L338:
        expect: true
        expr: '(^|\n)([^\n]+(:338:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L340:
        expect: true
        expr: '(^|\n)([^\n]+(:340:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L341:
        expect: true
        expr: '(^|\n)([^\n]+(:341:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L342:
        expect: true
        expr: '(^|\n)([^\n]+(:342:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L343:
        expect: true
        expr: '(^|\n)([^\n]+(:343:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L344:
        expect: true
        expr: '(^|\n)([^\n]+(:344:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L346:
        expect: true
        expr: '(^|\n)([^\n]+(:346:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L347:
        expect: true
        expr: '(^|\n)([^\n]+(:347:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L348:
        expect: true
        expr: '(^|\n)([^\n]+(:348:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L349:
        expect: true
        expr: '(^|\n)([^\n]+(:349:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L350:
        expect: true
        expr: '(^|\n)([^\n]+(:350:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L352:
        expect: true
        expr: '(^|\n)([^\n]+(:352:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L353:
        expect: true
        expr: '(^|\n)([^\n]+(:353:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L354:
        expect: true
        expr: '(^|\n)([^\n]+(:354:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L355:
        expect: true
        expr: '(^|\n)([^\n]+(:355:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L356:
        expect: true
        expr: '(^|\n)([^\n]+(:356:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L358:
        expect: true
        expr: '(^|\n)([^\n]+(:358:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L359:
        expect: true
        expr: '(^|\n)([^\n]+(:359:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L360:
        expect: true
        expr: '(^|\n)([^\n]+(:360:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L361:
        expect: true
        expr: '(^|\n)([^\n]+(:361:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L362:
        expect: true
        expr: '(^|\n)([^\n]+(:362:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L468:
        expect: true
        expr: '(^|\n)([^\n]+(:468:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L469:
        expect: true
        expr: '(^|\n)([^\n]+(:469:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L470:
        expect: true
        expr: '(^|\n)([^\n]+(:470:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L472:
        expect: true
        expr: '(^|\n)([^\n]+(:472:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L473:
        expect: true
        expr: '(^|\n)([^\n]+(:473:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L474:
        expect: true
        expr: '(^|\n)([^\n]+(:474:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+(:69:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+(:70:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+(:74:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+(:75:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+(:77:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
test_Wsizeof-pointer-memaccess2_2553:
  build:
    cflags: "-std=gnu++14 -Wall -O2 -Wno-sizeof-array-argument\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wsizeof-pointer-memaccess2.c'
    sources:
      binary: Wsizeof-pointer-memaccess2.s
  group: GRPSERIAL
  validate:
    match:
      L182:
        expect: true
        expr: '(^|\n)([^\n]+(:182:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+(:183:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+(:184:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L185:
        expect: true
        expr: '(^|\n)([^\n]+(:185:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+(:186:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L188:
        expect: true
        expr: '(^|\n)([^\n]+(:188:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L189:
        expect: true
        expr: '(^|\n)([^\n]+(:189:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+(:190:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L192:
        expect: true
        expr: '(^|\n)([^\n]+(:192:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+(:193:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L194:
        expect: true
        expr: '(^|\n)([^\n]+(:194:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L195:
        expect: true
        expr: '(^|\n)([^\n]+(:195:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+(:196:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+(:197:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L198:
        expect: true
        expr: '(^|\n)([^\n]+(:198:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L199:
        expect: true
        expr: '(^|\n)([^\n]+(:199:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L200:
        expect: true
        expr: '(^|\n)([^\n]+(:200:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L202:
        expect: true
        expr: '(^|\n)([^\n]+(:202:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L203:
        expect: true
        expr: '(^|\n)([^\n]+(:203:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L204:
        expect: true
        expr: '(^|\n)([^\n]+(:204:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L205:
        expect: true
        expr: '(^|\n)([^\n]+(:205:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L206:
        expect: true
        expr: '(^|\n)([^\n]+(:206:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L207:
        expect: true
        expr: '(^|\n)([^\n]+(:207:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L208:
        expect: true
        expr: '(^|\n)([^\n]+(:208:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L209:
        expect: true
        expr: '(^|\n)([^\n]+(:209:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L210:
        expect: true
        expr: '(^|\n)([^\n]+(:210:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+(:212:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L213:
        expect: true
        expr: '(^|\n)([^\n]+(:213:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+(:214:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+(:215:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L216:
        expect: true
        expr: '(^|\n)([^\n]+(:216:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L217:
        expect: true
        expr: '(^|\n)([^\n]+(:217:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L218:
        expect: true
        expr: '(^|\n)([^\n]+(:218:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L219:
        expect: true
        expr: '(^|\n)([^\n]+(:219:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L220:
        expect: true
        expr: '(^|\n)([^\n]+(:220:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L222:
        expect: true
        expr: '(^|\n)([^\n]+(:222:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L223:
        expect: true
        expr: '(^|\n)([^\n]+(:223:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L224:
        expect: true
        expr: '(^|\n)([^\n]+(:224:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L225:
        expect: true
        expr: '(^|\n)([^\n]+(:225:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L226:
        expect: true
        expr: '(^|\n)([^\n]+(:226:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+(:227:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L228:
        expect: true
        expr: '(^|\n)([^\n]+(:228:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L229:
        expect: true
        expr: '(^|\n)([^\n]+(:229:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L230:
        expect: true
        expr: '(^|\n)([^\n]+(:230:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L334:
        expect: true
        expr: '(^|\n)([^\n]+(:334:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L335:
        expect: true
        expr: '(^|\n)([^\n]+(:335:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L336:
        expect: true
        expr: '(^|\n)([^\n]+(:336:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L337:
        expect: true
        expr: '(^|\n)([^\n]+(:337:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L338:
        expect: true
        expr: '(^|\n)([^\n]+(:338:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L340:
        expect: true
        expr: '(^|\n)([^\n]+(:340:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L341:
        expect: true
        expr: '(^|\n)([^\n]+(:341:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L342:
        expect: true
        expr: '(^|\n)([^\n]+(:342:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L343:
        expect: true
        expr: '(^|\n)([^\n]+(:343:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L344:
        expect: true
        expr: '(^|\n)([^\n]+(:344:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L346:
        expect: true
        expr: '(^|\n)([^\n]+(:346:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L347:
        expect: true
        expr: '(^|\n)([^\n]+(:347:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L348:
        expect: true
        expr: '(^|\n)([^\n]+(:348:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L349:
        expect: true
        expr: '(^|\n)([^\n]+(:349:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L350:
        expect: true
        expr: '(^|\n)([^\n]+(:350:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L352:
        expect: true
        expr: '(^|\n)([^\n]+(:352:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L353:
        expect: true
        expr: '(^|\n)([^\n]+(:353:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L354:
        expect: true
        expr: '(^|\n)([^\n]+(:354:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L355:
        expect: true
        expr: '(^|\n)([^\n]+(:355:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L356:
        expect: true
        expr: '(^|\n)([^\n]+(:356:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L358:
        expect: true
        expr: '(^|\n)([^\n]+(:358:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L359:
        expect: true
        expr: '(^|\n)([^\n]+(:359:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L360:
        expect: true
        expr: '(^|\n)([^\n]+(:360:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L361:
        expect: true
        expr: '(^|\n)([^\n]+(:361:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L362:
        expect: true
        expr: '(^|\n)([^\n]+(:362:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L468:
        expect: true
        expr: '(^|\n)([^\n]+(:468:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L469:
        expect: true
        expr: '(^|\n)([^\n]+(:469:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L470:
        expect: true
        expr: '(^|\n)([^\n]+(:470:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L472:
        expect: true
        expr: '(^|\n)([^\n]+(:472:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L473:
        expect: true
        expr: '(^|\n)([^\n]+(:473:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L474:
        expect: true
        expr: '(^|\n)([^\n]+(:474:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+(:69:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+(:70:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+(:74:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+(:75:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+(:77:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
test_Wsizeof-pointer-memaccess2_493:
  build:
    cflags: "-Wc++-compat  -Wall -O2 -Wno-sizeof-array-argument -Wno-c++-compat\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wsizeof-pointer-memaccess2.c'
    sources:
      binary: Wsizeof-pointer-memaccess2.s
  group: GRPSERIAL
  validate:
    match:
      L182:
        expect: true
        expr: '(^|\n)([^\n]+(:182:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+(:183:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+(:184:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L185:
        expect: true
        expr: '(^|\n)([^\n]+(:185:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+(:186:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L188:
        expect: true
        expr: '(^|\n)([^\n]+(:188:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L189:
        expect: true
        expr: '(^|\n)([^\n]+(:189:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+(:190:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L192:
        expect: true
        expr: '(^|\n)([^\n]+(:192:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+(:193:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L194:
        expect: true
        expr: '(^|\n)([^\n]+(:194:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L195:
        expect: true
        expr: '(^|\n)([^\n]+(:195:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+(:196:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+(:197:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L198:
        expect: true
        expr: '(^|\n)([^\n]+(:198:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L199:
        expect: true
        expr: '(^|\n)([^\n]+(:199:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L200:
        expect: true
        expr: '(^|\n)([^\n]+(:200:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L202:
        expect: true
        expr: '(^|\n)([^\n]+(:202:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L203:
        expect: true
        expr: '(^|\n)([^\n]+(:203:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L204:
        expect: true
        expr: '(^|\n)([^\n]+(:204:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L205:
        expect: true
        expr: '(^|\n)([^\n]+(:205:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L206:
        expect: true
        expr: '(^|\n)([^\n]+(:206:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L207:
        expect: true
        expr: '(^|\n)([^\n]+(:207:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L208:
        expect: true
        expr: '(^|\n)([^\n]+(:208:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L209:
        expect: true
        expr: '(^|\n)([^\n]+(:209:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L210:
        expect: true
        expr: '(^|\n)([^\n]+(:210:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+(:212:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L213:
        expect: true
        expr: '(^|\n)([^\n]+(:213:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+(:214:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+(:215:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L216:
        expect: true
        expr: '(^|\n)([^\n]+(:216:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L217:
        expect: true
        expr: '(^|\n)([^\n]+(:217:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L218:
        expect: true
        expr: '(^|\n)([^\n]+(:218:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L219:
        expect: true
        expr: '(^|\n)([^\n]+(:219:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L220:
        expect: true
        expr: '(^|\n)([^\n]+(:220:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'
      L222:
        expect: true
        expr: '(^|\n)([^\n]+(:222:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L223:
        expect: true
        expr: '(^|\n)([^\n]+(:223:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L224:
        expect: true
        expr: '(^|\n)([^\n]+(:224:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L225:
        expect: true
        expr: '(^|\n)([^\n]+(:225:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L226:
        expect: true
        expr: '(^|\n)([^\n]+(:226:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+(:227:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L228:
        expect: true
        expr: '(^|\n)([^\n]+(:228:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L229:
        expect: true
        expr: '(^|\n)([^\n]+(:229:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L230:
        expect: true
        expr: '(^|\n)([^\n]+(:230:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an
          explicit length")[^\n]*\n?)+'
      L334:
        expect: true
        expr: '(^|\n)([^\n]+(:334:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L335:
        expect: true
        expr: '(^|\n)([^\n]+(:335:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L336:
        expect: true
        expr: '(^|\n)([^\n]+(:336:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L337:
        expect: true
        expr: '(^|\n)([^\n]+(:337:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L338:
        expect: true
        expr: '(^|\n)([^\n]+(:338:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L340:
        expect: true
        expr: '(^|\n)([^\n]+(:340:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L341:
        expect: true
        expr: '(^|\n)([^\n]+(:341:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L342:
        expect: true
        expr: '(^|\n)([^\n]+(:342:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L343:
        expect: true
        expr: '(^|\n)([^\n]+(:343:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L344:
        expect: true
        expr: '(^|\n)([^\n]+(:344:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L346:
        expect: true
        expr: '(^|\n)([^\n]+(:346:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L347:
        expect: true
        expr: '(^|\n)([^\n]+(:347:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L348:
        expect: true
        expr: '(^|\n)([^\n]+(:348:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L349:
        expect: true
        expr: '(^|\n)([^\n]+(:349:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L350:
        expect: true
        expr: '(^|\n)([^\n]+(:350:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L352:
        expect: true
        expr: '(^|\n)([^\n]+(:352:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L353:
        expect: true
        expr: '(^|\n)([^\n]+(:353:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L354:
        expect: true
        expr: '(^|\n)([^\n]+(:354:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L355:
        expect: true
        expr: '(^|\n)([^\n]+(:355:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L356:
        expect: true
        expr: '(^|\n)([^\n]+(:356:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L358:
        expect: true
        expr: '(^|\n)([^\n]+(:358:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L359:
        expect: true
        expr: '(^|\n)([^\n]+(:359:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L360:
        expect: true
        expr: '(^|\n)([^\n]+(:360:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L361:
        expect: true
        expr: '(^|\n)([^\n]+(:361:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L362:
        expect: true
        expr: '(^|\n)([^\n]+(:362:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to dereference it")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L468:
        expect: true
        expr: '(^|\n)([^\n]+(:468:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L469:
        expect: true
        expr: '(^|\n)([^\n]+(:469:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L470:
        expect: true
        expr: '(^|\n)([^\n]+(:470:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the source; did you mean to provide an explicit length")[^\n]*\n?)+'
      L472:
        expect: true
        expr: '(^|\n)([^\n]+(:472:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L473:
        expect: true
        expr: '(^|\n)([^\n]+(:473:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L474:
        expect: true
        expr: '(^|\n)([^\n]+(:474:)[^\n]*[0-9]+: warning:[^\n]*("call is the same
          expression as the destination; did you mean to provide an explicit length")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to remove the addressof")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the destination; did you mean to dereference it")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+(:69:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+(:70:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+(:74:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to remove the addressof")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+(:75:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+(:77:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("call is the same expression
          as the source; did you mean to dereference it")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("call is the same pointer
          type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]* or an explicit
          length")[^\n]*\n?)+'
test_Wswitch-unreachable-1_105:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wswitch-unreachable-1.c'
    sources:
      binary: Wswitch-unreachable-1.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+(:74:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
test_Wswitch-unreachable-1_1062:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wswitch-unreachable-1.c'
    sources:
      binary: Wswitch-unreachable-1.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+(:74:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
test_Wswitch-unreachable-1_1063:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wswitch-unreachable-1.c'
    sources:
      binary: Wswitch-unreachable-1.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+(:74:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
test_Wswitch-unreachable-1_1064:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wswitch-unreachable-1.c'
    sources:
      binary: Wswitch-unreachable-1.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+(:74:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
test_Wswitch-unreachable-1_1986:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wswitch-unreachable-1.c'
    sources:
      binary: Wswitch-unreachable-1.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+(:74:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
test_Wswitch-unreachable-1_2554:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wswitch-unreachable-1.c'
    sources:
      binary: Wswitch-unreachable-1.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+(:74:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
test_Wswitch-unreachable-1_2555:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wswitch-unreachable-1.c'
    sources:
      binary: Wswitch-unreachable-1.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+(:74:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
test_Wswitch-unreachable-1_2556:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wswitch-unreachable-1.c'
    sources:
      binary: Wswitch-unreachable-1.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+(:74:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
test_Wswitch-unreachable-1_494:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wswitch-unreachable-1.c'
    sources:
      binary: Wswitch-unreachable-1.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+(:74:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
test_Wswitch-unreachable-2_106:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wswitch-unreachable-2.c'
    sources:
      binary: Wswitch-unreachable-2.s
  group: GRPSERIAL
test_Wswitch-unreachable-2_1065:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wswitch-unreachable-2.c'
    sources:
      binary: Wswitch-unreachable-2.s
  group: GRPSERIAL
test_Wswitch-unreachable-2_1066:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wswitch-unreachable-2.c'
    sources:
      binary: Wswitch-unreachable-2.s
  group: GRPSERIAL
test_Wswitch-unreachable-2_1067:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wswitch-unreachable-2.c'
    sources:
      binary: Wswitch-unreachable-2.s
  group: GRPSERIAL
test_Wswitch-unreachable-2_1987:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wswitch-unreachable-2.c'
    sources:
      binary: Wswitch-unreachable-2.s
  group: GRPSERIAL
test_Wswitch-unreachable-2_2557:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wswitch-unreachable-2.c'
    sources:
      binary: Wswitch-unreachable-2.s
  group: GRPSERIAL
test_Wswitch-unreachable-2_2558:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wswitch-unreachable-2.c'
    sources:
      binary: Wswitch-unreachable-2.s
  group: GRPSERIAL
test_Wswitch-unreachable-2_2559:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wswitch-unreachable-2.c'
    sources:
      binary: Wswitch-unreachable-2.s
  group: GRPSERIAL
test_Wswitch-unreachable-2_495:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wswitch-unreachable-2.c'
    sources:
      binary: Wswitch-unreachable-2.s
  group: GRPSERIAL
test_Wswitch-unreachable-3_1068:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wswitch-unreachable-3.c'
    sources:
      binary: Wswitch-unreachable-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
test_Wswitch-unreachable-3_1069:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wswitch-unreachable-3.c'
    sources:
      binary: Wswitch-unreachable-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
test_Wswitch-unreachable-3_107:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wswitch-unreachable-3.c'
    sources:
      binary: Wswitch-unreachable-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
test_Wswitch-unreachable-3_1070:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wswitch-unreachable-3.c'
    sources:
      binary: Wswitch-unreachable-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
test_Wswitch-unreachable-3_1988:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wswitch-unreachable-3.c'
    sources:
      binary: Wswitch-unreachable-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
test_Wswitch-unreachable-3_2560:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wswitch-unreachable-3.c'
    sources:
      binary: Wswitch-unreachable-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
test_Wswitch-unreachable-3_2561:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wswitch-unreachable-3.c'
    sources:
      binary: Wswitch-unreachable-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
test_Wswitch-unreachable-3_2562:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wswitch-unreachable-3.c'
    sources:
      binary: Wswitch-unreachable-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
test_Wswitch-unreachable-3_496:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wswitch-unreachable-3.c'
    sources:
      binary: Wswitch-unreachable-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
test_Wswitch-unreachable-4_1071:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wswitch-unreachable-4.c'
    sources:
      binary: Wswitch-unreachable-4.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
test_Wswitch-unreachable-4_1072:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wswitch-unreachable-4.c'
    sources:
      binary: Wswitch-unreachable-4.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
test_Wswitch-unreachable-4_1073:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wswitch-unreachable-4.c'
    sources:
      binary: Wswitch-unreachable-4.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
test_Wswitch-unreachable-4_108:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wswitch-unreachable-4.c'
    sources:
      binary: Wswitch-unreachable-4.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
test_Wswitch-unreachable-4_1989:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wswitch-unreachable-4.c'
    sources:
      binary: Wswitch-unreachable-4.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
test_Wswitch-unreachable-4_2563:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wswitch-unreachable-4.c'
    sources:
      binary: Wswitch-unreachable-4.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
test_Wswitch-unreachable-4_2564:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wswitch-unreachable-4.c'
    sources:
      binary: Wswitch-unreachable-4.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
test_Wswitch-unreachable-4_2565:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wswitch-unreachable-4.c'
    sources:
      binary: Wswitch-unreachable-4.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
test_Wswitch-unreachable-4_497:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wswitch-unreachable-4.c'
    sources:
      binary: Wswitch-unreachable-4.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
test_Wtautological-compare-1_1074:
  build:
    cflags: "-std=gnu++98 -Wtautological-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wtautological-compare-1.c'
    sources:
      binary: Wtautological-compare-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+(:69:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
test_Wtautological-compare-1_1075:
  build:
    cflags: "-std=gnu++11 -Wtautological-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wtautological-compare-1.c'
    sources:
      binary: Wtautological-compare-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+(:69:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
test_Wtautological-compare-1_1076:
  build:
    cflags: "-std=gnu++14 -Wtautological-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wtautological-compare-1.c'
    sources:
      binary: Wtautological-compare-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+(:69:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
test_Wtautological-compare-1_109:
  build:
    cflags: "-Wc++-compat  -Wtautological-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wtautological-compare-1.c'
    sources:
      binary: Wtautological-compare-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+(:69:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
test_Wtautological-compare-1_1990:
  build:
    cflags: "-Wc++-compat  -Wtautological-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wtautological-compare-1.c'
    sources:
      binary: Wtautological-compare-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+(:69:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
test_Wtautological-compare-1_2566:
  build:
    cflags: "-std=gnu++98 -Wtautological-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wtautological-compare-1.c'
    sources:
      binary: Wtautological-compare-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+(:69:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
test_Wtautological-compare-1_2567:
  build:
    cflags: "-std=gnu++11 -Wtautological-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wtautological-compare-1.c'
    sources:
      binary: Wtautological-compare-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+(:69:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
test_Wtautological-compare-1_2568:
  build:
    cflags: "-std=gnu++14 -Wtautological-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wtautological-compare-1.c'
    sources:
      binary: Wtautological-compare-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+(:69:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
test_Wtautological-compare-1_498:
  build:
    cflags: "-Wc++-compat  -Wtautological-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wtautological-compare-1.c'
    sources:
      binary: Wtautological-compare-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to true")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+(:69:)[^\n]*[0-9]+: warning:[^\n]*("self-comparison always
          evaluates to false")[^\n]*\n?)+'
test_Wtautological-compare-2_1077:
  build:
    cflags: "-std=gnu++98 -Wtautological-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wtautological-compare-2.c'
    sources:
      binary: Wtautological-compare-2.s
  group: GRPSERIAL
test_Wtautological-compare-2_1078:
  build:
    cflags: "-std=gnu++11 -Wtautological-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wtautological-compare-2.c'
    sources:
      binary: Wtautological-compare-2.s
  group: GRPSERIAL
test_Wtautological-compare-2_1079:
  build:
    cflags: "-std=gnu++14 -Wtautological-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wtautological-compare-2.c'
    sources:
      binary: Wtautological-compare-2.s
  group: GRPSERIAL
test_Wtautological-compare-2_110:
  build:
    cflags: "-Wc++-compat  -Wtautological-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wtautological-compare-2.c'
    sources:
      binary: Wtautological-compare-2.s
  group: GRPSERIAL
test_Wtautological-compare-2_1991:
  build:
    cflags: "-Wc++-compat  -Wtautological-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wtautological-compare-2.c'
    sources:
      binary: Wtautological-compare-2.s
  group: GRPSERIAL
test_Wtautological-compare-2_2569:
  build:
    cflags: "-std=gnu++98 -Wtautological-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wtautological-compare-2.c'
    sources:
      binary: Wtautological-compare-2.s
  group: GRPSERIAL
test_Wtautological-compare-2_2570:
  build:
    cflags: "-std=gnu++11 -Wtautological-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wtautological-compare-2.c'
    sources:
      binary: Wtautological-compare-2.s
  group: GRPSERIAL
test_Wtautological-compare-2_2571:
  build:
    cflags: "-std=gnu++14 -Wtautological-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wtautological-compare-2.c'
    sources:
      binary: Wtautological-compare-2.s
  group: GRPSERIAL
test_Wtautological-compare-2_499:
  build:
    cflags: "-Wc++-compat  -Wtautological-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wtautological-compare-2.c'
    sources:
      binary: Wtautological-compare-2.s
  group: GRPSERIAL
test_Wtautological-compare-3_1080:
  build:
    cflags: "-std=gnu++98 -Wtautological-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wtautological-compare-3.c'
    sources:
      binary: Wtautological-compare-3.s
  group: GRPSERIAL
test_Wtautological-compare-3_1081:
  build:
    cflags: "-std=gnu++11 -Wtautological-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wtautological-compare-3.c'
    sources:
      binary: Wtautological-compare-3.s
  group: GRPSERIAL
test_Wtautological-compare-3_1082:
  build:
    cflags: "-std=gnu++14 -Wtautological-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wtautological-compare-3.c'
    sources:
      binary: Wtautological-compare-3.s
  group: GRPSERIAL
test_Wtautological-compare-3_111:
  build:
    cflags: "-Wc++-compat  -Wtautological-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wtautological-compare-3.c'
    sources:
      binary: Wtautological-compare-3.s
  group: GRPSERIAL
test_Wtautological-compare-3_1992:
  build:
    cflags: "-Wc++-compat  -Wtautological-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wtautological-compare-3.c'
    sources:
      binary: Wtautological-compare-3.s
  group: GRPSERIAL
test_Wtautological-compare-3_2572:
  build:
    cflags: "-std=gnu++98 -Wtautological-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wtautological-compare-3.c'
    sources:
      binary: Wtautological-compare-3.s
  group: GRPSERIAL
test_Wtautological-compare-3_2573:
  build:
    cflags: "-std=gnu++11 -Wtautological-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wtautological-compare-3.c'
    sources:
      binary: Wtautological-compare-3.s
  group: GRPSERIAL
test_Wtautological-compare-3_2574:
  build:
    cflags: "-std=gnu++14 -Wtautological-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wtautological-compare-3.c'
    sources:
      binary: Wtautological-compare-3.s
  group: GRPSERIAL
test_Wtautological-compare-3_500:
  build:
    cflags: "-Wc++-compat  -Wtautological-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wtautological-compare-3.c'
    sources:
      binary: Wtautological-compare-3.s
  group: GRPSERIAL
test_Wtautological-compare-4_1083:
  build:
    cflags: "-std=gnu++98 -Wtautological-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wtautological-compare-4.c'
    sources:
      binary: Wtautological-compare-4.s
  group: GRPSERIAL
test_Wtautological-compare-4_1084:
  build:
    cflags: "-std=gnu++11 -Wtautological-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wtautological-compare-4.c'
    sources:
      binary: Wtautological-compare-4.s
  group: GRPSERIAL
test_Wtautological-compare-4_1085:
  build:
    cflags: "-std=gnu++14 -Wtautological-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wtautological-compare-4.c'
    sources:
      binary: Wtautological-compare-4.s
  group: GRPSERIAL
test_Wtautological-compare-4_112:
  build:
    cflags: "-Wc++-compat  -Wtautological-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wtautological-compare-4.c'
    sources:
      binary: Wtautological-compare-4.s
  group: GRPSERIAL
test_Wtautological-compare-4_1993:
  build:
    cflags: "-Wc++-compat  -Wtautological-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wtautological-compare-4.c'
    sources:
      binary: Wtautological-compare-4.s
  group: GRPSERIAL
test_Wtautological-compare-4_2575:
  build:
    cflags: "-std=gnu++98 -Wtautological-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wtautological-compare-4.c'
    sources:
      binary: Wtautological-compare-4.s
  group: GRPSERIAL
test_Wtautological-compare-4_2576:
  build:
    cflags: "-std=gnu++11 -Wtautological-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wtautological-compare-4.c'
    sources:
      binary: Wtautological-compare-4.s
  group: GRPSERIAL
test_Wtautological-compare-4_2577:
  build:
    cflags: "-std=gnu++14 -Wtautological-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wtautological-compare-4.c'
    sources:
      binary: Wtautological-compare-4.s
  group: GRPSERIAL
test_Wtautological-compare-4_501:
  build:
    cflags: "-Wc++-compat  -Wtautological-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wtautological-compare-4.c'
    sources:
      binary: Wtautological-compare-4.s
  group: GRPSERIAL
test_Wunused-function-1_1086:
  build:
    cflags: "-std=gnu++98 -Wunused-function\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-function-1.c'
    sources:
      binary: Wunused-function-1.s
  group: GRPSERIAL
test_Wunused-function-1_1087:
  build:
    cflags: "-std=gnu++11 -Wunused-function\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-function-1.c'
    sources:
      binary: Wunused-function-1.s
  group: GRPSERIAL
test_Wunused-function-1_1088:
  build:
    cflags: "-std=gnu++14 -Wunused-function\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-function-1.c'
    sources:
      binary: Wunused-function-1.s
  group: GRPSERIAL
test_Wunused-function-1_113:
  build:
    cflags: "-Wc++-compat  -Wunused-function\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-function-1.c'
    sources:
      binary: Wunused-function-1.s
  group: GRPSERIAL
test_Wunused-function-1_1994:
  build:
    cflags: "-Wc++-compat  -Wunused-function\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-function-1.c'
    sources:
      binary: Wunused-function-1.s
  group: GRPSERIAL
test_Wunused-function-1_2578:
  build:
    cflags: "-std=gnu++98 -Wunused-function\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-function-1.c'
    sources:
      binary: Wunused-function-1.s
  group: GRPSERIAL
test_Wunused-function-1_2579:
  build:
    cflags: "-std=gnu++11 -Wunused-function\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-function-1.c'
    sources:
      binary: Wunused-function-1.s
  group: GRPSERIAL
test_Wunused-function-1_2580:
  build:
    cflags: "-std=gnu++14 -Wunused-function\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-function-1.c'
    sources:
      binary: Wunused-function-1.s
  group: GRPSERIAL
test_Wunused-function-1_502:
  build:
    cflags: "-Wc++-compat  -Wunused-function\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-function-1.c'
    sources:
      binary: Wunused-function-1.s
  group: GRPSERIAL
test_Wunused-local-typedefs_1089:
  build:
    cflags: "-std=gnu++98 -Wunused-local-typedefs\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-local-typedefs.c'
    sources:
      binary: Wunused-local-typedefs.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("locally defined but
          not used")[^\n]*\n?)+'
test_Wunused-local-typedefs_1090:
  build:
    cflags: "-std=gnu++11 -Wunused-local-typedefs\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-local-typedefs.c'
    sources:
      binary: Wunused-local-typedefs.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("locally defined but
          not used")[^\n]*\n?)+'
test_Wunused-local-typedefs_1091:
  build:
    cflags: "-std=gnu++14 -Wunused-local-typedefs\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-local-typedefs.c'
    sources:
      binary: Wunused-local-typedefs.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("locally defined but
          not used")[^\n]*\n?)+'
test_Wunused-local-typedefs_114:
  build:
    cflags: "-Wc++-compat  -Wunused-local-typedefs\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-local-typedefs.c'
    sources:
      binary: Wunused-local-typedefs.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("locally defined but
          not used")[^\n]*\n?)+'
test_Wunused-local-typedefs_1995:
  build:
    cflags: "-Wc++-compat  -Wunused-local-typedefs\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-local-typedefs.c'
    sources:
      binary: Wunused-local-typedefs.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("locally defined but
          not used")[^\n]*\n?)+'
test_Wunused-local-typedefs_2581:
  build:
    cflags: "-std=gnu++98 -Wunused-local-typedefs\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-local-typedefs.c'
    sources:
      binary: Wunused-local-typedefs.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("locally defined but
          not used")[^\n]*\n?)+'
test_Wunused-local-typedefs_2582:
  build:
    cflags: "-std=gnu++11 -Wunused-local-typedefs\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-local-typedefs.c'
    sources:
      binary: Wunused-local-typedefs.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("locally defined but
          not used")[^\n]*\n?)+'
test_Wunused-local-typedefs_2583:
  build:
    cflags: "-std=gnu++14 -Wunused-local-typedefs\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-local-typedefs.c'
    sources:
      binary: Wunused-local-typedefs.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("locally defined but
          not used")[^\n]*\n?)+'
test_Wunused-local-typedefs_503:
  build:
    cflags: "-Wc++-compat  -Wunused-local-typedefs\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-local-typedefs.c'
    sources:
      binary: Wunused-local-typedefs.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("locally defined but
          not used")[^\n]*\n?)+'
test_Wunused-var-10_1095:
  build:
    cflags: "-std=gnu++98 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-10.c'
    sources:
      binary: Wunused-var-10.s
  group: GRPSERIAL
test_Wunused-var-10_1096:
  build:
    cflags: "-std=gnu++11 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-10.c'
    sources:
      binary: Wunused-var-10.s
  group: GRPSERIAL
test_Wunused-var-10_1097:
  build:
    cflags: "-std=gnu++14 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-10.c'
    sources:
      binary: Wunused-var-10.s
  group: GRPSERIAL
test_Wunused-var-10_116:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-10.c'
    sources:
      binary: Wunused-var-10.s
  group: GRPSERIAL
test_Wunused-var-10_1997:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-10.c'
    sources:
      binary: Wunused-var-10.s
  group: GRPSERIAL
test_Wunused-var-10_2587:
  build:
    cflags: "-std=gnu++98 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-10.c'
    sources:
      binary: Wunused-var-10.s
  group: GRPSERIAL
test_Wunused-var-10_2588:
  build:
    cflags: "-std=gnu++11 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-10.c'
    sources:
      binary: Wunused-var-10.s
  group: GRPSERIAL
test_Wunused-var-10_2589:
  build:
    cflags: "-std=gnu++14 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-10.c'
    sources:
      binary: Wunused-var-10.s
  group: GRPSERIAL
test_Wunused-var-10_505:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-10.c'
    sources:
      binary: Wunused-var-10.s
  group: GRPSERIAL
test_Wunused-var-11_1098:
  build:
    cflags: "-std=gnu++98 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-11.c'
    sources:
      binary: Wunused-var-11.s
  group: GRPSERIAL
test_Wunused-var-11_1099:
  build:
    cflags: "-std=gnu++11 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-11.c'
    sources:
      binary: Wunused-var-11.s
  group: GRPSERIAL
test_Wunused-var-11_1100:
  build:
    cflags: "-std=gnu++14 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-11.c'
    sources:
      binary: Wunused-var-11.s
  group: GRPSERIAL
test_Wunused-var-11_117:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-11.c'
    sources:
      binary: Wunused-var-11.s
  group: GRPSERIAL
test_Wunused-var-11_1998:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-11.c'
    sources:
      binary: Wunused-var-11.s
  group: GRPSERIAL
test_Wunused-var-11_2590:
  build:
    cflags: "-std=gnu++98 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-11.c'
    sources:
      binary: Wunused-var-11.s
  group: GRPSERIAL
test_Wunused-var-11_2591:
  build:
    cflags: "-std=gnu++11 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-11.c'
    sources:
      binary: Wunused-var-11.s
  group: GRPSERIAL
test_Wunused-var-11_2592:
  build:
    cflags: "-std=gnu++14 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-11.c'
    sources:
      binary: Wunused-var-11.s
  group: GRPSERIAL
test_Wunused-var-11_506:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-11.c'
    sources:
      binary: Wunused-var-11.s
  group: GRPSERIAL
test_Wunused-var-12_1101:
  build:
    cflags: "-std=gnu++98 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-12.c'
    sources:
      binary: Wunused-var-12.s
  group: GRPSERIAL
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-12_1102:
  build:
    cflags: "-std=gnu++11 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-12.c'
    sources:
      binary: Wunused-var-12.s
  group: GRPSERIAL
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-12_1103:
  build:
    cflags: "-std=gnu++14 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-12.c'
    sources:
      binary: Wunused-var-12.s
  group: GRPSERIAL
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-12_118:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-12.c'
    sources:
      binary: Wunused-var-12.s
  group: GRPSERIAL
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-12_1999:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-12.c'
    sources:
      binary: Wunused-var-12.s
  group: GRPSERIAL
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-12_2593:
  build:
    cflags: "-std=gnu++98 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-12.c'
    sources:
      binary: Wunused-var-12.s
  group: GRPSERIAL
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-12_2594:
  build:
    cflags: "-std=gnu++11 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-12.c'
    sources:
      binary: Wunused-var-12.s
  group: GRPSERIAL
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-12_2595:
  build:
    cflags: "-std=gnu++14 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-12.c'
    sources:
      binary: Wunused-var-12.s
  group: GRPSERIAL
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-12_507:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-12.c'
    sources:
      binary: Wunused-var-12.s
  group: GRPSERIAL
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-13_1104:
  build:
    cflags: "-std=gnu++98 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-13.c'
    sources:
      binary: Wunused-var-13.s
  group: GRPSERIAL
test_Wunused-var-13_1105:
  build:
    cflags: "-std=gnu++11 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-13.c'
    sources:
      binary: Wunused-var-13.s
  group: GRPSERIAL
test_Wunused-var-13_1106:
  build:
    cflags: "-std=gnu++14 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-13.c'
    sources:
      binary: Wunused-var-13.s
  group: GRPSERIAL
test_Wunused-var-13_119:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-13.c'
    sources:
      binary: Wunused-var-13.s
  group: GRPSERIAL
test_Wunused-var-13_2000:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-13.c'
    sources:
      binary: Wunused-var-13.s
  group: GRPSERIAL
test_Wunused-var-13_2596:
  build:
    cflags: "-std=gnu++98 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-13.c'
    sources:
      binary: Wunused-var-13.s
  group: GRPSERIAL
test_Wunused-var-13_2597:
  build:
    cflags: "-std=gnu++11 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-13.c'
    sources:
      binary: Wunused-var-13.s
  group: GRPSERIAL
test_Wunused-var-13_2598:
  build:
    cflags: "-std=gnu++14 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-13.c'
    sources:
      binary: Wunused-var-13.s
  group: GRPSERIAL
test_Wunused-var-13_508:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-13.c'
    sources:
      binary: Wunused-var-13.s
  group: GRPSERIAL
test_Wunused-var-14_1107:
  build:
    cflags: "-std=gnu++98 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-14.c'
    sources:
      binary: Wunused-var-14.s
  group: GRPSERIAL
test_Wunused-var-14_1108:
  build:
    cflags: "-std=gnu++11 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-14.c'
    sources:
      binary: Wunused-var-14.s
  group: GRPSERIAL
test_Wunused-var-14_1109:
  build:
    cflags: "-std=gnu++14 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-14.c'
    sources:
      binary: Wunused-var-14.s
  group: GRPSERIAL
test_Wunused-var-14_120:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-14.c'
    sources:
      binary: Wunused-var-14.s
  group: GRPSERIAL
test_Wunused-var-14_2001:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-14.c'
    sources:
      binary: Wunused-var-14.s
  group: GRPSERIAL
test_Wunused-var-14_2599:
  build:
    cflags: "-std=gnu++98 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-14.c'
    sources:
      binary: Wunused-var-14.s
  group: GRPSERIAL
test_Wunused-var-14_2600:
  build:
    cflags: "-std=gnu++11 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-14.c'
    sources:
      binary: Wunused-var-14.s
  group: GRPSERIAL
test_Wunused-var-14_2601:
  build:
    cflags: "-std=gnu++14 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-14.c'
    sources:
      binary: Wunused-var-14.s
  group: GRPSERIAL
test_Wunused-var-14_509:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-14.c'
    sources:
      binary: Wunused-var-14.s
  group: GRPSERIAL
test_Wunused-var-15_1110:
  build:
    cflags: "-std=gnu++98 -Wunused -W -Wno-psabi\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-15.c'
    sources:
      binary: Wunused-var-15.s
  group: GRPSERIAL
test_Wunused-var-15_1111:
  build:
    cflags: "-std=gnu++11 -Wunused -W -Wno-psabi\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-15.c'
    sources:
      binary: Wunused-var-15.s
  group: GRPSERIAL
test_Wunused-var-15_1112:
  build:
    cflags: "-std=gnu++14 -Wunused -W -Wno-psabi\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-15.c'
    sources:
      binary: Wunused-var-15.s
  group: GRPSERIAL
test_Wunused-var-15_121:
  build:
    cflags: "-Wc++-compat  -Wunused -W -Wno-psabi\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-15.c'
    sources:
      binary: Wunused-var-15.s
  group: GRPSERIAL
test_Wunused-var-15_2002:
  build:
    cflags: "-Wc++-compat  -Wunused -W -Wno-psabi\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-15.c'
    sources:
      binary: Wunused-var-15.s
  group: GRPSERIAL
test_Wunused-var-15_2602:
  build:
    cflags: "-std=gnu++98 -Wunused -W -Wno-psabi\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-15.c'
    sources:
      binary: Wunused-var-15.s
  group: GRPSERIAL
test_Wunused-var-15_2603:
  build:
    cflags: "-std=gnu++11 -Wunused -W -Wno-psabi\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-15.c'
    sources:
      binary: Wunused-var-15.s
  group: GRPSERIAL
test_Wunused-var-15_2604:
  build:
    cflags: "-std=gnu++14 -Wunused -W -Wno-psabi\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-15.c'
    sources:
      binary: Wunused-var-15.s
  group: GRPSERIAL
test_Wunused-var-15_510:
  build:
    cflags: "-Wc++-compat  -Wunused -W -Wno-psabi\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-15.c'
    sources:
      binary: Wunused-var-15.s
  group: GRPSERIAL
test_Wunused-var-16_1113:
  build:
    cflags: "-std=gnu++98 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-16.c'
    sources:
      binary: Wunused-var-16.s
  group: GRPSERIAL
test_Wunused-var-16_1114:
  build:
    cflags: "-std=gnu++11 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-16.c'
    sources:
      binary: Wunused-var-16.s
  group: GRPSERIAL
test_Wunused-var-16_1115:
  build:
    cflags: "-std=gnu++14 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-16.c'
    sources:
      binary: Wunused-var-16.s
  group: GRPSERIAL
test_Wunused-var-16_122:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-16.c'
    sources:
      binary: Wunused-var-16.s
  group: GRPSERIAL
test_Wunused-var-16_2003:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-16.c'
    sources:
      binary: Wunused-var-16.s
  group: GRPSERIAL
test_Wunused-var-16_2605:
  build:
    cflags: "-std=gnu++98 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-16.c'
    sources:
      binary: Wunused-var-16.s
  group: GRPSERIAL
test_Wunused-var-16_2606:
  build:
    cflags: "-std=gnu++11 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-16.c'
    sources:
      binary: Wunused-var-16.s
  group: GRPSERIAL
test_Wunused-var-16_2607:
  build:
    cflags: "-std=gnu++14 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-16.c'
    sources:
      binary: Wunused-var-16.s
  group: GRPSERIAL
test_Wunused-var-16_511:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-16.c'
    sources:
      binary: Wunused-var-16.s
  group: GRPSERIAL
test_Wunused-var-1_1092:
  build:
    cflags: "-std=gnu++98 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-1.c'
    sources:
      binary: Wunused-var-1.s
  group: GRPSERIAL
  validate:
    match:
      L107:
        expect: true
        expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+(:73:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-1_1093:
  build:
    cflags: "-std=gnu++11 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-1.c'
    sources:
      binary: Wunused-var-1.s
  group: GRPSERIAL
  validate:
    match:
      L107:
        expect: true
        expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+(:73:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-1_1094:
  build:
    cflags: "-std=gnu++14 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-1.c'
    sources:
      binary: Wunused-var-1.s
  group: GRPSERIAL
  validate:
    match:
      L107:
        expect: true
        expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+(:73:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-1_115:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-1.c'
    sources:
      binary: Wunused-var-1.s
  group: GRPSERIAL
  validate:
    match:
      L107:
        expect: true
        expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+(:73:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-1_1996:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-1.c'
    sources:
      binary: Wunused-var-1.s
  group: GRPSERIAL
  validate:
    match:
      L107:
        expect: true
        expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+(:73:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-1_2584:
  build:
    cflags: "-std=gnu++98 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-1.c'
    sources:
      binary: Wunused-var-1.s
  group: GRPSERIAL
  validate:
    match:
      L107:
        expect: true
        expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+(:73:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-1_2585:
  build:
    cflags: "-std=gnu++11 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-1.c'
    sources:
      binary: Wunused-var-1.s
  group: GRPSERIAL
  validate:
    match:
      L107:
        expect: true
        expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+(:73:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-1_2586:
  build:
    cflags: "-std=gnu++14 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-1.c'
    sources:
      binary: Wunused-var-1.s
  group: GRPSERIAL
  validate:
    match:
      L107:
        expect: true
        expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+(:73:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-1_504:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-1.c'
    sources:
      binary: Wunused-var-1.s
  group: GRPSERIAL
  validate:
    match:
      L107:
        expect: true
        expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+(:73:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-2_1116:
  build:
    cflags: "-std=gnu++98 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-2.c'
    sources:
      binary: Wunused-var-2.s
  group: GRPSERIAL
test_Wunused-var-2_1117:
  build:
    cflags: "-std=gnu++11 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-2.c'
    sources:
      binary: Wunused-var-2.s
  group: GRPSERIAL
test_Wunused-var-2_1118:
  build:
    cflags: "-std=gnu++14 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-2.c'
    sources:
      binary: Wunused-var-2.s
  group: GRPSERIAL
test_Wunused-var-2_123:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-2.c'
    sources:
      binary: Wunused-var-2.s
  group: GRPSERIAL
test_Wunused-var-2_2004:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-2.c'
    sources:
      binary: Wunused-var-2.s
  group: GRPSERIAL
test_Wunused-var-2_2608:
  build:
    cflags: "-std=gnu++98 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-2.c'
    sources:
      binary: Wunused-var-2.s
  group: GRPSERIAL
test_Wunused-var-2_2609:
  build:
    cflags: "-std=gnu++11 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-2.c'
    sources:
      binary: Wunused-var-2.s
  group: GRPSERIAL
test_Wunused-var-2_2610:
  build:
    cflags: "-std=gnu++14 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-2.c'
    sources:
      binary: Wunused-var-2.s
  group: GRPSERIAL
test_Wunused-var-2_512:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-2.c'
    sources:
      binary: Wunused-var-2.s
  group: GRPSERIAL
test_Wunused-var-3_1119:
  build:
    cflags: "-std=gnu++98 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-3.c'
    sources:
      binary: Wunused-var-3.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-3_1120:
  build:
    cflags: "-std=gnu++11 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-3.c'
    sources:
      binary: Wunused-var-3.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-3_1121:
  build:
    cflags: "-std=gnu++14 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-3.c'
    sources:
      binary: Wunused-var-3.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-3_124:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-3.c'
    sources:
      binary: Wunused-var-3.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-3_2005:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-3.c'
    sources:
      binary: Wunused-var-3.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-3_2611:
  build:
    cflags: "-std=gnu++98 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-3.c'
    sources:
      binary: Wunused-var-3.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-3_2612:
  build:
    cflags: "-std=gnu++11 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-3.c'
    sources:
      binary: Wunused-var-3.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-3_2613:
  build:
    cflags: "-std=gnu++14 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-3.c'
    sources:
      binary: Wunused-var-3.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-3_513:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-3.c'
    sources:
      binary: Wunused-var-3.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-4_1122:
  build:
    cflags: "-std=gnu++98 -Wunused -W\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-4.c'
    sources:
      binary: Wunused-var-4.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-4_1123:
  build:
    cflags: "-std=gnu++11 -Wunused -W\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-4.c'
    sources:
      binary: Wunused-var-4.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-4_1124:
  build:
    cflags: "-std=gnu++14 -Wunused -W\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-4.c'
    sources:
      binary: Wunused-var-4.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-4_125:
  build:
    cflags: "-Wc++-compat  -Wunused -W\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-4.c'
    sources:
      binary: Wunused-var-4.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-4_2006:
  build:
    cflags: "-Wc++-compat  -Wunused -W\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-4.c'
    sources:
      binary: Wunused-var-4.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-4_2614:
  build:
    cflags: "-std=gnu++98 -Wunused -W\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-4.c'
    sources:
      binary: Wunused-var-4.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-4_2615:
  build:
    cflags: "-std=gnu++11 -Wunused -W\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-4.c'
    sources:
      binary: Wunused-var-4.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-4_2616:
  build:
    cflags: "-std=gnu++14 -Wunused -W\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-4.c'
    sources:
      binary: Wunused-var-4.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-4_514:
  build:
    cflags: "-Wc++-compat  -Wunused -W\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-4.c'
    sources:
      binary: Wunused-var-4.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-5_1125:
  build:
    cflags: "-std=gnu++98 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-5.c'
    sources:
      binary: Wunused-var-5.s
  group: GRPSERIAL
test_Wunused-var-5_1126:
  build:
    cflags: "-std=gnu++11 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-5.c'
    sources:
      binary: Wunused-var-5.s
  group: GRPSERIAL
test_Wunused-var-5_1127:
  build:
    cflags: "-std=gnu++14 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-5.c'
    sources:
      binary: Wunused-var-5.s
  group: GRPSERIAL
test_Wunused-var-5_126:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-5.c'
    sources:
      binary: Wunused-var-5.s
  group: GRPSERIAL
test_Wunused-var-5_2007:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-5.c'
    sources:
      binary: Wunused-var-5.s
  group: GRPSERIAL
test_Wunused-var-5_2617:
  build:
    cflags: "-std=gnu++98 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-5.c'
    sources:
      binary: Wunused-var-5.s
  group: GRPSERIAL
test_Wunused-var-5_2618:
  build:
    cflags: "-std=gnu++11 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-5.c'
    sources:
      binary: Wunused-var-5.s
  group: GRPSERIAL
test_Wunused-var-5_2619:
  build:
    cflags: "-std=gnu++14 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-5.c'
    sources:
      binary: Wunused-var-5.s
  group: GRPSERIAL
test_Wunused-var-5_515:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-5.c'
    sources:
      binary: Wunused-var-5.s
  group: GRPSERIAL
test_Wunused-var-6_1128:
  build:
    cflags: "-std=gnu++98 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-6.c'
    sources:
      binary: Wunused-var-6.s
  group: GRPSERIAL
test_Wunused-var-6_1129:
  build:
    cflags: "-std=gnu++11 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-6.c'
    sources:
      binary: Wunused-var-6.s
  group: GRPSERIAL
test_Wunused-var-6_1130:
  build:
    cflags: "-std=gnu++14 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-6.c'
    sources:
      binary: Wunused-var-6.s
  group: GRPSERIAL
test_Wunused-var-6_127:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-6.c'
    sources:
      binary: Wunused-var-6.s
  group: GRPSERIAL
test_Wunused-var-6_2008:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-6.c'
    sources:
      binary: Wunused-var-6.s
  group: GRPSERIAL
test_Wunused-var-6_2620:
  build:
    cflags: "-std=gnu++98 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-6.c'
    sources:
      binary: Wunused-var-6.s
  group: GRPSERIAL
test_Wunused-var-6_2621:
  build:
    cflags: "-std=gnu++11 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-6.c'
    sources:
      binary: Wunused-var-6.s
  group: GRPSERIAL
test_Wunused-var-6_2622:
  build:
    cflags: "-std=gnu++14 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-6.c'
    sources:
      binary: Wunused-var-6.s
  group: GRPSERIAL
test_Wunused-var-6_516:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-6.c'
    sources:
      binary: Wunused-var-6.s
  group: GRPSERIAL
test_Wunused-var-7_1131:
  build:
    cflags: "-std=gnu++98 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-7.c'
    sources:
      binary: Wunused-var-7.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
test_Wunused-var-7_1132:
  build:
    cflags: "-std=gnu++11 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-7.c'
    sources:
      binary: Wunused-var-7.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
test_Wunused-var-7_1133:
  build:
    cflags: "-std=gnu++14 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-7.c'
    sources:
      binary: Wunused-var-7.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
test_Wunused-var-7_128:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-7.c'
    sources:
      binary: Wunused-var-7.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
test_Wunused-var-7_2009:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-7.c'
    sources:
      binary: Wunused-var-7.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
test_Wunused-var-7_2623:
  build:
    cflags: "-std=gnu++98 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-7.c'
    sources:
      binary: Wunused-var-7.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
test_Wunused-var-7_2624:
  build:
    cflags: "-std=gnu++11 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-7.c'
    sources:
      binary: Wunused-var-7.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
test_Wunused-var-7_2625:
  build:
    cflags: "-std=gnu++14 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-7.c'
    sources:
      binary: Wunused-var-7.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
test_Wunused-var-7_517:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-7.c'
    sources:
      binary: Wunused-var-7.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("no effect")[^\n]*\n?)+'
test_Wunused-var-8_1134:
  build:
    cflags: "-std=gnu++98 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-8.c'
    sources:
      binary: Wunused-var-8.s
  group: GRPSERIAL
test_Wunused-var-8_1135:
  build:
    cflags: "-std=gnu++11 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-8.c'
    sources:
      binary: Wunused-var-8.s
  group: GRPSERIAL
test_Wunused-var-8_1136:
  build:
    cflags: "-std=gnu++14 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-8.c'
    sources:
      binary: Wunused-var-8.s
  group: GRPSERIAL
test_Wunused-var-8_129:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-8.c'
    sources:
      binary: Wunused-var-8.s
  group: GRPSERIAL
test_Wunused-var-8_2010:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-8.c'
    sources:
      binary: Wunused-var-8.s
  group: GRPSERIAL
test_Wunused-var-8_2626:
  build:
    cflags: "-std=gnu++98 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-8.c'
    sources:
      binary: Wunused-var-8.s
  group: GRPSERIAL
test_Wunused-var-8_2627:
  build:
    cflags: "-std=gnu++11 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-8.c'
    sources:
      binary: Wunused-var-8.s
  group: GRPSERIAL
test_Wunused-var-8_2628:
  build:
    cflags: "-std=gnu++14 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-8.c'
    sources:
      binary: Wunused-var-8.s
  group: GRPSERIAL
test_Wunused-var-8_518:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-8.c'
    sources:
      binary: Wunused-var-8.s
  group: GRPSERIAL
test_Wunused-var-9_1137:
  build:
    cflags: "-std=gnu++98 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-9.c'
    sources:
      binary: Wunused-var-9.s
  group: GRPSERIAL
  validate:
    match:
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-9_1138:
  build:
    cflags: "-std=gnu++11 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-9.c'
    sources:
      binary: Wunused-var-9.s
  group: GRPSERIAL
  validate:
    match:
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-9_1139:
  build:
    cflags: "-std=gnu++14 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-9.c'
    sources:
      binary: Wunused-var-9.s
  group: GRPSERIAL
  validate:
    match:
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-9_130:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-9.c'
    sources:
      binary: Wunused-var-9.s
  group: GRPSERIAL
  validate:
    match:
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-9_2011:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-9.c'
    sources:
      binary: Wunused-var-9.s
  group: GRPSERIAL
  validate:
    match:
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-9_2629:
  build:
    cflags: "-std=gnu++98 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-9.c'
    sources:
      binary: Wunused-var-9.s
  group: GRPSERIAL
  validate:
    match:
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-9_2630:
  build:
    cflags: "-std=gnu++11 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-9.c'
    sources:
      binary: Wunused-var-9.s
  group: GRPSERIAL
  validate:
    match:
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-9_2631:
  build:
    cflags: "-std=gnu++14 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-9.c'
    sources:
      binary: Wunused-var-9.s
  group: GRPSERIAL
  validate:
    match:
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wunused-var-9_519:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wunused-var-9.c'
    sources:
      binary: Wunused-var-9.s
  group: GRPSERIAL
  validate:
    match:
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("set but not used")[^\n]*\n?)+'
test_Wvarargs-2_1140:
  build:
    cflags: "-std=gnu++98 -Wno-varargs\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wvarargs-2.c'
    sources:
      binary: Wvarargs-2.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used in function
          with fixed args")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
test_Wvarargs-2_1141:
  build:
    cflags: "-std=gnu++11 -Wno-varargs\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wvarargs-2.c'
    sources:
      binary: Wvarargs-2.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used in function
          with fixed args")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
test_Wvarargs-2_1142:
  build:
    cflags: "-std=gnu++14 -Wno-varargs\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wvarargs-2.c'
    sources:
      binary: Wvarargs-2.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used in function
          with fixed args")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
test_Wvarargs-2_131:
  build:
    cflags: "-Wc++-compat  -Wno-varargs\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wvarargs-2.c'
    sources:
      binary: Wvarargs-2.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used in function
          with fixed args")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
test_Wvarargs-2_2012:
  build:
    cflags: "-Wc++-compat  -Wno-varargs\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wvarargs-2.c'
    sources:
      binary: Wvarargs-2.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used in function
          with fixed args")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
test_Wvarargs-2_2632:
  build:
    cflags: "-std=gnu++98 -Wno-varargs\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wvarargs-2.c'
    sources:
      binary: Wvarargs-2.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used in function
          with fixed args")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
test_Wvarargs-2_2633:
  build:
    cflags: "-std=gnu++11 -Wno-varargs\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wvarargs-2.c'
    sources:
      binary: Wvarargs-2.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used in function
          with fixed args")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
test_Wvarargs-2_2634:
  build:
    cflags: "-std=gnu++14 -Wno-varargs\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wvarargs-2.c'
    sources:
      binary: Wvarargs-2.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used in function
          with fixed args")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
test_Wvarargs-2_520:
  build:
    cflags: "-Wc++-compat  -Wno-varargs\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wvarargs-2.c'
    sources:
      binary: Wvarargs-2.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used in function
          with fixed args")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
test_Wvarargs_1143:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wvarargs.c'
    sources:
      binary: Wvarargs.s
  group: GRPSERIAL
  validate:
    match:
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("second parameter")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("undefined behavior")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used in function
          with fixed args")[^\n]*\n?)+'
test_Wvarargs_1144:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wvarargs.c'
    sources:
      binary: Wvarargs.s
  group: GRPSERIAL
  validate:
    match:
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("second parameter")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("undefined behavior")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used in function
          with fixed args")[^\n]*\n?)+'
test_Wvarargs_1145:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wvarargs.c'
    sources:
      binary: Wvarargs.s
  group: GRPSERIAL
  validate:
    match:
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("second parameter")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("undefined behavior")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used in function
          with fixed args")[^\n]*\n?)+'
test_Wvarargs_132:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wvarargs.c'
    sources:
      binary: Wvarargs.s
  group: GRPSERIAL
  validate:
    match:
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("second parameter")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("undefined behavior")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used in function
          with fixed args")[^\n]*\n?)+'
test_Wvarargs_2013:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wvarargs.c'
    sources:
      binary: Wvarargs.s
  group: GRPSERIAL
  validate:
    match:
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("second parameter")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("undefined behavior")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used in function
          with fixed args")[^\n]*\n?)+'
test_Wvarargs_2635:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wvarargs.c'
    sources:
      binary: Wvarargs.s
  group: GRPSERIAL
  validate:
    match:
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("second parameter")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("undefined behavior")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used in function
          with fixed args")[^\n]*\n?)+'
test_Wvarargs_2636:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wvarargs.c'
    sources:
      binary: Wvarargs.s
  group: GRPSERIAL
  validate:
    match:
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("second parameter")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("undefined behavior")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used in function
          with fixed args")[^\n]*\n?)+'
test_Wvarargs_2637:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wvarargs.c'
    sources:
      binary: Wvarargs.s
  group: GRPSERIAL
  validate:
    match:
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("second parameter")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("undefined behavior")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used in function
          with fixed args")[^\n]*\n?)+'
test_Wvarargs_521:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/Wvarargs.c'
    sources:
      binary: Wvarargs.s
  group: GRPSERIAL
  validate:
    match:
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("second parameter")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("undefined behavior")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used in function
          with fixed args")[^\n]*\n?)+'
test_addrtmp_1146:
  build:
    cflags: "-std=gnu++98 -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/addrtmp.c'
    sources:
      binary: addrtmp.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("may return address
          of local variable")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("may return address
          of local variable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("returns address of
          local variable")[^\n]*\n?)+'
test_addrtmp_1147:
  build:
    cflags: "-std=gnu++11 -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/addrtmp.c'
    sources:
      binary: addrtmp.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("may return address
          of local variable")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("may return address
          of local variable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("returns address of
          local variable")[^\n]*\n?)+'
test_addrtmp_1148:
  build:
    cflags: "-std=gnu++14 -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/addrtmp.c'
    sources:
      binary: addrtmp.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("may return address
          of local variable")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("may return address
          of local variable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("returns address of
          local variable")[^\n]*\n?)+'
test_addrtmp_133:
  build:
    cflags: "-Wc++-compat  -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/addrtmp.c'
    sources:
      binary: addrtmp.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("may return address
          of local variable")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("may return address
          of local variable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("returns address of
          local variable")[^\n]*\n?)+'
test_addrtmp_2014:
  build:
    cflags: "-Wc++-compat  -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/addrtmp.c'
    sources:
      binary: addrtmp.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("may return address
          of local variable")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("may return address
          of local variable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("returns address of
          local variable")[^\n]*\n?)+'
test_addrtmp_2638:
  build:
    cflags: "-std=gnu++98 -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/addrtmp.c'
    sources:
      binary: addrtmp.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("may return address
          of local variable")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("may return address
          of local variable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("returns address of
          local variable")[^\n]*\n?)+'
test_addrtmp_2639:
  build:
    cflags: "-std=gnu++11 -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/addrtmp.c'
    sources:
      binary: addrtmp.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("may return address
          of local variable")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("may return address
          of local variable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("returns address of
          local variable")[^\n]*\n?)+'
test_addrtmp_2640:
  build:
    cflags: "-std=gnu++14 -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/addrtmp.c'
    sources:
      binary: addrtmp.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("may return address
          of local variable")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("may return address
          of local variable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("returns address of
          local variable")[^\n]*\n?)+'
test_addrtmp_522:
  build:
    cflags: "-Wc++-compat  -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/addrtmp.c'
    sources:
      binary: addrtmp.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("may return address
          of local variable")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("may return address
          of local variable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("returns address of
          local variable")[^\n]*\n?)+'
test_array-lit_1149:
  build:
    cflags: -S
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/array-lit.c'
    sources:
      binary: array-lit.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array")[^\n]*\n?)+'
test_array-lit_134:
  build:
    cflags: "-Wc++-compat  -std=c99 -Wc++-compat -Werror\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/array-lit.c'
    sources:
      binary: array-lit.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array")[^\n]*\n?)+'
test_array-lit_2015:
  build:
    cflags: "-Wc++-compat  -std=c99 -Wc++-compat -Werror\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/array-lit.c'
    sources:
      binary: array-lit.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array")[^\n]*\n?)+'
test_array-lit_2641:
  build:
    cflags: -S
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/array-lit.c'
    sources:
      binary: array-lit.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array")[^\n]*\n?)+'
test_array-lit_523:
  build:
    cflags: "-Wc++-compat  -std=c99 -Wc++-compat -Werror\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/array-lit.c'
    sources:
      binary: array-lit.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array")[^\n]*\n?)+'
test_asmgoto-1_1150:
  build:
    cflags: "-std=gnu++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/asmgoto-1.c'
    sources:
      binary: asmgoto-1.s
  group: GRPSERIAL
test_asmgoto-1_1151:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/asmgoto-1.c'
    sources:
      binary: asmgoto-1.s
  group: GRPSERIAL
test_asmgoto-1_1152:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/asmgoto-1.c'
    sources:
      binary: asmgoto-1.s
  group: GRPSERIAL
test_asmgoto-1_135:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/asmgoto-1.c'
    sources:
      binary: asmgoto-1.s
  group: GRPSERIAL
test_asmgoto-1_2016:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/asmgoto-1.c'
    sources:
      binary: asmgoto-1.s
  group: GRPSERIAL
test_asmgoto-1_2642:
  build:
    cflags: "-std=gnu++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/asmgoto-1.c'
    sources:
      binary: asmgoto-1.s
  group: GRPSERIAL
test_asmgoto-1_2643:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/asmgoto-1.c'
    sources:
      binary: asmgoto-1.s
  group: GRPSERIAL
test_asmgoto-1_2644:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/asmgoto-1.c'
    sources:
      binary: asmgoto-1.s
  group: GRPSERIAL
test_asmgoto-1_524:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/asmgoto-1.c'
    sources:
      binary: asmgoto-1.s
  group: GRPSERIAL
test_asmgoto-2_1153:
  build:
    cflags: "-std=gnu++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/asmgoto-2.c'
    sources:
      binary: asmgoto-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_asmgoto-2_1154:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/asmgoto-2.c'
    sources:
      binary: asmgoto-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_asmgoto-2_1155:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/asmgoto-2.c'
    sources:
      binary: asmgoto-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_asmgoto-2_136:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/asmgoto-2.c'
    sources:
      binary: asmgoto-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_asmgoto-2_2017:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/asmgoto-2.c'
    sources:
      binary: asmgoto-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_asmgoto-2_2645:
  build:
    cflags: "-std=gnu++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/asmgoto-2.c'
    sources:
      binary: asmgoto-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_asmgoto-2_2646:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/asmgoto-2.c'
    sources:
      binary: asmgoto-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_asmgoto-2_2647:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/asmgoto-2.c'
    sources:
      binary: asmgoto-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_asmgoto-2_525:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/asmgoto-2.c'
    sources:
      binary: asmgoto-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_asmgoto-3_1156:
  build:
    cflags: "-std=gnu++98 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/asmgoto-3.c'
    sources:
      binary: asmgoto-3.s
  group: GRPSERIAL
test_asmgoto-3_1157:
  build:
    cflags: "-std=gnu++11 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/asmgoto-3.c'
    sources:
      binary: asmgoto-3.s
  group: GRPSERIAL
test_asmgoto-3_1158:
  build:
    cflags: "-std=gnu++14 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/asmgoto-3.c'
    sources:
      binary: asmgoto-3.s
  group: GRPSERIAL
test_asmgoto-3_137:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/asmgoto-3.c'
    sources:
      binary: asmgoto-3.s
  group: GRPSERIAL
test_asmgoto-3_2018:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/asmgoto-3.c'
    sources:
      binary: asmgoto-3.s
  group: GRPSERIAL
test_asmgoto-3_2648:
  build:
    cflags: "-std=gnu++98 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/asmgoto-3.c'
    sources:
      binary: asmgoto-3.s
  group: GRPSERIAL
test_asmgoto-3_2649:
  build:
    cflags: "-std=gnu++11 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/asmgoto-3.c'
    sources:
      binary: asmgoto-3.s
  group: GRPSERIAL
test_asmgoto-3_2650:
  build:
    cflags: "-std=gnu++14 -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/asmgoto-3.c'
    sources:
      binary: asmgoto-3.s
  group: GRPSERIAL
test_asmgoto-3_526:
  build:
    cflags: "-Wc++-compat  -Wunused\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/asmgoto-3.c'
    sources:
      binary: asmgoto-3.s
  group: GRPSERIAL
test_asmgoto-4_1159:
  build:
    cflags: "-std=gnu++98 -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/asmgoto-4.c'
    sources:
      binary: asmgoto-4.s
  group: GRPSERIAL
test_asmgoto-4_1160:
  build:
    cflags: "-std=gnu++11 -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/asmgoto-4.c'
    sources:
      binary: asmgoto-4.s
  group: GRPSERIAL
test_asmgoto-4_1161:
  build:
    cflags: "-std=gnu++14 -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/asmgoto-4.c'
    sources:
      binary: asmgoto-4.s
  group: GRPSERIAL
test_asmgoto-4_138:
  build:
    cflags: "-Wc++-compat  -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/asmgoto-4.c'
    sources:
      binary: asmgoto-4.s
  group: GRPSERIAL
test_asmgoto-4_2019:
  build:
    cflags: "-Wc++-compat  -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/asmgoto-4.c'
    sources:
      binary: asmgoto-4.s
  group: GRPSERIAL
test_asmgoto-4_2651:
  build:
    cflags: "-std=gnu++98 -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/asmgoto-4.c'
    sources:
      binary: asmgoto-4.s
  group: GRPSERIAL
test_asmgoto-4_2652:
  build:
    cflags: "-std=gnu++11 -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/asmgoto-4.c'
    sources:
      binary: asmgoto-4.s
  group: GRPSERIAL
test_asmgoto-4_2653:
  build:
    cflags: "-std=gnu++14 -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/asmgoto-4.c'
    sources:
      binary: asmgoto-4.s
  group: GRPSERIAL
test_asmgoto-4_527:
  build:
    cflags: "-Wc++-compat  -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/asmgoto-4.c'
    sources:
      binary: asmgoto-4.s
  group: GRPSERIAL
test_attr-aligned-1_1162:
  build:
    cflags: -std=c++98
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-aligned-1.c'
    sources:
      binary: ./attr-aligned-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_attr-aligned-1_1163:
  build:
    cflags: -std=c++11
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-aligned-1.c'
    sources:
      binary: ./attr-aligned-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_attr-aligned-1_1164:
  build:
    cflags: -std=c++14
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-aligned-1.c'
    sources:
      binary: ./attr-aligned-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_attr-aligned-1_139:
  build:
    cflags: -Wc++-compat
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-aligned-1.c'
    sources:
      binary: ./attr-aligned-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_attr-aligned-1_2020:
  build:
    cflags: -Wc++-compat
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-aligned-1.c'
    sources:
      binary: ./attr-aligned-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_attr-aligned-1_2654:
  build:
    cflags: -std=c++98
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-aligned-1.c'
    sources:
      binary: ./attr-aligned-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_attr-aligned-1_2655:
  build:
    cflags: -std=c++11
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-aligned-1.c'
    sources:
      binary: ./attr-aligned-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_attr-aligned-1_2656:
  build:
    cflags: -std=c++14
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-aligned-1.c'
    sources:
      binary: ./attr-aligned-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_attr-aligned-1_528:
  build:
    cflags: -Wc++-compat
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-aligned-1.c'
    sources:
      binary: ./attr-aligned-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_attr-fallthrough-1_1165:
  build:
    cflags: "-std=gnu++98 -Wall -Wextra -Wpedantic\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-fallthrough-1.c'
    sources:
      binary: attr-fallthrough-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid use")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid use")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("statement will never")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("not preceding")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid use")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("ignored|attribute not
          followed")[^\n]*\n?)+'
test_attr-fallthrough-1_1166:
  build:
    cflags: "-std=gnu++11 -Wall -Wextra -Wpedantic\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-fallthrough-1.c'
    sources:
      binary: attr-fallthrough-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid use")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid use")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("statement will never")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("not preceding")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid use")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("ignored|attribute not
          followed")[^\n]*\n?)+'
test_attr-fallthrough-1_1167:
  build:
    cflags: "-std=gnu++14 -Wall -Wextra -Wpedantic\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-fallthrough-1.c'
    sources:
      binary: attr-fallthrough-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid use")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid use")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("statement will never")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("not preceding")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid use")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("ignored|attribute not
          followed")[^\n]*\n?)+'
test_attr-fallthrough-1_140:
  build:
    cflags: "-Wc++-compat  -Wall -Wextra -Wpedantic\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-fallthrough-1.c'
    sources:
      binary: attr-fallthrough-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid use")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid use")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("statement will never")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("not preceding")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid use")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("ignored|attribute not
          followed")[^\n]*\n?)+'
test_attr-fallthrough-1_2021:
  build:
    cflags: "-Wc++-compat  -Wall -Wextra -Wpedantic\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-fallthrough-1.c'
    sources:
      binary: attr-fallthrough-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid use")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid use")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("statement will never")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("not preceding")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid use")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("ignored|attribute not
          followed")[^\n]*\n?)+'
test_attr-fallthrough-1_2657:
  build:
    cflags: "-std=gnu++98 -Wall -Wextra -Wpedantic\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-fallthrough-1.c'
    sources:
      binary: attr-fallthrough-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid use")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid use")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("statement will never")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("not preceding")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid use")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("ignored|attribute not
          followed")[^\n]*\n?)+'
test_attr-fallthrough-1_2658:
  build:
    cflags: "-std=gnu++11 -Wall -Wextra -Wpedantic\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-fallthrough-1.c'
    sources:
      binary: attr-fallthrough-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid use")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid use")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("statement will never")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("not preceding")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid use")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("ignored|attribute not
          followed")[^\n]*\n?)+'
test_attr-fallthrough-1_2659:
  build:
    cflags: "-std=gnu++14 -Wall -Wextra -Wpedantic\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-fallthrough-1.c'
    sources:
      binary: attr-fallthrough-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid use")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid use")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("statement will never")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("not preceding")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid use")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("ignored|attribute not
          followed")[^\n]*\n?)+'
test_attr-fallthrough-1_529:
  build:
    cflags: "-Wc++-compat  -Wall -Wextra -Wpedantic\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-fallthrough-1.c'
    sources:
      binary: attr-fallthrough-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid use")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid use")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("statement will never")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("not preceding")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("statement may fall
          through")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid use")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("ignored|attribute not
          followed")[^\n]*\n?)+'
test_attr-fallthrough-2_1168:
  build:
    cflags: "-std=gnu++98 -Wall -Wextra -Wpedantic -Wno-unused -Wno-implicit-fallthrough\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-fallthrough-2.c'
    sources:
      binary: attr-fallthrough-2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("empty declaration")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("empty declaration")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("not followed")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("not followed")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("ignored|not followed")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("specified with a parameter")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("attribute specified
          multiple times")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("not preceding")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored")[^\n]*\n?)+'
test_attr-fallthrough-2_1169:
  build:
    cflags: "-std=gnu++11 -Wall -Wextra -Wpedantic -Wno-unused -Wno-implicit-fallthrough\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-fallthrough-2.c'
    sources:
      binary: attr-fallthrough-2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("empty declaration")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("empty declaration")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("not followed")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("not followed")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("ignored|not followed")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("specified with a parameter")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("attribute specified
          multiple times")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("not preceding")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored")[^\n]*\n?)+'
test_attr-fallthrough-2_1170:
  build:
    cflags: "-std=gnu++14 -Wall -Wextra -Wpedantic -Wno-unused -Wno-implicit-fallthrough\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-fallthrough-2.c'
    sources:
      binary: attr-fallthrough-2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("empty declaration")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("empty declaration")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("not followed")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("not followed")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("ignored|not followed")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("specified with a parameter")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("attribute specified
          multiple times")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("not preceding")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored")[^\n]*\n?)+'
test_attr-fallthrough-2_141:
  build:
    cflags: "-Wc++-compat  -Wall -Wextra -Wpedantic -Wno-unused -Wno-implicit-fallthrough\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-fallthrough-2.c'
    sources:
      binary: attr-fallthrough-2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("empty declaration")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("empty declaration")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("not followed")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("not followed")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("ignored|not followed")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("specified with a parameter")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("attribute specified
          multiple times")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("not preceding")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored")[^\n]*\n?)+'
test_attr-fallthrough-2_2022:
  build:
    cflags: "-Wc++-compat  -Wall -Wextra -Wpedantic -Wno-unused -Wno-implicit-fallthrough\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-fallthrough-2.c'
    sources:
      binary: attr-fallthrough-2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("empty declaration")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("empty declaration")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("not followed")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("not followed")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("ignored|not followed")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("specified with a parameter")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("attribute specified
          multiple times")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("not preceding")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored")[^\n]*\n?)+'
test_attr-fallthrough-2_2660:
  build:
    cflags: "-std=gnu++98 -Wall -Wextra -Wpedantic -Wno-unused -Wno-implicit-fallthrough\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-fallthrough-2.c'
    sources:
      binary: attr-fallthrough-2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("empty declaration")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("empty declaration")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("not followed")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("not followed")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("ignored|not followed")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("specified with a parameter")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("attribute specified
          multiple times")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("not preceding")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored")[^\n]*\n?)+'
test_attr-fallthrough-2_2661:
  build:
    cflags: "-std=gnu++11 -Wall -Wextra -Wpedantic -Wno-unused -Wno-implicit-fallthrough\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-fallthrough-2.c'
    sources:
      binary: attr-fallthrough-2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("empty declaration")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("empty declaration")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("not followed")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("not followed")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("ignored|not followed")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("specified with a parameter")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("attribute specified
          multiple times")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("not preceding")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored")[^\n]*\n?)+'
test_attr-fallthrough-2_2662:
  build:
    cflags: "-std=gnu++14 -Wall -Wextra -Wpedantic -Wno-unused -Wno-implicit-fallthrough\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-fallthrough-2.c'
    sources:
      binary: attr-fallthrough-2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("empty declaration")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("empty declaration")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("not followed")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("not followed")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("ignored|not followed")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("specified with a parameter")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("attribute specified
          multiple times")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("not preceding")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored")[^\n]*\n?)+'
test_attr-fallthrough-2_530:
  build:
    cflags: "-Wc++-compat  -Wall -Wextra -Wpedantic -Wno-unused -Wno-implicit-fallthrough\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-fallthrough-2.c'
    sources:
      binary: attr-fallthrough-2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("empty declaration")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("empty declaration")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("not followed")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("not followed")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("ignored|not followed")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("specified with a parameter")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("attribute specified
          multiple times")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("not preceding")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored")[^\n]*\n?)+'
test_attr-may-alias-1_1171:
  build:
    cflags: "-std=gnu++98 -O2 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-may-alias-1.c'
    sources:
      binary: attr-may-alias-1.s
  group: GRPSERIAL
test_attr-may-alias-1_1172:
  build:
    cflags: "-std=gnu++11 -O2 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-may-alias-1.c'
    sources:
      binary: attr-may-alias-1.s
  group: GRPSERIAL
test_attr-may-alias-1_1173:
  build:
    cflags: "-std=gnu++14 -O2 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-may-alias-1.c'
    sources:
      binary: attr-may-alias-1.s
  group: GRPSERIAL
test_attr-may-alias-1_142:
  build:
    cflags: "-Wc++-compat  -O2 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-may-alias-1.c'
    sources:
      binary: attr-may-alias-1.s
  group: GRPSERIAL
test_attr-may-alias-1_2023:
  build:
    cflags: "-Wc++-compat  -O2 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-may-alias-1.c'
    sources:
      binary: attr-may-alias-1.s
  group: GRPSERIAL
test_attr-may-alias-1_2663:
  build:
    cflags: "-std=gnu++98 -O2 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-may-alias-1.c'
    sources:
      binary: attr-may-alias-1.s
  group: GRPSERIAL
test_attr-may-alias-1_2664:
  build:
    cflags: "-std=gnu++11 -O2 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-may-alias-1.c'
    sources:
      binary: attr-may-alias-1.s
  group: GRPSERIAL
test_attr-may-alias-1_2665:
  build:
    cflags: "-std=gnu++14 -O2 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-may-alias-1.c'
    sources:
      binary: attr-may-alias-1.s
  group: GRPSERIAL
test_attr-may-alias-1_531:
  build:
    cflags: "-Wc++-compat  -O2 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-may-alias-1.c'
    sources:
      binary: attr-may-alias-1.s
  group: GRPSERIAL
test_attr-may-alias-2_1174:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-may-alias-2.c'
    sources:
      binary: attr-may-alias-2.s
  group: GRPSERIAL
test_attr-may-alias-2_1175:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-may-alias-2.c'
    sources:
      binary: attr-may-alias-2.s
  group: GRPSERIAL
test_attr-may-alias-2_1176:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-may-alias-2.c'
    sources:
      binary: attr-may-alias-2.s
  group: GRPSERIAL
test_attr-may-alias-2_143:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-may-alias-2.c'
    sources:
      binary: attr-may-alias-2.s
  group: GRPSERIAL
test_attr-may-alias-2_2024:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-may-alias-2.c'
    sources:
      binary: attr-may-alias-2.s
  group: GRPSERIAL
test_attr-may-alias-2_2666:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-may-alias-2.c'
    sources:
      binary: attr-may-alias-2.s
  group: GRPSERIAL
test_attr-may-alias-2_2667:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-may-alias-2.c'
    sources:
      binary: attr-may-alias-2.s
  group: GRPSERIAL
test_attr-may-alias-2_2668:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-may-alias-2.c'
    sources:
      binary: attr-may-alias-2.s
  group: GRPSERIAL
test_attr-may-alias-2_532:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-may-alias-2.c'
    sources:
      binary: attr-may-alias-2.s
  group: GRPSERIAL
test_attr-opt-1_1177:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-opt-1.c'
    sources:
      binary: attr-opt-1.s
  group: GRPSERIAL
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("optimization attribute")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("optimization attribute")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("optimization attribute")[^\n]*\n?)+'
test_attr-opt-1_1178:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-opt-1.c'
    sources:
      binary: attr-opt-1.s
  group: GRPSERIAL
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("optimization attribute")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("optimization attribute")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("optimization attribute")[^\n]*\n?)+'
test_attr-opt-1_1179:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-opt-1.c'
    sources:
      binary: attr-opt-1.s
  group: GRPSERIAL
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("optimization attribute")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("optimization attribute")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("optimization attribute")[^\n]*\n?)+'
test_attr-opt-1_144:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-opt-1.c'
    sources:
      binary: attr-opt-1.s
  group: GRPSERIAL
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("optimization attribute")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("optimization attribute")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("optimization attribute")[^\n]*\n?)+'
test_attr-opt-1_2025:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-opt-1.c'
    sources:
      binary: attr-opt-1.s
  group: GRPSERIAL
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("optimization attribute")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("optimization attribute")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("optimization attribute")[^\n]*\n?)+'
test_attr-opt-1_2669:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-opt-1.c'
    sources:
      binary: attr-opt-1.s
  group: GRPSERIAL
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("optimization attribute")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("optimization attribute")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("optimization attribute")[^\n]*\n?)+'
test_attr-opt-1_2670:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-opt-1.c'
    sources:
      binary: attr-opt-1.s
  group: GRPSERIAL
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("optimization attribute")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("optimization attribute")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("optimization attribute")[^\n]*\n?)+'
test_attr-opt-1_2671:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-opt-1.c'
    sources:
      binary: attr-opt-1.s
  group: GRPSERIAL
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("optimization attribute")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("optimization attribute")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("optimization attribute")[^\n]*\n?)+'
test_attr-opt-1_533:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-opt-1.c'
    sources:
      binary: attr-opt-1.s
  group: GRPSERIAL
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("optimization attribute")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("optimization attribute")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("optimization attribute")[^\n]*\n?)+'
test_attr-simd-2_1180:
  build:
    cflags: "-std=gnu++98 -fdump-tree-optimized -fopenmp-simd -ffat-lto-objects\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-simd-2.c'
    sources:
      binary: attr-simd-2.s
  group: GRPSERIAL
test_attr-simd-2_1181:
  build:
    cflags: "-std=gnu++11 -fdump-tree-optimized -fopenmp-simd -ffat-lto-objects\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-simd-2.c'
    sources:
      binary: attr-simd-2.s
  group: GRPSERIAL
test_attr-simd-2_1182:
  build:
    cflags: "-std=gnu++14 -fdump-tree-optimized -fopenmp-simd -ffat-lto-objects\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-simd-2.c'
    sources:
      binary: attr-simd-2.s
  group: GRPSERIAL
test_attr-simd-2_145:
  build:
    cflags: "-Wc++-compat -fdump-tree-optimized -fopenmp-simd -ffat-lto-objects\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-simd-2.c'
    sources:
      binary: attr-simd-2.s
  group: GRPSERIAL
test_attr-simd-2_2026:
  build:
    cflags: "-Wc++-compat -fdump-tree-optimized -fopenmp-simd -ffat-lto-objects\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-simd-2.c'
    sources:
      binary: attr-simd-2.s
  group: GRPSERIAL
test_attr-simd-2_2672:
  build:
    cflags: "-std=gnu++98 -fdump-tree-optimized -fopenmp-simd -ffat-lto-objects\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-simd-2.c'
    sources:
      binary: attr-simd-2.s
  group: GRPSERIAL
test_attr-simd-2_2673:
  build:
    cflags: "-std=gnu++11 -fdump-tree-optimized -fopenmp-simd -ffat-lto-objects\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-simd-2.c'
    sources:
      binary: attr-simd-2.s
  group: GRPSERIAL
test_attr-simd-2_2674:
  build:
    cflags: "-std=gnu++14 -fdump-tree-optimized -fopenmp-simd -ffat-lto-objects\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-simd-2.c'
    sources:
      binary: attr-simd-2.s
  group: GRPSERIAL
test_attr-simd-2_534:
  build:
    cflags: "-Wc++-compat -fdump-tree-optimized -fopenmp-simd -ffat-lto-objects\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-simd-2.c'
    sources:
      binary: attr-simd-2.s
  group: GRPSERIAL
test_attr-simd-4_1183:
  build:
    cflags: "-std=gnu++98 -fdump-tree-optimized -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-simd-4.c'
    sources:
      binary: attr-simd-4.s
  group: GRPSERIAL
test_attr-simd-4_1184:
  build:
    cflags: "-std=gnu++11 -fdump-tree-optimized -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-simd-4.c'
    sources:
      binary: attr-simd-4.s
  group: GRPSERIAL
test_attr-simd-4_1185:
  build:
    cflags: "-std=gnu++14 -fdump-tree-optimized -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-simd-4.c'
    sources:
      binary: attr-simd-4.s
  group: GRPSERIAL
test_attr-simd-4_146:
  build:
    cflags: "-Wc++-compat -fdump-tree-optimized -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-simd-4.c'
    sources:
      binary: attr-simd-4.s
  group: GRPSERIAL
test_attr-simd-4_2027:
  build:
    cflags: "-Wc++-compat -fdump-tree-optimized -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-simd-4.c'
    sources:
      binary: attr-simd-4.s
  group: GRPSERIAL
test_attr-simd-4_2675:
  build:
    cflags: "-std=gnu++98 -fdump-tree-optimized -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-simd-4.c'
    sources:
      binary: attr-simd-4.s
  group: GRPSERIAL
test_attr-simd-4_2676:
  build:
    cflags: "-std=gnu++11 -fdump-tree-optimized -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-simd-4.c'
    sources:
      binary: attr-simd-4.s
  group: GRPSERIAL
test_attr-simd-4_2677:
  build:
    cflags: "-std=gnu++14 -fdump-tree-optimized -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-simd-4.c'
    sources:
      binary: attr-simd-4.s
  group: GRPSERIAL
test_attr-simd-4_535:
  build:
    cflags: "-Wc++-compat -fdump-tree-optimized -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-simd-4.c'
    sources:
      binary: attr-simd-4.s
  group: GRPSERIAL
test_attr-simd-5_1186:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-simd-5.c'
    sources:
      binary: attr-simd-5.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only \''inbranch\''
          and \''notinbranch\''")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong number of
          arguments specified")[^\n]*\n?)+'
test_attr-simd-5_1187:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-simd-5.c'
    sources:
      binary: attr-simd-5.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only \''inbranch\''
          and \''notinbranch\''")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong number of
          arguments specified")[^\n]*\n?)+'
test_attr-simd-5_1188:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-simd-5.c'
    sources:
      binary: attr-simd-5.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only \''inbranch\''
          and \''notinbranch\''")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong number of
          arguments specified")[^\n]*\n?)+'
test_attr-simd-5_147:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-simd-5.c'
    sources:
      binary: attr-simd-5.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only \''inbranch\''
          and \''notinbranch\''")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong number of
          arguments specified")[^\n]*\n?)+'
test_attr-simd-5_2028:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-simd-5.c'
    sources:
      binary: attr-simd-5.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only \''inbranch\''
          and \''notinbranch\''")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong number of
          arguments specified")[^\n]*\n?)+'
test_attr-simd-5_2678:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-simd-5.c'
    sources:
      binary: attr-simd-5.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only \''inbranch\''
          and \''notinbranch\''")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong number of
          arguments specified")[^\n]*\n?)+'
test_attr-simd-5_2679:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-simd-5.c'
    sources:
      binary: attr-simd-5.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only \''inbranch\''
          and \''notinbranch\''")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong number of
          arguments specified")[^\n]*\n?)+'
test_attr-simd-5_2680:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-simd-5.c'
    sources:
      binary: attr-simd-5.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only \''inbranch\''
          and \''notinbranch\''")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong number of
          arguments specified")[^\n]*\n?)+'
test_attr-simd-5_536:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-simd-5.c'
    sources:
      binary: attr-simd-5.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only \''inbranch\''
          and \''notinbranch\''")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong number of
          arguments specified")[^\n]*\n?)+'
test_attr-simd_1189:
  build:
    cflags: "-std=gnu++98 -fdump-tree-optimized -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-simd.c'
    sources:
      binary: attr-simd.s
  group: GRPSERIAL
test_attr-simd_1190:
  build:
    cflags: "-std=gnu++11 -fdump-tree-optimized -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-simd.c'
    sources:
      binary: attr-simd.s
  group: GRPSERIAL
test_attr-simd_1191:
  build:
    cflags: "-std=gnu++14 -fdump-tree-optimized -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-simd.c'
    sources:
      binary: attr-simd.s
  group: GRPSERIAL
test_attr-simd_148:
  build:
    cflags: "-Wc++-compat -fdump-tree-optimized -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-simd.c'
    sources:
      binary: attr-simd.s
  group: GRPSERIAL
test_attr-simd_2029:
  build:
    cflags: "-Wc++-compat -fdump-tree-optimized -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-simd.c'
    sources:
      binary: attr-simd.s
  group: GRPSERIAL
test_attr-simd_2681:
  build:
    cflags: "-std=gnu++98 -fdump-tree-optimized -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-simd.c'
    sources:
      binary: attr-simd.s
  group: GRPSERIAL
test_attr-simd_2682:
  build:
    cflags: "-std=gnu++11 -fdump-tree-optimized -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-simd.c'
    sources:
      binary: attr-simd.s
  group: GRPSERIAL
test_attr-simd_2683:
  build:
    cflags: "-std=gnu++14 -fdump-tree-optimized -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-simd.c'
    sources:
      binary: attr-simd.s
  group: GRPSERIAL
test_attr-simd_537:
  build:
    cflags: "-Wc++-compat -fdump-tree-optimized -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-simd.c'
    sources:
      binary: attr-simd.s
  group: GRPSERIAL
test_attr-used-2_1192:
  build:
    cflags: "-std=gnu++98 -Wall -O2 -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-used-2.c'
    sources:
      binary: attr-used-2.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored|unused
          variable")[^\n]*\n?)+'
test_attr-used-2_1193:
  build:
    cflags: "-std=gnu++11 -Wall -O2 -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-used-2.c'
    sources:
      binary: attr-used-2.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored|unused
          variable")[^\n]*\n?)+'
test_attr-used-2_1194:
  build:
    cflags: "-std=gnu++14 -Wall -O2 -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-used-2.c'
    sources:
      binary: attr-used-2.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored|unused
          variable")[^\n]*\n?)+'
test_attr-used-2_149:
  build:
    cflags: "-Wc++-compat -Wall -O2 -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-used-2.c'
    sources:
      binary: attr-used-2.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored|unused
          variable")[^\n]*\n?)+'
test_attr-used-2_2030:
  build:
    cflags: "-Wc++-compat -Wall -O2 -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-used-2.c'
    sources:
      binary: attr-used-2.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored|unused
          variable")[^\n]*\n?)+'
test_attr-used-2_2684:
  build:
    cflags: "-std=gnu++98 -Wall -O2 -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-used-2.c'
    sources:
      binary: attr-used-2.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored|unused
          variable")[^\n]*\n?)+'
test_attr-used-2_2685:
  build:
    cflags: "-std=gnu++11 -Wall -O2 -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-used-2.c'
    sources:
      binary: attr-used-2.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored|unused
          variable")[^\n]*\n?)+'
test_attr-used-2_2686:
  build:
    cflags: "-std=gnu++14 -Wall -O2 -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-used-2.c'
    sources:
      binary: attr-used-2.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored|unused
          variable")[^\n]*\n?)+'
test_attr-used-2_538:
  build:
    cflags: "-Wc++-compat -Wall -O2 -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-used-2.c'
    sources:
      binary: attr-used-2.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored|unused
          variable")[^\n]*\n?)+'
test_attr-used_1195:
  build:
    cflags: "-std=gnu++98 -O3 -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-used.c'
    sources:
      binary: attr-used.s
  group: GRPSERIAL
test_attr-used_1196:
  build:
    cflags: "-std=gnu++11 -O3 -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-used.c'
    sources:
      binary: attr-used.s
  group: GRPSERIAL
test_attr-used_1197:
  build:
    cflags: "-std=gnu++14 -O3 -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-used.c'
    sources:
      binary: attr-used.s
  group: GRPSERIAL
test_attr-used_150:
  build:
    cflags: "-Wc++-compat -O3 -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-used.c'
    sources:
      binary: attr-used.s
  group: GRPSERIAL
test_attr-used_2031:
  build:
    cflags: "-Wc++-compat -O3 -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-used.c'
    sources:
      binary: attr-used.s
  group: GRPSERIAL
test_attr-used_2687:
  build:
    cflags: "-std=gnu++98 -O3 -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-used.c'
    sources:
      binary: attr-used.s
  group: GRPSERIAL
test_attr-used_2688:
  build:
    cflags: "-std=gnu++11 -O3 -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-used.c'
    sources:
      binary: attr-used.s
  group: GRPSERIAL
test_attr-used_2689:
  build:
    cflags: "-std=gnu++14 -O3 -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-used.c'
    sources:
      binary: attr-used.s
  group: GRPSERIAL
test_attr-used_539:
  build:
    cflags: "-Wc++-compat -O3 -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-used.c'
    sources:
      binary: attr-used.s
  group: GRPSERIAL
test_attr-warn-unused-result_1198:
  build:
    cflags: "-std=gnu++98 -O -ftrack-macro-expansion=0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-warn-unused-result.c'
    sources:
      binary: attr-warn-unused-result.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+(:100:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+(:102:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+(:110:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+(:120:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L122:
        expect: true
        expr: '(^|\n)([^\n]+(:122:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+(:128:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+(:129:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+(:134:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+(:135:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L136:
        expect: true
        expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+(:142:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L143:
        expect: true
        expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+(:159:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+(:164:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+(:166:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L171:
        expect: true
        expr: '(^|\n)([^\n]+(:171:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+(:172:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L173:
        expect: true
        expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L179:
        expect: true
        expr: '(^|\n)([^\n]+(:179:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+(:180:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L185:
        expect: true
        expr: '(^|\n)([^\n]+(:185:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+(:186:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+(:70:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
test_attr-warn-unused-result_1199:
  build:
    cflags: "-std=gnu++11 -O -ftrack-macro-expansion=0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-warn-unused-result.c'
    sources:
      binary: attr-warn-unused-result.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+(:100:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+(:102:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+(:110:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+(:120:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L122:
        expect: true
        expr: '(^|\n)([^\n]+(:122:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+(:128:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+(:129:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+(:134:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+(:135:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L136:
        expect: true
        expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+(:142:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L143:
        expect: true
        expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+(:159:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+(:164:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+(:166:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L171:
        expect: true
        expr: '(^|\n)([^\n]+(:171:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+(:172:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L173:
        expect: true
        expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L179:
        expect: true
        expr: '(^|\n)([^\n]+(:179:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+(:180:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L185:
        expect: true
        expr: '(^|\n)([^\n]+(:185:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+(:186:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+(:70:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
test_attr-warn-unused-result_1200:
  build:
    cflags: "-std=gnu++14 -O -ftrack-macro-expansion=0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-warn-unused-result.c'
    sources:
      binary: attr-warn-unused-result.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+(:100:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+(:102:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+(:110:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+(:120:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L122:
        expect: true
        expr: '(^|\n)([^\n]+(:122:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+(:128:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+(:129:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+(:134:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+(:135:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L136:
        expect: true
        expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+(:142:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L143:
        expect: true
        expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+(:159:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+(:164:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+(:166:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L171:
        expect: true
        expr: '(^|\n)([^\n]+(:171:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+(:172:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L173:
        expect: true
        expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L179:
        expect: true
        expr: '(^|\n)([^\n]+(:179:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+(:180:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L185:
        expect: true
        expr: '(^|\n)([^\n]+(:185:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+(:186:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+(:70:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
test_attr-warn-unused-result_151:
  build:
    cflags: "-Wc++-compat  -O -ftrack-macro-expansion=0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-warn-unused-result.c'
    sources:
      binary: attr-warn-unused-result.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+(:100:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+(:102:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+(:110:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+(:120:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L122:
        expect: true
        expr: '(^|\n)([^\n]+(:122:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+(:128:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+(:129:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+(:134:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+(:135:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L136:
        expect: true
        expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+(:142:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L143:
        expect: true
        expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+(:159:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+(:164:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+(:166:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L171:
        expect: true
        expr: '(^|\n)([^\n]+(:171:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+(:172:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L173:
        expect: true
        expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L179:
        expect: true
        expr: '(^|\n)([^\n]+(:179:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+(:180:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L185:
        expect: true
        expr: '(^|\n)([^\n]+(:185:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+(:186:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+(:70:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
test_attr-warn-unused-result_2032:
  build:
    cflags: "-Wc++-compat  -O -ftrack-macro-expansion=0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-warn-unused-result.c'
    sources:
      binary: attr-warn-unused-result.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+(:100:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+(:102:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+(:110:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+(:120:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L122:
        expect: true
        expr: '(^|\n)([^\n]+(:122:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+(:128:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+(:129:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+(:134:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+(:135:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L136:
        expect: true
        expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+(:142:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L143:
        expect: true
        expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+(:159:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+(:164:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+(:166:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L171:
        expect: true
        expr: '(^|\n)([^\n]+(:171:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+(:172:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L173:
        expect: true
        expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L179:
        expect: true
        expr: '(^|\n)([^\n]+(:179:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+(:180:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L185:
        expect: true
        expr: '(^|\n)([^\n]+(:185:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+(:186:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+(:70:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
test_attr-warn-unused-result_2690:
  build:
    cflags: "-std=gnu++98 -O -ftrack-macro-expansion=0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-warn-unused-result.c'
    sources:
      binary: attr-warn-unused-result.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+(:100:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+(:102:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+(:110:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+(:120:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L122:
        expect: true
        expr: '(^|\n)([^\n]+(:122:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+(:128:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+(:129:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+(:134:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+(:135:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L136:
        expect: true
        expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+(:142:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L143:
        expect: true
        expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+(:159:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+(:164:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+(:166:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L171:
        expect: true
        expr: '(^|\n)([^\n]+(:171:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+(:172:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L173:
        expect: true
        expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L179:
        expect: true
        expr: '(^|\n)([^\n]+(:179:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+(:180:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L185:
        expect: true
        expr: '(^|\n)([^\n]+(:185:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+(:186:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+(:70:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
test_attr-warn-unused-result_2691:
  build:
    cflags: "-std=gnu++11 -O -ftrack-macro-expansion=0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-warn-unused-result.c'
    sources:
      binary: attr-warn-unused-result.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+(:100:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+(:102:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+(:110:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+(:120:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L122:
        expect: true
        expr: '(^|\n)([^\n]+(:122:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+(:128:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+(:129:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+(:134:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+(:135:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L136:
        expect: true
        expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+(:142:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L143:
        expect: true
        expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+(:159:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+(:164:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+(:166:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L171:
        expect: true
        expr: '(^|\n)([^\n]+(:171:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+(:172:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L173:
        expect: true
        expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L179:
        expect: true
        expr: '(^|\n)([^\n]+(:179:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+(:180:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L185:
        expect: true
        expr: '(^|\n)([^\n]+(:185:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+(:186:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+(:70:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
test_attr-warn-unused-result_2692:
  build:
    cflags: "-std=gnu++14 -O -ftrack-macro-expansion=0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-warn-unused-result.c'
    sources:
      binary: attr-warn-unused-result.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+(:100:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+(:102:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+(:110:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+(:120:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L122:
        expect: true
        expr: '(^|\n)([^\n]+(:122:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+(:128:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+(:129:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+(:134:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+(:135:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L136:
        expect: true
        expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+(:142:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L143:
        expect: true
        expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+(:159:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+(:164:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+(:166:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L171:
        expect: true
        expr: '(^|\n)([^\n]+(:171:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+(:172:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L173:
        expect: true
        expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L179:
        expect: true
        expr: '(^|\n)([^\n]+(:179:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+(:180:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L185:
        expect: true
        expr: '(^|\n)([^\n]+(:185:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+(:186:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+(:70:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
test_attr-warn-unused-result_540:
  build:
    cflags: "-Wc++-compat  -O -ftrack-macro-expansion=0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attr-warn-unused-result.c'
    sources:
      binary: attr-warn-unused-result.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+(:100:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+(:102:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+(:110:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+(:120:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L122:
        expect: true
        expr: '(^|\n)([^\n]+(:122:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+(:128:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+(:129:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+(:134:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+(:135:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L136:
        expect: true
        expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+(:142:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L143:
        expect: true
        expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+(:159:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+(:164:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+(:166:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L171:
        expect: true
        expr: '(^|\n)([^\n]+(:171:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+(:172:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L173:
        expect: true
        expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L179:
        expect: true
        expr: '(^|\n)([^\n]+(:179:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+(:180:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L185:
        expect: true
        expr: '(^|\n)([^\n]+(:185:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+(:186:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+(:70:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("ignoring return value
          of")[^\n]*\n?)+'
test_attributes-1_1201:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-1.c'
    sources:
      binary: attributes-1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operand")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("outside range")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("outside range")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operand")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operand")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid value|not
          an integer")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("outside range")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("outside range")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operand")[^\n]*\n?)+'
test_attributes-1_1202:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-1.c'
    sources:
      binary: attributes-1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operand")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("outside range")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("outside range")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operand")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operand")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid value|not
          an integer")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("outside range")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("outside range")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operand")[^\n]*\n?)+'
test_attributes-1_1203:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-1.c'
    sources:
      binary: attributes-1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operand")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("outside range")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("outside range")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operand")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operand")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid value|not
          an integer")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("outside range")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("outside range")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operand")[^\n]*\n?)+'
test_attributes-1_152:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-1.c'
    sources:
      binary: attributes-1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operand")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("outside range")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("outside range")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operand")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operand")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid value|not
          an integer")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("outside range")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("outside range")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operand")[^\n]*\n?)+'
test_attributes-1_2033:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-1.c'
    sources:
      binary: attributes-1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operand")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("outside range")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("outside range")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operand")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operand")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid value|not
          an integer")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("outside range")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("outside range")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operand")[^\n]*\n?)+'
test_attributes-1_2693:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-1.c'
    sources:
      binary: attributes-1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operand")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("outside range")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("outside range")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operand")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operand")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid value|not
          an integer")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("outside range")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("outside range")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operand")[^\n]*\n?)+'
test_attributes-1_2694:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-1.c'
    sources:
      binary: attributes-1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operand")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("outside range")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("outside range")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operand")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operand")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid value|not
          an integer")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("outside range")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("outside range")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operand")[^\n]*\n?)+'
test_attributes-1_2695:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-1.c'
    sources:
      binary: attributes-1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operand")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("outside range")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("outside range")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operand")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operand")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid value|not
          an integer")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("outside range")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("outside range")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operand")[^\n]*\n?)+'
test_attributes-1_541:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-1.c'
    sources:
      binary: attributes-1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operand")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("outside range")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("outside range")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operand")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operand")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid value|not
          an integer")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("outside range")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("outside range")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operand")[^\n]*\n?)+'
test_attributes-2_1204:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-2.c'
    sources:
      binary: attributes-2.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared here|not
          declared")[^\n]*\n?)+'
test_attributes-2_1205:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-2.c'
    sources:
      binary: attributes-2.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared here|not
          declared")[^\n]*\n?)+'
test_attributes-2_1206:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-2.c'
    sources:
      binary: attributes-2.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared here|not
          declared")[^\n]*\n?)+'
test_attributes-2_153:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-2.c'
    sources:
      binary: attributes-2.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared here|not
          declared")[^\n]*\n?)+'
test_attributes-2_2034:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-2.c'
    sources:
      binary: attributes-2.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared here|not
          declared")[^\n]*\n?)+'
test_attributes-2_2696:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-2.c'
    sources:
      binary: attributes-2.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared here|not
          declared")[^\n]*\n?)+'
test_attributes-2_2697:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-2.c'
    sources:
      binary: attributes-2.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared here|not
          declared")[^\n]*\n?)+'
test_attributes-2_2698:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-2.c'
    sources:
      binary: attributes-2.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared here|not
          declared")[^\n]*\n?)+'
test_attributes-2_542:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-2.c'
    sources:
      binary: attributes-2.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared here|not
          declared")[^\n]*\n?)+'
test_attributes-3_1207:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-3.c'
    sources:
      binary: attributes-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("inline declaration
          of")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("attribute noinline
          follows inline declaration")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("attribute .noinline.
          follows declaration with attribute .always_inline.")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("attribute .always_inline.
          follows declaration with attribute .noinline.")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("attribute .cold. follows
          declaration with attribute .hot.")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("attribute .hot. follows
          declaration with attribute .cold.")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("optimization attribute")[^\n]*\n?)+'
test_attributes-3_1208:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-3.c'
    sources:
      binary: attributes-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("inline declaration
          of")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("attribute noinline
          follows inline declaration")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("attribute .noinline.
          follows declaration with attribute .always_inline.")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("attribute .always_inline.
          follows declaration with attribute .noinline.")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("attribute .cold. follows
          declaration with attribute .hot.")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("attribute .hot. follows
          declaration with attribute .cold.")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("optimization attribute")[^\n]*\n?)+'
test_attributes-3_1209:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-3.c'
    sources:
      binary: attributes-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("inline declaration
          of")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("attribute noinline
          follows inline declaration")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("attribute .noinline.
          follows declaration with attribute .always_inline.")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("attribute .always_inline.
          follows declaration with attribute .noinline.")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("attribute .cold. follows
          declaration with attribute .hot.")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("attribute .hot. follows
          declaration with attribute .cold.")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("optimization attribute")[^\n]*\n?)+'
test_attributes-3_154:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-3.c'
    sources:
      binary: attributes-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("inline declaration
          of")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("attribute noinline
          follows inline declaration")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("attribute .noinline.
          follows declaration with attribute .always_inline.")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("attribute .always_inline.
          follows declaration with attribute .noinline.")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("attribute .cold. follows
          declaration with attribute .hot.")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("attribute .hot. follows
          declaration with attribute .cold.")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("optimization attribute")[^\n]*\n?)+'
test_attributes-3_2035:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-3.c'
    sources:
      binary: attributes-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("inline declaration
          of")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("attribute noinline
          follows inline declaration")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("attribute .noinline.
          follows declaration with attribute .always_inline.")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("attribute .always_inline.
          follows declaration with attribute .noinline.")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("attribute .cold. follows
          declaration with attribute .hot.")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("attribute .hot. follows
          declaration with attribute .cold.")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("optimization attribute")[^\n]*\n?)+'
test_attributes-3_2699:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-3.c'
    sources:
      binary: attributes-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("inline declaration
          of")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("attribute noinline
          follows inline declaration")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("attribute .noinline.
          follows declaration with attribute .always_inline.")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("attribute .always_inline.
          follows declaration with attribute .noinline.")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("attribute .cold. follows
          declaration with attribute .hot.")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("attribute .hot. follows
          declaration with attribute .cold.")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("optimization attribute")[^\n]*\n?)+'
test_attributes-3_2700:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-3.c'
    sources:
      binary: attributes-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("inline declaration
          of")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("attribute noinline
          follows inline declaration")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("attribute .noinline.
          follows declaration with attribute .always_inline.")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("attribute .always_inline.
          follows declaration with attribute .noinline.")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("attribute .cold. follows
          declaration with attribute .hot.")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("attribute .hot. follows
          declaration with attribute .cold.")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("optimization attribute")[^\n]*\n?)+'
test_attributes-3_2701:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-3.c'
    sources:
      binary: attributes-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("inline declaration
          of")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("attribute noinline
          follows inline declaration")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("attribute .noinline.
          follows declaration with attribute .always_inline.")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("attribute .always_inline.
          follows declaration with attribute .noinline.")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("attribute .cold. follows
          declaration with attribute .hot.")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("attribute .hot. follows
          declaration with attribute .cold.")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("optimization attribute")[^\n]*\n?)+'
test_attributes-3_543:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-3.c'
    sources:
      binary: attributes-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("inline declaration
          of")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("attribute noinline
          follows inline declaration")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("attribute .noinline.
          follows declaration with attribute .always_inline.")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("attribute .always_inline.
          follows declaration with attribute .noinline.")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("attribute .cold. follows
          declaration with attribute .hot.")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("attribute .hot. follows
          declaration with attribute .cold.")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("optimization attribute")[^\n]*\n?)+'
test_attributes-enum-1_1210:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-enum-1.c'
    sources:
      binary: attributes-enum-1.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*(".A. is deprecated")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*(".B. is deprecated")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*(".C. is deprecated")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*(".D. is deprecated")[^\n]*\n?)+'
test_attributes-enum-1_1211:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-enum-1.c'
    sources:
      binary: attributes-enum-1.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*(".A. is deprecated")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*(".B. is deprecated")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*(".C. is deprecated")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*(".D. is deprecated")[^\n]*\n?)+'
test_attributes-enum-1_1212:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-enum-1.c'
    sources:
      binary: attributes-enum-1.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*(".A. is deprecated")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*(".B. is deprecated")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*(".C. is deprecated")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*(".D. is deprecated")[^\n]*\n?)+'
test_attributes-enum-1_155:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-enum-1.c'
    sources:
      binary: attributes-enum-1.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*(".A. is deprecated")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*(".B. is deprecated")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*(".C. is deprecated")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*(".D. is deprecated")[^\n]*\n?)+'
test_attributes-enum-1_2036:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-enum-1.c'
    sources:
      binary: attributes-enum-1.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*(".A. is deprecated")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*(".B. is deprecated")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*(".C. is deprecated")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*(".D. is deprecated")[^\n]*\n?)+'
test_attributes-enum-1_2702:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-enum-1.c'
    sources:
      binary: attributes-enum-1.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*(".A. is deprecated")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*(".B. is deprecated")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*(".C. is deprecated")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*(".D. is deprecated")[^\n]*\n?)+'
test_attributes-enum-1_2703:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-enum-1.c'
    sources:
      binary: attributes-enum-1.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*(".A. is deprecated")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*(".B. is deprecated")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*(".C. is deprecated")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*(".D. is deprecated")[^\n]*\n?)+'
test_attributes-enum-1_2704:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-enum-1.c'
    sources:
      binary: attributes-enum-1.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*(".A. is deprecated")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*(".B. is deprecated")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*(".C. is deprecated")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*(".D. is deprecated")[^\n]*\n?)+'
test_attributes-enum-1_544:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-enum-1.c'
    sources:
      binary: attributes-enum-1.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*(".A. is deprecated")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*(".B. is deprecated")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*(".C. is deprecated")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*(".D. is deprecated")[^\n]*\n?)+'
test_attributes-enum-2_1213:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-enum-2.c'
    sources:
      binary: attributes-enum-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
test_attributes-enum-2_1214:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-enum-2.c'
    sources:
      binary: attributes-enum-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
test_attributes-enum-2_1215:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-enum-2.c'
    sources:
      binary: attributes-enum-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
test_attributes-enum-2_156:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-enum-2.c'
    sources:
      binary: attributes-enum-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
test_attributes-enum-2_2037:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-enum-2.c'
    sources:
      binary: attributes-enum-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
test_attributes-enum-2_2705:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-enum-2.c'
    sources:
      binary: attributes-enum-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
test_attributes-enum-2_2706:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-enum-2.c'
    sources:
      binary: attributes-enum-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
test_attributes-enum-2_2707:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-enum-2.c'
    sources:
      binary: attributes-enum-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
test_attributes-enum-2_545:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/attributes-enum-2.c'
    sources:
      binary: attributes-enum-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
test_builtin-arith-overflow-1_1216:
  build:
    cflags: "-std=c++98 -Wnonnull\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-arith-overflow-1.c'
    sources:
      binary: builtin-arith-overflow-1.s
  group: GRPSERIAL
  validate:
    match:
      L106:
        expect: true
        expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L107:
        expect: true
        expr: '(^|\n)([^\n]+:107:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L109:
        expect: true
        expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L122:
        expect: true
        expr: '(^|\n)([^\n]+:122:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L123:
        expect: true
        expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L126:
        expect: true
        expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L137:
        expect: true
        expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L138:
        expect: true
        expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L139:
        expect: true
        expr: '(^|\n)([^\n]+:139:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+:155:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L170:
        expect: true
        expr: '(^|\n)([^\n]+(:170:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L171:
        expect: true
        expr: '(^|\n)([^\n]+(:171:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L173:
        expect: true
        expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L174:
        expect: true
        expr: '(^|\n)([^\n]+(:174:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+(:180:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L181:
        expect: true
        expr: '(^|\n)([^\n]+(:181:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+(:183:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+(:184:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+(:186:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+(:190:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L191:
        expect: true
        expr: '(^|\n)([^\n]+(:191:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+(:193:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L194:
        expect: true
        expr: '(^|\n)([^\n]+(:194:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+(:196:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+(:197:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L205:
        expect: true
        expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L206:
        expect: true
        expr: '(^|\n)([^\n]+:206:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L207:
        expect: true
        expr: '(^|\n)([^\n]+:207:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L216:
        expect: true
        expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L217:
        expect: true
        expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L218:
        expect: true
        expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L219:
        expect: true
        expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L229:
        expect: true
        expr: '(^|\n)([^\n]+:229:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 1 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L230:
        expect: true
        expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 1 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L231:
        expect: true
        expr: '(^|\n)([^\n]+:231:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 2 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L232:
        expect: true
        expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 2 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L235:
        expect: true
        expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 1 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L236:
        expect: true
        expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 1 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L237:
        expect: true
        expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 2 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L238:
        expect: true
        expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 2 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L239:
        expect: true
        expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*has enumerated type")[^\n]*\n?)+'
      L240:
        expect: true
        expr: '(^|\n)([^\n]+:240:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*has boolean type")[^\n]*\n?)+'
      L241:
        expect: true
        expr: '(^|\n)([^\n]+:241:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L242:
        expect: true
        expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L243:
        expect: true
        expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L250:
        expect: true
        expr: '(^|\n)([^\n]+:250:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have pointer to integral type")[^\n]*\n?)+'
      L251:
        expect: true
        expr: '(^|\n)([^\n]+:251:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have pointer to integral type")[^\n]*\n?)+'
      L252:
        expect: true
        expr: '(^|\n)([^\n]+:252:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have pointer to integral type")[^\n]*\n?)+'
      L253:
        expect: true
        expr: '(^|\n)([^\n]+:253:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*has pointer to enumerated type")[^\n]*\n?)+'
      L254:
        expect: true
        expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*has pointer to boolean type")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
test_builtin-arith-overflow-1_1217:
  build:
    cflags: "-std=c++11 -Wnonnull\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-arith-overflow-1.c'
    sources:
      binary: builtin-arith-overflow-1.s
  group: GRPSERIAL
  validate:
    match:
      L106:
        expect: true
        expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L107:
        expect: true
        expr: '(^|\n)([^\n]+:107:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L109:
        expect: true
        expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L122:
        expect: true
        expr: '(^|\n)([^\n]+:122:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L123:
        expect: true
        expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L126:
        expect: true
        expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L137:
        expect: true
        expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L138:
        expect: true
        expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L139:
        expect: true
        expr: '(^|\n)([^\n]+:139:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+:155:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L170:
        expect: true
        expr: '(^|\n)([^\n]+(:170:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L171:
        expect: true
        expr: '(^|\n)([^\n]+(:171:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L173:
        expect: true
        expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L174:
        expect: true
        expr: '(^|\n)([^\n]+(:174:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+(:180:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L181:
        expect: true
        expr: '(^|\n)([^\n]+(:181:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+(:183:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+(:184:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+(:186:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+(:190:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L191:
        expect: true
        expr: '(^|\n)([^\n]+(:191:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+(:193:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L194:
        expect: true
        expr: '(^|\n)([^\n]+(:194:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+(:196:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+(:197:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L205:
        expect: true
        expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L206:
        expect: true
        expr: '(^|\n)([^\n]+:206:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L207:
        expect: true
        expr: '(^|\n)([^\n]+:207:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L216:
        expect: true
        expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L217:
        expect: true
        expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L218:
        expect: true
        expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L219:
        expect: true
        expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L229:
        expect: true
        expr: '(^|\n)([^\n]+:229:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 1 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L230:
        expect: true
        expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 1 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L231:
        expect: true
        expr: '(^|\n)([^\n]+:231:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 2 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L232:
        expect: true
        expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 2 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L235:
        expect: true
        expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 1 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L236:
        expect: true
        expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 1 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L237:
        expect: true
        expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 2 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L238:
        expect: true
        expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 2 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L239:
        expect: true
        expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*has enumerated type")[^\n]*\n?)+'
      L240:
        expect: true
        expr: '(^|\n)([^\n]+:240:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*has boolean type")[^\n]*\n?)+'
      L241:
        expect: true
        expr: '(^|\n)([^\n]+:241:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L242:
        expect: true
        expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L243:
        expect: true
        expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L250:
        expect: true
        expr: '(^|\n)([^\n]+:250:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have pointer to integral type")[^\n]*\n?)+'
      L251:
        expect: true
        expr: '(^|\n)([^\n]+:251:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have pointer to integral type")[^\n]*\n?)+'
      L252:
        expect: true
        expr: '(^|\n)([^\n]+:252:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have pointer to integral type")[^\n]*\n?)+'
      L253:
        expect: true
        expr: '(^|\n)([^\n]+:253:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*has pointer to enumerated type")[^\n]*\n?)+'
      L254:
        expect: true
        expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*has pointer to boolean type")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
test_builtin-arith-overflow-1_1218:
  build:
    cflags: "-std=c++14 -Wnonnull\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-arith-overflow-1.c'
    sources:
      binary: builtin-arith-overflow-1.s
  group: GRPSERIAL
  validate:
    match:
      L106:
        expect: true
        expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L107:
        expect: true
        expr: '(^|\n)([^\n]+:107:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L109:
        expect: true
        expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L122:
        expect: true
        expr: '(^|\n)([^\n]+:122:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L123:
        expect: true
        expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L126:
        expect: true
        expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L137:
        expect: true
        expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L138:
        expect: true
        expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L139:
        expect: true
        expr: '(^|\n)([^\n]+:139:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+:155:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L170:
        expect: true
        expr: '(^|\n)([^\n]+(:170:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L171:
        expect: true
        expr: '(^|\n)([^\n]+(:171:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L173:
        expect: true
        expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L174:
        expect: true
        expr: '(^|\n)([^\n]+(:174:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+(:180:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L181:
        expect: true
        expr: '(^|\n)([^\n]+(:181:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+(:183:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+(:184:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+(:186:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+(:190:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L191:
        expect: true
        expr: '(^|\n)([^\n]+(:191:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+(:193:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L194:
        expect: true
        expr: '(^|\n)([^\n]+(:194:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+(:196:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+(:197:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L205:
        expect: true
        expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L206:
        expect: true
        expr: '(^|\n)([^\n]+:206:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L207:
        expect: true
        expr: '(^|\n)([^\n]+:207:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L216:
        expect: true
        expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L217:
        expect: true
        expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L218:
        expect: true
        expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L219:
        expect: true
        expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L229:
        expect: true
        expr: '(^|\n)([^\n]+:229:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 1 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L230:
        expect: true
        expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 1 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L231:
        expect: true
        expr: '(^|\n)([^\n]+:231:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 2 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L232:
        expect: true
        expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 2 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L235:
        expect: true
        expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 1 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L236:
        expect: true
        expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 1 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L237:
        expect: true
        expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 2 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L238:
        expect: true
        expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 2 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L239:
        expect: true
        expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*has enumerated type")[^\n]*\n?)+'
      L240:
        expect: true
        expr: '(^|\n)([^\n]+:240:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*has boolean type")[^\n]*\n?)+'
      L241:
        expect: true
        expr: '(^|\n)([^\n]+:241:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L242:
        expect: true
        expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L243:
        expect: true
        expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L250:
        expect: true
        expr: '(^|\n)([^\n]+:250:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have pointer to integral type")[^\n]*\n?)+'
      L251:
        expect: true
        expr: '(^|\n)([^\n]+:251:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have pointer to integral type")[^\n]*\n?)+'
      L252:
        expect: true
        expr: '(^|\n)([^\n]+:252:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have pointer to integral type")[^\n]*\n?)+'
      L253:
        expect: true
        expr: '(^|\n)([^\n]+:253:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*has pointer to enumerated type")[^\n]*\n?)+'
      L254:
        expect: true
        expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*has pointer to boolean type")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
test_builtin-arith-overflow-1_157:
  build:
    cflags: "-Wc++-compat  -Wnonnull\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-arith-overflow-1.c'
    sources:
      binary: builtin-arith-overflow-1.s
  group: GRPSERIAL
  validate:
    match:
      L106:
        expect: true
        expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L107:
        expect: true
        expr: '(^|\n)([^\n]+:107:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L109:
        expect: true
        expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L122:
        expect: true
        expr: '(^|\n)([^\n]+:122:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L123:
        expect: true
        expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L126:
        expect: true
        expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L137:
        expect: true
        expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L138:
        expect: true
        expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L139:
        expect: true
        expr: '(^|\n)([^\n]+:139:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+:155:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L170:
        expect: true
        expr: '(^|\n)([^\n]+(:170:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L171:
        expect: true
        expr: '(^|\n)([^\n]+(:171:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L173:
        expect: true
        expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L174:
        expect: true
        expr: '(^|\n)([^\n]+(:174:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+(:180:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L181:
        expect: true
        expr: '(^|\n)([^\n]+(:181:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+(:183:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+(:184:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+(:186:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+(:190:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L191:
        expect: true
        expr: '(^|\n)([^\n]+(:191:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+(:193:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L194:
        expect: true
        expr: '(^|\n)([^\n]+(:194:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+(:196:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+(:197:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L205:
        expect: true
        expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L206:
        expect: true
        expr: '(^|\n)([^\n]+:206:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L207:
        expect: true
        expr: '(^|\n)([^\n]+:207:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L216:
        expect: true
        expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L217:
        expect: true
        expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L218:
        expect: true
        expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L219:
        expect: true
        expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L229:
        expect: true
        expr: '(^|\n)([^\n]+:229:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 1 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L230:
        expect: true
        expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 1 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L231:
        expect: true
        expr: '(^|\n)([^\n]+:231:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 2 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L232:
        expect: true
        expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 2 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L235:
        expect: true
        expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 1 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L236:
        expect: true
        expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 1 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L237:
        expect: true
        expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 2 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L238:
        expect: true
        expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 2 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L239:
        expect: true
        expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*has enumerated type")[^\n]*\n?)+'
      L240:
        expect: true
        expr: '(^|\n)([^\n]+:240:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*has boolean type")[^\n]*\n?)+'
      L241:
        expect: true
        expr: '(^|\n)([^\n]+:241:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L242:
        expect: true
        expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L243:
        expect: true
        expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L250:
        expect: true
        expr: '(^|\n)([^\n]+:250:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have pointer to integral type")[^\n]*\n?)+'
      L251:
        expect: true
        expr: '(^|\n)([^\n]+:251:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have pointer to integral type")[^\n]*\n?)+'
      L252:
        expect: true
        expr: '(^|\n)([^\n]+:252:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have pointer to integral type")[^\n]*\n?)+'
      L253:
        expect: true
        expr: '(^|\n)([^\n]+:253:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*has pointer to enumerated type")[^\n]*\n?)+'
      L254:
        expect: true
        expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*has pointer to boolean type")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
test_builtin-arith-overflow-1_2038:
  build:
    cflags: "-Wc++-compat  -Wnonnull\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-arith-overflow-1.c'
    sources:
      binary: builtin-arith-overflow-1.s
  group: GRPSERIAL
  validate:
    match:
      L106:
        expect: true
        expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L107:
        expect: true
        expr: '(^|\n)([^\n]+:107:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L109:
        expect: true
        expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L122:
        expect: true
        expr: '(^|\n)([^\n]+:122:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L123:
        expect: true
        expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L126:
        expect: true
        expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L137:
        expect: true
        expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L138:
        expect: true
        expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L139:
        expect: true
        expr: '(^|\n)([^\n]+:139:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+:155:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L170:
        expect: true
        expr: '(^|\n)([^\n]+(:170:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L171:
        expect: true
        expr: '(^|\n)([^\n]+(:171:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L173:
        expect: true
        expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L174:
        expect: true
        expr: '(^|\n)([^\n]+(:174:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+(:180:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L181:
        expect: true
        expr: '(^|\n)([^\n]+(:181:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+(:183:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+(:184:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+(:186:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+(:190:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L191:
        expect: true
        expr: '(^|\n)([^\n]+(:191:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+(:193:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L194:
        expect: true
        expr: '(^|\n)([^\n]+(:194:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+(:196:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+(:197:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L205:
        expect: true
        expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L206:
        expect: true
        expr: '(^|\n)([^\n]+:206:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L207:
        expect: true
        expr: '(^|\n)([^\n]+:207:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L216:
        expect: true
        expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L217:
        expect: true
        expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L218:
        expect: true
        expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L219:
        expect: true
        expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L229:
        expect: true
        expr: '(^|\n)([^\n]+:229:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 1 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L230:
        expect: true
        expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 1 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L231:
        expect: true
        expr: '(^|\n)([^\n]+:231:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 2 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L232:
        expect: true
        expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 2 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L235:
        expect: true
        expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 1 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L236:
        expect: true
        expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 1 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L237:
        expect: true
        expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 2 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L238:
        expect: true
        expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 2 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L239:
        expect: true
        expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*has enumerated type")[^\n]*\n?)+'
      L240:
        expect: true
        expr: '(^|\n)([^\n]+:240:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*has boolean type")[^\n]*\n?)+'
      L241:
        expect: true
        expr: '(^|\n)([^\n]+:241:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L242:
        expect: true
        expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L243:
        expect: true
        expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L250:
        expect: true
        expr: '(^|\n)([^\n]+:250:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have pointer to integral type")[^\n]*\n?)+'
      L251:
        expect: true
        expr: '(^|\n)([^\n]+:251:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have pointer to integral type")[^\n]*\n?)+'
      L252:
        expect: true
        expr: '(^|\n)([^\n]+:252:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have pointer to integral type")[^\n]*\n?)+'
      L253:
        expect: true
        expr: '(^|\n)([^\n]+:253:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*has pointer to enumerated type")[^\n]*\n?)+'
      L254:
        expect: true
        expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*has pointer to boolean type")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
test_builtin-arith-overflow-1_2708:
  build:
    cflags: "-std=c++98 -Wnonnull\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-arith-overflow-1.c'
    sources:
      binary: builtin-arith-overflow-1.s
  group: GRPSERIAL
  validate:
    match:
      L106:
        expect: true
        expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L107:
        expect: true
        expr: '(^|\n)([^\n]+:107:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L109:
        expect: true
        expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L122:
        expect: true
        expr: '(^|\n)([^\n]+:122:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L123:
        expect: true
        expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L126:
        expect: true
        expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L137:
        expect: true
        expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L138:
        expect: true
        expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L139:
        expect: true
        expr: '(^|\n)([^\n]+:139:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+:155:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L170:
        expect: true
        expr: '(^|\n)([^\n]+(:170:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L171:
        expect: true
        expr: '(^|\n)([^\n]+(:171:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L173:
        expect: true
        expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L174:
        expect: true
        expr: '(^|\n)([^\n]+(:174:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+(:180:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L181:
        expect: true
        expr: '(^|\n)([^\n]+(:181:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+(:183:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+(:184:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+(:186:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+(:190:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L191:
        expect: true
        expr: '(^|\n)([^\n]+(:191:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+(:193:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L194:
        expect: true
        expr: '(^|\n)([^\n]+(:194:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+(:196:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+(:197:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L205:
        expect: true
        expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L206:
        expect: true
        expr: '(^|\n)([^\n]+:206:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L207:
        expect: true
        expr: '(^|\n)([^\n]+:207:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L216:
        expect: true
        expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L217:
        expect: true
        expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L218:
        expect: true
        expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L219:
        expect: true
        expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L229:
        expect: true
        expr: '(^|\n)([^\n]+:229:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 1 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L230:
        expect: true
        expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 1 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L231:
        expect: true
        expr: '(^|\n)([^\n]+:231:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 2 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L232:
        expect: true
        expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 2 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L235:
        expect: true
        expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 1 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L236:
        expect: true
        expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 1 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L237:
        expect: true
        expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 2 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L238:
        expect: true
        expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 2 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L239:
        expect: true
        expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*has enumerated type")[^\n]*\n?)+'
      L240:
        expect: true
        expr: '(^|\n)([^\n]+:240:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*has boolean type")[^\n]*\n?)+'
      L241:
        expect: true
        expr: '(^|\n)([^\n]+:241:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L242:
        expect: true
        expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L243:
        expect: true
        expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L250:
        expect: true
        expr: '(^|\n)([^\n]+:250:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have pointer to integral type")[^\n]*\n?)+'
      L251:
        expect: true
        expr: '(^|\n)([^\n]+:251:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have pointer to integral type")[^\n]*\n?)+'
      L252:
        expect: true
        expr: '(^|\n)([^\n]+:252:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have pointer to integral type")[^\n]*\n?)+'
      L253:
        expect: true
        expr: '(^|\n)([^\n]+:253:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*has pointer to enumerated type")[^\n]*\n?)+'
      L254:
        expect: true
        expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*has pointer to boolean type")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
test_builtin-arith-overflow-1_2709:
  build:
    cflags: "-std=c++11 -Wnonnull\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-arith-overflow-1.c'
    sources:
      binary: builtin-arith-overflow-1.s
  group: GRPSERIAL
  validate:
    match:
      L106:
        expect: true
        expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L107:
        expect: true
        expr: '(^|\n)([^\n]+:107:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L109:
        expect: true
        expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L122:
        expect: true
        expr: '(^|\n)([^\n]+:122:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L123:
        expect: true
        expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L126:
        expect: true
        expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L137:
        expect: true
        expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L138:
        expect: true
        expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L139:
        expect: true
        expr: '(^|\n)([^\n]+:139:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+:155:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L170:
        expect: true
        expr: '(^|\n)([^\n]+(:170:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L171:
        expect: true
        expr: '(^|\n)([^\n]+(:171:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L173:
        expect: true
        expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L174:
        expect: true
        expr: '(^|\n)([^\n]+(:174:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+(:180:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L181:
        expect: true
        expr: '(^|\n)([^\n]+(:181:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+(:183:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+(:184:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+(:186:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+(:190:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L191:
        expect: true
        expr: '(^|\n)([^\n]+(:191:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+(:193:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L194:
        expect: true
        expr: '(^|\n)([^\n]+(:194:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+(:196:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+(:197:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L205:
        expect: true
        expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L206:
        expect: true
        expr: '(^|\n)([^\n]+:206:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L207:
        expect: true
        expr: '(^|\n)([^\n]+:207:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L216:
        expect: true
        expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L217:
        expect: true
        expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L218:
        expect: true
        expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L219:
        expect: true
        expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L229:
        expect: true
        expr: '(^|\n)([^\n]+:229:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 1 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L230:
        expect: true
        expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 1 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L231:
        expect: true
        expr: '(^|\n)([^\n]+:231:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 2 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L232:
        expect: true
        expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 2 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L235:
        expect: true
        expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 1 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L236:
        expect: true
        expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 1 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L237:
        expect: true
        expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 2 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L238:
        expect: true
        expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 2 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L239:
        expect: true
        expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*has enumerated type")[^\n]*\n?)+'
      L240:
        expect: true
        expr: '(^|\n)([^\n]+:240:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*has boolean type")[^\n]*\n?)+'
      L241:
        expect: true
        expr: '(^|\n)([^\n]+:241:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L242:
        expect: true
        expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L243:
        expect: true
        expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L250:
        expect: true
        expr: '(^|\n)([^\n]+:250:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have pointer to integral type")[^\n]*\n?)+'
      L251:
        expect: true
        expr: '(^|\n)([^\n]+:251:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have pointer to integral type")[^\n]*\n?)+'
      L252:
        expect: true
        expr: '(^|\n)([^\n]+:252:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have pointer to integral type")[^\n]*\n?)+'
      L253:
        expect: true
        expr: '(^|\n)([^\n]+:253:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*has pointer to enumerated type")[^\n]*\n?)+'
      L254:
        expect: true
        expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*has pointer to boolean type")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
test_builtin-arith-overflow-1_2710:
  build:
    cflags: "-std=c++14 -Wnonnull\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-arith-overflow-1.c'
    sources:
      binary: builtin-arith-overflow-1.s
  group: GRPSERIAL
  validate:
    match:
      L106:
        expect: true
        expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L107:
        expect: true
        expr: '(^|\n)([^\n]+:107:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L109:
        expect: true
        expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L122:
        expect: true
        expr: '(^|\n)([^\n]+:122:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L123:
        expect: true
        expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L126:
        expect: true
        expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L137:
        expect: true
        expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L138:
        expect: true
        expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L139:
        expect: true
        expr: '(^|\n)([^\n]+:139:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+:155:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L170:
        expect: true
        expr: '(^|\n)([^\n]+(:170:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L171:
        expect: true
        expr: '(^|\n)([^\n]+(:171:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L173:
        expect: true
        expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L174:
        expect: true
        expr: '(^|\n)([^\n]+(:174:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+(:180:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L181:
        expect: true
        expr: '(^|\n)([^\n]+(:181:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+(:183:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+(:184:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+(:186:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+(:190:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L191:
        expect: true
        expr: '(^|\n)([^\n]+(:191:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+(:193:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L194:
        expect: true
        expr: '(^|\n)([^\n]+(:194:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+(:196:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+(:197:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L205:
        expect: true
        expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L206:
        expect: true
        expr: '(^|\n)([^\n]+:206:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L207:
        expect: true
        expr: '(^|\n)([^\n]+:207:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L216:
        expect: true
        expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L217:
        expect: true
        expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L218:
        expect: true
        expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L219:
        expect: true
        expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L229:
        expect: true
        expr: '(^|\n)([^\n]+:229:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 1 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L230:
        expect: true
        expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 1 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L231:
        expect: true
        expr: '(^|\n)([^\n]+:231:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 2 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L232:
        expect: true
        expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 2 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L235:
        expect: true
        expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 1 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L236:
        expect: true
        expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 1 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L237:
        expect: true
        expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 2 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L238:
        expect: true
        expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 2 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L239:
        expect: true
        expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*has enumerated type")[^\n]*\n?)+'
      L240:
        expect: true
        expr: '(^|\n)([^\n]+:240:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*has boolean type")[^\n]*\n?)+'
      L241:
        expect: true
        expr: '(^|\n)([^\n]+:241:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L242:
        expect: true
        expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L243:
        expect: true
        expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L250:
        expect: true
        expr: '(^|\n)([^\n]+:250:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have pointer to integral type")[^\n]*\n?)+'
      L251:
        expect: true
        expr: '(^|\n)([^\n]+:251:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have pointer to integral type")[^\n]*\n?)+'
      L252:
        expect: true
        expr: '(^|\n)([^\n]+:252:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have pointer to integral type")[^\n]*\n?)+'
      L253:
        expect: true
        expr: '(^|\n)([^\n]+:253:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*has pointer to enumerated type")[^\n]*\n?)+'
      L254:
        expect: true
        expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*has pointer to boolean type")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
test_builtin-arith-overflow-1_546:
  build:
    cflags: "-Wc++-compat  -Wnonnull\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-arith-overflow-1.c'
    sources:
      binary: builtin-arith-overflow-1.s
  group: GRPSERIAL
  validate:
    match:
      L106:
        expect: true
        expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L107:
        expect: true
        expr: '(^|\n)([^\n]+:107:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L109:
        expect: true
        expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L122:
        expect: true
        expr: '(^|\n)([^\n]+:122:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L123:
        expect: true
        expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L126:
        expect: true
        expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer to integral type")[^\n]*\n?)+'
      L137:
        expect: true
        expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L138:
        expect: true
        expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L139:
        expect: true
        expr: '(^|\n)([^\n]+:139:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+:155:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L170:
        expect: true
        expr: '(^|\n)([^\n]+(:170:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L171:
        expect: true
        expr: '(^|\n)([^\n]+(:171:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L173:
        expect: true
        expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L174:
        expect: true
        expr: '(^|\n)([^\n]+(:174:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+(:180:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L181:
        expect: true
        expr: '(^|\n)([^\n]+(:181:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+(:183:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+(:184:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+(:186:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+(:190:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L191:
        expect: true
        expr: '(^|\n)([^\n]+(:191:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+(:193:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L194:
        expect: true
        expr: '(^|\n)([^\n]+(:194:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+(:196:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+(:197:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L205:
        expect: true
        expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L206:
        expect: true
        expr: '(^|\n)([^\n]+:206:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L207:
        expect: true
        expr: '(^|\n)([^\n]+:207:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L216:
        expect: true
        expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L217:
        expect: true
        expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L218:
        expect: true
        expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L219:
        expect: true
        expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments
          to function")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L229:
        expect: true
        expr: '(^|\n)([^\n]+:229:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 1 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L230:
        expect: true
        expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 1 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L231:
        expect: true
        expr: '(^|\n)([^\n]+:231:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 2 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L232:
        expect: true
        expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 2 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L235:
        expect: true
        expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 1 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L236:
        expect: true
        expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 1 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L237:
        expect: true
        expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 2 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L238:
        expect: true
        expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 2 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L239:
        expect: true
        expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*has enumerated type")[^\n]*\n?)+'
      L240:
        expect: true
        expr: '(^|\n)([^\n]+:240:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*has boolean type")[^\n]*\n?)+'
      L241:
        expect: true
        expr: '(^|\n)([^\n]+:241:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L242:
        expect: true
        expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L243:
        expect: true
        expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have integral type")[^\n]*\n?)+'
      L250:
        expect: true
        expr: '(^|\n)([^\n]+:250:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have pointer to integral type")[^\n]*\n?)+'
      L251:
        expect: true
        expr: '(^|\n)([^\n]+:251:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have pointer to integral type")[^\n]*\n?)+'
      L252:
        expect: true
        expr: '(^|\n)([^\n]+:252:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*does not have pointer to integral type")[^\n]*\n?)+'
      L253:
        expect: true
        expr: '(^|\n)([^\n]+:253:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*has pointer to enumerated type")[^\n]*\n?)+'
      L254:
        expect: true
        expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("argument 3 in
          call to function\\[^\\n\\r]*has pointer to boolean type")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
test_builtin-arith-overflow-2_1219:
  build:
    cflags: -std=c++98 -Wno-long-long
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-arith-overflow-2.c'
    sources:
      binary: ./builtin-arith-overflow-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_builtin-arith-overflow-2_1220:
  build:
    cflags: -std=c++11 -Wno-long-long
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-arith-overflow-2.c'
    sources:
      binary: ./builtin-arith-overflow-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_builtin-arith-overflow-2_1221:
  build:
    cflags: -std=c++14 -Wno-long-long
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-arith-overflow-2.c'
    sources:
      binary: ./builtin-arith-overflow-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_builtin-arith-overflow-2_158:
  build:
    cflags: -Wc++-compat  -Wno-long-long
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-arith-overflow-2.c'
    sources:
      binary: ./builtin-arith-overflow-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_builtin-arith-overflow-2_2039:
  build:
    cflags: -Wc++-compat  -Wno-long-long
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-arith-overflow-2.c'
    sources:
      binary: ./builtin-arith-overflow-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_builtin-arith-overflow-2_2711:
  build:
    cflags: -std=c++98 -Wno-long-long
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-arith-overflow-2.c'
    sources:
      binary: ./builtin-arith-overflow-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_builtin-arith-overflow-2_2712:
  build:
    cflags: -std=c++11 -Wno-long-long
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-arith-overflow-2.c'
    sources:
      binary: ./builtin-arith-overflow-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_builtin-arith-overflow-2_2713:
  build:
    cflags: -std=c++14 -Wno-long-long
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-arith-overflow-2.c'
    sources:
      binary: ./builtin-arith-overflow-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_builtin-arith-overflow-2_547:
  build:
    cflags: -Wc++-compat  -Wno-long-long
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-arith-overflow-2.c'
    sources:
      binary: ./builtin-arith-overflow-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_builtin-offsetof-2_1222:
  build:
    cflags: "-std=gnu++98 -Warray-bounds\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-offsetof-2.c'
    sources:
      binary: builtin-offsetof-2.s
  group: GRPSERIAL
  validate:
    match:
      L104:
        expect: true
        expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+(:120:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L122:
        expect: true
        expr: '(^|\n)([^\n]+(:122:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L132:
        expect: true
        expr: '(^|\n)([^\n]+(:132:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+(:134:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L136:
        expect: true
        expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L137:
        expect: true
        expr: '(^|\n)([^\n]+(:137:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L143:
        expect: true
        expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+(:159:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L162:
        expect: true
        expr: '(^|\n)([^\n]+(:162:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L163:
        expect: true
        expr: '(^|\n)([^\n]+(:163:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+(:164:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+(:166:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+(:212:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L213:
        expect: true
        expr: '(^|\n)([^\n]+(:213:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
test_builtin-offsetof-2_1223:
  build:
    cflags: "-std=gnu++11 -Warray-bounds\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-offsetof-2.c'
    sources:
      binary: builtin-offsetof-2.s
  group: GRPSERIAL
  validate:
    match:
      L104:
        expect: true
        expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+(:120:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L122:
        expect: true
        expr: '(^|\n)([^\n]+(:122:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L132:
        expect: true
        expr: '(^|\n)([^\n]+(:132:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+(:134:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L136:
        expect: true
        expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L137:
        expect: true
        expr: '(^|\n)([^\n]+(:137:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L143:
        expect: true
        expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+(:159:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L162:
        expect: true
        expr: '(^|\n)([^\n]+(:162:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L163:
        expect: true
        expr: '(^|\n)([^\n]+(:163:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+(:164:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+(:166:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+(:212:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L213:
        expect: true
        expr: '(^|\n)([^\n]+(:213:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
test_builtin-offsetof-2_1224:
  build:
    cflags: "-std=gnu++14 -Warray-bounds\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-offsetof-2.c'
    sources:
      binary: builtin-offsetof-2.s
  group: GRPSERIAL
  validate:
    match:
      L104:
        expect: true
        expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+(:120:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L122:
        expect: true
        expr: '(^|\n)([^\n]+(:122:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L132:
        expect: true
        expr: '(^|\n)([^\n]+(:132:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+(:134:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L136:
        expect: true
        expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L137:
        expect: true
        expr: '(^|\n)([^\n]+(:137:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L143:
        expect: true
        expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+(:159:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L162:
        expect: true
        expr: '(^|\n)([^\n]+(:162:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L163:
        expect: true
        expr: '(^|\n)([^\n]+(:163:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+(:164:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+(:166:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+(:212:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L213:
        expect: true
        expr: '(^|\n)([^\n]+(:213:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
test_builtin-offsetof-2_159:
  build:
    cflags: "-Wc++-compat  -Warray-bounds\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-offsetof-2.c'
    sources:
      binary: builtin-offsetof-2.s
  group: GRPSERIAL
  validate:
    match:
      L104:
        expect: true
        expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+(:120:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L122:
        expect: true
        expr: '(^|\n)([^\n]+(:122:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L132:
        expect: true
        expr: '(^|\n)([^\n]+(:132:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+(:134:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L136:
        expect: true
        expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L137:
        expect: true
        expr: '(^|\n)([^\n]+(:137:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L143:
        expect: true
        expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+(:159:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L162:
        expect: true
        expr: '(^|\n)([^\n]+(:162:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L163:
        expect: true
        expr: '(^|\n)([^\n]+(:163:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+(:164:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+(:166:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+(:212:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L213:
        expect: true
        expr: '(^|\n)([^\n]+(:213:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
test_builtin-offsetof-2_2040:
  build:
    cflags: "-Wc++-compat  -Warray-bounds\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-offsetof-2.c'
    sources:
      binary: builtin-offsetof-2.s
  group: GRPSERIAL
  validate:
    match:
      L104:
        expect: true
        expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+(:120:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L122:
        expect: true
        expr: '(^|\n)([^\n]+(:122:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L132:
        expect: true
        expr: '(^|\n)([^\n]+(:132:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+(:134:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L136:
        expect: true
        expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L137:
        expect: true
        expr: '(^|\n)([^\n]+(:137:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L143:
        expect: true
        expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+(:159:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L162:
        expect: true
        expr: '(^|\n)([^\n]+(:162:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L163:
        expect: true
        expr: '(^|\n)([^\n]+(:163:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+(:164:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+(:166:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+(:212:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L213:
        expect: true
        expr: '(^|\n)([^\n]+(:213:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
test_builtin-offsetof-2_2714:
  build:
    cflags: "-std=gnu++98 -Warray-bounds\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-offsetof-2.c'
    sources:
      binary: builtin-offsetof-2.s
  group: GRPSERIAL
  validate:
    match:
      L104:
        expect: true
        expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+(:120:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L122:
        expect: true
        expr: '(^|\n)([^\n]+(:122:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L132:
        expect: true
        expr: '(^|\n)([^\n]+(:132:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+(:134:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L136:
        expect: true
        expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L137:
        expect: true
        expr: '(^|\n)([^\n]+(:137:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L143:
        expect: true
        expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+(:159:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L162:
        expect: true
        expr: '(^|\n)([^\n]+(:162:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L163:
        expect: true
        expr: '(^|\n)([^\n]+(:163:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+(:164:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+(:166:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+(:212:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L213:
        expect: true
        expr: '(^|\n)([^\n]+(:213:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
test_builtin-offsetof-2_2715:
  build:
    cflags: "-std=gnu++11 -Warray-bounds\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-offsetof-2.c'
    sources:
      binary: builtin-offsetof-2.s
  group: GRPSERIAL
  validate:
    match:
      L104:
        expect: true
        expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+(:120:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L122:
        expect: true
        expr: '(^|\n)([^\n]+(:122:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L132:
        expect: true
        expr: '(^|\n)([^\n]+(:132:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+(:134:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L136:
        expect: true
        expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L137:
        expect: true
        expr: '(^|\n)([^\n]+(:137:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L143:
        expect: true
        expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+(:159:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L162:
        expect: true
        expr: '(^|\n)([^\n]+(:162:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L163:
        expect: true
        expr: '(^|\n)([^\n]+(:163:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+(:164:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+(:166:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+(:212:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L213:
        expect: true
        expr: '(^|\n)([^\n]+(:213:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
test_builtin-offsetof-2_2716:
  build:
    cflags: "-std=gnu++14 -Warray-bounds\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-offsetof-2.c'
    sources:
      binary: builtin-offsetof-2.s
  group: GRPSERIAL
  validate:
    match:
      L104:
        expect: true
        expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+(:120:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L122:
        expect: true
        expr: '(^|\n)([^\n]+(:122:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L132:
        expect: true
        expr: '(^|\n)([^\n]+(:132:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+(:134:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L136:
        expect: true
        expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L137:
        expect: true
        expr: '(^|\n)([^\n]+(:137:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L143:
        expect: true
        expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+(:159:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L162:
        expect: true
        expr: '(^|\n)([^\n]+(:162:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L163:
        expect: true
        expr: '(^|\n)([^\n]+(:163:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+(:164:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+(:166:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+(:212:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L213:
        expect: true
        expr: '(^|\n)([^\n]+(:213:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
test_builtin-offsetof-2_548:
  build:
    cflags: "-Wc++-compat  -Warray-bounds\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-offsetof-2.c'
    sources:
      binary: builtin-offsetof-2.s
  group: GRPSERIAL
  validate:
    match:
      L104:
        expect: true
        expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+(:120:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L122:
        expect: true
        expr: '(^|\n)([^\n]+(:122:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L132:
        expect: true
        expr: '(^|\n)([^\n]+(:132:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+(:134:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L136:
        expect: true
        expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L137:
        expect: true
        expr: '(^|\n)([^\n]+(:137:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L143:
        expect: true
        expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+(:159:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L162:
        expect: true
        expr: '(^|\n)([^\n]+(:162:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L163:
        expect: true
        expr: '(^|\n)([^\n]+(:163:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+(:164:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+(:166:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+(:212:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L213:
        expect: true
        expr: '(^|\n)([^\n]+(:213:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("index")[^\n]*\n?)+'
test_builtin-offsetof_1225:
  build:
    cflags: "-std=gnu++98 -Warray-bounds\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-offsetof.c'
    sources:
      binary: builtin-offsetof.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non constant
          address")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non constant
          address")[^\n]*\n?)+'
test_builtin-offsetof_1226:
  build:
    cflags: "-std=gnu++11 -Warray-bounds\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-offsetof.c'
    sources:
      binary: builtin-offsetof.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non constant
          address")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non constant
          address")[^\n]*\n?)+'
test_builtin-offsetof_1227:
  build:
    cflags: "-std=gnu++14 -Warray-bounds\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-offsetof.c'
    sources:
      binary: builtin-offsetof.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non constant
          address")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non constant
          address")[^\n]*\n?)+'
test_builtin-offsetof_160:
  build:
    cflags: "-Wc++-compat  -Warray-bounds\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-offsetof.c'
    sources:
      binary: builtin-offsetof.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non constant
          address")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non constant
          address")[^\n]*\n?)+'
test_builtin-offsetof_2041:
  build:
    cflags: "-Wc++-compat  -Warray-bounds\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-offsetof.c'
    sources:
      binary: builtin-offsetof.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non constant
          address")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non constant
          address")[^\n]*\n?)+'
test_builtin-offsetof_2717:
  build:
    cflags: "-std=gnu++98 -Warray-bounds\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-offsetof.c'
    sources:
      binary: builtin-offsetof.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non constant
          address")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non constant
          address")[^\n]*\n?)+'
test_builtin-offsetof_2718:
  build:
    cflags: "-std=gnu++11 -Warray-bounds\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-offsetof.c'
    sources:
      binary: builtin-offsetof.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non constant
          address")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non constant
          address")[^\n]*\n?)+'
test_builtin-offsetof_2719:
  build:
    cflags: "-std=gnu++14 -Warray-bounds\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-offsetof.c'
    sources:
      binary: builtin-offsetof.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non constant
          address")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non constant
          address")[^\n]*\n?)+'
test_builtin-offsetof_549:
  build:
    cflags: "-Wc++-compat  -Warray-bounds\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-offsetof.c'
    sources:
      binary: builtin-offsetof.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non constant
          address")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non constant
          address")[^\n]*\n?)+'
test_builtin-shuffle-1_1228:
  build:
    cflags: -std=c++98
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-shuffle-1.c'
    sources:
      binary: ./builtin-shuffle-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_builtin-shuffle-1_1229:
  build:
    cflags: -std=c++11
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-shuffle-1.c'
    sources:
      binary: ./builtin-shuffle-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_builtin-shuffle-1_1230:
  build:
    cflags: -std=c++14
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-shuffle-1.c'
    sources:
      binary: ./builtin-shuffle-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_builtin-shuffle-1_161:
  build:
    cflags: -Wc++-compat
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-shuffle-1.c'
    sources:
      binary: ./builtin-shuffle-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_builtin-shuffle-1_2042:
  build:
    cflags: -Wc++-compat
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-shuffle-1.c'
    sources:
      binary: ./builtin-shuffle-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_builtin-shuffle-1_2720:
  build:
    cflags: -std=c++98
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-shuffle-1.c'
    sources:
      binary: ./builtin-shuffle-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_builtin-shuffle-1_2721:
  build:
    cflags: -std=c++11
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-shuffle-1.c'
    sources:
      binary: ./builtin-shuffle-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_builtin-shuffle-1_2722:
  build:
    cflags: -std=c++14
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-shuffle-1.c'
    sources:
      binary: ./builtin-shuffle-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_builtin-shuffle-1_550:
  build:
    cflags: -Wc++-compat
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin-shuffle-1.c'
    sources:
      binary: ./builtin-shuffle-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_builtin_location_1231:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin_location.c'
    sources:
      binary: builtin_location.s
  group: GRPSERIAL
test_builtin_location_1232:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin_location.c'
    sources:
      binary: builtin_location.s
  group: GRPSERIAL
test_builtin_location_1233:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin_location.c'
    sources:
      binary: builtin_location.s
  group: GRPSERIAL
test_builtin_location_162:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin_location.c'
    sources:
      binary: builtin_location.s
  group: GRPSERIAL
test_builtin_location_2043:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin_location.c'
    sources:
      binary: builtin_location.s
  group: GRPSERIAL
test_builtin_location_2723:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin_location.c'
    sources:
      binary: builtin_location.s
  group: GRPSERIAL
test_builtin_location_2724:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin_location.c'
    sources:
      binary: builtin_location.s
  group: GRPSERIAL
test_builtin_location_2725:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin_location.c'
    sources:
      binary: builtin_location.s
  group: GRPSERIAL
test_builtin_location_551:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/builtin_location.c'
    sources:
      binary: builtin_location.s
  group: GRPSERIAL
test_conflict-markers-10_1237:
  build:
    cflags: "-std=gnu++98 -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-10.c'
    sources:
      binary: conflict-markers-10.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-10_1238:
  build:
    cflags: "-std=gnu++11 -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-10.c'
    sources:
      binary: conflict-markers-10.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-10_1239:
  build:
    cflags: "-std=gnu++14 -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-10.c'
    sources:
      binary: conflict-markers-10.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-10_164:
  build:
    cflags: "-Wc++-compat  -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-10.c'
    sources:
      binary: conflict-markers-10.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-10_2045:
  build:
    cflags: "-Wc++-compat  -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-10.c'
    sources:
      binary: conflict-markers-10.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-10_2729:
  build:
    cflags: "-std=gnu++98 -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-10.c'
    sources:
      binary: conflict-markers-10.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-10_2730:
  build:
    cflags: "-std=gnu++11 -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-10.c'
    sources:
      binary: conflict-markers-10.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-10_2731:
  build:
    cflags: "-std=gnu++14 -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-10.c'
    sources:
      binary: conflict-markers-10.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-10_553:
  build:
    cflags: "-Wc++-compat  -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-10.c'
    sources:
      binary: conflict-markers-10.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-11_1240:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-11.c'
    sources:
      binary: conflict-markers-11.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier|expected
          unqualified-id")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier|expected
          unqualified-id")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier|expected
          unqualified-id")[^\n]*\n?)+'
test_conflict-markers-11_1241:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-11.c'
    sources:
      binary: conflict-markers-11.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier|expected
          unqualified-id")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier|expected
          unqualified-id")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier|expected
          unqualified-id")[^\n]*\n?)+'
test_conflict-markers-11_1242:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-11.c'
    sources:
      binary: conflict-markers-11.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier|expected
          unqualified-id")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier|expected
          unqualified-id")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier|expected
          unqualified-id")[^\n]*\n?)+'
test_conflict-markers-11_165:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-11.c'
    sources:
      binary: conflict-markers-11.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier|expected
          unqualified-id")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier|expected
          unqualified-id")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier|expected
          unqualified-id")[^\n]*\n?)+'
test_conflict-markers-11_2046:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-11.c'
    sources:
      binary: conflict-markers-11.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier|expected
          unqualified-id")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier|expected
          unqualified-id")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier|expected
          unqualified-id")[^\n]*\n?)+'
test_conflict-markers-11_2732:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-11.c'
    sources:
      binary: conflict-markers-11.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier|expected
          unqualified-id")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier|expected
          unqualified-id")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier|expected
          unqualified-id")[^\n]*\n?)+'
test_conflict-markers-11_2733:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-11.c'
    sources:
      binary: conflict-markers-11.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier|expected
          unqualified-id")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier|expected
          unqualified-id")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier|expected
          unqualified-id")[^\n]*\n?)+'
test_conflict-markers-11_2734:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-11.c'
    sources:
      binary: conflict-markers-11.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier|expected
          unqualified-id")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier|expected
          unqualified-id")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier|expected
          unqualified-id")[^\n]*\n?)+'
test_conflict-markers-11_554:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-11.c'
    sources:
      binary: conflict-markers-11.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier|expected
          unqualified-id")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier|expected
          unqualified-id")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier|expected
          unqualified-id")[^\n]*\n?)+'
test_conflict-markers-1_1234:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-1.c'
    sources:
      binary: conflict-markers-1.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-1_1235:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-1.c'
    sources:
      binary: conflict-markers-1.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-1_1236:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-1.c'
    sources:
      binary: conflict-markers-1.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-1_163:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-1.c'
    sources:
      binary: conflict-markers-1.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-1_2044:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-1.c'
    sources:
      binary: conflict-markers-1.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-1_2726:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-1.c'
    sources:
      binary: conflict-markers-1.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-1_2727:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-1.c'
    sources:
      binary: conflict-markers-1.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-1_2728:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-1.c'
    sources:
      binary: conflict-markers-1.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-1_552:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-1.c'
    sources:
      binary: conflict-markers-1.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-2_1243:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-2.c'
    sources:
      binary: conflict-markers-2.s
  group: GRPSERIAL
test_conflict-markers-2_1244:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-2.c'
    sources:
      binary: conflict-markers-2.s
  group: GRPSERIAL
test_conflict-markers-2_1245:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-2.c'
    sources:
      binary: conflict-markers-2.s
  group: GRPSERIAL
test_conflict-markers-2_166:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-2.c'
    sources:
      binary: conflict-markers-2.s
  group: GRPSERIAL
test_conflict-markers-2_2047:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-2.c'
    sources:
      binary: conflict-markers-2.s
  group: GRPSERIAL
test_conflict-markers-2_2735:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-2.c'
    sources:
      binary: conflict-markers-2.s
  group: GRPSERIAL
test_conflict-markers-2_2736:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-2.c'
    sources:
      binary: conflict-markers-2.s
  group: GRPSERIAL
test_conflict-markers-2_2737:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-2.c'
    sources:
      binary: conflict-markers-2.s
  group: GRPSERIAL
test_conflict-markers-2_555:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-2.c'
    sources:
      binary: conflict-markers-2.s
  group: GRPSERIAL
test_conflict-markers-3_1246:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-3.c'
    sources:
      binary: conflict-markers-3.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-3_1247:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-3.c'
    sources:
      binary: conflict-markers-3.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-3_1248:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-3.c'
    sources:
      binary: conflict-markers-3.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-3_167:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-3.c'
    sources:
      binary: conflict-markers-3.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-3_2048:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-3.c'
    sources:
      binary: conflict-markers-3.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-3_2738:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-3.c'
    sources:
      binary: conflict-markers-3.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-3_2739:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-3.c'
    sources:
      binary: conflict-markers-3.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-3_2740:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-3.c'
    sources:
      binary: conflict-markers-3.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-3_556:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-3.c'
    sources:
      binary: conflict-markers-3.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-4_1249:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-4.c'
    sources:
      binary: conflict-markers-4.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-4_1250:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-4.c'
    sources:
      binary: conflict-markers-4.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-4_1251:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-4.c'
    sources:
      binary: conflict-markers-4.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-4_168:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-4.c'
    sources:
      binary: conflict-markers-4.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-4_2049:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-4.c'
    sources:
      binary: conflict-markers-4.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-4_2741:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-4.c'
    sources:
      binary: conflict-markers-4.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-4_2742:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-4.c'
    sources:
      binary: conflict-markers-4.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-4_2743:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-4.c'
    sources:
      binary: conflict-markers-4.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-4_557:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-4.c'
    sources:
      binary: conflict-markers-4.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-5_1252:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-5.c'
    sources:
      binary: conflict-markers-5.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-5_1253:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-5.c'
    sources:
      binary: conflict-markers-5.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-5_1254:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-5.c'
    sources:
      binary: conflict-markers-5.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-5_169:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-5.c'
    sources:
      binary: conflict-markers-5.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-5_2050:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-5.c'
    sources:
      binary: conflict-markers-5.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-5_2744:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-5.c'
    sources:
      binary: conflict-markers-5.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-5_2745:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-5.c'
    sources:
      binary: conflict-markers-5.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-5_2746:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-5.c'
    sources:
      binary: conflict-markers-5.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-5_558:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-5.c'
    sources:
      binary: conflict-markers-5.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict marker")[^\n]*\n?)+'
test_conflict-markers-6_1255:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-6.c'
    sources:
      binary: conflict-markers-6.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_conflict-markers-6_1256:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-6.c'
    sources:
      binary: conflict-markers-6.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_conflict-markers-6_1257:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-6.c'
    sources:
      binary: conflict-markers-6.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_conflict-markers-6_170:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-6.c'
    sources:
      binary: conflict-markers-6.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_conflict-markers-6_2051:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-6.c'
    sources:
      binary: conflict-markers-6.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_conflict-markers-6_2747:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-6.c'
    sources:
      binary: conflict-markers-6.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_conflict-markers-6_2748:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-6.c'
    sources:
      binary: conflict-markers-6.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_conflict-markers-6_2749:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-6.c'
    sources:
      binary: conflict-markers-6.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_conflict-markers-6_559:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-6.c'
    sources:
      binary: conflict-markers-6.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_conflict-markers-7_1258:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-7.c'
    sources:
      binary: conflict-markers-7.s
  group: GRPSERIAL
test_conflict-markers-7_1259:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-7.c'
    sources:
      binary: conflict-markers-7.s
  group: GRPSERIAL
test_conflict-markers-7_1260:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-7.c'
    sources:
      binary: conflict-markers-7.s
  group: GRPSERIAL
test_conflict-markers-7_171:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-7.c'
    sources:
      binary: conflict-markers-7.s
  group: GRPSERIAL
test_conflict-markers-7_2052:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-7.c'
    sources:
      binary: conflict-markers-7.s
  group: GRPSERIAL
test_conflict-markers-7_2750:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-7.c'
    sources:
      binary: conflict-markers-7.s
  group: GRPSERIAL
test_conflict-markers-7_2751:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-7.c'
    sources:
      binary: conflict-markers-7.s
  group: GRPSERIAL
test_conflict-markers-7_2752:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-7.c'
    sources:
      binary: conflict-markers-7.s
  group: GRPSERIAL
test_conflict-markers-7_560:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-7.c'
    sources:
      binary: conflict-markers-7.s
  group: GRPSERIAL
test_conflict-markers-8_1261:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-8.c'
    sources:
      binary: conflict-markers-8.s
  group: GRPSERIAL
test_conflict-markers-8_1262:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-8.c'
    sources:
      binary: conflict-markers-8.s
  group: GRPSERIAL
test_conflict-markers-8_1263:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-8.c'
    sources:
      binary: conflict-markers-8.s
  group: GRPSERIAL
test_conflict-markers-8_172:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-8.c'
    sources:
      binary: conflict-markers-8.s
  group: GRPSERIAL
test_conflict-markers-8_2053:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-8.c'
    sources:
      binary: conflict-markers-8.s
  group: GRPSERIAL
test_conflict-markers-8_2753:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-8.c'
    sources:
      binary: conflict-markers-8.s
  group: GRPSERIAL
test_conflict-markers-8_2754:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-8.c'
    sources:
      binary: conflict-markers-8.s
  group: GRPSERIAL
test_conflict-markers-8_2755:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-8.c'
    sources:
      binary: conflict-markers-8.s
  group: GRPSERIAL
test_conflict-markers-8_561:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-8.c'
    sources:
      binary: conflict-markers-8.s
  group: GRPSERIAL
test_conflict-markers-9_1264:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-9.c'
    sources:
      binary: conflict-markers-9.s
  group: GRPSERIAL
test_conflict-markers-9_1265:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-9.c'
    sources:
      binary: conflict-markers-9.s
  group: GRPSERIAL
test_conflict-markers-9_1266:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-9.c'
    sources:
      binary: conflict-markers-9.s
  group: GRPSERIAL
test_conflict-markers-9_173:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-9.c'
    sources:
      binary: conflict-markers-9.s
  group: GRPSERIAL
test_conflict-markers-9_2054:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-9.c'
    sources:
      binary: conflict-markers-9.s
  group: GRPSERIAL
test_conflict-markers-9_2756:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-9.c'
    sources:
      binary: conflict-markers-9.s
  group: GRPSERIAL
test_conflict-markers-9_2757:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-9.c'
    sources:
      binary: conflict-markers-9.s
  group: GRPSERIAL
test_conflict-markers-9_2758:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-9.c'
    sources:
      binary: conflict-markers-9.s
  group: GRPSERIAL
test_conflict-markers-9_562:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/conflict-markers-9.c'
    sources:
      binary: conflict-markers-9.s
  group: GRPSERIAL
test_convert-vec-1_1267:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/convert-vec-1.c'
    sources:
      binary: convert-vec-1.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("can\''t convert")[^\n]*\n?)+'
test_convert-vec-1_1268:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/convert-vec-1.c'
    sources:
      binary: convert-vec-1.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("can\''t convert")[^\n]*\n?)+'
test_convert-vec-1_1269:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/convert-vec-1.c'
    sources:
      binary: convert-vec-1.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("can\''t convert")[^\n]*\n?)+'
test_convert-vec-1_174:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/convert-vec-1.c'
    sources:
      binary: convert-vec-1.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("can\''t convert")[^\n]*\n?)+'
test_convert-vec-1_2055:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/convert-vec-1.c'
    sources:
      binary: convert-vec-1.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("can\''t convert")[^\n]*\n?)+'
test_convert-vec-1_2759:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/convert-vec-1.c'
    sources:
      binary: convert-vec-1.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("can\''t convert")[^\n]*\n?)+'
test_convert-vec-1_2760:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/convert-vec-1.c'
    sources:
      binary: convert-vec-1.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("can\''t convert")[^\n]*\n?)+'
test_convert-vec-1_2761:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/convert-vec-1.c'
    sources:
      binary: convert-vec-1.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("can\''t convert")[^\n]*\n?)+'
test_convert-vec-1_563:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/convert-vec-1.c'
    sources:
      binary: convert-vec-1.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("can\''t convert")[^\n]*\n?)+'
test_cxxbitfields-3_1270:
  build:
    cflags: "-std=gnu++98 -O2 --param allow-store-data-races=0 -ffat-lto-objects\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/cxxbitfields-3.c'
    sources:
      binary: cxxbitfields-3.s
  group: GRPSERIAL
test_cxxbitfields-3_1271:
  build:
    cflags: "-std=gnu++11 -O2 --param allow-store-data-races=0 -ffat-lto-objects\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/cxxbitfields-3.c'
    sources:
      binary: cxxbitfields-3.s
  group: GRPSERIAL
test_cxxbitfields-3_1272:
  build:
    cflags: "-std=gnu++14 -O2 --param allow-store-data-races=0 -ffat-lto-objects\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/cxxbitfields-3.c'
    sources:
      binary: cxxbitfields-3.s
  group: GRPSERIAL
test_cxxbitfields-3_175:
  build:
    cflags: "-Wc++-compat -O2 --param allow-store-data-races=0 -ffat-lto-objects\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/cxxbitfields-3.c'
    sources:
      binary: cxxbitfields-3.s
  group: GRPSERIAL
test_cxxbitfields-3_2056:
  build:
    cflags: "-Wc++-compat -O2 --param allow-store-data-races=0 -ffat-lto-objects\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/cxxbitfields-3.c'
    sources:
      binary: cxxbitfields-3.s
  group: GRPSERIAL
test_cxxbitfields-3_2762:
  build:
    cflags: "-std=gnu++98 -O2 --param allow-store-data-races=0 -ffat-lto-objects\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/cxxbitfields-3.c'
    sources:
      binary: cxxbitfields-3.s
  group: GRPSERIAL
test_cxxbitfields-3_2763:
  build:
    cflags: "-std=gnu++11 -O2 --param allow-store-data-races=0 -ffat-lto-objects\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/cxxbitfields-3.c'
    sources:
      binary: cxxbitfields-3.s
  group: GRPSERIAL
test_cxxbitfields-3_2764:
  build:
    cflags: "-std=gnu++14 -O2 --param allow-store-data-races=0 -ffat-lto-objects\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/cxxbitfields-3.c'
    sources:
      binary: cxxbitfields-3.s
  group: GRPSERIAL
test_cxxbitfields-3_564:
  build:
    cflags: "-Wc++-compat -O2 --param allow-store-data-races=0 -ffat-lto-objects\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/cxxbitfields-3.c'
    sources:
      binary: cxxbitfields-3.s
  group: GRPSERIAL
test_cxxbitfields-6_1273:
  build:
    cflags: "-std=gnu++98 -O2 --param allow-store-data-races=0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/cxxbitfields-6.c'
    sources:
      binary: cxxbitfields-6.s
  group: GRPSERIAL
test_cxxbitfields-6_1274:
  build:
    cflags: "-std=gnu++11 -O2 --param allow-store-data-races=0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/cxxbitfields-6.c'
    sources:
      binary: cxxbitfields-6.s
  group: GRPSERIAL
test_cxxbitfields-6_1275:
  build:
    cflags: "-std=gnu++14 -O2 --param allow-store-data-races=0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/cxxbitfields-6.c'
    sources:
      binary: cxxbitfields-6.s
  group: GRPSERIAL
test_cxxbitfields-6_176:
  build:
    cflags: "-Wc++-compat  -O2 --param allow-store-data-races=0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/cxxbitfields-6.c'
    sources:
      binary: cxxbitfields-6.s
  group: GRPSERIAL
test_cxxbitfields-6_2057:
  build:
    cflags: "-Wc++-compat  -O2 --param allow-store-data-races=0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/cxxbitfields-6.c'
    sources:
      binary: cxxbitfields-6.s
  group: GRPSERIAL
test_cxxbitfields-6_2765:
  build:
    cflags: "-std=gnu++98 -O2 --param allow-store-data-races=0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/cxxbitfields-6.c'
    sources:
      binary: cxxbitfields-6.s
  group: GRPSERIAL
test_cxxbitfields-6_2766:
  build:
    cflags: "-std=gnu++11 -O2 --param allow-store-data-races=0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/cxxbitfields-6.c'
    sources:
      binary: cxxbitfields-6.s
  group: GRPSERIAL
test_cxxbitfields-6_2767:
  build:
    cflags: "-std=gnu++14 -O2 --param allow-store-data-races=0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/cxxbitfields-6.c'
    sources:
      binary: cxxbitfields-6.s
  group: GRPSERIAL
test_cxxbitfields-6_565:
  build:
    cflags: "-Wc++-compat  -O2 --param allow-store-data-races=0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/cxxbitfields-6.c'
    sources:
      binary: cxxbitfields-6.s
  group: GRPSERIAL
test_dump-ada-spec-1_1276:
  build:
    cflags: "-std=gnu++98 -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-1.c'
    sources:
      binary: dump-ada-spec-1.s
  group: GRPSERIAL
test_dump-ada-spec-1_1277:
  build:
    cflags: "-std=gnu++11 -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-1.c'
    sources:
      binary: dump-ada-spec-1.s
  group: GRPSERIAL
test_dump-ada-spec-1_1278:
  build:
    cflags: "-std=gnu++14 -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-1.c'
    sources:
      binary: dump-ada-spec-1.s
  group: GRPSERIAL
test_dump-ada-spec-1_177:
  build:
    cflags: "-Wc++-compat  -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-1.c'
    sources:
      binary: dump-ada-spec-1.s
  group: GRPSERIAL
test_dump-ada-spec-1_2058:
  build:
    cflags: "-Wc++-compat  -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-1.c'
    sources:
      binary: dump-ada-spec-1.s
  group: GRPSERIAL
test_dump-ada-spec-1_2768:
  build:
    cflags: "-std=gnu++98 -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-1.c'
    sources:
      binary: dump-ada-spec-1.s
  group: GRPSERIAL
test_dump-ada-spec-1_2769:
  build:
    cflags: "-std=gnu++11 -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-1.c'
    sources:
      binary: dump-ada-spec-1.s
  group: GRPSERIAL
test_dump-ada-spec-1_2770:
  build:
    cflags: "-std=gnu++14 -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-1.c'
    sources:
      binary: dump-ada-spec-1.s
  group: GRPSERIAL
test_dump-ada-spec-1_566:
  build:
    cflags: "-Wc++-compat  -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-1.c'
    sources:
      binary: dump-ada-spec-1.s
  group: GRPSERIAL
test_dump-ada-spec-2_1279:
  build:
    cflags: "-std=gnu++98 -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-2.c'
    sources:
      binary: dump-ada-spec-2.s
  group: GRPSERIAL
test_dump-ada-spec-2_1280:
  build:
    cflags: "-std=gnu++11 -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-2.c'
    sources:
      binary: dump-ada-spec-2.s
  group: GRPSERIAL
test_dump-ada-spec-2_1281:
  build:
    cflags: "-std=gnu++14 -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-2.c'
    sources:
      binary: dump-ada-spec-2.s
  group: GRPSERIAL
test_dump-ada-spec-2_178:
  build:
    cflags: "-Wc++-compat  -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-2.c'
    sources:
      binary: dump-ada-spec-2.s
  group: GRPSERIAL
test_dump-ada-spec-2_2059:
  build:
    cflags: "-Wc++-compat  -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-2.c'
    sources:
      binary: dump-ada-spec-2.s
  group: GRPSERIAL
test_dump-ada-spec-2_2771:
  build:
    cflags: "-std=gnu++98 -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-2.c'
    sources:
      binary: dump-ada-spec-2.s
  group: GRPSERIAL
test_dump-ada-spec-2_2772:
  build:
    cflags: "-std=gnu++11 -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-2.c'
    sources:
      binary: dump-ada-spec-2.s
  group: GRPSERIAL
test_dump-ada-spec-2_2773:
  build:
    cflags: "-std=gnu++14 -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-2.c'
    sources:
      binary: dump-ada-spec-2.s
  group: GRPSERIAL
test_dump-ada-spec-2_567:
  build:
    cflags: "-Wc++-compat  -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-2.c'
    sources:
      binary: dump-ada-spec-2.s
  group: GRPSERIAL
test_dump-ada-spec-3_1282:
  build:
    cflags: "-std=gnu++98 -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-3.c'
    sources:
      binary: dump-ada-spec-3.s
  group: GRPSERIAL
test_dump-ada-spec-3_1283:
  build:
    cflags: "-std=gnu++11 -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-3.c'
    sources:
      binary: dump-ada-spec-3.s
  group: GRPSERIAL
test_dump-ada-spec-3_1284:
  build:
    cflags: "-std=gnu++14 -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-3.c'
    sources:
      binary: dump-ada-spec-3.s
  group: GRPSERIAL
test_dump-ada-spec-3_179:
  build:
    cflags: "-Wc++-compat  -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-3.c'
    sources:
      binary: dump-ada-spec-3.s
  group: GRPSERIAL
test_dump-ada-spec-3_2060:
  build:
    cflags: "-Wc++-compat  -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-3.c'
    sources:
      binary: dump-ada-spec-3.s
  group: GRPSERIAL
test_dump-ada-spec-3_2774:
  build:
    cflags: "-std=gnu++98 -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-3.c'
    sources:
      binary: dump-ada-spec-3.s
  group: GRPSERIAL
test_dump-ada-spec-3_2775:
  build:
    cflags: "-std=gnu++11 -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-3.c'
    sources:
      binary: dump-ada-spec-3.s
  group: GRPSERIAL
test_dump-ada-spec-3_2776:
  build:
    cflags: "-std=gnu++14 -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-3.c'
    sources:
      binary: dump-ada-spec-3.s
  group: GRPSERIAL
test_dump-ada-spec-3_568:
  build:
    cflags: "-Wc++-compat  -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-3.c'
    sources:
      binary: dump-ada-spec-3.s
  group: GRPSERIAL
test_dump-ada-spec-4_1285:
  build:
    cflags: "-std=gnu++98 -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-4.c'
    sources:
      binary: dump-ada-spec-4.s
  group: GRPSERIAL
test_dump-ada-spec-4_1286:
  build:
    cflags: "-std=gnu++11 -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-4.c'
    sources:
      binary: dump-ada-spec-4.s
  group: GRPSERIAL
test_dump-ada-spec-4_1287:
  build:
    cflags: "-std=gnu++14 -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-4.c'
    sources:
      binary: dump-ada-spec-4.s
  group: GRPSERIAL
test_dump-ada-spec-4_180:
  build:
    cflags: "-Wc++-compat  -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-4.c'
    sources:
      binary: dump-ada-spec-4.s
  group: GRPSERIAL
test_dump-ada-spec-4_2061:
  build:
    cflags: "-Wc++-compat  -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-4.c'
    sources:
      binary: dump-ada-spec-4.s
  group: GRPSERIAL
test_dump-ada-spec-4_2777:
  build:
    cflags: "-std=gnu++98 -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-4.c'
    sources:
      binary: dump-ada-spec-4.s
  group: GRPSERIAL
test_dump-ada-spec-4_2778:
  build:
    cflags: "-std=gnu++11 -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-4.c'
    sources:
      binary: dump-ada-spec-4.s
  group: GRPSERIAL
test_dump-ada-spec-4_2779:
  build:
    cflags: "-std=gnu++14 -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-4.c'
    sources:
      binary: dump-ada-spec-4.s
  group: GRPSERIAL
test_dump-ada-spec-4_569:
  build:
    cflags: "-Wc++-compat  -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-4.c'
    sources:
      binary: dump-ada-spec-4.s
  group: GRPSERIAL
test_dump-ada-spec-5_1288:
  build:
    cflags: "-std=gnu++98 -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-5.c'
    sources:
      binary: dump-ada-spec-5.s
  group: GRPSERIAL
test_dump-ada-spec-5_1289:
  build:
    cflags: "-std=gnu++11 -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-5.c'
    sources:
      binary: dump-ada-spec-5.s
  group: GRPSERIAL
test_dump-ada-spec-5_1290:
  build:
    cflags: "-std=gnu++14 -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-5.c'
    sources:
      binary: dump-ada-spec-5.s
  group: GRPSERIAL
test_dump-ada-spec-5_181:
  build:
    cflags: "-Wc++-compat  -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-5.c'
    sources:
      binary: dump-ada-spec-5.s
  group: GRPSERIAL
test_dump-ada-spec-5_2062:
  build:
    cflags: "-Wc++-compat  -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-5.c'
    sources:
      binary: dump-ada-spec-5.s
  group: GRPSERIAL
test_dump-ada-spec-5_2780:
  build:
    cflags: "-std=gnu++98 -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-5.c'
    sources:
      binary: dump-ada-spec-5.s
  group: GRPSERIAL
test_dump-ada-spec-5_2781:
  build:
    cflags: "-std=gnu++11 -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-5.c'
    sources:
      binary: dump-ada-spec-5.s
  group: GRPSERIAL
test_dump-ada-spec-5_2782:
  build:
    cflags: "-std=gnu++14 -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-5.c'
    sources:
      binary: dump-ada-spec-5.s
  group: GRPSERIAL
test_dump-ada-spec-5_570:
  build:
    cflags: "-Wc++-compat  -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-5.c'
    sources:
      binary: dump-ada-spec-5.s
  group: GRPSERIAL
test_dump-ada-spec-6_1291:
  build:
    cflags: "-std=gnu++98 -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-6.c'
    sources:
      binary: dump-ada-spec-6.s
  group: GRPSERIAL
test_dump-ada-spec-6_1292:
  build:
    cflags: "-std=gnu++11 -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-6.c'
    sources:
      binary: dump-ada-spec-6.s
  group: GRPSERIAL
test_dump-ada-spec-6_1293:
  build:
    cflags: "-std=gnu++14 -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-6.c'
    sources:
      binary: dump-ada-spec-6.s
  group: GRPSERIAL
test_dump-ada-spec-6_182:
  build:
    cflags: "-Wc++-compat  -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-6.c'
    sources:
      binary: dump-ada-spec-6.s
  group: GRPSERIAL
test_dump-ada-spec-6_2063:
  build:
    cflags: "-Wc++-compat  -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-6.c'
    sources:
      binary: dump-ada-spec-6.s
  group: GRPSERIAL
test_dump-ada-spec-6_2783:
  build:
    cflags: "-std=gnu++98 -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-6.c'
    sources:
      binary: dump-ada-spec-6.s
  group: GRPSERIAL
test_dump-ada-spec-6_2784:
  build:
    cflags: "-std=gnu++11 -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-6.c'
    sources:
      binary: dump-ada-spec-6.s
  group: GRPSERIAL
test_dump-ada-spec-6_2785:
  build:
    cflags: "-std=gnu++14 -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-6.c'
    sources:
      binary: dump-ada-spec-6.s
  group: GRPSERIAL
test_dump-ada-spec-6_571:
  build:
    cflags: "-Wc++-compat  -fdump-ada-spec\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/dump-ada-spec-6.c'
    sources:
      binary: dump-ada-spec-6.s
  group: GRPSERIAL
test_fmax-errors_1294:
  build:
    cflags: "-std=gnu++98 -fmax-errors=3 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/fmax-errors.c'
    sources:
      binary: fmax-errors.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_fmax-errors_1295:
  build:
    cflags: "-std=gnu++11 -fmax-errors=3 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/fmax-errors.c'
    sources:
      binary: fmax-errors.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_fmax-errors_1296:
  build:
    cflags: "-std=gnu++14 -fmax-errors=3 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/fmax-errors.c'
    sources:
      binary: fmax-errors.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_fmax-errors_183:
  build:
    cflags: "-Wc++-compat  -fmax-errors=3 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/fmax-errors.c'
    sources:
      binary: fmax-errors.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_fmax-errors_2064:
  build:
    cflags: "-Wc++-compat  -fmax-errors=3 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/fmax-errors.c'
    sources:
      binary: fmax-errors.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_fmax-errors_2786:
  build:
    cflags: "-std=gnu++98 -fmax-errors=3 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/fmax-errors.c'
    sources:
      binary: fmax-errors.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_fmax-errors_2787:
  build:
    cflags: "-std=gnu++11 -fmax-errors=3 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/fmax-errors.c'
    sources:
      binary: fmax-errors.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_fmax-errors_2788:
  build:
    cflags: "-std=gnu++14 -fmax-errors=3 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/fmax-errors.c'
    sources:
      binary: fmax-errors.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_fmax-errors_572:
  build:
    cflags: "-Wc++-compat  -fmax-errors=3 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/fmax-errors.c'
    sources:
      binary: fmax-errors.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_fold-bitand-4_184:
  build:
    cflags: "-Wc++-compat  -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/fold-bitand-4.c'
    sources:
      binary: fold-bitand-4.s
  group: GRPSERIAL
test_fold-bitand-4_2065:
  build:
    cflags: "-Wc++-compat  -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/fold-bitand-4.c'
    sources:
      binary: fold-bitand-4.s
  group: GRPSERIAL
test_fold-bitand-4_573:
  build:
    cflags: "-Wc++-compat  -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/fold-bitand-4.c'
    sources:
      binary: fold-bitand-4.s
  group: GRPSERIAL
test_fold-divmul-1_1297:
  build:
    cflags: "-std=gnu++98 -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/fold-divmul-1.c'
    sources:
      binary: fold-divmul-1.s
  group: GRPSERIAL
test_fold-divmul-1_1298:
  build:
    cflags: "-std=gnu++11 -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/fold-divmul-1.c'
    sources:
      binary: fold-divmul-1.s
  group: GRPSERIAL
test_fold-divmul-1_1299:
  build:
    cflags: "-std=gnu++14 -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/fold-divmul-1.c'
    sources:
      binary: fold-divmul-1.s
  group: GRPSERIAL
test_fold-divmul-1_185:
  build:
    cflags: "-Wc++-compat  -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/fold-divmul-1.c'
    sources:
      binary: fold-divmul-1.s
  group: GRPSERIAL
test_fold-divmul-1_2066:
  build:
    cflags: "-Wc++-compat  -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/fold-divmul-1.c'
    sources:
      binary: fold-divmul-1.s
  group: GRPSERIAL
test_fold-divmul-1_2789:
  build:
    cflags: "-std=gnu++98 -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/fold-divmul-1.c'
    sources:
      binary: fold-divmul-1.s
  group: GRPSERIAL
test_fold-divmul-1_2790:
  build:
    cflags: "-std=gnu++11 -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/fold-divmul-1.c'
    sources:
      binary: fold-divmul-1.s
  group: GRPSERIAL
test_fold-divmul-1_2791:
  build:
    cflags: "-std=gnu++14 -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/fold-divmul-1.c'
    sources:
      binary: fold-divmul-1.s
  group: GRPSERIAL
test_fold-divmul-1_574:
  build:
    cflags: "-Wc++-compat  -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/fold-divmul-1.c'
    sources:
      binary: fold-divmul-1.s
  group: GRPSERIAL
test_init-vec-1_1300:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/init-vec-1.c'
    sources:
      binary: init-vec-1.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible types|cannot
          convert")[^\n]*\n?)+'
test_init-vec-1_1301:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/init-vec-1.c'
    sources:
      binary: init-vec-1.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible types|cannot
          convert")[^\n]*\n?)+'
test_init-vec-1_1302:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/init-vec-1.c'
    sources:
      binary: init-vec-1.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible types|cannot
          convert")[^\n]*\n?)+'
test_init-vec-1_186:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/init-vec-1.c'
    sources:
      binary: init-vec-1.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible types|cannot
          convert")[^\n]*\n?)+'
test_init-vec-1_2067:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/init-vec-1.c'
    sources:
      binary: init-vec-1.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible types|cannot
          convert")[^\n]*\n?)+'
test_init-vec-1_2792:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/init-vec-1.c'
    sources:
      binary: init-vec-1.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible types|cannot
          convert")[^\n]*\n?)+'
test_init-vec-1_2793:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/init-vec-1.c'
    sources:
      binary: init-vec-1.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible types|cannot
          convert")[^\n]*\n?)+'
test_init-vec-1_2794:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/init-vec-1.c'
    sources:
      binary: init-vec-1.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible types|cannot
          convert")[^\n]*\n?)+'
test_init-vec-1_575:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/init-vec-1.c'
    sources:
      binary: init-vec-1.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible types|cannot
          convert")[^\n]*\n?)+'
test_int128-1_1303:
  build:
    cflags: -std=gnu++98
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/int128-1.c'
    sources:
      binary: ./int128-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_int128-1_1304:
  build:
    cflags: -std=gnu++11
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/int128-1.c'
    sources:
      binary: ./int128-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_int128-1_1305:
  build:
    cflags: -std=gnu++14
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/int128-1.c'
    sources:
      binary: ./int128-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_int128-1_187:
  build:
    cflags: -Wc++-compat  -std=gnu99
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/int128-1.c'
    sources:
      binary: ./int128-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_int128-1_2068:
  build:
    cflags: -Wc++-compat  -std=gnu99
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/int128-1.c'
    sources:
      binary: ./int128-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_int128-1_2795:
  build:
    cflags: -std=gnu++98
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/int128-1.c'
    sources:
      binary: ./int128-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_int128-1_2796:
  build:
    cflags: -std=gnu++11
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/int128-1.c'
    sources:
      binary: ./int128-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_int128-1_2797:
  build:
    cflags: -std=gnu++14
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/int128-1.c'
    sources:
      binary: ./int128-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_int128-1_576:
  build:
    cflags: -Wc++-compat  -std=gnu99
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/int128-1.c'
    sources:
      binary: ./int128-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_int128-2_1306:
  build:
    cflags: -std=gnu++98
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/int128-2.c'
    sources:
      binary: ./int128-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_int128-2_1307:
  build:
    cflags: -std=gnu++11
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/int128-2.c'
    sources:
      binary: ./int128-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_int128-2_1308:
  build:
    cflags: -std=gnu++14
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/int128-2.c'
    sources:
      binary: ./int128-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_int128-2_188:
  build:
    cflags: -Wc++-compat  -std=gnu99
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/int128-2.c'
    sources:
      binary: ./int128-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_int128-2_2069:
  build:
    cflags: -Wc++-compat  -std=gnu99
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/int128-2.c'
    sources:
      binary: ./int128-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_int128-2_2798:
  build:
    cflags: -std=gnu++98
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/int128-2.c'
    sources:
      binary: ./int128-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_int128-2_2799:
  build:
    cflags: -std=gnu++11
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/int128-2.c'
    sources:
      binary: ./int128-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_int128-2_2800:
  build:
    cflags: -std=gnu++14
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/int128-2.c'
    sources:
      binary: ./int128-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_int128-2_577:
  build:
    cflags: -Wc++-compat  -std=gnu99
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/int128-2.c'
    sources:
      binary: ./int128-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_int128-types-1_1309:
  build:
    cflags: "-std=gnu++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/int128-types-1.c'
    sources:
      binary: int128-types-1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L100:
        expect: true
        expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L109:
        expect: true
        expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L117:
        expect: true
        expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L118:
        expect: true
        expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L119:
        expect: true
        expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L123:
        expect: true
        expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L126:
        expect: true
        expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+:129:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L130:
        expect: true
        expr: '(^|\n)([^\n]+:130:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L132:
        expect: true
        expr: '(^|\n)([^\n]+:132:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+:133:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L138:
        expect: true
        expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L139:
        expect: true
        expr: '(^|\n)([^\n]+:139:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L140:
        expect: true
        expr: '(^|\n)([^\n]+:140:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L141:
        expect: true
        expr: '(^|\n)([^\n]+:141:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+:142:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L145:
        expect: true
        expr: '(^|\n)([^\n]+:145:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L149:
        expect: true
        expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+:152:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+:154:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+:155:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L160:
        expect: true
        expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L161:
        expect: true
        expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L162:
        expect: true
        expr: '(^|\n)([^\n]+:162:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L163:
        expect: true
        expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+:166:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L167:
        expect: true
        expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L168:
        expect: true
        expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L169:
        expect: true
        expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L170:
        expect: true
        expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L171:
        expect: true
        expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+:172:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L173:
        expect: true
        expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L174:
        expect: true
        expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+:177:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L179:
        expect: true
        expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L181:
        expect: true
        expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L182:
        expect: true
        expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L185:
        expect: true
        expr: '(^|\n)([^\n]+:185:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L188:
        expect: true
        expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L189:
        expect: true
        expr: '(^|\n)([^\n]+:189:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L191:
        expect: true
        expr: '(^|\n)([^\n]+:191:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L192:
        expect: true
        expr: '(^|\n)([^\n]+:192:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L194:
        expect: true
        expr: '(^|\n)([^\n]+:194:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L195:
        expect: true
        expr: '(^|\n)([^\n]+:195:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+:196:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+:197:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L198:
        expect: true
        expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L199:
        expect: true
        expr: '(^|\n)([^\n]+:199:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L200:
        expect: true
        expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L201:
        expect: true
        expr: '(^|\n)([^\n]+:201:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L202:
        expect: true
        expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L203:
        expect: true
        expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L204:
        expect: true
        expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L205:
        expect: true
        expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L206:
        expect: true
        expr: '(^|\n)([^\n]+:206:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L207:
        expect: true
        expr: '(^|\n)([^\n]+:207:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L208:
        expect: true
        expr: '(^|\n)([^\n]+:208:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L209:
        expect: true
        expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L210:
        expect: true
        expr: '(^|\n)([^\n]+:210:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L211:
        expect: true
        expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L213:
        expect: true
        expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L216:
        expect: true
        expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L217:
        expect: true
        expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L218:
        expect: true
        expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L219:
        expect: true
        expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L220:
        expect: true
        expr: '(^|\n)([^\n]+:220:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L221:
        expect: true
        expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L222:
        expect: true
        expr: '(^|\n)([^\n]+:222:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L223:
        expect: true
        expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L224:
        expect: true
        expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L225:
        expect: true
        expr: '(^|\n)([^\n]+:225:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L226:
        expect: true
        expr: '(^|\n)([^\n]+:226:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L228:
        expect: true
        expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L229:
        expect: true
        expr: '(^|\n)([^\n]+:229:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L230:
        expect: true
        expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L231:
        expect: true
        expr: '(^|\n)([^\n]+:231:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L232:
        expect: true
        expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L233:
        expect: true
        expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L234:
        expect: true
        expr: '(^|\n)([^\n]+:234:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L235:
        expect: true
        expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L236:
        expect: true
        expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L237:
        expect: true
        expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L238:
        expect: true
        expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L239:
        expect: true
        expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L240:
        expect: true
        expr: '(^|\n)([^\n]+:240:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L241:
        expect: true
        expr: '(^|\n)([^\n]+:241:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L242:
        expect: true
        expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L243:
        expect: true
        expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L244:
        expect: true
        expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L245:
        expect: true
        expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L246:
        expect: true
        expr: '(^|\n)([^\n]+:246:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L247:
        expect: true
        expr: '(^|\n)([^\n]+:247:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L248:
        expect: true
        expr: '(^|\n)([^\n]+:248:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L249:
        expect: true
        expr: '(^|\n)([^\n]+:249:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L250:
        expect: true
        expr: '(^|\n)([^\n]+:250:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L251:
        expect: true
        expr: '(^|\n)([^\n]+:251:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L252:
        expect: true
        expr: '(^|\n)([^\n]+:252:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L253:
        expect: true
        expr: '(^|\n)([^\n]+:253:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L254:
        expect: true
        expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L255:
        expect: true
        expr: '(^|\n)([^\n]+:255:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L256:
        expect: true
        expr: '(^|\n)([^\n]+:256:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L257:
        expect: true
        expr: '(^|\n)([^\n]+:257:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L258:
        expect: true
        expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L259:
        expect: true
        expr: '(^|\n)([^\n]+:259:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L260:
        expect: true
        expr: '(^|\n)([^\n]+:260:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L261:
        expect: true
        expr: '(^|\n)([^\n]+:261:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L262:
        expect: true
        expr: '(^|\n)([^\n]+:262:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L263:
        expect: true
        expr: '(^|\n)([^\n]+:263:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L264:
        expect: true
        expr: '(^|\n)([^\n]+:264:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L265:
        expect: true
        expr: '(^|\n)([^\n]+:265:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L266:
        expect: true
        expr: '(^|\n)([^\n]+:266:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L267:
        expect: true
        expr: '(^|\n)([^\n]+:267:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L268:
        expect: true
        expr: '(^|\n)([^\n]+:268:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L269:
        expect: true
        expr: '(^|\n)([^\n]+:269:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L270:
        expect: true
        expr: '(^|\n)([^\n]+:270:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L271:
        expect: true
        expr: '(^|\n)([^\n]+:271:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L272:
        expect: true
        expr: '(^|\n)([^\n]+:272:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L273:
        expect: true
        expr: '(^|\n)([^\n]+:273:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L274:
        expect: true
        expr: '(^|\n)([^\n]+:274:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L275:
        expect: true
        expr: '(^|\n)([^\n]+:275:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L276:
        expect: true
        expr: '(^|\n)([^\n]+:276:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L277:
        expect: true
        expr: '(^|\n)([^\n]+:277:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L278:
        expect: true
        expr: '(^|\n)([^\n]+:278:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L279:
        expect: true
        expr: '(^|\n)([^\n]+:279:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L280:
        expect: true
        expr: '(^|\n)([^\n]+:280:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L281:
        expect: true
        expr: '(^|\n)([^\n]+:281:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L282:
        expect: true
        expr: '(^|\n)([^\n]+:282:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L283:
        expect: true
        expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L284:
        expect: true
        expr: '(^|\n)([^\n]+:284:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L285:
        expect: true
        expr: '(^|\n)([^\n]+:285:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L286:
        expect: true
        expr: '(^|\n)([^\n]+:286:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L287:
        expect: true
        expr: '(^|\n)([^\n]+:287:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L288:
        expect: true
        expr: '(^|\n)([^\n]+:288:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L289:
        expect: true
        expr: '(^|\n)([^\n]+:289:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L290:
        expect: true
        expr: '(^|\n)([^\n]+:290:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L291:
        expect: true
        expr: '(^|\n)([^\n]+:291:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L292:
        expect: true
        expr: '(^|\n)([^\n]+:292:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L293:
        expect: true
        expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L294:
        expect: true
        expr: '(^|\n)([^\n]+:294:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L295:
        expect: true
        expr: '(^|\n)([^\n]+:295:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L296:
        expect: true
        expr: '(^|\n)([^\n]+:296:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L297:
        expect: true
        expr: '(^|\n)([^\n]+:297:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L298:
        expect: true
        expr: '(^|\n)([^\n]+:298:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L299:
        expect: true
        expr: '(^|\n)([^\n]+:299:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L300:
        expect: true
        expr: '(^|\n)([^\n]+:300:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L301:
        expect: true
        expr: '(^|\n)([^\n]+:301:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L302:
        expect: true
        expr: '(^|\n)([^\n]+:302:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L303:
        expect: true
        expr: '(^|\n)([^\n]+:303:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L304:
        expect: true
        expr: '(^|\n)([^\n]+:304:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L305:
        expect: true
        expr: '(^|\n)([^\n]+:305:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L306:
        expect: true
        expr: '(^|\n)([^\n]+:306:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L307:
        expect: true
        expr: '(^|\n)([^\n]+:307:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L308:
        expect: true
        expr: '(^|\n)([^\n]+:308:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L309:
        expect: true
        expr: '(^|\n)([^\n]+:309:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L310:
        expect: true
        expr: '(^|\n)([^\n]+:310:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L311:
        expect: true
        expr: '(^|\n)([^\n]+:311:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L312:
        expect: true
        expr: '(^|\n)([^\n]+:312:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L313:
        expect: true
        expr: '(^|\n)([^\n]+:313:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L314:
        expect: true
        expr: '(^|\n)([^\n]+:314:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L315:
        expect: true
        expr: '(^|\n)([^\n]+:315:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L316:
        expect: true
        expr: '(^|\n)([^\n]+:316:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L317:
        expect: true
        expr: '(^|\n)([^\n]+:317:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L318:
        expect: true
        expr: '(^|\n)([^\n]+:318:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L319:
        expect: true
        expr: '(^|\n)([^\n]+:319:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L320:
        expect: true
        expr: '(^|\n)([^\n]+:320:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L321:
        expect: true
        expr: '(^|\n)([^\n]+:321:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L322:
        expect: true
        expr: '(^|\n)([^\n]+:322:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L323:
        expect: true
        expr: '(^|\n)([^\n]+:323:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L324:
        expect: true
        expr: '(^|\n)([^\n]+:324:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L325:
        expect: true
        expr: '(^|\n)([^\n]+:325:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L326:
        expect: true
        expr: '(^|\n)([^\n]+:326:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L327:
        expect: true
        expr: '(^|\n)([^\n]+:327:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L328:
        expect: true
        expr: '(^|\n)([^\n]+:328:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L329:
        expect: true
        expr: '(^|\n)([^\n]+:329:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L330:
        expect: true
        expr: '(^|\n)([^\n]+:330:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L331:
        expect: true
        expr: '(^|\n)([^\n]+:331:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L332:
        expect: true
        expr: '(^|\n)([^\n]+:332:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L333:
        expect: true
        expr: '(^|\n)([^\n]+:333:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L334:
        expect: true
        expr: '(^|\n)([^\n]+:334:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L335:
        expect: true
        expr: '(^|\n)([^\n]+:335:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L336:
        expect: true
        expr: '(^|\n)([^\n]+:336:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L337:
        expect: true
        expr: '(^|\n)([^\n]+:337:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L338:
        expect: true
        expr: '(^|\n)([^\n]+:338:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L339:
        expect: true
        expr: '(^|\n)([^\n]+:339:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L340:
        expect: true
        expr: '(^|\n)([^\n]+:340:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L341:
        expect: true
        expr: '(^|\n)([^\n]+:341:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L342:
        expect: true
        expr: '(^|\n)([^\n]+:342:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L343:
        expect: true
        expr: '(^|\n)([^\n]+:343:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L344:
        expect: true
        expr: '(^|\n)([^\n]+:344:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L345:
        expect: true
        expr: '(^|\n)([^\n]+:345:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L346:
        expect: true
        expr: '(^|\n)([^\n]+:346:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L347:
        expect: true
        expr: '(^|\n)([^\n]+:347:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L348:
        expect: true
        expr: '(^|\n)([^\n]+:348:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L349:
        expect: true
        expr: '(^|\n)([^\n]+:349:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L350:
        expect: true
        expr: '(^|\n)([^\n]+:350:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L351:
        expect: true
        expr: '(^|\n)([^\n]+:351:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L352:
        expect: true
        expr: '(^|\n)([^\n]+:352:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L353:
        expect: true
        expr: '(^|\n)([^\n]+:353:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L354:
        expect: true
        expr: '(^|\n)([^\n]+:354:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L355:
        expect: true
        expr: '(^|\n)([^\n]+:355:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L356:
        expect: true
        expr: '(^|\n)([^\n]+:356:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L357:
        expect: true
        expr: '(^|\n)([^\n]+:357:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L358:
        expect: true
        expr: '(^|\n)([^\n]+:358:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L359:
        expect: true
        expr: '(^|\n)([^\n]+:359:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L360:
        expect: true
        expr: '(^|\n)([^\n]+:360:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L361:
        expect: true
        expr: '(^|\n)([^\n]+:361:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L362:
        expect: true
        expr: '(^|\n)([^\n]+:362:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L363:
        expect: true
        expr: '(^|\n)([^\n]+:363:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L364:
        expect: true
        expr: '(^|\n)([^\n]+:364:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L365:
        expect: true
        expr: '(^|\n)([^\n]+:365:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L366:
        expect: true
        expr: '(^|\n)([^\n]+:366:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L367:
        expect: true
        expr: '(^|\n)([^\n]+:367:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L368:
        expect: true
        expr: '(^|\n)([^\n]+:368:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L369:
        expect: true
        expr: '(^|\n)([^\n]+:369:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L370:
        expect: true
        expr: '(^|\n)([^\n]+:370:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L371:
        expect: true
        expr: '(^|\n)([^\n]+:371:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L372:
        expect: true
        expr: '(^|\n)([^\n]+:372:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L373:
        expect: true
        expr: '(^|\n)([^\n]+:373:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L374:
        expect: true
        expr: '(^|\n)([^\n]+:374:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L375:
        expect: true
        expr: '(^|\n)([^\n]+:375:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L376:
        expect: true
        expr: '(^|\n)([^\n]+:376:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L377:
        expect: true
        expr: '(^|\n)([^\n]+:377:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L378:
        expect: true
        expr: '(^|\n)([^\n]+:378:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L379:
        expect: true
        expr: '(^|\n)([^\n]+:379:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L380:
        expect: true
        expr: '(^|\n)([^\n]+:380:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L381:
        expect: true
        expr: '(^|\n)([^\n]+:381:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L382:
        expect: true
        expr: '(^|\n)([^\n]+:382:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L383:
        expect: true
        expr: '(^|\n)([^\n]+:383:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L384:
        expect: true
        expr: '(^|\n)([^\n]+:384:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L385:
        expect: true
        expr: '(^|\n)([^\n]+:385:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L386:
        expect: true
        expr: '(^|\n)([^\n]+:386:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L387:
        expect: true
        expr: '(^|\n)([^\n]+:387:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L388:
        expect: true
        expr: '(^|\n)([^\n]+:388:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L389:
        expect: true
        expr: '(^|\n)([^\n]+:389:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L390:
        expect: true
        expr: '(^|\n)([^\n]+:390:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L391:
        expect: true
        expr: '(^|\n)([^\n]+:391:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L392:
        expect: true
        expr: '(^|\n)([^\n]+:392:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L393:
        expect: true
        expr: '(^|\n)([^\n]+:393:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L394:
        expect: true
        expr: '(^|\n)([^\n]+:394:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L395:
        expect: true
        expr: '(^|\n)([^\n]+:395:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L396:
        expect: true
        expr: '(^|\n)([^\n]+:396:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L397:
        expect: true
        expr: '(^|\n)([^\n]+:397:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L398:
        expect: true
        expr: '(^|\n)([^\n]+:398:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L399:
        expect: true
        expr: '(^|\n)([^\n]+:399:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L400:
        expect: true
        expr: '(^|\n)([^\n]+:400:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L401:
        expect: true
        expr: '(^|\n)([^\n]+:401:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L402:
        expect: true
        expr: '(^|\n)([^\n]+:402:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L403:
        expect: true
        expr: '(^|\n)([^\n]+:403:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L404:
        expect: true
        expr: '(^|\n)([^\n]+:404:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L405:
        expect: true
        expr: '(^|\n)([^\n]+:405:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L406:
        expect: true
        expr: '(^|\n)([^\n]+:406:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L407:
        expect: true
        expr: '(^|\n)([^\n]+:407:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L408:
        expect: true
        expr: '(^|\n)([^\n]+:408:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L409:
        expect: true
        expr: '(^|\n)([^\n]+:409:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L410:
        expect: true
        expr: '(^|\n)([^\n]+:410:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L411:
        expect: true
        expr: '(^|\n)([^\n]+:411:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L412:
        expect: true
        expr: '(^|\n)([^\n]+:412:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L413:
        expect: true
        expr: '(^|\n)([^\n]+:413:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L414:
        expect: true
        expr: '(^|\n)([^\n]+:414:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L415:
        expect: true
        expr: '(^|\n)([^\n]+:415:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L416:
        expect: true
        expr: '(^|\n)([^\n]+:416:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L417:
        expect: true
        expr: '(^|\n)([^\n]+:417:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L418:
        expect: true
        expr: '(^|\n)([^\n]+:418:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L419:
        expect: true
        expr: '(^|\n)([^\n]+:419:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L420:
        expect: true
        expr: '(^|\n)([^\n]+:420:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L421:
        expect: true
        expr: '(^|\n)([^\n]+:421:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L422:
        expect: true
        expr: '(^|\n)([^\n]+:422:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L423:
        expect: true
        expr: '(^|\n)([^\n]+:423:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L424:
        expect: true
        expr: '(^|\n)([^\n]+:424:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L425:
        expect: true
        expr: '(^|\n)([^\n]+:425:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L426:
        expect: true
        expr: '(^|\n)([^\n]+:426:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L427:
        expect: true
        expr: '(^|\n)([^\n]+:427:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L428:
        expect: true
        expr: '(^|\n)([^\n]+:428:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L429:
        expect: true
        expr: '(^|\n)([^\n]+:429:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L430:
        expect: true
        expr: '(^|\n)([^\n]+:430:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L431:
        expect: true
        expr: '(^|\n)([^\n]+:431:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L432:
        expect: true
        expr: '(^|\n)([^\n]+:432:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L433:
        expect: true
        expr: '(^|\n)([^\n]+:433:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L434:
        expect: true
        expr: '(^|\n)([^\n]+:434:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L435:
        expect: true
        expr: '(^|\n)([^\n]+:435:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L436:
        expect: true
        expr: '(^|\n)([^\n]+:436:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L437:
        expect: true
        expr: '(^|\n)([^\n]+:437:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L438:
        expect: true
        expr: '(^|\n)([^\n]+:438:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L439:
        expect: true
        expr: '(^|\n)([^\n]+:439:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L440:
        expect: true
        expr: '(^|\n)([^\n]+:440:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L441:
        expect: true
        expr: '(^|\n)([^\n]+:441:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L442:
        expect: true
        expr: '(^|\n)([^\n]+:442:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L443:
        expect: true
        expr: '(^|\n)([^\n]+:443:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L444:
        expect: true
        expr: '(^|\n)([^\n]+:444:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L445:
        expect: true
        expr: '(^|\n)([^\n]+:445:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L446:
        expect: true
        expr: '(^|\n)([^\n]+:446:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L447:
        expect: true
        expr: '(^|\n)([^\n]+:447:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L448:
        expect: true
        expr: '(^|\n)([^\n]+:448:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L449:
        expect: true
        expr: '(^|\n)([^\n]+:449:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L450:
        expect: true
        expr: '(^|\n)([^\n]+:450:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L451:
        expect: true
        expr: '(^|\n)([^\n]+:451:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L452:
        expect: true
        expr: '(^|\n)([^\n]+:452:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L453:
        expect: true
        expr: '(^|\n)([^\n]+:453:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L454:
        expect: true
        expr: '(^|\n)([^\n]+:454:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L455:
        expect: true
        expr: '(^|\n)([^\n]+:455:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L456:
        expect: true
        expr: '(^|\n)([^\n]+:456:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L457:
        expect: true
        expr: '(^|\n)([^\n]+:457:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L458:
        expect: true
        expr: '(^|\n)([^\n]+:458:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L459:
        expect: true
        expr: '(^|\n)([^\n]+:459:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L460:
        expect: true
        expr: '(^|\n)([^\n]+:460:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L461:
        expect: true
        expr: '(^|\n)([^\n]+:461:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L462:
        expect: true
        expr: '(^|\n)([^\n]+:462:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L463:
        expect: true
        expr: '(^|\n)([^\n]+:463:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L464:
        expect: true
        expr: '(^|\n)([^\n]+:464:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L465:
        expect: true
        expr: '(^|\n)([^\n]+:465:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L466:
        expect: true
        expr: '(^|\n)([^\n]+:466:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L467:
        expect: true
        expr: '(^|\n)([^\n]+:467:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L468:
        expect: true
        expr: '(^|\n)([^\n]+:468:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L469:
        expect: true
        expr: '(^|\n)([^\n]+:469:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L470:
        expect: true
        expr: '(^|\n)([^\n]+:470:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L471:
        expect: true
        expr: '(^|\n)([^\n]+:471:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L472:
        expect: true
        expr: '(^|\n)([^\n]+:472:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L473:
        expect: true
        expr: '(^|\n)([^\n]+:473:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L474:
        expect: true
        expr: '(^|\n)([^\n]+:474:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L475:
        expect: true
        expr: '(^|\n)([^\n]+:475:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L476:
        expect: true
        expr: '(^|\n)([^\n]+:476:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L477:
        expect: true
        expr: '(^|\n)([^\n]+:477:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L478:
        expect: true
        expr: '(^|\n)([^\n]+:478:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L479:
        expect: true
        expr: '(^|\n)([^\n]+:479:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L480:
        expect: true
        expr: '(^|\n)([^\n]+:480:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L481:
        expect: true
        expr: '(^|\n)([^\n]+:481:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L482:
        expect: true
        expr: '(^|\n)([^\n]+:482:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L483:
        expect: true
        expr: '(^|\n)([^\n]+:483:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L484:
        expect: true
        expr: '(^|\n)([^\n]+:484:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L485:
        expect: true
        expr: '(^|\n)([^\n]+:485:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L486:
        expect: true
        expr: '(^|\n)([^\n]+:486:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L487:
        expect: true
        expr: '(^|\n)([^\n]+:487:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L488:
        expect: true
        expr: '(^|\n)([^\n]+:488:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L489:
        expect: true
        expr: '(^|\n)([^\n]+:489:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L490:
        expect: true
        expr: '(^|\n)([^\n]+:490:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L491:
        expect: true
        expr: '(^|\n)([^\n]+:491:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L492:
        expect: true
        expr: '(^|\n)([^\n]+:492:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L493:
        expect: true
        expr: '(^|\n)([^\n]+:493:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L494:
        expect: true
        expr: '(^|\n)([^\n]+:494:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L495:
        expect: true
        expr: '(^|\n)([^\n]+:495:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L496:
        expect: true
        expr: '(^|\n)([^\n]+:496:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L497:
        expect: true
        expr: '(^|\n)([^\n]+:497:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L498:
        expect: true
        expr: '(^|\n)([^\n]+:498:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L499:
        expect: true
        expr: '(^|\n)([^\n]+:499:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L500:
        expect: true
        expr: '(^|\n)([^\n]+:500:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L501:
        expect: true
        expr: '(^|\n)([^\n]+:501:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L502:
        expect: true
        expr: '(^|\n)([^\n]+:502:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L503:
        expect: true
        expr: '(^|\n)([^\n]+:503:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L504:
        expect: true
        expr: '(^|\n)([^\n]+:504:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L505:
        expect: true
        expr: '(^|\n)([^\n]+:505:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L506:
        expect: true
        expr: '(^|\n)([^\n]+:506:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L507:
        expect: true
        expr: '(^|\n)([^\n]+:507:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L508:
        expect: true
        expr: '(^|\n)([^\n]+:508:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L509:
        expect: true
        expr: '(^|\n)([^\n]+:509:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L510:
        expect: true
        expr: '(^|\n)([^\n]+:510:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L511:
        expect: true
        expr: '(^|\n)([^\n]+:511:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L512:
        expect: true
        expr: '(^|\n)([^\n]+:512:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L513:
        expect: true
        expr: '(^|\n)([^\n]+:513:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L514:
        expect: true
        expr: '(^|\n)([^\n]+:514:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L515:
        expect: true
        expr: '(^|\n)([^\n]+:515:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L516:
        expect: true
        expr: '(^|\n)([^\n]+:516:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L517:
        expect: true
        expr: '(^|\n)([^\n]+:517:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L518:
        expect: true
        expr: '(^|\n)([^\n]+:518:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L519:
        expect: true
        expr: '(^|\n)([^\n]+:519:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L520:
        expect: true
        expr: '(^|\n)([^\n]+:520:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L521:
        expect: true
        expr: '(^|\n)([^\n]+:521:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L522:
        expect: true
        expr: '(^|\n)([^\n]+:522:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L523:
        expect: true
        expr: '(^|\n)([^\n]+:523:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L524:
        expect: true
        expr: '(^|\n)([^\n]+:524:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L525:
        expect: true
        expr: '(^|\n)([^\n]+:525:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L526:
        expect: true
        expr: '(^|\n)([^\n]+:526:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L527:
        expect: true
        expr: '(^|\n)([^\n]+:527:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L528:
        expect: true
        expr: '(^|\n)([^\n]+:528:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L529:
        expect: true
        expr: '(^|\n)([^\n]+:529:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L530:
        expect: true
        expr: '(^|\n)([^\n]+:530:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L531:
        expect: true
        expr: '(^|\n)([^\n]+:531:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L532:
        expect: true
        expr: '(^|\n)([^\n]+:532:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L533:
        expect: true
        expr: '(^|\n)([^\n]+:533:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L534:
        expect: true
        expr: '(^|\n)([^\n]+:534:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L535:
        expect: true
        expr: '(^|\n)([^\n]+:535:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L536:
        expect: true
        expr: '(^|\n)([^\n]+:536:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L537:
        expect: true
        expr: '(^|\n)([^\n]+:537:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L538:
        expect: true
        expr: '(^|\n)([^\n]+:538:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L539:
        expect: true
        expr: '(^|\n)([^\n]+:539:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L540:
        expect: true
        expr: '(^|\n)([^\n]+:540:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L541:
        expect: true
        expr: '(^|\n)([^\n]+:541:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L542:
        expect: true
        expr: '(^|\n)([^\n]+:542:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L543:
        expect: true
        expr: '(^|\n)([^\n]+:543:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L544:
        expect: true
        expr: '(^|\n)([^\n]+:544:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L545:
        expect: true
        expr: '(^|\n)([^\n]+:545:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L546:
        expect: true
        expr: '(^|\n)([^\n]+:546:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L547:
        expect: true
        expr: '(^|\n)([^\n]+:547:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L548:
        expect: true
        expr: '(^|\n)([^\n]+:548:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L549:
        expect: true
        expr: '(^|\n)([^\n]+:549:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L550:
        expect: true
        expr: '(^|\n)([^\n]+:550:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L551:
        expect: true
        expr: '(^|\n)([^\n]+:551:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L552:
        expect: true
        expr: '(^|\n)([^\n]+:552:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L553:
        expect: true
        expr: '(^|\n)([^\n]+:553:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L554:
        expect: true
        expr: '(^|\n)([^\n]+:554:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L555:
        expect: true
        expr: '(^|\n)([^\n]+:555:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L556:
        expect: true
        expr: '(^|\n)([^\n]+:556:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L557:
        expect: true
        expr: '(^|\n)([^\n]+:557:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L558:
        expect: true
        expr: '(^|\n)([^\n]+:558:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L559:
        expect: true
        expr: '(^|\n)([^\n]+:559:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L560:
        expect: true
        expr: '(^|\n)([^\n]+:560:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L561:
        expect: true
        expr: '(^|\n)([^\n]+:561:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L562:
        expect: true
        expr: '(^|\n)([^\n]+:562:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L563:
        expect: true
        expr: '(^|\n)([^\n]+:563:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L564:
        expect: true
        expr: '(^|\n)([^\n]+:564:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L565:
        expect: true
        expr: '(^|\n)([^\n]+:565:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L566:
        expect: true
        expr: '(^|\n)([^\n]+:566:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L567:
        expect: true
        expr: '(^|\n)([^\n]+:567:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L568:
        expect: true
        expr: '(^|\n)([^\n]+:568:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L569:
        expect: true
        expr: '(^|\n)([^\n]+:569:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L570:
        expect: true
        expr: '(^|\n)([^\n]+:570:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L571:
        expect: true
        expr: '(^|\n)([^\n]+:571:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L572:
        expect: true
        expr: '(^|\n)([^\n]+:572:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L573:
        expect: true
        expr: '(^|\n)([^\n]+:573:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L574:
        expect: true
        expr: '(^|\n)([^\n]+:574:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L575:
        expect: true
        expr: '(^|\n)([^\n]+:575:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L576:
        expect: true
        expr: '(^|\n)([^\n]+:576:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L577:
        expect: true
        expr: '(^|\n)([^\n]+:577:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L578:
        expect: true
        expr: '(^|\n)([^\n]+:578:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L579:
        expect: true
        expr: '(^|\n)([^\n]+:579:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L580:
        expect: true
        expr: '(^|\n)([^\n]+:580:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L581:
        expect: true
        expr: '(^|\n)([^\n]+:581:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L582:
        expect: true
        expr: '(^|\n)([^\n]+:582:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L583:
        expect: true
        expr: '(^|\n)([^\n]+:583:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L584:
        expect: true
        expr: '(^|\n)([^\n]+:584:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L585:
        expect: true
        expr: '(^|\n)([^\n]+:585:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L586:
        expect: true
        expr: '(^|\n)([^\n]+:586:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L587:
        expect: true
        expr: '(^|\n)([^\n]+:587:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L588:
        expect: true
        expr: '(^|\n)([^\n]+:588:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L589:
        expect: true
        expr: '(^|\n)([^\n]+:589:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L590:
        expect: true
        expr: '(^|\n)([^\n]+:590:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L591:
        expect: true
        expr: '(^|\n)([^\n]+:591:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L592:
        expect: true
        expr: '(^|\n)([^\n]+:592:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L593:
        expect: true
        expr: '(^|\n)([^\n]+:593:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L594:
        expect: true
        expr: '(^|\n)([^\n]+:594:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L595:
        expect: true
        expr: '(^|\n)([^\n]+:595:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L596:
        expect: true
        expr: '(^|\n)([^\n]+:596:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L597:
        expect: true
        expr: '(^|\n)([^\n]+:597:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L598:
        expect: true
        expr: '(^|\n)([^\n]+:598:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L599:
        expect: true
        expr: '(^|\n)([^\n]+:599:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L600:
        expect: true
        expr: '(^|\n)([^\n]+:600:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L601:
        expect: true
        expr: '(^|\n)([^\n]+:601:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L602:
        expect: true
        expr: '(^|\n)([^\n]+:602:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L603:
        expect: true
        expr: '(^|\n)([^\n]+:603:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L604:
        expect: true
        expr: '(^|\n)([^\n]+:604:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L605:
        expect: true
        expr: '(^|\n)([^\n]+:605:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L606:
        expect: true
        expr: '(^|\n)([^\n]+:606:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L607:
        expect: true
        expr: '(^|\n)([^\n]+:607:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L608:
        expect: true
        expr: '(^|\n)([^\n]+:608:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L609:
        expect: true
        expr: '(^|\n)([^\n]+:609:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L610:
        expect: true
        expr: '(^|\n)([^\n]+:610:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L611:
        expect: true
        expr: '(^|\n)([^\n]+:611:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L612:
        expect: true
        expr: '(^|\n)([^\n]+:612:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L613:
        expect: true
        expr: '(^|\n)([^\n]+:613:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L614:
        expect: true
        expr: '(^|\n)([^\n]+:614:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L615:
        expect: true
        expr: '(^|\n)([^\n]+:615:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L616:
        expect: true
        expr: '(^|\n)([^\n]+:616:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L617:
        expect: true
        expr: '(^|\n)([^\n]+:617:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L618:
        expect: true
        expr: '(^|\n)([^\n]+:618:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L619:
        expect: true
        expr: '(^|\n)([^\n]+:619:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L620:
        expect: true
        expr: '(^|\n)([^\n]+:620:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L621:
        expect: true
        expr: '(^|\n)([^\n]+:621:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L622:
        expect: true
        expr: '(^|\n)([^\n]+:622:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L623:
        expect: true
        expr: '(^|\n)([^\n]+:623:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L624:
        expect: true
        expr: '(^|\n)([^\n]+:624:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L625:
        expect: true
        expr: '(^|\n)([^\n]+:625:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L626:
        expect: true
        expr: '(^|\n)([^\n]+:626:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L627:
        expect: true
        expr: '(^|\n)([^\n]+:627:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L628:
        expect: true
        expr: '(^|\n)([^\n]+:628:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L629:
        expect: true
        expr: '(^|\n)([^\n]+:629:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L630:
        expect: true
        expr: '(^|\n)([^\n]+:630:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L631:
        expect: true
        expr: '(^|\n)([^\n]+:631:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L632:
        expect: true
        expr: '(^|\n)([^\n]+:632:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L633:
        expect: true
        expr: '(^|\n)([^\n]+:633:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L634:
        expect: true
        expr: '(^|\n)([^\n]+:634:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L635:
        expect: true
        expr: '(^|\n)([^\n]+:635:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L636:
        expect: true
        expr: '(^|\n)([^\n]+:636:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L637:
        expect: true
        expr: '(^|\n)([^\n]+:637:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L638:
        expect: true
        expr: '(^|\n)([^\n]+:638:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L639:
        expect: true
        expr: '(^|\n)([^\n]+:639:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L640:
        expect: true
        expr: '(^|\n)([^\n]+:640:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L641:
        expect: true
        expr: '(^|\n)([^\n]+:641:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L642:
        expect: true
        expr: '(^|\n)([^\n]+:642:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L643:
        expect: true
        expr: '(^|\n)([^\n]+:643:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L644:
        expect: true
        expr: '(^|\n)([^\n]+:644:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L645:
        expect: true
        expr: '(^|\n)([^\n]+:645:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L646:
        expect: true
        expr: '(^|\n)([^\n]+:646:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L647:
        expect: true
        expr: '(^|\n)([^\n]+:647:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L648:
        expect: true
        expr: '(^|\n)([^\n]+:648:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L649:
        expect: true
        expr: '(^|\n)([^\n]+:649:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L650:
        expect: true
        expr: '(^|\n)([^\n]+:650:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L651:
        expect: true
        expr: '(^|\n)([^\n]+:651:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L652:
        expect: true
        expr: '(^|\n)([^\n]+:652:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L653:
        expect: true
        expr: '(^|\n)([^\n]+:653:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L654:
        expect: true
        expr: '(^|\n)([^\n]+:654:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L655:
        expect: true
        expr: '(^|\n)([^\n]+:655:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L656:
        expect: true
        expr: '(^|\n)([^\n]+:656:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L657:
        expect: true
        expr: '(^|\n)([^\n]+:657:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L658:
        expect: true
        expr: '(^|\n)([^\n]+:658:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L659:
        expect: true
        expr: '(^|\n)([^\n]+:659:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L660:
        expect: true
        expr: '(^|\n)([^\n]+:660:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L661:
        expect: true
        expr: '(^|\n)([^\n]+:661:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L662:
        expect: true
        expr: '(^|\n)([^\n]+:662:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L663:
        expect: true
        expr: '(^|\n)([^\n]+:663:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L664:
        expect: true
        expr: '(^|\n)([^\n]+:664:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L665:
        expect: true
        expr: '(^|\n)([^\n]+:665:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L666:
        expect: true
        expr: '(^|\n)([^\n]+:666:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_int128-types-1_1310:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/int128-types-1.c'
    sources:
      binary: int128-types-1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L100:
        expect: true
        expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L109:
        expect: true
        expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L117:
        expect: true
        expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L118:
        expect: true
        expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L119:
        expect: true
        expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L123:
        expect: true
        expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L126:
        expect: true
        expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+:129:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L130:
        expect: true
        expr: '(^|\n)([^\n]+:130:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L132:
        expect: true
        expr: '(^|\n)([^\n]+:132:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+:133:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L138:
        expect: true
        expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L139:
        expect: true
        expr: '(^|\n)([^\n]+:139:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L140:
        expect: true
        expr: '(^|\n)([^\n]+:140:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L141:
        expect: true
        expr: '(^|\n)([^\n]+:141:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+:142:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L145:
        expect: true
        expr: '(^|\n)([^\n]+:145:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L149:
        expect: true
        expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+:152:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+:154:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+:155:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L160:
        expect: true
        expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L161:
        expect: true
        expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L162:
        expect: true
        expr: '(^|\n)([^\n]+:162:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L163:
        expect: true
        expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+:166:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L167:
        expect: true
        expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L168:
        expect: true
        expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L169:
        expect: true
        expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L170:
        expect: true
        expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L171:
        expect: true
        expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+:172:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L173:
        expect: true
        expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L174:
        expect: true
        expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+:177:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L179:
        expect: true
        expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L181:
        expect: true
        expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L182:
        expect: true
        expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L185:
        expect: true
        expr: '(^|\n)([^\n]+:185:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L188:
        expect: true
        expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L189:
        expect: true
        expr: '(^|\n)([^\n]+:189:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L191:
        expect: true
        expr: '(^|\n)([^\n]+:191:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L192:
        expect: true
        expr: '(^|\n)([^\n]+:192:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L194:
        expect: true
        expr: '(^|\n)([^\n]+:194:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L195:
        expect: true
        expr: '(^|\n)([^\n]+:195:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+:196:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+:197:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L198:
        expect: true
        expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L199:
        expect: true
        expr: '(^|\n)([^\n]+:199:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L200:
        expect: true
        expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L201:
        expect: true
        expr: '(^|\n)([^\n]+:201:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L202:
        expect: true
        expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L203:
        expect: true
        expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L204:
        expect: true
        expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L205:
        expect: true
        expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L206:
        expect: true
        expr: '(^|\n)([^\n]+:206:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L207:
        expect: true
        expr: '(^|\n)([^\n]+:207:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L208:
        expect: true
        expr: '(^|\n)([^\n]+:208:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L209:
        expect: true
        expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L210:
        expect: true
        expr: '(^|\n)([^\n]+:210:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L211:
        expect: true
        expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L213:
        expect: true
        expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L216:
        expect: true
        expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L217:
        expect: true
        expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L218:
        expect: true
        expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L219:
        expect: true
        expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L220:
        expect: true
        expr: '(^|\n)([^\n]+:220:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L221:
        expect: true
        expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L222:
        expect: true
        expr: '(^|\n)([^\n]+:222:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L223:
        expect: true
        expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L224:
        expect: true
        expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L225:
        expect: true
        expr: '(^|\n)([^\n]+:225:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L226:
        expect: true
        expr: '(^|\n)([^\n]+:226:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L228:
        expect: true
        expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L229:
        expect: true
        expr: '(^|\n)([^\n]+:229:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L230:
        expect: true
        expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L231:
        expect: true
        expr: '(^|\n)([^\n]+:231:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L232:
        expect: true
        expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L233:
        expect: true
        expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L234:
        expect: true
        expr: '(^|\n)([^\n]+:234:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L235:
        expect: true
        expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L236:
        expect: true
        expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L237:
        expect: true
        expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L238:
        expect: true
        expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L239:
        expect: true
        expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L240:
        expect: true
        expr: '(^|\n)([^\n]+:240:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L241:
        expect: true
        expr: '(^|\n)([^\n]+:241:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L242:
        expect: true
        expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L243:
        expect: true
        expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L244:
        expect: true
        expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L245:
        expect: true
        expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L246:
        expect: true
        expr: '(^|\n)([^\n]+:246:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L247:
        expect: true
        expr: '(^|\n)([^\n]+:247:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L248:
        expect: true
        expr: '(^|\n)([^\n]+:248:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L249:
        expect: true
        expr: '(^|\n)([^\n]+:249:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L250:
        expect: true
        expr: '(^|\n)([^\n]+:250:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L251:
        expect: true
        expr: '(^|\n)([^\n]+:251:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L252:
        expect: true
        expr: '(^|\n)([^\n]+:252:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L253:
        expect: true
        expr: '(^|\n)([^\n]+:253:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L254:
        expect: true
        expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L255:
        expect: true
        expr: '(^|\n)([^\n]+:255:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L256:
        expect: true
        expr: '(^|\n)([^\n]+:256:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L257:
        expect: true
        expr: '(^|\n)([^\n]+:257:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L258:
        expect: true
        expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L259:
        expect: true
        expr: '(^|\n)([^\n]+:259:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L260:
        expect: true
        expr: '(^|\n)([^\n]+:260:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L261:
        expect: true
        expr: '(^|\n)([^\n]+:261:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L262:
        expect: true
        expr: '(^|\n)([^\n]+:262:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L263:
        expect: true
        expr: '(^|\n)([^\n]+:263:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L264:
        expect: true
        expr: '(^|\n)([^\n]+:264:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L265:
        expect: true
        expr: '(^|\n)([^\n]+:265:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L266:
        expect: true
        expr: '(^|\n)([^\n]+:266:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L267:
        expect: true
        expr: '(^|\n)([^\n]+:267:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L268:
        expect: true
        expr: '(^|\n)([^\n]+:268:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L269:
        expect: true
        expr: '(^|\n)([^\n]+:269:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L270:
        expect: true
        expr: '(^|\n)([^\n]+:270:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L271:
        expect: true
        expr: '(^|\n)([^\n]+:271:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L272:
        expect: true
        expr: '(^|\n)([^\n]+:272:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L273:
        expect: true
        expr: '(^|\n)([^\n]+:273:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L274:
        expect: true
        expr: '(^|\n)([^\n]+:274:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L275:
        expect: true
        expr: '(^|\n)([^\n]+:275:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L276:
        expect: true
        expr: '(^|\n)([^\n]+:276:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L277:
        expect: true
        expr: '(^|\n)([^\n]+:277:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L278:
        expect: true
        expr: '(^|\n)([^\n]+:278:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L279:
        expect: true
        expr: '(^|\n)([^\n]+:279:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L280:
        expect: true
        expr: '(^|\n)([^\n]+:280:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L281:
        expect: true
        expr: '(^|\n)([^\n]+:281:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L282:
        expect: true
        expr: '(^|\n)([^\n]+:282:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L283:
        expect: true
        expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L284:
        expect: true
        expr: '(^|\n)([^\n]+:284:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L285:
        expect: true
        expr: '(^|\n)([^\n]+:285:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L286:
        expect: true
        expr: '(^|\n)([^\n]+:286:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L287:
        expect: true
        expr: '(^|\n)([^\n]+:287:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L288:
        expect: true
        expr: '(^|\n)([^\n]+:288:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L289:
        expect: true
        expr: '(^|\n)([^\n]+:289:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L290:
        expect: true
        expr: '(^|\n)([^\n]+:290:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L291:
        expect: true
        expr: '(^|\n)([^\n]+:291:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L292:
        expect: true
        expr: '(^|\n)([^\n]+:292:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L293:
        expect: true
        expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L294:
        expect: true
        expr: '(^|\n)([^\n]+:294:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L295:
        expect: true
        expr: '(^|\n)([^\n]+:295:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L296:
        expect: true
        expr: '(^|\n)([^\n]+:296:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L297:
        expect: true
        expr: '(^|\n)([^\n]+:297:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L298:
        expect: true
        expr: '(^|\n)([^\n]+:298:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L299:
        expect: true
        expr: '(^|\n)([^\n]+:299:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L300:
        expect: true
        expr: '(^|\n)([^\n]+:300:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L301:
        expect: true
        expr: '(^|\n)([^\n]+:301:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L302:
        expect: true
        expr: '(^|\n)([^\n]+:302:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L303:
        expect: true
        expr: '(^|\n)([^\n]+:303:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L304:
        expect: true
        expr: '(^|\n)([^\n]+:304:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L305:
        expect: true
        expr: '(^|\n)([^\n]+:305:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L306:
        expect: true
        expr: '(^|\n)([^\n]+:306:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L307:
        expect: true
        expr: '(^|\n)([^\n]+:307:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L308:
        expect: true
        expr: '(^|\n)([^\n]+:308:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L309:
        expect: true
        expr: '(^|\n)([^\n]+:309:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L310:
        expect: true
        expr: '(^|\n)([^\n]+:310:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L311:
        expect: true
        expr: '(^|\n)([^\n]+:311:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L312:
        expect: true
        expr: '(^|\n)([^\n]+:312:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L313:
        expect: true
        expr: '(^|\n)([^\n]+:313:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L314:
        expect: true
        expr: '(^|\n)([^\n]+:314:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L315:
        expect: true
        expr: '(^|\n)([^\n]+:315:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L316:
        expect: true
        expr: '(^|\n)([^\n]+:316:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L317:
        expect: true
        expr: '(^|\n)([^\n]+:317:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L318:
        expect: true
        expr: '(^|\n)([^\n]+:318:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L319:
        expect: true
        expr: '(^|\n)([^\n]+:319:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L320:
        expect: true
        expr: '(^|\n)([^\n]+:320:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L321:
        expect: true
        expr: '(^|\n)([^\n]+:321:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L322:
        expect: true
        expr: '(^|\n)([^\n]+:322:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L323:
        expect: true
        expr: '(^|\n)([^\n]+:323:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L324:
        expect: true
        expr: '(^|\n)([^\n]+:324:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L325:
        expect: true
        expr: '(^|\n)([^\n]+:325:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L326:
        expect: true
        expr: '(^|\n)([^\n]+:326:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L327:
        expect: true
        expr: '(^|\n)([^\n]+:327:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L328:
        expect: true
        expr: '(^|\n)([^\n]+:328:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L329:
        expect: true
        expr: '(^|\n)([^\n]+:329:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L330:
        expect: true
        expr: '(^|\n)([^\n]+:330:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L331:
        expect: true
        expr: '(^|\n)([^\n]+:331:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L332:
        expect: true
        expr: '(^|\n)([^\n]+:332:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L333:
        expect: true
        expr: '(^|\n)([^\n]+:333:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L334:
        expect: true
        expr: '(^|\n)([^\n]+:334:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L335:
        expect: true
        expr: '(^|\n)([^\n]+:335:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L336:
        expect: true
        expr: '(^|\n)([^\n]+:336:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L337:
        expect: true
        expr: '(^|\n)([^\n]+:337:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L338:
        expect: true
        expr: '(^|\n)([^\n]+:338:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L339:
        expect: true
        expr: '(^|\n)([^\n]+:339:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L340:
        expect: true
        expr: '(^|\n)([^\n]+:340:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L341:
        expect: true
        expr: '(^|\n)([^\n]+:341:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L342:
        expect: true
        expr: '(^|\n)([^\n]+:342:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L343:
        expect: true
        expr: '(^|\n)([^\n]+:343:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L344:
        expect: true
        expr: '(^|\n)([^\n]+:344:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L345:
        expect: true
        expr: '(^|\n)([^\n]+:345:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L346:
        expect: true
        expr: '(^|\n)([^\n]+:346:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L347:
        expect: true
        expr: '(^|\n)([^\n]+:347:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L348:
        expect: true
        expr: '(^|\n)([^\n]+:348:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L349:
        expect: true
        expr: '(^|\n)([^\n]+:349:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L350:
        expect: true
        expr: '(^|\n)([^\n]+:350:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L351:
        expect: true
        expr: '(^|\n)([^\n]+:351:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L352:
        expect: true
        expr: '(^|\n)([^\n]+:352:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L353:
        expect: true
        expr: '(^|\n)([^\n]+:353:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L354:
        expect: true
        expr: '(^|\n)([^\n]+:354:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L355:
        expect: true
        expr: '(^|\n)([^\n]+:355:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L356:
        expect: true
        expr: '(^|\n)([^\n]+:356:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L357:
        expect: true
        expr: '(^|\n)([^\n]+:357:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L358:
        expect: true
        expr: '(^|\n)([^\n]+:358:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L359:
        expect: true
        expr: '(^|\n)([^\n]+:359:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L360:
        expect: true
        expr: '(^|\n)([^\n]+:360:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L361:
        expect: true
        expr: '(^|\n)([^\n]+:361:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L362:
        expect: true
        expr: '(^|\n)([^\n]+:362:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L363:
        expect: true
        expr: '(^|\n)([^\n]+:363:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L364:
        expect: true
        expr: '(^|\n)([^\n]+:364:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L365:
        expect: true
        expr: '(^|\n)([^\n]+:365:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L366:
        expect: true
        expr: '(^|\n)([^\n]+:366:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L367:
        expect: true
        expr: '(^|\n)([^\n]+:367:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L368:
        expect: true
        expr: '(^|\n)([^\n]+:368:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L369:
        expect: true
        expr: '(^|\n)([^\n]+:369:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L370:
        expect: true
        expr: '(^|\n)([^\n]+:370:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L371:
        expect: true
        expr: '(^|\n)([^\n]+:371:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L372:
        expect: true
        expr: '(^|\n)([^\n]+:372:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L373:
        expect: true
        expr: '(^|\n)([^\n]+:373:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L374:
        expect: true
        expr: '(^|\n)([^\n]+:374:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L375:
        expect: true
        expr: '(^|\n)([^\n]+:375:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L376:
        expect: true
        expr: '(^|\n)([^\n]+:376:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L377:
        expect: true
        expr: '(^|\n)([^\n]+:377:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L378:
        expect: true
        expr: '(^|\n)([^\n]+:378:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L379:
        expect: true
        expr: '(^|\n)([^\n]+:379:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L380:
        expect: true
        expr: '(^|\n)([^\n]+:380:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L381:
        expect: true
        expr: '(^|\n)([^\n]+:381:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L382:
        expect: true
        expr: '(^|\n)([^\n]+:382:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L383:
        expect: true
        expr: '(^|\n)([^\n]+:383:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L384:
        expect: true
        expr: '(^|\n)([^\n]+:384:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L385:
        expect: true
        expr: '(^|\n)([^\n]+:385:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L386:
        expect: true
        expr: '(^|\n)([^\n]+:386:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L387:
        expect: true
        expr: '(^|\n)([^\n]+:387:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L388:
        expect: true
        expr: '(^|\n)([^\n]+:388:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L389:
        expect: true
        expr: '(^|\n)([^\n]+:389:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L390:
        expect: true
        expr: '(^|\n)([^\n]+:390:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L391:
        expect: true
        expr: '(^|\n)([^\n]+:391:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L392:
        expect: true
        expr: '(^|\n)([^\n]+:392:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L393:
        expect: true
        expr: '(^|\n)([^\n]+:393:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L394:
        expect: true
        expr: '(^|\n)([^\n]+:394:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L395:
        expect: true
        expr: '(^|\n)([^\n]+:395:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L396:
        expect: true
        expr: '(^|\n)([^\n]+:396:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L397:
        expect: true
        expr: '(^|\n)([^\n]+:397:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L398:
        expect: true
        expr: '(^|\n)([^\n]+:398:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L399:
        expect: true
        expr: '(^|\n)([^\n]+:399:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L400:
        expect: true
        expr: '(^|\n)([^\n]+:400:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L401:
        expect: true
        expr: '(^|\n)([^\n]+:401:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L402:
        expect: true
        expr: '(^|\n)([^\n]+:402:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L403:
        expect: true
        expr: '(^|\n)([^\n]+:403:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L404:
        expect: true
        expr: '(^|\n)([^\n]+:404:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L405:
        expect: true
        expr: '(^|\n)([^\n]+:405:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L406:
        expect: true
        expr: '(^|\n)([^\n]+:406:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L407:
        expect: true
        expr: '(^|\n)([^\n]+:407:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L408:
        expect: true
        expr: '(^|\n)([^\n]+:408:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L409:
        expect: true
        expr: '(^|\n)([^\n]+:409:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L410:
        expect: true
        expr: '(^|\n)([^\n]+:410:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L411:
        expect: true
        expr: '(^|\n)([^\n]+:411:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L412:
        expect: true
        expr: '(^|\n)([^\n]+:412:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L413:
        expect: true
        expr: '(^|\n)([^\n]+:413:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L414:
        expect: true
        expr: '(^|\n)([^\n]+:414:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L415:
        expect: true
        expr: '(^|\n)([^\n]+:415:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L416:
        expect: true
        expr: '(^|\n)([^\n]+:416:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L417:
        expect: true
        expr: '(^|\n)([^\n]+:417:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L418:
        expect: true
        expr: '(^|\n)([^\n]+:418:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L419:
        expect: true
        expr: '(^|\n)([^\n]+:419:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L420:
        expect: true
        expr: '(^|\n)([^\n]+:420:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L421:
        expect: true
        expr: '(^|\n)([^\n]+:421:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L422:
        expect: true
        expr: '(^|\n)([^\n]+:422:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L423:
        expect: true
        expr: '(^|\n)([^\n]+:423:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L424:
        expect: true
        expr: '(^|\n)([^\n]+:424:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L425:
        expect: true
        expr: '(^|\n)([^\n]+:425:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L426:
        expect: true
        expr: '(^|\n)([^\n]+:426:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L427:
        expect: true
        expr: '(^|\n)([^\n]+:427:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L428:
        expect: true
        expr: '(^|\n)([^\n]+:428:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L429:
        expect: true
        expr: '(^|\n)([^\n]+:429:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L430:
        expect: true
        expr: '(^|\n)([^\n]+:430:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L431:
        expect: true
        expr: '(^|\n)([^\n]+:431:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L432:
        expect: true
        expr: '(^|\n)([^\n]+:432:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L433:
        expect: true
        expr: '(^|\n)([^\n]+:433:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L434:
        expect: true
        expr: '(^|\n)([^\n]+:434:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L435:
        expect: true
        expr: '(^|\n)([^\n]+:435:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L436:
        expect: true
        expr: '(^|\n)([^\n]+:436:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L437:
        expect: true
        expr: '(^|\n)([^\n]+:437:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L438:
        expect: true
        expr: '(^|\n)([^\n]+:438:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L439:
        expect: true
        expr: '(^|\n)([^\n]+:439:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L440:
        expect: true
        expr: '(^|\n)([^\n]+:440:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L441:
        expect: true
        expr: '(^|\n)([^\n]+:441:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L442:
        expect: true
        expr: '(^|\n)([^\n]+:442:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L443:
        expect: true
        expr: '(^|\n)([^\n]+:443:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L444:
        expect: true
        expr: '(^|\n)([^\n]+:444:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L445:
        expect: true
        expr: '(^|\n)([^\n]+:445:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L446:
        expect: true
        expr: '(^|\n)([^\n]+:446:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L447:
        expect: true
        expr: '(^|\n)([^\n]+:447:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L448:
        expect: true
        expr: '(^|\n)([^\n]+:448:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L449:
        expect: true
        expr: '(^|\n)([^\n]+:449:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L450:
        expect: true
        expr: '(^|\n)([^\n]+:450:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L451:
        expect: true
        expr: '(^|\n)([^\n]+:451:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L452:
        expect: true
        expr: '(^|\n)([^\n]+:452:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L453:
        expect: true
        expr: '(^|\n)([^\n]+:453:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L454:
        expect: true
        expr: '(^|\n)([^\n]+:454:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L455:
        expect: true
        expr: '(^|\n)([^\n]+:455:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L456:
        expect: true
        expr: '(^|\n)([^\n]+:456:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L457:
        expect: true
        expr: '(^|\n)([^\n]+:457:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L458:
        expect: true
        expr: '(^|\n)([^\n]+:458:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L459:
        expect: true
        expr: '(^|\n)([^\n]+:459:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L460:
        expect: true
        expr: '(^|\n)([^\n]+:460:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L461:
        expect: true
        expr: '(^|\n)([^\n]+:461:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L462:
        expect: true
        expr: '(^|\n)([^\n]+:462:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L463:
        expect: true
        expr: '(^|\n)([^\n]+:463:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L464:
        expect: true
        expr: '(^|\n)([^\n]+:464:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L465:
        expect: true
        expr: '(^|\n)([^\n]+:465:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L466:
        expect: true
        expr: '(^|\n)([^\n]+:466:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L467:
        expect: true
        expr: '(^|\n)([^\n]+:467:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L468:
        expect: true
        expr: '(^|\n)([^\n]+:468:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L469:
        expect: true
        expr: '(^|\n)([^\n]+:469:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L470:
        expect: true
        expr: '(^|\n)([^\n]+:470:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L471:
        expect: true
        expr: '(^|\n)([^\n]+:471:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L472:
        expect: true
        expr: '(^|\n)([^\n]+:472:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L473:
        expect: true
        expr: '(^|\n)([^\n]+:473:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L474:
        expect: true
        expr: '(^|\n)([^\n]+:474:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L475:
        expect: true
        expr: '(^|\n)([^\n]+:475:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L476:
        expect: true
        expr: '(^|\n)([^\n]+:476:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L477:
        expect: true
        expr: '(^|\n)([^\n]+:477:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L478:
        expect: true
        expr: '(^|\n)([^\n]+:478:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L479:
        expect: true
        expr: '(^|\n)([^\n]+:479:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L480:
        expect: true
        expr: '(^|\n)([^\n]+:480:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L481:
        expect: true
        expr: '(^|\n)([^\n]+:481:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L482:
        expect: true
        expr: '(^|\n)([^\n]+:482:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L483:
        expect: true
        expr: '(^|\n)([^\n]+:483:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L484:
        expect: true
        expr: '(^|\n)([^\n]+:484:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L485:
        expect: true
        expr: '(^|\n)([^\n]+:485:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L486:
        expect: true
        expr: '(^|\n)([^\n]+:486:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L487:
        expect: true
        expr: '(^|\n)([^\n]+:487:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L488:
        expect: true
        expr: '(^|\n)([^\n]+:488:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L489:
        expect: true
        expr: '(^|\n)([^\n]+:489:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L490:
        expect: true
        expr: '(^|\n)([^\n]+:490:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L491:
        expect: true
        expr: '(^|\n)([^\n]+:491:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L492:
        expect: true
        expr: '(^|\n)([^\n]+:492:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L493:
        expect: true
        expr: '(^|\n)([^\n]+:493:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L494:
        expect: true
        expr: '(^|\n)([^\n]+:494:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L495:
        expect: true
        expr: '(^|\n)([^\n]+:495:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L496:
        expect: true
        expr: '(^|\n)([^\n]+:496:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L497:
        expect: true
        expr: '(^|\n)([^\n]+:497:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L498:
        expect: true
        expr: '(^|\n)([^\n]+:498:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L499:
        expect: true
        expr: '(^|\n)([^\n]+:499:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L500:
        expect: true
        expr: '(^|\n)([^\n]+:500:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L501:
        expect: true
        expr: '(^|\n)([^\n]+:501:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L502:
        expect: true
        expr: '(^|\n)([^\n]+:502:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L503:
        expect: true
        expr: '(^|\n)([^\n]+:503:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L504:
        expect: true
        expr: '(^|\n)([^\n]+:504:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L505:
        expect: true
        expr: '(^|\n)([^\n]+:505:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L506:
        expect: true
        expr: '(^|\n)([^\n]+:506:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L507:
        expect: true
        expr: '(^|\n)([^\n]+:507:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L508:
        expect: true
        expr: '(^|\n)([^\n]+:508:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L509:
        expect: true
        expr: '(^|\n)([^\n]+:509:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L510:
        expect: true
        expr: '(^|\n)([^\n]+:510:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L511:
        expect: true
        expr: '(^|\n)([^\n]+:511:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L512:
        expect: true
        expr: '(^|\n)([^\n]+:512:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L513:
        expect: true
        expr: '(^|\n)([^\n]+:513:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L514:
        expect: true
        expr: '(^|\n)([^\n]+:514:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L515:
        expect: true
        expr: '(^|\n)([^\n]+:515:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L516:
        expect: true
        expr: '(^|\n)([^\n]+:516:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L517:
        expect: true
        expr: '(^|\n)([^\n]+:517:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L518:
        expect: true
        expr: '(^|\n)([^\n]+:518:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L519:
        expect: true
        expr: '(^|\n)([^\n]+:519:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L520:
        expect: true
        expr: '(^|\n)([^\n]+:520:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L521:
        expect: true
        expr: '(^|\n)([^\n]+:521:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L522:
        expect: true
        expr: '(^|\n)([^\n]+:522:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L523:
        expect: true
        expr: '(^|\n)([^\n]+:523:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L524:
        expect: true
        expr: '(^|\n)([^\n]+:524:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L525:
        expect: true
        expr: '(^|\n)([^\n]+:525:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L526:
        expect: true
        expr: '(^|\n)([^\n]+:526:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L527:
        expect: true
        expr: '(^|\n)([^\n]+:527:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L528:
        expect: true
        expr: '(^|\n)([^\n]+:528:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L529:
        expect: true
        expr: '(^|\n)([^\n]+:529:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L530:
        expect: true
        expr: '(^|\n)([^\n]+:530:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L531:
        expect: true
        expr: '(^|\n)([^\n]+:531:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L532:
        expect: true
        expr: '(^|\n)([^\n]+:532:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L533:
        expect: true
        expr: '(^|\n)([^\n]+:533:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L534:
        expect: true
        expr: '(^|\n)([^\n]+:534:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L535:
        expect: true
        expr: '(^|\n)([^\n]+:535:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L536:
        expect: true
        expr: '(^|\n)([^\n]+:536:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L537:
        expect: true
        expr: '(^|\n)([^\n]+:537:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L538:
        expect: true
        expr: '(^|\n)([^\n]+:538:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L539:
        expect: true
        expr: '(^|\n)([^\n]+:539:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L540:
        expect: true
        expr: '(^|\n)([^\n]+:540:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L541:
        expect: true
        expr: '(^|\n)([^\n]+:541:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L542:
        expect: true
        expr: '(^|\n)([^\n]+:542:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L543:
        expect: true
        expr: '(^|\n)([^\n]+:543:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L544:
        expect: true
        expr: '(^|\n)([^\n]+:544:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L545:
        expect: true
        expr: '(^|\n)([^\n]+:545:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L546:
        expect: true
        expr: '(^|\n)([^\n]+:546:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L547:
        expect: true
        expr: '(^|\n)([^\n]+:547:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L548:
        expect: true
        expr: '(^|\n)([^\n]+:548:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L549:
        expect: true
        expr: '(^|\n)([^\n]+:549:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L550:
        expect: true
        expr: '(^|\n)([^\n]+:550:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L551:
        expect: true
        expr: '(^|\n)([^\n]+:551:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L552:
        expect: true
        expr: '(^|\n)([^\n]+:552:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L553:
        expect: true
        expr: '(^|\n)([^\n]+:553:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L554:
        expect: true
        expr: '(^|\n)([^\n]+:554:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L555:
        expect: true
        expr: '(^|\n)([^\n]+:555:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L556:
        expect: true
        expr: '(^|\n)([^\n]+:556:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L557:
        expect: true
        expr: '(^|\n)([^\n]+:557:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L558:
        expect: true
        expr: '(^|\n)([^\n]+:558:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L559:
        expect: true
        expr: '(^|\n)([^\n]+:559:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L560:
        expect: true
        expr: '(^|\n)([^\n]+:560:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L561:
        expect: true
        expr: '(^|\n)([^\n]+:561:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L562:
        expect: true
        expr: '(^|\n)([^\n]+:562:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L563:
        expect: true
        expr: '(^|\n)([^\n]+:563:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L564:
        expect: true
        expr: '(^|\n)([^\n]+:564:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L565:
        expect: true
        expr: '(^|\n)([^\n]+:565:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L566:
        expect: true
        expr: '(^|\n)([^\n]+:566:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L567:
        expect: true
        expr: '(^|\n)([^\n]+:567:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L568:
        expect: true
        expr: '(^|\n)([^\n]+:568:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L569:
        expect: true
        expr: '(^|\n)([^\n]+:569:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L570:
        expect: true
        expr: '(^|\n)([^\n]+:570:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L571:
        expect: true
        expr: '(^|\n)([^\n]+:571:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L572:
        expect: true
        expr: '(^|\n)([^\n]+:572:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L573:
        expect: true
        expr: '(^|\n)([^\n]+:573:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L574:
        expect: true
        expr: '(^|\n)([^\n]+:574:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L575:
        expect: true
        expr: '(^|\n)([^\n]+:575:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L576:
        expect: true
        expr: '(^|\n)([^\n]+:576:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L577:
        expect: true
        expr: '(^|\n)([^\n]+:577:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L578:
        expect: true
        expr: '(^|\n)([^\n]+:578:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L579:
        expect: true
        expr: '(^|\n)([^\n]+:579:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L580:
        expect: true
        expr: '(^|\n)([^\n]+:580:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L581:
        expect: true
        expr: '(^|\n)([^\n]+:581:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L582:
        expect: true
        expr: '(^|\n)([^\n]+:582:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L583:
        expect: true
        expr: '(^|\n)([^\n]+:583:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L584:
        expect: true
        expr: '(^|\n)([^\n]+:584:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L585:
        expect: true
        expr: '(^|\n)([^\n]+:585:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L586:
        expect: true
        expr: '(^|\n)([^\n]+:586:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L587:
        expect: true
        expr: '(^|\n)([^\n]+:587:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L588:
        expect: true
        expr: '(^|\n)([^\n]+:588:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L589:
        expect: true
        expr: '(^|\n)([^\n]+:589:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L590:
        expect: true
        expr: '(^|\n)([^\n]+:590:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L591:
        expect: true
        expr: '(^|\n)([^\n]+:591:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L592:
        expect: true
        expr: '(^|\n)([^\n]+:592:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L593:
        expect: true
        expr: '(^|\n)([^\n]+:593:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L594:
        expect: true
        expr: '(^|\n)([^\n]+:594:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L595:
        expect: true
        expr: '(^|\n)([^\n]+:595:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L596:
        expect: true
        expr: '(^|\n)([^\n]+:596:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L597:
        expect: true
        expr: '(^|\n)([^\n]+:597:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L598:
        expect: true
        expr: '(^|\n)([^\n]+:598:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L599:
        expect: true
        expr: '(^|\n)([^\n]+:599:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L600:
        expect: true
        expr: '(^|\n)([^\n]+:600:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L601:
        expect: true
        expr: '(^|\n)([^\n]+:601:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L602:
        expect: true
        expr: '(^|\n)([^\n]+:602:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L603:
        expect: true
        expr: '(^|\n)([^\n]+:603:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L604:
        expect: true
        expr: '(^|\n)([^\n]+:604:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L605:
        expect: true
        expr: '(^|\n)([^\n]+:605:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L606:
        expect: true
        expr: '(^|\n)([^\n]+:606:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L607:
        expect: true
        expr: '(^|\n)([^\n]+:607:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L608:
        expect: true
        expr: '(^|\n)([^\n]+:608:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L609:
        expect: true
        expr: '(^|\n)([^\n]+:609:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L610:
        expect: true
        expr: '(^|\n)([^\n]+:610:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L611:
        expect: true
        expr: '(^|\n)([^\n]+:611:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L612:
        expect: true
        expr: '(^|\n)([^\n]+:612:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L613:
        expect: true
        expr: '(^|\n)([^\n]+:613:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L614:
        expect: true
        expr: '(^|\n)([^\n]+:614:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L615:
        expect: true
        expr: '(^|\n)([^\n]+:615:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L616:
        expect: true
        expr: '(^|\n)([^\n]+:616:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L617:
        expect: true
        expr: '(^|\n)([^\n]+:617:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L618:
        expect: true
        expr: '(^|\n)([^\n]+:618:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L619:
        expect: true
        expr: '(^|\n)([^\n]+:619:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L620:
        expect: true
        expr: '(^|\n)([^\n]+:620:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L621:
        expect: true
        expr: '(^|\n)([^\n]+:621:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L622:
        expect: true
        expr: '(^|\n)([^\n]+:622:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L623:
        expect: true
        expr: '(^|\n)([^\n]+:623:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L624:
        expect: true
        expr: '(^|\n)([^\n]+:624:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L625:
        expect: true
        expr: '(^|\n)([^\n]+:625:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L626:
        expect: true
        expr: '(^|\n)([^\n]+:626:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L627:
        expect: true
        expr: '(^|\n)([^\n]+:627:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L628:
        expect: true
        expr: '(^|\n)([^\n]+:628:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L629:
        expect: true
        expr: '(^|\n)([^\n]+:629:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L630:
        expect: true
        expr: '(^|\n)([^\n]+:630:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L631:
        expect: true
        expr: '(^|\n)([^\n]+:631:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L632:
        expect: true
        expr: '(^|\n)([^\n]+:632:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L633:
        expect: true
        expr: '(^|\n)([^\n]+:633:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L634:
        expect: true
        expr: '(^|\n)([^\n]+:634:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L635:
        expect: true
        expr: '(^|\n)([^\n]+:635:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L636:
        expect: true
        expr: '(^|\n)([^\n]+:636:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L637:
        expect: true
        expr: '(^|\n)([^\n]+:637:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L638:
        expect: true
        expr: '(^|\n)([^\n]+:638:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L639:
        expect: true
        expr: '(^|\n)([^\n]+:639:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L640:
        expect: true
        expr: '(^|\n)([^\n]+:640:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L641:
        expect: true
        expr: '(^|\n)([^\n]+:641:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L642:
        expect: true
        expr: '(^|\n)([^\n]+:642:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L643:
        expect: true
        expr: '(^|\n)([^\n]+:643:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L644:
        expect: true
        expr: '(^|\n)([^\n]+:644:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L645:
        expect: true
        expr: '(^|\n)([^\n]+:645:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L646:
        expect: true
        expr: '(^|\n)([^\n]+:646:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L647:
        expect: true
        expr: '(^|\n)([^\n]+:647:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L648:
        expect: true
        expr: '(^|\n)([^\n]+:648:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L649:
        expect: true
        expr: '(^|\n)([^\n]+:649:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L650:
        expect: true
        expr: '(^|\n)([^\n]+:650:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L651:
        expect: true
        expr: '(^|\n)([^\n]+:651:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L652:
        expect: true
        expr: '(^|\n)([^\n]+:652:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L653:
        expect: true
        expr: '(^|\n)([^\n]+:653:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L654:
        expect: true
        expr: '(^|\n)([^\n]+:654:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L655:
        expect: true
        expr: '(^|\n)([^\n]+:655:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L656:
        expect: true
        expr: '(^|\n)([^\n]+:656:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L657:
        expect: true
        expr: '(^|\n)([^\n]+:657:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L658:
        expect: true
        expr: '(^|\n)([^\n]+:658:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L659:
        expect: true
        expr: '(^|\n)([^\n]+:659:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L660:
        expect: true
        expr: '(^|\n)([^\n]+:660:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L661:
        expect: true
        expr: '(^|\n)([^\n]+:661:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L662:
        expect: true
        expr: '(^|\n)([^\n]+:662:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L663:
        expect: true
        expr: '(^|\n)([^\n]+:663:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L664:
        expect: true
        expr: '(^|\n)([^\n]+:664:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L665:
        expect: true
        expr: '(^|\n)([^\n]+:665:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L666:
        expect: true
        expr: '(^|\n)([^\n]+:666:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_int128-types-1_1311:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/int128-types-1.c'
    sources:
      binary: int128-types-1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L100:
        expect: true
        expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L109:
        expect: true
        expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L117:
        expect: true
        expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L118:
        expect: true
        expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L119:
        expect: true
        expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L123:
        expect: true
        expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L126:
        expect: true
        expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+:129:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L130:
        expect: true
        expr: '(^|\n)([^\n]+:130:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L132:
        expect: true
        expr: '(^|\n)([^\n]+:132:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+:133:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L138:
        expect: true
        expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L139:
        expect: true
        expr: '(^|\n)([^\n]+:139:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L140:
        expect: true
        expr: '(^|\n)([^\n]+:140:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L141:
        expect: true
        expr: '(^|\n)([^\n]+:141:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+:142:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L145:
        expect: true
        expr: '(^|\n)([^\n]+:145:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L149:
        expect: true
        expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+:152:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+:154:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+:155:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L160:
        expect: true
        expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L161:
        expect: true
        expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L162:
        expect: true
        expr: '(^|\n)([^\n]+:162:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L163:
        expect: true
        expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+:166:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L167:
        expect: true
        expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L168:
        expect: true
        expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L169:
        expect: true
        expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L170:
        expect: true
        expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L171:
        expect: true
        expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+:172:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L173:
        expect: true
        expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L174:
        expect: true
        expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+:177:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L179:
        expect: true
        expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L181:
        expect: true
        expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L182:
        expect: true
        expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L185:
        expect: true
        expr: '(^|\n)([^\n]+:185:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L188:
        expect: true
        expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L189:
        expect: true
        expr: '(^|\n)([^\n]+:189:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L191:
        expect: true
        expr: '(^|\n)([^\n]+:191:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L192:
        expect: true
        expr: '(^|\n)([^\n]+:192:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L194:
        expect: true
        expr: '(^|\n)([^\n]+:194:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L195:
        expect: true
        expr: '(^|\n)([^\n]+:195:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+:196:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+:197:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L198:
        expect: true
        expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L199:
        expect: true
        expr: '(^|\n)([^\n]+:199:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L200:
        expect: true
        expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L201:
        expect: true
        expr: '(^|\n)([^\n]+:201:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L202:
        expect: true
        expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L203:
        expect: true
        expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L204:
        expect: true
        expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L205:
        expect: true
        expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L206:
        expect: true
        expr: '(^|\n)([^\n]+:206:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L207:
        expect: true
        expr: '(^|\n)([^\n]+:207:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L208:
        expect: true
        expr: '(^|\n)([^\n]+:208:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L209:
        expect: true
        expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L210:
        expect: true
        expr: '(^|\n)([^\n]+:210:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L211:
        expect: true
        expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L213:
        expect: true
        expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L216:
        expect: true
        expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L217:
        expect: true
        expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L218:
        expect: true
        expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L219:
        expect: true
        expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L220:
        expect: true
        expr: '(^|\n)([^\n]+:220:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L221:
        expect: true
        expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L222:
        expect: true
        expr: '(^|\n)([^\n]+:222:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L223:
        expect: true
        expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L224:
        expect: true
        expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L225:
        expect: true
        expr: '(^|\n)([^\n]+:225:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L226:
        expect: true
        expr: '(^|\n)([^\n]+:226:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L228:
        expect: true
        expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L229:
        expect: true
        expr: '(^|\n)([^\n]+:229:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L230:
        expect: true
        expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L231:
        expect: true
        expr: '(^|\n)([^\n]+:231:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L232:
        expect: true
        expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L233:
        expect: true
        expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L234:
        expect: true
        expr: '(^|\n)([^\n]+:234:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L235:
        expect: true
        expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L236:
        expect: true
        expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L237:
        expect: true
        expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L238:
        expect: true
        expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L239:
        expect: true
        expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L240:
        expect: true
        expr: '(^|\n)([^\n]+:240:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L241:
        expect: true
        expr: '(^|\n)([^\n]+:241:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L242:
        expect: true
        expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L243:
        expect: true
        expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L244:
        expect: true
        expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L245:
        expect: true
        expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L246:
        expect: true
        expr: '(^|\n)([^\n]+:246:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L247:
        expect: true
        expr: '(^|\n)([^\n]+:247:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L248:
        expect: true
        expr: '(^|\n)([^\n]+:248:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L249:
        expect: true
        expr: '(^|\n)([^\n]+:249:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L250:
        expect: true
        expr: '(^|\n)([^\n]+:250:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L251:
        expect: true
        expr: '(^|\n)([^\n]+:251:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L252:
        expect: true
        expr: '(^|\n)([^\n]+:252:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L253:
        expect: true
        expr: '(^|\n)([^\n]+:253:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L254:
        expect: true
        expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L255:
        expect: true
        expr: '(^|\n)([^\n]+:255:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L256:
        expect: true
        expr: '(^|\n)([^\n]+:256:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L257:
        expect: true
        expr: '(^|\n)([^\n]+:257:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L258:
        expect: true
        expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L259:
        expect: true
        expr: '(^|\n)([^\n]+:259:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L260:
        expect: true
        expr: '(^|\n)([^\n]+:260:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L261:
        expect: true
        expr: '(^|\n)([^\n]+:261:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L262:
        expect: true
        expr: '(^|\n)([^\n]+:262:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L263:
        expect: true
        expr: '(^|\n)([^\n]+:263:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L264:
        expect: true
        expr: '(^|\n)([^\n]+:264:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L265:
        expect: true
        expr: '(^|\n)([^\n]+:265:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L266:
        expect: true
        expr: '(^|\n)([^\n]+:266:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L267:
        expect: true
        expr: '(^|\n)([^\n]+:267:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L268:
        expect: true
        expr: '(^|\n)([^\n]+:268:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L269:
        expect: true
        expr: '(^|\n)([^\n]+:269:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L270:
        expect: true
        expr: '(^|\n)([^\n]+:270:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L271:
        expect: true
        expr: '(^|\n)([^\n]+:271:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L272:
        expect: true
        expr: '(^|\n)([^\n]+:272:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L273:
        expect: true
        expr: '(^|\n)([^\n]+:273:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L274:
        expect: true
        expr: '(^|\n)([^\n]+:274:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L275:
        expect: true
        expr: '(^|\n)([^\n]+:275:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L276:
        expect: true
        expr: '(^|\n)([^\n]+:276:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L277:
        expect: true
        expr: '(^|\n)([^\n]+:277:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L278:
        expect: true
        expr: '(^|\n)([^\n]+:278:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L279:
        expect: true
        expr: '(^|\n)([^\n]+:279:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L280:
        expect: true
        expr: '(^|\n)([^\n]+:280:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L281:
        expect: true
        expr: '(^|\n)([^\n]+:281:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L282:
        expect: true
        expr: '(^|\n)([^\n]+:282:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L283:
        expect: true
        expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L284:
        expect: true
        expr: '(^|\n)([^\n]+:284:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L285:
        expect: true
        expr: '(^|\n)([^\n]+:285:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L286:
        expect: true
        expr: '(^|\n)([^\n]+:286:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L287:
        expect: true
        expr: '(^|\n)([^\n]+:287:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L288:
        expect: true
        expr: '(^|\n)([^\n]+:288:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L289:
        expect: true
        expr: '(^|\n)([^\n]+:289:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L290:
        expect: true
        expr: '(^|\n)([^\n]+:290:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L291:
        expect: true
        expr: '(^|\n)([^\n]+:291:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L292:
        expect: true
        expr: '(^|\n)([^\n]+:292:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L293:
        expect: true
        expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L294:
        expect: true
        expr: '(^|\n)([^\n]+:294:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L295:
        expect: true
        expr: '(^|\n)([^\n]+:295:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L296:
        expect: true
        expr: '(^|\n)([^\n]+:296:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L297:
        expect: true
        expr: '(^|\n)([^\n]+:297:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L298:
        expect: true
        expr: '(^|\n)([^\n]+:298:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L299:
        expect: true
        expr: '(^|\n)([^\n]+:299:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L300:
        expect: true
        expr: '(^|\n)([^\n]+:300:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L301:
        expect: true
        expr: '(^|\n)([^\n]+:301:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L302:
        expect: true
        expr: '(^|\n)([^\n]+:302:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L303:
        expect: true
        expr: '(^|\n)([^\n]+:303:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L304:
        expect: true
        expr: '(^|\n)([^\n]+:304:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L305:
        expect: true
        expr: '(^|\n)([^\n]+:305:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L306:
        expect: true
        expr: '(^|\n)([^\n]+:306:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L307:
        expect: true
        expr: '(^|\n)([^\n]+:307:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L308:
        expect: true
        expr: '(^|\n)([^\n]+:308:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L309:
        expect: true
        expr: '(^|\n)([^\n]+:309:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L310:
        expect: true
        expr: '(^|\n)([^\n]+:310:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L311:
        expect: true
        expr: '(^|\n)([^\n]+:311:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L312:
        expect: true
        expr: '(^|\n)([^\n]+:312:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L313:
        expect: true
        expr: '(^|\n)([^\n]+:313:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L314:
        expect: true
        expr: '(^|\n)([^\n]+:314:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L315:
        expect: true
        expr: '(^|\n)([^\n]+:315:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L316:
        expect: true
        expr: '(^|\n)([^\n]+:316:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L317:
        expect: true
        expr: '(^|\n)([^\n]+:317:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L318:
        expect: true
        expr: '(^|\n)([^\n]+:318:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L319:
        expect: true
        expr: '(^|\n)([^\n]+:319:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L320:
        expect: true
        expr: '(^|\n)([^\n]+:320:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L321:
        expect: true
        expr: '(^|\n)([^\n]+:321:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L322:
        expect: true
        expr: '(^|\n)([^\n]+:322:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L323:
        expect: true
        expr: '(^|\n)([^\n]+:323:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L324:
        expect: true
        expr: '(^|\n)([^\n]+:324:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L325:
        expect: true
        expr: '(^|\n)([^\n]+:325:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L326:
        expect: true
        expr: '(^|\n)([^\n]+:326:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L327:
        expect: true
        expr: '(^|\n)([^\n]+:327:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L328:
        expect: true
        expr: '(^|\n)([^\n]+:328:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L329:
        expect: true
        expr: '(^|\n)([^\n]+:329:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L330:
        expect: true
        expr: '(^|\n)([^\n]+:330:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L331:
        expect: true
        expr: '(^|\n)([^\n]+:331:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L332:
        expect: true
        expr: '(^|\n)([^\n]+:332:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L333:
        expect: true
        expr: '(^|\n)([^\n]+:333:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L334:
        expect: true
        expr: '(^|\n)([^\n]+:334:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L335:
        expect: true
        expr: '(^|\n)([^\n]+:335:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L336:
        expect: true
        expr: '(^|\n)([^\n]+:336:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L337:
        expect: true
        expr: '(^|\n)([^\n]+:337:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L338:
        expect: true
        expr: '(^|\n)([^\n]+:338:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L339:
        expect: true
        expr: '(^|\n)([^\n]+:339:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L340:
        expect: true
        expr: '(^|\n)([^\n]+:340:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L341:
        expect: true
        expr: '(^|\n)([^\n]+:341:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L342:
        expect: true
        expr: '(^|\n)([^\n]+:342:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L343:
        expect: true
        expr: '(^|\n)([^\n]+:343:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L344:
        expect: true
        expr: '(^|\n)([^\n]+:344:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L345:
        expect: true
        expr: '(^|\n)([^\n]+:345:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L346:
        expect: true
        expr: '(^|\n)([^\n]+:346:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L347:
        expect: true
        expr: '(^|\n)([^\n]+:347:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L348:
        expect: true
        expr: '(^|\n)([^\n]+:348:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L349:
        expect: true
        expr: '(^|\n)([^\n]+:349:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L350:
        expect: true
        expr: '(^|\n)([^\n]+:350:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L351:
        expect: true
        expr: '(^|\n)([^\n]+:351:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L352:
        expect: true
        expr: '(^|\n)([^\n]+:352:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L353:
        expect: true
        expr: '(^|\n)([^\n]+:353:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L354:
        expect: true
        expr: '(^|\n)([^\n]+:354:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L355:
        expect: true
        expr: '(^|\n)([^\n]+:355:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L356:
        expect: true
        expr: '(^|\n)([^\n]+:356:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L357:
        expect: true
        expr: '(^|\n)([^\n]+:357:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L358:
        expect: true
        expr: '(^|\n)([^\n]+:358:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L359:
        expect: true
        expr: '(^|\n)([^\n]+:359:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L360:
        expect: true
        expr: '(^|\n)([^\n]+:360:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L361:
        expect: true
        expr: '(^|\n)([^\n]+:361:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L362:
        expect: true
        expr: '(^|\n)([^\n]+:362:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L363:
        expect: true
        expr: '(^|\n)([^\n]+:363:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L364:
        expect: true
        expr: '(^|\n)([^\n]+:364:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L365:
        expect: true
        expr: '(^|\n)([^\n]+:365:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L366:
        expect: true
        expr: '(^|\n)([^\n]+:366:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L367:
        expect: true
        expr: '(^|\n)([^\n]+:367:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L368:
        expect: true
        expr: '(^|\n)([^\n]+:368:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L369:
        expect: true
        expr: '(^|\n)([^\n]+:369:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L370:
        expect: true
        expr: '(^|\n)([^\n]+:370:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L371:
        expect: true
        expr: '(^|\n)([^\n]+:371:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L372:
        expect: true
        expr: '(^|\n)([^\n]+:372:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L373:
        expect: true
        expr: '(^|\n)([^\n]+:373:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L374:
        expect: true
        expr: '(^|\n)([^\n]+:374:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L375:
        expect: true
        expr: '(^|\n)([^\n]+:375:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L376:
        expect: true
        expr: '(^|\n)([^\n]+:376:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L377:
        expect: true
        expr: '(^|\n)([^\n]+:377:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L378:
        expect: true
        expr: '(^|\n)([^\n]+:378:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L379:
        expect: true
        expr: '(^|\n)([^\n]+:379:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L380:
        expect: true
        expr: '(^|\n)([^\n]+:380:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L381:
        expect: true
        expr: '(^|\n)([^\n]+:381:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L382:
        expect: true
        expr: '(^|\n)([^\n]+:382:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L383:
        expect: true
        expr: '(^|\n)([^\n]+:383:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L384:
        expect: true
        expr: '(^|\n)([^\n]+:384:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L385:
        expect: true
        expr: '(^|\n)([^\n]+:385:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L386:
        expect: true
        expr: '(^|\n)([^\n]+:386:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L387:
        expect: true
        expr: '(^|\n)([^\n]+:387:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L388:
        expect: true
        expr: '(^|\n)([^\n]+:388:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L389:
        expect: true
        expr: '(^|\n)([^\n]+:389:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L390:
        expect: true
        expr: '(^|\n)([^\n]+:390:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L391:
        expect: true
        expr: '(^|\n)([^\n]+:391:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L392:
        expect: true
        expr: '(^|\n)([^\n]+:392:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L393:
        expect: true
        expr: '(^|\n)([^\n]+:393:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L394:
        expect: true
        expr: '(^|\n)([^\n]+:394:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L395:
        expect: true
        expr: '(^|\n)([^\n]+:395:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L396:
        expect: true
        expr: '(^|\n)([^\n]+:396:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L397:
        expect: true
        expr: '(^|\n)([^\n]+:397:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L398:
        expect: true
        expr: '(^|\n)([^\n]+:398:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L399:
        expect: true
        expr: '(^|\n)([^\n]+:399:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L400:
        expect: true
        expr: '(^|\n)([^\n]+:400:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L401:
        expect: true
        expr: '(^|\n)([^\n]+:401:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L402:
        expect: true
        expr: '(^|\n)([^\n]+:402:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L403:
        expect: true
        expr: '(^|\n)([^\n]+:403:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L404:
        expect: true
        expr: '(^|\n)([^\n]+:404:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L405:
        expect: true
        expr: '(^|\n)([^\n]+:405:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L406:
        expect: true
        expr: '(^|\n)([^\n]+:406:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L407:
        expect: true
        expr: '(^|\n)([^\n]+:407:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L408:
        expect: true
        expr: '(^|\n)([^\n]+:408:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L409:
        expect: true
        expr: '(^|\n)([^\n]+:409:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L410:
        expect: true
        expr: '(^|\n)([^\n]+:410:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L411:
        expect: true
        expr: '(^|\n)([^\n]+:411:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L412:
        expect: true
        expr: '(^|\n)([^\n]+:412:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L413:
        expect: true
        expr: '(^|\n)([^\n]+:413:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L414:
        expect: true
        expr: '(^|\n)([^\n]+:414:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L415:
        expect: true
        expr: '(^|\n)([^\n]+:415:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L416:
        expect: true
        expr: '(^|\n)([^\n]+:416:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L417:
        expect: true
        expr: '(^|\n)([^\n]+:417:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L418:
        expect: true
        expr: '(^|\n)([^\n]+:418:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L419:
        expect: true
        expr: '(^|\n)([^\n]+:419:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L420:
        expect: true
        expr: '(^|\n)([^\n]+:420:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L421:
        expect: true
        expr: '(^|\n)([^\n]+:421:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L422:
        expect: true
        expr: '(^|\n)([^\n]+:422:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L423:
        expect: true
        expr: '(^|\n)([^\n]+:423:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L424:
        expect: true
        expr: '(^|\n)([^\n]+:424:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L425:
        expect: true
        expr: '(^|\n)([^\n]+:425:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L426:
        expect: true
        expr: '(^|\n)([^\n]+:426:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L427:
        expect: true
        expr: '(^|\n)([^\n]+:427:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L428:
        expect: true
        expr: '(^|\n)([^\n]+:428:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L429:
        expect: true
        expr: '(^|\n)([^\n]+:429:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L430:
        expect: true
        expr: '(^|\n)([^\n]+:430:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L431:
        expect: true
        expr: '(^|\n)([^\n]+:431:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L432:
        expect: true
        expr: '(^|\n)([^\n]+:432:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L433:
        expect: true
        expr: '(^|\n)([^\n]+:433:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L434:
        expect: true
        expr: '(^|\n)([^\n]+:434:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L435:
        expect: true
        expr: '(^|\n)([^\n]+:435:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L436:
        expect: true
        expr: '(^|\n)([^\n]+:436:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L437:
        expect: true
        expr: '(^|\n)([^\n]+:437:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L438:
        expect: true
        expr: '(^|\n)([^\n]+:438:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L439:
        expect: true
        expr: '(^|\n)([^\n]+:439:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L440:
        expect: true
        expr: '(^|\n)([^\n]+:440:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L441:
        expect: true
        expr: '(^|\n)([^\n]+:441:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L442:
        expect: true
        expr: '(^|\n)([^\n]+:442:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L443:
        expect: true
        expr: '(^|\n)([^\n]+:443:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L444:
        expect: true
        expr: '(^|\n)([^\n]+:444:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L445:
        expect: true
        expr: '(^|\n)([^\n]+:445:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L446:
        expect: true
        expr: '(^|\n)([^\n]+:446:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L447:
        expect: true
        expr: '(^|\n)([^\n]+:447:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L448:
        expect: true
        expr: '(^|\n)([^\n]+:448:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L449:
        expect: true
        expr: '(^|\n)([^\n]+:449:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L450:
        expect: true
        expr: '(^|\n)([^\n]+:450:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L451:
        expect: true
        expr: '(^|\n)([^\n]+:451:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L452:
        expect: true
        expr: '(^|\n)([^\n]+:452:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L453:
        expect: true
        expr: '(^|\n)([^\n]+:453:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L454:
        expect: true
        expr: '(^|\n)([^\n]+:454:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L455:
        expect: true
        expr: '(^|\n)([^\n]+:455:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L456:
        expect: true
        expr: '(^|\n)([^\n]+:456:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L457:
        expect: true
        expr: '(^|\n)([^\n]+:457:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L458:
        expect: true
        expr: '(^|\n)([^\n]+:458:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L459:
        expect: true
        expr: '(^|\n)([^\n]+:459:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L460:
        expect: true
        expr: '(^|\n)([^\n]+:460:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L461:
        expect: true
        expr: '(^|\n)([^\n]+:461:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L462:
        expect: true
        expr: '(^|\n)([^\n]+:462:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L463:
        expect: true
        expr: '(^|\n)([^\n]+:463:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L464:
        expect: true
        expr: '(^|\n)([^\n]+:464:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L465:
        expect: true
        expr: '(^|\n)([^\n]+:465:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L466:
        expect: true
        expr: '(^|\n)([^\n]+:466:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L467:
        expect: true
        expr: '(^|\n)([^\n]+:467:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L468:
        expect: true
        expr: '(^|\n)([^\n]+:468:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L469:
        expect: true
        expr: '(^|\n)([^\n]+:469:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L470:
        expect: true
        expr: '(^|\n)([^\n]+:470:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L471:
        expect: true
        expr: '(^|\n)([^\n]+:471:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L472:
        expect: true
        expr: '(^|\n)([^\n]+:472:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L473:
        expect: true
        expr: '(^|\n)([^\n]+:473:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L474:
        expect: true
        expr: '(^|\n)([^\n]+:474:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L475:
        expect: true
        expr: '(^|\n)([^\n]+:475:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L476:
        expect: true
        expr: '(^|\n)([^\n]+:476:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L477:
        expect: true
        expr: '(^|\n)([^\n]+:477:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L478:
        expect: true
        expr: '(^|\n)([^\n]+:478:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L479:
        expect: true
        expr: '(^|\n)([^\n]+:479:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L480:
        expect: true
        expr: '(^|\n)([^\n]+:480:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L481:
        expect: true
        expr: '(^|\n)([^\n]+:481:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L482:
        expect: true
        expr: '(^|\n)([^\n]+:482:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L483:
        expect: true
        expr: '(^|\n)([^\n]+:483:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L484:
        expect: true
        expr: '(^|\n)([^\n]+:484:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L485:
        expect: true
        expr: '(^|\n)([^\n]+:485:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L486:
        expect: true
        expr: '(^|\n)([^\n]+:486:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L487:
        expect: true
        expr: '(^|\n)([^\n]+:487:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L488:
        expect: true
        expr: '(^|\n)([^\n]+:488:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L489:
        expect: true
        expr: '(^|\n)([^\n]+:489:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L490:
        expect: true
        expr: '(^|\n)([^\n]+:490:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L491:
        expect: true
        expr: '(^|\n)([^\n]+:491:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L492:
        expect: true
        expr: '(^|\n)([^\n]+:492:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L493:
        expect: true
        expr: '(^|\n)([^\n]+:493:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L494:
        expect: true
        expr: '(^|\n)([^\n]+:494:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L495:
        expect: true
        expr: '(^|\n)([^\n]+:495:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L496:
        expect: true
        expr: '(^|\n)([^\n]+:496:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L497:
        expect: true
        expr: '(^|\n)([^\n]+:497:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L498:
        expect: true
        expr: '(^|\n)([^\n]+:498:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L499:
        expect: true
        expr: '(^|\n)([^\n]+:499:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L500:
        expect: true
        expr: '(^|\n)([^\n]+:500:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L501:
        expect: true
        expr: '(^|\n)([^\n]+:501:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L502:
        expect: true
        expr: '(^|\n)([^\n]+:502:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L503:
        expect: true
        expr: '(^|\n)([^\n]+:503:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L504:
        expect: true
        expr: '(^|\n)([^\n]+:504:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L505:
        expect: true
        expr: '(^|\n)([^\n]+:505:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L506:
        expect: true
        expr: '(^|\n)([^\n]+:506:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L507:
        expect: true
        expr: '(^|\n)([^\n]+:507:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L508:
        expect: true
        expr: '(^|\n)([^\n]+:508:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L509:
        expect: true
        expr: '(^|\n)([^\n]+:509:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L510:
        expect: true
        expr: '(^|\n)([^\n]+:510:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L511:
        expect: true
        expr: '(^|\n)([^\n]+:511:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L512:
        expect: true
        expr: '(^|\n)([^\n]+:512:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L513:
        expect: true
        expr: '(^|\n)([^\n]+:513:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L514:
        expect: true
        expr: '(^|\n)([^\n]+:514:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L515:
        expect: true
        expr: '(^|\n)([^\n]+:515:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L516:
        expect: true
        expr: '(^|\n)([^\n]+:516:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L517:
        expect: true
        expr: '(^|\n)([^\n]+:517:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L518:
        expect: true
        expr: '(^|\n)([^\n]+:518:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L519:
        expect: true
        expr: '(^|\n)([^\n]+:519:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L520:
        expect: true
        expr: '(^|\n)([^\n]+:520:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L521:
        expect: true
        expr: '(^|\n)([^\n]+:521:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L522:
        expect: true
        expr: '(^|\n)([^\n]+:522:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L523:
        expect: true
        expr: '(^|\n)([^\n]+:523:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L524:
        expect: true
        expr: '(^|\n)([^\n]+:524:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L525:
        expect: true
        expr: '(^|\n)([^\n]+:525:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L526:
        expect: true
        expr: '(^|\n)([^\n]+:526:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L527:
        expect: true
        expr: '(^|\n)([^\n]+:527:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L528:
        expect: true
        expr: '(^|\n)([^\n]+:528:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L529:
        expect: true
        expr: '(^|\n)([^\n]+:529:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L530:
        expect: true
        expr: '(^|\n)([^\n]+:530:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L531:
        expect: true
        expr: '(^|\n)([^\n]+:531:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L532:
        expect: true
        expr: '(^|\n)([^\n]+:532:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L533:
        expect: true
        expr: '(^|\n)([^\n]+:533:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L534:
        expect: true
        expr: '(^|\n)([^\n]+:534:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L535:
        expect: true
        expr: '(^|\n)([^\n]+:535:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L536:
        expect: true
        expr: '(^|\n)([^\n]+:536:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L537:
        expect: true
        expr: '(^|\n)([^\n]+:537:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L538:
        expect: true
        expr: '(^|\n)([^\n]+:538:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L539:
        expect: true
        expr: '(^|\n)([^\n]+:539:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L540:
        expect: true
        expr: '(^|\n)([^\n]+:540:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L541:
        expect: true
        expr: '(^|\n)([^\n]+:541:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L542:
        expect: true
        expr: '(^|\n)([^\n]+:542:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L543:
        expect: true
        expr: '(^|\n)([^\n]+:543:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L544:
        expect: true
        expr: '(^|\n)([^\n]+:544:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L545:
        expect: true
        expr: '(^|\n)([^\n]+:545:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L546:
        expect: true
        expr: '(^|\n)([^\n]+:546:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L547:
        expect: true
        expr: '(^|\n)([^\n]+:547:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L548:
        expect: true
        expr: '(^|\n)([^\n]+:548:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L549:
        expect: true
        expr: '(^|\n)([^\n]+:549:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L550:
        expect: true
        expr: '(^|\n)([^\n]+:550:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L551:
        expect: true
        expr: '(^|\n)([^\n]+:551:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L552:
        expect: true
        expr: '(^|\n)([^\n]+:552:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L553:
        expect: true
        expr: '(^|\n)([^\n]+:553:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L554:
        expect: true
        expr: '(^|\n)([^\n]+:554:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L555:
        expect: true
        expr: '(^|\n)([^\n]+:555:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L556:
        expect: true
        expr: '(^|\n)([^\n]+:556:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L557:
        expect: true
        expr: '(^|\n)([^\n]+:557:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L558:
        expect: true
        expr: '(^|\n)([^\n]+:558:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L559:
        expect: true
        expr: '(^|\n)([^\n]+:559:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L560:
        expect: true
        expr: '(^|\n)([^\n]+:560:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L561:
        expect: true
        expr: '(^|\n)([^\n]+:561:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L562:
        expect: true
        expr: '(^|\n)([^\n]+:562:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L563:
        expect: true
        expr: '(^|\n)([^\n]+:563:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L564:
        expect: true
        expr: '(^|\n)([^\n]+:564:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L565:
        expect: true
        expr: '(^|\n)([^\n]+:565:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L566:
        expect: true
        expr: '(^|\n)([^\n]+:566:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L567:
        expect: true
        expr: '(^|\n)([^\n]+:567:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L568:
        expect: true
        expr: '(^|\n)([^\n]+:568:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L569:
        expect: true
        expr: '(^|\n)([^\n]+:569:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L570:
        expect: true
        expr: '(^|\n)([^\n]+:570:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L571:
        expect: true
        expr: '(^|\n)([^\n]+:571:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L572:
        expect: true
        expr: '(^|\n)([^\n]+:572:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L573:
        expect: true
        expr: '(^|\n)([^\n]+:573:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L574:
        expect: true
        expr: '(^|\n)([^\n]+:574:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L575:
        expect: true
        expr: '(^|\n)([^\n]+:575:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L576:
        expect: true
        expr: '(^|\n)([^\n]+:576:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L577:
        expect: true
        expr: '(^|\n)([^\n]+:577:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L578:
        expect: true
        expr: '(^|\n)([^\n]+:578:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L579:
        expect: true
        expr: '(^|\n)([^\n]+:579:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L580:
        expect: true
        expr: '(^|\n)([^\n]+:580:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L581:
        expect: true
        expr: '(^|\n)([^\n]+:581:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L582:
        expect: true
        expr: '(^|\n)([^\n]+:582:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L583:
        expect: true
        expr: '(^|\n)([^\n]+:583:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L584:
        expect: true
        expr: '(^|\n)([^\n]+:584:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L585:
        expect: true
        expr: '(^|\n)([^\n]+:585:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L586:
        expect: true
        expr: '(^|\n)([^\n]+:586:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L587:
        expect: true
        expr: '(^|\n)([^\n]+:587:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L588:
        expect: true
        expr: '(^|\n)([^\n]+:588:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L589:
        expect: true
        expr: '(^|\n)([^\n]+:589:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L590:
        expect: true
        expr: '(^|\n)([^\n]+:590:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L591:
        expect: true
        expr: '(^|\n)([^\n]+:591:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L592:
        expect: true
        expr: '(^|\n)([^\n]+:592:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L593:
        expect: true
        expr: '(^|\n)([^\n]+:593:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L594:
        expect: true
        expr: '(^|\n)([^\n]+:594:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L595:
        expect: true
        expr: '(^|\n)([^\n]+:595:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L596:
        expect: true
        expr: '(^|\n)([^\n]+:596:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L597:
        expect: true
        expr: '(^|\n)([^\n]+:597:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L598:
        expect: true
        expr: '(^|\n)([^\n]+:598:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L599:
        expect: true
        expr: '(^|\n)([^\n]+:599:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L600:
        expect: true
        expr: '(^|\n)([^\n]+:600:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L601:
        expect: true
        expr: '(^|\n)([^\n]+:601:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L602:
        expect: true
        expr: '(^|\n)([^\n]+:602:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L603:
        expect: true
        expr: '(^|\n)([^\n]+:603:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L604:
        expect: true
        expr: '(^|\n)([^\n]+:604:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L605:
        expect: true
        expr: '(^|\n)([^\n]+:605:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L606:
        expect: true
        expr: '(^|\n)([^\n]+:606:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L607:
        expect: true
        expr: '(^|\n)([^\n]+:607:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L608:
        expect: true
        expr: '(^|\n)([^\n]+:608:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L609:
        expect: true
        expr: '(^|\n)([^\n]+:609:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L610:
        expect: true
        expr: '(^|\n)([^\n]+:610:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L611:
        expect: true
        expr: '(^|\n)([^\n]+:611:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L612:
        expect: true
        expr: '(^|\n)([^\n]+:612:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L613:
        expect: true
        expr: '(^|\n)([^\n]+:613:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L614:
        expect: true
        expr: '(^|\n)([^\n]+:614:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L615:
        expect: true
        expr: '(^|\n)([^\n]+:615:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L616:
        expect: true
        expr: '(^|\n)([^\n]+:616:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L617:
        expect: true
        expr: '(^|\n)([^\n]+:617:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L618:
        expect: true
        expr: '(^|\n)([^\n]+:618:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L619:
        expect: true
        expr: '(^|\n)([^\n]+:619:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L620:
        expect: true
        expr: '(^|\n)([^\n]+:620:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L621:
        expect: true
        expr: '(^|\n)([^\n]+:621:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L622:
        expect: true
        expr: '(^|\n)([^\n]+:622:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L623:
        expect: true
        expr: '(^|\n)([^\n]+:623:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L624:
        expect: true
        expr: '(^|\n)([^\n]+:624:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L625:
        expect: true
        expr: '(^|\n)([^\n]+:625:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L626:
        expect: true
        expr: '(^|\n)([^\n]+:626:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L627:
        expect: true
        expr: '(^|\n)([^\n]+:627:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L628:
        expect: true
        expr: '(^|\n)([^\n]+:628:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L629:
        expect: true
        expr: '(^|\n)([^\n]+:629:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L630:
        expect: true
        expr: '(^|\n)([^\n]+:630:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L631:
        expect: true
        expr: '(^|\n)([^\n]+:631:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L632:
        expect: true
        expr: '(^|\n)([^\n]+:632:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L633:
        expect: true
        expr: '(^|\n)([^\n]+:633:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L634:
        expect: true
        expr: '(^|\n)([^\n]+:634:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L635:
        expect: true
        expr: '(^|\n)([^\n]+:635:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L636:
        expect: true
        expr: '(^|\n)([^\n]+:636:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L637:
        expect: true
        expr: '(^|\n)([^\n]+:637:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L638:
        expect: true
        expr: '(^|\n)([^\n]+:638:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L639:
        expect: true
        expr: '(^|\n)([^\n]+:639:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L640:
        expect: true
        expr: '(^|\n)([^\n]+:640:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L641:
        expect: true
        expr: '(^|\n)([^\n]+:641:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L642:
        expect: true
        expr: '(^|\n)([^\n]+:642:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L643:
        expect: true
        expr: '(^|\n)([^\n]+:643:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L644:
        expect: true
        expr: '(^|\n)([^\n]+:644:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L645:
        expect: true
        expr: '(^|\n)([^\n]+:645:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L646:
        expect: true
        expr: '(^|\n)([^\n]+:646:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L647:
        expect: true
        expr: '(^|\n)([^\n]+:647:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L648:
        expect: true
        expr: '(^|\n)([^\n]+:648:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L649:
        expect: true
        expr: '(^|\n)([^\n]+:649:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L650:
        expect: true
        expr: '(^|\n)([^\n]+:650:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L651:
        expect: true
        expr: '(^|\n)([^\n]+:651:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L652:
        expect: true
        expr: '(^|\n)([^\n]+:652:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L653:
        expect: true
        expr: '(^|\n)([^\n]+:653:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L654:
        expect: true
        expr: '(^|\n)([^\n]+:654:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L655:
        expect: true
        expr: '(^|\n)([^\n]+:655:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L656:
        expect: true
        expr: '(^|\n)([^\n]+:656:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L657:
        expect: true
        expr: '(^|\n)([^\n]+:657:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L658:
        expect: true
        expr: '(^|\n)([^\n]+:658:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L659:
        expect: true
        expr: '(^|\n)([^\n]+:659:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L660:
        expect: true
        expr: '(^|\n)([^\n]+:660:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L661:
        expect: true
        expr: '(^|\n)([^\n]+:661:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L662:
        expect: true
        expr: '(^|\n)([^\n]+:662:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L663:
        expect: true
        expr: '(^|\n)([^\n]+:663:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L664:
        expect: true
        expr: '(^|\n)([^\n]+:664:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L665:
        expect: true
        expr: '(^|\n)([^\n]+:665:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L666:
        expect: true
        expr: '(^|\n)([^\n]+:666:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_int128-types-1_189:
  build:
    cflags: "-Wc++-compat  -std=gnu99\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/int128-types-1.c'
    sources:
      binary: int128-types-1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L100:
        expect: true
        expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L109:
        expect: true
        expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L117:
        expect: true
        expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L118:
        expect: true
        expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L119:
        expect: true
        expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L123:
        expect: true
        expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L126:
        expect: true
        expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+:129:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L130:
        expect: true
        expr: '(^|\n)([^\n]+:130:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L132:
        expect: true
        expr: '(^|\n)([^\n]+:132:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+:133:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L138:
        expect: true
        expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L139:
        expect: true
        expr: '(^|\n)([^\n]+:139:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L140:
        expect: true
        expr: '(^|\n)([^\n]+:140:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L141:
        expect: true
        expr: '(^|\n)([^\n]+:141:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+:142:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L145:
        expect: true
        expr: '(^|\n)([^\n]+:145:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L149:
        expect: true
        expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+:152:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+:154:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+:155:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L160:
        expect: true
        expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L161:
        expect: true
        expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L162:
        expect: true
        expr: '(^|\n)([^\n]+:162:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L163:
        expect: true
        expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+:166:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L167:
        expect: true
        expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L168:
        expect: true
        expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L169:
        expect: true
        expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L170:
        expect: true
        expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L171:
        expect: true
        expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+:172:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L173:
        expect: true
        expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L174:
        expect: true
        expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+:177:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L179:
        expect: true
        expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L181:
        expect: true
        expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L182:
        expect: true
        expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L185:
        expect: true
        expr: '(^|\n)([^\n]+:185:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L188:
        expect: true
        expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L189:
        expect: true
        expr: '(^|\n)([^\n]+:189:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L191:
        expect: true
        expr: '(^|\n)([^\n]+:191:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L192:
        expect: true
        expr: '(^|\n)([^\n]+:192:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L194:
        expect: true
        expr: '(^|\n)([^\n]+:194:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L195:
        expect: true
        expr: '(^|\n)([^\n]+:195:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+:196:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+:197:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L198:
        expect: true
        expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L199:
        expect: true
        expr: '(^|\n)([^\n]+:199:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L200:
        expect: true
        expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L201:
        expect: true
        expr: '(^|\n)([^\n]+:201:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L202:
        expect: true
        expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L203:
        expect: true
        expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L204:
        expect: true
        expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L205:
        expect: true
        expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L206:
        expect: true
        expr: '(^|\n)([^\n]+:206:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L207:
        expect: true
        expr: '(^|\n)([^\n]+:207:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L208:
        expect: true
        expr: '(^|\n)([^\n]+:208:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L209:
        expect: true
        expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L210:
        expect: true
        expr: '(^|\n)([^\n]+:210:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L211:
        expect: true
        expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L213:
        expect: true
        expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L216:
        expect: true
        expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L217:
        expect: true
        expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L218:
        expect: true
        expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L219:
        expect: true
        expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L220:
        expect: true
        expr: '(^|\n)([^\n]+:220:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L221:
        expect: true
        expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L222:
        expect: true
        expr: '(^|\n)([^\n]+:222:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L223:
        expect: true
        expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L224:
        expect: true
        expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L225:
        expect: true
        expr: '(^|\n)([^\n]+:225:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L226:
        expect: true
        expr: '(^|\n)([^\n]+:226:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L228:
        expect: true
        expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L229:
        expect: true
        expr: '(^|\n)([^\n]+:229:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L230:
        expect: true
        expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L231:
        expect: true
        expr: '(^|\n)([^\n]+:231:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L232:
        expect: true
        expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L233:
        expect: true
        expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L234:
        expect: true
        expr: '(^|\n)([^\n]+:234:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L235:
        expect: true
        expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L236:
        expect: true
        expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L237:
        expect: true
        expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L238:
        expect: true
        expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L239:
        expect: true
        expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L240:
        expect: true
        expr: '(^|\n)([^\n]+:240:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L241:
        expect: true
        expr: '(^|\n)([^\n]+:241:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L242:
        expect: true
        expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L243:
        expect: true
        expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L244:
        expect: true
        expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L245:
        expect: true
        expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L246:
        expect: true
        expr: '(^|\n)([^\n]+:246:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L247:
        expect: true
        expr: '(^|\n)([^\n]+:247:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L248:
        expect: true
        expr: '(^|\n)([^\n]+:248:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L249:
        expect: true
        expr: '(^|\n)([^\n]+:249:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L250:
        expect: true
        expr: '(^|\n)([^\n]+:250:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L251:
        expect: true
        expr: '(^|\n)([^\n]+:251:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L252:
        expect: true
        expr: '(^|\n)([^\n]+:252:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L253:
        expect: true
        expr: '(^|\n)([^\n]+:253:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L254:
        expect: true
        expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L255:
        expect: true
        expr: '(^|\n)([^\n]+:255:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L256:
        expect: true
        expr: '(^|\n)([^\n]+:256:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L257:
        expect: true
        expr: '(^|\n)([^\n]+:257:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L258:
        expect: true
        expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L259:
        expect: true
        expr: '(^|\n)([^\n]+:259:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L260:
        expect: true
        expr: '(^|\n)([^\n]+:260:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L261:
        expect: true
        expr: '(^|\n)([^\n]+:261:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L262:
        expect: true
        expr: '(^|\n)([^\n]+:262:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L263:
        expect: true
        expr: '(^|\n)([^\n]+:263:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L264:
        expect: true
        expr: '(^|\n)([^\n]+:264:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L265:
        expect: true
        expr: '(^|\n)([^\n]+:265:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L266:
        expect: true
        expr: '(^|\n)([^\n]+:266:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L267:
        expect: true
        expr: '(^|\n)([^\n]+:267:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L268:
        expect: true
        expr: '(^|\n)([^\n]+:268:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L269:
        expect: true
        expr: '(^|\n)([^\n]+:269:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L270:
        expect: true
        expr: '(^|\n)([^\n]+:270:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L271:
        expect: true
        expr: '(^|\n)([^\n]+:271:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L272:
        expect: true
        expr: '(^|\n)([^\n]+:272:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L273:
        expect: true
        expr: '(^|\n)([^\n]+:273:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L274:
        expect: true
        expr: '(^|\n)([^\n]+:274:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L275:
        expect: true
        expr: '(^|\n)([^\n]+:275:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L276:
        expect: true
        expr: '(^|\n)([^\n]+:276:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L277:
        expect: true
        expr: '(^|\n)([^\n]+:277:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L278:
        expect: true
        expr: '(^|\n)([^\n]+:278:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L279:
        expect: true
        expr: '(^|\n)([^\n]+:279:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L280:
        expect: true
        expr: '(^|\n)([^\n]+:280:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L281:
        expect: true
        expr: '(^|\n)([^\n]+:281:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L282:
        expect: true
        expr: '(^|\n)([^\n]+:282:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L283:
        expect: true
        expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L284:
        expect: true
        expr: '(^|\n)([^\n]+:284:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L285:
        expect: true
        expr: '(^|\n)([^\n]+:285:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L286:
        expect: true
        expr: '(^|\n)([^\n]+:286:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L287:
        expect: true
        expr: '(^|\n)([^\n]+:287:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L288:
        expect: true
        expr: '(^|\n)([^\n]+:288:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L289:
        expect: true
        expr: '(^|\n)([^\n]+:289:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L290:
        expect: true
        expr: '(^|\n)([^\n]+:290:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L291:
        expect: true
        expr: '(^|\n)([^\n]+:291:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L292:
        expect: true
        expr: '(^|\n)([^\n]+:292:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L293:
        expect: true
        expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L294:
        expect: true
        expr: '(^|\n)([^\n]+:294:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L295:
        expect: true
        expr: '(^|\n)([^\n]+:295:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L296:
        expect: true
        expr: '(^|\n)([^\n]+:296:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L297:
        expect: true
        expr: '(^|\n)([^\n]+:297:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L298:
        expect: true
        expr: '(^|\n)([^\n]+:298:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L299:
        expect: true
        expr: '(^|\n)([^\n]+:299:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L300:
        expect: true
        expr: '(^|\n)([^\n]+:300:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L301:
        expect: true
        expr: '(^|\n)([^\n]+:301:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L302:
        expect: true
        expr: '(^|\n)([^\n]+:302:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L303:
        expect: true
        expr: '(^|\n)([^\n]+:303:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L304:
        expect: true
        expr: '(^|\n)([^\n]+:304:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L305:
        expect: true
        expr: '(^|\n)([^\n]+:305:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L306:
        expect: true
        expr: '(^|\n)([^\n]+:306:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L307:
        expect: true
        expr: '(^|\n)([^\n]+:307:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L308:
        expect: true
        expr: '(^|\n)([^\n]+:308:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L309:
        expect: true
        expr: '(^|\n)([^\n]+:309:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L310:
        expect: true
        expr: '(^|\n)([^\n]+:310:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L311:
        expect: true
        expr: '(^|\n)([^\n]+:311:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L312:
        expect: true
        expr: '(^|\n)([^\n]+:312:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L313:
        expect: true
        expr: '(^|\n)([^\n]+:313:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L314:
        expect: true
        expr: '(^|\n)([^\n]+:314:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L315:
        expect: true
        expr: '(^|\n)([^\n]+:315:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L316:
        expect: true
        expr: '(^|\n)([^\n]+:316:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L317:
        expect: true
        expr: '(^|\n)([^\n]+:317:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L318:
        expect: true
        expr: '(^|\n)([^\n]+:318:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L319:
        expect: true
        expr: '(^|\n)([^\n]+:319:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L320:
        expect: true
        expr: '(^|\n)([^\n]+:320:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L321:
        expect: true
        expr: '(^|\n)([^\n]+:321:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L322:
        expect: true
        expr: '(^|\n)([^\n]+:322:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L323:
        expect: true
        expr: '(^|\n)([^\n]+:323:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L324:
        expect: true
        expr: '(^|\n)([^\n]+:324:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L325:
        expect: true
        expr: '(^|\n)([^\n]+:325:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L326:
        expect: true
        expr: '(^|\n)([^\n]+:326:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L327:
        expect: true
        expr: '(^|\n)([^\n]+:327:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L328:
        expect: true
        expr: '(^|\n)([^\n]+:328:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L329:
        expect: true
        expr: '(^|\n)([^\n]+:329:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L330:
        expect: true
        expr: '(^|\n)([^\n]+:330:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L331:
        expect: true
        expr: '(^|\n)([^\n]+:331:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L332:
        expect: true
        expr: '(^|\n)([^\n]+:332:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L333:
        expect: true
        expr: '(^|\n)([^\n]+:333:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L334:
        expect: true
        expr: '(^|\n)([^\n]+:334:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L335:
        expect: true
        expr: '(^|\n)([^\n]+:335:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L336:
        expect: true
        expr: '(^|\n)([^\n]+:336:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L337:
        expect: true
        expr: '(^|\n)([^\n]+:337:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L338:
        expect: true
        expr: '(^|\n)([^\n]+:338:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L339:
        expect: true
        expr: '(^|\n)([^\n]+:339:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L340:
        expect: true
        expr: '(^|\n)([^\n]+:340:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L341:
        expect: true
        expr: '(^|\n)([^\n]+:341:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L342:
        expect: true
        expr: '(^|\n)([^\n]+:342:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L343:
        expect: true
        expr: '(^|\n)([^\n]+:343:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L344:
        expect: true
        expr: '(^|\n)([^\n]+:344:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L345:
        expect: true
        expr: '(^|\n)([^\n]+:345:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L346:
        expect: true
        expr: '(^|\n)([^\n]+:346:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L347:
        expect: true
        expr: '(^|\n)([^\n]+:347:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L348:
        expect: true
        expr: '(^|\n)([^\n]+:348:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L349:
        expect: true
        expr: '(^|\n)([^\n]+:349:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L350:
        expect: true
        expr: '(^|\n)([^\n]+:350:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L351:
        expect: true
        expr: '(^|\n)([^\n]+:351:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L352:
        expect: true
        expr: '(^|\n)([^\n]+:352:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L353:
        expect: true
        expr: '(^|\n)([^\n]+:353:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L354:
        expect: true
        expr: '(^|\n)([^\n]+:354:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L355:
        expect: true
        expr: '(^|\n)([^\n]+:355:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L356:
        expect: true
        expr: '(^|\n)([^\n]+:356:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L357:
        expect: true
        expr: '(^|\n)([^\n]+:357:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L358:
        expect: true
        expr: '(^|\n)([^\n]+:358:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L359:
        expect: true
        expr: '(^|\n)([^\n]+:359:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L360:
        expect: true
        expr: '(^|\n)([^\n]+:360:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L361:
        expect: true
        expr: '(^|\n)([^\n]+:361:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L362:
        expect: true
        expr: '(^|\n)([^\n]+:362:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L363:
        expect: true
        expr: '(^|\n)([^\n]+:363:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L364:
        expect: true
        expr: '(^|\n)([^\n]+:364:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L365:
        expect: true
        expr: '(^|\n)([^\n]+:365:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L366:
        expect: true
        expr: '(^|\n)([^\n]+:366:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L367:
        expect: true
        expr: '(^|\n)([^\n]+:367:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L368:
        expect: true
        expr: '(^|\n)([^\n]+:368:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L369:
        expect: true
        expr: '(^|\n)([^\n]+:369:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L370:
        expect: true
        expr: '(^|\n)([^\n]+:370:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L371:
        expect: true
        expr: '(^|\n)([^\n]+:371:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L372:
        expect: true
        expr: '(^|\n)([^\n]+:372:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L373:
        expect: true
        expr: '(^|\n)([^\n]+:373:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L374:
        expect: true
        expr: '(^|\n)([^\n]+:374:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L375:
        expect: true
        expr: '(^|\n)([^\n]+:375:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L376:
        expect: true
        expr: '(^|\n)([^\n]+:376:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L377:
        expect: true
        expr: '(^|\n)([^\n]+:377:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L378:
        expect: true
        expr: '(^|\n)([^\n]+:378:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L379:
        expect: true
        expr: '(^|\n)([^\n]+:379:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L380:
        expect: true
        expr: '(^|\n)([^\n]+:380:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L381:
        expect: true
        expr: '(^|\n)([^\n]+:381:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L382:
        expect: true
        expr: '(^|\n)([^\n]+:382:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L383:
        expect: true
        expr: '(^|\n)([^\n]+:383:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L384:
        expect: true
        expr: '(^|\n)([^\n]+:384:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L385:
        expect: true
        expr: '(^|\n)([^\n]+:385:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L386:
        expect: true
        expr: '(^|\n)([^\n]+:386:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L387:
        expect: true
        expr: '(^|\n)([^\n]+:387:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L388:
        expect: true
        expr: '(^|\n)([^\n]+:388:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L389:
        expect: true
        expr: '(^|\n)([^\n]+:389:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L390:
        expect: true
        expr: '(^|\n)([^\n]+:390:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L391:
        expect: true
        expr: '(^|\n)([^\n]+:391:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L392:
        expect: true
        expr: '(^|\n)([^\n]+:392:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L393:
        expect: true
        expr: '(^|\n)([^\n]+:393:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L394:
        expect: true
        expr: '(^|\n)([^\n]+:394:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L395:
        expect: true
        expr: '(^|\n)([^\n]+:395:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L396:
        expect: true
        expr: '(^|\n)([^\n]+:396:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L397:
        expect: true
        expr: '(^|\n)([^\n]+:397:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L398:
        expect: true
        expr: '(^|\n)([^\n]+:398:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L399:
        expect: true
        expr: '(^|\n)([^\n]+:399:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L400:
        expect: true
        expr: '(^|\n)([^\n]+:400:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L401:
        expect: true
        expr: '(^|\n)([^\n]+:401:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L402:
        expect: true
        expr: '(^|\n)([^\n]+:402:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L403:
        expect: true
        expr: '(^|\n)([^\n]+:403:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L404:
        expect: true
        expr: '(^|\n)([^\n]+:404:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L405:
        expect: true
        expr: '(^|\n)([^\n]+:405:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L406:
        expect: true
        expr: '(^|\n)([^\n]+:406:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L407:
        expect: true
        expr: '(^|\n)([^\n]+:407:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L408:
        expect: true
        expr: '(^|\n)([^\n]+:408:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L409:
        expect: true
        expr: '(^|\n)([^\n]+:409:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L410:
        expect: true
        expr: '(^|\n)([^\n]+:410:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L411:
        expect: true
        expr: '(^|\n)([^\n]+:411:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L412:
        expect: true
        expr: '(^|\n)([^\n]+:412:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L413:
        expect: true
        expr: '(^|\n)([^\n]+:413:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L414:
        expect: true
        expr: '(^|\n)([^\n]+:414:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L415:
        expect: true
        expr: '(^|\n)([^\n]+:415:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L416:
        expect: true
        expr: '(^|\n)([^\n]+:416:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L417:
        expect: true
        expr: '(^|\n)([^\n]+:417:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L418:
        expect: true
        expr: '(^|\n)([^\n]+:418:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L419:
        expect: true
        expr: '(^|\n)([^\n]+:419:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L420:
        expect: true
        expr: '(^|\n)([^\n]+:420:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L421:
        expect: true
        expr: '(^|\n)([^\n]+:421:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L422:
        expect: true
        expr: '(^|\n)([^\n]+:422:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L423:
        expect: true
        expr: '(^|\n)([^\n]+:423:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L424:
        expect: true
        expr: '(^|\n)([^\n]+:424:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L425:
        expect: true
        expr: '(^|\n)([^\n]+:425:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L426:
        expect: true
        expr: '(^|\n)([^\n]+:426:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L427:
        expect: true
        expr: '(^|\n)([^\n]+:427:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L428:
        expect: true
        expr: '(^|\n)([^\n]+:428:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L429:
        expect: true
        expr: '(^|\n)([^\n]+:429:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L430:
        expect: true
        expr: '(^|\n)([^\n]+:430:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L431:
        expect: true
        expr: '(^|\n)([^\n]+:431:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L432:
        expect: true
        expr: '(^|\n)([^\n]+:432:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L433:
        expect: true
        expr: '(^|\n)([^\n]+:433:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L434:
        expect: true
        expr: '(^|\n)([^\n]+:434:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L435:
        expect: true
        expr: '(^|\n)([^\n]+:435:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L436:
        expect: true
        expr: '(^|\n)([^\n]+:436:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L437:
        expect: true
        expr: '(^|\n)([^\n]+:437:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L438:
        expect: true
        expr: '(^|\n)([^\n]+:438:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L439:
        expect: true
        expr: '(^|\n)([^\n]+:439:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L440:
        expect: true
        expr: '(^|\n)([^\n]+:440:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L441:
        expect: true
        expr: '(^|\n)([^\n]+:441:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L442:
        expect: true
        expr: '(^|\n)([^\n]+:442:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L443:
        expect: true
        expr: '(^|\n)([^\n]+:443:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L444:
        expect: true
        expr: '(^|\n)([^\n]+:444:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L445:
        expect: true
        expr: '(^|\n)([^\n]+:445:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L446:
        expect: true
        expr: '(^|\n)([^\n]+:446:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L447:
        expect: true
        expr: '(^|\n)([^\n]+:447:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L448:
        expect: true
        expr: '(^|\n)([^\n]+:448:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L449:
        expect: true
        expr: '(^|\n)([^\n]+:449:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L450:
        expect: true
        expr: '(^|\n)([^\n]+:450:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L451:
        expect: true
        expr: '(^|\n)([^\n]+:451:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L452:
        expect: true
        expr: '(^|\n)([^\n]+:452:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L453:
        expect: true
        expr: '(^|\n)([^\n]+:453:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L454:
        expect: true
        expr: '(^|\n)([^\n]+:454:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L455:
        expect: true
        expr: '(^|\n)([^\n]+:455:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L456:
        expect: true
        expr: '(^|\n)([^\n]+:456:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L457:
        expect: true
        expr: '(^|\n)([^\n]+:457:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L458:
        expect: true
        expr: '(^|\n)([^\n]+:458:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L459:
        expect: true
        expr: '(^|\n)([^\n]+:459:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L460:
        expect: true
        expr: '(^|\n)([^\n]+:460:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L461:
        expect: true
        expr: '(^|\n)([^\n]+:461:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L462:
        expect: true
        expr: '(^|\n)([^\n]+:462:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L463:
        expect: true
        expr: '(^|\n)([^\n]+:463:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L464:
        expect: true
        expr: '(^|\n)([^\n]+:464:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L465:
        expect: true
        expr: '(^|\n)([^\n]+:465:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L466:
        expect: true
        expr: '(^|\n)([^\n]+:466:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L467:
        expect: true
        expr: '(^|\n)([^\n]+:467:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L468:
        expect: true
        expr: '(^|\n)([^\n]+:468:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L469:
        expect: true
        expr: '(^|\n)([^\n]+:469:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L470:
        expect: true
        expr: '(^|\n)([^\n]+:470:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L471:
        expect: true
        expr: '(^|\n)([^\n]+:471:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L472:
        expect: true
        expr: '(^|\n)([^\n]+:472:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L473:
        expect: true
        expr: '(^|\n)([^\n]+:473:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L474:
        expect: true
        expr: '(^|\n)([^\n]+:474:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L475:
        expect: true
        expr: '(^|\n)([^\n]+:475:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L476:
        expect: true
        expr: '(^|\n)([^\n]+:476:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L477:
        expect: true
        expr: '(^|\n)([^\n]+:477:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L478:
        expect: true
        expr: '(^|\n)([^\n]+:478:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L479:
        expect: true
        expr: '(^|\n)([^\n]+:479:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L480:
        expect: true
        expr: '(^|\n)([^\n]+:480:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L481:
        expect: true
        expr: '(^|\n)([^\n]+:481:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L482:
        expect: true
        expr: '(^|\n)([^\n]+:482:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L483:
        expect: true
        expr: '(^|\n)([^\n]+:483:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L484:
        expect: true
        expr: '(^|\n)([^\n]+:484:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L485:
        expect: true
        expr: '(^|\n)([^\n]+:485:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L486:
        expect: true
        expr: '(^|\n)([^\n]+:486:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L487:
        expect: true
        expr: '(^|\n)([^\n]+:487:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L488:
        expect: true
        expr: '(^|\n)([^\n]+:488:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L489:
        expect: true
        expr: '(^|\n)([^\n]+:489:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L490:
        expect: true
        expr: '(^|\n)([^\n]+:490:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L491:
        expect: true
        expr: '(^|\n)([^\n]+:491:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L492:
        expect: true
        expr: '(^|\n)([^\n]+:492:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L493:
        expect: true
        expr: '(^|\n)([^\n]+:493:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L494:
        expect: true
        expr: '(^|\n)([^\n]+:494:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L495:
        expect: true
        expr: '(^|\n)([^\n]+:495:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L496:
        expect: true
        expr: '(^|\n)([^\n]+:496:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L497:
        expect: true
        expr: '(^|\n)([^\n]+:497:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L498:
        expect: true
        expr: '(^|\n)([^\n]+:498:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L499:
        expect: true
        expr: '(^|\n)([^\n]+:499:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L500:
        expect: true
        expr: '(^|\n)([^\n]+:500:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L501:
        expect: true
        expr: '(^|\n)([^\n]+:501:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L502:
        expect: true
        expr: '(^|\n)([^\n]+:502:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L503:
        expect: true
        expr: '(^|\n)([^\n]+:503:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L504:
        expect: true
        expr: '(^|\n)([^\n]+:504:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L505:
        expect: true
        expr: '(^|\n)([^\n]+:505:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L506:
        expect: true
        expr: '(^|\n)([^\n]+:506:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L507:
        expect: true
        expr: '(^|\n)([^\n]+:507:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L508:
        expect: true
        expr: '(^|\n)([^\n]+:508:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L509:
        expect: true
        expr: '(^|\n)([^\n]+:509:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L510:
        expect: true
        expr: '(^|\n)([^\n]+:510:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L511:
        expect: true
        expr: '(^|\n)([^\n]+:511:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L512:
        expect: true
        expr: '(^|\n)([^\n]+:512:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L513:
        expect: true
        expr: '(^|\n)([^\n]+:513:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L514:
        expect: true
        expr: '(^|\n)([^\n]+:514:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L515:
        expect: true
        expr: '(^|\n)([^\n]+:515:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L516:
        expect: true
        expr: '(^|\n)([^\n]+:516:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L517:
        expect: true
        expr: '(^|\n)([^\n]+:517:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L518:
        expect: true
        expr: '(^|\n)([^\n]+:518:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L519:
        expect: true
        expr: '(^|\n)([^\n]+:519:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L520:
        expect: true
        expr: '(^|\n)([^\n]+:520:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L521:
        expect: true
        expr: '(^|\n)([^\n]+:521:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L522:
        expect: true
        expr: '(^|\n)([^\n]+:522:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L523:
        expect: true
        expr: '(^|\n)([^\n]+:523:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L524:
        expect: true
        expr: '(^|\n)([^\n]+:524:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L525:
        expect: true
        expr: '(^|\n)([^\n]+:525:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L526:
        expect: true
        expr: '(^|\n)([^\n]+:526:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L527:
        expect: true
        expr: '(^|\n)([^\n]+:527:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L528:
        expect: true
        expr: '(^|\n)([^\n]+:528:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L529:
        expect: true
        expr: '(^|\n)([^\n]+:529:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L530:
        expect: true
        expr: '(^|\n)([^\n]+:530:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L531:
        expect: true
        expr: '(^|\n)([^\n]+:531:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L532:
        expect: true
        expr: '(^|\n)([^\n]+:532:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L533:
        expect: true
        expr: '(^|\n)([^\n]+:533:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L534:
        expect: true
        expr: '(^|\n)([^\n]+:534:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L535:
        expect: true
        expr: '(^|\n)([^\n]+:535:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L536:
        expect: true
        expr: '(^|\n)([^\n]+:536:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L537:
        expect: true
        expr: '(^|\n)([^\n]+:537:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L538:
        expect: true
        expr: '(^|\n)([^\n]+:538:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L539:
        expect: true
        expr: '(^|\n)([^\n]+:539:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L540:
        expect: true
        expr: '(^|\n)([^\n]+:540:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L541:
        expect: true
        expr: '(^|\n)([^\n]+:541:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L542:
        expect: true
        expr: '(^|\n)([^\n]+:542:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L543:
        expect: true
        expr: '(^|\n)([^\n]+:543:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L544:
        expect: true
        expr: '(^|\n)([^\n]+:544:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L545:
        expect: true
        expr: '(^|\n)([^\n]+:545:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L546:
        expect: true
        expr: '(^|\n)([^\n]+:546:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L547:
        expect: true
        expr: '(^|\n)([^\n]+:547:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L548:
        expect: true
        expr: '(^|\n)([^\n]+:548:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L549:
        expect: true
        expr: '(^|\n)([^\n]+:549:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L550:
        expect: true
        expr: '(^|\n)([^\n]+:550:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L551:
        expect: true
        expr: '(^|\n)([^\n]+:551:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L552:
        expect: true
        expr: '(^|\n)([^\n]+:552:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L553:
        expect: true
        expr: '(^|\n)([^\n]+:553:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L554:
        expect: true
        expr: '(^|\n)([^\n]+:554:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L555:
        expect: true
        expr: '(^|\n)([^\n]+:555:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L556:
        expect: true
        expr: '(^|\n)([^\n]+:556:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L557:
        expect: true
        expr: '(^|\n)([^\n]+:557:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L558:
        expect: true
        expr: '(^|\n)([^\n]+:558:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L559:
        expect: true
        expr: '(^|\n)([^\n]+:559:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L560:
        expect: true
        expr: '(^|\n)([^\n]+:560:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L561:
        expect: true
        expr: '(^|\n)([^\n]+:561:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L562:
        expect: true
        expr: '(^|\n)([^\n]+:562:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L563:
        expect: true
        expr: '(^|\n)([^\n]+:563:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L564:
        expect: true
        expr: '(^|\n)([^\n]+:564:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L565:
        expect: true
        expr: '(^|\n)([^\n]+:565:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L566:
        expect: true
        expr: '(^|\n)([^\n]+:566:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L567:
        expect: true
        expr: '(^|\n)([^\n]+:567:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L568:
        expect: true
        expr: '(^|\n)([^\n]+:568:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L569:
        expect: true
        expr: '(^|\n)([^\n]+:569:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L570:
        expect: true
        expr: '(^|\n)([^\n]+:570:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L571:
        expect: true
        expr: '(^|\n)([^\n]+:571:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L572:
        expect: true
        expr: '(^|\n)([^\n]+:572:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L573:
        expect: true
        expr: '(^|\n)([^\n]+:573:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L574:
        expect: true
        expr: '(^|\n)([^\n]+:574:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L575:
        expect: true
        expr: '(^|\n)([^\n]+:575:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L576:
        expect: true
        expr: '(^|\n)([^\n]+:576:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L577:
        expect: true
        expr: '(^|\n)([^\n]+:577:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L578:
        expect: true
        expr: '(^|\n)([^\n]+:578:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L579:
        expect: true
        expr: '(^|\n)([^\n]+:579:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L580:
        expect: true
        expr: '(^|\n)([^\n]+:580:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L581:
        expect: true
        expr: '(^|\n)([^\n]+:581:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L582:
        expect: true
        expr: '(^|\n)([^\n]+:582:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L583:
        expect: true
        expr: '(^|\n)([^\n]+:583:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L584:
        expect: true
        expr: '(^|\n)([^\n]+:584:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L585:
        expect: true
        expr: '(^|\n)([^\n]+:585:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L586:
        expect: true
        expr: '(^|\n)([^\n]+:586:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L587:
        expect: true
        expr: '(^|\n)([^\n]+:587:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L588:
        expect: true
        expr: '(^|\n)([^\n]+:588:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L589:
        expect: true
        expr: '(^|\n)([^\n]+:589:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L590:
        expect: true
        expr: '(^|\n)([^\n]+:590:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L591:
        expect: true
        expr: '(^|\n)([^\n]+:591:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L592:
        expect: true
        expr: '(^|\n)([^\n]+:592:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L593:
        expect: true
        expr: '(^|\n)([^\n]+:593:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L594:
        expect: true
        expr: '(^|\n)([^\n]+:594:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L595:
        expect: true
        expr: '(^|\n)([^\n]+:595:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L596:
        expect: true
        expr: '(^|\n)([^\n]+:596:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L597:
        expect: true
        expr: '(^|\n)([^\n]+:597:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L598:
        expect: true
        expr: '(^|\n)([^\n]+:598:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L599:
        expect: true
        expr: '(^|\n)([^\n]+:599:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L600:
        expect: true
        expr: '(^|\n)([^\n]+:600:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L601:
        expect: true
        expr: '(^|\n)([^\n]+:601:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L602:
        expect: true
        expr: '(^|\n)([^\n]+:602:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L603:
        expect: true
        expr: '(^|\n)([^\n]+:603:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L604:
        expect: true
        expr: '(^|\n)([^\n]+:604:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L605:
        expect: true
        expr: '(^|\n)([^\n]+:605:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L606:
        expect: true
        expr: '(^|\n)([^\n]+:606:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L607:
        expect: true
        expr: '(^|\n)([^\n]+:607:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L608:
        expect: true
        expr: '(^|\n)([^\n]+:608:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L609:
        expect: true
        expr: '(^|\n)([^\n]+:609:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L610:
        expect: true
        expr: '(^|\n)([^\n]+:610:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L611:
        expect: true
        expr: '(^|\n)([^\n]+:611:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L612:
        expect: true
        expr: '(^|\n)([^\n]+:612:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L613:
        expect: true
        expr: '(^|\n)([^\n]+:613:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L614:
        expect: true
        expr: '(^|\n)([^\n]+:614:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L615:
        expect: true
        expr: '(^|\n)([^\n]+:615:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L616:
        expect: true
        expr: '(^|\n)([^\n]+:616:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L617:
        expect: true
        expr: '(^|\n)([^\n]+:617:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L618:
        expect: true
        expr: '(^|\n)([^\n]+:618:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L619:
        expect: true
        expr: '(^|\n)([^\n]+:619:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L620:
        expect: true
        expr: '(^|\n)([^\n]+:620:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L621:
        expect: true
        expr: '(^|\n)([^\n]+:621:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L622:
        expect: true
        expr: '(^|\n)([^\n]+:622:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L623:
        expect: true
        expr: '(^|\n)([^\n]+:623:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L624:
        expect: true
        expr: '(^|\n)([^\n]+:624:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L625:
        expect: true
        expr: '(^|\n)([^\n]+:625:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L626:
        expect: true
        expr: '(^|\n)([^\n]+:626:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L627:
        expect: true
        expr: '(^|\n)([^\n]+:627:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L628:
        expect: true
        expr: '(^|\n)([^\n]+:628:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L629:
        expect: true
        expr: '(^|\n)([^\n]+:629:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L630:
        expect: true
        expr: '(^|\n)([^\n]+:630:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L631:
        expect: true
        expr: '(^|\n)([^\n]+:631:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L632:
        expect: true
        expr: '(^|\n)([^\n]+:632:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L633:
        expect: true
        expr: '(^|\n)([^\n]+:633:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L634:
        expect: true
        expr: '(^|\n)([^\n]+:634:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L635:
        expect: true
        expr: '(^|\n)([^\n]+:635:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L636:
        expect: true
        expr: '(^|\n)([^\n]+:636:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L637:
        expect: true
        expr: '(^|\n)([^\n]+:637:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L638:
        expect: true
        expr: '(^|\n)([^\n]+:638:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L639:
        expect: true
        expr: '(^|\n)([^\n]+:639:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L640:
        expect: true
        expr: '(^|\n)([^\n]+:640:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L641:
        expect: true
        expr: '(^|\n)([^\n]+:641:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L642:
        expect: true
        expr: '(^|\n)([^\n]+:642:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L643:
        expect: true
        expr: '(^|\n)([^\n]+:643:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L644:
        expect: true
        expr: '(^|\n)([^\n]+:644:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L645:
        expect: true
        expr: '(^|\n)([^\n]+:645:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L646:
        expect: true
        expr: '(^|\n)([^\n]+:646:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L647:
        expect: true
        expr: '(^|\n)([^\n]+:647:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L648:
        expect: true
        expr: '(^|\n)([^\n]+:648:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L649:
        expect: true
        expr: '(^|\n)([^\n]+:649:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L650:
        expect: true
        expr: '(^|\n)([^\n]+:650:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L651:
        expect: true
        expr: '(^|\n)([^\n]+:651:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L652:
        expect: true
        expr: '(^|\n)([^\n]+:652:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L653:
        expect: true
        expr: '(^|\n)([^\n]+:653:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L654:
        expect: true
        expr: '(^|\n)([^\n]+:654:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L655:
        expect: true
        expr: '(^|\n)([^\n]+:655:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L656:
        expect: true
        expr: '(^|\n)([^\n]+:656:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L657:
        expect: true
        expr: '(^|\n)([^\n]+:657:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L658:
        expect: true
        expr: '(^|\n)([^\n]+:658:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L659:
        expect: true
        expr: '(^|\n)([^\n]+:659:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L660:
        expect: true
        expr: '(^|\n)([^\n]+:660:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L661:
        expect: true
        expr: '(^|\n)([^\n]+:661:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L662:
        expect: true
        expr: '(^|\n)([^\n]+:662:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L663:
        expect: true
        expr: '(^|\n)([^\n]+:663:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L664:
        expect: true
        expr: '(^|\n)([^\n]+:664:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L665:
        expect: true
        expr: '(^|\n)([^\n]+:665:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L666:
        expect: true
        expr: '(^|\n)([^\n]+:666:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_int128-types-1_2070:
  build:
    cflags: "-Wc++-compat  -std=gnu99\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/int128-types-1.c'
    sources:
      binary: int128-types-1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L100:
        expect: true
        expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L109:
        expect: true
        expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L117:
        expect: true
        expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L118:
        expect: true
        expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L119:
        expect: true
        expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L123:
        expect: true
        expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L126:
        expect: true
        expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+:129:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L130:
        expect: true
        expr: '(^|\n)([^\n]+:130:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L132:
        expect: true
        expr: '(^|\n)([^\n]+:132:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+:133:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L138:
        expect: true
        expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L139:
        expect: true
        expr: '(^|\n)([^\n]+:139:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L140:
        expect: true
        expr: '(^|\n)([^\n]+:140:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L141:
        expect: true
        expr: '(^|\n)([^\n]+:141:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+:142:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L145:
        expect: true
        expr: '(^|\n)([^\n]+:145:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L149:
        expect: true
        expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+:152:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+:154:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+:155:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L160:
        expect: true
        expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L161:
        expect: true
        expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L162:
        expect: true
        expr: '(^|\n)([^\n]+:162:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L163:
        expect: true
        expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+:166:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L167:
        expect: true
        expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L168:
        expect: true
        expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L169:
        expect: true
        expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L170:
        expect: true
        expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L171:
        expect: true
        expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+:172:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L173:
        expect: true
        expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L174:
        expect: true
        expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+:177:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L179:
        expect: true
        expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L181:
        expect: true
        expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L182:
        expect: true
        expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L185:
        expect: true
        expr: '(^|\n)([^\n]+:185:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L188:
        expect: true
        expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L189:
        expect: true
        expr: '(^|\n)([^\n]+:189:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L191:
        expect: true
        expr: '(^|\n)([^\n]+:191:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L192:
        expect: true
        expr: '(^|\n)([^\n]+:192:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L194:
        expect: true
        expr: '(^|\n)([^\n]+:194:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L195:
        expect: true
        expr: '(^|\n)([^\n]+:195:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+:196:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+:197:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L198:
        expect: true
        expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L199:
        expect: true
        expr: '(^|\n)([^\n]+:199:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L200:
        expect: true
        expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L201:
        expect: true
        expr: '(^|\n)([^\n]+:201:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L202:
        expect: true
        expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L203:
        expect: true
        expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L204:
        expect: true
        expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L205:
        expect: true
        expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L206:
        expect: true
        expr: '(^|\n)([^\n]+:206:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L207:
        expect: true
        expr: '(^|\n)([^\n]+:207:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L208:
        expect: true
        expr: '(^|\n)([^\n]+:208:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L209:
        expect: true
        expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L210:
        expect: true
        expr: '(^|\n)([^\n]+:210:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L211:
        expect: true
        expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L213:
        expect: true
        expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L216:
        expect: true
        expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L217:
        expect: true
        expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L218:
        expect: true
        expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L219:
        expect: true
        expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L220:
        expect: true
        expr: '(^|\n)([^\n]+:220:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L221:
        expect: true
        expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L222:
        expect: true
        expr: '(^|\n)([^\n]+:222:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L223:
        expect: true
        expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L224:
        expect: true
        expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L225:
        expect: true
        expr: '(^|\n)([^\n]+:225:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L226:
        expect: true
        expr: '(^|\n)([^\n]+:226:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L228:
        expect: true
        expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L229:
        expect: true
        expr: '(^|\n)([^\n]+:229:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L230:
        expect: true
        expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L231:
        expect: true
        expr: '(^|\n)([^\n]+:231:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L232:
        expect: true
        expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L233:
        expect: true
        expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L234:
        expect: true
        expr: '(^|\n)([^\n]+:234:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L235:
        expect: true
        expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L236:
        expect: true
        expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L237:
        expect: true
        expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L238:
        expect: true
        expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L239:
        expect: true
        expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L240:
        expect: true
        expr: '(^|\n)([^\n]+:240:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L241:
        expect: true
        expr: '(^|\n)([^\n]+:241:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L242:
        expect: true
        expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L243:
        expect: true
        expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L244:
        expect: true
        expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L245:
        expect: true
        expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L246:
        expect: true
        expr: '(^|\n)([^\n]+:246:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L247:
        expect: true
        expr: '(^|\n)([^\n]+:247:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L248:
        expect: true
        expr: '(^|\n)([^\n]+:248:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L249:
        expect: true
        expr: '(^|\n)([^\n]+:249:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L250:
        expect: true
        expr: '(^|\n)([^\n]+:250:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L251:
        expect: true
        expr: '(^|\n)([^\n]+:251:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L252:
        expect: true
        expr: '(^|\n)([^\n]+:252:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L253:
        expect: true
        expr: '(^|\n)([^\n]+:253:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L254:
        expect: true
        expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L255:
        expect: true
        expr: '(^|\n)([^\n]+:255:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L256:
        expect: true
        expr: '(^|\n)([^\n]+:256:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L257:
        expect: true
        expr: '(^|\n)([^\n]+:257:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L258:
        expect: true
        expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L259:
        expect: true
        expr: '(^|\n)([^\n]+:259:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L260:
        expect: true
        expr: '(^|\n)([^\n]+:260:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L261:
        expect: true
        expr: '(^|\n)([^\n]+:261:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L262:
        expect: true
        expr: '(^|\n)([^\n]+:262:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L263:
        expect: true
        expr: '(^|\n)([^\n]+:263:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L264:
        expect: true
        expr: '(^|\n)([^\n]+:264:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L265:
        expect: true
        expr: '(^|\n)([^\n]+:265:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L266:
        expect: true
        expr: '(^|\n)([^\n]+:266:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L267:
        expect: true
        expr: '(^|\n)([^\n]+:267:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L268:
        expect: true
        expr: '(^|\n)([^\n]+:268:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L269:
        expect: true
        expr: '(^|\n)([^\n]+:269:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L270:
        expect: true
        expr: '(^|\n)([^\n]+:270:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L271:
        expect: true
        expr: '(^|\n)([^\n]+:271:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L272:
        expect: true
        expr: '(^|\n)([^\n]+:272:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L273:
        expect: true
        expr: '(^|\n)([^\n]+:273:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L274:
        expect: true
        expr: '(^|\n)([^\n]+:274:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L275:
        expect: true
        expr: '(^|\n)([^\n]+:275:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L276:
        expect: true
        expr: '(^|\n)([^\n]+:276:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L277:
        expect: true
        expr: '(^|\n)([^\n]+:277:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L278:
        expect: true
        expr: '(^|\n)([^\n]+:278:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L279:
        expect: true
        expr: '(^|\n)([^\n]+:279:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L280:
        expect: true
        expr: '(^|\n)([^\n]+:280:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L281:
        expect: true
        expr: '(^|\n)([^\n]+:281:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L282:
        expect: true
        expr: '(^|\n)([^\n]+:282:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L283:
        expect: true
        expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L284:
        expect: true
        expr: '(^|\n)([^\n]+:284:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L285:
        expect: true
        expr: '(^|\n)([^\n]+:285:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L286:
        expect: true
        expr: '(^|\n)([^\n]+:286:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L287:
        expect: true
        expr: '(^|\n)([^\n]+:287:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L288:
        expect: true
        expr: '(^|\n)([^\n]+:288:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L289:
        expect: true
        expr: '(^|\n)([^\n]+:289:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L290:
        expect: true
        expr: '(^|\n)([^\n]+:290:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L291:
        expect: true
        expr: '(^|\n)([^\n]+:291:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L292:
        expect: true
        expr: '(^|\n)([^\n]+:292:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L293:
        expect: true
        expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L294:
        expect: true
        expr: '(^|\n)([^\n]+:294:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L295:
        expect: true
        expr: '(^|\n)([^\n]+:295:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L296:
        expect: true
        expr: '(^|\n)([^\n]+:296:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L297:
        expect: true
        expr: '(^|\n)([^\n]+:297:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L298:
        expect: true
        expr: '(^|\n)([^\n]+:298:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L299:
        expect: true
        expr: '(^|\n)([^\n]+:299:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L300:
        expect: true
        expr: '(^|\n)([^\n]+:300:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L301:
        expect: true
        expr: '(^|\n)([^\n]+:301:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L302:
        expect: true
        expr: '(^|\n)([^\n]+:302:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L303:
        expect: true
        expr: '(^|\n)([^\n]+:303:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L304:
        expect: true
        expr: '(^|\n)([^\n]+:304:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L305:
        expect: true
        expr: '(^|\n)([^\n]+:305:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L306:
        expect: true
        expr: '(^|\n)([^\n]+:306:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L307:
        expect: true
        expr: '(^|\n)([^\n]+:307:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L308:
        expect: true
        expr: '(^|\n)([^\n]+:308:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L309:
        expect: true
        expr: '(^|\n)([^\n]+:309:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L310:
        expect: true
        expr: '(^|\n)([^\n]+:310:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L311:
        expect: true
        expr: '(^|\n)([^\n]+:311:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L312:
        expect: true
        expr: '(^|\n)([^\n]+:312:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L313:
        expect: true
        expr: '(^|\n)([^\n]+:313:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L314:
        expect: true
        expr: '(^|\n)([^\n]+:314:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L315:
        expect: true
        expr: '(^|\n)([^\n]+:315:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L316:
        expect: true
        expr: '(^|\n)([^\n]+:316:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L317:
        expect: true
        expr: '(^|\n)([^\n]+:317:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L318:
        expect: true
        expr: '(^|\n)([^\n]+:318:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L319:
        expect: true
        expr: '(^|\n)([^\n]+:319:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L320:
        expect: true
        expr: '(^|\n)([^\n]+:320:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L321:
        expect: true
        expr: '(^|\n)([^\n]+:321:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L322:
        expect: true
        expr: '(^|\n)([^\n]+:322:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L323:
        expect: true
        expr: '(^|\n)([^\n]+:323:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L324:
        expect: true
        expr: '(^|\n)([^\n]+:324:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L325:
        expect: true
        expr: '(^|\n)([^\n]+:325:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L326:
        expect: true
        expr: '(^|\n)([^\n]+:326:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L327:
        expect: true
        expr: '(^|\n)([^\n]+:327:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L328:
        expect: true
        expr: '(^|\n)([^\n]+:328:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L329:
        expect: true
        expr: '(^|\n)([^\n]+:329:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L330:
        expect: true
        expr: '(^|\n)([^\n]+:330:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L331:
        expect: true
        expr: '(^|\n)([^\n]+:331:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L332:
        expect: true
        expr: '(^|\n)([^\n]+:332:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L333:
        expect: true
        expr: '(^|\n)([^\n]+:333:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L334:
        expect: true
        expr: '(^|\n)([^\n]+:334:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L335:
        expect: true
        expr: '(^|\n)([^\n]+:335:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L336:
        expect: true
        expr: '(^|\n)([^\n]+:336:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L337:
        expect: true
        expr: '(^|\n)([^\n]+:337:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L338:
        expect: true
        expr: '(^|\n)([^\n]+:338:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L339:
        expect: true
        expr: '(^|\n)([^\n]+:339:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L340:
        expect: true
        expr: '(^|\n)([^\n]+:340:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L341:
        expect: true
        expr: '(^|\n)([^\n]+:341:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L342:
        expect: true
        expr: '(^|\n)([^\n]+:342:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L343:
        expect: true
        expr: '(^|\n)([^\n]+:343:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L344:
        expect: true
        expr: '(^|\n)([^\n]+:344:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L345:
        expect: true
        expr: '(^|\n)([^\n]+:345:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L346:
        expect: true
        expr: '(^|\n)([^\n]+:346:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L347:
        expect: true
        expr: '(^|\n)([^\n]+:347:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L348:
        expect: true
        expr: '(^|\n)([^\n]+:348:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L349:
        expect: true
        expr: '(^|\n)([^\n]+:349:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L350:
        expect: true
        expr: '(^|\n)([^\n]+:350:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L351:
        expect: true
        expr: '(^|\n)([^\n]+:351:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L352:
        expect: true
        expr: '(^|\n)([^\n]+:352:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L353:
        expect: true
        expr: '(^|\n)([^\n]+:353:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L354:
        expect: true
        expr: '(^|\n)([^\n]+:354:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L355:
        expect: true
        expr: '(^|\n)([^\n]+:355:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L356:
        expect: true
        expr: '(^|\n)([^\n]+:356:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L357:
        expect: true
        expr: '(^|\n)([^\n]+:357:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L358:
        expect: true
        expr: '(^|\n)([^\n]+:358:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L359:
        expect: true
        expr: '(^|\n)([^\n]+:359:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L360:
        expect: true
        expr: '(^|\n)([^\n]+:360:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L361:
        expect: true
        expr: '(^|\n)([^\n]+:361:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L362:
        expect: true
        expr: '(^|\n)([^\n]+:362:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L363:
        expect: true
        expr: '(^|\n)([^\n]+:363:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L364:
        expect: true
        expr: '(^|\n)([^\n]+:364:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L365:
        expect: true
        expr: '(^|\n)([^\n]+:365:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L366:
        expect: true
        expr: '(^|\n)([^\n]+:366:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L367:
        expect: true
        expr: '(^|\n)([^\n]+:367:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L368:
        expect: true
        expr: '(^|\n)([^\n]+:368:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L369:
        expect: true
        expr: '(^|\n)([^\n]+:369:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L370:
        expect: true
        expr: '(^|\n)([^\n]+:370:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L371:
        expect: true
        expr: '(^|\n)([^\n]+:371:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L372:
        expect: true
        expr: '(^|\n)([^\n]+:372:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L373:
        expect: true
        expr: '(^|\n)([^\n]+:373:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L374:
        expect: true
        expr: '(^|\n)([^\n]+:374:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L375:
        expect: true
        expr: '(^|\n)([^\n]+:375:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L376:
        expect: true
        expr: '(^|\n)([^\n]+:376:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L377:
        expect: true
        expr: '(^|\n)([^\n]+:377:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L378:
        expect: true
        expr: '(^|\n)([^\n]+:378:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L379:
        expect: true
        expr: '(^|\n)([^\n]+:379:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L380:
        expect: true
        expr: '(^|\n)([^\n]+:380:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L381:
        expect: true
        expr: '(^|\n)([^\n]+:381:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L382:
        expect: true
        expr: '(^|\n)([^\n]+:382:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L383:
        expect: true
        expr: '(^|\n)([^\n]+:383:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L384:
        expect: true
        expr: '(^|\n)([^\n]+:384:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L385:
        expect: true
        expr: '(^|\n)([^\n]+:385:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L386:
        expect: true
        expr: '(^|\n)([^\n]+:386:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L387:
        expect: true
        expr: '(^|\n)([^\n]+:387:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L388:
        expect: true
        expr: '(^|\n)([^\n]+:388:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L389:
        expect: true
        expr: '(^|\n)([^\n]+:389:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L390:
        expect: true
        expr: '(^|\n)([^\n]+:390:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L391:
        expect: true
        expr: '(^|\n)([^\n]+:391:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L392:
        expect: true
        expr: '(^|\n)([^\n]+:392:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L393:
        expect: true
        expr: '(^|\n)([^\n]+:393:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L394:
        expect: true
        expr: '(^|\n)([^\n]+:394:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L395:
        expect: true
        expr: '(^|\n)([^\n]+:395:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L396:
        expect: true
        expr: '(^|\n)([^\n]+:396:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L397:
        expect: true
        expr: '(^|\n)([^\n]+:397:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L398:
        expect: true
        expr: '(^|\n)([^\n]+:398:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L399:
        expect: true
        expr: '(^|\n)([^\n]+:399:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L400:
        expect: true
        expr: '(^|\n)([^\n]+:400:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L401:
        expect: true
        expr: '(^|\n)([^\n]+:401:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L402:
        expect: true
        expr: '(^|\n)([^\n]+:402:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L403:
        expect: true
        expr: '(^|\n)([^\n]+:403:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L404:
        expect: true
        expr: '(^|\n)([^\n]+:404:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L405:
        expect: true
        expr: '(^|\n)([^\n]+:405:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L406:
        expect: true
        expr: '(^|\n)([^\n]+:406:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L407:
        expect: true
        expr: '(^|\n)([^\n]+:407:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L408:
        expect: true
        expr: '(^|\n)([^\n]+:408:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L409:
        expect: true
        expr: '(^|\n)([^\n]+:409:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L410:
        expect: true
        expr: '(^|\n)([^\n]+:410:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L411:
        expect: true
        expr: '(^|\n)([^\n]+:411:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L412:
        expect: true
        expr: '(^|\n)([^\n]+:412:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L413:
        expect: true
        expr: '(^|\n)([^\n]+:413:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L414:
        expect: true
        expr: '(^|\n)([^\n]+:414:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L415:
        expect: true
        expr: '(^|\n)([^\n]+:415:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L416:
        expect: true
        expr: '(^|\n)([^\n]+:416:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L417:
        expect: true
        expr: '(^|\n)([^\n]+:417:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L418:
        expect: true
        expr: '(^|\n)([^\n]+:418:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L419:
        expect: true
        expr: '(^|\n)([^\n]+:419:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L420:
        expect: true
        expr: '(^|\n)([^\n]+:420:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L421:
        expect: true
        expr: '(^|\n)([^\n]+:421:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L422:
        expect: true
        expr: '(^|\n)([^\n]+:422:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L423:
        expect: true
        expr: '(^|\n)([^\n]+:423:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L424:
        expect: true
        expr: '(^|\n)([^\n]+:424:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L425:
        expect: true
        expr: '(^|\n)([^\n]+:425:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L426:
        expect: true
        expr: '(^|\n)([^\n]+:426:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L427:
        expect: true
        expr: '(^|\n)([^\n]+:427:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L428:
        expect: true
        expr: '(^|\n)([^\n]+:428:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L429:
        expect: true
        expr: '(^|\n)([^\n]+:429:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L430:
        expect: true
        expr: '(^|\n)([^\n]+:430:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L431:
        expect: true
        expr: '(^|\n)([^\n]+:431:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L432:
        expect: true
        expr: '(^|\n)([^\n]+:432:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L433:
        expect: true
        expr: '(^|\n)([^\n]+:433:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L434:
        expect: true
        expr: '(^|\n)([^\n]+:434:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L435:
        expect: true
        expr: '(^|\n)([^\n]+:435:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L436:
        expect: true
        expr: '(^|\n)([^\n]+:436:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L437:
        expect: true
        expr: '(^|\n)([^\n]+:437:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L438:
        expect: true
        expr: '(^|\n)([^\n]+:438:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L439:
        expect: true
        expr: '(^|\n)([^\n]+:439:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L440:
        expect: true
        expr: '(^|\n)([^\n]+:440:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L441:
        expect: true
        expr: '(^|\n)([^\n]+:441:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L442:
        expect: true
        expr: '(^|\n)([^\n]+:442:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L443:
        expect: true
        expr: '(^|\n)([^\n]+:443:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L444:
        expect: true
        expr: '(^|\n)([^\n]+:444:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L445:
        expect: true
        expr: '(^|\n)([^\n]+:445:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L446:
        expect: true
        expr: '(^|\n)([^\n]+:446:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L447:
        expect: true
        expr: '(^|\n)([^\n]+:447:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L448:
        expect: true
        expr: '(^|\n)([^\n]+:448:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L449:
        expect: true
        expr: '(^|\n)([^\n]+:449:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L450:
        expect: true
        expr: '(^|\n)([^\n]+:450:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L451:
        expect: true
        expr: '(^|\n)([^\n]+:451:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L452:
        expect: true
        expr: '(^|\n)([^\n]+:452:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L453:
        expect: true
        expr: '(^|\n)([^\n]+:453:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L454:
        expect: true
        expr: '(^|\n)([^\n]+:454:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L455:
        expect: true
        expr: '(^|\n)([^\n]+:455:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L456:
        expect: true
        expr: '(^|\n)([^\n]+:456:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L457:
        expect: true
        expr: '(^|\n)([^\n]+:457:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L458:
        expect: true
        expr: '(^|\n)([^\n]+:458:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L459:
        expect: true
        expr: '(^|\n)([^\n]+:459:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L460:
        expect: true
        expr: '(^|\n)([^\n]+:460:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L461:
        expect: true
        expr: '(^|\n)([^\n]+:461:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L462:
        expect: true
        expr: '(^|\n)([^\n]+:462:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L463:
        expect: true
        expr: '(^|\n)([^\n]+:463:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L464:
        expect: true
        expr: '(^|\n)([^\n]+:464:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L465:
        expect: true
        expr: '(^|\n)([^\n]+:465:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L466:
        expect: true
        expr: '(^|\n)([^\n]+:466:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L467:
        expect: true
        expr: '(^|\n)([^\n]+:467:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L468:
        expect: true
        expr: '(^|\n)([^\n]+:468:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L469:
        expect: true
        expr: '(^|\n)([^\n]+:469:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L470:
        expect: true
        expr: '(^|\n)([^\n]+:470:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L471:
        expect: true
        expr: '(^|\n)([^\n]+:471:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L472:
        expect: true
        expr: '(^|\n)([^\n]+:472:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L473:
        expect: true
        expr: '(^|\n)([^\n]+:473:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L474:
        expect: true
        expr: '(^|\n)([^\n]+:474:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L475:
        expect: true
        expr: '(^|\n)([^\n]+:475:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L476:
        expect: true
        expr: '(^|\n)([^\n]+:476:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L477:
        expect: true
        expr: '(^|\n)([^\n]+:477:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L478:
        expect: true
        expr: '(^|\n)([^\n]+:478:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L479:
        expect: true
        expr: '(^|\n)([^\n]+:479:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L480:
        expect: true
        expr: '(^|\n)([^\n]+:480:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L481:
        expect: true
        expr: '(^|\n)([^\n]+:481:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L482:
        expect: true
        expr: '(^|\n)([^\n]+:482:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L483:
        expect: true
        expr: '(^|\n)([^\n]+:483:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L484:
        expect: true
        expr: '(^|\n)([^\n]+:484:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L485:
        expect: true
        expr: '(^|\n)([^\n]+:485:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L486:
        expect: true
        expr: '(^|\n)([^\n]+:486:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L487:
        expect: true
        expr: '(^|\n)([^\n]+:487:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L488:
        expect: true
        expr: '(^|\n)([^\n]+:488:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L489:
        expect: true
        expr: '(^|\n)([^\n]+:489:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L490:
        expect: true
        expr: '(^|\n)([^\n]+:490:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L491:
        expect: true
        expr: '(^|\n)([^\n]+:491:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L492:
        expect: true
        expr: '(^|\n)([^\n]+:492:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L493:
        expect: true
        expr: '(^|\n)([^\n]+:493:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L494:
        expect: true
        expr: '(^|\n)([^\n]+:494:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L495:
        expect: true
        expr: '(^|\n)([^\n]+:495:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L496:
        expect: true
        expr: '(^|\n)([^\n]+:496:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L497:
        expect: true
        expr: '(^|\n)([^\n]+:497:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L498:
        expect: true
        expr: '(^|\n)([^\n]+:498:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L499:
        expect: true
        expr: '(^|\n)([^\n]+:499:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L500:
        expect: true
        expr: '(^|\n)([^\n]+:500:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L501:
        expect: true
        expr: '(^|\n)([^\n]+:501:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L502:
        expect: true
        expr: '(^|\n)([^\n]+:502:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L503:
        expect: true
        expr: '(^|\n)([^\n]+:503:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L504:
        expect: true
        expr: '(^|\n)([^\n]+:504:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L505:
        expect: true
        expr: '(^|\n)([^\n]+:505:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L506:
        expect: true
        expr: '(^|\n)([^\n]+:506:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L507:
        expect: true
        expr: '(^|\n)([^\n]+:507:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L508:
        expect: true
        expr: '(^|\n)([^\n]+:508:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L509:
        expect: true
        expr: '(^|\n)([^\n]+:509:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L510:
        expect: true
        expr: '(^|\n)([^\n]+:510:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L511:
        expect: true
        expr: '(^|\n)([^\n]+:511:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L512:
        expect: true
        expr: '(^|\n)([^\n]+:512:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L513:
        expect: true
        expr: '(^|\n)([^\n]+:513:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L514:
        expect: true
        expr: '(^|\n)([^\n]+:514:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L515:
        expect: true
        expr: '(^|\n)([^\n]+:515:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L516:
        expect: true
        expr: '(^|\n)([^\n]+:516:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L517:
        expect: true
        expr: '(^|\n)([^\n]+:517:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L518:
        expect: true
        expr: '(^|\n)([^\n]+:518:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L519:
        expect: true
        expr: '(^|\n)([^\n]+:519:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L520:
        expect: true
        expr: '(^|\n)([^\n]+:520:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L521:
        expect: true
        expr: '(^|\n)([^\n]+:521:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L522:
        expect: true
        expr: '(^|\n)([^\n]+:522:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L523:
        expect: true
        expr: '(^|\n)([^\n]+:523:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L524:
        expect: true
        expr: '(^|\n)([^\n]+:524:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L525:
        expect: true
        expr: '(^|\n)([^\n]+:525:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L526:
        expect: true
        expr: '(^|\n)([^\n]+:526:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L527:
        expect: true
        expr: '(^|\n)([^\n]+:527:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L528:
        expect: true
        expr: '(^|\n)([^\n]+:528:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L529:
        expect: true
        expr: '(^|\n)([^\n]+:529:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L530:
        expect: true
        expr: '(^|\n)([^\n]+:530:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L531:
        expect: true
        expr: '(^|\n)([^\n]+:531:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L532:
        expect: true
        expr: '(^|\n)([^\n]+:532:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L533:
        expect: true
        expr: '(^|\n)([^\n]+:533:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L534:
        expect: true
        expr: '(^|\n)([^\n]+:534:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L535:
        expect: true
        expr: '(^|\n)([^\n]+:535:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L536:
        expect: true
        expr: '(^|\n)([^\n]+:536:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L537:
        expect: true
        expr: '(^|\n)([^\n]+:537:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L538:
        expect: true
        expr: '(^|\n)([^\n]+:538:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L539:
        expect: true
        expr: '(^|\n)([^\n]+:539:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L540:
        expect: true
        expr: '(^|\n)([^\n]+:540:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L541:
        expect: true
        expr: '(^|\n)([^\n]+:541:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L542:
        expect: true
        expr: '(^|\n)([^\n]+:542:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L543:
        expect: true
        expr: '(^|\n)([^\n]+:543:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L544:
        expect: true
        expr: '(^|\n)([^\n]+:544:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L545:
        expect: true
        expr: '(^|\n)([^\n]+:545:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L546:
        expect: true
        expr: '(^|\n)([^\n]+:546:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L547:
        expect: true
        expr: '(^|\n)([^\n]+:547:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L548:
        expect: true
        expr: '(^|\n)([^\n]+:548:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L549:
        expect: true
        expr: '(^|\n)([^\n]+:549:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L550:
        expect: true
        expr: '(^|\n)([^\n]+:550:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L551:
        expect: true
        expr: '(^|\n)([^\n]+:551:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L552:
        expect: true
        expr: '(^|\n)([^\n]+:552:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L553:
        expect: true
        expr: '(^|\n)([^\n]+:553:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L554:
        expect: true
        expr: '(^|\n)([^\n]+:554:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L555:
        expect: true
        expr: '(^|\n)([^\n]+:555:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L556:
        expect: true
        expr: '(^|\n)([^\n]+:556:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L557:
        expect: true
        expr: '(^|\n)([^\n]+:557:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L558:
        expect: true
        expr: '(^|\n)([^\n]+:558:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L559:
        expect: true
        expr: '(^|\n)([^\n]+:559:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L560:
        expect: true
        expr: '(^|\n)([^\n]+:560:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L561:
        expect: true
        expr: '(^|\n)([^\n]+:561:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L562:
        expect: true
        expr: '(^|\n)([^\n]+:562:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L563:
        expect: true
        expr: '(^|\n)([^\n]+:563:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L564:
        expect: true
        expr: '(^|\n)([^\n]+:564:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L565:
        expect: true
        expr: '(^|\n)([^\n]+:565:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L566:
        expect: true
        expr: '(^|\n)([^\n]+:566:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L567:
        expect: true
        expr: '(^|\n)([^\n]+:567:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L568:
        expect: true
        expr: '(^|\n)([^\n]+:568:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L569:
        expect: true
        expr: '(^|\n)([^\n]+:569:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L570:
        expect: true
        expr: '(^|\n)([^\n]+:570:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L571:
        expect: true
        expr: '(^|\n)([^\n]+:571:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L572:
        expect: true
        expr: '(^|\n)([^\n]+:572:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L573:
        expect: true
        expr: '(^|\n)([^\n]+:573:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L574:
        expect: true
        expr: '(^|\n)([^\n]+:574:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L575:
        expect: true
        expr: '(^|\n)([^\n]+:575:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L576:
        expect: true
        expr: '(^|\n)([^\n]+:576:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L577:
        expect: true
        expr: '(^|\n)([^\n]+:577:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L578:
        expect: true
        expr: '(^|\n)([^\n]+:578:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L579:
        expect: true
        expr: '(^|\n)([^\n]+:579:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L580:
        expect: true
        expr: '(^|\n)([^\n]+:580:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L581:
        expect: true
        expr: '(^|\n)([^\n]+:581:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L582:
        expect: true
        expr: '(^|\n)([^\n]+:582:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L583:
        expect: true
        expr: '(^|\n)([^\n]+:583:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L584:
        expect: true
        expr: '(^|\n)([^\n]+:584:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L585:
        expect: true
        expr: '(^|\n)([^\n]+:585:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L586:
        expect: true
        expr: '(^|\n)([^\n]+:586:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L587:
        expect: true
        expr: '(^|\n)([^\n]+:587:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L588:
        expect: true
        expr: '(^|\n)([^\n]+:588:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L589:
        expect: true
        expr: '(^|\n)([^\n]+:589:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L590:
        expect: true
        expr: '(^|\n)([^\n]+:590:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L591:
        expect: true
        expr: '(^|\n)([^\n]+:591:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L592:
        expect: true
        expr: '(^|\n)([^\n]+:592:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L593:
        expect: true
        expr: '(^|\n)([^\n]+:593:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L594:
        expect: true
        expr: '(^|\n)([^\n]+:594:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L595:
        expect: true
        expr: '(^|\n)([^\n]+:595:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L596:
        expect: true
        expr: '(^|\n)([^\n]+:596:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L597:
        expect: true
        expr: '(^|\n)([^\n]+:597:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L598:
        expect: true
        expr: '(^|\n)([^\n]+:598:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L599:
        expect: true
        expr: '(^|\n)([^\n]+:599:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L600:
        expect: true
        expr: '(^|\n)([^\n]+:600:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L601:
        expect: true
        expr: '(^|\n)([^\n]+:601:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L602:
        expect: true
        expr: '(^|\n)([^\n]+:602:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L603:
        expect: true
        expr: '(^|\n)([^\n]+:603:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L604:
        expect: true
        expr: '(^|\n)([^\n]+:604:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L605:
        expect: true
        expr: '(^|\n)([^\n]+:605:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L606:
        expect: true
        expr: '(^|\n)([^\n]+:606:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L607:
        expect: true
        expr: '(^|\n)([^\n]+:607:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L608:
        expect: true
        expr: '(^|\n)([^\n]+:608:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L609:
        expect: true
        expr: '(^|\n)([^\n]+:609:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L610:
        expect: true
        expr: '(^|\n)([^\n]+:610:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L611:
        expect: true
        expr: '(^|\n)([^\n]+:611:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L612:
        expect: true
        expr: '(^|\n)([^\n]+:612:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L613:
        expect: true
        expr: '(^|\n)([^\n]+:613:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L614:
        expect: true
        expr: '(^|\n)([^\n]+:614:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L615:
        expect: true
        expr: '(^|\n)([^\n]+:615:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L616:
        expect: true
        expr: '(^|\n)([^\n]+:616:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L617:
        expect: true
        expr: '(^|\n)([^\n]+:617:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L618:
        expect: true
        expr: '(^|\n)([^\n]+:618:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L619:
        expect: true
        expr: '(^|\n)([^\n]+:619:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L620:
        expect: true
        expr: '(^|\n)([^\n]+:620:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L621:
        expect: true
        expr: '(^|\n)([^\n]+:621:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L622:
        expect: true
        expr: '(^|\n)([^\n]+:622:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L623:
        expect: true
        expr: '(^|\n)([^\n]+:623:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L624:
        expect: true
        expr: '(^|\n)([^\n]+:624:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L625:
        expect: true
        expr: '(^|\n)([^\n]+:625:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L626:
        expect: true
        expr: '(^|\n)([^\n]+:626:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L627:
        expect: true
        expr: '(^|\n)([^\n]+:627:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L628:
        expect: true
        expr: '(^|\n)([^\n]+:628:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L629:
        expect: true
        expr: '(^|\n)([^\n]+:629:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L630:
        expect: true
        expr: '(^|\n)([^\n]+:630:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L631:
        expect: true
        expr: '(^|\n)([^\n]+:631:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L632:
        expect: true
        expr: '(^|\n)([^\n]+:632:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L633:
        expect: true
        expr: '(^|\n)([^\n]+:633:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L634:
        expect: true
        expr: '(^|\n)([^\n]+:634:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L635:
        expect: true
        expr: '(^|\n)([^\n]+:635:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L636:
        expect: true
        expr: '(^|\n)([^\n]+:636:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L637:
        expect: true
        expr: '(^|\n)([^\n]+:637:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L638:
        expect: true
        expr: '(^|\n)([^\n]+:638:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L639:
        expect: true
        expr: '(^|\n)([^\n]+:639:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L640:
        expect: true
        expr: '(^|\n)([^\n]+:640:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L641:
        expect: true
        expr: '(^|\n)([^\n]+:641:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L642:
        expect: true
        expr: '(^|\n)([^\n]+:642:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L643:
        expect: true
        expr: '(^|\n)([^\n]+:643:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L644:
        expect: true
        expr: '(^|\n)([^\n]+:644:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L645:
        expect: true
        expr: '(^|\n)([^\n]+:645:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L646:
        expect: true
        expr: '(^|\n)([^\n]+:646:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L647:
        expect: true
        expr: '(^|\n)([^\n]+:647:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L648:
        expect: true
        expr: '(^|\n)([^\n]+:648:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L649:
        expect: true
        expr: '(^|\n)([^\n]+:649:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L650:
        expect: true
        expr: '(^|\n)([^\n]+:650:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L651:
        expect: true
        expr: '(^|\n)([^\n]+:651:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L652:
        expect: true
        expr: '(^|\n)([^\n]+:652:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L653:
        expect: true
        expr: '(^|\n)([^\n]+:653:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L654:
        expect: true
        expr: '(^|\n)([^\n]+:654:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L655:
        expect: true
        expr: '(^|\n)([^\n]+:655:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L656:
        expect: true
        expr: '(^|\n)([^\n]+:656:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L657:
        expect: true
        expr: '(^|\n)([^\n]+:657:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L658:
        expect: true
        expr: '(^|\n)([^\n]+:658:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L659:
        expect: true
        expr: '(^|\n)([^\n]+:659:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L660:
        expect: true
        expr: '(^|\n)([^\n]+:660:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L661:
        expect: true
        expr: '(^|\n)([^\n]+:661:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L662:
        expect: true
        expr: '(^|\n)([^\n]+:662:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L663:
        expect: true
        expr: '(^|\n)([^\n]+:663:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L664:
        expect: true
        expr: '(^|\n)([^\n]+:664:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L665:
        expect: true
        expr: '(^|\n)([^\n]+:665:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L666:
        expect: true
        expr: '(^|\n)([^\n]+:666:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_int128-types-1_2801:
  build:
    cflags: "-std=gnu++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/int128-types-1.c'
    sources:
      binary: int128-types-1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L100:
        expect: true
        expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L109:
        expect: true
        expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L117:
        expect: true
        expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L118:
        expect: true
        expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L119:
        expect: true
        expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L123:
        expect: true
        expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L126:
        expect: true
        expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+:129:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L130:
        expect: true
        expr: '(^|\n)([^\n]+:130:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L132:
        expect: true
        expr: '(^|\n)([^\n]+:132:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+:133:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L138:
        expect: true
        expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L139:
        expect: true
        expr: '(^|\n)([^\n]+:139:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L140:
        expect: true
        expr: '(^|\n)([^\n]+:140:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L141:
        expect: true
        expr: '(^|\n)([^\n]+:141:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+:142:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L145:
        expect: true
        expr: '(^|\n)([^\n]+:145:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L149:
        expect: true
        expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+:152:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+:154:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+:155:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L160:
        expect: true
        expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L161:
        expect: true
        expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L162:
        expect: true
        expr: '(^|\n)([^\n]+:162:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L163:
        expect: true
        expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+:166:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L167:
        expect: true
        expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L168:
        expect: true
        expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L169:
        expect: true
        expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L170:
        expect: true
        expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L171:
        expect: true
        expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+:172:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L173:
        expect: true
        expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L174:
        expect: true
        expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+:177:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L179:
        expect: true
        expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L181:
        expect: true
        expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L182:
        expect: true
        expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L185:
        expect: true
        expr: '(^|\n)([^\n]+:185:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L188:
        expect: true
        expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L189:
        expect: true
        expr: '(^|\n)([^\n]+:189:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L191:
        expect: true
        expr: '(^|\n)([^\n]+:191:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L192:
        expect: true
        expr: '(^|\n)([^\n]+:192:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L194:
        expect: true
        expr: '(^|\n)([^\n]+:194:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L195:
        expect: true
        expr: '(^|\n)([^\n]+:195:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+:196:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+:197:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L198:
        expect: true
        expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L199:
        expect: true
        expr: '(^|\n)([^\n]+:199:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L200:
        expect: true
        expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L201:
        expect: true
        expr: '(^|\n)([^\n]+:201:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L202:
        expect: true
        expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L203:
        expect: true
        expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L204:
        expect: true
        expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L205:
        expect: true
        expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L206:
        expect: true
        expr: '(^|\n)([^\n]+:206:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L207:
        expect: true
        expr: '(^|\n)([^\n]+:207:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L208:
        expect: true
        expr: '(^|\n)([^\n]+:208:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L209:
        expect: true
        expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L210:
        expect: true
        expr: '(^|\n)([^\n]+:210:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L211:
        expect: true
        expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L213:
        expect: true
        expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L216:
        expect: true
        expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L217:
        expect: true
        expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L218:
        expect: true
        expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L219:
        expect: true
        expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L220:
        expect: true
        expr: '(^|\n)([^\n]+:220:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L221:
        expect: true
        expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L222:
        expect: true
        expr: '(^|\n)([^\n]+:222:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L223:
        expect: true
        expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L224:
        expect: true
        expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L225:
        expect: true
        expr: '(^|\n)([^\n]+:225:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L226:
        expect: true
        expr: '(^|\n)([^\n]+:226:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L228:
        expect: true
        expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L229:
        expect: true
        expr: '(^|\n)([^\n]+:229:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L230:
        expect: true
        expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L231:
        expect: true
        expr: '(^|\n)([^\n]+:231:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L232:
        expect: true
        expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L233:
        expect: true
        expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L234:
        expect: true
        expr: '(^|\n)([^\n]+:234:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L235:
        expect: true
        expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L236:
        expect: true
        expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L237:
        expect: true
        expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L238:
        expect: true
        expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L239:
        expect: true
        expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L240:
        expect: true
        expr: '(^|\n)([^\n]+:240:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L241:
        expect: true
        expr: '(^|\n)([^\n]+:241:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L242:
        expect: true
        expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L243:
        expect: true
        expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L244:
        expect: true
        expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L245:
        expect: true
        expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L246:
        expect: true
        expr: '(^|\n)([^\n]+:246:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L247:
        expect: true
        expr: '(^|\n)([^\n]+:247:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L248:
        expect: true
        expr: '(^|\n)([^\n]+:248:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L249:
        expect: true
        expr: '(^|\n)([^\n]+:249:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L250:
        expect: true
        expr: '(^|\n)([^\n]+:250:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L251:
        expect: true
        expr: '(^|\n)([^\n]+:251:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L252:
        expect: true
        expr: '(^|\n)([^\n]+:252:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L253:
        expect: true
        expr: '(^|\n)([^\n]+:253:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L254:
        expect: true
        expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L255:
        expect: true
        expr: '(^|\n)([^\n]+:255:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L256:
        expect: true
        expr: '(^|\n)([^\n]+:256:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L257:
        expect: true
        expr: '(^|\n)([^\n]+:257:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L258:
        expect: true
        expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L259:
        expect: true
        expr: '(^|\n)([^\n]+:259:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L260:
        expect: true
        expr: '(^|\n)([^\n]+:260:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L261:
        expect: true
        expr: '(^|\n)([^\n]+:261:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L262:
        expect: true
        expr: '(^|\n)([^\n]+:262:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L263:
        expect: true
        expr: '(^|\n)([^\n]+:263:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L264:
        expect: true
        expr: '(^|\n)([^\n]+:264:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L265:
        expect: true
        expr: '(^|\n)([^\n]+:265:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L266:
        expect: true
        expr: '(^|\n)([^\n]+:266:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L267:
        expect: true
        expr: '(^|\n)([^\n]+:267:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L268:
        expect: true
        expr: '(^|\n)([^\n]+:268:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L269:
        expect: true
        expr: '(^|\n)([^\n]+:269:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L270:
        expect: true
        expr: '(^|\n)([^\n]+:270:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L271:
        expect: true
        expr: '(^|\n)([^\n]+:271:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L272:
        expect: true
        expr: '(^|\n)([^\n]+:272:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L273:
        expect: true
        expr: '(^|\n)([^\n]+:273:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L274:
        expect: true
        expr: '(^|\n)([^\n]+:274:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L275:
        expect: true
        expr: '(^|\n)([^\n]+:275:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L276:
        expect: true
        expr: '(^|\n)([^\n]+:276:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L277:
        expect: true
        expr: '(^|\n)([^\n]+:277:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L278:
        expect: true
        expr: '(^|\n)([^\n]+:278:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L279:
        expect: true
        expr: '(^|\n)([^\n]+:279:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L280:
        expect: true
        expr: '(^|\n)([^\n]+:280:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L281:
        expect: true
        expr: '(^|\n)([^\n]+:281:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L282:
        expect: true
        expr: '(^|\n)([^\n]+:282:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L283:
        expect: true
        expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L284:
        expect: true
        expr: '(^|\n)([^\n]+:284:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L285:
        expect: true
        expr: '(^|\n)([^\n]+:285:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L286:
        expect: true
        expr: '(^|\n)([^\n]+:286:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L287:
        expect: true
        expr: '(^|\n)([^\n]+:287:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L288:
        expect: true
        expr: '(^|\n)([^\n]+:288:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L289:
        expect: true
        expr: '(^|\n)([^\n]+:289:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L290:
        expect: true
        expr: '(^|\n)([^\n]+:290:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L291:
        expect: true
        expr: '(^|\n)([^\n]+:291:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L292:
        expect: true
        expr: '(^|\n)([^\n]+:292:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L293:
        expect: true
        expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L294:
        expect: true
        expr: '(^|\n)([^\n]+:294:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L295:
        expect: true
        expr: '(^|\n)([^\n]+:295:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L296:
        expect: true
        expr: '(^|\n)([^\n]+:296:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L297:
        expect: true
        expr: '(^|\n)([^\n]+:297:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L298:
        expect: true
        expr: '(^|\n)([^\n]+:298:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L299:
        expect: true
        expr: '(^|\n)([^\n]+:299:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L300:
        expect: true
        expr: '(^|\n)([^\n]+:300:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L301:
        expect: true
        expr: '(^|\n)([^\n]+:301:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L302:
        expect: true
        expr: '(^|\n)([^\n]+:302:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L303:
        expect: true
        expr: '(^|\n)([^\n]+:303:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L304:
        expect: true
        expr: '(^|\n)([^\n]+:304:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L305:
        expect: true
        expr: '(^|\n)([^\n]+:305:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L306:
        expect: true
        expr: '(^|\n)([^\n]+:306:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L307:
        expect: true
        expr: '(^|\n)([^\n]+:307:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L308:
        expect: true
        expr: '(^|\n)([^\n]+:308:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L309:
        expect: true
        expr: '(^|\n)([^\n]+:309:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L310:
        expect: true
        expr: '(^|\n)([^\n]+:310:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L311:
        expect: true
        expr: '(^|\n)([^\n]+:311:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L312:
        expect: true
        expr: '(^|\n)([^\n]+:312:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L313:
        expect: true
        expr: '(^|\n)([^\n]+:313:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L314:
        expect: true
        expr: '(^|\n)([^\n]+:314:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L315:
        expect: true
        expr: '(^|\n)([^\n]+:315:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L316:
        expect: true
        expr: '(^|\n)([^\n]+:316:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L317:
        expect: true
        expr: '(^|\n)([^\n]+:317:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L318:
        expect: true
        expr: '(^|\n)([^\n]+:318:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L319:
        expect: true
        expr: '(^|\n)([^\n]+:319:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L320:
        expect: true
        expr: '(^|\n)([^\n]+:320:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L321:
        expect: true
        expr: '(^|\n)([^\n]+:321:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L322:
        expect: true
        expr: '(^|\n)([^\n]+:322:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L323:
        expect: true
        expr: '(^|\n)([^\n]+:323:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L324:
        expect: true
        expr: '(^|\n)([^\n]+:324:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L325:
        expect: true
        expr: '(^|\n)([^\n]+:325:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L326:
        expect: true
        expr: '(^|\n)([^\n]+:326:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L327:
        expect: true
        expr: '(^|\n)([^\n]+:327:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L328:
        expect: true
        expr: '(^|\n)([^\n]+:328:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L329:
        expect: true
        expr: '(^|\n)([^\n]+:329:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L330:
        expect: true
        expr: '(^|\n)([^\n]+:330:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L331:
        expect: true
        expr: '(^|\n)([^\n]+:331:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L332:
        expect: true
        expr: '(^|\n)([^\n]+:332:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L333:
        expect: true
        expr: '(^|\n)([^\n]+:333:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L334:
        expect: true
        expr: '(^|\n)([^\n]+:334:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L335:
        expect: true
        expr: '(^|\n)([^\n]+:335:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L336:
        expect: true
        expr: '(^|\n)([^\n]+:336:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L337:
        expect: true
        expr: '(^|\n)([^\n]+:337:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L338:
        expect: true
        expr: '(^|\n)([^\n]+:338:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L339:
        expect: true
        expr: '(^|\n)([^\n]+:339:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L340:
        expect: true
        expr: '(^|\n)([^\n]+:340:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L341:
        expect: true
        expr: '(^|\n)([^\n]+:341:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L342:
        expect: true
        expr: '(^|\n)([^\n]+:342:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L343:
        expect: true
        expr: '(^|\n)([^\n]+:343:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L344:
        expect: true
        expr: '(^|\n)([^\n]+:344:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L345:
        expect: true
        expr: '(^|\n)([^\n]+:345:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L346:
        expect: true
        expr: '(^|\n)([^\n]+:346:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L347:
        expect: true
        expr: '(^|\n)([^\n]+:347:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L348:
        expect: true
        expr: '(^|\n)([^\n]+:348:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L349:
        expect: true
        expr: '(^|\n)([^\n]+:349:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L350:
        expect: true
        expr: '(^|\n)([^\n]+:350:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L351:
        expect: true
        expr: '(^|\n)([^\n]+:351:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L352:
        expect: true
        expr: '(^|\n)([^\n]+:352:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L353:
        expect: true
        expr: '(^|\n)([^\n]+:353:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L354:
        expect: true
        expr: '(^|\n)([^\n]+:354:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L355:
        expect: true
        expr: '(^|\n)([^\n]+:355:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L356:
        expect: true
        expr: '(^|\n)([^\n]+:356:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L357:
        expect: true
        expr: '(^|\n)([^\n]+:357:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L358:
        expect: true
        expr: '(^|\n)([^\n]+:358:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L359:
        expect: true
        expr: '(^|\n)([^\n]+:359:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L360:
        expect: true
        expr: '(^|\n)([^\n]+:360:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L361:
        expect: true
        expr: '(^|\n)([^\n]+:361:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L362:
        expect: true
        expr: '(^|\n)([^\n]+:362:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L363:
        expect: true
        expr: '(^|\n)([^\n]+:363:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L364:
        expect: true
        expr: '(^|\n)([^\n]+:364:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L365:
        expect: true
        expr: '(^|\n)([^\n]+:365:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L366:
        expect: true
        expr: '(^|\n)([^\n]+:366:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L367:
        expect: true
        expr: '(^|\n)([^\n]+:367:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L368:
        expect: true
        expr: '(^|\n)([^\n]+:368:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L369:
        expect: true
        expr: '(^|\n)([^\n]+:369:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L370:
        expect: true
        expr: '(^|\n)([^\n]+:370:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L371:
        expect: true
        expr: '(^|\n)([^\n]+:371:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L372:
        expect: true
        expr: '(^|\n)([^\n]+:372:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L373:
        expect: true
        expr: '(^|\n)([^\n]+:373:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L374:
        expect: true
        expr: '(^|\n)([^\n]+:374:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L375:
        expect: true
        expr: '(^|\n)([^\n]+:375:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L376:
        expect: true
        expr: '(^|\n)([^\n]+:376:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L377:
        expect: true
        expr: '(^|\n)([^\n]+:377:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L378:
        expect: true
        expr: '(^|\n)([^\n]+:378:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L379:
        expect: true
        expr: '(^|\n)([^\n]+:379:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L380:
        expect: true
        expr: '(^|\n)([^\n]+:380:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L381:
        expect: true
        expr: '(^|\n)([^\n]+:381:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L382:
        expect: true
        expr: '(^|\n)([^\n]+:382:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L383:
        expect: true
        expr: '(^|\n)([^\n]+:383:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L384:
        expect: true
        expr: '(^|\n)([^\n]+:384:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L385:
        expect: true
        expr: '(^|\n)([^\n]+:385:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L386:
        expect: true
        expr: '(^|\n)([^\n]+:386:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L387:
        expect: true
        expr: '(^|\n)([^\n]+:387:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L388:
        expect: true
        expr: '(^|\n)([^\n]+:388:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L389:
        expect: true
        expr: '(^|\n)([^\n]+:389:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L390:
        expect: true
        expr: '(^|\n)([^\n]+:390:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L391:
        expect: true
        expr: '(^|\n)([^\n]+:391:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L392:
        expect: true
        expr: '(^|\n)([^\n]+:392:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L393:
        expect: true
        expr: '(^|\n)([^\n]+:393:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L394:
        expect: true
        expr: '(^|\n)([^\n]+:394:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L395:
        expect: true
        expr: '(^|\n)([^\n]+:395:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L396:
        expect: true
        expr: '(^|\n)([^\n]+:396:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L397:
        expect: true
        expr: '(^|\n)([^\n]+:397:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L398:
        expect: true
        expr: '(^|\n)([^\n]+:398:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L399:
        expect: true
        expr: '(^|\n)([^\n]+:399:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L400:
        expect: true
        expr: '(^|\n)([^\n]+:400:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L401:
        expect: true
        expr: '(^|\n)([^\n]+:401:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L402:
        expect: true
        expr: '(^|\n)([^\n]+:402:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L403:
        expect: true
        expr: '(^|\n)([^\n]+:403:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L404:
        expect: true
        expr: '(^|\n)([^\n]+:404:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L405:
        expect: true
        expr: '(^|\n)([^\n]+:405:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L406:
        expect: true
        expr: '(^|\n)([^\n]+:406:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L407:
        expect: true
        expr: '(^|\n)([^\n]+:407:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L408:
        expect: true
        expr: '(^|\n)([^\n]+:408:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L409:
        expect: true
        expr: '(^|\n)([^\n]+:409:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L410:
        expect: true
        expr: '(^|\n)([^\n]+:410:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L411:
        expect: true
        expr: '(^|\n)([^\n]+:411:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L412:
        expect: true
        expr: '(^|\n)([^\n]+:412:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L413:
        expect: true
        expr: '(^|\n)([^\n]+:413:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L414:
        expect: true
        expr: '(^|\n)([^\n]+:414:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L415:
        expect: true
        expr: '(^|\n)([^\n]+:415:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L416:
        expect: true
        expr: '(^|\n)([^\n]+:416:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L417:
        expect: true
        expr: '(^|\n)([^\n]+:417:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L418:
        expect: true
        expr: '(^|\n)([^\n]+:418:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L419:
        expect: true
        expr: '(^|\n)([^\n]+:419:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L420:
        expect: true
        expr: '(^|\n)([^\n]+:420:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L421:
        expect: true
        expr: '(^|\n)([^\n]+:421:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L422:
        expect: true
        expr: '(^|\n)([^\n]+:422:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L423:
        expect: true
        expr: '(^|\n)([^\n]+:423:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L424:
        expect: true
        expr: '(^|\n)([^\n]+:424:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L425:
        expect: true
        expr: '(^|\n)([^\n]+:425:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L426:
        expect: true
        expr: '(^|\n)([^\n]+:426:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L427:
        expect: true
        expr: '(^|\n)([^\n]+:427:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L428:
        expect: true
        expr: '(^|\n)([^\n]+:428:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L429:
        expect: true
        expr: '(^|\n)([^\n]+:429:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L430:
        expect: true
        expr: '(^|\n)([^\n]+:430:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L431:
        expect: true
        expr: '(^|\n)([^\n]+:431:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L432:
        expect: true
        expr: '(^|\n)([^\n]+:432:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L433:
        expect: true
        expr: '(^|\n)([^\n]+:433:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L434:
        expect: true
        expr: '(^|\n)([^\n]+:434:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L435:
        expect: true
        expr: '(^|\n)([^\n]+:435:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L436:
        expect: true
        expr: '(^|\n)([^\n]+:436:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L437:
        expect: true
        expr: '(^|\n)([^\n]+:437:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L438:
        expect: true
        expr: '(^|\n)([^\n]+:438:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L439:
        expect: true
        expr: '(^|\n)([^\n]+:439:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L440:
        expect: true
        expr: '(^|\n)([^\n]+:440:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L441:
        expect: true
        expr: '(^|\n)([^\n]+:441:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L442:
        expect: true
        expr: '(^|\n)([^\n]+:442:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L443:
        expect: true
        expr: '(^|\n)([^\n]+:443:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L444:
        expect: true
        expr: '(^|\n)([^\n]+:444:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L445:
        expect: true
        expr: '(^|\n)([^\n]+:445:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L446:
        expect: true
        expr: '(^|\n)([^\n]+:446:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L447:
        expect: true
        expr: '(^|\n)([^\n]+:447:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L448:
        expect: true
        expr: '(^|\n)([^\n]+:448:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L449:
        expect: true
        expr: '(^|\n)([^\n]+:449:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L450:
        expect: true
        expr: '(^|\n)([^\n]+:450:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L451:
        expect: true
        expr: '(^|\n)([^\n]+:451:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L452:
        expect: true
        expr: '(^|\n)([^\n]+:452:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L453:
        expect: true
        expr: '(^|\n)([^\n]+:453:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L454:
        expect: true
        expr: '(^|\n)([^\n]+:454:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L455:
        expect: true
        expr: '(^|\n)([^\n]+:455:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L456:
        expect: true
        expr: '(^|\n)([^\n]+:456:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L457:
        expect: true
        expr: '(^|\n)([^\n]+:457:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L458:
        expect: true
        expr: '(^|\n)([^\n]+:458:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L459:
        expect: true
        expr: '(^|\n)([^\n]+:459:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L460:
        expect: true
        expr: '(^|\n)([^\n]+:460:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L461:
        expect: true
        expr: '(^|\n)([^\n]+:461:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L462:
        expect: true
        expr: '(^|\n)([^\n]+:462:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L463:
        expect: true
        expr: '(^|\n)([^\n]+:463:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L464:
        expect: true
        expr: '(^|\n)([^\n]+:464:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L465:
        expect: true
        expr: '(^|\n)([^\n]+:465:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L466:
        expect: true
        expr: '(^|\n)([^\n]+:466:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L467:
        expect: true
        expr: '(^|\n)([^\n]+:467:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L468:
        expect: true
        expr: '(^|\n)([^\n]+:468:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L469:
        expect: true
        expr: '(^|\n)([^\n]+:469:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L470:
        expect: true
        expr: '(^|\n)([^\n]+:470:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L471:
        expect: true
        expr: '(^|\n)([^\n]+:471:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L472:
        expect: true
        expr: '(^|\n)([^\n]+:472:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L473:
        expect: true
        expr: '(^|\n)([^\n]+:473:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L474:
        expect: true
        expr: '(^|\n)([^\n]+:474:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L475:
        expect: true
        expr: '(^|\n)([^\n]+:475:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L476:
        expect: true
        expr: '(^|\n)([^\n]+:476:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L477:
        expect: true
        expr: '(^|\n)([^\n]+:477:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L478:
        expect: true
        expr: '(^|\n)([^\n]+:478:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L479:
        expect: true
        expr: '(^|\n)([^\n]+:479:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L480:
        expect: true
        expr: '(^|\n)([^\n]+:480:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L481:
        expect: true
        expr: '(^|\n)([^\n]+:481:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L482:
        expect: true
        expr: '(^|\n)([^\n]+:482:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L483:
        expect: true
        expr: '(^|\n)([^\n]+:483:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L484:
        expect: true
        expr: '(^|\n)([^\n]+:484:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L485:
        expect: true
        expr: '(^|\n)([^\n]+:485:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L486:
        expect: true
        expr: '(^|\n)([^\n]+:486:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L487:
        expect: true
        expr: '(^|\n)([^\n]+:487:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L488:
        expect: true
        expr: '(^|\n)([^\n]+:488:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L489:
        expect: true
        expr: '(^|\n)([^\n]+:489:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L490:
        expect: true
        expr: '(^|\n)([^\n]+:490:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L491:
        expect: true
        expr: '(^|\n)([^\n]+:491:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L492:
        expect: true
        expr: '(^|\n)([^\n]+:492:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L493:
        expect: true
        expr: '(^|\n)([^\n]+:493:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L494:
        expect: true
        expr: '(^|\n)([^\n]+:494:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L495:
        expect: true
        expr: '(^|\n)([^\n]+:495:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L496:
        expect: true
        expr: '(^|\n)([^\n]+:496:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L497:
        expect: true
        expr: '(^|\n)([^\n]+:497:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L498:
        expect: true
        expr: '(^|\n)([^\n]+:498:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L499:
        expect: true
        expr: '(^|\n)([^\n]+:499:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L500:
        expect: true
        expr: '(^|\n)([^\n]+:500:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L501:
        expect: true
        expr: '(^|\n)([^\n]+:501:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L502:
        expect: true
        expr: '(^|\n)([^\n]+:502:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L503:
        expect: true
        expr: '(^|\n)([^\n]+:503:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L504:
        expect: true
        expr: '(^|\n)([^\n]+:504:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L505:
        expect: true
        expr: '(^|\n)([^\n]+:505:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L506:
        expect: true
        expr: '(^|\n)([^\n]+:506:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L507:
        expect: true
        expr: '(^|\n)([^\n]+:507:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L508:
        expect: true
        expr: '(^|\n)([^\n]+:508:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L509:
        expect: true
        expr: '(^|\n)([^\n]+:509:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L510:
        expect: true
        expr: '(^|\n)([^\n]+:510:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L511:
        expect: true
        expr: '(^|\n)([^\n]+:511:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L512:
        expect: true
        expr: '(^|\n)([^\n]+:512:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L513:
        expect: true
        expr: '(^|\n)([^\n]+:513:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L514:
        expect: true
        expr: '(^|\n)([^\n]+:514:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L515:
        expect: true
        expr: '(^|\n)([^\n]+:515:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L516:
        expect: true
        expr: '(^|\n)([^\n]+:516:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L517:
        expect: true
        expr: '(^|\n)([^\n]+:517:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L518:
        expect: true
        expr: '(^|\n)([^\n]+:518:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L519:
        expect: true
        expr: '(^|\n)([^\n]+:519:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L520:
        expect: true
        expr: '(^|\n)([^\n]+:520:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L521:
        expect: true
        expr: '(^|\n)([^\n]+:521:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L522:
        expect: true
        expr: '(^|\n)([^\n]+:522:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L523:
        expect: true
        expr: '(^|\n)([^\n]+:523:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L524:
        expect: true
        expr: '(^|\n)([^\n]+:524:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L525:
        expect: true
        expr: '(^|\n)([^\n]+:525:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L526:
        expect: true
        expr: '(^|\n)([^\n]+:526:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L527:
        expect: true
        expr: '(^|\n)([^\n]+:527:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L528:
        expect: true
        expr: '(^|\n)([^\n]+:528:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L529:
        expect: true
        expr: '(^|\n)([^\n]+:529:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L530:
        expect: true
        expr: '(^|\n)([^\n]+:530:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L531:
        expect: true
        expr: '(^|\n)([^\n]+:531:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L532:
        expect: true
        expr: '(^|\n)([^\n]+:532:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L533:
        expect: true
        expr: '(^|\n)([^\n]+:533:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L534:
        expect: true
        expr: '(^|\n)([^\n]+:534:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L535:
        expect: true
        expr: '(^|\n)([^\n]+:535:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L536:
        expect: true
        expr: '(^|\n)([^\n]+:536:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L537:
        expect: true
        expr: '(^|\n)([^\n]+:537:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L538:
        expect: true
        expr: '(^|\n)([^\n]+:538:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L539:
        expect: true
        expr: '(^|\n)([^\n]+:539:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L540:
        expect: true
        expr: '(^|\n)([^\n]+:540:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L541:
        expect: true
        expr: '(^|\n)([^\n]+:541:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L542:
        expect: true
        expr: '(^|\n)([^\n]+:542:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L543:
        expect: true
        expr: '(^|\n)([^\n]+:543:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L544:
        expect: true
        expr: '(^|\n)([^\n]+:544:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L545:
        expect: true
        expr: '(^|\n)([^\n]+:545:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L546:
        expect: true
        expr: '(^|\n)([^\n]+:546:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L547:
        expect: true
        expr: '(^|\n)([^\n]+:547:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L548:
        expect: true
        expr: '(^|\n)([^\n]+:548:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L549:
        expect: true
        expr: '(^|\n)([^\n]+:549:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L550:
        expect: true
        expr: '(^|\n)([^\n]+:550:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L551:
        expect: true
        expr: '(^|\n)([^\n]+:551:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L552:
        expect: true
        expr: '(^|\n)([^\n]+:552:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L553:
        expect: true
        expr: '(^|\n)([^\n]+:553:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L554:
        expect: true
        expr: '(^|\n)([^\n]+:554:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L555:
        expect: true
        expr: '(^|\n)([^\n]+:555:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L556:
        expect: true
        expr: '(^|\n)([^\n]+:556:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L557:
        expect: true
        expr: '(^|\n)([^\n]+:557:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L558:
        expect: true
        expr: '(^|\n)([^\n]+:558:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L559:
        expect: true
        expr: '(^|\n)([^\n]+:559:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L560:
        expect: true
        expr: '(^|\n)([^\n]+:560:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L561:
        expect: true
        expr: '(^|\n)([^\n]+:561:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L562:
        expect: true
        expr: '(^|\n)([^\n]+:562:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L563:
        expect: true
        expr: '(^|\n)([^\n]+:563:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L564:
        expect: true
        expr: '(^|\n)([^\n]+:564:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L565:
        expect: true
        expr: '(^|\n)([^\n]+:565:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L566:
        expect: true
        expr: '(^|\n)([^\n]+:566:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L567:
        expect: true
        expr: '(^|\n)([^\n]+:567:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L568:
        expect: true
        expr: '(^|\n)([^\n]+:568:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L569:
        expect: true
        expr: '(^|\n)([^\n]+:569:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L570:
        expect: true
        expr: '(^|\n)([^\n]+:570:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L571:
        expect: true
        expr: '(^|\n)([^\n]+:571:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L572:
        expect: true
        expr: '(^|\n)([^\n]+:572:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L573:
        expect: true
        expr: '(^|\n)([^\n]+:573:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L574:
        expect: true
        expr: '(^|\n)([^\n]+:574:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L575:
        expect: true
        expr: '(^|\n)([^\n]+:575:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L576:
        expect: true
        expr: '(^|\n)([^\n]+:576:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L577:
        expect: true
        expr: '(^|\n)([^\n]+:577:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L578:
        expect: true
        expr: '(^|\n)([^\n]+:578:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L579:
        expect: true
        expr: '(^|\n)([^\n]+:579:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L580:
        expect: true
        expr: '(^|\n)([^\n]+:580:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L581:
        expect: true
        expr: '(^|\n)([^\n]+:581:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L582:
        expect: true
        expr: '(^|\n)([^\n]+:582:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L583:
        expect: true
        expr: '(^|\n)([^\n]+:583:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L584:
        expect: true
        expr: '(^|\n)([^\n]+:584:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L585:
        expect: true
        expr: '(^|\n)([^\n]+:585:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L586:
        expect: true
        expr: '(^|\n)([^\n]+:586:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L587:
        expect: true
        expr: '(^|\n)([^\n]+:587:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L588:
        expect: true
        expr: '(^|\n)([^\n]+:588:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L589:
        expect: true
        expr: '(^|\n)([^\n]+:589:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L590:
        expect: true
        expr: '(^|\n)([^\n]+:590:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L591:
        expect: true
        expr: '(^|\n)([^\n]+:591:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L592:
        expect: true
        expr: '(^|\n)([^\n]+:592:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L593:
        expect: true
        expr: '(^|\n)([^\n]+:593:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L594:
        expect: true
        expr: '(^|\n)([^\n]+:594:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L595:
        expect: true
        expr: '(^|\n)([^\n]+:595:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L596:
        expect: true
        expr: '(^|\n)([^\n]+:596:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L597:
        expect: true
        expr: '(^|\n)([^\n]+:597:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L598:
        expect: true
        expr: '(^|\n)([^\n]+:598:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L599:
        expect: true
        expr: '(^|\n)([^\n]+:599:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L600:
        expect: true
        expr: '(^|\n)([^\n]+:600:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L601:
        expect: true
        expr: '(^|\n)([^\n]+:601:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L602:
        expect: true
        expr: '(^|\n)([^\n]+:602:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L603:
        expect: true
        expr: '(^|\n)([^\n]+:603:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L604:
        expect: true
        expr: '(^|\n)([^\n]+:604:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L605:
        expect: true
        expr: '(^|\n)([^\n]+:605:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L606:
        expect: true
        expr: '(^|\n)([^\n]+:606:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L607:
        expect: true
        expr: '(^|\n)([^\n]+:607:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L608:
        expect: true
        expr: '(^|\n)([^\n]+:608:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L609:
        expect: true
        expr: '(^|\n)([^\n]+:609:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L610:
        expect: true
        expr: '(^|\n)([^\n]+:610:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L611:
        expect: true
        expr: '(^|\n)([^\n]+:611:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L612:
        expect: true
        expr: '(^|\n)([^\n]+:612:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L613:
        expect: true
        expr: '(^|\n)([^\n]+:613:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L614:
        expect: true
        expr: '(^|\n)([^\n]+:614:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L615:
        expect: true
        expr: '(^|\n)([^\n]+:615:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L616:
        expect: true
        expr: '(^|\n)([^\n]+:616:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L617:
        expect: true
        expr: '(^|\n)([^\n]+:617:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L618:
        expect: true
        expr: '(^|\n)([^\n]+:618:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L619:
        expect: true
        expr: '(^|\n)([^\n]+:619:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L620:
        expect: true
        expr: '(^|\n)([^\n]+:620:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L621:
        expect: true
        expr: '(^|\n)([^\n]+:621:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L622:
        expect: true
        expr: '(^|\n)([^\n]+:622:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L623:
        expect: true
        expr: '(^|\n)([^\n]+:623:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L624:
        expect: true
        expr: '(^|\n)([^\n]+:624:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L625:
        expect: true
        expr: '(^|\n)([^\n]+:625:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L626:
        expect: true
        expr: '(^|\n)([^\n]+:626:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L627:
        expect: true
        expr: '(^|\n)([^\n]+:627:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L628:
        expect: true
        expr: '(^|\n)([^\n]+:628:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L629:
        expect: true
        expr: '(^|\n)([^\n]+:629:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L630:
        expect: true
        expr: '(^|\n)([^\n]+:630:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L631:
        expect: true
        expr: '(^|\n)([^\n]+:631:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L632:
        expect: true
        expr: '(^|\n)([^\n]+:632:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L633:
        expect: true
        expr: '(^|\n)([^\n]+:633:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L634:
        expect: true
        expr: '(^|\n)([^\n]+:634:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L635:
        expect: true
        expr: '(^|\n)([^\n]+:635:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L636:
        expect: true
        expr: '(^|\n)([^\n]+:636:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L637:
        expect: true
        expr: '(^|\n)([^\n]+:637:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L638:
        expect: true
        expr: '(^|\n)([^\n]+:638:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L639:
        expect: true
        expr: '(^|\n)([^\n]+:639:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L640:
        expect: true
        expr: '(^|\n)([^\n]+:640:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L641:
        expect: true
        expr: '(^|\n)([^\n]+:641:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L642:
        expect: true
        expr: '(^|\n)([^\n]+:642:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L643:
        expect: true
        expr: '(^|\n)([^\n]+:643:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L644:
        expect: true
        expr: '(^|\n)([^\n]+:644:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L645:
        expect: true
        expr: '(^|\n)([^\n]+:645:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L646:
        expect: true
        expr: '(^|\n)([^\n]+:646:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L647:
        expect: true
        expr: '(^|\n)([^\n]+:647:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L648:
        expect: true
        expr: '(^|\n)([^\n]+:648:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L649:
        expect: true
        expr: '(^|\n)([^\n]+:649:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L650:
        expect: true
        expr: '(^|\n)([^\n]+:650:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L651:
        expect: true
        expr: '(^|\n)([^\n]+:651:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L652:
        expect: true
        expr: '(^|\n)([^\n]+:652:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L653:
        expect: true
        expr: '(^|\n)([^\n]+:653:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L654:
        expect: true
        expr: '(^|\n)([^\n]+:654:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L655:
        expect: true
        expr: '(^|\n)([^\n]+:655:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L656:
        expect: true
        expr: '(^|\n)([^\n]+:656:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L657:
        expect: true
        expr: '(^|\n)([^\n]+:657:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L658:
        expect: true
        expr: '(^|\n)([^\n]+:658:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L659:
        expect: true
        expr: '(^|\n)([^\n]+:659:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L660:
        expect: true
        expr: '(^|\n)([^\n]+:660:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L661:
        expect: true
        expr: '(^|\n)([^\n]+:661:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L662:
        expect: true
        expr: '(^|\n)([^\n]+:662:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L663:
        expect: true
        expr: '(^|\n)([^\n]+:663:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L664:
        expect: true
        expr: '(^|\n)([^\n]+:664:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L665:
        expect: true
        expr: '(^|\n)([^\n]+:665:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L666:
        expect: true
        expr: '(^|\n)([^\n]+:666:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_int128-types-1_2802:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/int128-types-1.c'
    sources:
      binary: int128-types-1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L100:
        expect: true
        expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L109:
        expect: true
        expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L117:
        expect: true
        expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L118:
        expect: true
        expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L119:
        expect: true
        expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L123:
        expect: true
        expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L126:
        expect: true
        expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+:129:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L130:
        expect: true
        expr: '(^|\n)([^\n]+:130:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L132:
        expect: true
        expr: '(^|\n)([^\n]+:132:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+:133:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L138:
        expect: true
        expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L139:
        expect: true
        expr: '(^|\n)([^\n]+:139:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L140:
        expect: true
        expr: '(^|\n)([^\n]+:140:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L141:
        expect: true
        expr: '(^|\n)([^\n]+:141:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+:142:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L145:
        expect: true
        expr: '(^|\n)([^\n]+:145:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L149:
        expect: true
        expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+:152:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+:154:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+:155:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L160:
        expect: true
        expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L161:
        expect: true
        expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L162:
        expect: true
        expr: '(^|\n)([^\n]+:162:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L163:
        expect: true
        expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+:166:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L167:
        expect: true
        expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L168:
        expect: true
        expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L169:
        expect: true
        expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L170:
        expect: true
        expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L171:
        expect: true
        expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+:172:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L173:
        expect: true
        expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L174:
        expect: true
        expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+:177:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L179:
        expect: true
        expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L181:
        expect: true
        expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L182:
        expect: true
        expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L185:
        expect: true
        expr: '(^|\n)([^\n]+:185:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L188:
        expect: true
        expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L189:
        expect: true
        expr: '(^|\n)([^\n]+:189:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L191:
        expect: true
        expr: '(^|\n)([^\n]+:191:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L192:
        expect: true
        expr: '(^|\n)([^\n]+:192:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L194:
        expect: true
        expr: '(^|\n)([^\n]+:194:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L195:
        expect: true
        expr: '(^|\n)([^\n]+:195:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+:196:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+:197:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L198:
        expect: true
        expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L199:
        expect: true
        expr: '(^|\n)([^\n]+:199:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L200:
        expect: true
        expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L201:
        expect: true
        expr: '(^|\n)([^\n]+:201:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L202:
        expect: true
        expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L203:
        expect: true
        expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L204:
        expect: true
        expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L205:
        expect: true
        expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L206:
        expect: true
        expr: '(^|\n)([^\n]+:206:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L207:
        expect: true
        expr: '(^|\n)([^\n]+:207:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L208:
        expect: true
        expr: '(^|\n)([^\n]+:208:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L209:
        expect: true
        expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L210:
        expect: true
        expr: '(^|\n)([^\n]+:210:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L211:
        expect: true
        expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L213:
        expect: true
        expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L216:
        expect: true
        expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L217:
        expect: true
        expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L218:
        expect: true
        expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L219:
        expect: true
        expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L220:
        expect: true
        expr: '(^|\n)([^\n]+:220:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L221:
        expect: true
        expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L222:
        expect: true
        expr: '(^|\n)([^\n]+:222:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L223:
        expect: true
        expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L224:
        expect: true
        expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L225:
        expect: true
        expr: '(^|\n)([^\n]+:225:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L226:
        expect: true
        expr: '(^|\n)([^\n]+:226:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L228:
        expect: true
        expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L229:
        expect: true
        expr: '(^|\n)([^\n]+:229:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L230:
        expect: true
        expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L231:
        expect: true
        expr: '(^|\n)([^\n]+:231:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L232:
        expect: true
        expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L233:
        expect: true
        expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L234:
        expect: true
        expr: '(^|\n)([^\n]+:234:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L235:
        expect: true
        expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L236:
        expect: true
        expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L237:
        expect: true
        expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L238:
        expect: true
        expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L239:
        expect: true
        expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L240:
        expect: true
        expr: '(^|\n)([^\n]+:240:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L241:
        expect: true
        expr: '(^|\n)([^\n]+:241:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L242:
        expect: true
        expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L243:
        expect: true
        expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L244:
        expect: true
        expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L245:
        expect: true
        expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L246:
        expect: true
        expr: '(^|\n)([^\n]+:246:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L247:
        expect: true
        expr: '(^|\n)([^\n]+:247:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L248:
        expect: true
        expr: '(^|\n)([^\n]+:248:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L249:
        expect: true
        expr: '(^|\n)([^\n]+:249:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L250:
        expect: true
        expr: '(^|\n)([^\n]+:250:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L251:
        expect: true
        expr: '(^|\n)([^\n]+:251:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L252:
        expect: true
        expr: '(^|\n)([^\n]+:252:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L253:
        expect: true
        expr: '(^|\n)([^\n]+:253:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L254:
        expect: true
        expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L255:
        expect: true
        expr: '(^|\n)([^\n]+:255:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L256:
        expect: true
        expr: '(^|\n)([^\n]+:256:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L257:
        expect: true
        expr: '(^|\n)([^\n]+:257:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L258:
        expect: true
        expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L259:
        expect: true
        expr: '(^|\n)([^\n]+:259:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L260:
        expect: true
        expr: '(^|\n)([^\n]+:260:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L261:
        expect: true
        expr: '(^|\n)([^\n]+:261:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L262:
        expect: true
        expr: '(^|\n)([^\n]+:262:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L263:
        expect: true
        expr: '(^|\n)([^\n]+:263:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L264:
        expect: true
        expr: '(^|\n)([^\n]+:264:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L265:
        expect: true
        expr: '(^|\n)([^\n]+:265:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L266:
        expect: true
        expr: '(^|\n)([^\n]+:266:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L267:
        expect: true
        expr: '(^|\n)([^\n]+:267:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L268:
        expect: true
        expr: '(^|\n)([^\n]+:268:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L269:
        expect: true
        expr: '(^|\n)([^\n]+:269:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L270:
        expect: true
        expr: '(^|\n)([^\n]+:270:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L271:
        expect: true
        expr: '(^|\n)([^\n]+:271:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L272:
        expect: true
        expr: '(^|\n)([^\n]+:272:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L273:
        expect: true
        expr: '(^|\n)([^\n]+:273:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L274:
        expect: true
        expr: '(^|\n)([^\n]+:274:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L275:
        expect: true
        expr: '(^|\n)([^\n]+:275:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L276:
        expect: true
        expr: '(^|\n)([^\n]+:276:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L277:
        expect: true
        expr: '(^|\n)([^\n]+:277:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L278:
        expect: true
        expr: '(^|\n)([^\n]+:278:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L279:
        expect: true
        expr: '(^|\n)([^\n]+:279:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L280:
        expect: true
        expr: '(^|\n)([^\n]+:280:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L281:
        expect: true
        expr: '(^|\n)([^\n]+:281:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L282:
        expect: true
        expr: '(^|\n)([^\n]+:282:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L283:
        expect: true
        expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L284:
        expect: true
        expr: '(^|\n)([^\n]+:284:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L285:
        expect: true
        expr: '(^|\n)([^\n]+:285:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L286:
        expect: true
        expr: '(^|\n)([^\n]+:286:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L287:
        expect: true
        expr: '(^|\n)([^\n]+:287:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L288:
        expect: true
        expr: '(^|\n)([^\n]+:288:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L289:
        expect: true
        expr: '(^|\n)([^\n]+:289:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L290:
        expect: true
        expr: '(^|\n)([^\n]+:290:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L291:
        expect: true
        expr: '(^|\n)([^\n]+:291:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L292:
        expect: true
        expr: '(^|\n)([^\n]+:292:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L293:
        expect: true
        expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L294:
        expect: true
        expr: '(^|\n)([^\n]+:294:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L295:
        expect: true
        expr: '(^|\n)([^\n]+:295:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L296:
        expect: true
        expr: '(^|\n)([^\n]+:296:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L297:
        expect: true
        expr: '(^|\n)([^\n]+:297:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L298:
        expect: true
        expr: '(^|\n)([^\n]+:298:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L299:
        expect: true
        expr: '(^|\n)([^\n]+:299:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L300:
        expect: true
        expr: '(^|\n)([^\n]+:300:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L301:
        expect: true
        expr: '(^|\n)([^\n]+:301:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L302:
        expect: true
        expr: '(^|\n)([^\n]+:302:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L303:
        expect: true
        expr: '(^|\n)([^\n]+:303:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L304:
        expect: true
        expr: '(^|\n)([^\n]+:304:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L305:
        expect: true
        expr: '(^|\n)([^\n]+:305:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L306:
        expect: true
        expr: '(^|\n)([^\n]+:306:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L307:
        expect: true
        expr: '(^|\n)([^\n]+:307:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L308:
        expect: true
        expr: '(^|\n)([^\n]+:308:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L309:
        expect: true
        expr: '(^|\n)([^\n]+:309:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L310:
        expect: true
        expr: '(^|\n)([^\n]+:310:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L311:
        expect: true
        expr: '(^|\n)([^\n]+:311:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L312:
        expect: true
        expr: '(^|\n)([^\n]+:312:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L313:
        expect: true
        expr: '(^|\n)([^\n]+:313:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L314:
        expect: true
        expr: '(^|\n)([^\n]+:314:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L315:
        expect: true
        expr: '(^|\n)([^\n]+:315:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L316:
        expect: true
        expr: '(^|\n)([^\n]+:316:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L317:
        expect: true
        expr: '(^|\n)([^\n]+:317:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L318:
        expect: true
        expr: '(^|\n)([^\n]+:318:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L319:
        expect: true
        expr: '(^|\n)([^\n]+:319:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L320:
        expect: true
        expr: '(^|\n)([^\n]+:320:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L321:
        expect: true
        expr: '(^|\n)([^\n]+:321:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L322:
        expect: true
        expr: '(^|\n)([^\n]+:322:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L323:
        expect: true
        expr: '(^|\n)([^\n]+:323:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L324:
        expect: true
        expr: '(^|\n)([^\n]+:324:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L325:
        expect: true
        expr: '(^|\n)([^\n]+:325:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L326:
        expect: true
        expr: '(^|\n)([^\n]+:326:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L327:
        expect: true
        expr: '(^|\n)([^\n]+:327:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L328:
        expect: true
        expr: '(^|\n)([^\n]+:328:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L329:
        expect: true
        expr: '(^|\n)([^\n]+:329:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L330:
        expect: true
        expr: '(^|\n)([^\n]+:330:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L331:
        expect: true
        expr: '(^|\n)([^\n]+:331:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L332:
        expect: true
        expr: '(^|\n)([^\n]+:332:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L333:
        expect: true
        expr: '(^|\n)([^\n]+:333:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L334:
        expect: true
        expr: '(^|\n)([^\n]+:334:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L335:
        expect: true
        expr: '(^|\n)([^\n]+:335:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L336:
        expect: true
        expr: '(^|\n)([^\n]+:336:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L337:
        expect: true
        expr: '(^|\n)([^\n]+:337:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L338:
        expect: true
        expr: '(^|\n)([^\n]+:338:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L339:
        expect: true
        expr: '(^|\n)([^\n]+:339:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L340:
        expect: true
        expr: '(^|\n)([^\n]+:340:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L341:
        expect: true
        expr: '(^|\n)([^\n]+:341:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L342:
        expect: true
        expr: '(^|\n)([^\n]+:342:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L343:
        expect: true
        expr: '(^|\n)([^\n]+:343:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L344:
        expect: true
        expr: '(^|\n)([^\n]+:344:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L345:
        expect: true
        expr: '(^|\n)([^\n]+:345:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L346:
        expect: true
        expr: '(^|\n)([^\n]+:346:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L347:
        expect: true
        expr: '(^|\n)([^\n]+:347:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L348:
        expect: true
        expr: '(^|\n)([^\n]+:348:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L349:
        expect: true
        expr: '(^|\n)([^\n]+:349:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L350:
        expect: true
        expr: '(^|\n)([^\n]+:350:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L351:
        expect: true
        expr: '(^|\n)([^\n]+:351:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L352:
        expect: true
        expr: '(^|\n)([^\n]+:352:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L353:
        expect: true
        expr: '(^|\n)([^\n]+:353:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L354:
        expect: true
        expr: '(^|\n)([^\n]+:354:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L355:
        expect: true
        expr: '(^|\n)([^\n]+:355:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L356:
        expect: true
        expr: '(^|\n)([^\n]+:356:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L357:
        expect: true
        expr: '(^|\n)([^\n]+:357:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L358:
        expect: true
        expr: '(^|\n)([^\n]+:358:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L359:
        expect: true
        expr: '(^|\n)([^\n]+:359:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L360:
        expect: true
        expr: '(^|\n)([^\n]+:360:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L361:
        expect: true
        expr: '(^|\n)([^\n]+:361:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L362:
        expect: true
        expr: '(^|\n)([^\n]+:362:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L363:
        expect: true
        expr: '(^|\n)([^\n]+:363:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L364:
        expect: true
        expr: '(^|\n)([^\n]+:364:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L365:
        expect: true
        expr: '(^|\n)([^\n]+:365:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L366:
        expect: true
        expr: '(^|\n)([^\n]+:366:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L367:
        expect: true
        expr: '(^|\n)([^\n]+:367:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L368:
        expect: true
        expr: '(^|\n)([^\n]+:368:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L369:
        expect: true
        expr: '(^|\n)([^\n]+:369:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L370:
        expect: true
        expr: '(^|\n)([^\n]+:370:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L371:
        expect: true
        expr: '(^|\n)([^\n]+:371:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L372:
        expect: true
        expr: '(^|\n)([^\n]+:372:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L373:
        expect: true
        expr: '(^|\n)([^\n]+:373:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L374:
        expect: true
        expr: '(^|\n)([^\n]+:374:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L375:
        expect: true
        expr: '(^|\n)([^\n]+:375:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L376:
        expect: true
        expr: '(^|\n)([^\n]+:376:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L377:
        expect: true
        expr: '(^|\n)([^\n]+:377:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L378:
        expect: true
        expr: '(^|\n)([^\n]+:378:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L379:
        expect: true
        expr: '(^|\n)([^\n]+:379:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L380:
        expect: true
        expr: '(^|\n)([^\n]+:380:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L381:
        expect: true
        expr: '(^|\n)([^\n]+:381:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L382:
        expect: true
        expr: '(^|\n)([^\n]+:382:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L383:
        expect: true
        expr: '(^|\n)([^\n]+:383:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L384:
        expect: true
        expr: '(^|\n)([^\n]+:384:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L385:
        expect: true
        expr: '(^|\n)([^\n]+:385:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L386:
        expect: true
        expr: '(^|\n)([^\n]+:386:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L387:
        expect: true
        expr: '(^|\n)([^\n]+:387:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L388:
        expect: true
        expr: '(^|\n)([^\n]+:388:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L389:
        expect: true
        expr: '(^|\n)([^\n]+:389:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L390:
        expect: true
        expr: '(^|\n)([^\n]+:390:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L391:
        expect: true
        expr: '(^|\n)([^\n]+:391:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L392:
        expect: true
        expr: '(^|\n)([^\n]+:392:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L393:
        expect: true
        expr: '(^|\n)([^\n]+:393:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L394:
        expect: true
        expr: '(^|\n)([^\n]+:394:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L395:
        expect: true
        expr: '(^|\n)([^\n]+:395:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L396:
        expect: true
        expr: '(^|\n)([^\n]+:396:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L397:
        expect: true
        expr: '(^|\n)([^\n]+:397:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L398:
        expect: true
        expr: '(^|\n)([^\n]+:398:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L399:
        expect: true
        expr: '(^|\n)([^\n]+:399:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L400:
        expect: true
        expr: '(^|\n)([^\n]+:400:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L401:
        expect: true
        expr: '(^|\n)([^\n]+:401:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L402:
        expect: true
        expr: '(^|\n)([^\n]+:402:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L403:
        expect: true
        expr: '(^|\n)([^\n]+:403:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L404:
        expect: true
        expr: '(^|\n)([^\n]+:404:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L405:
        expect: true
        expr: '(^|\n)([^\n]+:405:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L406:
        expect: true
        expr: '(^|\n)([^\n]+:406:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L407:
        expect: true
        expr: '(^|\n)([^\n]+:407:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L408:
        expect: true
        expr: '(^|\n)([^\n]+:408:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L409:
        expect: true
        expr: '(^|\n)([^\n]+:409:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L410:
        expect: true
        expr: '(^|\n)([^\n]+:410:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L411:
        expect: true
        expr: '(^|\n)([^\n]+:411:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L412:
        expect: true
        expr: '(^|\n)([^\n]+:412:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L413:
        expect: true
        expr: '(^|\n)([^\n]+:413:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L414:
        expect: true
        expr: '(^|\n)([^\n]+:414:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L415:
        expect: true
        expr: '(^|\n)([^\n]+:415:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L416:
        expect: true
        expr: '(^|\n)([^\n]+:416:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L417:
        expect: true
        expr: '(^|\n)([^\n]+:417:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L418:
        expect: true
        expr: '(^|\n)([^\n]+:418:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L419:
        expect: true
        expr: '(^|\n)([^\n]+:419:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L420:
        expect: true
        expr: '(^|\n)([^\n]+:420:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L421:
        expect: true
        expr: '(^|\n)([^\n]+:421:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L422:
        expect: true
        expr: '(^|\n)([^\n]+:422:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L423:
        expect: true
        expr: '(^|\n)([^\n]+:423:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L424:
        expect: true
        expr: '(^|\n)([^\n]+:424:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L425:
        expect: true
        expr: '(^|\n)([^\n]+:425:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L426:
        expect: true
        expr: '(^|\n)([^\n]+:426:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L427:
        expect: true
        expr: '(^|\n)([^\n]+:427:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L428:
        expect: true
        expr: '(^|\n)([^\n]+:428:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L429:
        expect: true
        expr: '(^|\n)([^\n]+:429:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L430:
        expect: true
        expr: '(^|\n)([^\n]+:430:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L431:
        expect: true
        expr: '(^|\n)([^\n]+:431:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L432:
        expect: true
        expr: '(^|\n)([^\n]+:432:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L433:
        expect: true
        expr: '(^|\n)([^\n]+:433:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L434:
        expect: true
        expr: '(^|\n)([^\n]+:434:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L435:
        expect: true
        expr: '(^|\n)([^\n]+:435:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L436:
        expect: true
        expr: '(^|\n)([^\n]+:436:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L437:
        expect: true
        expr: '(^|\n)([^\n]+:437:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L438:
        expect: true
        expr: '(^|\n)([^\n]+:438:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L439:
        expect: true
        expr: '(^|\n)([^\n]+:439:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L440:
        expect: true
        expr: '(^|\n)([^\n]+:440:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L441:
        expect: true
        expr: '(^|\n)([^\n]+:441:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L442:
        expect: true
        expr: '(^|\n)([^\n]+:442:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L443:
        expect: true
        expr: '(^|\n)([^\n]+:443:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L444:
        expect: true
        expr: '(^|\n)([^\n]+:444:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L445:
        expect: true
        expr: '(^|\n)([^\n]+:445:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L446:
        expect: true
        expr: '(^|\n)([^\n]+:446:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L447:
        expect: true
        expr: '(^|\n)([^\n]+:447:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L448:
        expect: true
        expr: '(^|\n)([^\n]+:448:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L449:
        expect: true
        expr: '(^|\n)([^\n]+:449:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L450:
        expect: true
        expr: '(^|\n)([^\n]+:450:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L451:
        expect: true
        expr: '(^|\n)([^\n]+:451:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L452:
        expect: true
        expr: '(^|\n)([^\n]+:452:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L453:
        expect: true
        expr: '(^|\n)([^\n]+:453:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L454:
        expect: true
        expr: '(^|\n)([^\n]+:454:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L455:
        expect: true
        expr: '(^|\n)([^\n]+:455:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L456:
        expect: true
        expr: '(^|\n)([^\n]+:456:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L457:
        expect: true
        expr: '(^|\n)([^\n]+:457:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L458:
        expect: true
        expr: '(^|\n)([^\n]+:458:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L459:
        expect: true
        expr: '(^|\n)([^\n]+:459:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L460:
        expect: true
        expr: '(^|\n)([^\n]+:460:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L461:
        expect: true
        expr: '(^|\n)([^\n]+:461:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L462:
        expect: true
        expr: '(^|\n)([^\n]+:462:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L463:
        expect: true
        expr: '(^|\n)([^\n]+:463:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L464:
        expect: true
        expr: '(^|\n)([^\n]+:464:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L465:
        expect: true
        expr: '(^|\n)([^\n]+:465:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L466:
        expect: true
        expr: '(^|\n)([^\n]+:466:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L467:
        expect: true
        expr: '(^|\n)([^\n]+:467:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L468:
        expect: true
        expr: '(^|\n)([^\n]+:468:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L469:
        expect: true
        expr: '(^|\n)([^\n]+:469:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L470:
        expect: true
        expr: '(^|\n)([^\n]+:470:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L471:
        expect: true
        expr: '(^|\n)([^\n]+:471:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L472:
        expect: true
        expr: '(^|\n)([^\n]+:472:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L473:
        expect: true
        expr: '(^|\n)([^\n]+:473:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L474:
        expect: true
        expr: '(^|\n)([^\n]+:474:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L475:
        expect: true
        expr: '(^|\n)([^\n]+:475:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L476:
        expect: true
        expr: '(^|\n)([^\n]+:476:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L477:
        expect: true
        expr: '(^|\n)([^\n]+:477:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L478:
        expect: true
        expr: '(^|\n)([^\n]+:478:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L479:
        expect: true
        expr: '(^|\n)([^\n]+:479:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L480:
        expect: true
        expr: '(^|\n)([^\n]+:480:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L481:
        expect: true
        expr: '(^|\n)([^\n]+:481:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L482:
        expect: true
        expr: '(^|\n)([^\n]+:482:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L483:
        expect: true
        expr: '(^|\n)([^\n]+:483:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L484:
        expect: true
        expr: '(^|\n)([^\n]+:484:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L485:
        expect: true
        expr: '(^|\n)([^\n]+:485:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L486:
        expect: true
        expr: '(^|\n)([^\n]+:486:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L487:
        expect: true
        expr: '(^|\n)([^\n]+:487:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L488:
        expect: true
        expr: '(^|\n)([^\n]+:488:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L489:
        expect: true
        expr: '(^|\n)([^\n]+:489:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L490:
        expect: true
        expr: '(^|\n)([^\n]+:490:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L491:
        expect: true
        expr: '(^|\n)([^\n]+:491:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L492:
        expect: true
        expr: '(^|\n)([^\n]+:492:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L493:
        expect: true
        expr: '(^|\n)([^\n]+:493:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L494:
        expect: true
        expr: '(^|\n)([^\n]+:494:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L495:
        expect: true
        expr: '(^|\n)([^\n]+:495:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L496:
        expect: true
        expr: '(^|\n)([^\n]+:496:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L497:
        expect: true
        expr: '(^|\n)([^\n]+:497:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L498:
        expect: true
        expr: '(^|\n)([^\n]+:498:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L499:
        expect: true
        expr: '(^|\n)([^\n]+:499:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L500:
        expect: true
        expr: '(^|\n)([^\n]+:500:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L501:
        expect: true
        expr: '(^|\n)([^\n]+:501:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L502:
        expect: true
        expr: '(^|\n)([^\n]+:502:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L503:
        expect: true
        expr: '(^|\n)([^\n]+:503:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L504:
        expect: true
        expr: '(^|\n)([^\n]+:504:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L505:
        expect: true
        expr: '(^|\n)([^\n]+:505:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L506:
        expect: true
        expr: '(^|\n)([^\n]+:506:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L507:
        expect: true
        expr: '(^|\n)([^\n]+:507:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L508:
        expect: true
        expr: '(^|\n)([^\n]+:508:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L509:
        expect: true
        expr: '(^|\n)([^\n]+:509:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L510:
        expect: true
        expr: '(^|\n)([^\n]+:510:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L511:
        expect: true
        expr: '(^|\n)([^\n]+:511:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L512:
        expect: true
        expr: '(^|\n)([^\n]+:512:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L513:
        expect: true
        expr: '(^|\n)([^\n]+:513:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L514:
        expect: true
        expr: '(^|\n)([^\n]+:514:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L515:
        expect: true
        expr: '(^|\n)([^\n]+:515:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L516:
        expect: true
        expr: '(^|\n)([^\n]+:516:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L517:
        expect: true
        expr: '(^|\n)([^\n]+:517:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L518:
        expect: true
        expr: '(^|\n)([^\n]+:518:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L519:
        expect: true
        expr: '(^|\n)([^\n]+:519:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L520:
        expect: true
        expr: '(^|\n)([^\n]+:520:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L521:
        expect: true
        expr: '(^|\n)([^\n]+:521:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L522:
        expect: true
        expr: '(^|\n)([^\n]+:522:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L523:
        expect: true
        expr: '(^|\n)([^\n]+:523:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L524:
        expect: true
        expr: '(^|\n)([^\n]+:524:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L525:
        expect: true
        expr: '(^|\n)([^\n]+:525:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L526:
        expect: true
        expr: '(^|\n)([^\n]+:526:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L527:
        expect: true
        expr: '(^|\n)([^\n]+:527:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L528:
        expect: true
        expr: '(^|\n)([^\n]+:528:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L529:
        expect: true
        expr: '(^|\n)([^\n]+:529:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L530:
        expect: true
        expr: '(^|\n)([^\n]+:530:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L531:
        expect: true
        expr: '(^|\n)([^\n]+:531:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L532:
        expect: true
        expr: '(^|\n)([^\n]+:532:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L533:
        expect: true
        expr: '(^|\n)([^\n]+:533:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L534:
        expect: true
        expr: '(^|\n)([^\n]+:534:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L535:
        expect: true
        expr: '(^|\n)([^\n]+:535:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L536:
        expect: true
        expr: '(^|\n)([^\n]+:536:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L537:
        expect: true
        expr: '(^|\n)([^\n]+:537:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L538:
        expect: true
        expr: '(^|\n)([^\n]+:538:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L539:
        expect: true
        expr: '(^|\n)([^\n]+:539:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L540:
        expect: true
        expr: '(^|\n)([^\n]+:540:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L541:
        expect: true
        expr: '(^|\n)([^\n]+:541:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L542:
        expect: true
        expr: '(^|\n)([^\n]+:542:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L543:
        expect: true
        expr: '(^|\n)([^\n]+:543:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L544:
        expect: true
        expr: '(^|\n)([^\n]+:544:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L545:
        expect: true
        expr: '(^|\n)([^\n]+:545:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L546:
        expect: true
        expr: '(^|\n)([^\n]+:546:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L547:
        expect: true
        expr: '(^|\n)([^\n]+:547:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L548:
        expect: true
        expr: '(^|\n)([^\n]+:548:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L549:
        expect: true
        expr: '(^|\n)([^\n]+:549:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L550:
        expect: true
        expr: '(^|\n)([^\n]+:550:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L551:
        expect: true
        expr: '(^|\n)([^\n]+:551:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L552:
        expect: true
        expr: '(^|\n)([^\n]+:552:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L553:
        expect: true
        expr: '(^|\n)([^\n]+:553:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L554:
        expect: true
        expr: '(^|\n)([^\n]+:554:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L555:
        expect: true
        expr: '(^|\n)([^\n]+:555:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L556:
        expect: true
        expr: '(^|\n)([^\n]+:556:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L557:
        expect: true
        expr: '(^|\n)([^\n]+:557:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L558:
        expect: true
        expr: '(^|\n)([^\n]+:558:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L559:
        expect: true
        expr: '(^|\n)([^\n]+:559:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L560:
        expect: true
        expr: '(^|\n)([^\n]+:560:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L561:
        expect: true
        expr: '(^|\n)([^\n]+:561:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L562:
        expect: true
        expr: '(^|\n)([^\n]+:562:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L563:
        expect: true
        expr: '(^|\n)([^\n]+:563:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L564:
        expect: true
        expr: '(^|\n)([^\n]+:564:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L565:
        expect: true
        expr: '(^|\n)([^\n]+:565:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L566:
        expect: true
        expr: '(^|\n)([^\n]+:566:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L567:
        expect: true
        expr: '(^|\n)([^\n]+:567:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L568:
        expect: true
        expr: '(^|\n)([^\n]+:568:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L569:
        expect: true
        expr: '(^|\n)([^\n]+:569:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L570:
        expect: true
        expr: '(^|\n)([^\n]+:570:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L571:
        expect: true
        expr: '(^|\n)([^\n]+:571:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L572:
        expect: true
        expr: '(^|\n)([^\n]+:572:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L573:
        expect: true
        expr: '(^|\n)([^\n]+:573:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L574:
        expect: true
        expr: '(^|\n)([^\n]+:574:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L575:
        expect: true
        expr: '(^|\n)([^\n]+:575:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L576:
        expect: true
        expr: '(^|\n)([^\n]+:576:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L577:
        expect: true
        expr: '(^|\n)([^\n]+:577:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L578:
        expect: true
        expr: '(^|\n)([^\n]+:578:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L579:
        expect: true
        expr: '(^|\n)([^\n]+:579:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L580:
        expect: true
        expr: '(^|\n)([^\n]+:580:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L581:
        expect: true
        expr: '(^|\n)([^\n]+:581:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L582:
        expect: true
        expr: '(^|\n)([^\n]+:582:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L583:
        expect: true
        expr: '(^|\n)([^\n]+:583:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L584:
        expect: true
        expr: '(^|\n)([^\n]+:584:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L585:
        expect: true
        expr: '(^|\n)([^\n]+:585:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L586:
        expect: true
        expr: '(^|\n)([^\n]+:586:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L587:
        expect: true
        expr: '(^|\n)([^\n]+:587:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L588:
        expect: true
        expr: '(^|\n)([^\n]+:588:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L589:
        expect: true
        expr: '(^|\n)([^\n]+:589:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L590:
        expect: true
        expr: '(^|\n)([^\n]+:590:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L591:
        expect: true
        expr: '(^|\n)([^\n]+:591:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L592:
        expect: true
        expr: '(^|\n)([^\n]+:592:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L593:
        expect: true
        expr: '(^|\n)([^\n]+:593:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L594:
        expect: true
        expr: '(^|\n)([^\n]+:594:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L595:
        expect: true
        expr: '(^|\n)([^\n]+:595:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L596:
        expect: true
        expr: '(^|\n)([^\n]+:596:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L597:
        expect: true
        expr: '(^|\n)([^\n]+:597:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L598:
        expect: true
        expr: '(^|\n)([^\n]+:598:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L599:
        expect: true
        expr: '(^|\n)([^\n]+:599:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L600:
        expect: true
        expr: '(^|\n)([^\n]+:600:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L601:
        expect: true
        expr: '(^|\n)([^\n]+:601:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L602:
        expect: true
        expr: '(^|\n)([^\n]+:602:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L603:
        expect: true
        expr: '(^|\n)([^\n]+:603:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L604:
        expect: true
        expr: '(^|\n)([^\n]+:604:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L605:
        expect: true
        expr: '(^|\n)([^\n]+:605:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L606:
        expect: true
        expr: '(^|\n)([^\n]+:606:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L607:
        expect: true
        expr: '(^|\n)([^\n]+:607:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L608:
        expect: true
        expr: '(^|\n)([^\n]+:608:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L609:
        expect: true
        expr: '(^|\n)([^\n]+:609:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L610:
        expect: true
        expr: '(^|\n)([^\n]+:610:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L611:
        expect: true
        expr: '(^|\n)([^\n]+:611:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L612:
        expect: true
        expr: '(^|\n)([^\n]+:612:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L613:
        expect: true
        expr: '(^|\n)([^\n]+:613:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L614:
        expect: true
        expr: '(^|\n)([^\n]+:614:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L615:
        expect: true
        expr: '(^|\n)([^\n]+:615:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L616:
        expect: true
        expr: '(^|\n)([^\n]+:616:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L617:
        expect: true
        expr: '(^|\n)([^\n]+:617:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L618:
        expect: true
        expr: '(^|\n)([^\n]+:618:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L619:
        expect: true
        expr: '(^|\n)([^\n]+:619:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L620:
        expect: true
        expr: '(^|\n)([^\n]+:620:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L621:
        expect: true
        expr: '(^|\n)([^\n]+:621:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L622:
        expect: true
        expr: '(^|\n)([^\n]+:622:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L623:
        expect: true
        expr: '(^|\n)([^\n]+:623:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L624:
        expect: true
        expr: '(^|\n)([^\n]+:624:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L625:
        expect: true
        expr: '(^|\n)([^\n]+:625:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L626:
        expect: true
        expr: '(^|\n)([^\n]+:626:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L627:
        expect: true
        expr: '(^|\n)([^\n]+:627:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L628:
        expect: true
        expr: '(^|\n)([^\n]+:628:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L629:
        expect: true
        expr: '(^|\n)([^\n]+:629:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L630:
        expect: true
        expr: '(^|\n)([^\n]+:630:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L631:
        expect: true
        expr: '(^|\n)([^\n]+:631:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L632:
        expect: true
        expr: '(^|\n)([^\n]+:632:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L633:
        expect: true
        expr: '(^|\n)([^\n]+:633:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L634:
        expect: true
        expr: '(^|\n)([^\n]+:634:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L635:
        expect: true
        expr: '(^|\n)([^\n]+:635:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L636:
        expect: true
        expr: '(^|\n)([^\n]+:636:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L637:
        expect: true
        expr: '(^|\n)([^\n]+:637:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L638:
        expect: true
        expr: '(^|\n)([^\n]+:638:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L639:
        expect: true
        expr: '(^|\n)([^\n]+:639:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L640:
        expect: true
        expr: '(^|\n)([^\n]+:640:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L641:
        expect: true
        expr: '(^|\n)([^\n]+:641:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L642:
        expect: true
        expr: '(^|\n)([^\n]+:642:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L643:
        expect: true
        expr: '(^|\n)([^\n]+:643:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L644:
        expect: true
        expr: '(^|\n)([^\n]+:644:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L645:
        expect: true
        expr: '(^|\n)([^\n]+:645:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L646:
        expect: true
        expr: '(^|\n)([^\n]+:646:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L647:
        expect: true
        expr: '(^|\n)([^\n]+:647:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L648:
        expect: true
        expr: '(^|\n)([^\n]+:648:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L649:
        expect: true
        expr: '(^|\n)([^\n]+:649:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L650:
        expect: true
        expr: '(^|\n)([^\n]+:650:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L651:
        expect: true
        expr: '(^|\n)([^\n]+:651:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L652:
        expect: true
        expr: '(^|\n)([^\n]+:652:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L653:
        expect: true
        expr: '(^|\n)([^\n]+:653:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L654:
        expect: true
        expr: '(^|\n)([^\n]+:654:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L655:
        expect: true
        expr: '(^|\n)([^\n]+:655:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L656:
        expect: true
        expr: '(^|\n)([^\n]+:656:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L657:
        expect: true
        expr: '(^|\n)([^\n]+:657:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L658:
        expect: true
        expr: '(^|\n)([^\n]+:658:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L659:
        expect: true
        expr: '(^|\n)([^\n]+:659:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L660:
        expect: true
        expr: '(^|\n)([^\n]+:660:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L661:
        expect: true
        expr: '(^|\n)([^\n]+:661:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L662:
        expect: true
        expr: '(^|\n)([^\n]+:662:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L663:
        expect: true
        expr: '(^|\n)([^\n]+:663:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L664:
        expect: true
        expr: '(^|\n)([^\n]+:664:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L665:
        expect: true
        expr: '(^|\n)([^\n]+:665:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L666:
        expect: true
        expr: '(^|\n)([^\n]+:666:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_int128-types-1_2803:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/int128-types-1.c'
    sources:
      binary: int128-types-1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L100:
        expect: true
        expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L109:
        expect: true
        expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L117:
        expect: true
        expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L118:
        expect: true
        expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L119:
        expect: true
        expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L123:
        expect: true
        expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L126:
        expect: true
        expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+:129:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L130:
        expect: true
        expr: '(^|\n)([^\n]+:130:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L132:
        expect: true
        expr: '(^|\n)([^\n]+:132:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+:133:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L138:
        expect: true
        expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L139:
        expect: true
        expr: '(^|\n)([^\n]+:139:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L140:
        expect: true
        expr: '(^|\n)([^\n]+:140:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L141:
        expect: true
        expr: '(^|\n)([^\n]+:141:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+:142:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L145:
        expect: true
        expr: '(^|\n)([^\n]+:145:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L149:
        expect: true
        expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+:152:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+:154:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+:155:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L160:
        expect: true
        expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L161:
        expect: true
        expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L162:
        expect: true
        expr: '(^|\n)([^\n]+:162:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L163:
        expect: true
        expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+:166:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L167:
        expect: true
        expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L168:
        expect: true
        expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L169:
        expect: true
        expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L170:
        expect: true
        expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L171:
        expect: true
        expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+:172:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L173:
        expect: true
        expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L174:
        expect: true
        expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+:177:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L179:
        expect: true
        expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L181:
        expect: true
        expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L182:
        expect: true
        expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L185:
        expect: true
        expr: '(^|\n)([^\n]+:185:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L188:
        expect: true
        expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L189:
        expect: true
        expr: '(^|\n)([^\n]+:189:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L191:
        expect: true
        expr: '(^|\n)([^\n]+:191:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L192:
        expect: true
        expr: '(^|\n)([^\n]+:192:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L194:
        expect: true
        expr: '(^|\n)([^\n]+:194:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L195:
        expect: true
        expr: '(^|\n)([^\n]+:195:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+:196:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+:197:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L198:
        expect: true
        expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L199:
        expect: true
        expr: '(^|\n)([^\n]+:199:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L200:
        expect: true
        expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L201:
        expect: true
        expr: '(^|\n)([^\n]+:201:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L202:
        expect: true
        expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L203:
        expect: true
        expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L204:
        expect: true
        expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L205:
        expect: true
        expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L206:
        expect: true
        expr: '(^|\n)([^\n]+:206:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L207:
        expect: true
        expr: '(^|\n)([^\n]+:207:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L208:
        expect: true
        expr: '(^|\n)([^\n]+:208:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L209:
        expect: true
        expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L210:
        expect: true
        expr: '(^|\n)([^\n]+:210:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L211:
        expect: true
        expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L213:
        expect: true
        expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L216:
        expect: true
        expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L217:
        expect: true
        expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L218:
        expect: true
        expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L219:
        expect: true
        expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L220:
        expect: true
        expr: '(^|\n)([^\n]+:220:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L221:
        expect: true
        expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L222:
        expect: true
        expr: '(^|\n)([^\n]+:222:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L223:
        expect: true
        expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L224:
        expect: true
        expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L225:
        expect: true
        expr: '(^|\n)([^\n]+:225:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L226:
        expect: true
        expr: '(^|\n)([^\n]+:226:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L228:
        expect: true
        expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L229:
        expect: true
        expr: '(^|\n)([^\n]+:229:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L230:
        expect: true
        expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L231:
        expect: true
        expr: '(^|\n)([^\n]+:231:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L232:
        expect: true
        expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L233:
        expect: true
        expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L234:
        expect: true
        expr: '(^|\n)([^\n]+:234:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L235:
        expect: true
        expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L236:
        expect: true
        expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L237:
        expect: true
        expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L238:
        expect: true
        expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L239:
        expect: true
        expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L240:
        expect: true
        expr: '(^|\n)([^\n]+:240:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L241:
        expect: true
        expr: '(^|\n)([^\n]+:241:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L242:
        expect: true
        expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L243:
        expect: true
        expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L244:
        expect: true
        expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L245:
        expect: true
        expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L246:
        expect: true
        expr: '(^|\n)([^\n]+:246:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L247:
        expect: true
        expr: '(^|\n)([^\n]+:247:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L248:
        expect: true
        expr: '(^|\n)([^\n]+:248:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L249:
        expect: true
        expr: '(^|\n)([^\n]+:249:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L250:
        expect: true
        expr: '(^|\n)([^\n]+:250:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L251:
        expect: true
        expr: '(^|\n)([^\n]+:251:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L252:
        expect: true
        expr: '(^|\n)([^\n]+:252:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L253:
        expect: true
        expr: '(^|\n)([^\n]+:253:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L254:
        expect: true
        expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L255:
        expect: true
        expr: '(^|\n)([^\n]+:255:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L256:
        expect: true
        expr: '(^|\n)([^\n]+:256:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L257:
        expect: true
        expr: '(^|\n)([^\n]+:257:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L258:
        expect: true
        expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L259:
        expect: true
        expr: '(^|\n)([^\n]+:259:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L260:
        expect: true
        expr: '(^|\n)([^\n]+:260:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L261:
        expect: true
        expr: '(^|\n)([^\n]+:261:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L262:
        expect: true
        expr: '(^|\n)([^\n]+:262:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L263:
        expect: true
        expr: '(^|\n)([^\n]+:263:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L264:
        expect: true
        expr: '(^|\n)([^\n]+:264:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L265:
        expect: true
        expr: '(^|\n)([^\n]+:265:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L266:
        expect: true
        expr: '(^|\n)([^\n]+:266:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L267:
        expect: true
        expr: '(^|\n)([^\n]+:267:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L268:
        expect: true
        expr: '(^|\n)([^\n]+:268:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L269:
        expect: true
        expr: '(^|\n)([^\n]+:269:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L270:
        expect: true
        expr: '(^|\n)([^\n]+:270:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L271:
        expect: true
        expr: '(^|\n)([^\n]+:271:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L272:
        expect: true
        expr: '(^|\n)([^\n]+:272:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L273:
        expect: true
        expr: '(^|\n)([^\n]+:273:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L274:
        expect: true
        expr: '(^|\n)([^\n]+:274:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L275:
        expect: true
        expr: '(^|\n)([^\n]+:275:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L276:
        expect: true
        expr: '(^|\n)([^\n]+:276:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L277:
        expect: true
        expr: '(^|\n)([^\n]+:277:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L278:
        expect: true
        expr: '(^|\n)([^\n]+:278:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L279:
        expect: true
        expr: '(^|\n)([^\n]+:279:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L280:
        expect: true
        expr: '(^|\n)([^\n]+:280:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L281:
        expect: true
        expr: '(^|\n)([^\n]+:281:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L282:
        expect: true
        expr: '(^|\n)([^\n]+:282:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L283:
        expect: true
        expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L284:
        expect: true
        expr: '(^|\n)([^\n]+:284:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L285:
        expect: true
        expr: '(^|\n)([^\n]+:285:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L286:
        expect: true
        expr: '(^|\n)([^\n]+:286:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L287:
        expect: true
        expr: '(^|\n)([^\n]+:287:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L288:
        expect: true
        expr: '(^|\n)([^\n]+:288:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L289:
        expect: true
        expr: '(^|\n)([^\n]+:289:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L290:
        expect: true
        expr: '(^|\n)([^\n]+:290:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L291:
        expect: true
        expr: '(^|\n)([^\n]+:291:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L292:
        expect: true
        expr: '(^|\n)([^\n]+:292:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L293:
        expect: true
        expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L294:
        expect: true
        expr: '(^|\n)([^\n]+:294:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L295:
        expect: true
        expr: '(^|\n)([^\n]+:295:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L296:
        expect: true
        expr: '(^|\n)([^\n]+:296:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L297:
        expect: true
        expr: '(^|\n)([^\n]+:297:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L298:
        expect: true
        expr: '(^|\n)([^\n]+:298:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L299:
        expect: true
        expr: '(^|\n)([^\n]+:299:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L300:
        expect: true
        expr: '(^|\n)([^\n]+:300:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L301:
        expect: true
        expr: '(^|\n)([^\n]+:301:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L302:
        expect: true
        expr: '(^|\n)([^\n]+:302:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L303:
        expect: true
        expr: '(^|\n)([^\n]+:303:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L304:
        expect: true
        expr: '(^|\n)([^\n]+:304:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L305:
        expect: true
        expr: '(^|\n)([^\n]+:305:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L306:
        expect: true
        expr: '(^|\n)([^\n]+:306:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L307:
        expect: true
        expr: '(^|\n)([^\n]+:307:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L308:
        expect: true
        expr: '(^|\n)([^\n]+:308:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L309:
        expect: true
        expr: '(^|\n)([^\n]+:309:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L310:
        expect: true
        expr: '(^|\n)([^\n]+:310:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L311:
        expect: true
        expr: '(^|\n)([^\n]+:311:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L312:
        expect: true
        expr: '(^|\n)([^\n]+:312:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L313:
        expect: true
        expr: '(^|\n)([^\n]+:313:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L314:
        expect: true
        expr: '(^|\n)([^\n]+:314:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L315:
        expect: true
        expr: '(^|\n)([^\n]+:315:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L316:
        expect: true
        expr: '(^|\n)([^\n]+:316:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L317:
        expect: true
        expr: '(^|\n)([^\n]+:317:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L318:
        expect: true
        expr: '(^|\n)([^\n]+:318:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L319:
        expect: true
        expr: '(^|\n)([^\n]+:319:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L320:
        expect: true
        expr: '(^|\n)([^\n]+:320:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L321:
        expect: true
        expr: '(^|\n)([^\n]+:321:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L322:
        expect: true
        expr: '(^|\n)([^\n]+:322:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L323:
        expect: true
        expr: '(^|\n)([^\n]+:323:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L324:
        expect: true
        expr: '(^|\n)([^\n]+:324:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L325:
        expect: true
        expr: '(^|\n)([^\n]+:325:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L326:
        expect: true
        expr: '(^|\n)([^\n]+:326:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L327:
        expect: true
        expr: '(^|\n)([^\n]+:327:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L328:
        expect: true
        expr: '(^|\n)([^\n]+:328:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L329:
        expect: true
        expr: '(^|\n)([^\n]+:329:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L330:
        expect: true
        expr: '(^|\n)([^\n]+:330:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L331:
        expect: true
        expr: '(^|\n)([^\n]+:331:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L332:
        expect: true
        expr: '(^|\n)([^\n]+:332:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L333:
        expect: true
        expr: '(^|\n)([^\n]+:333:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L334:
        expect: true
        expr: '(^|\n)([^\n]+:334:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L335:
        expect: true
        expr: '(^|\n)([^\n]+:335:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L336:
        expect: true
        expr: '(^|\n)([^\n]+:336:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L337:
        expect: true
        expr: '(^|\n)([^\n]+:337:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L338:
        expect: true
        expr: '(^|\n)([^\n]+:338:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L339:
        expect: true
        expr: '(^|\n)([^\n]+:339:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L340:
        expect: true
        expr: '(^|\n)([^\n]+:340:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L341:
        expect: true
        expr: '(^|\n)([^\n]+:341:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L342:
        expect: true
        expr: '(^|\n)([^\n]+:342:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L343:
        expect: true
        expr: '(^|\n)([^\n]+:343:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L344:
        expect: true
        expr: '(^|\n)([^\n]+:344:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L345:
        expect: true
        expr: '(^|\n)([^\n]+:345:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L346:
        expect: true
        expr: '(^|\n)([^\n]+:346:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L347:
        expect: true
        expr: '(^|\n)([^\n]+:347:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L348:
        expect: true
        expr: '(^|\n)([^\n]+:348:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L349:
        expect: true
        expr: '(^|\n)([^\n]+:349:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L350:
        expect: true
        expr: '(^|\n)([^\n]+:350:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L351:
        expect: true
        expr: '(^|\n)([^\n]+:351:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L352:
        expect: true
        expr: '(^|\n)([^\n]+:352:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L353:
        expect: true
        expr: '(^|\n)([^\n]+:353:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L354:
        expect: true
        expr: '(^|\n)([^\n]+:354:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L355:
        expect: true
        expr: '(^|\n)([^\n]+:355:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L356:
        expect: true
        expr: '(^|\n)([^\n]+:356:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L357:
        expect: true
        expr: '(^|\n)([^\n]+:357:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L358:
        expect: true
        expr: '(^|\n)([^\n]+:358:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L359:
        expect: true
        expr: '(^|\n)([^\n]+:359:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L360:
        expect: true
        expr: '(^|\n)([^\n]+:360:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L361:
        expect: true
        expr: '(^|\n)([^\n]+:361:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L362:
        expect: true
        expr: '(^|\n)([^\n]+:362:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L363:
        expect: true
        expr: '(^|\n)([^\n]+:363:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L364:
        expect: true
        expr: '(^|\n)([^\n]+:364:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L365:
        expect: true
        expr: '(^|\n)([^\n]+:365:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L366:
        expect: true
        expr: '(^|\n)([^\n]+:366:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L367:
        expect: true
        expr: '(^|\n)([^\n]+:367:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L368:
        expect: true
        expr: '(^|\n)([^\n]+:368:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L369:
        expect: true
        expr: '(^|\n)([^\n]+:369:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L370:
        expect: true
        expr: '(^|\n)([^\n]+:370:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L371:
        expect: true
        expr: '(^|\n)([^\n]+:371:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L372:
        expect: true
        expr: '(^|\n)([^\n]+:372:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L373:
        expect: true
        expr: '(^|\n)([^\n]+:373:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L374:
        expect: true
        expr: '(^|\n)([^\n]+:374:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L375:
        expect: true
        expr: '(^|\n)([^\n]+:375:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L376:
        expect: true
        expr: '(^|\n)([^\n]+:376:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L377:
        expect: true
        expr: '(^|\n)([^\n]+:377:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L378:
        expect: true
        expr: '(^|\n)([^\n]+:378:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L379:
        expect: true
        expr: '(^|\n)([^\n]+:379:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L380:
        expect: true
        expr: '(^|\n)([^\n]+:380:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L381:
        expect: true
        expr: '(^|\n)([^\n]+:381:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L382:
        expect: true
        expr: '(^|\n)([^\n]+:382:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L383:
        expect: true
        expr: '(^|\n)([^\n]+:383:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L384:
        expect: true
        expr: '(^|\n)([^\n]+:384:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L385:
        expect: true
        expr: '(^|\n)([^\n]+:385:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L386:
        expect: true
        expr: '(^|\n)([^\n]+:386:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L387:
        expect: true
        expr: '(^|\n)([^\n]+:387:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L388:
        expect: true
        expr: '(^|\n)([^\n]+:388:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L389:
        expect: true
        expr: '(^|\n)([^\n]+:389:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L390:
        expect: true
        expr: '(^|\n)([^\n]+:390:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L391:
        expect: true
        expr: '(^|\n)([^\n]+:391:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L392:
        expect: true
        expr: '(^|\n)([^\n]+:392:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L393:
        expect: true
        expr: '(^|\n)([^\n]+:393:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L394:
        expect: true
        expr: '(^|\n)([^\n]+:394:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L395:
        expect: true
        expr: '(^|\n)([^\n]+:395:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L396:
        expect: true
        expr: '(^|\n)([^\n]+:396:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L397:
        expect: true
        expr: '(^|\n)([^\n]+:397:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L398:
        expect: true
        expr: '(^|\n)([^\n]+:398:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L399:
        expect: true
        expr: '(^|\n)([^\n]+:399:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L400:
        expect: true
        expr: '(^|\n)([^\n]+:400:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L401:
        expect: true
        expr: '(^|\n)([^\n]+:401:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L402:
        expect: true
        expr: '(^|\n)([^\n]+:402:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L403:
        expect: true
        expr: '(^|\n)([^\n]+:403:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L404:
        expect: true
        expr: '(^|\n)([^\n]+:404:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L405:
        expect: true
        expr: '(^|\n)([^\n]+:405:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L406:
        expect: true
        expr: '(^|\n)([^\n]+:406:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L407:
        expect: true
        expr: '(^|\n)([^\n]+:407:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L408:
        expect: true
        expr: '(^|\n)([^\n]+:408:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L409:
        expect: true
        expr: '(^|\n)([^\n]+:409:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L410:
        expect: true
        expr: '(^|\n)([^\n]+:410:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L411:
        expect: true
        expr: '(^|\n)([^\n]+:411:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L412:
        expect: true
        expr: '(^|\n)([^\n]+:412:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L413:
        expect: true
        expr: '(^|\n)([^\n]+:413:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L414:
        expect: true
        expr: '(^|\n)([^\n]+:414:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L415:
        expect: true
        expr: '(^|\n)([^\n]+:415:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L416:
        expect: true
        expr: '(^|\n)([^\n]+:416:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L417:
        expect: true
        expr: '(^|\n)([^\n]+:417:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L418:
        expect: true
        expr: '(^|\n)([^\n]+:418:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L419:
        expect: true
        expr: '(^|\n)([^\n]+:419:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L420:
        expect: true
        expr: '(^|\n)([^\n]+:420:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L421:
        expect: true
        expr: '(^|\n)([^\n]+:421:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L422:
        expect: true
        expr: '(^|\n)([^\n]+:422:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L423:
        expect: true
        expr: '(^|\n)([^\n]+:423:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L424:
        expect: true
        expr: '(^|\n)([^\n]+:424:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L425:
        expect: true
        expr: '(^|\n)([^\n]+:425:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L426:
        expect: true
        expr: '(^|\n)([^\n]+:426:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L427:
        expect: true
        expr: '(^|\n)([^\n]+:427:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L428:
        expect: true
        expr: '(^|\n)([^\n]+:428:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L429:
        expect: true
        expr: '(^|\n)([^\n]+:429:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L430:
        expect: true
        expr: '(^|\n)([^\n]+:430:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L431:
        expect: true
        expr: '(^|\n)([^\n]+:431:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L432:
        expect: true
        expr: '(^|\n)([^\n]+:432:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L433:
        expect: true
        expr: '(^|\n)([^\n]+:433:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L434:
        expect: true
        expr: '(^|\n)([^\n]+:434:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L435:
        expect: true
        expr: '(^|\n)([^\n]+:435:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L436:
        expect: true
        expr: '(^|\n)([^\n]+:436:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L437:
        expect: true
        expr: '(^|\n)([^\n]+:437:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L438:
        expect: true
        expr: '(^|\n)([^\n]+:438:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L439:
        expect: true
        expr: '(^|\n)([^\n]+:439:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L440:
        expect: true
        expr: '(^|\n)([^\n]+:440:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L441:
        expect: true
        expr: '(^|\n)([^\n]+:441:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L442:
        expect: true
        expr: '(^|\n)([^\n]+:442:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L443:
        expect: true
        expr: '(^|\n)([^\n]+:443:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L444:
        expect: true
        expr: '(^|\n)([^\n]+:444:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L445:
        expect: true
        expr: '(^|\n)([^\n]+:445:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L446:
        expect: true
        expr: '(^|\n)([^\n]+:446:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L447:
        expect: true
        expr: '(^|\n)([^\n]+:447:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L448:
        expect: true
        expr: '(^|\n)([^\n]+:448:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L449:
        expect: true
        expr: '(^|\n)([^\n]+:449:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L450:
        expect: true
        expr: '(^|\n)([^\n]+:450:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L451:
        expect: true
        expr: '(^|\n)([^\n]+:451:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L452:
        expect: true
        expr: '(^|\n)([^\n]+:452:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L453:
        expect: true
        expr: '(^|\n)([^\n]+:453:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L454:
        expect: true
        expr: '(^|\n)([^\n]+:454:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L455:
        expect: true
        expr: '(^|\n)([^\n]+:455:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L456:
        expect: true
        expr: '(^|\n)([^\n]+:456:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L457:
        expect: true
        expr: '(^|\n)([^\n]+:457:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L458:
        expect: true
        expr: '(^|\n)([^\n]+:458:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L459:
        expect: true
        expr: '(^|\n)([^\n]+:459:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L460:
        expect: true
        expr: '(^|\n)([^\n]+:460:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L461:
        expect: true
        expr: '(^|\n)([^\n]+:461:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L462:
        expect: true
        expr: '(^|\n)([^\n]+:462:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L463:
        expect: true
        expr: '(^|\n)([^\n]+:463:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L464:
        expect: true
        expr: '(^|\n)([^\n]+:464:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L465:
        expect: true
        expr: '(^|\n)([^\n]+:465:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L466:
        expect: true
        expr: '(^|\n)([^\n]+:466:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L467:
        expect: true
        expr: '(^|\n)([^\n]+:467:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L468:
        expect: true
        expr: '(^|\n)([^\n]+:468:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L469:
        expect: true
        expr: '(^|\n)([^\n]+:469:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L470:
        expect: true
        expr: '(^|\n)([^\n]+:470:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L471:
        expect: true
        expr: '(^|\n)([^\n]+:471:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L472:
        expect: true
        expr: '(^|\n)([^\n]+:472:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L473:
        expect: true
        expr: '(^|\n)([^\n]+:473:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L474:
        expect: true
        expr: '(^|\n)([^\n]+:474:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L475:
        expect: true
        expr: '(^|\n)([^\n]+:475:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L476:
        expect: true
        expr: '(^|\n)([^\n]+:476:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L477:
        expect: true
        expr: '(^|\n)([^\n]+:477:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L478:
        expect: true
        expr: '(^|\n)([^\n]+:478:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L479:
        expect: true
        expr: '(^|\n)([^\n]+:479:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L480:
        expect: true
        expr: '(^|\n)([^\n]+:480:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L481:
        expect: true
        expr: '(^|\n)([^\n]+:481:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L482:
        expect: true
        expr: '(^|\n)([^\n]+:482:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L483:
        expect: true
        expr: '(^|\n)([^\n]+:483:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L484:
        expect: true
        expr: '(^|\n)([^\n]+:484:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L485:
        expect: true
        expr: '(^|\n)([^\n]+:485:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L486:
        expect: true
        expr: '(^|\n)([^\n]+:486:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L487:
        expect: true
        expr: '(^|\n)([^\n]+:487:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L488:
        expect: true
        expr: '(^|\n)([^\n]+:488:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L489:
        expect: true
        expr: '(^|\n)([^\n]+:489:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L490:
        expect: true
        expr: '(^|\n)([^\n]+:490:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L491:
        expect: true
        expr: '(^|\n)([^\n]+:491:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L492:
        expect: true
        expr: '(^|\n)([^\n]+:492:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L493:
        expect: true
        expr: '(^|\n)([^\n]+:493:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L494:
        expect: true
        expr: '(^|\n)([^\n]+:494:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L495:
        expect: true
        expr: '(^|\n)([^\n]+:495:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L496:
        expect: true
        expr: '(^|\n)([^\n]+:496:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L497:
        expect: true
        expr: '(^|\n)([^\n]+:497:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L498:
        expect: true
        expr: '(^|\n)([^\n]+:498:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L499:
        expect: true
        expr: '(^|\n)([^\n]+:499:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L500:
        expect: true
        expr: '(^|\n)([^\n]+:500:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L501:
        expect: true
        expr: '(^|\n)([^\n]+:501:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L502:
        expect: true
        expr: '(^|\n)([^\n]+:502:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L503:
        expect: true
        expr: '(^|\n)([^\n]+:503:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L504:
        expect: true
        expr: '(^|\n)([^\n]+:504:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L505:
        expect: true
        expr: '(^|\n)([^\n]+:505:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L506:
        expect: true
        expr: '(^|\n)([^\n]+:506:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L507:
        expect: true
        expr: '(^|\n)([^\n]+:507:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L508:
        expect: true
        expr: '(^|\n)([^\n]+:508:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L509:
        expect: true
        expr: '(^|\n)([^\n]+:509:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L510:
        expect: true
        expr: '(^|\n)([^\n]+:510:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L511:
        expect: true
        expr: '(^|\n)([^\n]+:511:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L512:
        expect: true
        expr: '(^|\n)([^\n]+:512:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L513:
        expect: true
        expr: '(^|\n)([^\n]+:513:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L514:
        expect: true
        expr: '(^|\n)([^\n]+:514:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L515:
        expect: true
        expr: '(^|\n)([^\n]+:515:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L516:
        expect: true
        expr: '(^|\n)([^\n]+:516:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L517:
        expect: true
        expr: '(^|\n)([^\n]+:517:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L518:
        expect: true
        expr: '(^|\n)([^\n]+:518:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L519:
        expect: true
        expr: '(^|\n)([^\n]+:519:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L520:
        expect: true
        expr: '(^|\n)([^\n]+:520:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L521:
        expect: true
        expr: '(^|\n)([^\n]+:521:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L522:
        expect: true
        expr: '(^|\n)([^\n]+:522:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L523:
        expect: true
        expr: '(^|\n)([^\n]+:523:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L524:
        expect: true
        expr: '(^|\n)([^\n]+:524:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L525:
        expect: true
        expr: '(^|\n)([^\n]+:525:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L526:
        expect: true
        expr: '(^|\n)([^\n]+:526:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L527:
        expect: true
        expr: '(^|\n)([^\n]+:527:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L528:
        expect: true
        expr: '(^|\n)([^\n]+:528:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L529:
        expect: true
        expr: '(^|\n)([^\n]+:529:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L530:
        expect: true
        expr: '(^|\n)([^\n]+:530:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L531:
        expect: true
        expr: '(^|\n)([^\n]+:531:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L532:
        expect: true
        expr: '(^|\n)([^\n]+:532:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L533:
        expect: true
        expr: '(^|\n)([^\n]+:533:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L534:
        expect: true
        expr: '(^|\n)([^\n]+:534:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L535:
        expect: true
        expr: '(^|\n)([^\n]+:535:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L536:
        expect: true
        expr: '(^|\n)([^\n]+:536:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L537:
        expect: true
        expr: '(^|\n)([^\n]+:537:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L538:
        expect: true
        expr: '(^|\n)([^\n]+:538:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L539:
        expect: true
        expr: '(^|\n)([^\n]+:539:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L540:
        expect: true
        expr: '(^|\n)([^\n]+:540:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L541:
        expect: true
        expr: '(^|\n)([^\n]+:541:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L542:
        expect: true
        expr: '(^|\n)([^\n]+:542:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L543:
        expect: true
        expr: '(^|\n)([^\n]+:543:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L544:
        expect: true
        expr: '(^|\n)([^\n]+:544:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L545:
        expect: true
        expr: '(^|\n)([^\n]+:545:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L546:
        expect: true
        expr: '(^|\n)([^\n]+:546:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L547:
        expect: true
        expr: '(^|\n)([^\n]+:547:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L548:
        expect: true
        expr: '(^|\n)([^\n]+:548:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L549:
        expect: true
        expr: '(^|\n)([^\n]+:549:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L550:
        expect: true
        expr: '(^|\n)([^\n]+:550:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L551:
        expect: true
        expr: '(^|\n)([^\n]+:551:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L552:
        expect: true
        expr: '(^|\n)([^\n]+:552:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L553:
        expect: true
        expr: '(^|\n)([^\n]+:553:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L554:
        expect: true
        expr: '(^|\n)([^\n]+:554:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L555:
        expect: true
        expr: '(^|\n)([^\n]+:555:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L556:
        expect: true
        expr: '(^|\n)([^\n]+:556:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L557:
        expect: true
        expr: '(^|\n)([^\n]+:557:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L558:
        expect: true
        expr: '(^|\n)([^\n]+:558:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L559:
        expect: true
        expr: '(^|\n)([^\n]+:559:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L560:
        expect: true
        expr: '(^|\n)([^\n]+:560:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L561:
        expect: true
        expr: '(^|\n)([^\n]+:561:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L562:
        expect: true
        expr: '(^|\n)([^\n]+:562:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L563:
        expect: true
        expr: '(^|\n)([^\n]+:563:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L564:
        expect: true
        expr: '(^|\n)([^\n]+:564:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L565:
        expect: true
        expr: '(^|\n)([^\n]+:565:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L566:
        expect: true
        expr: '(^|\n)([^\n]+:566:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L567:
        expect: true
        expr: '(^|\n)([^\n]+:567:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L568:
        expect: true
        expr: '(^|\n)([^\n]+:568:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L569:
        expect: true
        expr: '(^|\n)([^\n]+:569:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L570:
        expect: true
        expr: '(^|\n)([^\n]+:570:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L571:
        expect: true
        expr: '(^|\n)([^\n]+:571:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L572:
        expect: true
        expr: '(^|\n)([^\n]+:572:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L573:
        expect: true
        expr: '(^|\n)([^\n]+:573:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L574:
        expect: true
        expr: '(^|\n)([^\n]+:574:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L575:
        expect: true
        expr: '(^|\n)([^\n]+:575:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L576:
        expect: true
        expr: '(^|\n)([^\n]+:576:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L577:
        expect: true
        expr: '(^|\n)([^\n]+:577:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L578:
        expect: true
        expr: '(^|\n)([^\n]+:578:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L579:
        expect: true
        expr: '(^|\n)([^\n]+:579:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L580:
        expect: true
        expr: '(^|\n)([^\n]+:580:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L581:
        expect: true
        expr: '(^|\n)([^\n]+:581:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L582:
        expect: true
        expr: '(^|\n)([^\n]+:582:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L583:
        expect: true
        expr: '(^|\n)([^\n]+:583:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L584:
        expect: true
        expr: '(^|\n)([^\n]+:584:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L585:
        expect: true
        expr: '(^|\n)([^\n]+:585:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L586:
        expect: true
        expr: '(^|\n)([^\n]+:586:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L587:
        expect: true
        expr: '(^|\n)([^\n]+:587:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L588:
        expect: true
        expr: '(^|\n)([^\n]+:588:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L589:
        expect: true
        expr: '(^|\n)([^\n]+:589:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L590:
        expect: true
        expr: '(^|\n)([^\n]+:590:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L591:
        expect: true
        expr: '(^|\n)([^\n]+:591:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L592:
        expect: true
        expr: '(^|\n)([^\n]+:592:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L593:
        expect: true
        expr: '(^|\n)([^\n]+:593:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L594:
        expect: true
        expr: '(^|\n)([^\n]+:594:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L595:
        expect: true
        expr: '(^|\n)([^\n]+:595:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L596:
        expect: true
        expr: '(^|\n)([^\n]+:596:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L597:
        expect: true
        expr: '(^|\n)([^\n]+:597:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L598:
        expect: true
        expr: '(^|\n)([^\n]+:598:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L599:
        expect: true
        expr: '(^|\n)([^\n]+:599:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L600:
        expect: true
        expr: '(^|\n)([^\n]+:600:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L601:
        expect: true
        expr: '(^|\n)([^\n]+:601:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L602:
        expect: true
        expr: '(^|\n)([^\n]+:602:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L603:
        expect: true
        expr: '(^|\n)([^\n]+:603:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L604:
        expect: true
        expr: '(^|\n)([^\n]+:604:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L605:
        expect: true
        expr: '(^|\n)([^\n]+:605:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L606:
        expect: true
        expr: '(^|\n)([^\n]+:606:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L607:
        expect: true
        expr: '(^|\n)([^\n]+:607:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L608:
        expect: true
        expr: '(^|\n)([^\n]+:608:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L609:
        expect: true
        expr: '(^|\n)([^\n]+:609:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L610:
        expect: true
        expr: '(^|\n)([^\n]+:610:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L611:
        expect: true
        expr: '(^|\n)([^\n]+:611:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L612:
        expect: true
        expr: '(^|\n)([^\n]+:612:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L613:
        expect: true
        expr: '(^|\n)([^\n]+:613:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L614:
        expect: true
        expr: '(^|\n)([^\n]+:614:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L615:
        expect: true
        expr: '(^|\n)([^\n]+:615:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L616:
        expect: true
        expr: '(^|\n)([^\n]+:616:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L617:
        expect: true
        expr: '(^|\n)([^\n]+:617:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L618:
        expect: true
        expr: '(^|\n)([^\n]+:618:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L619:
        expect: true
        expr: '(^|\n)([^\n]+:619:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L620:
        expect: true
        expr: '(^|\n)([^\n]+:620:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L621:
        expect: true
        expr: '(^|\n)([^\n]+:621:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L622:
        expect: true
        expr: '(^|\n)([^\n]+:622:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L623:
        expect: true
        expr: '(^|\n)([^\n]+:623:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L624:
        expect: true
        expr: '(^|\n)([^\n]+:624:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L625:
        expect: true
        expr: '(^|\n)([^\n]+:625:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L626:
        expect: true
        expr: '(^|\n)([^\n]+:626:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L627:
        expect: true
        expr: '(^|\n)([^\n]+:627:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L628:
        expect: true
        expr: '(^|\n)([^\n]+:628:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L629:
        expect: true
        expr: '(^|\n)([^\n]+:629:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L630:
        expect: true
        expr: '(^|\n)([^\n]+:630:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L631:
        expect: true
        expr: '(^|\n)([^\n]+:631:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L632:
        expect: true
        expr: '(^|\n)([^\n]+:632:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L633:
        expect: true
        expr: '(^|\n)([^\n]+:633:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L634:
        expect: true
        expr: '(^|\n)([^\n]+:634:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L635:
        expect: true
        expr: '(^|\n)([^\n]+:635:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L636:
        expect: true
        expr: '(^|\n)([^\n]+:636:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L637:
        expect: true
        expr: '(^|\n)([^\n]+:637:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L638:
        expect: true
        expr: '(^|\n)([^\n]+:638:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L639:
        expect: true
        expr: '(^|\n)([^\n]+:639:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L640:
        expect: true
        expr: '(^|\n)([^\n]+:640:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L641:
        expect: true
        expr: '(^|\n)([^\n]+:641:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L642:
        expect: true
        expr: '(^|\n)([^\n]+:642:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L643:
        expect: true
        expr: '(^|\n)([^\n]+:643:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L644:
        expect: true
        expr: '(^|\n)([^\n]+:644:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L645:
        expect: true
        expr: '(^|\n)([^\n]+:645:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L646:
        expect: true
        expr: '(^|\n)([^\n]+:646:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L647:
        expect: true
        expr: '(^|\n)([^\n]+:647:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L648:
        expect: true
        expr: '(^|\n)([^\n]+:648:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L649:
        expect: true
        expr: '(^|\n)([^\n]+:649:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L650:
        expect: true
        expr: '(^|\n)([^\n]+:650:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L651:
        expect: true
        expr: '(^|\n)([^\n]+:651:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L652:
        expect: true
        expr: '(^|\n)([^\n]+:652:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L653:
        expect: true
        expr: '(^|\n)([^\n]+:653:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L654:
        expect: true
        expr: '(^|\n)([^\n]+:654:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L655:
        expect: true
        expr: '(^|\n)([^\n]+:655:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L656:
        expect: true
        expr: '(^|\n)([^\n]+:656:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L657:
        expect: true
        expr: '(^|\n)([^\n]+:657:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L658:
        expect: true
        expr: '(^|\n)([^\n]+:658:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L659:
        expect: true
        expr: '(^|\n)([^\n]+:659:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L660:
        expect: true
        expr: '(^|\n)([^\n]+:660:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L661:
        expect: true
        expr: '(^|\n)([^\n]+:661:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L662:
        expect: true
        expr: '(^|\n)([^\n]+:662:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L663:
        expect: true
        expr: '(^|\n)([^\n]+:663:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L664:
        expect: true
        expr: '(^|\n)([^\n]+:664:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L665:
        expect: true
        expr: '(^|\n)([^\n]+:665:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L666:
        expect: true
        expr: '(^|\n)([^\n]+:666:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_int128-types-1_578:
  build:
    cflags: "-Wc++-compat  -std=gnu99\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/int128-types-1.c'
    sources:
      binary: int128-types-1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L100:
        expect: true
        expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L109:
        expect: true
        expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L117:
        expect: true
        expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L118:
        expect: true
        expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L119:
        expect: true
        expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L123:
        expect: true
        expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L126:
        expect: true
        expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+:129:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L130:
        expect: true
        expr: '(^|\n)([^\n]+:130:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L132:
        expect: true
        expr: '(^|\n)([^\n]+:132:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+:133:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L138:
        expect: true
        expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L139:
        expect: true
        expr: '(^|\n)([^\n]+:139:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L140:
        expect: true
        expr: '(^|\n)([^\n]+:140:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L141:
        expect: true
        expr: '(^|\n)([^\n]+:141:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+:142:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L145:
        expect: true
        expr: '(^|\n)([^\n]+:145:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L149:
        expect: true
        expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+:152:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+:154:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+:155:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L160:
        expect: true
        expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L161:
        expect: true
        expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L162:
        expect: true
        expr: '(^|\n)([^\n]+:162:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L163:
        expect: true
        expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+:166:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L167:
        expect: true
        expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L168:
        expect: true
        expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L169:
        expect: true
        expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L170:
        expect: true
        expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L171:
        expect: true
        expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+:172:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L173:
        expect: true
        expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L174:
        expect: true
        expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+:177:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L179:
        expect: true
        expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L181:
        expect: true
        expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L182:
        expect: true
        expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L185:
        expect: true
        expr: '(^|\n)([^\n]+:185:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L188:
        expect: true
        expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L189:
        expect: true
        expr: '(^|\n)([^\n]+:189:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L191:
        expect: true
        expr: '(^|\n)([^\n]+:191:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L192:
        expect: true
        expr: '(^|\n)([^\n]+:192:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L194:
        expect: true
        expr: '(^|\n)([^\n]+:194:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L195:
        expect: true
        expr: '(^|\n)([^\n]+:195:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+:196:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+:197:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L198:
        expect: true
        expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L199:
        expect: true
        expr: '(^|\n)([^\n]+:199:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L200:
        expect: true
        expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L201:
        expect: true
        expr: '(^|\n)([^\n]+:201:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L202:
        expect: true
        expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L203:
        expect: true
        expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L204:
        expect: true
        expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L205:
        expect: true
        expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L206:
        expect: true
        expr: '(^|\n)([^\n]+:206:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L207:
        expect: true
        expr: '(^|\n)([^\n]+:207:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L208:
        expect: true
        expr: '(^|\n)([^\n]+:208:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L209:
        expect: true
        expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L210:
        expect: true
        expr: '(^|\n)([^\n]+:210:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L211:
        expect: true
        expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L213:
        expect: true
        expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L216:
        expect: true
        expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L217:
        expect: true
        expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L218:
        expect: true
        expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L219:
        expect: true
        expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L220:
        expect: true
        expr: '(^|\n)([^\n]+:220:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L221:
        expect: true
        expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L222:
        expect: true
        expr: '(^|\n)([^\n]+:222:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L223:
        expect: true
        expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L224:
        expect: true
        expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L225:
        expect: true
        expr: '(^|\n)([^\n]+:225:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L226:
        expect: true
        expr: '(^|\n)([^\n]+:226:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L228:
        expect: true
        expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L229:
        expect: true
        expr: '(^|\n)([^\n]+:229:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L230:
        expect: true
        expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L231:
        expect: true
        expr: '(^|\n)([^\n]+:231:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L232:
        expect: true
        expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L233:
        expect: true
        expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L234:
        expect: true
        expr: '(^|\n)([^\n]+:234:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L235:
        expect: true
        expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L236:
        expect: true
        expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L237:
        expect: true
        expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L238:
        expect: true
        expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L239:
        expect: true
        expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L240:
        expect: true
        expr: '(^|\n)([^\n]+:240:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L241:
        expect: true
        expr: '(^|\n)([^\n]+:241:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L242:
        expect: true
        expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L243:
        expect: true
        expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L244:
        expect: true
        expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L245:
        expect: true
        expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L246:
        expect: true
        expr: '(^|\n)([^\n]+:246:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L247:
        expect: true
        expr: '(^|\n)([^\n]+:247:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L248:
        expect: true
        expr: '(^|\n)([^\n]+:248:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L249:
        expect: true
        expr: '(^|\n)([^\n]+:249:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L250:
        expect: true
        expr: '(^|\n)([^\n]+:250:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L251:
        expect: true
        expr: '(^|\n)([^\n]+:251:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L252:
        expect: true
        expr: '(^|\n)([^\n]+:252:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L253:
        expect: true
        expr: '(^|\n)([^\n]+:253:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L254:
        expect: true
        expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L255:
        expect: true
        expr: '(^|\n)([^\n]+:255:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L256:
        expect: true
        expr: '(^|\n)([^\n]+:256:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L257:
        expect: true
        expr: '(^|\n)([^\n]+:257:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L258:
        expect: true
        expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L259:
        expect: true
        expr: '(^|\n)([^\n]+:259:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L260:
        expect: true
        expr: '(^|\n)([^\n]+:260:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L261:
        expect: true
        expr: '(^|\n)([^\n]+:261:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L262:
        expect: true
        expr: '(^|\n)([^\n]+:262:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L263:
        expect: true
        expr: '(^|\n)([^\n]+:263:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L264:
        expect: true
        expr: '(^|\n)([^\n]+:264:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L265:
        expect: true
        expr: '(^|\n)([^\n]+:265:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L266:
        expect: true
        expr: '(^|\n)([^\n]+:266:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L267:
        expect: true
        expr: '(^|\n)([^\n]+:267:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L268:
        expect: true
        expr: '(^|\n)([^\n]+:268:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L269:
        expect: true
        expr: '(^|\n)([^\n]+:269:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L270:
        expect: true
        expr: '(^|\n)([^\n]+:270:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L271:
        expect: true
        expr: '(^|\n)([^\n]+:271:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L272:
        expect: true
        expr: '(^|\n)([^\n]+:272:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L273:
        expect: true
        expr: '(^|\n)([^\n]+:273:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L274:
        expect: true
        expr: '(^|\n)([^\n]+:274:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L275:
        expect: true
        expr: '(^|\n)([^\n]+:275:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L276:
        expect: true
        expr: '(^|\n)([^\n]+:276:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L277:
        expect: true
        expr: '(^|\n)([^\n]+:277:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L278:
        expect: true
        expr: '(^|\n)([^\n]+:278:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L279:
        expect: true
        expr: '(^|\n)([^\n]+:279:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L280:
        expect: true
        expr: '(^|\n)([^\n]+:280:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L281:
        expect: true
        expr: '(^|\n)([^\n]+:281:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L282:
        expect: true
        expr: '(^|\n)([^\n]+:282:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L283:
        expect: true
        expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L284:
        expect: true
        expr: '(^|\n)([^\n]+:284:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L285:
        expect: true
        expr: '(^|\n)([^\n]+:285:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L286:
        expect: true
        expr: '(^|\n)([^\n]+:286:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L287:
        expect: true
        expr: '(^|\n)([^\n]+:287:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L288:
        expect: true
        expr: '(^|\n)([^\n]+:288:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L289:
        expect: true
        expr: '(^|\n)([^\n]+:289:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L290:
        expect: true
        expr: '(^|\n)([^\n]+:290:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L291:
        expect: true
        expr: '(^|\n)([^\n]+:291:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L292:
        expect: true
        expr: '(^|\n)([^\n]+:292:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L293:
        expect: true
        expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L294:
        expect: true
        expr: '(^|\n)([^\n]+:294:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L295:
        expect: true
        expr: '(^|\n)([^\n]+:295:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L296:
        expect: true
        expr: '(^|\n)([^\n]+:296:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L297:
        expect: true
        expr: '(^|\n)([^\n]+:297:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L298:
        expect: true
        expr: '(^|\n)([^\n]+:298:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L299:
        expect: true
        expr: '(^|\n)([^\n]+:299:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L300:
        expect: true
        expr: '(^|\n)([^\n]+:300:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L301:
        expect: true
        expr: '(^|\n)([^\n]+:301:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L302:
        expect: true
        expr: '(^|\n)([^\n]+:302:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L303:
        expect: true
        expr: '(^|\n)([^\n]+:303:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L304:
        expect: true
        expr: '(^|\n)([^\n]+:304:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L305:
        expect: true
        expr: '(^|\n)([^\n]+:305:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L306:
        expect: true
        expr: '(^|\n)([^\n]+:306:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L307:
        expect: true
        expr: '(^|\n)([^\n]+:307:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L308:
        expect: true
        expr: '(^|\n)([^\n]+:308:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L309:
        expect: true
        expr: '(^|\n)([^\n]+:309:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L310:
        expect: true
        expr: '(^|\n)([^\n]+:310:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L311:
        expect: true
        expr: '(^|\n)([^\n]+:311:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L312:
        expect: true
        expr: '(^|\n)([^\n]+:312:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L313:
        expect: true
        expr: '(^|\n)([^\n]+:313:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L314:
        expect: true
        expr: '(^|\n)([^\n]+:314:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L315:
        expect: true
        expr: '(^|\n)([^\n]+:315:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L316:
        expect: true
        expr: '(^|\n)([^\n]+:316:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L317:
        expect: true
        expr: '(^|\n)([^\n]+:317:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L318:
        expect: true
        expr: '(^|\n)([^\n]+:318:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L319:
        expect: true
        expr: '(^|\n)([^\n]+:319:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L320:
        expect: true
        expr: '(^|\n)([^\n]+:320:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L321:
        expect: true
        expr: '(^|\n)([^\n]+:321:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L322:
        expect: true
        expr: '(^|\n)([^\n]+:322:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L323:
        expect: true
        expr: '(^|\n)([^\n]+:323:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L324:
        expect: true
        expr: '(^|\n)([^\n]+:324:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L325:
        expect: true
        expr: '(^|\n)([^\n]+:325:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L326:
        expect: true
        expr: '(^|\n)([^\n]+:326:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L327:
        expect: true
        expr: '(^|\n)([^\n]+:327:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L328:
        expect: true
        expr: '(^|\n)([^\n]+:328:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L329:
        expect: true
        expr: '(^|\n)([^\n]+:329:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L330:
        expect: true
        expr: '(^|\n)([^\n]+:330:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L331:
        expect: true
        expr: '(^|\n)([^\n]+:331:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L332:
        expect: true
        expr: '(^|\n)([^\n]+:332:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L333:
        expect: true
        expr: '(^|\n)([^\n]+:333:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L334:
        expect: true
        expr: '(^|\n)([^\n]+:334:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L335:
        expect: true
        expr: '(^|\n)([^\n]+:335:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L336:
        expect: true
        expr: '(^|\n)([^\n]+:336:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L337:
        expect: true
        expr: '(^|\n)([^\n]+:337:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L338:
        expect: true
        expr: '(^|\n)([^\n]+:338:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L339:
        expect: true
        expr: '(^|\n)([^\n]+:339:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L340:
        expect: true
        expr: '(^|\n)([^\n]+:340:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L341:
        expect: true
        expr: '(^|\n)([^\n]+:341:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L342:
        expect: true
        expr: '(^|\n)([^\n]+:342:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L343:
        expect: true
        expr: '(^|\n)([^\n]+:343:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L344:
        expect: true
        expr: '(^|\n)([^\n]+:344:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L345:
        expect: true
        expr: '(^|\n)([^\n]+:345:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L346:
        expect: true
        expr: '(^|\n)([^\n]+:346:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L347:
        expect: true
        expr: '(^|\n)([^\n]+:347:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L348:
        expect: true
        expr: '(^|\n)([^\n]+:348:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L349:
        expect: true
        expr: '(^|\n)([^\n]+:349:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L350:
        expect: true
        expr: '(^|\n)([^\n]+:350:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L351:
        expect: true
        expr: '(^|\n)([^\n]+:351:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L352:
        expect: true
        expr: '(^|\n)([^\n]+:352:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L353:
        expect: true
        expr: '(^|\n)([^\n]+:353:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L354:
        expect: true
        expr: '(^|\n)([^\n]+:354:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L355:
        expect: true
        expr: '(^|\n)([^\n]+:355:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L356:
        expect: true
        expr: '(^|\n)([^\n]+:356:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L357:
        expect: true
        expr: '(^|\n)([^\n]+:357:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L358:
        expect: true
        expr: '(^|\n)([^\n]+:358:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L359:
        expect: true
        expr: '(^|\n)([^\n]+:359:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L360:
        expect: true
        expr: '(^|\n)([^\n]+:360:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L361:
        expect: true
        expr: '(^|\n)([^\n]+:361:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L362:
        expect: true
        expr: '(^|\n)([^\n]+:362:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L363:
        expect: true
        expr: '(^|\n)([^\n]+:363:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L364:
        expect: true
        expr: '(^|\n)([^\n]+:364:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L365:
        expect: true
        expr: '(^|\n)([^\n]+:365:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L366:
        expect: true
        expr: '(^|\n)([^\n]+:366:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L367:
        expect: true
        expr: '(^|\n)([^\n]+:367:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L368:
        expect: true
        expr: '(^|\n)([^\n]+:368:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L369:
        expect: true
        expr: '(^|\n)([^\n]+:369:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L370:
        expect: true
        expr: '(^|\n)([^\n]+:370:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L371:
        expect: true
        expr: '(^|\n)([^\n]+:371:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L372:
        expect: true
        expr: '(^|\n)([^\n]+:372:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L373:
        expect: true
        expr: '(^|\n)([^\n]+:373:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L374:
        expect: true
        expr: '(^|\n)([^\n]+:374:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L375:
        expect: true
        expr: '(^|\n)([^\n]+:375:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L376:
        expect: true
        expr: '(^|\n)([^\n]+:376:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L377:
        expect: true
        expr: '(^|\n)([^\n]+:377:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L378:
        expect: true
        expr: '(^|\n)([^\n]+:378:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L379:
        expect: true
        expr: '(^|\n)([^\n]+:379:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L380:
        expect: true
        expr: '(^|\n)([^\n]+:380:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L381:
        expect: true
        expr: '(^|\n)([^\n]+:381:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L382:
        expect: true
        expr: '(^|\n)([^\n]+:382:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L383:
        expect: true
        expr: '(^|\n)([^\n]+:383:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L384:
        expect: true
        expr: '(^|\n)([^\n]+:384:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L385:
        expect: true
        expr: '(^|\n)([^\n]+:385:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L386:
        expect: true
        expr: '(^|\n)([^\n]+:386:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L387:
        expect: true
        expr: '(^|\n)([^\n]+:387:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L388:
        expect: true
        expr: '(^|\n)([^\n]+:388:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L389:
        expect: true
        expr: '(^|\n)([^\n]+:389:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L390:
        expect: true
        expr: '(^|\n)([^\n]+:390:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L391:
        expect: true
        expr: '(^|\n)([^\n]+:391:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L392:
        expect: true
        expr: '(^|\n)([^\n]+:392:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L393:
        expect: true
        expr: '(^|\n)([^\n]+:393:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L394:
        expect: true
        expr: '(^|\n)([^\n]+:394:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L395:
        expect: true
        expr: '(^|\n)([^\n]+:395:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L396:
        expect: true
        expr: '(^|\n)([^\n]+:396:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L397:
        expect: true
        expr: '(^|\n)([^\n]+:397:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L398:
        expect: true
        expr: '(^|\n)([^\n]+:398:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L399:
        expect: true
        expr: '(^|\n)([^\n]+:399:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L400:
        expect: true
        expr: '(^|\n)([^\n]+:400:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L401:
        expect: true
        expr: '(^|\n)([^\n]+:401:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L402:
        expect: true
        expr: '(^|\n)([^\n]+:402:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L403:
        expect: true
        expr: '(^|\n)([^\n]+:403:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L404:
        expect: true
        expr: '(^|\n)([^\n]+:404:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L405:
        expect: true
        expr: '(^|\n)([^\n]+:405:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L406:
        expect: true
        expr: '(^|\n)([^\n]+:406:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L407:
        expect: true
        expr: '(^|\n)([^\n]+:407:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L408:
        expect: true
        expr: '(^|\n)([^\n]+:408:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L409:
        expect: true
        expr: '(^|\n)([^\n]+:409:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L410:
        expect: true
        expr: '(^|\n)([^\n]+:410:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L411:
        expect: true
        expr: '(^|\n)([^\n]+:411:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L412:
        expect: true
        expr: '(^|\n)([^\n]+:412:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L413:
        expect: true
        expr: '(^|\n)([^\n]+:413:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L414:
        expect: true
        expr: '(^|\n)([^\n]+:414:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L415:
        expect: true
        expr: '(^|\n)([^\n]+:415:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L416:
        expect: true
        expr: '(^|\n)([^\n]+:416:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L417:
        expect: true
        expr: '(^|\n)([^\n]+:417:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L418:
        expect: true
        expr: '(^|\n)([^\n]+:418:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L419:
        expect: true
        expr: '(^|\n)([^\n]+:419:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L420:
        expect: true
        expr: '(^|\n)([^\n]+:420:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L421:
        expect: true
        expr: '(^|\n)([^\n]+:421:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L422:
        expect: true
        expr: '(^|\n)([^\n]+:422:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L423:
        expect: true
        expr: '(^|\n)([^\n]+:423:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L424:
        expect: true
        expr: '(^|\n)([^\n]+:424:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L425:
        expect: true
        expr: '(^|\n)([^\n]+:425:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L426:
        expect: true
        expr: '(^|\n)([^\n]+:426:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L427:
        expect: true
        expr: '(^|\n)([^\n]+:427:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L428:
        expect: true
        expr: '(^|\n)([^\n]+:428:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L429:
        expect: true
        expr: '(^|\n)([^\n]+:429:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L430:
        expect: true
        expr: '(^|\n)([^\n]+:430:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L431:
        expect: true
        expr: '(^|\n)([^\n]+:431:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L432:
        expect: true
        expr: '(^|\n)([^\n]+:432:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L433:
        expect: true
        expr: '(^|\n)([^\n]+:433:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L434:
        expect: true
        expr: '(^|\n)([^\n]+:434:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L435:
        expect: true
        expr: '(^|\n)([^\n]+:435:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L436:
        expect: true
        expr: '(^|\n)([^\n]+:436:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L437:
        expect: true
        expr: '(^|\n)([^\n]+:437:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L438:
        expect: true
        expr: '(^|\n)([^\n]+:438:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L439:
        expect: true
        expr: '(^|\n)([^\n]+:439:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L440:
        expect: true
        expr: '(^|\n)([^\n]+:440:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L441:
        expect: true
        expr: '(^|\n)([^\n]+:441:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L442:
        expect: true
        expr: '(^|\n)([^\n]+:442:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L443:
        expect: true
        expr: '(^|\n)([^\n]+:443:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L444:
        expect: true
        expr: '(^|\n)([^\n]+:444:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L445:
        expect: true
        expr: '(^|\n)([^\n]+:445:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L446:
        expect: true
        expr: '(^|\n)([^\n]+:446:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L447:
        expect: true
        expr: '(^|\n)([^\n]+:447:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L448:
        expect: true
        expr: '(^|\n)([^\n]+:448:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L449:
        expect: true
        expr: '(^|\n)([^\n]+:449:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L450:
        expect: true
        expr: '(^|\n)([^\n]+:450:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L451:
        expect: true
        expr: '(^|\n)([^\n]+:451:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L452:
        expect: true
        expr: '(^|\n)([^\n]+:452:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L453:
        expect: true
        expr: '(^|\n)([^\n]+:453:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L454:
        expect: true
        expr: '(^|\n)([^\n]+:454:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L455:
        expect: true
        expr: '(^|\n)([^\n]+:455:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L456:
        expect: true
        expr: '(^|\n)([^\n]+:456:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L457:
        expect: true
        expr: '(^|\n)([^\n]+:457:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L458:
        expect: true
        expr: '(^|\n)([^\n]+:458:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L459:
        expect: true
        expr: '(^|\n)([^\n]+:459:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L460:
        expect: true
        expr: '(^|\n)([^\n]+:460:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L461:
        expect: true
        expr: '(^|\n)([^\n]+:461:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L462:
        expect: true
        expr: '(^|\n)([^\n]+:462:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L463:
        expect: true
        expr: '(^|\n)([^\n]+:463:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L464:
        expect: true
        expr: '(^|\n)([^\n]+:464:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L465:
        expect: true
        expr: '(^|\n)([^\n]+:465:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L466:
        expect: true
        expr: '(^|\n)([^\n]+:466:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L467:
        expect: true
        expr: '(^|\n)([^\n]+:467:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L468:
        expect: true
        expr: '(^|\n)([^\n]+:468:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L469:
        expect: true
        expr: '(^|\n)([^\n]+:469:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L470:
        expect: true
        expr: '(^|\n)([^\n]+:470:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L471:
        expect: true
        expr: '(^|\n)([^\n]+:471:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L472:
        expect: true
        expr: '(^|\n)([^\n]+:472:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L473:
        expect: true
        expr: '(^|\n)([^\n]+:473:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L474:
        expect: true
        expr: '(^|\n)([^\n]+:474:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L475:
        expect: true
        expr: '(^|\n)([^\n]+:475:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L476:
        expect: true
        expr: '(^|\n)([^\n]+:476:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L477:
        expect: true
        expr: '(^|\n)([^\n]+:477:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L478:
        expect: true
        expr: '(^|\n)([^\n]+:478:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L479:
        expect: true
        expr: '(^|\n)([^\n]+:479:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L480:
        expect: true
        expr: '(^|\n)([^\n]+:480:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L481:
        expect: true
        expr: '(^|\n)([^\n]+:481:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L482:
        expect: true
        expr: '(^|\n)([^\n]+:482:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L483:
        expect: true
        expr: '(^|\n)([^\n]+:483:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L484:
        expect: true
        expr: '(^|\n)([^\n]+:484:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L485:
        expect: true
        expr: '(^|\n)([^\n]+:485:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L486:
        expect: true
        expr: '(^|\n)([^\n]+:486:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L487:
        expect: true
        expr: '(^|\n)([^\n]+:487:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L488:
        expect: true
        expr: '(^|\n)([^\n]+:488:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L489:
        expect: true
        expr: '(^|\n)([^\n]+:489:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L490:
        expect: true
        expr: '(^|\n)([^\n]+:490:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L491:
        expect: true
        expr: '(^|\n)([^\n]+:491:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L492:
        expect: true
        expr: '(^|\n)([^\n]+:492:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L493:
        expect: true
        expr: '(^|\n)([^\n]+:493:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L494:
        expect: true
        expr: '(^|\n)([^\n]+:494:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L495:
        expect: true
        expr: '(^|\n)([^\n]+:495:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L496:
        expect: true
        expr: '(^|\n)([^\n]+:496:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L497:
        expect: true
        expr: '(^|\n)([^\n]+:497:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L498:
        expect: true
        expr: '(^|\n)([^\n]+:498:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L499:
        expect: true
        expr: '(^|\n)([^\n]+:499:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L500:
        expect: true
        expr: '(^|\n)([^\n]+:500:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L501:
        expect: true
        expr: '(^|\n)([^\n]+:501:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L502:
        expect: true
        expr: '(^|\n)([^\n]+:502:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L503:
        expect: true
        expr: '(^|\n)([^\n]+:503:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L504:
        expect: true
        expr: '(^|\n)([^\n]+:504:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L505:
        expect: true
        expr: '(^|\n)([^\n]+:505:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L506:
        expect: true
        expr: '(^|\n)([^\n]+:506:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L507:
        expect: true
        expr: '(^|\n)([^\n]+:507:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L508:
        expect: true
        expr: '(^|\n)([^\n]+:508:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L509:
        expect: true
        expr: '(^|\n)([^\n]+:509:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L510:
        expect: true
        expr: '(^|\n)([^\n]+:510:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L511:
        expect: true
        expr: '(^|\n)([^\n]+:511:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L512:
        expect: true
        expr: '(^|\n)([^\n]+:512:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L513:
        expect: true
        expr: '(^|\n)([^\n]+:513:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L514:
        expect: true
        expr: '(^|\n)([^\n]+:514:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L515:
        expect: true
        expr: '(^|\n)([^\n]+:515:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L516:
        expect: true
        expr: '(^|\n)([^\n]+:516:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L517:
        expect: true
        expr: '(^|\n)([^\n]+:517:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L518:
        expect: true
        expr: '(^|\n)([^\n]+:518:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L519:
        expect: true
        expr: '(^|\n)([^\n]+:519:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L520:
        expect: true
        expr: '(^|\n)([^\n]+:520:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L521:
        expect: true
        expr: '(^|\n)([^\n]+:521:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L522:
        expect: true
        expr: '(^|\n)([^\n]+:522:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L523:
        expect: true
        expr: '(^|\n)([^\n]+:523:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L524:
        expect: true
        expr: '(^|\n)([^\n]+:524:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L525:
        expect: true
        expr: '(^|\n)([^\n]+:525:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L526:
        expect: true
        expr: '(^|\n)([^\n]+:526:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L527:
        expect: true
        expr: '(^|\n)([^\n]+:527:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L528:
        expect: true
        expr: '(^|\n)([^\n]+:528:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L529:
        expect: true
        expr: '(^|\n)([^\n]+:529:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L530:
        expect: true
        expr: '(^|\n)([^\n]+:530:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L531:
        expect: true
        expr: '(^|\n)([^\n]+:531:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L532:
        expect: true
        expr: '(^|\n)([^\n]+:532:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L533:
        expect: true
        expr: '(^|\n)([^\n]+:533:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L534:
        expect: true
        expr: '(^|\n)([^\n]+:534:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L535:
        expect: true
        expr: '(^|\n)([^\n]+:535:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L536:
        expect: true
        expr: '(^|\n)([^\n]+:536:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L537:
        expect: true
        expr: '(^|\n)([^\n]+:537:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L538:
        expect: true
        expr: '(^|\n)([^\n]+:538:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L539:
        expect: true
        expr: '(^|\n)([^\n]+:539:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L540:
        expect: true
        expr: '(^|\n)([^\n]+:540:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L541:
        expect: true
        expr: '(^|\n)([^\n]+:541:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L542:
        expect: true
        expr: '(^|\n)([^\n]+:542:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L543:
        expect: true
        expr: '(^|\n)([^\n]+:543:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L544:
        expect: true
        expr: '(^|\n)([^\n]+:544:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L545:
        expect: true
        expr: '(^|\n)([^\n]+:545:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L546:
        expect: true
        expr: '(^|\n)([^\n]+:546:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L547:
        expect: true
        expr: '(^|\n)([^\n]+:547:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L548:
        expect: true
        expr: '(^|\n)([^\n]+:548:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L549:
        expect: true
        expr: '(^|\n)([^\n]+:549:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L550:
        expect: true
        expr: '(^|\n)([^\n]+:550:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L551:
        expect: true
        expr: '(^|\n)([^\n]+:551:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L552:
        expect: true
        expr: '(^|\n)([^\n]+:552:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L553:
        expect: true
        expr: '(^|\n)([^\n]+:553:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L554:
        expect: true
        expr: '(^|\n)([^\n]+:554:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L555:
        expect: true
        expr: '(^|\n)([^\n]+:555:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L556:
        expect: true
        expr: '(^|\n)([^\n]+:556:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L557:
        expect: true
        expr: '(^|\n)([^\n]+:557:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L558:
        expect: true
        expr: '(^|\n)([^\n]+:558:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L559:
        expect: true
        expr: '(^|\n)([^\n]+:559:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L560:
        expect: true
        expr: '(^|\n)([^\n]+:560:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L561:
        expect: true
        expr: '(^|\n)([^\n]+:561:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L562:
        expect: true
        expr: '(^|\n)([^\n]+:562:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L563:
        expect: true
        expr: '(^|\n)([^\n]+:563:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L564:
        expect: true
        expr: '(^|\n)([^\n]+:564:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L565:
        expect: true
        expr: '(^|\n)([^\n]+:565:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L566:
        expect: true
        expr: '(^|\n)([^\n]+:566:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L567:
        expect: true
        expr: '(^|\n)([^\n]+:567:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L568:
        expect: true
        expr: '(^|\n)([^\n]+:568:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L569:
        expect: true
        expr: '(^|\n)([^\n]+:569:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L570:
        expect: true
        expr: '(^|\n)([^\n]+:570:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L571:
        expect: true
        expr: '(^|\n)([^\n]+:571:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L572:
        expect: true
        expr: '(^|\n)([^\n]+:572:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L573:
        expect: true
        expr: '(^|\n)([^\n]+:573:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L574:
        expect: true
        expr: '(^|\n)([^\n]+:574:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L575:
        expect: true
        expr: '(^|\n)([^\n]+:575:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L576:
        expect: true
        expr: '(^|\n)([^\n]+:576:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L577:
        expect: true
        expr: '(^|\n)([^\n]+:577:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L578:
        expect: true
        expr: '(^|\n)([^\n]+:578:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L579:
        expect: true
        expr: '(^|\n)([^\n]+:579:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L580:
        expect: true
        expr: '(^|\n)([^\n]+:580:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L581:
        expect: true
        expr: '(^|\n)([^\n]+:581:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L582:
        expect: true
        expr: '(^|\n)([^\n]+:582:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L583:
        expect: true
        expr: '(^|\n)([^\n]+:583:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L584:
        expect: true
        expr: '(^|\n)([^\n]+:584:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L585:
        expect: true
        expr: '(^|\n)([^\n]+:585:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L586:
        expect: true
        expr: '(^|\n)([^\n]+:586:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L587:
        expect: true
        expr: '(^|\n)([^\n]+:587:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L588:
        expect: true
        expr: '(^|\n)([^\n]+:588:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L589:
        expect: true
        expr: '(^|\n)([^\n]+:589:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L590:
        expect: true
        expr: '(^|\n)([^\n]+:590:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L591:
        expect: true
        expr: '(^|\n)([^\n]+:591:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L592:
        expect: true
        expr: '(^|\n)([^\n]+:592:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L593:
        expect: true
        expr: '(^|\n)([^\n]+:593:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L594:
        expect: true
        expr: '(^|\n)([^\n]+:594:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L595:
        expect: true
        expr: '(^|\n)([^\n]+:595:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L596:
        expect: true
        expr: '(^|\n)([^\n]+:596:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L597:
        expect: true
        expr: '(^|\n)([^\n]+:597:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L598:
        expect: true
        expr: '(^|\n)([^\n]+:598:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L599:
        expect: true
        expr: '(^|\n)([^\n]+:599:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L600:
        expect: true
        expr: '(^|\n)([^\n]+:600:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L601:
        expect: true
        expr: '(^|\n)([^\n]+:601:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L602:
        expect: true
        expr: '(^|\n)([^\n]+:602:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L603:
        expect: true
        expr: '(^|\n)([^\n]+:603:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L604:
        expect: true
        expr: '(^|\n)([^\n]+:604:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L605:
        expect: true
        expr: '(^|\n)([^\n]+:605:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L606:
        expect: true
        expr: '(^|\n)([^\n]+:606:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L607:
        expect: true
        expr: '(^|\n)([^\n]+:607:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L608:
        expect: true
        expr: '(^|\n)([^\n]+:608:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L609:
        expect: true
        expr: '(^|\n)([^\n]+:609:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L610:
        expect: true
        expr: '(^|\n)([^\n]+:610:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L611:
        expect: true
        expr: '(^|\n)([^\n]+:611:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L612:
        expect: true
        expr: '(^|\n)([^\n]+:612:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L613:
        expect: true
        expr: '(^|\n)([^\n]+:613:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L614:
        expect: true
        expr: '(^|\n)([^\n]+:614:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L615:
        expect: true
        expr: '(^|\n)([^\n]+:615:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L616:
        expect: true
        expr: '(^|\n)([^\n]+:616:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L617:
        expect: true
        expr: '(^|\n)([^\n]+:617:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L618:
        expect: true
        expr: '(^|\n)([^\n]+:618:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L619:
        expect: true
        expr: '(^|\n)([^\n]+:619:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L620:
        expect: true
        expr: '(^|\n)([^\n]+:620:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L621:
        expect: true
        expr: '(^|\n)([^\n]+:621:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L622:
        expect: true
        expr: '(^|\n)([^\n]+:622:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L623:
        expect: true
        expr: '(^|\n)([^\n]+:623:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L624:
        expect: true
        expr: '(^|\n)([^\n]+:624:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L625:
        expect: true
        expr: '(^|\n)([^\n]+:625:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L626:
        expect: true
        expr: '(^|\n)([^\n]+:626:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L627:
        expect: true
        expr: '(^|\n)([^\n]+:627:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L628:
        expect: true
        expr: '(^|\n)([^\n]+:628:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L629:
        expect: true
        expr: '(^|\n)([^\n]+:629:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L630:
        expect: true
        expr: '(^|\n)([^\n]+:630:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L631:
        expect: true
        expr: '(^|\n)([^\n]+:631:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L632:
        expect: true
        expr: '(^|\n)([^\n]+:632:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L633:
        expect: true
        expr: '(^|\n)([^\n]+:633:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L634:
        expect: true
        expr: '(^|\n)([^\n]+:634:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L635:
        expect: true
        expr: '(^|\n)([^\n]+:635:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L636:
        expect: true
        expr: '(^|\n)([^\n]+:636:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L637:
        expect: true
        expr: '(^|\n)([^\n]+:637:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L638:
        expect: true
        expr: '(^|\n)([^\n]+:638:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L639:
        expect: true
        expr: '(^|\n)([^\n]+:639:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L640:
        expect: true
        expr: '(^|\n)([^\n]+:640:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L641:
        expect: true
        expr: '(^|\n)([^\n]+:641:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L642:
        expect: true
        expr: '(^|\n)([^\n]+:642:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L643:
        expect: true
        expr: '(^|\n)([^\n]+:643:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L644:
        expect: true
        expr: '(^|\n)([^\n]+:644:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L645:
        expect: true
        expr: '(^|\n)([^\n]+:645:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L646:
        expect: true
        expr: '(^|\n)([^\n]+:646:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L647:
        expect: true
        expr: '(^|\n)([^\n]+:647:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L648:
        expect: true
        expr: '(^|\n)([^\n]+:648:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L649:
        expect: true
        expr: '(^|\n)([^\n]+:649:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L650:
        expect: true
        expr: '(^|\n)([^\n]+:650:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L651:
        expect: true
        expr: '(^|\n)([^\n]+:651:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L652:
        expect: true
        expr: '(^|\n)([^\n]+:652:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L653:
        expect: true
        expr: '(^|\n)([^\n]+:653:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L654:
        expect: true
        expr: '(^|\n)([^\n]+:654:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L655:
        expect: true
        expr: '(^|\n)([^\n]+:655:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L656:
        expect: true
        expr: '(^|\n)([^\n]+:656:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L657:
        expect: true
        expr: '(^|\n)([^\n]+:657:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L658:
        expect: true
        expr: '(^|\n)([^\n]+:658:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L659:
        expect: true
        expr: '(^|\n)([^\n]+:659:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L660:
        expect: true
        expr: '(^|\n)([^\n]+:660:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L661:
        expect: true
        expr: '(^|\n)([^\n]+:661:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L662:
        expect: true
        expr: '(^|\n)([^\n]+:662:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L663:
        expect: true
        expr: '(^|\n)([^\n]+:663:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L664:
        expect: true
        expr: '(^|\n)([^\n]+:664:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L665:
        expect: true
        expr: '(^|\n)([^\n]+:665:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L666:
        expect: true
        expr: '(^|\n)([^\n]+:666:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_memset-array_1312:
  build:
    cflags: "-std=gnu++98 -Wmemset-elt-size\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/memset-array.c'
    sources:
      binary: memset-array.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("element size")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("element size")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("element size")[^\n]*\n?)+'
test_memset-array_1313:
  build:
    cflags: "-std=gnu++11 -Wmemset-elt-size\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/memset-array.c'
    sources:
      binary: memset-array.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("element size")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("element size")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("element size")[^\n]*\n?)+'
test_memset-array_1314:
  build:
    cflags: "-std=gnu++14 -Wmemset-elt-size\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/memset-array.c'
    sources:
      binary: memset-array.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("element size")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("element size")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("element size")[^\n]*\n?)+'
test_memset-array_190:
  build:
    cflags: "-Wc++-compat  -Wmemset-elt-size\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/memset-array.c'
    sources:
      binary: memset-array.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("element size")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("element size")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("element size")[^\n]*\n?)+'
test_memset-array_2071:
  build:
    cflags: "-Wc++-compat  -Wmemset-elt-size\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/memset-array.c'
    sources:
      binary: memset-array.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("element size")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("element size")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("element size")[^\n]*\n?)+'
test_memset-array_2804:
  build:
    cflags: "-std=gnu++98 -Wmemset-elt-size\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/memset-array.c'
    sources:
      binary: memset-array.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("element size")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("element size")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("element size")[^\n]*\n?)+'
test_memset-array_2805:
  build:
    cflags: "-std=gnu++11 -Wmemset-elt-size\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/memset-array.c'
    sources:
      binary: memset-array.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("element size")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("element size")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("element size")[^\n]*\n?)+'
test_memset-array_2806:
  build:
    cflags: "-std=gnu++14 -Wmemset-elt-size\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/memset-array.c'
    sources:
      binary: memset-array.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("element size")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("element size")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("element size")[^\n]*\n?)+'
test_memset-array_579:
  build:
    cflags: "-Wc++-compat  -Wmemset-elt-size\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/memset-array.c'
    sources:
      binary: memset-array.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("element size")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("element size")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("element size")[^\n]*\n?)+'
test_missing-header-1_1315:
  build:
    cflags: "-std=gnu++98 -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/missing-header-1.c'
    sources:
      binary: missing-header-1.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("10: this-file-does-not-exist.h:
          No such file or directory")[^\n]*\n?)+'
test_missing-header-1_1316:
  build:
    cflags: "-std=gnu++11 -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/missing-header-1.c'
    sources:
      binary: missing-header-1.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("10: this-file-does-not-exist.h:
          No such file or directory")[^\n]*\n?)+'
test_missing-header-1_1317:
  build:
    cflags: "-std=gnu++14 -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/missing-header-1.c'
    sources:
      binary: missing-header-1.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("10: this-file-does-not-exist.h:
          No such file or directory")[^\n]*\n?)+'
test_missing-header-1_191:
  build:
    cflags: "-Wc++-compat  -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/missing-header-1.c'
    sources:
      binary: missing-header-1.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("10: this-file-does-not-exist.h:
          No such file or directory")[^\n]*\n?)+'
test_missing-header-1_2072:
  build:
    cflags: "-Wc++-compat  -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/missing-header-1.c'
    sources:
      binary: missing-header-1.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("10: this-file-does-not-exist.h:
          No such file or directory")[^\n]*\n?)+'
test_missing-header-1_2807:
  build:
    cflags: "-std=gnu++98 -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/missing-header-1.c'
    sources:
      binary: missing-header-1.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("10: this-file-does-not-exist.h:
          No such file or directory")[^\n]*\n?)+'
test_missing-header-1_2808:
  build:
    cflags: "-std=gnu++11 -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/missing-header-1.c'
    sources:
      binary: missing-header-1.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("10: this-file-does-not-exist.h:
          No such file or directory")[^\n]*\n?)+'
test_missing-header-1_2809:
  build:
    cflags: "-std=gnu++14 -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/missing-header-1.c'
    sources:
      binary: missing-header-1.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("10: this-file-does-not-exist.h:
          No such file or directory")[^\n]*\n?)+'
test_missing-header-1_580:
  build:
    cflags: "-Wc++-compat  -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/missing-header-1.c'
    sources:
      binary: missing-header-1.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("10: this-file-does-not-exist.h:
          No such file or directory")[^\n]*\n?)+'
test_missing-header-2_1318:
  build:
    cflags: "-std=gnu++98 -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/missing-header-2.c'
    sources:
      binary: missing-header-2.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("10: this-file-does-not-exist.h:
          No such file or directory")[^\n]*\n?)+'
test_missing-header-2_1319:
  build:
    cflags: "-std=gnu++11 -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/missing-header-2.c'
    sources:
      binary: missing-header-2.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("10: this-file-does-not-exist.h:
          No such file or directory")[^\n]*\n?)+'
test_missing-header-2_1320:
  build:
    cflags: "-std=gnu++14 -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/missing-header-2.c'
    sources:
      binary: missing-header-2.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("10: this-file-does-not-exist.h:
          No such file or directory")[^\n]*\n?)+'
test_missing-header-2_192:
  build:
    cflags: "-Wc++-compat  -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/missing-header-2.c'
    sources:
      binary: missing-header-2.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("10: this-file-does-not-exist.h:
          No such file or directory")[^\n]*\n?)+'
test_missing-header-2_2073:
  build:
    cflags: "-Wc++-compat  -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/missing-header-2.c'
    sources:
      binary: missing-header-2.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("10: this-file-does-not-exist.h:
          No such file or directory")[^\n]*\n?)+'
test_missing-header-2_2810:
  build:
    cflags: "-std=gnu++98 -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/missing-header-2.c'
    sources:
      binary: missing-header-2.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("10: this-file-does-not-exist.h:
          No such file or directory")[^\n]*\n?)+'
test_missing-header-2_2811:
  build:
    cflags: "-std=gnu++11 -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/missing-header-2.c'
    sources:
      binary: missing-header-2.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("10: this-file-does-not-exist.h:
          No such file or directory")[^\n]*\n?)+'
test_missing-header-2_2812:
  build:
    cflags: "-std=gnu++14 -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/missing-header-2.c'
    sources:
      binary: missing-header-2.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("10: this-file-does-not-exist.h:
          No such file or directory")[^\n]*\n?)+'
test_missing-header-2_581:
  build:
    cflags: "-Wc++-compat  -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/missing-header-2.c'
    sources:
      binary: missing-header-2.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("10: this-file-does-not-exist.h:
          No such file or directory")[^\n]*\n?)+'
test_missing-header-3_1321:
  build:
    cflags: "-std=gnu++98 -fdiagnostics-show-caret -Wno-deprecated\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/missing-header-3.c'
    sources:
      binary: missing-header-3.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("9: this-file-does-not-exist.h:
          No such file or directory")[^\n]*\n?)+'
test_missing-header-3_1322:
  build:
    cflags: "-std=gnu++11 -fdiagnostics-show-caret -Wno-deprecated\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/missing-header-3.c'
    sources:
      binary: missing-header-3.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("9: this-file-does-not-exist.h:
          No such file or directory")[^\n]*\n?)+'
test_missing-header-3_1323:
  build:
    cflags: "-std=gnu++14 -fdiagnostics-show-caret -Wno-deprecated\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/missing-header-3.c'
    sources:
      binary: missing-header-3.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("9: this-file-does-not-exist.h:
          No such file or directory")[^\n]*\n?)+'
test_missing-header-3_193:
  build:
    cflags: "-Wc++-compat  -fdiagnostics-show-caret -Wno-deprecated\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/missing-header-3.c'
    sources:
      binary: missing-header-3.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("9: this-file-does-not-exist.h:
          No such file or directory")[^\n]*\n?)+'
test_missing-header-3_2074:
  build:
    cflags: "-Wc++-compat  -fdiagnostics-show-caret -Wno-deprecated\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/missing-header-3.c'
    sources:
      binary: missing-header-3.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("9: this-file-does-not-exist.h:
          No such file or directory")[^\n]*\n?)+'
test_missing-header-3_2813:
  build:
    cflags: "-std=gnu++98 -fdiagnostics-show-caret -Wno-deprecated\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/missing-header-3.c'
    sources:
      binary: missing-header-3.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("9: this-file-does-not-exist.h:
          No such file or directory")[^\n]*\n?)+'
test_missing-header-3_2814:
  build:
    cflags: "-std=gnu++11 -fdiagnostics-show-caret -Wno-deprecated\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/missing-header-3.c'
    sources:
      binary: missing-header-3.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("9: this-file-does-not-exist.h:
          No such file or directory")[^\n]*\n?)+'
test_missing-header-3_2815:
  build:
    cflags: "-std=gnu++14 -fdiagnostics-show-caret -Wno-deprecated\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/missing-header-3.c'
    sources:
      binary: missing-header-3.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("9: this-file-does-not-exist.h:
          No such file or directory")[^\n]*\n?)+'
test_missing-header-3_582:
  build:
    cflags: "-Wc++-compat  -fdiagnostics-show-caret -Wno-deprecated\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/missing-header-3.c'
    sources:
      binary: missing-header-3.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("9: this-file-does-not-exist.h:
          No such file or directory")[^\n]*\n?)+'
test_missing-header-4_1324:
  build:
    cflags: "-std=gnu++98 -fdiagnostics-show-caret -Wno-deprecated\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/missing-header-4.c'
    sources:
      binary: missing-header-4.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("9: this-file-does-not-exist.h:
          No such file or directory")[^\n]*\n?)+'
test_missing-header-4_1325:
  build:
    cflags: "-std=gnu++11 -fdiagnostics-show-caret -Wno-deprecated\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/missing-header-4.c'
    sources:
      binary: missing-header-4.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("9: this-file-does-not-exist.h:
          No such file or directory")[^\n]*\n?)+'
test_missing-header-4_1326:
  build:
    cflags: "-std=gnu++14 -fdiagnostics-show-caret -Wno-deprecated\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/missing-header-4.c'
    sources:
      binary: missing-header-4.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("9: this-file-does-not-exist.h:
          No such file or directory")[^\n]*\n?)+'
test_missing-header-4_194:
  build:
    cflags: "-Wc++-compat  -fdiagnostics-show-caret -Wno-deprecated\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/missing-header-4.c'
    sources:
      binary: missing-header-4.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("9: this-file-does-not-exist.h:
          No such file or directory")[^\n]*\n?)+'
test_missing-header-4_2075:
  build:
    cflags: "-Wc++-compat  -fdiagnostics-show-caret -Wno-deprecated\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/missing-header-4.c'
    sources:
      binary: missing-header-4.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("9: this-file-does-not-exist.h:
          No such file or directory")[^\n]*\n?)+'
test_missing-header-4_2816:
  build:
    cflags: "-std=gnu++98 -fdiagnostics-show-caret -Wno-deprecated\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/missing-header-4.c'
    sources:
      binary: missing-header-4.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("9: this-file-does-not-exist.h:
          No such file or directory")[^\n]*\n?)+'
test_missing-header-4_2817:
  build:
    cflags: "-std=gnu++11 -fdiagnostics-show-caret -Wno-deprecated\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/missing-header-4.c'
    sources:
      binary: missing-header-4.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("9: this-file-does-not-exist.h:
          No such file or directory")[^\n]*\n?)+'
test_missing-header-4_2818:
  build:
    cflags: "-std=gnu++14 -fdiagnostics-show-caret -Wno-deprecated\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/missing-header-4.c'
    sources:
      binary: missing-header-4.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("9: this-file-does-not-exist.h:
          No such file or directory")[^\n]*\n?)+'
test_missing-header-4_583:
  build:
    cflags: "-Wc++-compat  -fdiagnostics-show-caret -Wno-deprecated\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/missing-header-4.c'
    sources:
      binary: missing-header-4.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("9: this-file-does-not-exist.h:
          No such file or directory")[^\n]*\n?)+'
test_nonnull-1_1327:
  build:
    cflags: "-std=gnu++98 -Wnonnull-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/nonnull-1.c'
    sources:
      binary: nonnull-1.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
test_nonnull-1_1328:
  build:
    cflags: "-std=gnu++11 -Wnonnull-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/nonnull-1.c'
    sources:
      binary: nonnull-1.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
test_nonnull-1_1329:
  build:
    cflags: "-std=gnu++14 -Wnonnull-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/nonnull-1.c'
    sources:
      binary: nonnull-1.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
test_nonnull-1_195:
  build:
    cflags: "-Wc++-compat  -Wnonnull-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/nonnull-1.c'
    sources:
      binary: nonnull-1.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
test_nonnull-1_2076:
  build:
    cflags: "-Wc++-compat  -Wnonnull-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/nonnull-1.c'
    sources:
      binary: nonnull-1.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
test_nonnull-1_2819:
  build:
    cflags: "-std=gnu++98 -Wnonnull-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/nonnull-1.c'
    sources:
      binary: nonnull-1.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
test_nonnull-1_2820:
  build:
    cflags: "-std=gnu++11 -Wnonnull-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/nonnull-1.c'
    sources:
      binary: nonnull-1.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
test_nonnull-1_2821:
  build:
    cflags: "-std=gnu++14 -Wnonnull-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/nonnull-1.c'
    sources:
      binary: nonnull-1.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
test_nonnull-1_584:
  build:
    cflags: "-Wc++-compat  -Wnonnull-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/nonnull-1.c'
    sources:
      binary: nonnull-1.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
test_nonnull-2_1330:
  build:
    cflags: "-std=gnu++98 -Wnonnull-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/nonnull-2.c'
    sources:
      binary: nonnull-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
test_nonnull-2_1331:
  build:
    cflags: "-std=gnu++11 -Wnonnull-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/nonnull-2.c'
    sources:
      binary: nonnull-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
test_nonnull-2_1332:
  build:
    cflags: "-std=gnu++14 -Wnonnull-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/nonnull-2.c'
    sources:
      binary: nonnull-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
test_nonnull-2_196:
  build:
    cflags: "-Wc++-compat  -Wnonnull-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/nonnull-2.c'
    sources:
      binary: nonnull-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
test_nonnull-2_2077:
  build:
    cflags: "-Wc++-compat  -Wnonnull-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/nonnull-2.c'
    sources:
      binary: nonnull-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
test_nonnull-2_2822:
  build:
    cflags: "-std=gnu++98 -Wnonnull-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/nonnull-2.c'
    sources:
      binary: nonnull-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
test_nonnull-2_2823:
  build:
    cflags: "-std=gnu++11 -Wnonnull-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/nonnull-2.c'
    sources:
      binary: nonnull-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
test_nonnull-2_2824:
  build:
    cflags: "-std=gnu++14 -Wnonnull-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/nonnull-2.c'
    sources:
      binary: nonnull-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
test_nonnull-2_585:
  build:
    cflags: "-Wc++-compat  -Wnonnull-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/nonnull-2.c'
    sources:
      binary: nonnull-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument")[^\n]*\n?)+'
test_nonnull-3_1333:
  build:
    cflags: "-std=gnu++98 -Wnonnull-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/nonnull-3.c'
    sources:
      binary: nonnull-3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument \''p\''
          compared to NULL")[^\n]*\n?)+'
test_nonnull-3_1334:
  build:
    cflags: "-std=gnu++11 -Wnonnull-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/nonnull-3.c'
    sources:
      binary: nonnull-3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument \''p\''
          compared to NULL")[^\n]*\n?)+'
test_nonnull-3_1335:
  build:
    cflags: "-std=gnu++14 -Wnonnull-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/nonnull-3.c'
    sources:
      binary: nonnull-3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument \''p\''
          compared to NULL")[^\n]*\n?)+'
test_nonnull-3_197:
  build:
    cflags: "-Wc++-compat  -Wnonnull-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/nonnull-3.c'
    sources:
      binary: nonnull-3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument \''p\''
          compared to NULL")[^\n]*\n?)+'
test_nonnull-3_2078:
  build:
    cflags: "-Wc++-compat  -Wnonnull-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/nonnull-3.c'
    sources:
      binary: nonnull-3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument \''p\''
          compared to NULL")[^\n]*\n?)+'
test_nonnull-3_2825:
  build:
    cflags: "-std=gnu++98 -Wnonnull-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/nonnull-3.c'
    sources:
      binary: nonnull-3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument \''p\''
          compared to NULL")[^\n]*\n?)+'
test_nonnull-3_2826:
  build:
    cflags: "-std=gnu++11 -Wnonnull-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/nonnull-3.c'
    sources:
      binary: nonnull-3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument \''p\''
          compared to NULL")[^\n]*\n?)+'
test_nonnull-3_2827:
  build:
    cflags: "-std=gnu++14 -Wnonnull-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/nonnull-3.c'
    sources:
      binary: nonnull-3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument \''p\''
          compared to NULL")[^\n]*\n?)+'
test_nonnull-3_586:
  build:
    cflags: "-Wc++-compat  -Wnonnull-compare\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/nonnull-3.c'
    sources:
      binary: nonnull-3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("nonnull argument \''p\''
          compared to NULL")[^\n]*\n?)+'
test_opaque-vector_1336:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/opaque-vector.c'
    sources:
      binary: opaque-vector.s
  group: GRPSERIAL
test_opaque-vector_1337:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/opaque-vector.c'
    sources:
      binary: opaque-vector.s
  group: GRPSERIAL
test_opaque-vector_1338:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/opaque-vector.c'
    sources:
      binary: opaque-vector.s
  group: GRPSERIAL
test_opaque-vector_198:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/opaque-vector.c'
    sources:
      binary: opaque-vector.s
  group: GRPSERIAL
test_opaque-vector_2079:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/opaque-vector.c'
    sources:
      binary: opaque-vector.s
  group: GRPSERIAL
test_opaque-vector_2828:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/opaque-vector.c'
    sources:
      binary: opaque-vector.s
  group: GRPSERIAL
test_opaque-vector_2829:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/opaque-vector.c'
    sources:
      binary: opaque-vector.s
  group: GRPSERIAL
test_opaque-vector_2830:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/opaque-vector.c'
    sources:
      binary: opaque-vector.s
  group: GRPSERIAL
test_opaque-vector_587:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/opaque-vector.c'
    sources:
      binary: opaque-vector.s
  group: GRPSERIAL
test_pr19807-1_1339:
  build:
    cflags: -std=gnu++98 -O
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr19807-1.c'
    sources:
      binary: pr19807-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr19807-1_1340:
  build:
    cflags: -std=gnu++11 -O
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr19807-1.c'
    sources:
      binary: pr19807-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr19807-1_1341:
  build:
    cflags: -std=gnu++14 -O
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr19807-1.c'
    sources:
      binary: pr19807-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr19807-1_199:
  build:
    cflags: -Wc++-compat  -O
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr19807-1.c'
    sources:
      binary: pr19807-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr19807-1_2080:
  build:
    cflags: -Wc++-compat  -O
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr19807-1.c'
    sources:
      binary: pr19807-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr19807-1_2831:
  build:
    cflags: -std=gnu++98 -O
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr19807-1.c'
    sources:
      binary: pr19807-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr19807-1_2832:
  build:
    cflags: -std=gnu++11 -O
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr19807-1.c'
    sources:
      binary: pr19807-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr19807-1_2833:
  build:
    cflags: -std=gnu++14 -O
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr19807-1.c'
    sources:
      binary: pr19807-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr19807-1_588:
  build:
    cflags: -Wc++-compat  -O
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr19807-1.c'
    sources:
      binary: pr19807-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr20000_1342:
  build:
    cflags: "-std=gnu++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr20000.c'
    sources:
      binary: pr20000.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("function declared
          \''noreturn\'' has a \''return\'' statement")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("\''noreturn\'' function
          does return")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("function declared
          \''noreturn\'' has a \''return\'' statement")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("\''noreturn\'' function
          does return")[^\n]*\n?)+'
test_pr20000_1343:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr20000.c'
    sources:
      binary: pr20000.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("function declared
          \''noreturn\'' has a \''return\'' statement")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("\''noreturn\'' function
          does return")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("function declared
          \''noreturn\'' has a \''return\'' statement")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("\''noreturn\'' function
          does return")[^\n]*\n?)+'
test_pr20000_1344:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr20000.c'
    sources:
      binary: pr20000.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("function declared
          \''noreturn\'' has a \''return\'' statement")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("\''noreturn\'' function
          does return")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("function declared
          \''noreturn\'' has a \''return\'' statement")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("\''noreturn\'' function
          does return")[^\n]*\n?)+'
test_pr20000_200:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr20000.c'
    sources:
      binary: pr20000.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("function declared
          \''noreturn\'' has a \''return\'' statement")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("\''noreturn\'' function
          does return")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("function declared
          \''noreturn\'' has a \''return\'' statement")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("\''noreturn\'' function
          does return")[^\n]*\n?)+'
test_pr20000_2081:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr20000.c'
    sources:
      binary: pr20000.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("function declared
          \''noreturn\'' has a \''return\'' statement")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("\''noreturn\'' function
          does return")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("function declared
          \''noreturn\'' has a \''return\'' statement")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("\''noreturn\'' function
          does return")[^\n]*\n?)+'
test_pr20000_2834:
  build:
    cflags: "-std=gnu++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr20000.c'
    sources:
      binary: pr20000.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("function declared
          \''noreturn\'' has a \''return\'' statement")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("\''noreturn\'' function
          does return")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("function declared
          \''noreturn\'' has a \''return\'' statement")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("\''noreturn\'' function
          does return")[^\n]*\n?)+'
test_pr20000_2835:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr20000.c'
    sources:
      binary: pr20000.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("function declared
          \''noreturn\'' has a \''return\'' statement")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("\''noreturn\'' function
          does return")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("function declared
          \''noreturn\'' has a \''return\'' statement")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("\''noreturn\'' function
          does return")[^\n]*\n?)+'
test_pr20000_2836:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr20000.c'
    sources:
      binary: pr20000.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("function declared
          \''noreturn\'' has a \''return\'' statement")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("\''noreturn\'' function
          does return")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("function declared
          \''noreturn\'' has a \''return\'' statement")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("\''noreturn\'' function
          does return")[^\n]*\n?)+'
test_pr20000_589:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr20000.c'
    sources:
      binary: pr20000.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("function declared
          \''noreturn\'' has a \''return\'' statement")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("\''noreturn\'' function
          does return")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("function declared
          \''noreturn\'' has a \''return\'' statement")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("\''noreturn\'' function
          does return")[^\n]*\n?)+'
test_pr20318_1345:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr20318.c'
    sources:
      binary: pr20318.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not returning
          a pointer")[^\n]*\n?)+'
test_pr20318_1346:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr20318.c'
    sources:
      binary: pr20318.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not returning
          a pointer")[^\n]*\n?)+'
test_pr20318_1347:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr20318.c'
    sources:
      binary: pr20318.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not returning
          a pointer")[^\n]*\n?)+'
test_pr20318_201:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr20318.c'
    sources:
      binary: pr20318.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not returning
          a pointer")[^\n]*\n?)+'
test_pr20318_2082:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr20318.c'
    sources:
      binary: pr20318.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not returning
          a pointer")[^\n]*\n?)+'
test_pr20318_2837:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr20318.c'
    sources:
      binary: pr20318.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not returning
          a pointer")[^\n]*\n?)+'
test_pr20318_2838:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr20318.c'
    sources:
      binary: pr20318.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not returning
          a pointer")[^\n]*\n?)+'
test_pr20318_2839:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr20318.c'
    sources:
      binary: pr20318.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not returning
          a pointer")[^\n]*\n?)+'
test_pr20318_590:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr20318.c'
    sources:
      binary: pr20318.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not returning
          a pointer")[^\n]*\n?)+'
test_pr27336_1348:
  build:
    cflags: "-std=gnu++98 -O2 -fdelete-null-pointer-checks -fdump-tree-vrp1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr27336.c'
    sources:
      binary: pr27336.s
  group: GRPSERIAL
test_pr27336_1349:
  build:
    cflags: "-std=gnu++11 -O2 -fdelete-null-pointer-checks -fdump-tree-vrp1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr27336.c'
    sources:
      binary: pr27336.s
  group: GRPSERIAL
test_pr27336_1350:
  build:
    cflags: "-std=gnu++14 -O2 -fdelete-null-pointer-checks -fdump-tree-vrp1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr27336.c'
    sources:
      binary: pr27336.s
  group: GRPSERIAL
test_pr27336_202:
  build:
    cflags: "-Wc++-compat  -O2 -fdelete-null-pointer-checks -fdump-tree-vrp1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr27336.c'
    sources:
      binary: pr27336.s
  group: GRPSERIAL
test_pr27336_2083:
  build:
    cflags: "-Wc++-compat  -O2 -fdelete-null-pointer-checks -fdump-tree-vrp1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr27336.c'
    sources:
      binary: pr27336.s
  group: GRPSERIAL
test_pr27336_2840:
  build:
    cflags: "-std=gnu++98 -O2 -fdelete-null-pointer-checks -fdump-tree-vrp1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr27336.c'
    sources:
      binary: pr27336.s
  group: GRPSERIAL
test_pr27336_2841:
  build:
    cflags: "-std=gnu++11 -O2 -fdelete-null-pointer-checks -fdump-tree-vrp1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr27336.c'
    sources:
      binary: pr27336.s
  group: GRPSERIAL
test_pr27336_2842:
  build:
    cflags: "-std=gnu++14 -O2 -fdelete-null-pointer-checks -fdump-tree-vrp1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr27336.c'
    sources:
      binary: pr27336.s
  group: GRPSERIAL
test_pr27336_591:
  build:
    cflags: "-Wc++-compat  -O2 -fdelete-null-pointer-checks -fdump-tree-vrp1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr27336.c'
    sources:
      binary: pr27336.s
  group: GRPSERIAL
test_pr28656_1351:
  build:
    cflags: "-std=gnu++98 -Wnonnull\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr28656.c'
    sources:
      binary: pr28656.s
  group: GRPSERIAL
  validate:
    match:
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 1")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 2")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 1")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 3")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 4")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 5")[^\n]*\n?)+'
test_pr28656_1352:
  build:
    cflags: "-std=gnu++11 -Wnonnull\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr28656.c'
    sources:
      binary: pr28656.s
  group: GRPSERIAL
  validate:
    match:
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 1")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 2")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 1")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 3")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 4")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 5")[^\n]*\n?)+'
test_pr28656_1353:
  build:
    cflags: "-std=gnu++14 -Wnonnull\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr28656.c'
    sources:
      binary: pr28656.s
  group: GRPSERIAL
  validate:
    match:
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 1")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 2")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 1")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 3")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 4")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 5")[^\n]*\n?)+'
test_pr28656_203:
  build:
    cflags: "-Wc++-compat  -Wnonnull\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr28656.c'
    sources:
      binary: pr28656.s
  group: GRPSERIAL
  validate:
    match:
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 1")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 2")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 1")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 3")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 4")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 5")[^\n]*\n?)+'
test_pr28656_2084:
  build:
    cflags: "-Wc++-compat  -Wnonnull\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr28656.c'
    sources:
      binary: pr28656.s
  group: GRPSERIAL
  validate:
    match:
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 1")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 2")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 1")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 3")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 4")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 5")[^\n]*\n?)+'
test_pr28656_2843:
  build:
    cflags: "-std=gnu++98 -Wnonnull\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr28656.c'
    sources:
      binary: pr28656.s
  group: GRPSERIAL
  validate:
    match:
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 1")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 2")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 1")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 3")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 4")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 5")[^\n]*\n?)+'
test_pr28656_2844:
  build:
    cflags: "-std=gnu++11 -Wnonnull\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr28656.c'
    sources:
      binary: pr28656.s
  group: GRPSERIAL
  validate:
    match:
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 1")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 2")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 1")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 3")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 4")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 5")[^\n]*\n?)+'
test_pr28656_2845:
  build:
    cflags: "-std=gnu++14 -Wnonnull\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr28656.c'
    sources:
      binary: pr28656.s
  group: GRPSERIAL
  validate:
    match:
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 1")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 2")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 1")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 3")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 4")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 5")[^\n]*\n?)+'
test_pr28656_592:
  build:
    cflags: "-Wc++-compat  -Wnonnull\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr28656.c'
    sources:
      binary: pr28656.s
  group: GRPSERIAL
  validate:
    match:
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 1")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 2")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 1")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 3")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 4")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("null argument where
          non-null required\\[^\\n\\r\\]*argument 5")[^\n]*\n?)+'
test_pr30020_1354:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr30020.c'
    sources:
      binary: pr30020.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("25:upper value in
          case")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("25:case label value")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("25:case label value")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("25:lower value in case")[^\n]*\n?)+'
test_pr30020_1355:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr30020.c'
    sources:
      binary: pr30020.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("25:upper value in
          case")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("25:case label value")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("25:case label value")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("25:lower value in case")[^\n]*\n?)+'
test_pr30020_1356:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr30020.c'
    sources:
      binary: pr30020.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("25:upper value in
          case")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("25:case label value")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("25:case label value")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("25:lower value in case")[^\n]*\n?)+'
test_pr30020_204:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr30020.c'
    sources:
      binary: pr30020.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("25:upper value in
          case")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("25:case label value")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("25:case label value")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("25:lower value in case")[^\n]*\n?)+'
test_pr30020_2085:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr30020.c'
    sources:
      binary: pr30020.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("25:upper value in
          case")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("25:case label value")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("25:case label value")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("25:lower value in case")[^\n]*\n?)+'
test_pr30020_2846:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr30020.c'
    sources:
      binary: pr30020.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("25:upper value in
          case")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("25:case label value")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("25:case label value")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("25:lower value in case")[^\n]*\n?)+'
test_pr30020_2847:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr30020.c'
    sources:
      binary: pr30020.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("25:upper value in
          case")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("25:case label value")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("25:case label value")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("25:lower value in case")[^\n]*\n?)+'
test_pr30020_2848:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr30020.c'
    sources:
      binary: pr30020.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("25:upper value in
          case")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("25:case label value")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("25:case label value")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("25:lower value in case")[^\n]*\n?)+'
test_pr30020_593:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr30020.c'
    sources:
      binary: pr30020.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("25:upper value in
          case")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("25:case label value")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("25:case label value")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("25:lower value in case")[^\n]*\n?)+'
test_pr33193_1357:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr33193.c'
    sources:
      binary: pr33193.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong type argument")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong type argument")[^\n]*\n?)+'
test_pr33193_1358:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr33193.c'
    sources:
      binary: pr33193.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong type argument")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong type argument")[^\n]*\n?)+'
test_pr33193_1359:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr33193.c'
    sources:
      binary: pr33193.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong type argument")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong type argument")[^\n]*\n?)+'
test_pr33193_205:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr33193.c'
    sources:
      binary: pr33193.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong type argument")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong type argument")[^\n]*\n?)+'
test_pr33193_2086:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr33193.c'
    sources:
      binary: pr33193.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong type argument")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong type argument")[^\n]*\n?)+'
test_pr33193_2849:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr33193.c'
    sources:
      binary: pr33193.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong type argument")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong type argument")[^\n]*\n?)+'
test_pr33193_2850:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr33193.c'
    sources:
      binary: pr33193.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong type argument")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong type argument")[^\n]*\n?)+'
test_pr33193_2851:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr33193.c'
    sources:
      binary: pr33193.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong type argument")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong type argument")[^\n]*\n?)+'
test_pr33193_594:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr33193.c'
    sources:
      binary: pr33193.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong type argument")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong type argument")[^\n]*\n?)+'
test_pr33763_1360:
  build:
    cflags: "-std=gnu++98 -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr33763.c'
    sources:
      binary: pr33763.s
  group: GRPSERIAL
test_pr33763_1361:
  build:
    cflags: "-std=gnu++11 -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr33763.c'
    sources:
      binary: pr33763.s
  group: GRPSERIAL
test_pr33763_1362:
  build:
    cflags: "-std=gnu++14 -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr33763.c'
    sources:
      binary: pr33763.s
  group: GRPSERIAL
test_pr33763_206:
  build:
    cflags: "-Wc++-compat  -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr33763.c'
    sources:
      binary: pr33763.s
  group: GRPSERIAL
test_pr33763_2087:
  build:
    cflags: "-Wc++-compat  -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr33763.c'
    sources:
      binary: pr33763.s
  group: GRPSERIAL
test_pr33763_2852:
  build:
    cflags: "-std=gnu++98 -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr33763.c'
    sources:
      binary: pr33763.s
  group: GRPSERIAL
test_pr33763_2853:
  build:
    cflags: "-std=gnu++11 -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr33763.c'
    sources:
      binary: pr33763.s
  group: GRPSERIAL
test_pr33763_2854:
  build:
    cflags: "-std=gnu++14 -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr33763.c'
    sources:
      binary: pr33763.s
  group: GRPSERIAL
test_pr33763_595:
  build:
    cflags: "-Wc++-compat  -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr33763.c'
    sources:
      binary: pr33763.s
  group: GRPSERIAL
test_pr35503-1_1363:
  build:
    cflags: "-std=gnu++98 -Wrestrict\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr35503-1.c'
    sources:
      binary: pr35503-1.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("passing argument 1
          to restrict-qualified parameter aliases with argument 3")[^\n]*\n?)+'
test_pr35503-1_1364:
  build:
    cflags: "-std=gnu++11 -Wrestrict\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr35503-1.c'
    sources:
      binary: pr35503-1.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("passing argument 1
          to restrict-qualified parameter aliases with argument 3")[^\n]*\n?)+'
test_pr35503-1_1365:
  build:
    cflags: "-std=gnu++14 -Wrestrict\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr35503-1.c'
    sources:
      binary: pr35503-1.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("passing argument 1
          to restrict-qualified parameter aliases with argument 3")[^\n]*\n?)+'
test_pr35503-1_207:
  build:
    cflags: "-Wc++-compat  -Wrestrict\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr35503-1.c'
    sources:
      binary: pr35503-1.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("passing argument 1
          to restrict-qualified parameter aliases with argument 3")[^\n]*\n?)+'
test_pr35503-1_2088:
  build:
    cflags: "-Wc++-compat  -Wrestrict\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr35503-1.c'
    sources:
      binary: pr35503-1.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("passing argument 1
          to restrict-qualified parameter aliases with argument 3")[^\n]*\n?)+'
test_pr35503-1_2855:
  build:
    cflags: "-std=gnu++98 -Wrestrict\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr35503-1.c'
    sources:
      binary: pr35503-1.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("passing argument 1
          to restrict-qualified parameter aliases with argument 3")[^\n]*\n?)+'
test_pr35503-1_2856:
  build:
    cflags: "-std=gnu++11 -Wrestrict\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr35503-1.c'
    sources:
      binary: pr35503-1.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("passing argument 1
          to restrict-qualified parameter aliases with argument 3")[^\n]*\n?)+'
test_pr35503-1_2857:
  build:
    cflags: "-std=gnu++14 -Wrestrict\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr35503-1.c'
    sources:
      binary: pr35503-1.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("passing argument 1
          to restrict-qualified parameter aliases with argument 3")[^\n]*\n?)+'
test_pr35503-1_596:
  build:
    cflags: "-Wc++-compat  -Wrestrict\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr35503-1.c'
    sources:
      binary: pr35503-1.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("passing argument 1
          to restrict-qualified parameter aliases with argument 3")[^\n]*\n?)+'
test_pr35503-2_1366:
  build:
    cflags: "-std=gnu++98 -fdiagnostics-show-caret -Wrestrict\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr35503-2.c'
    sources:
      binary: pr35503-2.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("passing argument 1
          to restrict-qualified parameter aliases with arguments 3, 4")[^\n]*\n?)+'
test_pr35503-2_1367:
  build:
    cflags: "-std=gnu++11 -fdiagnostics-show-caret -Wrestrict\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr35503-2.c'
    sources:
      binary: pr35503-2.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("passing argument 1
          to restrict-qualified parameter aliases with arguments 3, 4")[^\n]*\n?)+'
test_pr35503-2_1368:
  build:
    cflags: "-std=gnu++14 -fdiagnostics-show-caret -Wrestrict\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr35503-2.c'
    sources:
      binary: pr35503-2.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("passing argument 1
          to restrict-qualified parameter aliases with arguments 3, 4")[^\n]*\n?)+'
test_pr35503-2_208:
  build:
    cflags: "-Wc++-compat  -fdiagnostics-show-caret -Wrestrict\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr35503-2.c'
    sources:
      binary: pr35503-2.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("passing argument 1
          to restrict-qualified parameter aliases with arguments 3, 4")[^\n]*\n?)+'
test_pr35503-2_2089:
  build:
    cflags: "-Wc++-compat  -fdiagnostics-show-caret -Wrestrict\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr35503-2.c'
    sources:
      binary: pr35503-2.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("passing argument 1
          to restrict-qualified parameter aliases with arguments 3, 4")[^\n]*\n?)+'
test_pr35503-2_2858:
  build:
    cflags: "-std=gnu++98 -fdiagnostics-show-caret -Wrestrict\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr35503-2.c'
    sources:
      binary: pr35503-2.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("passing argument 1
          to restrict-qualified parameter aliases with arguments 3, 4")[^\n]*\n?)+'
test_pr35503-2_2859:
  build:
    cflags: "-std=gnu++11 -fdiagnostics-show-caret -Wrestrict\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr35503-2.c'
    sources:
      binary: pr35503-2.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("passing argument 1
          to restrict-qualified parameter aliases with arguments 3, 4")[^\n]*\n?)+'
test_pr35503-2_2860:
  build:
    cflags: "-std=gnu++14 -fdiagnostics-show-caret -Wrestrict\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr35503-2.c'
    sources:
      binary: pr35503-2.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("passing argument 1
          to restrict-qualified parameter aliases with arguments 3, 4")[^\n]*\n?)+'
test_pr35503-2_597:
  build:
    cflags: "-Wc++-compat  -fdiagnostics-show-caret -Wrestrict\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr35503-2.c'
    sources:
      binary: pr35503-2.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("passing argument 1
          to restrict-qualified parameter aliases with arguments 3, 4")[^\n]*\n?)+'
test_pr35503-3_1369:
  build:
    cflags: "-std=gnu++98 -Wrestrict\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr35503-3.c'
    sources:
      binary: pr35503-3.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("passing argument 2
          to restrict-qualified parameter aliases with argument 1")[^\n]*\n?)+'
test_pr35503-3_1370:
  build:
    cflags: "-std=gnu++11 -Wrestrict\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr35503-3.c'
    sources:
      binary: pr35503-3.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("passing argument 2
          to restrict-qualified parameter aliases with argument 1")[^\n]*\n?)+'
test_pr35503-3_1371:
  build:
    cflags: "-std=gnu++14 -Wrestrict\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr35503-3.c'
    sources:
      binary: pr35503-3.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("passing argument 2
          to restrict-qualified parameter aliases with argument 1")[^\n]*\n?)+'
test_pr35503-3_209:
  build:
    cflags: "-Wc++-compat  -Wrestrict\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr35503-3.c'
    sources:
      binary: pr35503-3.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("passing argument 2
          to restrict-qualified parameter aliases with argument 1")[^\n]*\n?)+'
test_pr35503-3_2090:
  build:
    cflags: "-Wc++-compat  -Wrestrict\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr35503-3.c'
    sources:
      binary: pr35503-3.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("passing argument 2
          to restrict-qualified parameter aliases with argument 1")[^\n]*\n?)+'
test_pr35503-3_2861:
  build:
    cflags: "-std=gnu++98 -Wrestrict\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr35503-3.c'
    sources:
      binary: pr35503-3.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("passing argument 2
          to restrict-qualified parameter aliases with argument 1")[^\n]*\n?)+'
test_pr35503-3_2862:
  build:
    cflags: "-std=gnu++11 -Wrestrict\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr35503-3.c'
    sources:
      binary: pr35503-3.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("passing argument 2
          to restrict-qualified parameter aliases with argument 1")[^\n]*\n?)+'
test_pr35503-3_2863:
  build:
    cflags: "-std=gnu++14 -Wrestrict\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr35503-3.c'
    sources:
      binary: pr35503-3.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("passing argument 2
          to restrict-qualified parameter aliases with argument 1")[^\n]*\n?)+'
test_pr35503-3_598:
  build:
    cflags: "-Wc++-compat  -Wrestrict\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr35503-3.c'
    sources:
      binary: pr35503-3.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("passing argument 2
          to restrict-qualified parameter aliases with argument 1")[^\n]*\n?)+'
test_pr36282-1_1372:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36282-1.c'
    sources:
      binary: pr36282-1.s
  group: GRPSERIAL
test_pr36282-1_1373:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36282-1.c'
    sources:
      binary: pr36282-1.s
  group: GRPSERIAL
test_pr36282-1_1374:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36282-1.c'
    sources:
      binary: pr36282-1.s
  group: GRPSERIAL
test_pr36282-1_2091:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36282-1.c'
    sources:
      binary: pr36282-1.s
  group: GRPSERIAL
test_pr36282-1_210:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36282-1.c'
    sources:
      binary: pr36282-1.s
  group: GRPSERIAL
test_pr36282-1_2864:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36282-1.c'
    sources:
      binary: pr36282-1.s
  group: GRPSERIAL
test_pr36282-1_2865:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36282-1.c'
    sources:
      binary: pr36282-1.s
  group: GRPSERIAL
test_pr36282-1_2866:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36282-1.c'
    sources:
      binary: pr36282-1.s
  group: GRPSERIAL
test_pr36282-1_599:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36282-1.c'
    sources:
      binary: pr36282-1.s
  group: GRPSERIAL
test_pr36282-2_1375:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36282-2.c'
    sources:
      binary: pr36282-2.s
  group: GRPSERIAL
test_pr36282-2_1376:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36282-2.c'
    sources:
      binary: pr36282-2.s
  group: GRPSERIAL
test_pr36282-2_1377:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36282-2.c'
    sources:
      binary: pr36282-2.s
  group: GRPSERIAL
test_pr36282-2_2092:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36282-2.c'
    sources:
      binary: pr36282-2.s
  group: GRPSERIAL
test_pr36282-2_211:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36282-2.c'
    sources:
      binary: pr36282-2.s
  group: GRPSERIAL
test_pr36282-2_2867:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36282-2.c'
    sources:
      binary: pr36282-2.s
  group: GRPSERIAL
test_pr36282-2_2868:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36282-2.c'
    sources:
      binary: pr36282-2.s
  group: GRPSERIAL
test_pr36282-2_2869:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36282-2.c'
    sources:
      binary: pr36282-2.s
  group: GRPSERIAL
test_pr36282-2_600:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36282-2.c'
    sources:
      binary: pr36282-2.s
  group: GRPSERIAL
test_pr36282-3_1378:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36282-3.c'
    sources:
      binary: pr36282-3.s
  group: GRPSERIAL
test_pr36282-3_1379:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36282-3.c'
    sources:
      binary: pr36282-3.s
  group: GRPSERIAL
test_pr36282-3_1380:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36282-3.c'
    sources:
      binary: pr36282-3.s
  group: GRPSERIAL
test_pr36282-3_2093:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36282-3.c'
    sources:
      binary: pr36282-3.s
  group: GRPSERIAL
test_pr36282-3_212:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36282-3.c'
    sources:
      binary: pr36282-3.s
  group: GRPSERIAL
test_pr36282-3_2870:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36282-3.c'
    sources:
      binary: pr36282-3.s
  group: GRPSERIAL
test_pr36282-3_2871:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36282-3.c'
    sources:
      binary: pr36282-3.s
  group: GRPSERIAL
test_pr36282-3_2872:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36282-3.c'
    sources:
      binary: pr36282-3.s
  group: GRPSERIAL
test_pr36282-3_601:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36282-3.c'
    sources:
      binary: pr36282-3.s
  group: GRPSERIAL
test_pr36282-4_1381:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36282-4.c'
    sources:
      binary: pr36282-4.s
  group: GRPSERIAL
test_pr36282-4_1382:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36282-4.c'
    sources:
      binary: pr36282-4.s
  group: GRPSERIAL
test_pr36282-4_1383:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36282-4.c'
    sources:
      binary: pr36282-4.s
  group: GRPSERIAL
test_pr36282-4_2094:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36282-4.c'
    sources:
      binary: pr36282-4.s
  group: GRPSERIAL
test_pr36282-4_213:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36282-4.c'
    sources:
      binary: pr36282-4.s
  group: GRPSERIAL
test_pr36282-4_2873:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36282-4.c'
    sources:
      binary: pr36282-4.s
  group: GRPSERIAL
test_pr36282-4_2874:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36282-4.c'
    sources:
      binary: pr36282-4.s
  group: GRPSERIAL
test_pr36282-4_2875:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36282-4.c'
    sources:
      binary: pr36282-4.s
  group: GRPSERIAL
test_pr36282-4_602:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36282-4.c'
    sources:
      binary: pr36282-4.s
  group: GRPSERIAL
test_pr36513-2_1384:
  build:
    cflags: "-std=gnu++98 -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36513-2.c'
    sources:
      binary: pr36513-2.s
  group: GRPSERIAL
test_pr36513-2_1385:
  build:
    cflags: "-std=gnu++11 -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36513-2.c'
    sources:
      binary: pr36513-2.s
  group: GRPSERIAL
test_pr36513-2_1386:
  build:
    cflags: "-std=gnu++14 -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36513-2.c'
    sources:
      binary: pr36513-2.s
  group: GRPSERIAL
test_pr36513-2_2095:
  build:
    cflags: "-Wc++-compat  -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36513-2.c'
    sources:
      binary: pr36513-2.s
  group: GRPSERIAL
test_pr36513-2_214:
  build:
    cflags: "-Wc++-compat  -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36513-2.c'
    sources:
      binary: pr36513-2.s
  group: GRPSERIAL
test_pr36513-2_2876:
  build:
    cflags: "-std=gnu++98 -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36513-2.c'
    sources:
      binary: pr36513-2.s
  group: GRPSERIAL
test_pr36513-2_2877:
  build:
    cflags: "-std=gnu++11 -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36513-2.c'
    sources:
      binary: pr36513-2.s
  group: GRPSERIAL
test_pr36513-2_2878:
  build:
    cflags: "-std=gnu++14 -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36513-2.c'
    sources:
      binary: pr36513-2.s
  group: GRPSERIAL
test_pr36513-2_603:
  build:
    cflags: "-Wc++-compat  -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36513-2.c'
    sources:
      binary: pr36513-2.s
  group: GRPSERIAL
test_pr36513_1387:
  build:
    cflags: "-std=gnu++98 -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36513.c'
    sources:
      binary: pr36513.s
  group: GRPSERIAL
test_pr36513_1388:
  build:
    cflags: "-std=gnu++11 -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36513.c'
    sources:
      binary: pr36513.s
  group: GRPSERIAL
test_pr36513_1389:
  build:
    cflags: "-std=gnu++14 -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36513.c'
    sources:
      binary: pr36513.s
  group: GRPSERIAL
test_pr36513_2096:
  build:
    cflags: "-Wc++-compat  -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36513.c'
    sources:
      binary: pr36513.s
  group: GRPSERIAL
test_pr36513_215:
  build:
    cflags: "-Wc++-compat  -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36513.c'
    sources:
      binary: pr36513.s
  group: GRPSERIAL
test_pr36513_2879:
  build:
    cflags: "-std=gnu++98 -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36513.c'
    sources:
      binary: pr36513.s
  group: GRPSERIAL
test_pr36513_2880:
  build:
    cflags: "-std=gnu++11 -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36513.c'
    sources:
      binary: pr36513.s
  group: GRPSERIAL
test_pr36513_2881:
  build:
    cflags: "-std=gnu++14 -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36513.c'
    sources:
      binary: pr36513.s
  group: GRPSERIAL
test_pr36513_604:
  build:
    cflags: "-Wc++-compat  -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr36513.c'
    sources:
      binary: pr36513.s
  group: GRPSERIAL
test_pr37743_1390:
  build:
    cflags: "-std=gnu++98 -Wformat\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr37743.c'
    sources:
      binary: pr37743.s
  group: GRPSERIAL
test_pr37743_1391:
  build:
    cflags: "-std=gnu++11 -Wformat\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr37743.c'
    sources:
      binary: pr37743.s
  group: GRPSERIAL
test_pr37743_1392:
  build:
    cflags: "-std=gnu++14 -Wformat\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr37743.c'
    sources:
      binary: pr37743.s
  group: GRPSERIAL
test_pr37743_2097:
  build:
    cflags: "-Wc++-compat  -Wformat\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr37743.c'
    sources:
      binary: pr37743.s
  group: GRPSERIAL
test_pr37743_216:
  build:
    cflags: "-Wc++-compat  -Wformat\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr37743.c'
    sources:
      binary: pr37743.s
  group: GRPSERIAL
test_pr37743_2882:
  build:
    cflags: "-std=gnu++98 -Wformat\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr37743.c'
    sources:
      binary: pr37743.s
  group: GRPSERIAL
test_pr37743_2883:
  build:
    cflags: "-std=gnu++11 -Wformat\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr37743.c'
    sources:
      binary: pr37743.s
  group: GRPSERIAL
test_pr37743_2884:
  build:
    cflags: "-std=gnu++14 -Wformat\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr37743.c'
    sources:
      binary: pr37743.s
  group: GRPSERIAL
test_pr37743_605:
  build:
    cflags: "-Wc++-compat  -Wformat\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr37743.c'
    sources:
      binary: pr37743.s
  group: GRPSERIAL
test_pr41779_1393:
  build:
    cflags: "-std=gnu++98 -Wconversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr41779.c'
    sources:
      binary: pr41779.s
  group: GRPSERIAL
  validate:
    match:
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
test_pr41779_1394:
  build:
    cflags: "-std=gnu++11 -Wconversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr41779.c'
    sources:
      binary: pr41779.s
  group: GRPSERIAL
  validate:
    match:
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
test_pr41779_1395:
  build:
    cflags: "-std=gnu++14 -Wconversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr41779.c'
    sources:
      binary: pr41779.s
  group: GRPSERIAL
  validate:
    match:
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
test_pr41779_2098:
  build:
    cflags: "-Wc++-compat  -std=c99 -Wconversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr41779.c'
    sources:
      binary: pr41779.s
  group: GRPSERIAL
  validate:
    match:
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
test_pr41779_217:
  build:
    cflags: "-Wc++-compat  -std=c99 -Wconversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr41779.c'
    sources:
      binary: pr41779.s
  group: GRPSERIAL
  validate:
    match:
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
test_pr41779_2885:
  build:
    cflags: "-std=gnu++98 -Wconversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr41779.c'
    sources:
      binary: pr41779.s
  group: GRPSERIAL
  validate:
    match:
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
test_pr41779_2886:
  build:
    cflags: "-std=gnu++11 -Wconversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr41779.c'
    sources:
      binary: pr41779.s
  group: GRPSERIAL
  validate:
    match:
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
test_pr41779_2887:
  build:
    cflags: "-std=gnu++14 -Wconversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr41779.c'
    sources:
      binary: pr41779.s
  group: GRPSERIAL
  validate:
    match:
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
test_pr41779_606:
  build:
    cflags: "-Wc++-compat  -std=c99 -Wconversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr41779.c'
    sources:
      binary: pr41779.s
  group: GRPSERIAL
  validate:
    match:
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'
test_pr41935_1396:
  build:
    cflags: "-std=gnu++98 -Warray-bounds\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr41935.c'
    sources:
      binary: pr41935.s
  group: GRPSERIAL
  validate:
    match:
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
test_pr41935_1397:
  build:
    cflags: "-std=gnu++11 -Warray-bounds\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr41935.c'
    sources:
      binary: pr41935.s
  group: GRPSERIAL
  validate:
    match:
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
test_pr41935_1398:
  build:
    cflags: "-std=gnu++14 -Warray-bounds\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr41935.c'
    sources:
      binary: pr41935.s
  group: GRPSERIAL
  validate:
    match:
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
test_pr41935_2099:
  build:
    cflags: "-Wc++-compat  -Warray-bounds\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr41935.c'
    sources:
      binary: pr41935.s
  group: GRPSERIAL
  validate:
    match:
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
test_pr41935_218:
  build:
    cflags: "-Wc++-compat  -Warray-bounds\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr41935.c'
    sources:
      binary: pr41935.s
  group: GRPSERIAL
  validate:
    match:
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
test_pr41935_2888:
  build:
    cflags: "-std=gnu++98 -Warray-bounds\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr41935.c'
    sources:
      binary: pr41935.s
  group: GRPSERIAL
  validate:
    match:
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
test_pr41935_2889:
  build:
    cflags: "-std=gnu++11 -Warray-bounds\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr41935.c'
    sources:
      binary: pr41935.s
  group: GRPSERIAL
  validate:
    match:
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
test_pr41935_2890:
  build:
    cflags: "-std=gnu++14 -Warray-bounds\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr41935.c'
    sources:
      binary: pr41935.s
  group: GRPSERIAL
  validate:
    match:
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
test_pr41935_607:
  build:
    cflags: "-Wc++-compat  -Warray-bounds\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr41935.c'
    sources:
      binary: pr41935.s
  group: GRPSERIAL
  validate:
    match:
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("greater than size")[^\n]*\n?)+'
test_pr42674_1399:
  build:
    cflags: "-std=gnu++98 -Wreturn-type\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr42674.c'
    sources:
      binary: pr42674.s
  group: GRPSERIAL
test_pr42674_1400:
  build:
    cflags: "-std=gnu++11 -Wreturn-type\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr42674.c'
    sources:
      binary: pr42674.s
  group: GRPSERIAL
test_pr42674_1401:
  build:
    cflags: "-std=gnu++14 -Wreturn-type\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr42674.c'
    sources:
      binary: pr42674.s
  group: GRPSERIAL
test_pr42674_2100:
  build:
    cflags: "-Wc++-compat  -Wreturn-type\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr42674.c'
    sources:
      binary: pr42674.s
  group: GRPSERIAL
test_pr42674_219:
  build:
    cflags: "-Wc++-compat  -Wreturn-type\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr42674.c'
    sources:
      binary: pr42674.s
  group: GRPSERIAL
test_pr42674_2891:
  build:
    cflags: "-std=gnu++98 -Wreturn-type\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr42674.c'
    sources:
      binary: pr42674.s
  group: GRPSERIAL
test_pr42674_2892:
  build:
    cflags: "-std=gnu++11 -Wreturn-type\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr42674.c'
    sources:
      binary: pr42674.s
  group: GRPSERIAL
test_pr42674_2893:
  build:
    cflags: "-std=gnu++14 -Wreturn-type\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr42674.c'
    sources:
      binary: pr42674.s
  group: GRPSERIAL
test_pr42674_608:
  build:
    cflags: "-Wc++-compat  -Wreturn-type\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr42674.c'
    sources:
      binary: pr42674.s
  group: GRPSERIAL
test_pr43395_1402:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr43395.c'
    sources:
      binary: pr43395.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("address of label")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("function returns address
          of label")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("address of label")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("function returns address
          of local variable")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("address of local variable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("function returns address
          of label")[^\n]*\n?)+'
test_pr43395_1403:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr43395.c'
    sources:
      binary: pr43395.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("address of label")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("function returns address
          of label")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("address of label")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("function returns address
          of local variable")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("address of local variable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("function returns address
          of label")[^\n]*\n?)+'
test_pr43395_1404:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr43395.c'
    sources:
      binary: pr43395.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("address of label")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("function returns address
          of label")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("address of label")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("function returns address
          of local variable")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("address of local variable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("function returns address
          of label")[^\n]*\n?)+'
test_pr43395_2101:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr43395.c'
    sources:
      binary: pr43395.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("address of label")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("function returns address
          of label")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("address of label")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("function returns address
          of local variable")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("address of local variable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("function returns address
          of label")[^\n]*\n?)+'
test_pr43395_220:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr43395.c'
    sources:
      binary: pr43395.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("address of label")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("function returns address
          of label")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("address of label")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("function returns address
          of local variable")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("address of local variable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("function returns address
          of label")[^\n]*\n?)+'
test_pr43395_2894:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr43395.c'
    sources:
      binary: pr43395.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("address of label")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("function returns address
          of label")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("address of label")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("function returns address
          of local variable")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("address of local variable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("function returns address
          of label")[^\n]*\n?)+'
test_pr43395_2895:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr43395.c'
    sources:
      binary: pr43395.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("address of label")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("function returns address
          of label")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("address of label")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("function returns address
          of local variable")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("address of local variable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("function returns address
          of label")[^\n]*\n?)+'
test_pr43395_2896:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr43395.c'
    sources:
      binary: pr43395.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("address of label")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("function returns address
          of label")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("address of label")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("function returns address
          of local variable")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("address of local variable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("function returns address
          of label")[^\n]*\n?)+'
test_pr43395_609:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr43395.c'
    sources:
      binary: pr43395.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("address of label")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("function returns address
          of label")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("address of label")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("function returns address
          of local variable")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("address of local variable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("function returns address
          of label")[^\n]*\n?)+'
test_pr43690_1405:
  build:
    cflags: "-std=gnu++98 -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr43690.c'
    sources:
      binary: pr43690.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
test_pr43690_1406:
  build:
    cflags: "-std=gnu++11 -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr43690.c'
    sources:
      binary: pr43690.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
test_pr43690_1407:
  build:
    cflags: "-std=gnu++14 -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr43690.c'
    sources:
      binary: pr43690.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
test_pr43690_2102:
  build:
    cflags: "-Wc++-compat  -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr43690.c'
    sources:
      binary: pr43690.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
test_pr43690_221:
  build:
    cflags: "-Wc++-compat  -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr43690.c'
    sources:
      binary: pr43690.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
test_pr43690_2897:
  build:
    cflags: "-std=gnu++98 -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr43690.c'
    sources:
      binary: pr43690.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
test_pr43690_2898:
  build:
    cflags: "-std=gnu++11 -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr43690.c'
    sources:
      binary: pr43690.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
test_pr43690_2899:
  build:
    cflags: "-std=gnu++14 -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr43690.c'
    sources:
      binary: pr43690.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
test_pr43690_610:
  build:
    cflags: "-Wc++-compat  -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr43690.c'
    sources:
      binary: pr43690.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not directly
          addressable")[^\n]*\n?)+'
test_pr43772_1408:
  build:
    cflags: "-std=gnu++98 -Wlogical-op -Wtype-limits\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr43772.c'
    sources:
      binary: pr43772.s
  group: GRPSERIAL
test_pr43772_1409:
  build:
    cflags: "-std=gnu++11 -Wlogical-op -Wtype-limits\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr43772.c'
    sources:
      binary: pr43772.s
  group: GRPSERIAL
test_pr43772_1410:
  build:
    cflags: "-std=gnu++14 -Wlogical-op -Wtype-limits\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr43772.c'
    sources:
      binary: pr43772.s
  group: GRPSERIAL
test_pr43772_2103:
  build:
    cflags: "-Wc++-compat  -Wlogical-op -Wtype-limits\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr43772.c'
    sources:
      binary: pr43772.s
  group: GRPSERIAL
test_pr43772_222:
  build:
    cflags: "-Wc++-compat  -Wlogical-op -Wtype-limits\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr43772.c'
    sources:
      binary: pr43772.s
  group: GRPSERIAL
test_pr43772_2900:
  build:
    cflags: "-std=gnu++98 -Wlogical-op -Wtype-limits\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr43772.c'
    sources:
      binary: pr43772.s
  group: GRPSERIAL
test_pr43772_2901:
  build:
    cflags: "-std=gnu++11 -Wlogical-op -Wtype-limits\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr43772.c'
    sources:
      binary: pr43772.s
  group: GRPSERIAL
test_pr43772_2902:
  build:
    cflags: "-std=gnu++14 -Wlogical-op -Wtype-limits\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr43772.c'
    sources:
      binary: pr43772.s
  group: GRPSERIAL
test_pr43772_611:
  build:
    cflags: "-Wc++-compat  -Wlogical-op -Wtype-limits\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr43772.c'
    sources:
      binary: pr43772.s
  group: GRPSERIAL
test_pr43942_1411:
  build:
    cflags: "-std=gnu++98 -O2 -fcompare-debug\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr43942.c'
    sources:
      binary: pr43942.s
  group: GRPSERIAL
test_pr43942_1412:
  build:
    cflags: "-std=gnu++11 -O2 -fcompare-debug\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr43942.c'
    sources:
      binary: pr43942.s
  group: GRPSERIAL
test_pr43942_1413:
  build:
    cflags: "-std=gnu++14 -O2 -fcompare-debug\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr43942.c'
    sources:
      binary: pr43942.s
  group: GRPSERIAL
test_pr43942_2104:
  build:
    cflags: "-Wc++-compat  -O2 -fcompare-debug\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr43942.c'
    sources:
      binary: pr43942.s
  group: GRPSERIAL
test_pr43942_223:
  build:
    cflags: "-Wc++-compat  -O2 -fcompare-debug\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr43942.c'
    sources:
      binary: pr43942.s
  group: GRPSERIAL
test_pr43942_2903:
  build:
    cflags: "-std=gnu++98 -O2 -fcompare-debug\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr43942.c'
    sources:
      binary: pr43942.s
  group: GRPSERIAL
test_pr43942_2904:
  build:
    cflags: "-std=gnu++11 -O2 -fcompare-debug\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr43942.c'
    sources:
      binary: pr43942.s
  group: GRPSERIAL
test_pr43942_2905:
  build:
    cflags: "-std=gnu++14 -O2 -fcompare-debug\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr43942.c'
    sources:
      binary: pr43942.s
  group: GRPSERIAL
test_pr43942_612:
  build:
    cflags: "-Wc++-compat  -O2 -fcompare-debug\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr43942.c'
    sources:
      binary: pr43942.s
  group: GRPSERIAL
test_pr44832_1414:
  build:
    cflags: "-std=gnu++98 -O2 -fcompare-debug -fno-short-enums\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr44832.c'
    sources:
      binary: pr44832.s
  group: GRPSERIAL
test_pr44832_1415:
  build:
    cflags: "-std=gnu++11 -O2 -fcompare-debug -fno-short-enums\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr44832.c'
    sources:
      binary: pr44832.s
  group: GRPSERIAL
test_pr44832_1416:
  build:
    cflags: "-std=gnu++14 -O2 -fcompare-debug -fno-short-enums\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr44832.c'
    sources:
      binary: pr44832.s
  group: GRPSERIAL
test_pr44832_2105:
  build:
    cflags: "-Wc++-compat  -O2 -fcompare-debug -fno-short-enums\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr44832.c'
    sources:
      binary: pr44832.s
  group: GRPSERIAL
test_pr44832_224:
  build:
    cflags: "-Wc++-compat  -O2 -fcompare-debug -fno-short-enums\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr44832.c'
    sources:
      binary: pr44832.s
  group: GRPSERIAL
test_pr44832_2906:
  build:
    cflags: "-std=gnu++98 -O2 -fcompare-debug -fno-short-enums\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr44832.c'
    sources:
      binary: pr44832.s
  group: GRPSERIAL
test_pr44832_2907:
  build:
    cflags: "-std=gnu++11 -O2 -fcompare-debug -fno-short-enums\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr44832.c'
    sources:
      binary: pr44832.s
  group: GRPSERIAL
test_pr44832_2908:
  build:
    cflags: "-std=gnu++14 -O2 -fcompare-debug -fno-short-enums\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr44832.c'
    sources:
      binary: pr44832.s
  group: GRPSERIAL
test_pr44832_613:
  build:
    cflags: "-Wc++-compat  -O2 -fcompare-debug -fno-short-enums\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr44832.c'
    sources:
      binary: pr44832.s
  group: GRPSERIAL
test_pr46562-2_1417:
  build:
    cflags: "-std=gnu++98 -O -fno-tree-ccp -fno-tree-forwprop -fdump-tree-fre1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr46562-2.c'
    sources:
      binary: pr46562-2.s
  group: GRPSERIAL
test_pr46562-2_1418:
  build:
    cflags: "-std=gnu++11 -O -fno-tree-ccp -fno-tree-forwprop -fdump-tree-fre1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr46562-2.c'
    sources:
      binary: pr46562-2.s
  group: GRPSERIAL
test_pr46562-2_1419:
  build:
    cflags: "-std=gnu++14 -O -fno-tree-ccp -fno-tree-forwprop -fdump-tree-fre1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr46562-2.c'
    sources:
      binary: pr46562-2.s
  group: GRPSERIAL
test_pr46562-2_2106:
  build:
    cflags: "-Wc++-compat  -O -fno-tree-ccp -fno-tree-forwprop -fdump-tree-fre1\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr46562-2.c'
    sources:
      binary: pr46562-2.s
  group: GRPSERIAL
test_pr46562-2_225:
  build:
    cflags: "-Wc++-compat  -O -fno-tree-ccp -fno-tree-forwprop -fdump-tree-fre1\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr46562-2.c'
    sources:
      binary: pr46562-2.s
  group: GRPSERIAL
test_pr46562-2_2909:
  build:
    cflags: "-std=gnu++98 -O -fno-tree-ccp -fno-tree-forwprop -fdump-tree-fre1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr46562-2.c'
    sources:
      binary: pr46562-2.s
  group: GRPSERIAL
test_pr46562-2_2910:
  build:
    cflags: "-std=gnu++11 -O -fno-tree-ccp -fno-tree-forwprop -fdump-tree-fre1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr46562-2.c'
    sources:
      binary: pr46562-2.s
  group: GRPSERIAL
test_pr46562-2_2911:
  build:
    cflags: "-std=gnu++14 -O -fno-tree-ccp -fno-tree-forwprop -fdump-tree-fre1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr46562-2.c'
    sources:
      binary: pr46562-2.s
  group: GRPSERIAL
test_pr46562-2_614:
  build:
    cflags: "-Wc++-compat  -O -fno-tree-ccp -fno-tree-forwprop -fdump-tree-fre1\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr46562-2.c'
    sources:
      binary: pr46562-2.s
  group: GRPSERIAL
test_pr46562_1420:
  build:
    cflags: "-std=gnu++98 -O -fdump-tree-ccp1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr46562.c'
    sources:
      binary: pr46562.s
  group: GRPSERIAL
test_pr46562_1421:
  build:
    cflags: "-std=gnu++11 -O -fdump-tree-ccp1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr46562.c'
    sources:
      binary: pr46562.s
  group: GRPSERIAL
test_pr46562_1422:
  build:
    cflags: "-std=gnu++14 -O -fdump-tree-ccp1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr46562.c'
    sources:
      binary: pr46562.s
  group: GRPSERIAL
test_pr46562_2107:
  build:
    cflags: "-Wc++-compat  -O -fdump-tree-ccp1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr46562.c'
    sources:
      binary: pr46562.s
  group: GRPSERIAL
test_pr46562_226:
  build:
    cflags: "-Wc++-compat  -O -fdump-tree-ccp1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr46562.c'
    sources:
      binary: pr46562.s
  group: GRPSERIAL
test_pr46562_2912:
  build:
    cflags: "-std=gnu++98 -O -fdump-tree-ccp1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr46562.c'
    sources:
      binary: pr46562.s
  group: GRPSERIAL
test_pr46562_2913:
  build:
    cflags: "-std=gnu++11 -O -fdump-tree-ccp1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr46562.c'
    sources:
      binary: pr46562.s
  group: GRPSERIAL
test_pr46562_2914:
  build:
    cflags: "-std=gnu++14 -O -fdump-tree-ccp1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr46562.c'
    sources:
      binary: pr46562.s
  group: GRPSERIAL
test_pr46562_615:
  build:
    cflags: "-Wc++-compat  -O -fdump-tree-ccp1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr46562.c'
    sources:
      binary: pr46562.s
  group: GRPSERIAL
test_pr48418_1423:
  build:
    cflags: "-std=gnu++98 -Wall -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr48418.c'
    sources:
      binary: pr48418.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("left shift count >=
          width of type")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("left shift count is
          negative")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("left shift count >=
          width of type")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("left shift count is
          negative")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          is negative")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          is negative")[^\n]*\n?)+'
test_pr48418_1424:
  build:
    cflags: "-std=gnu++11 -Wall -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr48418.c'
    sources:
      binary: pr48418.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("left shift count >=
          width of type")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("left shift count is
          negative")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("left shift count >=
          width of type")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("left shift count is
          negative")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          is negative")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          is negative")[^\n]*\n?)+'
test_pr48418_1425:
  build:
    cflags: "-std=gnu++14 -Wall -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr48418.c'
    sources:
      binary: pr48418.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("left shift count >=
          width of type")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("left shift count is
          negative")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("left shift count >=
          width of type")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("left shift count is
          negative")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          is negative")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          is negative")[^\n]*\n?)+'
test_pr48418_2108:
  build:
    cflags: "-Wc++-compat  -Wall -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr48418.c'
    sources:
      binary: pr48418.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("left shift count >=
          width of type")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("left shift count is
          negative")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("left shift count >=
          width of type")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("left shift count is
          negative")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          is negative")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          is negative")[^\n]*\n?)+'
test_pr48418_227:
  build:
    cflags: "-Wc++-compat  -Wall -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr48418.c'
    sources:
      binary: pr48418.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("left shift count >=
          width of type")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("left shift count is
          negative")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("left shift count >=
          width of type")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("left shift count is
          negative")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          is negative")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          is negative")[^\n]*\n?)+'
test_pr48418_2915:
  build:
    cflags: "-std=gnu++98 -Wall -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr48418.c'
    sources:
      binary: pr48418.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("left shift count >=
          width of type")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("left shift count is
          negative")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("left shift count >=
          width of type")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("left shift count is
          negative")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          is negative")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          is negative")[^\n]*\n?)+'
test_pr48418_2916:
  build:
    cflags: "-std=gnu++11 -Wall -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr48418.c'
    sources:
      binary: pr48418.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("left shift count >=
          width of type")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("left shift count is
          negative")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("left shift count >=
          width of type")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("left shift count is
          negative")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          is negative")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          is negative")[^\n]*\n?)+'
test_pr48418_2917:
  build:
    cflags: "-std=gnu++14 -Wall -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr48418.c'
    sources:
      binary: pr48418.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("left shift count >=
          width of type")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("left shift count is
          negative")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("left shift count >=
          width of type")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("left shift count is
          negative")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          is negative")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          is negative")[^\n]*\n?)+'
test_pr48418_616:
  build:
    cflags: "-Wc++-compat  -Wall -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr48418.c'
    sources:
      binary: pr48418.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("left shift count >=
          width of type")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("left shift count is
          negative")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("left shift count >=
          width of type")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("left shift count is
          negative")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          is negative")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          is negative")[^\n]*\n?)+'
test_pr49706-2_1426:
  build:
    cflags: "-std=gnu++98 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr49706-2.c'
    sources:
      binary: pr49706-2.s
  group: GRPSERIAL
test_pr49706-2_1427:
  build:
    cflags: "-std=gnu++11 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr49706-2.c'
    sources:
      binary: pr49706-2.s
  group: GRPSERIAL
test_pr49706-2_1428:
  build:
    cflags: "-std=gnu++14 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr49706-2.c'
    sources:
      binary: pr49706-2.s
  group: GRPSERIAL
test_pr49706-2_2109:
  build:
    cflags: "-Wc++-compat  -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr49706-2.c'
    sources:
      binary: pr49706-2.s
  group: GRPSERIAL
test_pr49706-2_228:
  build:
    cflags: "-Wc++-compat  -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr49706-2.c'
    sources:
      binary: pr49706-2.s
  group: GRPSERIAL
test_pr49706-2_2918:
  build:
    cflags: "-std=gnu++98 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr49706-2.c'
    sources:
      binary: pr49706-2.s
  group: GRPSERIAL
test_pr49706-2_2919:
  build:
    cflags: "-std=gnu++11 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr49706-2.c'
    sources:
      binary: pr49706-2.s
  group: GRPSERIAL
test_pr49706-2_2920:
  build:
    cflags: "-std=gnu++14 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr49706-2.c'
    sources:
      binary: pr49706-2.s
  group: GRPSERIAL
test_pr49706-2_617:
  build:
    cflags: "-Wc++-compat  -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr49706-2.c'
    sources:
      binary: pr49706-2.s
  group: GRPSERIAL
test_pr49706_1429:
  build:
    cflags: "-std=gnu++98 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr49706.c'
    sources:
      binary: pr49706.s
  group: GRPSERIAL
  validate:
    match:
      L111:
        expect: true
        expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+(:113:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+(:129:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L130:
        expect: true
        expr: '(^|\n)([^\n]+(:130:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+(:131:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L132:
        expect: true
        expr: '(^|\n)([^\n]+(:132:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+(:133:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+(:134:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+(:155:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+(:175:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_pr49706_1430:
  build:
    cflags: "-std=gnu++11 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr49706.c'
    sources:
      binary: pr49706.s
  group: GRPSERIAL
  validate:
    match:
      L111:
        expect: true
        expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+(:113:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+(:129:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L130:
        expect: true
        expr: '(^|\n)([^\n]+(:130:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+(:131:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L132:
        expect: true
        expr: '(^|\n)([^\n]+(:132:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+(:133:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+(:134:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+(:155:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+(:175:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_pr49706_1431:
  build:
    cflags: "-std=gnu++14 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr49706.c'
    sources:
      binary: pr49706.s
  group: GRPSERIAL
  validate:
    match:
      L111:
        expect: true
        expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+(:113:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+(:129:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L130:
        expect: true
        expr: '(^|\n)([^\n]+(:130:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+(:131:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L132:
        expect: true
        expr: '(^|\n)([^\n]+(:132:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+(:133:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+(:134:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+(:155:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+(:175:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_pr49706_2110:
  build:
    cflags: "-Wc++-compat  -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr49706.c'
    sources:
      binary: pr49706.s
  group: GRPSERIAL
  validate:
    match:
      L111:
        expect: true
        expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+(:113:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+(:129:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L130:
        expect: true
        expr: '(^|\n)([^\n]+(:130:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+(:131:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L132:
        expect: true
        expr: '(^|\n)([^\n]+(:132:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+(:133:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+(:134:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+(:155:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+(:175:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_pr49706_229:
  build:
    cflags: "-Wc++-compat  -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr49706.c'
    sources:
      binary: pr49706.s
  group: GRPSERIAL
  validate:
    match:
      L111:
        expect: true
        expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+(:113:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+(:129:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L130:
        expect: true
        expr: '(^|\n)([^\n]+(:130:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+(:131:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L132:
        expect: true
        expr: '(^|\n)([^\n]+(:132:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+(:133:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+(:134:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+(:155:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+(:175:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_pr49706_2921:
  build:
    cflags: "-std=gnu++98 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr49706.c'
    sources:
      binary: pr49706.s
  group: GRPSERIAL
  validate:
    match:
      L111:
        expect: true
        expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+(:113:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+(:129:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L130:
        expect: true
        expr: '(^|\n)([^\n]+(:130:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+(:131:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L132:
        expect: true
        expr: '(^|\n)([^\n]+(:132:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+(:133:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+(:134:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+(:155:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+(:175:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_pr49706_2922:
  build:
    cflags: "-std=gnu++11 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr49706.c'
    sources:
      binary: pr49706.s
  group: GRPSERIAL
  validate:
    match:
      L111:
        expect: true
        expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+(:113:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+(:129:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L130:
        expect: true
        expr: '(^|\n)([^\n]+(:130:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+(:131:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L132:
        expect: true
        expr: '(^|\n)([^\n]+(:132:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+(:133:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+(:134:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+(:155:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+(:175:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_pr49706_2923:
  build:
    cflags: "-std=gnu++14 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr49706.c'
    sources:
      binary: pr49706.s
  group: GRPSERIAL
  validate:
    match:
      L111:
        expect: true
        expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+(:113:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+(:129:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L130:
        expect: true
        expr: '(^|\n)([^\n]+(:130:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+(:131:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L132:
        expect: true
        expr: '(^|\n)([^\n]+(:132:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+(:133:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+(:134:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+(:155:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+(:175:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_pr49706_618:
  build:
    cflags: "-Wc++-compat  -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr49706.c'
    sources:
      binary: pr49706.s
  group: GRPSERIAL
  validate:
    match:
      L111:
        expect: true
        expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+(:113:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+(:129:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L130:
        expect: true
        expr: '(^|\n)([^\n]+(:130:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+(:131:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L132:
        expect: true
        expr: '(^|\n)([^\n]+(:132:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+(:133:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+(:134:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+(:155:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+(:175:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_pr50459-2_1432:
  build:
    cflags: "-std=gnu++98 -Wall -Wextra\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr50459-2.c'
    sources:
      binary: pr50459-2.s
  group: GRPSERIAL
test_pr50459-2_1433:
  build:
    cflags: "-std=gnu++11 -Wall -Wextra\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr50459-2.c'
    sources:
      binary: pr50459-2.s
  group: GRPSERIAL
test_pr50459-2_1434:
  build:
    cflags: "-std=gnu++14 -Wall -Wextra\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr50459-2.c'
    sources:
      binary: pr50459-2.s
  group: GRPSERIAL
test_pr50459-2_2111:
  build:
    cflags: "-Wc++-compat  -Wall -Wextra\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr50459-2.c'
    sources:
      binary: pr50459-2.s
  group: GRPSERIAL
test_pr50459-2_230:
  build:
    cflags: "-Wc++-compat  -Wall -Wextra\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr50459-2.c'
    sources:
      binary: pr50459-2.s
  group: GRPSERIAL
test_pr50459-2_2924:
  build:
    cflags: "-std=gnu++98 -Wall -Wextra\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr50459-2.c'
    sources:
      binary: pr50459-2.s
  group: GRPSERIAL
test_pr50459-2_2925:
  build:
    cflags: "-std=gnu++11 -Wall -Wextra\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr50459-2.c'
    sources:
      binary: pr50459-2.s
  group: GRPSERIAL
test_pr50459-2_2926:
  build:
    cflags: "-std=gnu++14 -Wall -Wextra\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr50459-2.c'
    sources:
      binary: pr50459-2.s
  group: GRPSERIAL
test_pr50459-2_619:
  build:
    cflags: "-Wc++-compat  -Wall -Wextra\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr50459-2.c'
    sources:
      binary: pr50459-2.s
  group: GRPSERIAL
test_pr50459_1435:
  build:
    cflags: "-std=gnu++98 -Wall -Wextra\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr50459.c'
    sources:
      binary: pr50459.s
  group: GRPSERIAL
test_pr50459_1436:
  build:
    cflags: "-std=gnu++11 -Wall -Wextra\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr50459.c'
    sources:
      binary: pr50459.s
  group: GRPSERIAL
test_pr50459_1437:
  build:
    cflags: "-std=gnu++14 -Wall -Wextra\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr50459.c'
    sources:
      binary: pr50459.s
  group: GRPSERIAL
test_pr50459_2112:
  build:
    cflags: "-Wc++-compat  -Wall -Wextra\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr50459.c'
    sources:
      binary: pr50459.s
  group: GRPSERIAL
test_pr50459_231:
  build:
    cflags: "-Wc++-compat  -Wall -Wextra\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr50459.c'
    sources:
      binary: pr50459.s
  group: GRPSERIAL
test_pr50459_2927:
  build:
    cflags: "-std=gnu++98 -Wall -Wextra\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr50459.c'
    sources:
      binary: pr50459.s
  group: GRPSERIAL
test_pr50459_2928:
  build:
    cflags: "-std=gnu++11 -Wall -Wextra\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr50459.c'
    sources:
      binary: pr50459.s
  group: GRPSERIAL
test_pr50459_2929:
  build:
    cflags: "-std=gnu++14 -Wall -Wextra\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr50459.c'
    sources:
      binary: pr50459.s
  group: GRPSERIAL
test_pr50459_620:
  build:
    cflags: "-Wc++-compat  -Wall -Wextra\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr50459.c'
    sources:
      binary: pr50459.s
  group: GRPSERIAL
test_pr51294_1438:
  build:
    cflags: "-std=gnu++98 -Wconversion -Wsign-conversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr51294.c'
    sources:
      binary: pr51294.s
  group: GRPSERIAL
test_pr51294_1439:
  build:
    cflags: "-std=gnu++11 -Wconversion -Wsign-conversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr51294.c'
    sources:
      binary: pr51294.s
  group: GRPSERIAL
test_pr51294_1440:
  build:
    cflags: "-std=gnu++14 -Wconversion -Wsign-conversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr51294.c'
    sources:
      binary: pr51294.s
  group: GRPSERIAL
test_pr51294_2113:
  build:
    cflags: "-Wc++-compat  -Wconversion -Wsign-conversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr51294.c'
    sources:
      binary: pr51294.s
  group: GRPSERIAL
test_pr51294_232:
  build:
    cflags: "-Wc++-compat  -Wconversion -Wsign-conversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr51294.c'
    sources:
      binary: pr51294.s
  group: GRPSERIAL
test_pr51294_2930:
  build:
    cflags: "-std=gnu++98 -Wconversion -Wsign-conversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr51294.c'
    sources:
      binary: pr51294.s
  group: GRPSERIAL
test_pr51294_2931:
  build:
    cflags: "-std=gnu++11 -Wconversion -Wsign-conversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr51294.c'
    sources:
      binary: pr51294.s
  group: GRPSERIAL
test_pr51294_2932:
  build:
    cflags: "-std=gnu++14 -Wconversion -Wsign-conversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr51294.c'
    sources:
      binary: pr51294.s
  group: GRPSERIAL
test_pr51294_621:
  build:
    cflags: "-Wc++-compat  -Wconversion -Wsign-conversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr51294.c'
    sources:
      binary: pr51294.s
  group: GRPSERIAL
test_pr51712_1441:
  build:
    cflags: "-std=gnu++98 -Wtype-limits -fno-short-enums\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr51712.c'
    sources:
      binary: pr51712.s
  group: GRPSERIAL
test_pr51712_1442:
  build:
    cflags: "-std=gnu++11 -Wtype-limits -fno-short-enums\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr51712.c'
    sources:
      binary: pr51712.s
  group: GRPSERIAL
test_pr51712_1443:
  build:
    cflags: "-std=gnu++14 -Wtype-limits -fno-short-enums\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr51712.c'
    sources:
      binary: pr51712.s
  group: GRPSERIAL
test_pr51712_2114:
  build:
    cflags: "-Wc++-compat  -Wtype-limits -fno-short-enums\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr51712.c'
    sources:
      binary: pr51712.s
  group: GRPSERIAL
test_pr51712_233:
  build:
    cflags: "-Wc++-compat  -Wtype-limits -fno-short-enums\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr51712.c'
    sources:
      binary: pr51712.s
  group: GRPSERIAL
test_pr51712_2933:
  build:
    cflags: "-std=gnu++98 -Wtype-limits -fno-short-enums\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr51712.c'
    sources:
      binary: pr51712.s
  group: GRPSERIAL
test_pr51712_2934:
  build:
    cflags: "-std=gnu++11 -Wtype-limits -fno-short-enums\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr51712.c'
    sources:
      binary: pr51712.s
  group: GRPSERIAL
test_pr51712_2935:
  build:
    cflags: "-std=gnu++14 -Wtype-limits -fno-short-enums\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr51712.c'
    sources:
      binary: pr51712.s
  group: GRPSERIAL
test_pr51712_622:
  build:
    cflags: "-Wc++-compat  -Wtype-limits -fno-short-enums\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr51712.c'
    sources:
      binary: pr51712.s
  group: GRPSERIAL
test_pr51768_1444:
  build:
    cflags: "-std=gnu++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr51768.c'
    sources:
      binary: pr51768.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate asm
          operand name")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate asm
          operand name")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate asm
          operand name")[^\n]*\n?)+'
test_pr51768_1445:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr51768.c'
    sources:
      binary: pr51768.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate asm
          operand name")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate asm
          operand name")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate asm
          operand name")[^\n]*\n?)+'
test_pr51768_1446:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr51768.c'
    sources:
      binary: pr51768.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate asm
          operand name")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate asm
          operand name")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate asm
          operand name")[^\n]*\n?)+'
test_pr51768_2115:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr51768.c'
    sources:
      binary: pr51768.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate asm
          operand name")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate asm
          operand name")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate asm
          operand name")[^\n]*\n?)+'
test_pr51768_234:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr51768.c'
    sources:
      binary: pr51768.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate asm
          operand name")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate asm
          operand name")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate asm
          operand name")[^\n]*\n?)+'
test_pr51768_2936:
  build:
    cflags: "-std=gnu++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr51768.c'
    sources:
      binary: pr51768.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate asm
          operand name")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate asm
          operand name")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate asm
          operand name")[^\n]*\n?)+'
test_pr51768_2937:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr51768.c'
    sources:
      binary: pr51768.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate asm
          operand name")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate asm
          operand name")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate asm
          operand name")[^\n]*\n?)+'
test_pr51768_2938:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr51768.c'
    sources:
      binary: pr51768.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate asm
          operand name")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate asm
          operand name")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate asm
          operand name")[^\n]*\n?)+'
test_pr51768_623:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr51768.c'
    sources:
      binary: pr51768.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate asm
          operand name")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate asm
          operand name")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate asm
          operand name")[^\n]*\n?)+'
test_pr52177_1447:
  build:
    cflags: "-std=gnu++98 -O -fno-tree-ccp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr52177.c'
    sources:
      binary: pr52177.s
  group: GRPSERIAL
test_pr52177_1448:
  build:
    cflags: "-std=gnu++11 -O -fno-tree-ccp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr52177.c'
    sources:
      binary: pr52177.s
  group: GRPSERIAL
test_pr52177_1449:
  build:
    cflags: "-std=gnu++14 -O -fno-tree-ccp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr52177.c'
    sources:
      binary: pr52177.s
  group: GRPSERIAL
test_pr52177_2116:
  build:
    cflags: "-Wc++-compat  -O -fno-tree-ccp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr52177.c'
    sources:
      binary: pr52177.s
  group: GRPSERIAL
test_pr52177_235:
  build:
    cflags: "-Wc++-compat  -O -fno-tree-ccp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr52177.c'
    sources:
      binary: pr52177.s
  group: GRPSERIAL
test_pr52177_2939:
  build:
    cflags: "-std=gnu++98 -O -fno-tree-ccp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr52177.c'
    sources:
      binary: pr52177.s
  group: GRPSERIAL
test_pr52177_2940:
  build:
    cflags: "-std=gnu++11 -O -fno-tree-ccp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr52177.c'
    sources:
      binary: pr52177.s
  group: GRPSERIAL
test_pr52177_2941:
  build:
    cflags: "-std=gnu++14 -O -fno-tree-ccp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr52177.c'
    sources:
      binary: pr52177.s
  group: GRPSERIAL
test_pr52177_624:
  build:
    cflags: "-Wc++-compat  -O -fno-tree-ccp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr52177.c'
    sources:
      binary: pr52177.s
  group: GRPSERIAL
test_pr52181_1450:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr52181.c'
    sources:
      binary: pr52181.s
  group: GRPSERIAL
test_pr52181_1451:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr52181.c'
    sources:
      binary: pr52181.s
  group: GRPSERIAL
test_pr52181_1452:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr52181.c'
    sources:
      binary: pr52181.s
  group: GRPSERIAL
test_pr52181_2117:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr52181.c'
    sources:
      binary: pr52181.s
  group: GRPSERIAL
test_pr52181_236:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr52181.c'
    sources:
      binary: pr52181.s
  group: GRPSERIAL
test_pr52181_2942:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr52181.c'
    sources:
      binary: pr52181.s
  group: GRPSERIAL
test_pr52181_2943:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr52181.c'
    sources:
      binary: pr52181.s
  group: GRPSERIAL
test_pr52181_2944:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr52181.c'
    sources:
      binary: pr52181.s
  group: GRPSERIAL
test_pr52181_625:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr52181.c'
    sources:
      binary: pr52181.s
  group: GRPSERIAL
test_pr53633_1453:
  build:
    cflags: "-std=gnu++98 -O2 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr53633.c'
    sources:
      binary: pr53633.s
  group: GRPSERIAL
test_pr53633_1454:
  build:
    cflags: "-std=gnu++11 -O2 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr53633.c'
    sources:
      binary: pr53633.s
  group: GRPSERIAL
test_pr53633_1455:
  build:
    cflags: "-std=gnu++14 -O2 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr53633.c'
    sources:
      binary: pr53633.s
  group: GRPSERIAL
test_pr53633_2118:
  build:
    cflags: "-Wc++-compat  -O2 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr53633.c'
    sources:
      binary: pr53633.s
  group: GRPSERIAL
test_pr53633_237:
  build:
    cflags: "-Wc++-compat  -O2 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr53633.c'
    sources:
      binary: pr53633.s
  group: GRPSERIAL
test_pr53633_2945:
  build:
    cflags: "-std=gnu++98 -O2 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr53633.c'
    sources:
      binary: pr53633.s
  group: GRPSERIAL
test_pr53633_2946:
  build:
    cflags: "-std=gnu++11 -O2 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr53633.c'
    sources:
      binary: pr53633.s
  group: GRPSERIAL
test_pr53633_2947:
  build:
    cflags: "-std=gnu++14 -O2 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr53633.c'
    sources:
      binary: pr53633.s
  group: GRPSERIAL
test_pr53633_626:
  build:
    cflags: "-Wc++-compat  -O2 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr53633.c'
    sources:
      binary: pr53633.s
  group: GRPSERIAL
test_pr53874_1456:
  build:
    cflags: "-std=gnu++98 -Wswitch-enum\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr53874.c'
    sources:
      binary: pr53874.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("enumeration value
          .C. not handled in switch")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("enumeration value
          .C. not handled in switch")[^\n]*\n?)+'
test_pr53874_1457:
  build:
    cflags: "-std=gnu++11 -Wswitch-enum\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr53874.c'
    sources:
      binary: pr53874.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("enumeration value
          .C. not handled in switch")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("enumeration value
          .C. not handled in switch")[^\n]*\n?)+'
test_pr53874_1458:
  build:
    cflags: "-std=gnu++14 -Wswitch-enum\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr53874.c'
    sources:
      binary: pr53874.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("enumeration value
          .C. not handled in switch")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("enumeration value
          .C. not handled in switch")[^\n]*\n?)+'
test_pr53874_2119:
  build:
    cflags: "-Wc++-compat  -Wswitch-enum\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr53874.c'
    sources:
      binary: pr53874.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("enumeration value
          .C. not handled in switch")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("enumeration value
          .C. not handled in switch")[^\n]*\n?)+'
test_pr53874_238:
  build:
    cflags: "-Wc++-compat  -Wswitch-enum\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr53874.c'
    sources:
      binary: pr53874.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("enumeration value
          .C. not handled in switch")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("enumeration value
          .C. not handled in switch")[^\n]*\n?)+'
test_pr53874_2948:
  build:
    cflags: "-std=gnu++98 -Wswitch-enum\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr53874.c'
    sources:
      binary: pr53874.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("enumeration value
          .C. not handled in switch")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("enumeration value
          .C. not handled in switch")[^\n]*\n?)+'
test_pr53874_2949:
  build:
    cflags: "-std=gnu++11 -Wswitch-enum\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr53874.c'
    sources:
      binary: pr53874.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("enumeration value
          .C. not handled in switch")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("enumeration value
          .C. not handled in switch")[^\n]*\n?)+'
test_pr53874_2950:
  build:
    cflags: "-std=gnu++14 -Wswitch-enum\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr53874.c'
    sources:
      binary: pr53874.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("enumeration value
          .C. not handled in switch")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("enumeration value
          .C. not handled in switch")[^\n]*\n?)+'
test_pr53874_627:
  build:
    cflags: "-Wc++-compat  -Wswitch-enum\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr53874.c'
    sources:
      binary: pr53874.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("enumeration value
          .C. not handled in switch")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("enumeration value
          .C. not handled in switch")[^\n]*\n?)+'
test_pr54486_1459:
  build:
    cflags: "-std=gnu++98 -Wformat\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr54486.c'
    sources:
      binary: pr54486.s
  group: GRPSERIAL
test_pr54486_1460:
  build:
    cflags: "-std=gnu++11 -Wformat\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr54486.c'
    sources:
      binary: pr54486.s
  group: GRPSERIAL
test_pr54486_1461:
  build:
    cflags: "-std=gnu++14 -Wformat\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr54486.c'
    sources:
      binary: pr54486.s
  group: GRPSERIAL
test_pr54486_2120:
  build:
    cflags: "-Wc++-compat  -Wformat\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr54486.c'
    sources:
      binary: pr54486.s
  group: GRPSERIAL
test_pr54486_239:
  build:
    cflags: "-Wc++-compat  -Wformat\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr54486.c'
    sources:
      binary: pr54486.s
  group: GRPSERIAL
test_pr54486_2951:
  build:
    cflags: "-std=gnu++98 -Wformat\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr54486.c'
    sources:
      binary: pr54486.s
  group: GRPSERIAL
test_pr54486_2952:
  build:
    cflags: "-std=gnu++11 -Wformat\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr54486.c'
    sources:
      binary: pr54486.s
  group: GRPSERIAL
test_pr54486_2953:
  build:
    cflags: "-std=gnu++14 -Wformat\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr54486.c'
    sources:
      binary: pr54486.s
  group: GRPSERIAL
test_pr54486_628:
  build:
    cflags: "-Wc++-compat  -Wformat\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr54486.c'
    sources:
      binary: pr54486.s
  group: GRPSERIAL
test_pr54988_1462:
  build:
    cflags: "-std=gnu++98 -O2 -msse2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr54988.c'
    sources:
      binary: pr54988.s
  group: GRPSERIAL
test_pr54988_1463:
  build:
    cflags: "-std=gnu++11 -O2 -msse2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr54988.c'
    sources:
      binary: pr54988.s
  group: GRPSERIAL
test_pr54988_1464:
  build:
    cflags: "-std=gnu++14 -O2 -msse2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr54988.c'
    sources:
      binary: pr54988.s
  group: GRPSERIAL
test_pr54988_2121:
  build:
    cflags: "-Wc++-compat  -O2 -msse2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr54988.c'
    sources:
      binary: pr54988.s
  group: GRPSERIAL
test_pr54988_240:
  build:
    cflags: "-Wc++-compat  -O2 -msse2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr54988.c'
    sources:
      binary: pr54988.s
  group: GRPSERIAL
test_pr54988_2954:
  build:
    cflags: "-std=gnu++98 -O2 -msse2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr54988.c'
    sources:
      binary: pr54988.s
  group: GRPSERIAL
test_pr54988_2955:
  build:
    cflags: "-std=gnu++11 -O2 -msse2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr54988.c'
    sources:
      binary: pr54988.s
  group: GRPSERIAL
test_pr54988_2956:
  build:
    cflags: "-std=gnu++14 -O2 -msse2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr54988.c'
    sources:
      binary: pr54988.s
  group: GRPSERIAL
test_pr54988_629:
  build:
    cflags: "-Wc++-compat  -O2 -msse2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr54988.c'
    sources:
      binary: pr54988.s
  group: GRPSERIAL
test_pr55619_1465:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr55619.c'
    sources:
      binary: pr55619.s
  group: GRPSERIAL
test_pr55619_1466:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr55619.c'
    sources:
      binary: pr55619.s
  group: GRPSERIAL
test_pr55619_1467:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr55619.c'
    sources:
      binary: pr55619.s
  group: GRPSERIAL
test_pr55619_2122:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr55619.c'
    sources:
      binary: pr55619.s
  group: GRPSERIAL
test_pr55619_241:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr55619.c'
    sources:
      binary: pr55619.s
  group: GRPSERIAL
test_pr55619_2957:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr55619.c'
    sources:
      binary: pr55619.s
  group: GRPSERIAL
test_pr55619_2958:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr55619.c'
    sources:
      binary: pr55619.s
  group: GRPSERIAL
test_pr55619_2959:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr55619.c'
    sources:
      binary: pr55619.s
  group: GRPSERIAL
test_pr55619_630:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr55619.c'
    sources:
      binary: pr55619.s
  group: GRPSERIAL
test_pr55771_1468:
  build:
    cflags: -std=c++98
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr55771.c'
    sources:
      binary: ./pr55771.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr55771_1469:
  build:
    cflags: -std=c++11
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr55771.c'
    sources:
      binary: ./pr55771.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr55771_1470:
  build:
    cflags: -std=c++14
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr55771.c'
    sources:
      binary: ./pr55771.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr55771_2123:
  build:
    cflags: -Wc++-compat
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr55771.c'
    sources:
      binary: ./pr55771.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr55771_242:
  build:
    cflags: -Wc++-compat
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr55771.c'
    sources:
      binary: ./pr55771.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr55771_2960:
  build:
    cflags: -std=c++98
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr55771.c'
    sources:
      binary: ./pr55771.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr55771_2961:
  build:
    cflags: -std=c++11
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr55771.c'
    sources:
      binary: ./pr55771.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr55771_2962:
  build:
    cflags: -std=c++14
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr55771.c'
    sources:
      binary: ./pr55771.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr55771_631:
  build:
    cflags: -Wc++-compat
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr55771.c'
    sources:
      binary: ./pr55771.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr56302_1471:
  build:
    cflags: "-std=gnu++98 -O0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr56302.c'
    sources:
      binary: pr56302.s
  group: GRPSERIAL
test_pr56302_1472:
  build:
    cflags: "-std=gnu++11 -O0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr56302.c'
    sources:
      binary: pr56302.s
  group: GRPSERIAL
test_pr56302_1473:
  build:
    cflags: "-std=gnu++14 -O0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr56302.c'
    sources:
      binary: pr56302.s
  group: GRPSERIAL
test_pr56302_2124:
  build:
    cflags: "-Wc++-compat  -O0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr56302.c'
    sources:
      binary: pr56302.s
  group: GRPSERIAL
test_pr56302_243:
  build:
    cflags: "-Wc++-compat  -O0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr56302.c'
    sources:
      binary: pr56302.s
  group: GRPSERIAL
test_pr56302_2963:
  build:
    cflags: "-std=gnu++98 -O0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr56302.c'
    sources:
      binary: pr56302.s
  group: GRPSERIAL
test_pr56302_2964:
  build:
    cflags: "-std=gnu++11 -O0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr56302.c'
    sources:
      binary: pr56302.s
  group: GRPSERIAL
test_pr56302_2965:
  build:
    cflags: "-std=gnu++14 -O0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr56302.c'
    sources:
      binary: pr56302.s
  group: GRPSERIAL
test_pr56302_632:
  build:
    cflags: "-Wc++-compat  -O0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr56302.c'
    sources:
      binary: pr56302.s
  group: GRPSERIAL
test_pr56493_1474:
  build:
    cflags: "-std=gnu++98 -O2 -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr56493.c'
    sources:
      binary: pr56493.s
  group: GRPSERIAL
test_pr56493_1475:
  build:
    cflags: "-std=gnu++11 -O2 -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr56493.c'
    sources:
      binary: pr56493.s
  group: GRPSERIAL
test_pr56493_1476:
  build:
    cflags: "-std=gnu++14 -O2 -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr56493.c'
    sources:
      binary: pr56493.s
  group: GRPSERIAL
test_pr56493_2125:
  build:
    cflags: "-Wc++-compat  -O2 -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr56493.c'
    sources:
      binary: pr56493.s
  group: GRPSERIAL
test_pr56493_244:
  build:
    cflags: "-Wc++-compat  -O2 -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr56493.c'
    sources:
      binary: pr56493.s
  group: GRPSERIAL
test_pr56493_2966:
  build:
    cflags: "-std=gnu++98 -O2 -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr56493.c'
    sources:
      binary: pr56493.s
  group: GRPSERIAL
test_pr56493_2967:
  build:
    cflags: "-std=gnu++11 -O2 -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr56493.c'
    sources:
      binary: pr56493.s
  group: GRPSERIAL
test_pr56493_2968:
  build:
    cflags: "-std=gnu++14 -O2 -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr56493.c'
    sources:
      binary: pr56493.s
  group: GRPSERIAL
test_pr56493_633:
  build:
    cflags: "-Wc++-compat  -O2 -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr56493.c'
    sources:
      binary: pr56493.s
  group: GRPSERIAL
test_pr56566_1477:
  build:
    cflags: "-std=gnu++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr56566.c'
    sources:
      binary: pr56566.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("too small|narrower")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("too small|narrower")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("too small|narrower")[^\n]*\n?)+'
test_pr56566_1478:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr56566.c'
    sources:
      binary: pr56566.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("too small|narrower")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("too small|narrower")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("too small|narrower")[^\n]*\n?)+'
test_pr56566_1479:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr56566.c'
    sources:
      binary: pr56566.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("too small|narrower")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("too small|narrower")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("too small|narrower")[^\n]*\n?)+'
test_pr56566_2126:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr56566.c'
    sources:
      binary: pr56566.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("too small|narrower")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("too small|narrower")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("too small|narrower")[^\n]*\n?)+'
test_pr56566_245:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr56566.c'
    sources:
      binary: pr56566.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("too small|narrower")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("too small|narrower")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("too small|narrower")[^\n]*\n?)+'
test_pr56566_2969:
  build:
    cflags: "-std=gnu++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr56566.c'
    sources:
      binary: pr56566.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("too small|narrower")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("too small|narrower")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("too small|narrower")[^\n]*\n?)+'
test_pr56566_2970:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr56566.c'
    sources:
      binary: pr56566.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("too small|narrower")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("too small|narrower")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("too small|narrower")[^\n]*\n?)+'
test_pr56566_2971:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr56566.c'
    sources:
      binary: pr56566.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("too small|narrower")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("too small|narrower")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("too small|narrower")[^\n]*\n?)+'
test_pr56566_634:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr56566.c'
    sources:
      binary: pr56566.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("too small|narrower")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("too small|narrower")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("too small|narrower")[^\n]*\n?)+'
test_pr56607_1480:
  build:
    cflags: "-std=gnu++98 -O2 -Wdiv-by-zero\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr56607.c'
    sources:
      binary: pr56607.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("division by zero")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("division by zero")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("division by zero")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("division by zero")[^\n]*\n?)+'
test_pr56607_1481:
  build:
    cflags: "-std=gnu++11 -O2 -Wdiv-by-zero\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr56607.c'
    sources:
      binary: pr56607.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("division by zero")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("division by zero")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("division by zero")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("division by zero")[^\n]*\n?)+'
test_pr56607_1482:
  build:
    cflags: "-std=gnu++14 -O2 -Wdiv-by-zero\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr56607.c'
    sources:
      binary: pr56607.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("division by zero")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("division by zero")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("division by zero")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("division by zero")[^\n]*\n?)+'
test_pr56607_2127:
  build:
    cflags: "-Wc++-compat  -O2 -Wdiv-by-zero\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr56607.c'
    sources:
      binary: pr56607.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("division by zero")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("division by zero")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("division by zero")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("division by zero")[^\n]*\n?)+'
test_pr56607_246:
  build:
    cflags: "-Wc++-compat  -O2 -Wdiv-by-zero\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr56607.c'
    sources:
      binary: pr56607.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("division by zero")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("division by zero")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("division by zero")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("division by zero")[^\n]*\n?)+'
test_pr56607_2972:
  build:
    cflags: "-std=gnu++98 -O2 -Wdiv-by-zero\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr56607.c'
    sources:
      binary: pr56607.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("division by zero")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("division by zero")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("division by zero")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("division by zero")[^\n]*\n?)+'
test_pr56607_2973:
  build:
    cflags: "-std=gnu++11 -O2 -Wdiv-by-zero\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr56607.c'
    sources:
      binary: pr56607.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("division by zero")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("division by zero")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("division by zero")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("division by zero")[^\n]*\n?)+'
test_pr56607_2974:
  build:
    cflags: "-std=gnu++14 -O2 -Wdiv-by-zero\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr56607.c'
    sources:
      binary: pr56607.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("division by zero")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("division by zero")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("division by zero")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("division by zero")[^\n]*\n?)+'
test_pr56607_635:
  build:
    cflags: "-Wc++-compat  -O2 -Wdiv-by-zero\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr56607.c'
    sources:
      binary: pr56607.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("division by zero")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("division by zero")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("division by zero")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("division by zero")[^\n]*\n?)+'
test_pr57653-2_1483:
  build:
    cflags: "-std=gnu++98 -imacros ./c-c++-common/pr57653-2.h\n -E"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr57653-2.c'
    sources:
      binary: pr57653-2.i
  group: GRPSERIAL
test_pr57653-2_1484:
  build:
    cflags: "-std=gnu++11 -imacros ./c-c++-common/pr57653-2.h\n -E"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr57653-2.c'
    sources:
      binary: pr57653-2.i
  group: GRPSERIAL
test_pr57653-2_1485:
  build:
    cflags: "-std=gnu++14 -imacros ./c-c++-common/pr57653-2.h\n -E"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr57653-2.c'
    sources:
      binary: pr57653-2.i
  group: GRPSERIAL
test_pr57653-2_2128:
  build:
    cflags: "-Wc++-compat  -imacros ./c-c++-common/pr57653-2.h\n -E"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr57653-2.c'
    sources:
      binary: pr57653-2.i
  group: GRPSERIAL
test_pr57653-2_247:
  build:
    cflags: "-Wc++-compat  -imacros ./c-c++-common/pr57653-2.h\n -E"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr57653-2.c'
    sources:
      binary: pr57653-2.i
  group: GRPSERIAL
test_pr57653-2_2975:
  build:
    cflags: "-std=gnu++98 -imacros ./c-c++-common/pr57653-2.h\n -E"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr57653-2.c'
    sources:
      binary: pr57653-2.i
  group: GRPSERIAL
test_pr57653-2_2976:
  build:
    cflags: "-std=gnu++11 -imacros ./c-c++-common/pr57653-2.h\n -E"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr57653-2.c'
    sources:
      binary: pr57653-2.i
  group: GRPSERIAL
test_pr57653-2_2977:
  build:
    cflags: "-std=gnu++14 -imacros ./c-c++-common/pr57653-2.h\n -E"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr57653-2.c'
    sources:
      binary: pr57653-2.i
  group: GRPSERIAL
test_pr57653-2_636:
  build:
    cflags: "-Wc++-compat  -imacros ./c-c++-common/pr57653-2.h\n -E"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr57653-2.c'
    sources:
      binary: pr57653-2.i
  group: GRPSERIAL
test_pr57653_1486:
  build:
    cflags: "-std=gnu++98 -imacros ./c-c++-common/pr57653.h -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr57653.c'
    sources:
      binary: pr57653.s
  group: GRPSERIAL
test_pr57653_1487:
  build:
    cflags: "-std=gnu++11 -imacros ./c-c++-common/pr57653.h -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr57653.c'
    sources:
      binary: pr57653.s
  group: GRPSERIAL
test_pr57653_1488:
  build:
    cflags: "-std=gnu++14 -imacros ./c-c++-common/pr57653.h -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr57653.c'
    sources:
      binary: pr57653.s
  group: GRPSERIAL
test_pr57653_2129:
  build:
    cflags: "-Wc++-compat -imacros ./c-c++-common/pr57653.h -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr57653.c'
    sources:
      binary: pr57653.s
  group: GRPSERIAL
test_pr57653_248:
  build:
    cflags: "-Wc++-compat -imacros ./c-c++-common/pr57653.h -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr57653.c'
    sources:
      binary: pr57653.s
  group: GRPSERIAL
test_pr57653_2978:
  build:
    cflags: "-std=gnu++98 -imacros ./c-c++-common/pr57653.h -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr57653.c'
    sources:
      binary: pr57653.s
  group: GRPSERIAL
test_pr57653_2979:
  build:
    cflags: "-std=gnu++11 -imacros ./c-c++-common/pr57653.h -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr57653.c'
    sources:
      binary: pr57653.s
  group: GRPSERIAL
test_pr57653_2980:
  build:
    cflags: "-std=gnu++14 -imacros ./c-c++-common/pr57653.h -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr57653.c'
    sources:
      binary: pr57653.s
  group: GRPSERIAL
test_pr57653_637:
  build:
    cflags: "-Wc++-compat -imacros ./c-c++-common/pr57653.h -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr57653.c'
    sources:
      binary: pr57653.s
  group: GRPSERIAL
test_pr57793_1489:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr57793.c'
    sources:
      binary: pr57793.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("type .B. is too
          large")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of array
          .c. is too large")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of array
          .d. is too large")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("type .struct B.
          is too large")[^\n]*\n?)+'
test_pr57793_1490:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr57793.c'
    sources:
      binary: pr57793.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("type .B. is too
          large")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of array
          .c. is too large")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of array
          .d. is too large")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("type .struct B.
          is too large")[^\n]*\n?)+'
test_pr57793_1491:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr57793.c'
    sources:
      binary: pr57793.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("type .B. is too
          large")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of array
          .c. is too large")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of array
          .d. is too large")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("type .struct B.
          is too large")[^\n]*\n?)+'
test_pr57793_2130:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr57793.c'
    sources:
      binary: pr57793.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("type .B. is too
          large")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of array
          .c. is too large")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of array
          .d. is too large")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("type .struct B.
          is too large")[^\n]*\n?)+'
test_pr57793_249:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr57793.c'
    sources:
      binary: pr57793.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("type .B. is too
          large")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of array
          .c. is too large")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of array
          .d. is too large")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("type .struct B.
          is too large")[^\n]*\n?)+'
test_pr57793_2981:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr57793.c'
    sources:
      binary: pr57793.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("type .B. is too
          large")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of array
          .c. is too large")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of array
          .d. is too large")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("type .struct B.
          is too large")[^\n]*\n?)+'
test_pr57793_2982:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr57793.c'
    sources:
      binary: pr57793.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("type .B. is too
          large")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of array
          .c. is too large")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of array
          .d. is too large")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("type .struct B.
          is too large")[^\n]*\n?)+'
test_pr57793_2983:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr57793.c'
    sources:
      binary: pr57793.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("type .B. is too
          large")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of array
          .c. is too large")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of array
          .d. is too large")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("type .struct B.
          is too large")[^\n]*\n?)+'
test_pr57793_638:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr57793.c'
    sources:
      binary: pr57793.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("type .B. is too
          large")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of array
          .c. is too large")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of array
          .d. is too large")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("type .struct B.
          is too large")[^\n]*\n?)+'
test_pr58346-1_1492:
  build:
    cflags: "-std=gnu++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr58346-1.c'
    sources:
      binary: pr58346-1.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
test_pr58346-1_1493:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr58346-1.c'
    sources:
      binary: pr58346-1.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
test_pr58346-1_1494:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr58346-1.c'
    sources:
      binary: pr58346-1.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
test_pr58346-1_2131:
  build:
    cflags: "-Wc++-compat  -Wno-c++-compat\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr58346-1.c'
    sources:
      binary: pr58346-1.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
test_pr58346-1_250:
  build:
    cflags: "-Wc++-compat  -Wno-c++-compat\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr58346-1.c'
    sources:
      binary: pr58346-1.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
test_pr58346-1_2984:
  build:
    cflags: "-std=gnu++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr58346-1.c'
    sources:
      binary: pr58346-1.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
test_pr58346-1_2985:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr58346-1.c'
    sources:
      binary: pr58346-1.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
test_pr58346-1_2986:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr58346-1.c'
    sources:
      binary: pr58346-1.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
test_pr58346-1_639:
  build:
    cflags: "-Wc++-compat  -Wno-c++-compat\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr58346-1.c'
    sources:
      binary: pr58346-1.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
test_pr58346-2_1495:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr58346-2.c'
    sources:
      binary: pr58346-2.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
test_pr58346-2_1496:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr58346-2.c'
    sources:
      binary: pr58346-2.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
test_pr58346-2_1497:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr58346-2.c'
    sources:
      binary: pr58346-2.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
test_pr58346-2_2132:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr58346-2.c'
    sources:
      binary: pr58346-2.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
test_pr58346-2_251:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr58346-2.c'
    sources:
      binary: pr58346-2.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
test_pr58346-2_2987:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr58346-2.c'
    sources:
      binary: pr58346-2.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
test_pr58346-2_2988:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr58346-2.c'
    sources:
      binary: pr58346-2.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
test_pr58346-2_2989:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr58346-2.c'
    sources:
      binary: pr58346-2.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
test_pr58346-2_640:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr58346-2.c'
    sources:
      binary: pr58346-2.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
test_pr58346-3_1498:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr58346-3.c'
    sources:
      binary: pr58346-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
test_pr58346-3_1499:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr58346-3.c'
    sources:
      binary: pr58346-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
test_pr58346-3_1500:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr58346-3.c'
    sources:
      binary: pr58346-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
test_pr58346-3_2133:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr58346-3.c'
    sources:
      binary: pr58346-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
test_pr58346-3_252:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr58346-3.c'
    sources:
      binary: pr58346-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
test_pr58346-3_2990:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr58346-3.c'
    sources:
      binary: pr58346-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
test_pr58346-3_2991:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr58346-3.c'
    sources:
      binary: pr58346-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
test_pr58346-3_2992:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr58346-3.c'
    sources:
      binary: pr58346-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
test_pr58346-3_641:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr58346-3.c'
    sources:
      binary: pr58346-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("arithmetic on
          pointer to an empty aggregate")[^\n]*\n?)+'
test_pr59032_1501:
  build:
    cflags: "-std=gnu++98 -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr59032.c'
    sources:
      binary: pr59032.s
  group: GRPSERIAL
test_pr59032_1502:
  build:
    cflags: "-std=gnu++11 -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr59032.c'
    sources:
      binary: pr59032.s
  group: GRPSERIAL
test_pr59032_1503:
  build:
    cflags: "-std=gnu++14 -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr59032.c'
    sources:
      binary: pr59032.s
  group: GRPSERIAL
test_pr59032_2134:
  build:
    cflags: "-Wc++-compat  -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr59032.c'
    sources:
      binary: pr59032.s
  group: GRPSERIAL
test_pr59032_253:
  build:
    cflags: "-Wc++-compat  -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr59032.c'
    sources:
      binary: pr59032.s
  group: GRPSERIAL
test_pr59032_2993:
  build:
    cflags: "-std=gnu++98 -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr59032.c'
    sources:
      binary: pr59032.s
  group: GRPSERIAL
test_pr59032_2994:
  build:
    cflags: "-std=gnu++11 -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr59032.c'
    sources:
      binary: pr59032.s
  group: GRPSERIAL
test_pr59032_2995:
  build:
    cflags: "-std=gnu++14 -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr59032.c'
    sources:
      binary: pr59032.s
  group: GRPSERIAL
test_pr59032_642:
  build:
    cflags: "-Wc++-compat  -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr59032.c'
    sources:
      binary: pr59032.s
  group: GRPSERIAL
test_pr59037_1504:
  build:
    cflags: "-std=gnu++98 -O3\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr59037.c'
    sources:
      binary: pr59037.s
  group: GRPSERIAL
test_pr59037_1505:
  build:
    cflags: "-std=gnu++11 -O3\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr59037.c'
    sources:
      binary: pr59037.s
  group: GRPSERIAL
test_pr59037_1506:
  build:
    cflags: "-std=gnu++14 -O3\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr59037.c'
    sources:
      binary: pr59037.s
  group: GRPSERIAL
test_pr59037_2135:
  build:
    cflags: "-Wc++-compat  -O3\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr59037.c'
    sources:
      binary: pr59037.s
  group: GRPSERIAL
test_pr59037_254:
  build:
    cflags: "-Wc++-compat  -O3\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr59037.c'
    sources:
      binary: pr59037.s
  group: GRPSERIAL
test_pr59037_2996:
  build:
    cflags: "-std=gnu++98 -O3\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr59037.c'
    sources:
      binary: pr59037.s
  group: GRPSERIAL
test_pr59037_2997:
  build:
    cflags: "-std=gnu++11 -O3\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr59037.c'
    sources:
      binary: pr59037.s
  group: GRPSERIAL
test_pr59037_2998:
  build:
    cflags: "-std=gnu++14 -O3\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr59037.c'
    sources:
      binary: pr59037.s
  group: GRPSERIAL
test_pr59037_643:
  build:
    cflags: "-Wc++-compat  -O3\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr59037.c'
    sources:
      binary: pr59037.s
  group: GRPSERIAL
test_pr59223_1507:
  build:
    cflags: "-std=gnu++98 -O2 -Wmaybe-uninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr59223.c'
    sources:
      binary: pr59223.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("may be used uninitialized
          in this function")[^\n]*\n?)+'
test_pr59223_1508:
  build:
    cflags: "-std=gnu++11 -O2 -Wmaybe-uninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr59223.c'
    sources:
      binary: pr59223.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("may be used uninitialized
          in this function")[^\n]*\n?)+'
test_pr59223_1509:
  build:
    cflags: "-std=gnu++14 -O2 -Wmaybe-uninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr59223.c'
    sources:
      binary: pr59223.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("may be used uninitialized
          in this function")[^\n]*\n?)+'
test_pr59223_2136:
  build:
    cflags: "-Wc++-compat  -O2 -Wmaybe-uninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr59223.c'
    sources:
      binary: pr59223.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("may be used uninitialized
          in this function")[^\n]*\n?)+'
test_pr59223_255:
  build:
    cflags: "-Wc++-compat  -O2 -Wmaybe-uninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr59223.c'
    sources:
      binary: pr59223.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("may be used uninitialized
          in this function")[^\n]*\n?)+'
test_pr59223_2999:
  build:
    cflags: "-std=gnu++98 -O2 -Wmaybe-uninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr59223.c'
    sources:
      binary: pr59223.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("may be used uninitialized
          in this function")[^\n]*\n?)+'
test_pr59223_3000:
  build:
    cflags: "-std=gnu++11 -O2 -Wmaybe-uninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr59223.c'
    sources:
      binary: pr59223.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("may be used uninitialized
          in this function")[^\n]*\n?)+'
test_pr59223_3001:
  build:
    cflags: "-std=gnu++14 -O2 -Wmaybe-uninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr59223.c'
    sources:
      binary: pr59223.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("may be used uninitialized
          in this function")[^\n]*\n?)+'
test_pr59223_644:
  build:
    cflags: "-Wc++-compat  -O2 -Wmaybe-uninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr59223.c'
    sources:
      binary: pr59223.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("may be used uninitialized
          in this function")[^\n]*\n?)+'
test_pr59280_1510:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr59280.c'
    sources:
      binary: pr59280.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constructor priorities
          must be integers|was not declared|undeclared|constructor priorities are
          not supported")[^\n]*\n?)+'
test_pr59280_1511:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr59280.c'
    sources:
      binary: pr59280.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constructor priorities
          must be integers|was not declared|undeclared|constructor priorities are
          not supported")[^\n]*\n?)+'
test_pr59280_1512:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr59280.c'
    sources:
      binary: pr59280.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constructor priorities
          must be integers|was not declared|undeclared|constructor priorities are
          not supported")[^\n]*\n?)+'
test_pr59280_2137:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr59280.c'
    sources:
      binary: pr59280.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constructor priorities
          must be integers|was not declared|undeclared|constructor priorities are
          not supported")[^\n]*\n?)+'
test_pr59280_256:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr59280.c'
    sources:
      binary: pr59280.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constructor priorities
          must be integers|was not declared|undeclared|constructor priorities are
          not supported")[^\n]*\n?)+'
test_pr59280_3002:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr59280.c'
    sources:
      binary: pr59280.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constructor priorities
          must be integers|was not declared|undeclared|constructor priorities are
          not supported")[^\n]*\n?)+'
test_pr59280_3003:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr59280.c'
    sources:
      binary: pr59280.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constructor priorities
          must be integers|was not declared|undeclared|constructor priorities are
          not supported")[^\n]*\n?)+'
test_pr59280_3004:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr59280.c'
    sources:
      binary: pr59280.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constructor priorities
          must be integers|was not declared|undeclared|constructor priorities are
          not supported")[^\n]*\n?)+'
test_pr59280_645:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr59280.c'
    sources:
      binary: pr59280.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constructor priorities
          must be integers|was not declared|undeclared|constructor priorities are
          not supported")[^\n]*\n?)+'
test_pr60101_1513:
  build:
    cflags: "-std=gnu++98 -O2 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60101.c'
    sources:
      binary: pr60101.s
  group: GRPSERIAL
test_pr60101_1514:
  build:
    cflags: "-std=gnu++11 -O2 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60101.c'
    sources:
      binary: pr60101.s
  group: GRPSERIAL
test_pr60101_1515:
  build:
    cflags: "-std=gnu++14 -O2 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60101.c'
    sources:
      binary: pr60101.s
  group: GRPSERIAL
test_pr60101_2138:
  build:
    cflags: "-Wc++-compat  -O2 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60101.c'
    sources:
      binary: pr60101.s
  group: GRPSERIAL
test_pr60101_257:
  build:
    cflags: "-Wc++-compat  -O2 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60101.c'
    sources:
      binary: pr60101.s
  group: GRPSERIAL
test_pr60101_3005:
  build:
    cflags: "-std=gnu++98 -O2 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60101.c'
    sources:
      binary: pr60101.s
  group: GRPSERIAL
test_pr60101_3006:
  build:
    cflags: "-std=gnu++11 -O2 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60101.c'
    sources:
      binary: pr60101.s
  group: GRPSERIAL
test_pr60101_3007:
  build:
    cflags: "-std=gnu++14 -O2 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60101.c'
    sources:
      binary: pr60101.s
  group: GRPSERIAL
test_pr60101_646:
  build:
    cflags: "-Wc++-compat  -O2 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60101.c'
    sources:
      binary: pr60101.s
  group: GRPSERIAL
test_pr60156_1516:
  build:
    cflags: "-std=gnu++98 -Wpedantic\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60156.c'
    sources:
      binary: pr60156.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("declared as variadic
          function")[^\n]*\n?)+'
test_pr60156_1517:
  build:
    cflags: "-std=gnu++11 -Wpedantic\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60156.c'
    sources:
      binary: pr60156.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("declared as variadic
          function")[^\n]*\n?)+'
test_pr60156_1518:
  build:
    cflags: "-std=gnu++14 -Wpedantic\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60156.c'
    sources:
      binary: pr60156.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("declared as variadic
          function")[^\n]*\n?)+'
test_pr60156_2139:
  build:
    cflags: "-Wc++-compat  -Wpedantic\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60156.c'
    sources:
      binary: pr60156.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("declared as variadic
          function")[^\n]*\n?)+'
test_pr60156_258:
  build:
    cflags: "-Wc++-compat  -Wpedantic\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60156.c'
    sources:
      binary: pr60156.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("declared as variadic
          function")[^\n]*\n?)+'
test_pr60156_3008:
  build:
    cflags: "-std=gnu++98 -Wpedantic\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60156.c'
    sources:
      binary: pr60156.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("declared as variadic
          function")[^\n]*\n?)+'
test_pr60156_3009:
  build:
    cflags: "-std=gnu++11 -Wpedantic\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60156.c'
    sources:
      binary: pr60156.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("declared as variadic
          function")[^\n]*\n?)+'
test_pr60156_3010:
  build:
    cflags: "-std=gnu++14 -Wpedantic\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60156.c'
    sources:
      binary: pr60156.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("declared as variadic
          function")[^\n]*\n?)+'
test_pr60156_647:
  build:
    cflags: "-Wc++-compat  -Wpedantic\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60156.c'
    sources:
      binary: pr60156.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("declared as variadic
          function")[^\n]*\n?)+'
test_pr60226_1519:
  build:
    cflags: "-std=gnu++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60226.c'
    sources:
      binary: pr60226.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requested alignment
          is too large")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("alignment of array
          elements is greater than element size|maximum object file alignment")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requested alignment
          is too large|maximum object file alignment")[^\n]*\n?)+'
test_pr60226_1520:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60226.c'
    sources:
      binary: pr60226.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requested alignment
          is too large")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("alignment of array
          elements is greater than element size|maximum object file alignment")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requested alignment
          is too large|maximum object file alignment")[^\n]*\n?)+'
test_pr60226_1521:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60226.c'
    sources:
      binary: pr60226.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requested alignment
          is too large")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("alignment of array
          elements is greater than element size|maximum object file alignment")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requested alignment
          is too large|maximum object file alignment")[^\n]*\n?)+'
test_pr60226_2140:
  build:
    cflags: "-Wc++-compat  -Wno-c++-compat\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60226.c'
    sources:
      binary: pr60226.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requested alignment
          is too large")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("alignment of array
          elements is greater than element size|maximum object file alignment")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requested alignment
          is too large|maximum object file alignment")[^\n]*\n?)+'
test_pr60226_259:
  build:
    cflags: "-Wc++-compat  -Wno-c++-compat\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60226.c'
    sources:
      binary: pr60226.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requested alignment
          is too large")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("alignment of array
          elements is greater than element size|maximum object file alignment")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requested alignment
          is too large|maximum object file alignment")[^\n]*\n?)+'
test_pr60226_3011:
  build:
    cflags: "-std=gnu++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60226.c'
    sources:
      binary: pr60226.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requested alignment
          is too large")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("alignment of array
          elements is greater than element size|maximum object file alignment")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requested alignment
          is too large|maximum object file alignment")[^\n]*\n?)+'
test_pr60226_3012:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60226.c'
    sources:
      binary: pr60226.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requested alignment
          is too large")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("alignment of array
          elements is greater than element size|maximum object file alignment")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requested alignment
          is too large|maximum object file alignment")[^\n]*\n?)+'
test_pr60226_3013:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60226.c'
    sources:
      binary: pr60226.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requested alignment
          is too large")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("alignment of array
          elements is greater than element size|maximum object file alignment")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requested alignment
          is too large|maximum object file alignment")[^\n]*\n?)+'
test_pr60226_648:
  build:
    cflags: "-Wc++-compat  -Wno-c++-compat\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60226.c'
    sources:
      binary: pr60226.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requested alignment
          is too large")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("alignment of array
          elements is greater than element size|maximum object file alignment")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requested alignment
          is too large|maximum object file alignment")[^\n]*\n?)+'
test_pr60439_1522:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60439.c'
    sources:
      binary: pr60439.s
  group: GRPSERIAL
  validate:
    match:
      L103:
        expect: true
        expr: '(^|\n)([^\n]+(:103:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+(:108:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+(:129:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L140:
        expect: true
        expr: '(^|\n)([^\n]+(:140:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+(:83:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
test_pr60439_1523:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60439.c'
    sources:
      binary: pr60439.s
  group: GRPSERIAL
  validate:
    match:
      L103:
        expect: true
        expr: '(^|\n)([^\n]+(:103:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+(:108:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+(:129:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L140:
        expect: true
        expr: '(^|\n)([^\n]+(:140:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+(:83:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
test_pr60439_1524:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60439.c'
    sources:
      binary: pr60439.s
  group: GRPSERIAL
  validate:
    match:
      L103:
        expect: true
        expr: '(^|\n)([^\n]+(:103:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+(:108:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+(:129:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L140:
        expect: true
        expr: '(^|\n)([^\n]+(:140:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+(:83:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
test_pr60439_2141:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60439.c'
    sources:
      binary: pr60439.s
  group: GRPSERIAL
  validate:
    match:
      L103:
        expect: true
        expr: '(^|\n)([^\n]+(:103:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+(:108:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+(:129:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L140:
        expect: true
        expr: '(^|\n)([^\n]+(:140:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+(:83:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
test_pr60439_260:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60439.c'
    sources:
      binary: pr60439.s
  group: GRPSERIAL
  validate:
    match:
      L103:
        expect: true
        expr: '(^|\n)([^\n]+(:103:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+(:108:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+(:129:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L140:
        expect: true
        expr: '(^|\n)([^\n]+(:140:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+(:83:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
test_pr60439_3014:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60439.c'
    sources:
      binary: pr60439.s
  group: GRPSERIAL
  validate:
    match:
      L103:
        expect: true
        expr: '(^|\n)([^\n]+(:103:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+(:108:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+(:129:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L140:
        expect: true
        expr: '(^|\n)([^\n]+(:140:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+(:83:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
test_pr60439_3015:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60439.c'
    sources:
      binary: pr60439.s
  group: GRPSERIAL
  validate:
    match:
      L103:
        expect: true
        expr: '(^|\n)([^\n]+(:103:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+(:108:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+(:129:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L140:
        expect: true
        expr: '(^|\n)([^\n]+(:140:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+(:83:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
test_pr60439_3016:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60439.c'
    sources:
      binary: pr60439.s
  group: GRPSERIAL
  validate:
    match:
      L103:
        expect: true
        expr: '(^|\n)([^\n]+(:103:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+(:108:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+(:129:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L140:
        expect: true
        expr: '(^|\n)([^\n]+(:140:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+(:83:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
test_pr60439_649:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60439.c'
    sources:
      binary: pr60439.s
  group: GRPSERIAL
  validate:
    match:
      L103:
        expect: true
        expr: '(^|\n)([^\n]+(:103:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+(:108:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+(:129:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L140:
        expect: true
        expr: '(^|\n)([^\n]+(:140:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+(:83:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
test_pr60689_1525:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60689.c'
    sources:
      binary: pr60689.s
  group: GRPSERIAL
test_pr60689_1526:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60689.c'
    sources:
      binary: pr60689.s
  group: GRPSERIAL
test_pr60689_1527:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60689.c'
    sources:
      binary: pr60689.s
  group: GRPSERIAL
test_pr60689_2142:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60689.c'
    sources:
      binary: pr60689.s
  group: GRPSERIAL
test_pr60689_261:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60689.c'
    sources:
      binary: pr60689.s
  group: GRPSERIAL
test_pr60689_3017:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60689.c'
    sources:
      binary: pr60689.s
  group: GRPSERIAL
test_pr60689_3018:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60689.c'
    sources:
      binary: pr60689.s
  group: GRPSERIAL
test_pr60689_3019:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60689.c'
    sources:
      binary: pr60689.s
  group: GRPSERIAL
test_pr60689_650:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr60689.c'
    sources:
      binary: pr60689.s
  group: GRPSERIAL
test_pr61405_1528:
  build:
    cflags: "-std=gnu++98 -Wswitch\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr61405.c'
    sources:
      binary: pr61405.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("enumeration value
          .C. not handled in switch")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("enumeration value
          .C. not handled in switch")[^\n]*\n?)+'
test_pr61405_1529:
  build:
    cflags: "-std=gnu++11 -Wswitch\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr61405.c'
    sources:
      binary: pr61405.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("enumeration value
          .C. not handled in switch")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("enumeration value
          .C. not handled in switch")[^\n]*\n?)+'
test_pr61405_1530:
  build:
    cflags: "-std=gnu++14 -Wswitch\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr61405.c'
    sources:
      binary: pr61405.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("enumeration value
          .C. not handled in switch")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("enumeration value
          .C. not handled in switch")[^\n]*\n?)+'
test_pr61405_2143:
  build:
    cflags: "-Wc++-compat  -Wswitch\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr61405.c'
    sources:
      binary: pr61405.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("enumeration value
          .C. not handled in switch")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("enumeration value
          .C. not handled in switch")[^\n]*\n?)+'
test_pr61405_262:
  build:
    cflags: "-Wc++-compat  -Wswitch\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr61405.c'
    sources:
      binary: pr61405.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("enumeration value
          .C. not handled in switch")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("enumeration value
          .C. not handled in switch")[^\n]*\n?)+'
test_pr61405_3020:
  build:
    cflags: "-std=gnu++98 -Wswitch\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr61405.c'
    sources:
      binary: pr61405.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("enumeration value
          .C. not handled in switch")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("enumeration value
          .C. not handled in switch")[^\n]*\n?)+'
test_pr61405_3021:
  build:
    cflags: "-std=gnu++11 -Wswitch\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr61405.c'
    sources:
      binary: pr61405.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("enumeration value
          .C. not handled in switch")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("enumeration value
          .C. not handled in switch")[^\n]*\n?)+'
test_pr61405_3022:
  build:
    cflags: "-std=gnu++14 -Wswitch\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr61405.c'
    sources:
      binary: pr61405.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("enumeration value
          .C. not handled in switch")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("enumeration value
          .C. not handled in switch")[^\n]*\n?)+'
test_pr61405_651:
  build:
    cflags: "-Wc++-compat  -Wswitch\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr61405.c'
    sources:
      binary: pr61405.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("enumeration value
          .C. not handled in switch")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("enumeration value
          .C. not handled in switch")[^\n]*\n?)+'
test_pr61534-1_1531:
  build:
    cflags: "-std=gnu++98 -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr61534-1.c'
    sources:
      binary: pr61534-1.s
  group: GRPSERIAL
test_pr61534-1_1532:
  build:
    cflags: "-std=gnu++11 -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr61534-1.c'
    sources:
      binary: pr61534-1.s
  group: GRPSERIAL
test_pr61534-1_1533:
  build:
    cflags: "-std=gnu++14 -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr61534-1.c'
    sources:
      binary: pr61534-1.s
  group: GRPSERIAL
test_pr61534-1_2144:
  build:
    cflags: "-Wc++-compat  -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr61534-1.c'
    sources:
      binary: pr61534-1.s
  group: GRPSERIAL
test_pr61534-1_263:
  build:
    cflags: "-Wc++-compat  -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr61534-1.c'
    sources:
      binary: pr61534-1.s
  group: GRPSERIAL
test_pr61534-1_3023:
  build:
    cflags: "-std=gnu++98 -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr61534-1.c'
    sources:
      binary: pr61534-1.s
  group: GRPSERIAL
test_pr61534-1_3024:
  build:
    cflags: "-std=gnu++11 -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr61534-1.c'
    sources:
      binary: pr61534-1.s
  group: GRPSERIAL
test_pr61534-1_3025:
  build:
    cflags: "-std=gnu++14 -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr61534-1.c'
    sources:
      binary: pr61534-1.s
  group: GRPSERIAL
test_pr61534-1_652:
  build:
    cflags: "-Wc++-compat  -Wlogical-op\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr61534-1.c'
    sources:
      binary: pr61534-1.s
  group: GRPSERIAL
test_pr61553_1534:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr61553.c'
    sources:
      binary: pr61553.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size mismatch")[^\n]*\n?)+'
test_pr61553_1535:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr61553.c'
    sources:
      binary: pr61553.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size mismatch")[^\n]*\n?)+'
test_pr61553_1536:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr61553.c'
    sources:
      binary: pr61553.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size mismatch")[^\n]*\n?)+'
test_pr61553_2145:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr61553.c'
    sources:
      binary: pr61553.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size mismatch")[^\n]*\n?)+'
test_pr61553_264:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr61553.c'
    sources:
      binary: pr61553.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size mismatch")[^\n]*\n?)+'
test_pr61553_3026:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr61553.c'
    sources:
      binary: pr61553.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size mismatch")[^\n]*\n?)+'
test_pr61553_3027:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr61553.c'
    sources:
      binary: pr61553.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size mismatch")[^\n]*\n?)+'
test_pr61553_3028:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr61553.c'
    sources:
      binary: pr61553.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size mismatch")[^\n]*\n?)+'
test_pr61553_653:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr61553.c'
    sources:
      binary: pr61553.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size mismatch")[^\n]*\n?)+'
test_pr62199-2_1537:
  build:
    cflags: "-std=gnu++98 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr62199-2.c'
    sources:
      binary: pr62199-2.s
  group: GRPSERIAL
test_pr62199-2_1538:
  build:
    cflags: "-std=gnu++11 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr62199-2.c'
    sources:
      binary: pr62199-2.s
  group: GRPSERIAL
test_pr62199-2_1539:
  build:
    cflags: "-std=gnu++14 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr62199-2.c'
    sources:
      binary: pr62199-2.s
  group: GRPSERIAL
test_pr62199-2_2146:
  build:
    cflags: "-Wc++-compat  -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr62199-2.c'
    sources:
      binary: pr62199-2.s
  group: GRPSERIAL
test_pr62199-2_265:
  build:
    cflags: "-Wc++-compat  -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr62199-2.c'
    sources:
      binary: pr62199-2.s
  group: GRPSERIAL
test_pr62199-2_3029:
  build:
    cflags: "-std=gnu++98 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr62199-2.c'
    sources:
      binary: pr62199-2.s
  group: GRPSERIAL
test_pr62199-2_3030:
  build:
    cflags: "-std=gnu++11 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr62199-2.c'
    sources:
      binary: pr62199-2.s
  group: GRPSERIAL
test_pr62199-2_3031:
  build:
    cflags: "-std=gnu++14 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr62199-2.c'
    sources:
      binary: pr62199-2.s
  group: GRPSERIAL
test_pr62199-2_654:
  build:
    cflags: "-Wc++-compat  -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr62199-2.c'
    sources:
      binary: pr62199-2.s
  group: GRPSERIAL
test_pr62199_1540:
  build:
    cflags: "-std=gnu++98 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr62199.c'
    sources:
      binary: pr62199.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("16:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("10:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("15:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("20:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("30:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("24:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("11:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("11:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("12:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("17:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("17:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("19:logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_pr62199_1541:
  build:
    cflags: "-std=gnu++11 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr62199.c'
    sources:
      binary: pr62199.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("16:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("10:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("15:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("20:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("30:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("24:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("11:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("11:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("12:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("17:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("17:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("19:logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_pr62199_1542:
  build:
    cflags: "-std=gnu++14 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr62199.c'
    sources:
      binary: pr62199.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("16:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("10:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("15:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("20:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("30:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("24:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("11:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("11:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("12:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("17:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("17:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("19:logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_pr62199_2147:
  build:
    cflags: "-Wc++-compat  -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr62199.c'
    sources:
      binary: pr62199.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("16:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("10:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("15:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("20:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("30:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("24:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("11:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("11:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("12:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("17:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("17:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("19:logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_pr62199_266:
  build:
    cflags: "-Wc++-compat  -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr62199.c'
    sources:
      binary: pr62199.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("16:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("10:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("15:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("20:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("30:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("24:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("11:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("11:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("12:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("17:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("17:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("19:logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_pr62199_3032:
  build:
    cflags: "-std=gnu++98 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr62199.c'
    sources:
      binary: pr62199.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("16:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("10:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("15:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("20:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("30:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("24:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("11:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("11:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("12:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("17:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("17:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("19:logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_pr62199_3033:
  build:
    cflags: "-std=gnu++11 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr62199.c'
    sources:
      binary: pr62199.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("16:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("10:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("15:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("20:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("30:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("24:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("11:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("11:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("12:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("17:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("17:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("19:logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_pr62199_3034:
  build:
    cflags: "-std=gnu++14 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr62199.c'
    sources:
      binary: pr62199.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("16:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("10:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("15:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("20:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("30:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("24:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("11:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("11:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("12:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("17:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("17:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("19:logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_pr62199_655:
  build:
    cflags: "-Wc++-compat  -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr62199.c'
    sources:
      binary: pr62199.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("16:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("10:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("15:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("20:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("30:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("24:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("11:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("11:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("12:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("17:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("17:logical not is
          only applied to the left hand side of comparison")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("19:logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_pr63764-1_1543:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr63764-1.c'
    sources:
      binary: pr63764-1.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue required
          as left operand of assignment")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue required
          as left operand of assignment")[^\n]*\n?)+'
test_pr63764-1_1544:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr63764-1.c'
    sources:
      binary: pr63764-1.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue required
          as left operand of assignment")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue required
          as left operand of assignment")[^\n]*\n?)+'
test_pr63764-1_1545:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr63764-1.c'
    sources:
      binary: pr63764-1.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue required
          as left operand of assignment")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue required
          as left operand of assignment")[^\n]*\n?)+'
test_pr63764-1_2148:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr63764-1.c'
    sources:
      binary: pr63764-1.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue required
          as left operand of assignment")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue required
          as left operand of assignment")[^\n]*\n?)+'
test_pr63764-1_267:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr63764-1.c'
    sources:
      binary: pr63764-1.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue required
          as left operand of assignment")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue required
          as left operand of assignment")[^\n]*\n?)+'
test_pr63764-1_3035:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr63764-1.c'
    sources:
      binary: pr63764-1.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue required
          as left operand of assignment")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue required
          as left operand of assignment")[^\n]*\n?)+'
test_pr63764-1_3036:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr63764-1.c'
    sources:
      binary: pr63764-1.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue required
          as left operand of assignment")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue required
          as left operand of assignment")[^\n]*\n?)+'
test_pr63764-1_3037:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr63764-1.c'
    sources:
      binary: pr63764-1.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue required
          as left operand of assignment")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue required
          as left operand of assignment")[^\n]*\n?)+'
test_pr63764-1_656:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr63764-1.c'
    sources:
      binary: pr63764-1.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue required
          as left operand of assignment")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue required
          as left operand of assignment")[^\n]*\n?)+'
test_pr63764-2_1546:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr63764-2.c'
    sources:
      binary: pr63764-2.s
  group: GRPSERIAL
test_pr63764-2_1547:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr63764-2.c'
    sources:
      binary: pr63764-2.s
  group: GRPSERIAL
test_pr63764-2_1548:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr63764-2.c'
    sources:
      binary: pr63764-2.s
  group: GRPSERIAL
test_pr63764-2_2149:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr63764-2.c'
    sources:
      binary: pr63764-2.s
  group: GRPSERIAL
test_pr63764-2_268:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr63764-2.c'
    sources:
      binary: pr63764-2.s
  group: GRPSERIAL
test_pr63764-2_3038:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr63764-2.c'
    sources:
      binary: pr63764-2.s
  group: GRPSERIAL
test_pr63764-2_3039:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr63764-2.c'
    sources:
      binary: pr63764-2.s
  group: GRPSERIAL
test_pr63764-2_3040:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr63764-2.c'
    sources:
      binary: pr63764-2.s
  group: GRPSERIAL
test_pr63764-2_657:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr63764-2.c'
    sources:
      binary: pr63764-2.s
  group: GRPSERIAL
test_pr65040_1549:
  build:
    cflags: "-std=gnu++98 -Wformat -Wformat-signedness\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr65040.c'
    sources:
      binary: pr65040.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("expects argument of
          type")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("expects argument of
          type")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("expects argument of
          type")[^\n]*\n?)+'
test_pr65040_1550:
  build:
    cflags: "-std=gnu++11 -Wformat -Wformat-signedness\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr65040.c'
    sources:
      binary: pr65040.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("expects argument of
          type")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("expects argument of
          type")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("expects argument of
          type")[^\n]*\n?)+'
test_pr65040_1551:
  build:
    cflags: "-std=gnu++14 -Wformat -Wformat-signedness\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr65040.c'
    sources:
      binary: pr65040.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("expects argument of
          type")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("expects argument of
          type")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("expects argument of
          type")[^\n]*\n?)+'
test_pr65040_2150:
  build:
    cflags: "-Wc++-compat  -Wformat -Wformat-signedness\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr65040.c'
    sources:
      binary: pr65040.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("expects argument of
          type")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("expects argument of
          type")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("expects argument of
          type")[^\n]*\n?)+'
test_pr65040_269:
  build:
    cflags: "-Wc++-compat  -Wformat -Wformat-signedness\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr65040.c'
    sources:
      binary: pr65040.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("expects argument of
          type")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("expects argument of
          type")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("expects argument of
          type")[^\n]*\n?)+'
test_pr65040_3041:
  build:
    cflags: "-std=gnu++98 -Wformat -Wformat-signedness\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr65040.c'
    sources:
      binary: pr65040.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("expects argument of
          type")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("expects argument of
          type")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("expects argument of
          type")[^\n]*\n?)+'
test_pr65040_3042:
  build:
    cflags: "-std=gnu++11 -Wformat -Wformat-signedness\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr65040.c'
    sources:
      binary: pr65040.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("expects argument of
          type")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("expects argument of
          type")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("expects argument of
          type")[^\n]*\n?)+'
test_pr65040_3043:
  build:
    cflags: "-std=gnu++14 -Wformat -Wformat-signedness\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr65040.c'
    sources:
      binary: pr65040.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("expects argument of
          type")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("expects argument of
          type")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("expects argument of
          type")[^\n]*\n?)+'
test_pr65040_658:
  build:
    cflags: "-Wc++-compat  -Wformat -Wformat-signedness\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr65040.c'
    sources:
      binary: pr65040.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("expects argument of
          type")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("expects argument of
          type")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("expects argument of
          type")[^\n]*\n?)+'
test_pr65120_1552:
  build:
    cflags: "-std=gnu++98 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr65120.c'
    sources:
      binary: pr65120.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_pr65120_1553:
  build:
    cflags: "-std=gnu++11 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr65120.c'
    sources:
      binary: pr65120.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_pr65120_1554:
  build:
    cflags: "-std=gnu++14 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr65120.c'
    sources:
      binary: pr65120.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_pr65120_2151:
  build:
    cflags: "-Wc++-compat  -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr65120.c'
    sources:
      binary: pr65120.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_pr65120_270:
  build:
    cflags: "-Wc++-compat  -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr65120.c'
    sources:
      binary: pr65120.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_pr65120_3044:
  build:
    cflags: "-std=gnu++98 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr65120.c'
    sources:
      binary: pr65120.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_pr65120_3045:
  build:
    cflags: "-std=gnu++11 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr65120.c'
    sources:
      binary: pr65120.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_pr65120_3046:
  build:
    cflags: "-std=gnu++14 -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr65120.c'
    sources:
      binary: pr65120.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_pr65120_659:
  build:
    cflags: "-Wc++-compat  -Wlogical-not-parentheses\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr65120.c'
    sources:
      binary: pr65120.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("logical not is only
          applied to the left hand side of comparison")[^\n]*\n?)+'
test_pr65556_1555:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr65556.c'
    sources:
      binary: pr65556.s
  group: GRPSERIAL
test_pr65556_1556:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr65556.c'
    sources:
      binary: pr65556.s
  group: GRPSERIAL
test_pr65556_1557:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr65556.c'
    sources:
      binary: pr65556.s
  group: GRPSERIAL
test_pr65556_2152:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr65556.c'
    sources:
      binary: pr65556.s
  group: GRPSERIAL
test_pr65556_271:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr65556.c'
    sources:
      binary: pr65556.s
  group: GRPSERIAL
test_pr65556_3047:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr65556.c'
    sources:
      binary: pr65556.s
  group: GRPSERIAL
test_pr65556_3048:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr65556.c'
    sources:
      binary: pr65556.s
  group: GRPSERIAL
test_pr65556_3049:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr65556.c'
    sources:
      binary: pr65556.s
  group: GRPSERIAL
test_pr65556_660:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr65556.c'
    sources:
      binary: pr65556.s
  group: GRPSERIAL
test_pr65830_1558:
  build:
    cflags: "-std=gnu++98 -O -Wno-shift-count-negative -Wno-shift-count-overflow\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr65830.c'
    sources:
      binary: pr65830.s
  group: GRPSERIAL
test_pr65830_1559:
  build:
    cflags: "-std=gnu++11 -O -Wno-shift-count-negative -Wno-shift-count-overflow\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr65830.c'
    sources:
      binary: pr65830.s
  group: GRPSERIAL
test_pr65830_1560:
  build:
    cflags: "-std=gnu++14 -O -Wno-shift-count-negative -Wno-shift-count-overflow\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr65830.c'
    sources:
      binary: pr65830.s
  group: GRPSERIAL
test_pr65830_2153:
  build:
    cflags: "-Wc++-compat  -O -Wno-shift-count-negative -Wno-shift-count-overflow\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr65830.c'
    sources:
      binary: pr65830.s
  group: GRPSERIAL
test_pr65830_272:
  build:
    cflags: "-Wc++-compat  -O -Wno-shift-count-negative -Wno-shift-count-overflow\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr65830.c'
    sources:
      binary: pr65830.s
  group: GRPSERIAL
test_pr65830_3050:
  build:
    cflags: "-std=gnu++98 -O -Wno-shift-count-negative -Wno-shift-count-overflow\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr65830.c'
    sources:
      binary: pr65830.s
  group: GRPSERIAL
test_pr65830_3051:
  build:
    cflags: "-std=gnu++11 -O -Wno-shift-count-negative -Wno-shift-count-overflow\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr65830.c'
    sources:
      binary: pr65830.s
  group: GRPSERIAL
test_pr65830_3052:
  build:
    cflags: "-std=gnu++14 -O -Wno-shift-count-negative -Wno-shift-count-overflow\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr65830.c'
    sources:
      binary: pr65830.s
  group: GRPSERIAL
test_pr65830_661:
  build:
    cflags: "-Wc++-compat  -O -Wno-shift-count-negative -Wno-shift-count-overflow\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr65830.c'
    sources:
      binary: pr65830.s
  group: GRPSERIAL
test_pr66208_1561:
  build:
    cflags: "-std=gnu++98 -Wnonnull\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr66208.c'
    sources:
      binary: pr66208.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
test_pr66208_1562:
  build:
    cflags: "-std=gnu++11 -Wnonnull\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr66208.c'
    sources:
      binary: pr66208.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
test_pr66208_1563:
  build:
    cflags: "-std=gnu++14 -Wnonnull\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr66208.c'
    sources:
      binary: pr66208.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
test_pr66208_2154:
  build:
    cflags: "-Wc++-compat  -Wnonnull\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr66208.c'
    sources:
      binary: pr66208.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
test_pr66208_273:
  build:
    cflags: "-Wc++-compat  -Wnonnull\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr66208.c'
    sources:
      binary: pr66208.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
test_pr66208_3053:
  build:
    cflags: "-std=gnu++98 -Wnonnull\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr66208.c'
    sources:
      binary: pr66208.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
test_pr66208_3054:
  build:
    cflags: "-std=gnu++11 -Wnonnull\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr66208.c'
    sources:
      binary: pr66208.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
test_pr66208_3055:
  build:
    cflags: "-std=gnu++14 -Wnonnull\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr66208.c'
    sources:
      binary: pr66208.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
test_pr66208_662:
  build:
    cflags: "-Wc++-compat  -Wnonnull\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr66208.c'
    sources:
      binary: pr66208.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("null argument")[^\n]*\n?)+'
test_pr66322_1564:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr66322.c'
    sources:
      binary: pr66322.s
  group: GRPSERIAL
  validate:
    match:
      L104:
        expect: true
        expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+(:106:)[^\n]*[0-9]+: warning:[^\n]*("upper value")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+(:113:)[^\n]*[0-9]+: warning:[^\n]*("case label")[^\n]*\n?)+'
      L117:
        expect: true
        expr: '(^|\n)([^\n]+(:117:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("case label")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("lower value")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+(:131:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+(:133:)[^\n]*[0-9]+: warning:[^\n]*("lower value")[^\n]*\n?)+'
      L138:
        expect: true
        expr: '(^|\n)([^\n]+(:138:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L140:
        expect: true
        expr: '(^|\n)([^\n]+(:140:)[^\n]*[0-9]+: warning:[^\n]*("case label")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("upper value")[^\n]*\n?)+'
test_pr66322_1565:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr66322.c'
    sources:
      binary: pr66322.s
  group: GRPSERIAL
  validate:
    match:
      L104:
        expect: true
        expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+(:106:)[^\n]*[0-9]+: warning:[^\n]*("upper value")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+(:113:)[^\n]*[0-9]+: warning:[^\n]*("case label")[^\n]*\n?)+'
      L117:
        expect: true
        expr: '(^|\n)([^\n]+(:117:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("case label")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("lower value")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+(:131:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+(:133:)[^\n]*[0-9]+: warning:[^\n]*("lower value")[^\n]*\n?)+'
      L138:
        expect: true
        expr: '(^|\n)([^\n]+(:138:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L140:
        expect: true
        expr: '(^|\n)([^\n]+(:140:)[^\n]*[0-9]+: warning:[^\n]*("case label")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("upper value")[^\n]*\n?)+'
test_pr66322_1566:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr66322.c'
    sources:
      binary: pr66322.s
  group: GRPSERIAL
  validate:
    match:
      L104:
        expect: true
        expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+(:106:)[^\n]*[0-9]+: warning:[^\n]*("upper value")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+(:113:)[^\n]*[0-9]+: warning:[^\n]*("case label")[^\n]*\n?)+'
      L117:
        expect: true
        expr: '(^|\n)([^\n]+(:117:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("case label")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("lower value")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+(:131:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+(:133:)[^\n]*[0-9]+: warning:[^\n]*("lower value")[^\n]*\n?)+'
      L138:
        expect: true
        expr: '(^|\n)([^\n]+(:138:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L140:
        expect: true
        expr: '(^|\n)([^\n]+(:140:)[^\n]*[0-9]+: warning:[^\n]*("case label")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("upper value")[^\n]*\n?)+'
test_pr66322_2155:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr66322.c'
    sources:
      binary: pr66322.s
  group: GRPSERIAL
  validate:
    match:
      L104:
        expect: true
        expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+(:106:)[^\n]*[0-9]+: warning:[^\n]*("upper value")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+(:113:)[^\n]*[0-9]+: warning:[^\n]*("case label")[^\n]*\n?)+'
      L117:
        expect: true
        expr: '(^|\n)([^\n]+(:117:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("case label")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("lower value")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+(:131:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+(:133:)[^\n]*[0-9]+: warning:[^\n]*("lower value")[^\n]*\n?)+'
      L138:
        expect: true
        expr: '(^|\n)([^\n]+(:138:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L140:
        expect: true
        expr: '(^|\n)([^\n]+(:140:)[^\n]*[0-9]+: warning:[^\n]*("case label")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("upper value")[^\n]*\n?)+'
test_pr66322_274:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr66322.c'
    sources:
      binary: pr66322.s
  group: GRPSERIAL
  validate:
    match:
      L104:
        expect: true
        expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+(:106:)[^\n]*[0-9]+: warning:[^\n]*("upper value")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+(:113:)[^\n]*[0-9]+: warning:[^\n]*("case label")[^\n]*\n?)+'
      L117:
        expect: true
        expr: '(^|\n)([^\n]+(:117:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("case label")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("lower value")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+(:131:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+(:133:)[^\n]*[0-9]+: warning:[^\n]*("lower value")[^\n]*\n?)+'
      L138:
        expect: true
        expr: '(^|\n)([^\n]+(:138:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L140:
        expect: true
        expr: '(^|\n)([^\n]+(:140:)[^\n]*[0-9]+: warning:[^\n]*("case label")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("upper value")[^\n]*\n?)+'
test_pr66322_3056:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr66322.c'
    sources:
      binary: pr66322.s
  group: GRPSERIAL
  validate:
    match:
      L104:
        expect: true
        expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+(:106:)[^\n]*[0-9]+: warning:[^\n]*("upper value")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+(:113:)[^\n]*[0-9]+: warning:[^\n]*("case label")[^\n]*\n?)+'
      L117:
        expect: true
        expr: '(^|\n)([^\n]+(:117:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("case label")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("lower value")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+(:131:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+(:133:)[^\n]*[0-9]+: warning:[^\n]*("lower value")[^\n]*\n?)+'
      L138:
        expect: true
        expr: '(^|\n)([^\n]+(:138:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L140:
        expect: true
        expr: '(^|\n)([^\n]+(:140:)[^\n]*[0-9]+: warning:[^\n]*("case label")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("upper value")[^\n]*\n?)+'
test_pr66322_3057:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr66322.c'
    sources:
      binary: pr66322.s
  group: GRPSERIAL
  validate:
    match:
      L104:
        expect: true
        expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+(:106:)[^\n]*[0-9]+: warning:[^\n]*("upper value")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+(:113:)[^\n]*[0-9]+: warning:[^\n]*("case label")[^\n]*\n?)+'
      L117:
        expect: true
        expr: '(^|\n)([^\n]+(:117:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("case label")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("lower value")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+(:131:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+(:133:)[^\n]*[0-9]+: warning:[^\n]*("lower value")[^\n]*\n?)+'
      L138:
        expect: true
        expr: '(^|\n)([^\n]+(:138:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L140:
        expect: true
        expr: '(^|\n)([^\n]+(:140:)[^\n]*[0-9]+: warning:[^\n]*("case label")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("upper value")[^\n]*\n?)+'
test_pr66322_3058:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr66322.c'
    sources:
      binary: pr66322.s
  group: GRPSERIAL
  validate:
    match:
      L104:
        expect: true
        expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+(:106:)[^\n]*[0-9]+: warning:[^\n]*("upper value")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+(:113:)[^\n]*[0-9]+: warning:[^\n]*("case label")[^\n]*\n?)+'
      L117:
        expect: true
        expr: '(^|\n)([^\n]+(:117:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("case label")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("lower value")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+(:131:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+(:133:)[^\n]*[0-9]+: warning:[^\n]*("lower value")[^\n]*\n?)+'
      L138:
        expect: true
        expr: '(^|\n)([^\n]+(:138:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L140:
        expect: true
        expr: '(^|\n)([^\n]+(:140:)[^\n]*[0-9]+: warning:[^\n]*("case label")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("upper value")[^\n]*\n?)+'
test_pr66322_663:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr66322.c'
    sources:
      binary: pr66322.s
  group: GRPSERIAL
  validate:
    match:
      L104:
        expect: true
        expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+(:106:)[^\n]*[0-9]+: warning:[^\n]*("upper value")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+(:113:)[^\n]*[0-9]+: warning:[^\n]*("case label")[^\n]*\n?)+'
      L117:
        expect: true
        expr: '(^|\n)([^\n]+(:117:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("case label")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("lower value")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+(:131:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+(:133:)[^\n]*[0-9]+: warning:[^\n]*("lower value")[^\n]*\n?)+'
      L138:
        expect: true
        expr: '(^|\n)([^\n]+(:138:)[^\n]*[0-9]+: warning:[^\n]*("switch condition
          has")[^\n]*\n?)+'
      L140:
        expect: true
        expr: '(^|\n)([^\n]+(:140:)[^\n]*[0-9]+: warning:[^\n]*("case label")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("switch condition has")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("upper value")[^\n]*\n?)+'
test_pr67639_1567:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr67639.c'
    sources:
      binary: pr67639.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("register name")[^\n]*\n?)+'
test_pr67639_1568:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr67639.c'
    sources:
      binary: pr67639.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("register name")[^\n]*\n?)+'
test_pr67639_1569:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr67639.c'
    sources:
      binary: pr67639.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("register name")[^\n]*\n?)+'
test_pr67639_2156:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr67639.c'
    sources:
      binary: pr67639.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("register name")[^\n]*\n?)+'
test_pr67639_275:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr67639.c'
    sources:
      binary: pr67639.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("register name")[^\n]*\n?)+'
test_pr67639_3059:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr67639.c'
    sources:
      binary: pr67639.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("register name")[^\n]*\n?)+'
test_pr67639_3060:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr67639.c'
    sources:
      binary: pr67639.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("register name")[^\n]*\n?)+'
test_pr67639_3061:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr67639.c'
    sources:
      binary: pr67639.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("register name")[^\n]*\n?)+'
test_pr67639_664:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr67639.c'
    sources:
      binary: pr67639.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("register name")[^\n]*\n?)+'
test_pr67653_1570:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr67653.c'
    sources:
      binary: pr67653.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("memory input 0 is not
          directly addressable")[^\n]*\n?)+'
test_pr67653_1571:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr67653.c'
    sources:
      binary: pr67653.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("memory input 0 is not
          directly addressable")[^\n]*\n?)+'
test_pr67653_1572:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr67653.c'
    sources:
      binary: pr67653.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("memory input 0 is not
          directly addressable")[^\n]*\n?)+'
test_pr67653_2157:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr67653.c'
    sources:
      binary: pr67653.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("memory input 0 is not
          directly addressable")[^\n]*\n?)+'
test_pr67653_276:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr67653.c'
    sources:
      binary: pr67653.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("memory input 0 is not
          directly addressable")[^\n]*\n?)+'
test_pr67653_3062:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr67653.c'
    sources:
      binary: pr67653.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("memory input 0 is not
          directly addressable")[^\n]*\n?)+'
test_pr67653_3063:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr67653.c'
    sources:
      binary: pr67653.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("memory input 0 is not
          directly addressable")[^\n]*\n?)+'
test_pr67653_3064:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr67653.c'
    sources:
      binary: pr67653.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("memory input 0 is not
          directly addressable")[^\n]*\n?)+'
test_pr67653_665:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr67653.c'
    sources:
      binary: pr67653.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("memory input 0 is not
          directly addressable")[^\n]*\n?)+'
test_pr68107_1573:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68107.c'
    sources:
      binary: pr68107.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
test_pr68107_1574:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68107.c'
    sources:
      binary: pr68107.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
test_pr68107_1575:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68107.c'
    sources:
      binary: pr68107.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
test_pr68107_2158:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68107.c'
    sources:
      binary: pr68107.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
test_pr68107_277:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68107.c'
    sources:
      binary: pr68107.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
test_pr68107_3065:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68107.c'
    sources:
      binary: pr68107.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
test_pr68107_3066:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68107.c'
    sources:
      binary: pr68107.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
test_pr68107_3067:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68107.c'
    sources:
      binary: pr68107.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
test_pr68107_666:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68107.c'
    sources:
      binary: pr68107.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too large")[^\n]*\n?)+'
test_pr68582_1576:
  build:
    cflags: "-std=gnu++98 -Wunused-function\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68582.c'
    sources:
      binary: pr68582.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("defined but not used")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("defined but not used")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("defined but not used")[^\n]*\n?)+'
test_pr68582_1577:
  build:
    cflags: "-std=gnu++11 -Wunused-function\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68582.c'
    sources:
      binary: pr68582.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("defined but not used")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("defined but not used")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("defined but not used")[^\n]*\n?)+'
test_pr68582_1578:
  build:
    cflags: "-std=gnu++14 -Wunused-function\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68582.c'
    sources:
      binary: pr68582.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("defined but not used")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("defined but not used")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("defined but not used")[^\n]*\n?)+'
test_pr68582_2159:
  build:
    cflags: "-Wc++-compat  -Wunused-function\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68582.c'
    sources:
      binary: pr68582.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("defined but not used")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("defined but not used")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("defined but not used")[^\n]*\n?)+'
test_pr68582_278:
  build:
    cflags: "-Wc++-compat  -Wunused-function\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68582.c'
    sources:
      binary: pr68582.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("defined but not used")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("defined but not used")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("defined but not used")[^\n]*\n?)+'
test_pr68582_3068:
  build:
    cflags: "-std=gnu++98 -Wunused-function\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68582.c'
    sources:
      binary: pr68582.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("defined but not used")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("defined but not used")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("defined but not used")[^\n]*\n?)+'
test_pr68582_3069:
  build:
    cflags: "-std=gnu++11 -Wunused-function\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68582.c'
    sources:
      binary: pr68582.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("defined but not used")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("defined but not used")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("defined but not used")[^\n]*\n?)+'
test_pr68582_3070:
  build:
    cflags: "-std=gnu++14 -Wunused-function\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68582.c'
    sources:
      binary: pr68582.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("defined but not used")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("defined but not used")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("defined but not used")[^\n]*\n?)+'
test_pr68582_667:
  build:
    cflags: "-Wc++-compat  -Wunused-function\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68582.c'
    sources:
      binary: pr68582.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("defined but not used")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("defined but not used")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("defined but not used")[^\n]*\n?)+'
test_pr68657-1_1579:
  build:
    cflags: "-std=gnu++98 -Werror=sign-conversion -Werror=float-conversion -Werror=frame-larger-than=65536\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68657-1.c'
    sources:
      binary: pr68657-1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion to
          \''int\'' alters \''float\'' constant value")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("the frame size
          of 1\\[0-9]* bytes is larger than 65536 bytes")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative integer
          implicitly converted to unsigned type")[^\n]*\n?)+'
test_pr68657-1_1580:
  build:
    cflags: "-std=gnu++11 -Werror=sign-conversion -Werror=float-conversion -Werror=frame-larger-than=65536\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68657-1.c'
    sources:
      binary: pr68657-1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion to
          \''int\'' alters \''float\'' constant value")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("the frame size
          of 1\\[0-9]* bytes is larger than 65536 bytes")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative integer
          implicitly converted to unsigned type")[^\n]*\n?)+'
test_pr68657-1_1581:
  build:
    cflags: "-std=gnu++14 -Werror=sign-conversion -Werror=float-conversion -Werror=frame-larger-than=65536\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68657-1.c'
    sources:
      binary: pr68657-1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion to
          \''int\'' alters \''float\'' constant value")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("the frame size
          of 1\\[0-9]* bytes is larger than 65536 bytes")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative integer
          implicitly converted to unsigned type")[^\n]*\n?)+'
test_pr68657-1_2160:
  build:
    cflags: "-Wc++-compat  -Werror=sign-conversion -Werror=float-conversion -Werror=frame-larger-than=65536\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68657-1.c'
    sources:
      binary: pr68657-1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion to
          \''int\'' alters \''float\'' constant value")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("the frame size
          of 1\\[0-9]* bytes is larger than 65536 bytes")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative integer
          implicitly converted to unsigned type")[^\n]*\n?)+'
test_pr68657-1_279:
  build:
    cflags: "-Wc++-compat  -Werror=sign-conversion -Werror=float-conversion -Werror=frame-larger-than=65536\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68657-1.c'
    sources:
      binary: pr68657-1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion to
          \''int\'' alters \''float\'' constant value")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("the frame size
          of 1\\[0-9]* bytes is larger than 65536 bytes")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative integer
          implicitly converted to unsigned type")[^\n]*\n?)+'
test_pr68657-1_3071:
  build:
    cflags: "-std=gnu++98 -Werror=sign-conversion -Werror=float-conversion -Werror=frame-larger-than=65536\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68657-1.c'
    sources:
      binary: pr68657-1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion to
          \''int\'' alters \''float\'' constant value")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("the frame size
          of 1\\[0-9]* bytes is larger than 65536 bytes")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative integer
          implicitly converted to unsigned type")[^\n]*\n?)+'
test_pr68657-1_3072:
  build:
    cflags: "-std=gnu++11 -Werror=sign-conversion -Werror=float-conversion -Werror=frame-larger-than=65536\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68657-1.c'
    sources:
      binary: pr68657-1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion to
          \''int\'' alters \''float\'' constant value")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("the frame size
          of 1\\[0-9]* bytes is larger than 65536 bytes")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative integer
          implicitly converted to unsigned type")[^\n]*\n?)+'
test_pr68657-1_3073:
  build:
    cflags: "-std=gnu++14 -Werror=sign-conversion -Werror=float-conversion -Werror=frame-larger-than=65536\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68657-1.c'
    sources:
      binary: pr68657-1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion to
          \''int\'' alters \''float\'' constant value")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("the frame size
          of 1\\[0-9]* bytes is larger than 65536 bytes")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative integer
          implicitly converted to unsigned type")[^\n]*\n?)+'
test_pr68657-1_668:
  build:
    cflags: "-Wc++-compat  -Werror=sign-conversion -Werror=float-conversion -Werror=frame-larger-than=65536\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68657-1.c'
    sources:
      binary: pr68657-1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion to
          \''int\'' alters \''float\'' constant value")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("the frame size
          of 1\\[0-9]* bytes is larger than 65536 bytes")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative integer
          implicitly converted to unsigned type")[^\n]*\n?)+'
test_pr68657-2_1582:
  build:
    cflags: "-std=gnu++98 -Werror=larger-than=65536\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68657-2.c'
    sources:
      binary: pr68657-2.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of \''a\''
          is \\[1-9]\\[0-9]* bytes")[^\n]*\n?)+'
test_pr68657-2_1583:
  build:
    cflags: "-std=gnu++11 -Werror=larger-than=65536\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68657-2.c'
    sources:
      binary: pr68657-2.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of \''a\''
          is \\[1-9]\\[0-9]* bytes")[^\n]*\n?)+'
test_pr68657-2_1584:
  build:
    cflags: "-std=gnu++14 -Werror=larger-than=65536\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68657-2.c'
    sources:
      binary: pr68657-2.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of \''a\''
          is \\[1-9]\\[0-9]* bytes")[^\n]*\n?)+'
test_pr68657-2_2161:
  build:
    cflags: "-Wc++-compat  -Werror=larger-than=65536\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68657-2.c'
    sources:
      binary: pr68657-2.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of \''a\''
          is \\[1-9]\\[0-9]* bytes")[^\n]*\n?)+'
test_pr68657-2_280:
  build:
    cflags: "-Wc++-compat  -Werror=larger-than=65536\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68657-2.c'
    sources:
      binary: pr68657-2.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of \''a\''
          is \\[1-9]\\[0-9]* bytes")[^\n]*\n?)+'
test_pr68657-2_3074:
  build:
    cflags: "-std=gnu++98 -Werror=larger-than=65536\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68657-2.c'
    sources:
      binary: pr68657-2.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of \''a\''
          is \\[1-9]\\[0-9]* bytes")[^\n]*\n?)+'
test_pr68657-2_3075:
  build:
    cflags: "-std=gnu++11 -Werror=larger-than=65536\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68657-2.c'
    sources:
      binary: pr68657-2.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of \''a\''
          is \\[1-9]\\[0-9]* bytes")[^\n]*\n?)+'
test_pr68657-2_3076:
  build:
    cflags: "-std=gnu++14 -Werror=larger-than=65536\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68657-2.c'
    sources:
      binary: pr68657-2.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of \''a\''
          is \\[1-9]\\[0-9]* bytes")[^\n]*\n?)+'
test_pr68657-2_669:
  build:
    cflags: "-Wc++-compat  -Werror=larger-than=65536\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68657-2.c'
    sources:
      binary: pr68657-2.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of \''a\''
          is \\[1-9]\\[0-9]* bytes")[^\n]*\n?)+'
test_pr68657-3_1585:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68657-3.c'
    sources:
      binary: pr68657-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("size of \''e\'' is
          \\[1-9]\\[0-9]* bytes")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of \''a\''
          is \\[1-9]\\[0-9]* bytes")[^\n]*\n?)+'
test_pr68657-3_1586:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68657-3.c'
    sources:
      binary: pr68657-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("size of \''e\'' is
          \\[1-9]\\[0-9]* bytes")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of \''a\''
          is \\[1-9]\\[0-9]* bytes")[^\n]*\n?)+'
test_pr68657-3_1587:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68657-3.c'
    sources:
      binary: pr68657-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("size of \''e\'' is
          \\[1-9]\\[0-9]* bytes")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of \''a\''
          is \\[1-9]\\[0-9]* bytes")[^\n]*\n?)+'
test_pr68657-3_2162:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68657-3.c'
    sources:
      binary: pr68657-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("size of \''e\'' is
          \\[1-9]\\[0-9]* bytes")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of \''a\''
          is \\[1-9]\\[0-9]* bytes")[^\n]*\n?)+'
test_pr68657-3_281:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68657-3.c'
    sources:
      binary: pr68657-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("size of \''e\'' is
          \\[1-9]\\[0-9]* bytes")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of \''a\''
          is \\[1-9]\\[0-9]* bytes")[^\n]*\n?)+'
test_pr68657-3_3077:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68657-3.c'
    sources:
      binary: pr68657-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("size of \''e\'' is
          \\[1-9]\\[0-9]* bytes")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of \''a\''
          is \\[1-9]\\[0-9]* bytes")[^\n]*\n?)+'
test_pr68657-3_3078:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68657-3.c'
    sources:
      binary: pr68657-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("size of \''e\'' is
          \\[1-9]\\[0-9]* bytes")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of \''a\''
          is \\[1-9]\\[0-9]* bytes")[^\n]*\n?)+'
test_pr68657-3_3079:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68657-3.c'
    sources:
      binary: pr68657-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("size of \''e\'' is
          \\[1-9]\\[0-9]* bytes")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of \''a\''
          is \\[1-9]\\[0-9]* bytes")[^\n]*\n?)+'
test_pr68657-3_670:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68657-3.c'
    sources:
      binary: pr68657-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("size of \''e\'' is
          \\[1-9]\\[0-9]* bytes")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of \''a\''
          is \\[1-9]\\[0-9]* bytes")[^\n]*\n?)+'
test_pr68833-1_1588:
  build:
    cflags: "-std=gnu++98 -Werror=larger-than-65536 -Werror=format -Werror=missing-noreturn\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68833-1.c'
    sources:
      binary: pr68833-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expects argument
          of type")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("candidate for
          attribute \''noreturn\''")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of \''a\''
          is \\[1-9]\\[0-9]* bytes")[^\n]*\n?)+'
test_pr68833-1_1589:
  build:
    cflags: "-std=gnu++11 -Werror=larger-than-65536 -Werror=format -Werror=missing-noreturn\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68833-1.c'
    sources:
      binary: pr68833-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expects argument
          of type")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("candidate for
          attribute \''noreturn\''")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of \''a\''
          is \\[1-9]\\[0-9]* bytes")[^\n]*\n?)+'
test_pr68833-1_1590:
  build:
    cflags: "-std=gnu++14 -Werror=larger-than-65536 -Werror=format -Werror=missing-noreturn\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68833-1.c'
    sources:
      binary: pr68833-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expects argument
          of type")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("candidate for
          attribute \''noreturn\''")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of \''a\''
          is \\[1-9]\\[0-9]* bytes")[^\n]*\n?)+'
test_pr68833-1_2163:
  build:
    cflags: "-Wc++-compat  -Werror=larger-than-65536 -Werror=format -Werror=missing-noreturn\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68833-1.c'
    sources:
      binary: pr68833-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expects argument
          of type")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("candidate for
          attribute \''noreturn\''")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of \''a\''
          is \\[1-9]\\[0-9]* bytes")[^\n]*\n?)+'
test_pr68833-1_282:
  build:
    cflags: "-Wc++-compat  -Werror=larger-than-65536 -Werror=format -Werror=missing-noreturn\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68833-1.c'
    sources:
      binary: pr68833-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expects argument
          of type")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("candidate for
          attribute \''noreturn\''")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of \''a\''
          is \\[1-9]\\[0-9]* bytes")[^\n]*\n?)+'
test_pr68833-1_3080:
  build:
    cflags: "-std=gnu++98 -Werror=larger-than-65536 -Werror=format -Werror=missing-noreturn\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68833-1.c'
    sources:
      binary: pr68833-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expects argument
          of type")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("candidate for
          attribute \''noreturn\''")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of \''a\''
          is \\[1-9]\\[0-9]* bytes")[^\n]*\n?)+'
test_pr68833-1_3081:
  build:
    cflags: "-std=gnu++11 -Werror=larger-than-65536 -Werror=format -Werror=missing-noreturn\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68833-1.c'
    sources:
      binary: pr68833-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expects argument
          of type")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("candidate for
          attribute \''noreturn\''")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of \''a\''
          is \\[1-9]\\[0-9]* bytes")[^\n]*\n?)+'
test_pr68833-1_3082:
  build:
    cflags: "-std=gnu++14 -Werror=larger-than-65536 -Werror=format -Werror=missing-noreturn\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68833-1.c'
    sources:
      binary: pr68833-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expects argument
          of type")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("candidate for
          attribute \''noreturn\''")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of \''a\''
          is \\[1-9]\\[0-9]* bytes")[^\n]*\n?)+'
test_pr68833-1_671:
  build:
    cflags: "-Wc++-compat  -Werror=larger-than-65536 -Werror=format -Werror=missing-noreturn\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68833-1.c'
    sources:
      binary: pr68833-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expects argument
          of type")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("candidate for
          attribute \''noreturn\''")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size of \''a\''
          is \\[1-9]\\[0-9]* bytes")[^\n]*\n?)+'
test_pr68833-2_1591:
  build:
    cflags: "-std=gnu++98 -Werror=missing-format-attribute\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68833-2.c'
    sources:
      binary: pr68833-2.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("candidate")[^\n]*\n?)+'
test_pr68833-2_1592:
  build:
    cflags: "-std=gnu++11 -Werror=missing-format-attribute\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68833-2.c'
    sources:
      binary: pr68833-2.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("candidate")[^\n]*\n?)+'
test_pr68833-2_1593:
  build:
    cflags: "-std=gnu++14 -Werror=missing-format-attribute\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68833-2.c'
    sources:
      binary: pr68833-2.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("candidate")[^\n]*\n?)+'
test_pr68833-2_2164:
  build:
    cflags: "-Wc++-compat  -Werror=missing-format-attribute\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68833-2.c'
    sources:
      binary: pr68833-2.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("candidate")[^\n]*\n?)+'
test_pr68833-2_283:
  build:
    cflags: "-Wc++-compat  -Werror=missing-format-attribute\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68833-2.c'
    sources:
      binary: pr68833-2.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("candidate")[^\n]*\n?)+'
test_pr68833-2_3083:
  build:
    cflags: "-std=gnu++98 -Werror=missing-format-attribute\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68833-2.c'
    sources:
      binary: pr68833-2.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("candidate")[^\n]*\n?)+'
test_pr68833-2_3084:
  build:
    cflags: "-std=gnu++11 -Werror=missing-format-attribute\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68833-2.c'
    sources:
      binary: pr68833-2.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("candidate")[^\n]*\n?)+'
test_pr68833-2_3085:
  build:
    cflags: "-std=gnu++14 -Werror=missing-format-attribute\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68833-2.c'
    sources:
      binary: pr68833-2.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("candidate")[^\n]*\n?)+'
test_pr68833-2_672:
  build:
    cflags: "-Wc++-compat  -Werror=missing-format-attribute\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68833-2.c'
    sources:
      binary: pr68833-2.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("candidate")[^\n]*\n?)+'
test_pr68833-3_1594:
  build:
    cflags: "-std=gnu++98 -Werror=normalized\n -E"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68833-3.c'
    sources:
      binary: pr68833-3.i
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("`.U00000f43\''
          is not in NFC .-Werror=normalized=.")[^\n]*\n?)+'
test_pr68833-3_1595:
  build:
    cflags: "-std=gnu++11 -Werror=normalized\n -E"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68833-3.c'
    sources:
      binary: pr68833-3.i
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("`.U00000f43\''
          is not in NFC .-Werror=normalized=.")[^\n]*\n?)+'
test_pr68833-3_1596:
  build:
    cflags: "-std=gnu++14 -Werror=normalized\n -E"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68833-3.c'
    sources:
      binary: pr68833-3.i
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("`.U00000f43\''
          is not in NFC .-Werror=normalized=.")[^\n]*\n?)+'
test_pr68833-3_2165:
  build:
    cflags: "-Wc++-compat  -Werror=normalized\n -E"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68833-3.c'
    sources:
      binary: pr68833-3.i
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("`.U00000f43\''
          is not in NFC .-Werror=normalized=.")[^\n]*\n?)+'
test_pr68833-3_284:
  build:
    cflags: "-Wc++-compat  -Werror=normalized\n -E"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68833-3.c'
    sources:
      binary: pr68833-3.i
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("`.U00000f43\''
          is not in NFC .-Werror=normalized=.")[^\n]*\n?)+'
test_pr68833-3_3086:
  build:
    cflags: "-std=gnu++98 -Werror=normalized\n -E"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68833-3.c'
    sources:
      binary: pr68833-3.i
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("`.U00000f43\''
          is not in NFC .-Werror=normalized=.")[^\n]*\n?)+'
test_pr68833-3_3087:
  build:
    cflags: "-std=gnu++11 -Werror=normalized\n -E"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68833-3.c'
    sources:
      binary: pr68833-3.i
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("`.U00000f43\''
          is not in NFC .-Werror=normalized=.")[^\n]*\n?)+'
test_pr68833-3_3088:
  build:
    cflags: "-std=gnu++14 -Werror=normalized\n -E"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68833-3.c'
    sources:
      binary: pr68833-3.i
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("`.U00000f43\''
          is not in NFC .-Werror=normalized=.")[^\n]*\n?)+'
test_pr68833-3_673:
  build:
    cflags: "-Wc++-compat  -Werror=normalized\n -E"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr68833-3.c'
    sources:
      binary: pr68833-3.i
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("`.U00000f43\''
          is not in NFC .-Werror=normalized=.")[^\n]*\n?)+'
test_pr69126-2-long_1597:
  build:
    cflags: "-std=gnu++98 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69126-2-long.c'
    sources:
      binary: pr69126-2-long.s
  group: GRPSERIAL
test_pr69126-2-long_1598:
  build:
    cflags: "-std=gnu++11 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69126-2-long.c'
    sources:
      binary: pr69126-2-long.s
  group: GRPSERIAL
test_pr69126-2-long_1599:
  build:
    cflags: "-std=gnu++14 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69126-2-long.c'
    sources:
      binary: pr69126-2-long.s
  group: GRPSERIAL
test_pr69126-2-long_2166:
  build:
    cflags: "-Wc++-compat  -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69126-2-long.c'
    sources:
      binary: pr69126-2-long.s
  group: GRPSERIAL
test_pr69126-2-long_285:
  build:
    cflags: "-Wc++-compat  -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69126-2-long.c'
    sources:
      binary: pr69126-2-long.s
  group: GRPSERIAL
test_pr69126-2-long_3089:
  build:
    cflags: "-std=gnu++98 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69126-2-long.c'
    sources:
      binary: pr69126-2-long.s
  group: GRPSERIAL
test_pr69126-2-long_3090:
  build:
    cflags: "-std=gnu++11 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69126-2-long.c'
    sources:
      binary: pr69126-2-long.s
  group: GRPSERIAL
test_pr69126-2-long_3091:
  build:
    cflags: "-std=gnu++14 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69126-2-long.c'
    sources:
      binary: pr69126-2-long.s
  group: GRPSERIAL
test_pr69126-2-long_674:
  build:
    cflags: "-Wc++-compat  -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69126-2-long.c'
    sources:
      binary: pr69126-2-long.s
  group: GRPSERIAL
test_pr69126-2-short_1600:
  build:
    cflags: "-std=gnu++98 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69126-2-short.c'
    sources:
      binary: pr69126-2-short.s
  group: GRPSERIAL
test_pr69126-2-short_1601:
  build:
    cflags: "-std=gnu++11 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69126-2-short.c'
    sources:
      binary: pr69126-2-short.s
  group: GRPSERIAL
test_pr69126-2-short_1602:
  build:
    cflags: "-std=gnu++14 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69126-2-short.c'
    sources:
      binary: pr69126-2-short.s
  group: GRPSERIAL
test_pr69126-2-short_2167:
  build:
    cflags: "-Wc++-compat  -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69126-2-short.c'
    sources:
      binary: pr69126-2-short.s
  group: GRPSERIAL
test_pr69126-2-short_286:
  build:
    cflags: "-Wc++-compat  -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69126-2-short.c'
    sources:
      binary: pr69126-2-short.s
  group: GRPSERIAL
test_pr69126-2-short_3092:
  build:
    cflags: "-std=gnu++98 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69126-2-short.c'
    sources:
      binary: pr69126-2-short.s
  group: GRPSERIAL
test_pr69126-2-short_3093:
  build:
    cflags: "-std=gnu++11 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69126-2-short.c'
    sources:
      binary: pr69126-2-short.s
  group: GRPSERIAL
test_pr69126-2-short_3094:
  build:
    cflags: "-std=gnu++14 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69126-2-short.c'
    sources:
      binary: pr69126-2-short.s
  group: GRPSERIAL
test_pr69126-2-short_675:
  build:
    cflags: "-Wc++-compat  -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69126-2-short.c'
    sources:
      binary: pr69126-2-short.s
  group: GRPSERIAL
test_pr69126_1603:
  build:
    cflags: "-std=gnu++98 -Wunused-variable\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69126.c'
    sources:
      binary: pr69126.s
  group: GRPSERIAL
test_pr69126_1604:
  build:
    cflags: "-std=gnu++11 -Wunused-variable\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69126.c'
    sources:
      binary: pr69126.s
  group: GRPSERIAL
test_pr69126_1605:
  build:
    cflags: "-std=gnu++14 -Wunused-variable\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69126.c'
    sources:
      binary: pr69126.s
  group: GRPSERIAL
test_pr69126_2168:
  build:
    cflags: "-Wc++-compat  -Wunused-variable\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69126.c'
    sources:
      binary: pr69126.s
  group: GRPSERIAL
test_pr69126_287:
  build:
    cflags: "-Wc++-compat  -Wunused-variable\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69126.c'
    sources:
      binary: pr69126.s
  group: GRPSERIAL
test_pr69126_3095:
  build:
    cflags: "-std=gnu++98 -Wunused-variable\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69126.c'
    sources:
      binary: pr69126.s
  group: GRPSERIAL
test_pr69126_3096:
  build:
    cflags: "-std=gnu++11 -Wunused-variable\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69126.c'
    sources:
      binary: pr69126.s
  group: GRPSERIAL
test_pr69126_3097:
  build:
    cflags: "-std=gnu++14 -Wunused-variable\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69126.c'
    sources:
      binary: pr69126.s
  group: GRPSERIAL
test_pr69126_676:
  build:
    cflags: "-Wc++-compat  -Wunused-variable\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69126.c'
    sources:
      binary: pr69126.s
  group: GRPSERIAL
test_pr69543-1_1606:
  build:
    cflags: "-std=gnu++98 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69543-1.c'
    sources:
      binary: pr69543-1.s
  group: GRPSERIAL
test_pr69543-1_1607:
  build:
    cflags: "-std=gnu++11 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69543-1.c'
    sources:
      binary: pr69543-1.s
  group: GRPSERIAL
test_pr69543-1_1608:
  build:
    cflags: "-std=gnu++14 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69543-1.c'
    sources:
      binary: pr69543-1.s
  group: GRPSERIAL
test_pr69543-1_2169:
  build:
    cflags: "-Wc++-compat  -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69543-1.c'
    sources:
      binary: pr69543-1.s
  group: GRPSERIAL
test_pr69543-1_288:
  build:
    cflags: "-Wc++-compat  -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69543-1.c'
    sources:
      binary: pr69543-1.s
  group: GRPSERIAL
test_pr69543-1_3098:
  build:
    cflags: "-std=gnu++98 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69543-1.c'
    sources:
      binary: pr69543-1.s
  group: GRPSERIAL
test_pr69543-1_3099:
  build:
    cflags: "-std=gnu++11 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69543-1.c'
    sources:
      binary: pr69543-1.s
  group: GRPSERIAL
test_pr69543-1_3100:
  build:
    cflags: "-std=gnu++14 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69543-1.c'
    sources:
      binary: pr69543-1.s
  group: GRPSERIAL
test_pr69543-1_677:
  build:
    cflags: "-Wc++-compat  -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69543-1.c'
    sources:
      binary: pr69543-1.s
  group: GRPSERIAL
test_pr69543-2_1609:
  build:
    cflags: "-std=gnu++98 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69543-2.c'
    sources:
      binary: pr69543-2.s
  group: GRPSERIAL
test_pr69543-2_1610:
  build:
    cflags: "-std=gnu++11 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69543-2.c'
    sources:
      binary: pr69543-2.s
  group: GRPSERIAL
test_pr69543-2_1611:
  build:
    cflags: "-std=gnu++14 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69543-2.c'
    sources:
      binary: pr69543-2.s
  group: GRPSERIAL
test_pr69543-2_2170:
  build:
    cflags: "-Wc++-compat  -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69543-2.c'
    sources:
      binary: pr69543-2.s
  group: GRPSERIAL
test_pr69543-2_289:
  build:
    cflags: "-Wc++-compat  -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69543-2.c'
    sources:
      binary: pr69543-2.s
  group: GRPSERIAL
test_pr69543-2_3101:
  build:
    cflags: "-std=gnu++98 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69543-2.c'
    sources:
      binary: pr69543-2.s
  group: GRPSERIAL
test_pr69543-2_3102:
  build:
    cflags: "-std=gnu++11 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69543-2.c'
    sources:
      binary: pr69543-2.s
  group: GRPSERIAL
test_pr69543-2_3103:
  build:
    cflags: "-std=gnu++14 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69543-2.c'
    sources:
      binary: pr69543-2.s
  group: GRPSERIAL
test_pr69543-2_678:
  build:
    cflags: "-Wc++-compat  -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69543-2.c'
    sources:
      binary: pr69543-2.s
  group: GRPSERIAL
test_pr69543-3_1612:
  build:
    cflags: "-std=gnu++98 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69543-3.c'
    sources:
      binary: pr69543-3.s
  group: GRPSERIAL
test_pr69543-3_1613:
  build:
    cflags: "-std=gnu++11 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69543-3.c'
    sources:
      binary: pr69543-3.s
  group: GRPSERIAL
test_pr69543-3_1614:
  build:
    cflags: "-std=gnu++14 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69543-3.c'
    sources:
      binary: pr69543-3.s
  group: GRPSERIAL
test_pr69543-3_2171:
  build:
    cflags: "-Wc++-compat  -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69543-3.c'
    sources:
      binary: pr69543-3.s
  group: GRPSERIAL
test_pr69543-3_290:
  build:
    cflags: "-Wc++-compat  -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69543-3.c'
    sources:
      binary: pr69543-3.s
  group: GRPSERIAL
test_pr69543-3_3104:
  build:
    cflags: "-std=gnu++98 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69543-3.c'
    sources:
      binary: pr69543-3.s
  group: GRPSERIAL
test_pr69543-3_3105:
  build:
    cflags: "-std=gnu++11 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69543-3.c'
    sources:
      binary: pr69543-3.s
  group: GRPSERIAL
test_pr69543-3_3106:
  build:
    cflags: "-std=gnu++14 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69543-3.c'
    sources:
      binary: pr69543-3.s
  group: GRPSERIAL
test_pr69543-3_679:
  build:
    cflags: "-Wc++-compat  -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69543-3.c'
    sources:
      binary: pr69543-3.s
  group: GRPSERIAL
test_pr69543-4_1615:
  build:
    cflags: "-std=gnu++98 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69543-4.c'
    sources:
      binary: pr69543-4.s
  group: GRPSERIAL
test_pr69543-4_1616:
  build:
    cflags: "-std=gnu++11 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69543-4.c'
    sources:
      binary: pr69543-4.s
  group: GRPSERIAL
test_pr69543-4_1617:
  build:
    cflags: "-std=gnu++14 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69543-4.c'
    sources:
      binary: pr69543-4.s
  group: GRPSERIAL
test_pr69543-4_2172:
  build:
    cflags: "-Wc++-compat  -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69543-4.c'
    sources:
      binary: pr69543-4.s
  group: GRPSERIAL
test_pr69543-4_291:
  build:
    cflags: "-Wc++-compat  -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69543-4.c'
    sources:
      binary: pr69543-4.s
  group: GRPSERIAL
test_pr69543-4_3107:
  build:
    cflags: "-std=gnu++98 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69543-4.c'
    sources:
      binary: pr69543-4.s
  group: GRPSERIAL
test_pr69543-4_3108:
  build:
    cflags: "-std=gnu++11 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69543-4.c'
    sources:
      binary: pr69543-4.s
  group: GRPSERIAL
test_pr69543-4_3109:
  build:
    cflags: "-std=gnu++14 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69543-4.c'
    sources:
      binary: pr69543-4.s
  group: GRPSERIAL
test_pr69543-4_680:
  build:
    cflags: "-Wc++-compat  -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69543-4.c'
    sources:
      binary: pr69543-4.s
  group: GRPSERIAL
test_pr69558-1_1618:
  build:
    cflags: "-std=gnu++98 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558-1.c'
    sources:
      binary: pr69558-1.s
  group: GRPSERIAL
test_pr69558-1_1619:
  build:
    cflags: "-std=gnu++11 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558-1.c'
    sources:
      binary: pr69558-1.s
  group: GRPSERIAL
test_pr69558-1_1620:
  build:
    cflags: "-std=gnu++14 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558-1.c'
    sources:
      binary: pr69558-1.s
  group: GRPSERIAL
test_pr69558-1_2173:
  build:
    cflags: "-Wc++-compat  -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558-1.c'
    sources:
      binary: pr69558-1.s
  group: GRPSERIAL
test_pr69558-1_292:
  build:
    cflags: "-Wc++-compat  -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558-1.c'
    sources:
      binary: pr69558-1.s
  group: GRPSERIAL
test_pr69558-1_3110:
  build:
    cflags: "-std=gnu++98 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558-1.c'
    sources:
      binary: pr69558-1.s
  group: GRPSERIAL
test_pr69558-1_3111:
  build:
    cflags: "-std=gnu++11 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558-1.c'
    sources:
      binary: pr69558-1.s
  group: GRPSERIAL
test_pr69558-1_3112:
  build:
    cflags: "-std=gnu++14 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558-1.c'
    sources:
      binary: pr69558-1.s
  group: GRPSERIAL
test_pr69558-1_681:
  build:
    cflags: "-Wc++-compat  -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558-1.c'
    sources:
      binary: pr69558-1.s
  group: GRPSERIAL
test_pr69558-2_1621:
  build:
    cflags: "-std=gnu++98 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558-2.c'
    sources:
      binary: pr69558-2.s
  group: GRPSERIAL
test_pr69558-2_1622:
  build:
    cflags: "-std=gnu++11 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558-2.c'
    sources:
      binary: pr69558-2.s
  group: GRPSERIAL
test_pr69558-2_1623:
  build:
    cflags: "-std=gnu++14 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558-2.c'
    sources:
      binary: pr69558-2.s
  group: GRPSERIAL
test_pr69558-2_2174:
  build:
    cflags: "-Wc++-compat  -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558-2.c'
    sources:
      binary: pr69558-2.s
  group: GRPSERIAL
test_pr69558-2_293:
  build:
    cflags: "-Wc++-compat  -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558-2.c'
    sources:
      binary: pr69558-2.s
  group: GRPSERIAL
test_pr69558-2_3113:
  build:
    cflags: "-std=gnu++98 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558-2.c'
    sources:
      binary: pr69558-2.s
  group: GRPSERIAL
test_pr69558-2_3114:
  build:
    cflags: "-std=gnu++11 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558-2.c'
    sources:
      binary: pr69558-2.s
  group: GRPSERIAL
test_pr69558-2_3115:
  build:
    cflags: "-std=gnu++14 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558-2.c'
    sources:
      binary: pr69558-2.s
  group: GRPSERIAL
test_pr69558-2_682:
  build:
    cflags: "-Wc++-compat  -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558-2.c'
    sources:
      binary: pr69558-2.s
  group: GRPSERIAL
test_pr69558-3_1624:
  build:
    cflags: "-std=gnu++98 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558-3.c'
    sources:
      binary: pr69558-3.s
  group: GRPSERIAL
test_pr69558-3_1625:
  build:
    cflags: "-std=gnu++11 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558-3.c'
    sources:
      binary: pr69558-3.s
  group: GRPSERIAL
test_pr69558-3_1626:
  build:
    cflags: "-std=gnu++14 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558-3.c'
    sources:
      binary: pr69558-3.s
  group: GRPSERIAL
test_pr69558-3_2175:
  build:
    cflags: "-Wc++-compat  -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558-3.c'
    sources:
      binary: pr69558-3.s
  group: GRPSERIAL
test_pr69558-3_294:
  build:
    cflags: "-Wc++-compat  -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558-3.c'
    sources:
      binary: pr69558-3.s
  group: GRPSERIAL
test_pr69558-3_3116:
  build:
    cflags: "-std=gnu++98 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558-3.c'
    sources:
      binary: pr69558-3.s
  group: GRPSERIAL
test_pr69558-3_3117:
  build:
    cflags: "-std=gnu++11 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558-3.c'
    sources:
      binary: pr69558-3.s
  group: GRPSERIAL
test_pr69558-3_3118:
  build:
    cflags: "-std=gnu++14 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558-3.c'
    sources:
      binary: pr69558-3.s
  group: GRPSERIAL
test_pr69558-3_683:
  build:
    cflags: "-Wc++-compat  -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558-3.c'
    sources:
      binary: pr69558-3.s
  group: GRPSERIAL
test_pr69558-4_1627:
  build:
    cflags: "-std=gnu++98 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558-4.c'
    sources:
      binary: pr69558-4.s
  group: GRPSERIAL
test_pr69558-4_1628:
  build:
    cflags: "-std=gnu++11 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558-4.c'
    sources:
      binary: pr69558-4.s
  group: GRPSERIAL
test_pr69558-4_1629:
  build:
    cflags: "-std=gnu++14 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558-4.c'
    sources:
      binary: pr69558-4.s
  group: GRPSERIAL
test_pr69558-4_2176:
  build:
    cflags: "-Wc++-compat  -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558-4.c'
    sources:
      binary: pr69558-4.s
  group: GRPSERIAL
test_pr69558-4_295:
  build:
    cflags: "-Wc++-compat  -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558-4.c'
    sources:
      binary: pr69558-4.s
  group: GRPSERIAL
test_pr69558-4_3119:
  build:
    cflags: "-std=gnu++98 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558-4.c'
    sources:
      binary: pr69558-4.s
  group: GRPSERIAL
test_pr69558-4_3120:
  build:
    cflags: "-std=gnu++11 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558-4.c'
    sources:
      binary: pr69558-4.s
  group: GRPSERIAL
test_pr69558-4_3121:
  build:
    cflags: "-std=gnu++14 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558-4.c'
    sources:
      binary: pr69558-4.s
  group: GRPSERIAL
test_pr69558-4_684:
  build:
    cflags: "-Wc++-compat  -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558-4.c'
    sources:
      binary: pr69558-4.s
  group: GRPSERIAL
test_pr69558_1630:
  build:
    cflags: "-std=gnu++98 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558.c'
    sources:
      binary: pr69558.s
  group: GRPSERIAL
test_pr69558_1631:
  build:
    cflags: "-std=gnu++11 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558.c'
    sources:
      binary: pr69558.s
  group: GRPSERIAL
test_pr69558_1632:
  build:
    cflags: "-std=gnu++14 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558.c'
    sources:
      binary: pr69558.s
  group: GRPSERIAL
test_pr69558_2177:
  build:
    cflags: "-Wc++-compat  -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558.c'
    sources:
      binary: pr69558.s
  group: GRPSERIAL
test_pr69558_296:
  build:
    cflags: "-Wc++-compat  -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558.c'
    sources:
      binary: pr69558.s
  group: GRPSERIAL
test_pr69558_3122:
  build:
    cflags: "-std=gnu++98 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558.c'
    sources:
      binary: pr69558.s
  group: GRPSERIAL
test_pr69558_3123:
  build:
    cflags: "-std=gnu++11 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558.c'
    sources:
      binary: pr69558.s
  group: GRPSERIAL
test_pr69558_3124:
  build:
    cflags: "-std=gnu++14 -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558.c'
    sources:
      binary: pr69558.s
  group: GRPSERIAL
test_pr69558_685:
  build:
    cflags: "-Wc++-compat  -Wdeprecated-declarations\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69558.c'
    sources:
      binary: pr69558.s
  group: GRPSERIAL
test_pr69669_1633:
  build:
    cflags: "-std=gnu++98 -fdump-rtl-final -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69669.c'
    sources:
      binary: pr69669.s
  group: GRPSERIAL
test_pr69669_1634:
  build:
    cflags: "-std=gnu++11 -fdump-rtl-final -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69669.c'
    sources:
      binary: pr69669.s
  group: GRPSERIAL
test_pr69669_1635:
  build:
    cflags: "-std=gnu++14 -fdump-rtl-final -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69669.c'
    sources:
      binary: pr69669.s
  group: GRPSERIAL
test_pr69669_2178:
  build:
    cflags: "-Wc++-compat -fdump-rtl-final -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69669.c'
    sources:
      binary: pr69669.s
  group: GRPSERIAL
test_pr69669_297:
  build:
    cflags: "-Wc++-compat -fdump-rtl-final -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69669.c'
    sources:
      binary: pr69669.s
  group: GRPSERIAL
test_pr69669_3125:
  build:
    cflags: "-std=gnu++98 -fdump-rtl-final -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69669.c'
    sources:
      binary: pr69669.s
  group: GRPSERIAL
test_pr69669_3126:
  build:
    cflags: "-std=gnu++11 -fdump-rtl-final -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69669.c'
    sources:
      binary: pr69669.s
  group: GRPSERIAL
test_pr69669_3127:
  build:
    cflags: "-std=gnu++14 -fdump-rtl-final -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69669.c'
    sources:
      binary: pr69669.s
  group: GRPSERIAL
test_pr69669_686:
  build:
    cflags: "-Wc++-compat -fdump-rtl-final -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69669.c'
    sources:
      binary: pr69669.s
  group: GRPSERIAL
test_pr69733_1636:
  build:
    cflags: "-std=gnu++98 -W -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69733.c'
    sources:
      binary: pr69733.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("qualifiers ignored")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("qualifiers ignored")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("qualifiers ignored")[^\n]*\n?)+'
test_pr69733_1637:
  build:
    cflags: "-std=gnu++11 -W -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69733.c'
    sources:
      binary: pr69733.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("qualifiers ignored")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("qualifiers ignored")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("qualifiers ignored")[^\n]*\n?)+'
test_pr69733_1638:
  build:
    cflags: "-std=gnu++14 -W -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69733.c'
    sources:
      binary: pr69733.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("qualifiers ignored")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("qualifiers ignored")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("qualifiers ignored")[^\n]*\n?)+'
test_pr69733_2179:
  build:
    cflags: "-Wc++-compat  -W -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69733.c'
    sources:
      binary: pr69733.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("qualifiers ignored")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("qualifiers ignored")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("qualifiers ignored")[^\n]*\n?)+'
test_pr69733_298:
  build:
    cflags: "-Wc++-compat  -W -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69733.c'
    sources:
      binary: pr69733.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("qualifiers ignored")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("qualifiers ignored")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("qualifiers ignored")[^\n]*\n?)+'
test_pr69733_3128:
  build:
    cflags: "-std=gnu++98 -W -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69733.c'
    sources:
      binary: pr69733.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("qualifiers ignored")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("qualifiers ignored")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("qualifiers ignored")[^\n]*\n?)+'
test_pr69733_3129:
  build:
    cflags: "-std=gnu++11 -W -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69733.c'
    sources:
      binary: pr69733.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("qualifiers ignored")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("qualifiers ignored")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("qualifiers ignored")[^\n]*\n?)+'
test_pr69733_3130:
  build:
    cflags: "-std=gnu++14 -W -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69733.c'
    sources:
      binary: pr69733.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("qualifiers ignored")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("qualifiers ignored")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("qualifiers ignored")[^\n]*\n?)+'
test_pr69733_687:
  build:
    cflags: "-Wc++-compat  -W -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69733.c'
    sources:
      binary: pr69733.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("qualifiers ignored")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("qualifiers ignored")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("qualifiers ignored")[^\n]*\n?)+'
test_pr69764_1639:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69764.c'
    sources:
      binary: pr69764.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          is negative")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          is negative")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("right shift count is
          negative")[^\n]*\n?)+'
test_pr69764_1640:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69764.c'
    sources:
      binary: pr69764.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          is negative")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          is negative")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("right shift count is
          negative")[^\n]*\n?)+'
test_pr69764_1641:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69764.c'
    sources:
      binary: pr69764.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          is negative")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          is negative")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("right shift count is
          negative")[^\n]*\n?)+'
test_pr69764_2180:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69764.c'
    sources:
      binary: pr69764.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          is negative")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          is negative")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("right shift count is
          negative")[^\n]*\n?)+'
test_pr69764_299:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69764.c'
    sources:
      binary: pr69764.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          is negative")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          is negative")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("right shift count is
          negative")[^\n]*\n?)+'
test_pr69764_3131:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69764.c'
    sources:
      binary: pr69764.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          is negative")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          is negative")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("right shift count is
          negative")[^\n]*\n?)+'
test_pr69764_3132:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69764.c'
    sources:
      binary: pr69764.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          is negative")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          is negative")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("right shift count is
          negative")[^\n]*\n?)+'
test_pr69764_3133:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69764.c'
    sources:
      binary: pr69764.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          is negative")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          is negative")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("right shift count is
          negative")[^\n]*\n?)+'
test_pr69764_688:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69764.c'
    sources:
      binary: pr69764.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          is negative")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          is negative")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("right shift count
          >= width of type")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("right shift count is
          negative")[^\n]*\n?)+'
test_pr69797_1642:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69797.c'
    sources:
      binary: pr69797.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
test_pr69797_1643:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69797.c'
    sources:
      binary: pr69797.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
test_pr69797_1644:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69797.c'
    sources:
      binary: pr69797.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
test_pr69797_2181:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69797.c'
    sources:
      binary: pr69797.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
test_pr69797_300:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69797.c'
    sources:
      binary: pr69797.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
test_pr69797_3134:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69797.c'
    sources:
      binary: pr69797.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
test_pr69797_3135:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69797.c'
    sources:
      binary: pr69797.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
test_pr69797_3136:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69797.c'
    sources:
      binary: pr69797.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
test_pr69797_689:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr69797.c'
    sources:
      binary: pr69797.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments
          to function")[^\n]*\n?)+'
test_pr70144-1_1645:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70144-1.c'
    sources:
      binary: pr70144-1.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must be directly
          called")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must be directly
          called")[^\n]*\n?)+'
test_pr70144-1_1646:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70144-1.c'
    sources:
      binary: pr70144-1.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must be directly
          called")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must be directly
          called")[^\n]*\n?)+'
test_pr70144-1_1647:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70144-1.c'
    sources:
      binary: pr70144-1.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must be directly
          called")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must be directly
          called")[^\n]*\n?)+'
test_pr70144-1_2182:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70144-1.c'
    sources:
      binary: pr70144-1.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must be directly
          called")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must be directly
          called")[^\n]*\n?)+'
test_pr70144-1_301:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70144-1.c'
    sources:
      binary: pr70144-1.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must be directly
          called")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must be directly
          called")[^\n]*\n?)+'
test_pr70144-1_3137:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70144-1.c'
    sources:
      binary: pr70144-1.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must be directly
          called")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must be directly
          called")[^\n]*\n?)+'
test_pr70144-1_3138:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70144-1.c'
    sources:
      binary: pr70144-1.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must be directly
          called")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must be directly
          called")[^\n]*\n?)+'
test_pr70144-1_3139:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70144-1.c'
    sources:
      binary: pr70144-1.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must be directly
          called")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must be directly
          called")[^\n]*\n?)+'
test_pr70144-1_690:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70144-1.c'
    sources:
      binary: pr70144-1.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must be directly
          called")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must be directly
          called")[^\n]*\n?)+'
test_pr70144-2_1648:
  build:
    cflags: -std=gnu++98 -O2
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70144-2.c'
    sources:
      binary: ./pr70144-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr70144-2_1649:
  build:
    cflags: -std=gnu++11 -O2
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70144-2.c'
    sources:
      binary: ./pr70144-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr70144-2_1650:
  build:
    cflags: -std=gnu++14 -O2
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70144-2.c'
    sources:
      binary: ./pr70144-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr70144-2_2183:
  build:
    cflags: -Wc++-compat  -O2
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70144-2.c'
    sources:
      binary: ./pr70144-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr70144-2_302:
  build:
    cflags: -Wc++-compat  -O2
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70144-2.c'
    sources:
      binary: ./pr70144-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr70144-2_3140:
  build:
    cflags: -std=gnu++98 -O2
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70144-2.c'
    sources:
      binary: ./pr70144-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr70144-2_3141:
  build:
    cflags: -std=gnu++11 -O2
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70144-2.c'
    sources:
      binary: ./pr70144-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr70144-2_3142:
  build:
    cflags: -std=gnu++14 -O2
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70144-2.c'
    sources:
      binary: ./pr70144-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr70144-2_691:
  build:
    cflags: -Wc++-compat  -O2
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70144-2.c'
    sources:
      binary: ./pr70144-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr70264_1651:
  build:
    cflags: "-std=gnu++98 -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70264.c'
    sources:
      binary: pr70264.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_pr70264_1652:
  build:
    cflags: "-std=gnu++11 -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70264.c'
    sources:
      binary: pr70264.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_pr70264_1653:
  build:
    cflags: "-std=gnu++14 -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70264.c'
    sources:
      binary: pr70264.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_pr70264_2184:
  build:
    cflags: "-Wc++-compat  -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70264.c'
    sources:
      binary: pr70264.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_pr70264_303:
  build:
    cflags: "-Wc++-compat  -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70264.c'
    sources:
      binary: pr70264.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_pr70264_3143:
  build:
    cflags: "-std=gnu++98 -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70264.c'
    sources:
      binary: pr70264.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_pr70264_3144:
  build:
    cflags: "-std=gnu++11 -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70264.c'
    sources:
      binary: pr70264.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_pr70264_3145:
  build:
    cflags: "-std=gnu++14 -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70264.c'
    sources:
      binary: pr70264.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_pr70264_692:
  build:
    cflags: "-Wc++-compat  -fdiagnostics-show-caret\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70264.c'
    sources:
      binary: pr70264.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_pr70297_1654:
  build:
    cflags: "-std=gnu++98 -g\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70297.c'
    sources:
      binary: pr70297.s
  group: GRPSERIAL
test_pr70297_1655:
  build:
    cflags: "-std=gnu++11 -g\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70297.c'
    sources:
      binary: pr70297.s
  group: GRPSERIAL
test_pr70297_1656:
  build:
    cflags: "-std=gnu++14 -g\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70297.c'
    sources:
      binary: pr70297.s
  group: GRPSERIAL
test_pr70297_2185:
  build:
    cflags: "-Wc++-compat  -g\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70297.c'
    sources:
      binary: pr70297.s
  group: GRPSERIAL
test_pr70297_304:
  build:
    cflags: "-Wc++-compat  -g\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70297.c'
    sources:
      binary: pr70297.s
  group: GRPSERIAL
test_pr70297_3146:
  build:
    cflags: "-std=gnu++98 -g\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70297.c'
    sources:
      binary: pr70297.s
  group: GRPSERIAL
test_pr70297_3147:
  build:
    cflags: "-std=gnu++11 -g\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70297.c'
    sources:
      binary: pr70297.s
  group: GRPSERIAL
test_pr70297_3148:
  build:
    cflags: "-std=gnu++14 -g\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70297.c'
    sources:
      binary: pr70297.s
  group: GRPSERIAL
test_pr70297_693:
  build:
    cflags: "-Wc++-compat  -g\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70297.c'
    sources:
      binary: pr70297.s
  group: GRPSERIAL
test_pr70336_1657:
  build:
    cflags: "-std=gnu++98 -Wconversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70336.c'
    sources:
      binary: pr70336.s
  group: GRPSERIAL
test_pr70336_1658:
  build:
    cflags: "-std=gnu++11 -Wconversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70336.c'
    sources:
      binary: pr70336.s
  group: GRPSERIAL
test_pr70336_1659:
  build:
    cflags: "-std=gnu++14 -Wconversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70336.c'
    sources:
      binary: pr70336.s
  group: GRPSERIAL
test_pr70336_2186:
  build:
    cflags: "-Wc++-compat  -Wconversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70336.c'
    sources:
      binary: pr70336.s
  group: GRPSERIAL
test_pr70336_305:
  build:
    cflags: "-Wc++-compat  -Wconversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70336.c'
    sources:
      binary: pr70336.s
  group: GRPSERIAL
test_pr70336_3149:
  build:
    cflags: "-std=gnu++98 -Wconversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70336.c'
    sources:
      binary: pr70336.s
  group: GRPSERIAL
test_pr70336_3150:
  build:
    cflags: "-std=gnu++11 -Wconversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70336.c'
    sources:
      binary: pr70336.s
  group: GRPSERIAL
test_pr70336_3151:
  build:
    cflags: "-std=gnu++14 -Wconversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70336.c'
    sources:
      binary: pr70336.s
  group: GRPSERIAL
test_pr70336_694:
  build:
    cflags: "-Wc++-compat  -Wconversion\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70336.c'
    sources:
      binary: pr70336.s
  group: GRPSERIAL
test_pr70651_1660:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70651.c'
    sources:
      binary: pr70651.s
  group: GRPSERIAL
test_pr70651_1661:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70651.c'
    sources:
      binary: pr70651.s
  group: GRPSERIAL
test_pr70651_1662:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70651.c'
    sources:
      binary: pr70651.s
  group: GRPSERIAL
test_pr70651_2187:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70651.c'
    sources:
      binary: pr70651.s
  group: GRPSERIAL
test_pr70651_306:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70651.c'
    sources:
      binary: pr70651.s
  group: GRPSERIAL
test_pr70651_3152:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70651.c'
    sources:
      binary: pr70651.s
  group: GRPSERIAL
test_pr70651_3153:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70651.c'
    sources:
      binary: pr70651.s
  group: GRPSERIAL
test_pr70651_3154:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70651.c'
    sources:
      binary: pr70651.s
  group: GRPSERIAL
test_pr70651_695:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70651.c'
    sources:
      binary: pr70651.s
  group: GRPSERIAL
test_pr70756-2_1663:
  build:
    cflags: "-std=gnu++98 -Wpointer-arith\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70756-2.c'
    sources:
      binary: pr70756-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("15:pointer of type")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("27:pointer to a function")[^\n]*\n?)+'
test_pr70756-2_1664:
  build:
    cflags: "-std=gnu++11 -Wpointer-arith\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70756-2.c'
    sources:
      binary: pr70756-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("15:pointer of type")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("27:pointer to a function")[^\n]*\n?)+'
test_pr70756-2_1665:
  build:
    cflags: "-std=gnu++14 -Wpointer-arith\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70756-2.c'
    sources:
      binary: pr70756-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("15:pointer of type")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("27:pointer to a function")[^\n]*\n?)+'
test_pr70756-2_2188:
  build:
    cflags: "-Wc++-compat  -Wpointer-arith\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70756-2.c'
    sources:
      binary: pr70756-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("15:pointer of type")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("27:pointer to a function")[^\n]*\n?)+'
test_pr70756-2_307:
  build:
    cflags: "-Wc++-compat  -Wpointer-arith\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70756-2.c'
    sources:
      binary: pr70756-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("15:pointer of type")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("27:pointer to a function")[^\n]*\n?)+'
test_pr70756-2_3155:
  build:
    cflags: "-std=gnu++98 -Wpointer-arith\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70756-2.c'
    sources:
      binary: pr70756-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("15:pointer of type")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("27:pointer to a function")[^\n]*\n?)+'
test_pr70756-2_3156:
  build:
    cflags: "-std=gnu++11 -Wpointer-arith\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70756-2.c'
    sources:
      binary: pr70756-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("15:pointer of type")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("27:pointer to a function")[^\n]*\n?)+'
test_pr70756-2_3157:
  build:
    cflags: "-std=gnu++14 -Wpointer-arith\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70756-2.c'
    sources:
      binary: pr70756-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("15:pointer of type")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("27:pointer to a function")[^\n]*\n?)+'
test_pr70756-2_696:
  build:
    cflags: "-Wc++-compat  -Wpointer-arith\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70756-2.c'
    sources:
      binary: pr70756-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("15:pointer of type")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("27:pointer to a function")[^\n]*\n?)+'
test_pr70756_1666:
  build:
    cflags: "-std=gnu++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70756.c'
    sources:
      binary: pr70756.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("16:invalid use
          of")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("11:invalid use
          of array with unspecified bounds")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("storage size|use
          of enum")[^\n]*\n?)+'
test_pr70756_1667:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70756.c'
    sources:
      binary: pr70756.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("16:invalid use
          of")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("11:invalid use
          of array with unspecified bounds")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("storage size|use
          of enum")[^\n]*\n?)+'
test_pr70756_1668:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70756.c'
    sources:
      binary: pr70756.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("16:invalid use
          of")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("11:invalid use
          of array with unspecified bounds")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("storage size|use
          of enum")[^\n]*\n?)+'
test_pr70756_2189:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70756.c'
    sources:
      binary: pr70756.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("16:invalid use
          of")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("11:invalid use
          of array with unspecified bounds")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("storage size|use
          of enum")[^\n]*\n?)+'
test_pr70756_308:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70756.c'
    sources:
      binary: pr70756.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("16:invalid use
          of")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("11:invalid use
          of array with unspecified bounds")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("storage size|use
          of enum")[^\n]*\n?)+'
test_pr70756_3158:
  build:
    cflags: "-std=gnu++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70756.c'
    sources:
      binary: pr70756.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("16:invalid use
          of")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("11:invalid use
          of array with unspecified bounds")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("storage size|use
          of enum")[^\n]*\n?)+'
test_pr70756_3159:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70756.c'
    sources:
      binary: pr70756.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("16:invalid use
          of")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("11:invalid use
          of array with unspecified bounds")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("storage size|use
          of enum")[^\n]*\n?)+'
test_pr70756_3160:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70756.c'
    sources:
      binary: pr70756.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("16:invalid use
          of")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("11:invalid use
          of array with unspecified bounds")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("storage size|use
          of enum")[^\n]*\n?)+'
test_pr70756_697:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr70756.c'
    sources:
      binary: pr70756.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("16:invalid use
          of")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("11:invalid use
          of array with unspecified bounds")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("storage size|use
          of enum")[^\n]*\n?)+'
test_pr71372_1669:
  build:
    cflags: "-std=gnu++98 -O2 -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr71372.c'
    sources:
      binary: pr71372.s
  group: GRPSERIAL
test_pr71372_1670:
  build:
    cflags: "-std=gnu++11 -O2 -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr71372.c'
    sources:
      binary: pr71372.s
  group: GRPSERIAL
test_pr71372_1671:
  build:
    cflags: "-std=gnu++14 -O2 -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr71372.c'
    sources:
      binary: pr71372.s
  group: GRPSERIAL
test_pr71372_2190:
  build:
    cflags: "-Wc++-compat  -O2 -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr71372.c'
    sources:
      binary: pr71372.s
  group: GRPSERIAL
test_pr71372_309:
  build:
    cflags: "-Wc++-compat  -O2 -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr71372.c'
    sources:
      binary: pr71372.s
  group: GRPSERIAL
test_pr71372_3161:
  build:
    cflags: "-std=gnu++98 -O2 -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr71372.c'
    sources:
      binary: pr71372.s
  group: GRPSERIAL
test_pr71372_3162:
  build:
    cflags: "-std=gnu++11 -O2 -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr71372.c'
    sources:
      binary: pr71372.s
  group: GRPSERIAL
test_pr71372_3163:
  build:
    cflags: "-std=gnu++14 -O2 -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr71372.c'
    sources:
      binary: pr71372.s
  group: GRPSERIAL
test_pr71372_698:
  build:
    cflags: "-Wc++-compat  -O2 -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr71372.c'
    sources:
      binary: pr71372.s
  group: GRPSERIAL
test_pr71574_1672:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr71574.c'
    sources:
      binary: pr71574.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requested alignment
          is not")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("parameter outside range")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("parameter outside range")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("not integer constant")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nonnull argument
          has invalid operand")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("not an integer constant")[^\n]*\n?)+'
test_pr71574_1673:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr71574.c'
    sources:
      binary: pr71574.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requested alignment
          is not")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("parameter outside range")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("parameter outside range")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("not integer constant")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nonnull argument
          has invalid operand")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("not an integer constant")[^\n]*\n?)+'
test_pr71574_1674:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr71574.c'
    sources:
      binary: pr71574.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requested alignment
          is not")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("parameter outside range")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("parameter outside range")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("not integer constant")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nonnull argument
          has invalid operand")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("not an integer constant")[^\n]*\n?)+'
test_pr71574_2191:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr71574.c'
    sources:
      binary: pr71574.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requested alignment
          is not")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("parameter outside range")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("parameter outside range")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("not integer constant")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nonnull argument
          has invalid operand")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("not an integer constant")[^\n]*\n?)+'
test_pr71574_310:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr71574.c'
    sources:
      binary: pr71574.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requested alignment
          is not")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("parameter outside range")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("parameter outside range")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("not integer constant")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nonnull argument
          has invalid operand")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("not an integer constant")[^\n]*\n?)+'
test_pr71574_3164:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr71574.c'
    sources:
      binary: pr71574.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requested alignment
          is not")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("parameter outside range")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("parameter outside range")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("not integer constant")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nonnull argument
          has invalid operand")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("not an integer constant")[^\n]*\n?)+'
test_pr71574_3165:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr71574.c'
    sources:
      binary: pr71574.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requested alignment
          is not")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("parameter outside range")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("parameter outside range")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("not integer constant")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nonnull argument
          has invalid operand")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("not an integer constant")[^\n]*\n?)+'
test_pr71574_3166:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr71574.c'
    sources:
      binary: pr71574.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requested alignment
          is not")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("parameter outside range")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("parameter outside range")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("not integer constant")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nonnull argument
          has invalid operand")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("not an integer constant")[^\n]*\n?)+'
test_pr71574_699:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr71574.c'
    sources:
      binary: pr71574.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("attribute ignored")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requested alignment
          is not")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("parameter outside range")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("parameter outside range")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("not integer constant")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nonnull argument
          has invalid operand")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("not an integer constant")[^\n]*\n?)+'
test_pr71654_1675:
  build:
    cflags: -std=gnu++98 -O2
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr71654.c'
    sources:
      binary: pr71654.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr71654_1676:
  build:
    cflags: -std=gnu++11 -O2
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr71654.c'
    sources:
      binary: pr71654.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr71654_1677:
  build:
    cflags: -std=gnu++14 -O2
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr71654.c'
    sources:
      binary: pr71654.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr71654_2192:
  build:
    cflags: -Wc++-compat  -O2
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr71654.c'
    sources:
      binary: pr71654.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr71654_311:
  build:
    cflags: -Wc++-compat  -O2
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr71654.c'
    sources:
      binary: pr71654.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr71654_3167:
  build:
    cflags: -std=gnu++98 -O2
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr71654.c'
    sources:
      binary: pr71654.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr71654_3168:
  build:
    cflags: -std=gnu++11 -O2
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr71654.c'
    sources:
      binary: pr71654.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr71654_3169:
  build:
    cflags: -std=gnu++14 -O2
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr71654.c'
    sources:
      binary: pr71654.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr71654_700:
  build:
    cflags: -Wc++-compat  -O2
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr71654.c'
    sources:
      binary: pr71654.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr77624-1_1678:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr77624-1.c'
    sources:
      binary: pr77624-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("pointer from integer")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("pointer from integer")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion")[^\n]*\n?)+'
test_pr77624-1_1679:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr77624-1.c'
    sources:
      binary: pr77624-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("pointer from integer")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("pointer from integer")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion")[^\n]*\n?)+'
test_pr77624-1_1680:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr77624-1.c'
    sources:
      binary: pr77624-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("pointer from integer")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("pointer from integer")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion")[^\n]*\n?)+'
test_pr77624-1_2193:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr77624-1.c'
    sources:
      binary: pr77624-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("pointer from integer")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("pointer from integer")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion")[^\n]*\n?)+'
test_pr77624-1_312:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr77624-1.c'
    sources:
      binary: pr77624-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("pointer from integer")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("pointer from integer")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion")[^\n]*\n?)+'
test_pr77624-1_3170:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr77624-1.c'
    sources:
      binary: pr77624-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("pointer from integer")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("pointer from integer")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion")[^\n]*\n?)+'
test_pr77624-1_3171:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr77624-1.c'
    sources:
      binary: pr77624-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("pointer from integer")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("pointer from integer")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion")[^\n]*\n?)+'
test_pr77624-1_3172:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr77624-1.c'
    sources:
      binary: pr77624-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("pointer from integer")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("pointer from integer")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion")[^\n]*\n?)+'
test_pr77624-1_701:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr77624-1.c'
    sources:
      binary: pr77624-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("pointer from integer")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("pointer from integer")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion")[^\n]*\n?)+'
test_pr77624-2_1681:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr77624-2.c'
    sources:
      binary: pr77624-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          type")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("convert")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          type")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("convert")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments")[^\n]*\n?)+'
test_pr77624-2_1682:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr77624-2.c'
    sources:
      binary: pr77624-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          type")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("convert")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          type")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("convert")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments")[^\n]*\n?)+'
test_pr77624-2_1683:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr77624-2.c'
    sources:
      binary: pr77624-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          type")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("convert")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          type")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("convert")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments")[^\n]*\n?)+'
test_pr77624-2_2194:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr77624-2.c'
    sources:
      binary: pr77624-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          type")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("convert")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          type")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("convert")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments")[^\n]*\n?)+'
test_pr77624-2_313:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr77624-2.c'
    sources:
      binary: pr77624-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          type")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("convert")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          type")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("convert")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments")[^\n]*\n?)+'
test_pr77624-2_3173:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr77624-2.c'
    sources:
      binary: pr77624-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          type")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("convert")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          type")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("convert")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments")[^\n]*\n?)+'
test_pr77624-2_3174:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr77624-2.c'
    sources:
      binary: pr77624-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          type")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("convert")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          type")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("convert")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments")[^\n]*\n?)+'
test_pr77624-2_3175:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr77624-2.c'
    sources:
      binary: pr77624-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          type")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("convert")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          type")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("convert")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments")[^\n]*\n?)+'
test_pr77624-2_702:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr77624-2.c'
    sources:
      binary: pr77624-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          type")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("convert")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          type")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("convert")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many arguments")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too few arguments")[^\n]*\n?)+'
test_pr79428-3_1684:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr79428-3.c'
    sources:
      binary: pr79428-3.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''#pragma GCC
          pch_preprocess\'' must be first")[^\n]*\n?)+'
test_pr79428-3_1685:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr79428-3.c'
    sources:
      binary: pr79428-3.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''#pragma GCC
          pch_preprocess\'' must be first")[^\n]*\n?)+'
test_pr79428-3_1686:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr79428-3.c'
    sources:
      binary: pr79428-3.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''#pragma GCC
          pch_preprocess\'' must be first")[^\n]*\n?)+'
test_pr79428-3_2195:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr79428-3.c'
    sources:
      binary: pr79428-3.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''#pragma GCC
          pch_preprocess\'' must be first")[^\n]*\n?)+'
test_pr79428-3_314:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr79428-3.c'
    sources:
      binary: pr79428-3.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''#pragma GCC
          pch_preprocess\'' must be first")[^\n]*\n?)+'
test_pr79428-3_3176:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr79428-3.c'
    sources:
      binary: pr79428-3.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''#pragma GCC
          pch_preprocess\'' must be first")[^\n]*\n?)+'
test_pr79428-3_3177:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr79428-3.c'
    sources:
      binary: pr79428-3.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''#pragma GCC
          pch_preprocess\'' must be first")[^\n]*\n?)+'
test_pr79428-3_3178:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr79428-3.c'
    sources:
      binary: pr79428-3.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''#pragma GCC
          pch_preprocess\'' must be first")[^\n]*\n?)+'
test_pr79428-3_703:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr79428-3.c'
    sources:
      binary: pr79428-3.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''#pragma GCC
          pch_preprocess\'' must be first")[^\n]*\n?)+'
test_pr79641_1687:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr79641.c'
    sources:
      binary: pr79641.s
  group: GRPSERIAL
test_pr79641_1688:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr79641.c'
    sources:
      binary: pr79641.s
  group: GRPSERIAL
test_pr79641_1689:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr79641.c'
    sources:
      binary: pr79641.s
  group: GRPSERIAL
test_pr79641_2196:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr79641.c'
    sources:
      binary: pr79641.s
  group: GRPSERIAL
test_pr79641_315:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr79641.c'
    sources:
      binary: pr79641.s
  group: GRPSERIAL
test_pr79641_3179:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr79641.c'
    sources:
      binary: pr79641.s
  group: GRPSERIAL
test_pr79641_3180:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr79641.c'
    sources:
      binary: pr79641.s
  group: GRPSERIAL
test_pr79641_3181:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr79641.c'
    sources:
      binary: pr79641.s
  group: GRPSERIAL
test_pr79641_704:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr79641.c'
    sources:
      binary: pr79641.s
  group: GRPSERIAL
test_pr80162-1_1690:
  build:
    cflags: "-std=gnu++98 -msse2 -ffixed-xmm7\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr80162-1.c'
    sources:
      binary: pr80162-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("address of \\[^
          \\n\\r]* register variable")[^\n]*\n?)+'
test_pr80162-1_1691:
  build:
    cflags: "-std=gnu++11 -msse2 -ffixed-xmm7\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr80162-1.c'
    sources:
      binary: pr80162-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("address of \\[^
          \\n\\r]* register variable")[^\n]*\n?)+'
test_pr80162-1_1692:
  build:
    cflags: "-std=gnu++14 -msse2 -ffixed-xmm7\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr80162-1.c'
    sources:
      binary: pr80162-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("address of \\[^
          \\n\\r]* register variable")[^\n]*\n?)+'
test_pr80162-1_2197:
  build:
    cflags: "-Wc++-compat  -msse2 -ffixed-xmm7\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr80162-1.c'
    sources:
      binary: pr80162-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("address of \\[^
          \\n\\r]* register variable")[^\n]*\n?)+'
test_pr80162-1_316:
  build:
    cflags: "-Wc++-compat  -msse2 -ffixed-xmm7\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr80162-1.c'
    sources:
      binary: pr80162-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("address of \\[^
          \\n\\r]* register variable")[^\n]*\n?)+'
test_pr80162-1_3182:
  build:
    cflags: "-std=gnu++98 -msse2 -ffixed-xmm7\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr80162-1.c'
    sources:
      binary: pr80162-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("address of \\[^
          \\n\\r]* register variable")[^\n]*\n?)+'
test_pr80162-1_3183:
  build:
    cflags: "-std=gnu++11 -msse2 -ffixed-xmm7\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr80162-1.c'
    sources:
      binary: pr80162-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("address of \\[^
          \\n\\r]* register variable")[^\n]*\n?)+'
test_pr80162-1_3184:
  build:
    cflags: "-std=gnu++14 -msse2 -ffixed-xmm7\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr80162-1.c'
    sources:
      binary: pr80162-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("address of \\[^
          \\n\\r]* register variable")[^\n]*\n?)+'
test_pr80162-1_705:
  build:
    cflags: "-Wc++-compat  -msse2 -ffixed-xmm7\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr80162-1.c'
    sources:
      binary: pr80162-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("address of \\[^
          \\n\\r]* register variable")[^\n]*\n?)+'
test_pr80162-2_1693:
  build:
    cflags: "-std=gnu++98 -mavx2 -ffixed-xmm7\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr80162-2.c'
    sources:
      binary: pr80162-2.s
  group: GRPSERIAL
test_pr80162-2_1694:
  build:
    cflags: "-std=gnu++11 -mavx2 -ffixed-xmm7\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr80162-2.c'
    sources:
      binary: pr80162-2.s
  group: GRPSERIAL
test_pr80162-2_1695:
  build:
    cflags: "-std=gnu++14 -mavx2 -ffixed-xmm7\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr80162-2.c'
    sources:
      binary: pr80162-2.s
  group: GRPSERIAL
test_pr80162-2_2198:
  build:
    cflags: "-Wc++-compat  -mavx2 -ffixed-xmm7\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr80162-2.c'
    sources:
      binary: pr80162-2.s
  group: GRPSERIAL
test_pr80162-2_317:
  build:
    cflags: "-Wc++-compat  -mavx2 -ffixed-xmm7\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr80162-2.c'
    sources:
      binary: pr80162-2.s
  group: GRPSERIAL
test_pr80162-2_3185:
  build:
    cflags: "-std=gnu++98 -mavx2 -ffixed-xmm7\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr80162-2.c'
    sources:
      binary: pr80162-2.s
  group: GRPSERIAL
test_pr80162-2_3186:
  build:
    cflags: "-std=gnu++11 -mavx2 -ffixed-xmm7\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr80162-2.c'
    sources:
      binary: pr80162-2.s
  group: GRPSERIAL
test_pr80162-2_3187:
  build:
    cflags: "-std=gnu++14 -mavx2 -ffixed-xmm7\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr80162-2.c'
    sources:
      binary: pr80162-2.s
  group: GRPSERIAL
test_pr80162-2_706:
  build:
    cflags: "-Wc++-compat  -mavx2 -ffixed-xmm7\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr80162-2.c'
    sources:
      binary: pr80162-2.s
  group: GRPSERIAL
test_pr80162-3_1696:
  build:
    cflags: "-std=gnu++98 -mavx2 -ffixed-xmm7\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr80162-3.c'
    sources:
      binary: pr80162-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("address of \\[^
          \\n\\r]* register variable")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("address of \\[^
          \\n\\r]* register variable")[^\n]*\n?)+'
test_pr80162-3_1697:
  build:
    cflags: "-std=gnu++11 -mavx2 -ffixed-xmm7\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr80162-3.c'
    sources:
      binary: pr80162-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("address of \\[^
          \\n\\r]* register variable")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("address of \\[^
          \\n\\r]* register variable")[^\n]*\n?)+'
test_pr80162-3_1698:
  build:
    cflags: "-std=gnu++14 -mavx2 -ffixed-xmm7\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr80162-3.c'
    sources:
      binary: pr80162-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("address of \\[^
          \\n\\r]* register variable")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("address of \\[^
          \\n\\r]* register variable")[^\n]*\n?)+'
test_pr80162-3_2199:
  build:
    cflags: "-Wc++-compat  -mavx2 -ffixed-xmm7\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr80162-3.c'
    sources:
      binary: pr80162-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("address of \\[^
          \\n\\r]* register variable")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("address of \\[^
          \\n\\r]* register variable")[^\n]*\n?)+'
test_pr80162-3_318:
  build:
    cflags: "-Wc++-compat  -mavx2 -ffixed-xmm7\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr80162-3.c'
    sources:
      binary: pr80162-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("address of \\[^
          \\n\\r]* register variable")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("address of \\[^
          \\n\\r]* register variable")[^\n]*\n?)+'
test_pr80162-3_3188:
  build:
    cflags: "-std=gnu++98 -mavx2 -ffixed-xmm7\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr80162-3.c'
    sources:
      binary: pr80162-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("address of \\[^
          \\n\\r]* register variable")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("address of \\[^
          \\n\\r]* register variable")[^\n]*\n?)+'
test_pr80162-3_3189:
  build:
    cflags: "-std=gnu++11 -mavx2 -ffixed-xmm7\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr80162-3.c'
    sources:
      binary: pr80162-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("address of \\[^
          \\n\\r]* register variable")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("address of \\[^
          \\n\\r]* register variable")[^\n]*\n?)+'
test_pr80162-3_3190:
  build:
    cflags: "-std=gnu++14 -mavx2 -ffixed-xmm7\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr80162-3.c'
    sources:
      binary: pr80162-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("address of \\[^
          \\n\\r]* register variable")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("address of \\[^
          \\n\\r]* register variable")[^\n]*\n?)+'
test_pr80162-3_707:
  build:
    cflags: "-Wc++-compat  -mavx2 -ffixed-xmm7\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr80162-3.c'
    sources:
      binary: pr80162-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("address of \\[^
          \\n\\r]* register variable")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("address of \\[^
          \\n\\r]* register variable")[^\n]*\n?)+'
test_pr81052_1699:
  build:
    cflags: "-std=gnu++98 -fopenmp-simd -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr81052.c'
    sources:
      binary: pr81052.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
test_pr81052_1700:
  build:
    cflags: "-std=gnu++11 -fopenmp-simd -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr81052.c'
    sources:
      binary: pr81052.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
test_pr81052_1701:
  build:
    cflags: "-std=gnu++14 -fopenmp-simd -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr81052.c'
    sources:
      binary: pr81052.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
test_pr81052_2200:
  build:
    cflags: "-Wc++-compat  -fopenmp-simd -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr81052.c'
    sources:
      binary: pr81052.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
test_pr81052_319:
  build:
    cflags: "-Wc++-compat  -fopenmp-simd -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr81052.c'
    sources:
      binary: pr81052.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
test_pr81052_3191:
  build:
    cflags: "-std=gnu++98 -fopenmp-simd -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr81052.c'
    sources:
      binary: pr81052.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
test_pr81052_3192:
  build:
    cflags: "-std=gnu++11 -fopenmp-simd -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr81052.c'
    sources:
      binary: pr81052.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
test_pr81052_3193:
  build:
    cflags: "-std=gnu++14 -fopenmp-simd -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr81052.c'
    sources:
      binary: pr81052.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
test_pr81052_708:
  build:
    cflags: "-Wc++-compat  -fopenmp-simd -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr81052.c'
    sources:
      binary: pr81052.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
test_pr82112_1702:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr82112.c'
    sources:
      binary: pr82112.s
  group: GRPSERIAL
test_pr82112_1703:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr82112.c'
    sources:
      binary: pr82112.s
  group: GRPSERIAL
test_pr82112_1704:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr82112.c'
    sources:
      binary: pr82112.s
  group: GRPSERIAL
test_pr82112_2201:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr82112.c'
    sources:
      binary: pr82112.s
  group: GRPSERIAL
test_pr82112_3194:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr82112.c'
    sources:
      binary: pr82112.s
  group: GRPSERIAL
test_pr82112_3195:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr82112.c'
    sources:
      binary: pr82112.s
  group: GRPSERIAL
test_pr82112_3196:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr82112.c'
    sources:
      binary: pr82112.s
  group: GRPSERIAL
test_pr82112_320:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr82112.c'
    sources:
      binary: pr82112.s
  group: GRPSERIAL
test_pr82112_709:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr82112.c'
    sources:
      binary: pr82112.s
  group: GRPSERIAL
test_pr83059_1705:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr83059.c'
    sources:
      binary: pr83059.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("invalid memory model
          argument 6")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("\\[uU]nknown architecture
          specifi")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("failure memory model
          cannot be stronger than success memory model")[^\n]*\n?)+'
test_pr83059_1706:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr83059.c'
    sources:
      binary: pr83059.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("invalid memory model
          argument 6")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("\\[uU]nknown architecture
          specifi")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("failure memory model
          cannot be stronger than success memory model")[^\n]*\n?)+'
test_pr83059_1707:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr83059.c'
    sources:
      binary: pr83059.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("invalid memory model
          argument 6")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("\\[uU]nknown architecture
          specifi")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("failure memory model
          cannot be stronger than success memory model")[^\n]*\n?)+'
test_pr83059_2202:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr83059.c'
    sources:
      binary: pr83059.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("invalid memory model
          argument 6")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("\\[uU]nknown architecture
          specifi")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("failure memory model
          cannot be stronger than success memory model")[^\n]*\n?)+'
test_pr83059_3197:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr83059.c'
    sources:
      binary: pr83059.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("invalid memory model
          argument 6")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("\\[uU]nknown architecture
          specifi")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("failure memory model
          cannot be stronger than success memory model")[^\n]*\n?)+'
test_pr83059_3198:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr83059.c'
    sources:
      binary: pr83059.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("invalid memory model
          argument 6")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("\\[uU]nknown architecture
          specifi")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("failure memory model
          cannot be stronger than success memory model")[^\n]*\n?)+'
test_pr83059_3199:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr83059.c'
    sources:
      binary: pr83059.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("invalid memory model
          argument 6")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("\\[uU]nknown architecture
          specifi")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("failure memory model
          cannot be stronger than success memory model")[^\n]*\n?)+'
test_pr83059_321:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr83059.c'
    sources:
      binary: pr83059.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("invalid memory model
          argument 6")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("\\[uU]nknown architecture
          specifi")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("failure memory model
          cannot be stronger than success memory model")[^\n]*\n?)+'
test_pr83059_710:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/pr83059.c'
    sources:
      binary: pr83059.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("invalid memory model
          argument 6")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("\\[uU]nknown architecture
          specifi")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("failure memory model
          cannot be stronger than success memory model")[^\n]*\n?)+'
test_raw-string-10_1708:
  build:
    cflags: -std=c++0x
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-10.c'
    sources:
      binary: ./raw-string-10.exe
  group: GRPSERIAL
  run:
    cwd: .
test_raw-string-10_2203:
  build:
    cflags: -Wc++-compat  -std=gnu99 -trigraphs
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-10.c'
    sources:
      binary: ./raw-string-10.exe
  group: GRPSERIAL
  run:
    cwd: .
test_raw-string-10_3200:
  build:
    cflags: -std=c++0x
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-10.c'
    sources:
      binary: ./raw-string-10.exe
  group: GRPSERIAL
  run:
    cwd: .
test_raw-string-10_322:
  build:
    cflags: -Wc++-compat  -std=gnu99 -trigraphs
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-10.c'
    sources:
      binary: ./raw-string-10.exe
  group: GRPSERIAL
  run:
    cwd: .
test_raw-string-10_711:
  build:
    cflags: -Wc++-compat  -std=gnu99 -trigraphs
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-10.c'
    sources:
      binary: ./raw-string-10.exe
  group: GRPSERIAL
  run:
    cwd: .
test_raw-string-11_1709:
  build:
    cflags: -std=c++0x -save-temps
    cwd: /home/adamj/mnt/projects/pcvs/compilers/gcc/c-c++-common
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-11.c'
    sources:
      binary: ./raw-string-11.exe
  group: GRPSERIAL
  run:
    cwd: /home/adamj/mnt/projects/pcvs/compilers/gcc/c-c++-common
test_raw-string-11_2204:
  build:
    cflags: -Wc++-compat  -std=gnu99 -trigraphs -save-temps
    cwd: /home/adamj/mnt/projects/pcvs/compilers/gcc/c-c++-common
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-11.c'
    sources:
      binary: ./raw-string-11.exe
  group: GRPSERIAL
  run:
    cwd: /home/adamj/mnt/projects/pcvs/compilers/gcc/c-c++-common
test_raw-string-11_3201:
  build:
    cflags: -std=c++0x -save-temps
    cwd: /home/adamj/mnt/projects/pcvs/compilers/gcc/c-c++-common
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-11.c'
    sources:
      binary: ./raw-string-11.exe
  group: GRPSERIAL
  run:
    cwd: /home/adamj/mnt/projects/pcvs/compilers/gcc/c-c++-common
test_raw-string-11_323:
  build:
    cflags: -Wc++-compat  -std=gnu99 -trigraphs -save-temps
    cwd: /home/adamj/mnt/projects/pcvs/compilers/gcc/c-c++-common
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-11.c'
    sources:
      binary: ./raw-string-11.exe
  group: GRPSERIAL
  run:
    cwd: /home/adamj/mnt/projects/pcvs/compilers/gcc/c-c++-common
test_raw-string-11_712:
  build:
    cflags: -Wc++-compat  -std=gnu99 -trigraphs -save-temps
    cwd: /home/adamj/mnt/projects/pcvs/compilers/gcc/c-c++-common
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-11.c'
    sources:
      binary: ./raw-string-11.exe
  group: GRPSERIAL
  run:
    cwd: /home/adamj/mnt/projects/pcvs/compilers/gcc/c-c++-common
test_raw-string-12_1710:
  build:
    cflags: "-std=c++0x\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-12.c'
    sources:
      binary: raw-string-12.s
  group: GRPSERIAL
test_raw-string-12_2205:
  build:
    cflags: "-Wc++-compat  -std=gnu99\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-12.c'
    sources:
      binary: raw-string-12.s
  group: GRPSERIAL
test_raw-string-12_3202:
  build:
    cflags: "-std=c++0x\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-12.c'
    sources:
      binary: raw-string-12.s
  group: GRPSERIAL
test_raw-string-12_324:
  build:
    cflags: "-Wc++-compat  -std=gnu99\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-12.c'
    sources:
      binary: raw-string-12.s
  group: GRPSERIAL
test_raw-string-12_713:
  build:
    cflags: "-Wc++-compat  -std=gnu99\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-12.c'
    sources:
      binary: raw-string-12.s
  group: GRPSERIAL
test_raw-string-14_1711:
  build:
    cflags: "-std=c++11\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-14.c'
    sources:
      binary: raw-string-14.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid new-line")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("missing terminating")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("19:missing terminating")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("raw string delimiter
          longer")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("raw string delimiter
          longer")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("raw string delimiter
          longer")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
test_raw-string-14_2206:
  build:
    cflags: "-Wc++-compat  -std=gnu99 -trigraphs\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-14.c'
    sources:
      binary: raw-string-14.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid new-line")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("missing terminating")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("19:missing terminating")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("raw string delimiter
          longer")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("raw string delimiter
          longer")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("raw string delimiter
          longer")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
test_raw-string-14_3203:
  build:
    cflags: "-std=c++11\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-14.c'
    sources:
      binary: raw-string-14.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid new-line")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("missing terminating")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("19:missing terminating")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("raw string delimiter
          longer")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("raw string delimiter
          longer")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("raw string delimiter
          longer")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
test_raw-string-14_325:
  build:
    cflags: "-Wc++-compat  -std=gnu99 -trigraphs\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-14.c'
    sources:
      binary: raw-string-14.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid new-line")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("missing terminating")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("19:missing terminating")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("raw string delimiter
          longer")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("raw string delimiter
          longer")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("raw string delimiter
          longer")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
test_raw-string-14_714:
  build:
    cflags: "-Wc++-compat  -std=gnu99 -trigraphs\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-14.c'
    sources:
      binary: raw-string-14.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid new-line")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("missing terminating")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("19:missing terminating")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("raw string delimiter
          longer")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("raw string delimiter
          longer")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("raw string delimiter
          longer")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
test_raw-string-16_1712:
  build:
    cflags: "-std=gnu++11 -Wtrigraphs\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-16.c'
    sources:
      binary: raw-string-16.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("raw string delimiter
          longer")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("raw string delimiter
          longer")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("trigraph ..= ignored")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("raw string delimiter
          longer")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
test_raw-string-16_2207:
  build:
    cflags: "-Wc++-compat  -std=gnu99 -Wtrigraphs\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-16.c'
    sources:
      binary: raw-string-16.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("raw string delimiter
          longer")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("raw string delimiter
          longer")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("trigraph ..= ignored")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("raw string delimiter
          longer")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
test_raw-string-16_3204:
  build:
    cflags: "-std=gnu++11 -Wtrigraphs\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-16.c'
    sources:
      binary: raw-string-16.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("raw string delimiter
          longer")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("raw string delimiter
          longer")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("trigraph ..= ignored")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("raw string delimiter
          longer")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
test_raw-string-16_326:
  build:
    cflags: "-Wc++-compat  -std=gnu99 -Wtrigraphs\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-16.c'
    sources:
      binary: raw-string-16.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("raw string delimiter
          longer")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("raw string delimiter
          longer")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("trigraph ..= ignored")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("raw string delimiter
          longer")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
test_raw-string-16_715:
  build:
    cflags: "-Wc++-compat  -std=gnu99 -Wtrigraphs\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-16.c'
    sources:
      binary: raw-string-16.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("raw string delimiter
          longer")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("raw string delimiter
          longer")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("trigraph ..= ignored")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("raw string delimiter
          longer")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
test_raw-string-17_1713:
  build:
    cflags: -std=c++11
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-17.c'
    sources:
      binary: ./raw-string-17.exe
  group: GRPSERIAL
  run:
    cwd: .
test_raw-string-17_2208:
  build:
    cflags: -Wc++-compat  -std=gnu99
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-17.c'
    sources:
      binary: ./raw-string-17.exe
  group: GRPSERIAL
  run:
    cwd: .
test_raw-string-17_3205:
  build:
    cflags: -std=c++11
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-17.c'
    sources:
      binary: ./raw-string-17.exe
  group: GRPSERIAL
  run:
    cwd: .
test_raw-string-17_327:
  build:
    cflags: -Wc++-compat  -std=gnu99
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-17.c'
    sources:
      binary: ./raw-string-17.exe
  group: GRPSERIAL
  run:
    cwd: .
test_raw-string-17_716:
  build:
    cflags: -Wc++-compat  -std=gnu99
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-17.c'
    sources:
      binary: ./raw-string-17.exe
  group: GRPSERIAL
  run:
    cwd: .
test_raw-string-18_1714:
  build:
    cflags: "-std=c++11 -fdump-tree-optimized-lineno\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-18.c'
    sources:
      binary: raw-string-18.s
  group: GRPSERIAL
test_raw-string-18_2209:
  build:
    cflags: "-Wc++-compat  -std=gnu99 -fdump-tree-optimized-lineno\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-18.c'
    sources:
      binary: raw-string-18.s
  group: GRPSERIAL
test_raw-string-18_3206:
  build:
    cflags: "-std=c++11 -fdump-tree-optimized-lineno\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-18.c'
    sources:
      binary: raw-string-18.s
  group: GRPSERIAL
test_raw-string-18_328:
  build:
    cflags: "-Wc++-compat  -std=gnu99 -fdump-tree-optimized-lineno\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-18.c'
    sources:
      binary: raw-string-18.s
  group: GRPSERIAL
test_raw-string-18_717:
  build:
    cflags: "-Wc++-compat  -std=gnu99 -fdump-tree-optimized-lineno\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-18.c'
    sources:
      binary: raw-string-18.s
  group: GRPSERIAL
test_raw-string-19_1715:
  build:
    cflags: "-std=c++11 -fdump-tree-optimized-lineno -save-temps\n -S"
    cwd: /home/adamj/mnt/projects/pcvs/compilers/gcc/c-c++-common
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-19.c'
    sources:
      binary: raw-string-19.s
  group: GRPSERIAL
  run:
    cwd: /home/adamj/mnt/projects/pcvs/compilers/gcc/c-c++-common
test_raw-string-19_2210:
  build:
    cflags: "-Wc++-compat  -std=gnu99 -fdump-tree-optimized-lineno -save-temps\n -S"
    cwd: /home/adamj/mnt/projects/pcvs/compilers/gcc/c-c++-common
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-19.c'
    sources:
      binary: raw-string-19.s
  group: GRPSERIAL
  run:
    cwd: /home/adamj/mnt/projects/pcvs/compilers/gcc/c-c++-common
test_raw-string-19_3207:
  build:
    cflags: "-std=c++11 -fdump-tree-optimized-lineno -save-temps\n -S"
    cwd: /home/adamj/mnt/projects/pcvs/compilers/gcc/c-c++-common
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-19.c'
    sources:
      binary: raw-string-19.s
  group: GRPSERIAL
  run:
    cwd: /home/adamj/mnt/projects/pcvs/compilers/gcc/c-c++-common
test_raw-string-19_329:
  build:
    cflags: "-Wc++-compat  -std=gnu99 -fdump-tree-optimized-lineno -save-temps\n -S"
    cwd: /home/adamj/mnt/projects/pcvs/compilers/gcc/c-c++-common
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-19.c'
    sources:
      binary: raw-string-19.s
  group: GRPSERIAL
  run:
    cwd: /home/adamj/mnt/projects/pcvs/compilers/gcc/c-c++-common
test_raw-string-19_718:
  build:
    cflags: "-Wc++-compat  -std=gnu99 -fdump-tree-optimized-lineno -save-temps\n -S"
    cwd: /home/adamj/mnt/projects/pcvs/compilers/gcc/c-c++-common
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-19.c'
    sources:
      binary: raw-string-19.s
  group: GRPSERIAL
  run:
    cwd: /home/adamj/mnt/projects/pcvs/compilers/gcc/c-c++-common
test_raw-string-3_1716:
  build:
    cflags: "-std=c++98\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-3.c'
    sources:
      binary: raw-string-3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
test_raw-string-3_2211:
  build:
    cflags: "-Wc++-compat  -std=gnu89\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-3.c'
    sources:
      binary: raw-string-3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
test_raw-string-3_3208:
  build:
    cflags: "-std=c++98\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-3.c'
    sources:
      binary: raw-string-3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
test_raw-string-3_330:
  build:
    cflags: "-Wc++-compat  -std=gnu89\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-3.c'
    sources:
      binary: raw-string-3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
test_raw-string-3_719:
  build:
    cflags: "-Wc++-compat  -std=gnu89\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-3.c'
    sources:
      binary: raw-string-3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
test_raw-string-4_1717:
  build:
    cflags: "-std=c++0x\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-4.c'
    sources:
      binary: raw-string-4.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
test_raw-string-4_2212:
  build:
    cflags: "-Wc++-compat  -std=gnu99\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-4.c'
    sources:
      binary: raw-string-4.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
test_raw-string-4_3209:
  build:
    cflags: "-std=c++0x\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-4.c'
    sources:
      binary: raw-string-4.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
test_raw-string-4_331:
  build:
    cflags: "-Wc++-compat  -std=gnu99\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-4.c'
    sources:
      binary: raw-string-4.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
test_raw-string-4_720:
  build:
    cflags: "-Wc++-compat  -std=gnu99\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-4.c'
    sources:
      binary: raw-string-4.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|undeclared")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected \'',\''
          or \'';\''")[^\n]*\n?)+'
test_raw-string-5_1718:
  build:
    cflags: "-std=c++0x\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-5.c'
    sources:
      binary: raw-string-5.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("raw string delimiter
          longer")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
test_raw-string-5_2213:
  build:
    cflags: "-Wc++-compat  -std=gnu99\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-5.c'
    sources:
      binary: raw-string-5.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("raw string delimiter
          longer")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
test_raw-string-5_3210:
  build:
    cflags: "-std=c++0x\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-5.c'
    sources:
      binary: raw-string-5.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("raw string delimiter
          longer")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
test_raw-string-5_332:
  build:
    cflags: "-Wc++-compat  -std=gnu99\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-5.c'
    sources:
      binary: raw-string-5.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("raw string delimiter
          longer")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
test_raw-string-5_721:
  build:
    cflags: "-Wc++-compat  -std=gnu99\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-5.c'
    sources:
      binary: raw-string-5.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("raw string delimiter
          longer")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid character")[^\n]*\n?)+'
test_raw-string-6_1719:
  build:
    cflags: "-std=c++0x\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-6.c'
    sources:
      binary: raw-string-6.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at end of input")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unterminated raw
          string")[^\n]*\n?)+'
test_raw-string-6_2214:
  build:
    cflags: "-Wc++-compat  -std=gnu99\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-6.c'
    sources:
      binary: raw-string-6.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at end of input")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unterminated raw
          string")[^\n]*\n?)+'
test_raw-string-6_3211:
  build:
    cflags: "-std=c++0x\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-6.c'
    sources:
      binary: raw-string-6.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at end of input")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unterminated raw
          string")[^\n]*\n?)+'
test_raw-string-6_333:
  build:
    cflags: "-Wc++-compat  -std=gnu99\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-6.c'
    sources:
      binary: raw-string-6.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at end of input")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unterminated raw
          string")[^\n]*\n?)+'
test_raw-string-6_722:
  build:
    cflags: "-Wc++-compat  -std=gnu99\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-6.c'
    sources:
      binary: raw-string-6.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at end of input")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unterminated raw
          string")[^\n]*\n?)+'
test_raw-string-7_1720:
  build:
    cflags: -std=c++0x
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-7.c'
    sources:
      binary: ./raw-string-7.exe
  group: GRPSERIAL
  run:
    cwd: .
test_raw-string-7_2215:
  build:
    cflags: -Wc++-compat  -std=gnu99
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-7.c'
    sources:
      binary: ./raw-string-7.exe
  group: GRPSERIAL
  run:
    cwd: .
test_raw-string-7_3212:
  build:
    cflags: -std=c++0x
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-7.c'
    sources:
      binary: ./raw-string-7.exe
  group: GRPSERIAL
  run:
    cwd: .
test_raw-string-7_334:
  build:
    cflags: -Wc++-compat  -std=gnu99
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-7.c'
    sources:
      binary: ./raw-string-7.exe
  group: GRPSERIAL
  run:
    cwd: .
test_raw-string-7_723:
  build:
    cflags: -Wc++-compat  -std=gnu99
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-7.c'
    sources:
      binary: ./raw-string-7.exe
  group: GRPSERIAL
  run:
    cwd: .
test_raw-string-8_1721:
  build:
    cflags: "-std=c++0x\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-8.c'
    sources:
      binary: raw-string-8.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_raw-string-8_2216:
  build:
    cflags: "-Wc++-compat  -std=gnu99\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-8.c'
    sources:
      binary: raw-string-8.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_raw-string-8_3213:
  build:
    cflags: "-std=c++0x\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-8.c'
    sources:
      binary: raw-string-8.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_raw-string-8_335:
  build:
    cflags: "-Wc++-compat  -std=gnu99\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-8.c'
    sources:
      binary: raw-string-8.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_raw-string-8_724:
  build:
    cflags: "-Wc++-compat  -std=gnu99\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-8.c'
    sources:
      binary: raw-string-8.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_raw-string-9_1722:
  build:
    cflags: -std=gnu++0x
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-9.c'
    sources:
      binary: ./raw-string-9.exe
  group: GRPSERIAL
  run:
    cwd: .
test_raw-string-9_2217:
  build:
    cflags: -Wc++-compat  -std=gnu99
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-9.c'
    sources:
      binary: ./raw-string-9.exe
  group: GRPSERIAL
  run:
    cwd: .
test_raw-string-9_3214:
  build:
    cflags: -std=gnu++0x
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-9.c'
    sources:
      binary: ./raw-string-9.exe
  group: GRPSERIAL
  run:
    cwd: .
test_raw-string-9_336:
  build:
    cflags: -Wc++-compat  -std=gnu99
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-9.c'
    sources:
      binary: ./raw-string-9.exe
  group: GRPSERIAL
  run:
    cwd: .
test_raw-string-9_725:
  build:
    cflags: -Wc++-compat  -std=gnu99
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/raw-string-9.c'
    sources:
      binary: ./raw-string-9.exe
  group: GRPSERIAL
  run:
    cwd: .
test_restrict-1_1723:
  build:
    cflags: -std=gnu++98 -O -fno-strict-aliasing -fdump-tree-optimized
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/restrict-1.c'
    sources:
      binary: restrict-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_restrict-1_1724:
  build:
    cflags: -std=gnu++11 -O -fno-strict-aliasing -fdump-tree-optimized
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/restrict-1.c'
    sources:
      binary: restrict-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_restrict-1_1725:
  build:
    cflags: -std=gnu++14 -O -fno-strict-aliasing -fdump-tree-optimized
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/restrict-1.c'
    sources:
      binary: restrict-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_restrict-1_2218:
  build:
    cflags: -Wc++-compat  -O -fno-strict-aliasing -fdump-tree-optimized
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/restrict-1.c'
    sources:
      binary: restrict-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_restrict-1_3215:
  build:
    cflags: -std=gnu++98 -O -fno-strict-aliasing -fdump-tree-optimized
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/restrict-1.c'
    sources:
      binary: restrict-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_restrict-1_3216:
  build:
    cflags: -std=gnu++11 -O -fno-strict-aliasing -fdump-tree-optimized
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/restrict-1.c'
    sources:
      binary: restrict-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_restrict-1_3217:
  build:
    cflags: -std=gnu++14 -O -fno-strict-aliasing -fdump-tree-optimized
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/restrict-1.c'
    sources:
      binary: restrict-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_restrict-1_337:
  build:
    cflags: -Wc++-compat  -O -fno-strict-aliasing -fdump-tree-optimized
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/restrict-1.c'
    sources:
      binary: restrict-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_restrict-1_726:
  build:
    cflags: -Wc++-compat  -O -fno-strict-aliasing -fdump-tree-optimized
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/restrict-1.c'
    sources:
      binary: restrict-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_restrict-2_1726:
  build:
    cflags: "-std=gnu++98 -O -fno-strict-aliasing -fdump-tree-lim2-details\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/restrict-2.c'
    sources:
      binary: restrict-2.s
  group: GRPSERIAL
test_restrict-2_1727:
  build:
    cflags: "-std=gnu++11 -O -fno-strict-aliasing -fdump-tree-lim2-details\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/restrict-2.c'
    sources:
      binary: restrict-2.s
  group: GRPSERIAL
test_restrict-2_1728:
  build:
    cflags: "-std=gnu++14 -O -fno-strict-aliasing -fdump-tree-lim2-details\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/restrict-2.c'
    sources:
      binary: restrict-2.s
  group: GRPSERIAL
test_restrict-2_2219:
  build:
    cflags: "-Wc++-compat  -O -fno-strict-aliasing -fdump-tree-lim2-details\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/restrict-2.c'
    sources:
      binary: restrict-2.s
  group: GRPSERIAL
test_restrict-2_3218:
  build:
    cflags: "-std=gnu++98 -O -fno-strict-aliasing -fdump-tree-lim2-details\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/restrict-2.c'
    sources:
      binary: restrict-2.s
  group: GRPSERIAL
test_restrict-2_3219:
  build:
    cflags: "-std=gnu++11 -O -fno-strict-aliasing -fdump-tree-lim2-details\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/restrict-2.c'
    sources:
      binary: restrict-2.s
  group: GRPSERIAL
test_restrict-2_3220:
  build:
    cflags: "-std=gnu++14 -O -fno-strict-aliasing -fdump-tree-lim2-details\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/restrict-2.c'
    sources:
      binary: restrict-2.s
  group: GRPSERIAL
test_restrict-2_338:
  build:
    cflags: "-Wc++-compat  -O -fno-strict-aliasing -fdump-tree-lim2-details\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/restrict-2.c'
    sources:
      binary: restrict-2.s
  group: GRPSERIAL
test_restrict-2_727:
  build:
    cflags: "-Wc++-compat  -O -fno-strict-aliasing -fdump-tree-lim2-details\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/restrict-2.c'
    sources:
      binary: restrict-2.s
  group: GRPSERIAL
test_restrict-4_1729:
  build:
    cflags: "-std=gnu++98 -O2 -fdump-tree-lim2-details\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/restrict-4.c'
    sources:
      binary: restrict-4.s
  group: GRPSERIAL
test_restrict-4_1730:
  build:
    cflags: "-std=gnu++11 -O2 -fdump-tree-lim2-details\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/restrict-4.c'
    sources:
      binary: restrict-4.s
  group: GRPSERIAL
test_restrict-4_1731:
  build:
    cflags: "-std=gnu++14 -O2 -fdump-tree-lim2-details\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/restrict-4.c'
    sources:
      binary: restrict-4.s
  group: GRPSERIAL
test_restrict-4_2220:
  build:
    cflags: "-Wc++-compat  -O2 -fdump-tree-lim2-details\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/restrict-4.c'
    sources:
      binary: restrict-4.s
  group: GRPSERIAL
test_restrict-4_3221:
  build:
    cflags: "-std=gnu++98 -O2 -fdump-tree-lim2-details\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/restrict-4.c'
    sources:
      binary: restrict-4.s
  group: GRPSERIAL
test_restrict-4_3222:
  build:
    cflags: "-std=gnu++11 -O2 -fdump-tree-lim2-details\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/restrict-4.c'
    sources:
      binary: restrict-4.s
  group: GRPSERIAL
test_restrict-4_3223:
  build:
    cflags: "-std=gnu++14 -O2 -fdump-tree-lim2-details\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/restrict-4.c'
    sources:
      binary: restrict-4.s
  group: GRPSERIAL
test_restrict-4_339:
  build:
    cflags: "-Wc++-compat  -O2 -fdump-tree-lim2-details\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/restrict-4.c'
    sources:
      binary: restrict-4.s
  group: GRPSERIAL
test_restrict-4_728:
  build:
    cflags: "-Wc++-compat  -O2 -fdump-tree-lim2-details\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/restrict-4.c'
    sources:
      binary: restrict-4.s
  group: GRPSERIAL
test_rotate-1_1732:
  build:
    cflags: "-std=gnu++98 -O2 -fno-ipa-icf -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-1.c'
    sources:
      binary: rotate-1.s
  group: GRPSERIAL
test_rotate-1_1733:
  build:
    cflags: "-std=gnu++11 -O2 -fno-ipa-icf -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-1.c'
    sources:
      binary: rotate-1.s
  group: GRPSERIAL
test_rotate-1_1734:
  build:
    cflags: "-std=gnu++14 -O2 -fno-ipa-icf -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-1.c'
    sources:
      binary: rotate-1.s
  group: GRPSERIAL
test_rotate-1_2221:
  build:
    cflags: "-Wc++-compat  -O2 -fno-ipa-icf -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-1.c'
    sources:
      binary: rotate-1.s
  group: GRPSERIAL
test_rotate-1_3224:
  build:
    cflags: "-std=gnu++98 -O2 -fno-ipa-icf -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-1.c'
    sources:
      binary: rotate-1.s
  group: GRPSERIAL
test_rotate-1_3225:
  build:
    cflags: "-std=gnu++11 -O2 -fno-ipa-icf -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-1.c'
    sources:
      binary: rotate-1.s
  group: GRPSERIAL
test_rotate-1_3226:
  build:
    cflags: "-std=gnu++14 -O2 -fno-ipa-icf -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-1.c'
    sources:
      binary: rotate-1.s
  group: GRPSERIAL
test_rotate-1_340:
  build:
    cflags: "-Wc++-compat  -O2 -fno-ipa-icf -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-1.c'
    sources:
      binary: rotate-1.s
  group: GRPSERIAL
test_rotate-1_729:
  build:
    cflags: "-Wc++-compat  -O2 -fno-ipa-icf -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-1.c'
    sources:
      binary: rotate-1.s
  group: GRPSERIAL
test_rotate-1a_1735:
  build:
    cflags: -std=gnu++98 -O2 -Wno-overflow
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-1a.c'
    sources:
      binary: ./rotate-1a.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-1a_1736:
  build:
    cflags: -std=gnu++11 -O2 -Wno-overflow
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-1a.c'
    sources:
      binary: ./rotate-1a.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-1a_1737:
  build:
    cflags: -std=gnu++14 -O2 -Wno-overflow
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-1a.c'
    sources:
      binary: ./rotate-1a.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-1a_2222:
  build:
    cflags: -Wc++-compat  -O2 -Wno-overflow
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-1a.c'
    sources:
      binary: ./rotate-1a.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-1a_3227:
  build:
    cflags: -std=gnu++98 -O2 -Wno-overflow
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-1a.c'
    sources:
      binary: ./rotate-1a.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-1a_3228:
  build:
    cflags: -std=gnu++11 -O2 -Wno-overflow
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-1a.c'
    sources:
      binary: ./rotate-1a.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-1a_3229:
  build:
    cflags: -std=gnu++14 -O2 -Wno-overflow
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-1a.c'
    sources:
      binary: ./rotate-1a.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-1a_341:
  build:
    cflags: -Wc++-compat  -O2 -Wno-overflow
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-1a.c'
    sources:
      binary: ./rotate-1a.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-1a_730:
  build:
    cflags: -Wc++-compat  -O2 -Wno-overflow
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-1a.c'
    sources:
      binary: ./rotate-1a.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-2_1738:
  build:
    cflags: "-std=gnu++98 -O2 -fno-ipa-icf -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-2.c'
    sources:
      binary: rotate-2.s
  group: GRPSERIAL
test_rotate-2_1739:
  build:
    cflags: "-std=gnu++11 -O2 -fno-ipa-icf -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-2.c'
    sources:
      binary: rotate-2.s
  group: GRPSERIAL
test_rotate-2_1740:
  build:
    cflags: "-std=gnu++14 -O2 -fno-ipa-icf -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-2.c'
    sources:
      binary: rotate-2.s
  group: GRPSERIAL
test_rotate-2_2223:
  build:
    cflags: "-Wc++-compat  -O2 -fno-ipa-icf -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-2.c'
    sources:
      binary: rotate-2.s
  group: GRPSERIAL
test_rotate-2_3230:
  build:
    cflags: "-std=gnu++98 -O2 -fno-ipa-icf -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-2.c'
    sources:
      binary: rotate-2.s
  group: GRPSERIAL
test_rotate-2_3231:
  build:
    cflags: "-std=gnu++11 -O2 -fno-ipa-icf -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-2.c'
    sources:
      binary: rotate-2.s
  group: GRPSERIAL
test_rotate-2_3232:
  build:
    cflags: "-std=gnu++14 -O2 -fno-ipa-icf -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-2.c'
    sources:
      binary: rotate-2.s
  group: GRPSERIAL
test_rotate-2_342:
  build:
    cflags: "-Wc++-compat  -O2 -fno-ipa-icf -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-2.c'
    sources:
      binary: rotate-2.s
  group: GRPSERIAL
test_rotate-2_731:
  build:
    cflags: "-Wc++-compat  -O2 -fno-ipa-icf -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-2.c'
    sources:
      binary: rotate-2.s
  group: GRPSERIAL
test_rotate-2a_1741:
  build:
    cflags: -std=gnu++98 -O2 -Wno-overflow
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-2a.c'
    sources:
      binary: ./rotate-2a.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-2a_1742:
  build:
    cflags: -std=gnu++11 -O2 -Wno-overflow
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-2a.c'
    sources:
      binary: ./rotate-2a.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-2a_1743:
  build:
    cflags: -std=gnu++14 -O2 -Wno-overflow
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-2a.c'
    sources:
      binary: ./rotate-2a.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-2a_2224:
  build:
    cflags: -Wc++-compat  -O2 -Wno-overflow
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-2a.c'
    sources:
      binary: ./rotate-2a.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-2a_3233:
  build:
    cflags: -std=gnu++98 -O2 -Wno-overflow
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-2a.c'
    sources:
      binary: ./rotate-2a.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-2a_3234:
  build:
    cflags: -std=gnu++11 -O2 -Wno-overflow
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-2a.c'
    sources:
      binary: ./rotate-2a.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-2a_3235:
  build:
    cflags: -std=gnu++14 -O2 -Wno-overflow
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-2a.c'
    sources:
      binary: ./rotate-2a.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-2a_343:
  build:
    cflags: -Wc++-compat  -O2 -Wno-overflow
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-2a.c'
    sources:
      binary: ./rotate-2a.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-2a_732:
  build:
    cflags: -Wc++-compat  -O2 -Wno-overflow
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-2a.c'
    sources:
      binary: ./rotate-2a.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-3_1744:
  build:
    cflags: "-std=gnu++98 -O2 -fno-ipa-icf -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-3.c'
    sources:
      binary: rotate-3.s
  group: GRPSERIAL
test_rotate-3_1745:
  build:
    cflags: "-std=gnu++11 -O2 -fno-ipa-icf -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-3.c'
    sources:
      binary: rotate-3.s
  group: GRPSERIAL
test_rotate-3_1746:
  build:
    cflags: "-std=gnu++14 -O2 -fno-ipa-icf -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-3.c'
    sources:
      binary: rotate-3.s
  group: GRPSERIAL
test_rotate-3_2225:
  build:
    cflags: "-Wc++-compat  -O2 -fno-ipa-icf -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-3.c'
    sources:
      binary: rotate-3.s
  group: GRPSERIAL
test_rotate-3_3236:
  build:
    cflags: "-std=gnu++98 -O2 -fno-ipa-icf -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-3.c'
    sources:
      binary: rotate-3.s
  group: GRPSERIAL
test_rotate-3_3237:
  build:
    cflags: "-std=gnu++11 -O2 -fno-ipa-icf -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-3.c'
    sources:
      binary: rotate-3.s
  group: GRPSERIAL
test_rotate-3_3238:
  build:
    cflags: "-std=gnu++14 -O2 -fno-ipa-icf -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-3.c'
    sources:
      binary: rotate-3.s
  group: GRPSERIAL
test_rotate-3_344:
  build:
    cflags: "-Wc++-compat  -O2 -fno-ipa-icf -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-3.c'
    sources:
      binary: rotate-3.s
  group: GRPSERIAL
test_rotate-3_733:
  build:
    cflags: "-Wc++-compat  -O2 -fno-ipa-icf -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-3.c'
    sources:
      binary: rotate-3.s
  group: GRPSERIAL
test_rotate-3a_1747:
  build:
    cflags: -std=gnu++98 -O2 -Wno-overflow
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-3a.c'
    sources:
      binary: ./rotate-3a.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-3a_1748:
  build:
    cflags: -std=gnu++11 -O2 -Wno-overflow
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-3a.c'
    sources:
      binary: ./rotate-3a.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-3a_1749:
  build:
    cflags: -std=gnu++14 -O2 -Wno-overflow
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-3a.c'
    sources:
      binary: ./rotate-3a.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-3a_2226:
  build:
    cflags: -Wc++-compat  -O2 -Wno-overflow
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-3a.c'
    sources:
      binary: ./rotate-3a.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-3a_3239:
  build:
    cflags: -std=gnu++98 -O2 -Wno-overflow
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-3a.c'
    sources:
      binary: ./rotate-3a.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-3a_3240:
  build:
    cflags: -std=gnu++11 -O2 -Wno-overflow
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-3a.c'
    sources:
      binary: ./rotate-3a.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-3a_3241:
  build:
    cflags: -std=gnu++14 -O2 -Wno-overflow
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-3a.c'
    sources:
      binary: ./rotate-3a.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-3a_345:
  build:
    cflags: -Wc++-compat  -O2 -Wno-overflow
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-3a.c'
    sources:
      binary: ./rotate-3a.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-3a_734:
  build:
    cflags: -Wc++-compat  -O2 -Wno-overflow
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-3a.c'
    sources:
      binary: ./rotate-3a.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-4_1750:
  build:
    cflags: "-std=gnu++98 -O2 -fno-ipa-icf -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-4.c'
    sources:
      binary: rotate-4.s
  group: GRPSERIAL
test_rotate-4_1751:
  build:
    cflags: "-std=gnu++11 -O2 -fno-ipa-icf -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-4.c'
    sources:
      binary: rotate-4.s
  group: GRPSERIAL
test_rotate-4_1752:
  build:
    cflags: "-std=gnu++14 -O2 -fno-ipa-icf -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-4.c'
    sources:
      binary: rotate-4.s
  group: GRPSERIAL
test_rotate-4_2227:
  build:
    cflags: "-Wc++-compat  -O2 -fno-ipa-icf -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-4.c'
    sources:
      binary: rotate-4.s
  group: GRPSERIAL
test_rotate-4_3242:
  build:
    cflags: "-std=gnu++98 -O2 -fno-ipa-icf -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-4.c'
    sources:
      binary: rotate-4.s
  group: GRPSERIAL
test_rotate-4_3243:
  build:
    cflags: "-std=gnu++11 -O2 -fno-ipa-icf -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-4.c'
    sources:
      binary: rotate-4.s
  group: GRPSERIAL
test_rotate-4_3244:
  build:
    cflags: "-std=gnu++14 -O2 -fno-ipa-icf -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-4.c'
    sources:
      binary: rotate-4.s
  group: GRPSERIAL
test_rotate-4_346:
  build:
    cflags: "-Wc++-compat  -O2 -fno-ipa-icf -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-4.c'
    sources:
      binary: rotate-4.s
  group: GRPSERIAL
test_rotate-4_735:
  build:
    cflags: "-Wc++-compat  -O2 -fno-ipa-icf -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-4.c'
    sources:
      binary: rotate-4.s
  group: GRPSERIAL
test_rotate-4a_1753:
  build:
    cflags: -std=gnu++98 -O2 -Wno-overflow
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-4a.c'
    sources:
      binary: ./rotate-4a.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-4a_1754:
  build:
    cflags: -std=gnu++11 -O2 -Wno-overflow
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-4a.c'
    sources:
      binary: ./rotate-4a.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-4a_1755:
  build:
    cflags: -std=gnu++14 -O2 -Wno-overflow
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-4a.c'
    sources:
      binary: ./rotate-4a.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-4a_2228:
  build:
    cflags: -Wc++-compat  -O2 -Wno-overflow
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-4a.c'
    sources:
      binary: ./rotate-4a.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-4a_3245:
  build:
    cflags: -std=gnu++98 -O2 -Wno-overflow
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-4a.c'
    sources:
      binary: ./rotate-4a.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-4a_3246:
  build:
    cflags: -std=gnu++11 -O2 -Wno-overflow
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-4a.c'
    sources:
      binary: ./rotate-4a.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-4a_3247:
  build:
    cflags: -std=gnu++14 -O2 -Wno-overflow
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-4a.c'
    sources:
      binary: ./rotate-4a.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-4a_347:
  build:
    cflags: -Wc++-compat  -O2 -Wno-overflow
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-4a.c'
    sources:
      binary: ./rotate-4a.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-4a_736:
  build:
    cflags: -Wc++-compat  -O2 -Wno-overflow
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-4a.c'
    sources:
      binary: ./rotate-4a.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-5_1756:
  build:
    cflags: -std=gnu++98 -O2
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-5.c'
    sources:
      binary: ./rotate-5.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-5_1757:
  build:
    cflags: -std=gnu++11 -O2
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-5.c'
    sources:
      binary: ./rotate-5.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-5_1758:
  build:
    cflags: -std=gnu++14 -O2
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-5.c'
    sources:
      binary: ./rotate-5.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-5_2229:
  build:
    cflags: -Wc++-compat  -O2
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-5.c'
    sources:
      binary: ./rotate-5.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-5_3248:
  build:
    cflags: -std=gnu++98 -O2
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-5.c'
    sources:
      binary: ./rotate-5.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-5_3249:
  build:
    cflags: -std=gnu++11 -O2
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-5.c'
    sources:
      binary: ./rotate-5.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-5_3250:
  build:
    cflags: -std=gnu++14 -O2
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-5.c'
    sources:
      binary: ./rotate-5.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-5_348:
  build:
    cflags: -Wc++-compat  -O2
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-5.c'
    sources:
      binary: ./rotate-5.exe
  group: GRPSERIAL
  run:
    cwd: .
test_rotate-5_737:
  build:
    cflags: -Wc++-compat  -O2
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/rotate-5.c'
    sources:
      binary: ./rotate-5.exe
  group: GRPSERIAL
  run:
    cwd: .
test_scal-to-vec1_1759:
  build:
    cflags: "-std=gnu++98 -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/scal-to-vec1.c'
    sources:
      binary: scal-to-vec1.s
  group: GRPSERIAL
  validate:
    match:
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("can\''t convert
          value to a vector|invalid operands")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("can\''t convert
          value to a vector|invalid operands")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("can\''t convert
          value to a vector|invalid operands")[^\n]*\n?)+'
test_scal-to-vec1_1760:
  build:
    cflags: "-std=gnu++11 -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/scal-to-vec1.c'
    sources:
      binary: scal-to-vec1.s
  group: GRPSERIAL
  validate:
    match:
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("can\''t convert
          value to a vector|invalid operands")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("can\''t convert
          value to a vector|invalid operands")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("can\''t convert
          value to a vector|invalid operands")[^\n]*\n?)+'
test_scal-to-vec1_1761:
  build:
    cflags: "-std=gnu++14 -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/scal-to-vec1.c'
    sources:
      binary: scal-to-vec1.s
  group: GRPSERIAL
  validate:
    match:
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("can\''t convert
          value to a vector|invalid operands")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("can\''t convert
          value to a vector|invalid operands")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("can\''t convert
          value to a vector|invalid operands")[^\n]*\n?)+'
test_scal-to-vec1_2230:
  build:
    cflags: "-Wc++-compat  -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/scal-to-vec1.c'
    sources:
      binary: scal-to-vec1.s
  group: GRPSERIAL
  validate:
    match:
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("can\''t convert
          value to a vector|invalid operands")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("can\''t convert
          value to a vector|invalid operands")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("can\''t convert
          value to a vector|invalid operands")[^\n]*\n?)+'
test_scal-to-vec1_3251:
  build:
    cflags: "-std=gnu++98 -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/scal-to-vec1.c'
    sources:
      binary: scal-to-vec1.s
  group: GRPSERIAL
  validate:
    match:
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("can\''t convert
          value to a vector|invalid operands")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("can\''t convert
          value to a vector|invalid operands")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("can\''t convert
          value to a vector|invalid operands")[^\n]*\n?)+'
test_scal-to-vec1_3252:
  build:
    cflags: "-std=gnu++11 -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/scal-to-vec1.c'
    sources:
      binary: scal-to-vec1.s
  group: GRPSERIAL
  validate:
    match:
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("can\''t convert
          value to a vector|invalid operands")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("can\''t convert
          value to a vector|invalid operands")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("can\''t convert
          value to a vector|invalid operands")[^\n]*\n?)+'
test_scal-to-vec1_3253:
  build:
    cflags: "-std=gnu++14 -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/scal-to-vec1.c'
    sources:
      binary: scal-to-vec1.s
  group: GRPSERIAL
  validate:
    match:
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("can\''t convert
          value to a vector|invalid operands")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("can\''t convert
          value to a vector|invalid operands")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("can\''t convert
          value to a vector|invalid operands")[^\n]*\n?)+'
test_scal-to-vec1_349:
  build:
    cflags: "-Wc++-compat  -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/scal-to-vec1.c'
    sources:
      binary: scal-to-vec1.s
  group: GRPSERIAL
  validate:
    match:
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("can\''t convert
          value to a vector|invalid operands")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("can\''t convert
          value to a vector|invalid operands")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("can\''t convert
          value to a vector|invalid operands")[^\n]*\n?)+'
test_scal-to-vec1_738:
  build:
    cflags: "-Wc++-compat  -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/scal-to-vec1.c'
    sources:
      binary: scal-to-vec1.s
  group: GRPSERIAL
  validate:
    match:
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion of
          scalar \\[^\\\\n\\]* to vector")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("can\''t convert
          value to a vector|invalid operands")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("can\''t convert
          value to a vector|invalid operands")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("can\''t convert
          value to a vector|invalid operands")[^\n]*\n?)+'
test_scal-to-vec2_1762:
  build:
    cflags: "-std=gnu++98 -msse2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/scal-to-vec2.c'
    sources:
      binary: scal-to-vec2.s
  group: GRPSERIAL
test_scal-to-vec2_1763:
  build:
    cflags: "-std=gnu++11 -msse2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/scal-to-vec2.c'
    sources:
      binary: scal-to-vec2.s
  group: GRPSERIAL
test_scal-to-vec2_1764:
  build:
    cflags: "-std=gnu++14 -msse2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/scal-to-vec2.c'
    sources:
      binary: scal-to-vec2.s
  group: GRPSERIAL
test_scal-to-vec2_2231:
  build:
    cflags: "-Wc++-compat  -msse2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/scal-to-vec2.c'
    sources:
      binary: scal-to-vec2.s
  group: GRPSERIAL
test_scal-to-vec2_3254:
  build:
    cflags: "-std=gnu++98 -msse2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/scal-to-vec2.c'
    sources:
      binary: scal-to-vec2.s
  group: GRPSERIAL
test_scal-to-vec2_3255:
  build:
    cflags: "-std=gnu++11 -msse2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/scal-to-vec2.c'
    sources:
      binary: scal-to-vec2.s
  group: GRPSERIAL
test_scal-to-vec2_3256:
  build:
    cflags: "-std=gnu++14 -msse2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/scal-to-vec2.c'
    sources:
      binary: scal-to-vec2.s
  group: GRPSERIAL
test_scal-to-vec2_350:
  build:
    cflags: "-Wc++-compat  -msse2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/scal-to-vec2.c'
    sources:
      binary: scal-to-vec2.s
  group: GRPSERIAL
test_scal-to-vec2_739:
  build:
    cflags: "-Wc++-compat  -msse2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/scal-to-vec2.c'
    sources:
      binary: scal-to-vec2.s
  group: GRPSERIAL
test_sizeof-array-argument_1765:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/sizeof-array-argument.c'
    sources:
      binary: sizeof-array-argument.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
test_sizeof-array-argument_1766:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/sizeof-array-argument.c'
    sources:
      binary: sizeof-array-argument.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
test_sizeof-array-argument_1767:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/sizeof-array-argument.c'
    sources:
      binary: sizeof-array-argument.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
test_sizeof-array-argument_2232:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/sizeof-array-argument.c'
    sources:
      binary: sizeof-array-argument.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
test_sizeof-array-argument_3257:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/sizeof-array-argument.c'
    sources:
      binary: sizeof-array-argument.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
test_sizeof-array-argument_3258:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/sizeof-array-argument.c'
    sources:
      binary: sizeof-array-argument.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
test_sizeof-array-argument_3259:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/sizeof-array-argument.c'
    sources:
      binary: sizeof-array-argument.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
test_sizeof-array-argument_351:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/sizeof-array-argument.c'
    sources:
      binary: sizeof-array-argument.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
test_sizeof-array-argument_740:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/sizeof-array-argument.c'
    sources:
      binary: sizeof-array-argument.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("on array function
          parameter")[^\n]*\n?)+'
test_taskloop-1_1768:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/taskloop-1.c'
    sources:
      binary: taskloop-1.s
  group: GRPSERIAL
test_taskloop-1_1769:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/taskloop-1.c'
    sources:
      binary: taskloop-1.s
  group: GRPSERIAL
test_taskloop-1_1770:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/taskloop-1.c'
    sources:
      binary: taskloop-1.s
  group: GRPSERIAL
test_taskloop-1_2233:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/taskloop-1.c'
    sources:
      binary: taskloop-1.s
  group: GRPSERIAL
test_taskloop-1_3260:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/taskloop-1.c'
    sources:
      binary: taskloop-1.s
  group: GRPSERIAL
test_taskloop-1_3261:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/taskloop-1.c'
    sources:
      binary: taskloop-1.s
  group: GRPSERIAL
test_taskloop-1_3262:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/taskloop-1.c'
    sources:
      binary: taskloop-1.s
  group: GRPSERIAL
test_taskloop-1_352:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/taskloop-1.c'
    sources:
      binary: taskloop-1.s
  group: GRPSERIAL
test_taskloop-1_741:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/taskloop-1.c'
    sources:
      binary: taskloop-1.s
  group: GRPSERIAL
test_transparent-union-1_1771:
  build:
    cflags: "-std=gnu++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/transparent-union-1.c'
    sources:
      binary: transparent-union-1.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
test_transparent-union-1_1772:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/transparent-union-1.c'
    sources:
      binary: transparent-union-1.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
test_transparent-union-1_1773:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/transparent-union-1.c'
    sources:
      binary: transparent-union-1.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
test_transparent-union-1_2234:
  build:
    cflags: "-Wc++-compat  -Wno-c++-compat\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/transparent-union-1.c'
    sources:
      binary: transparent-union-1.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
test_transparent-union-1_3263:
  build:
    cflags: "-std=gnu++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/transparent-union-1.c'
    sources:
      binary: transparent-union-1.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
test_transparent-union-1_3264:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/transparent-union-1.c'
    sources:
      binary: transparent-union-1.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
test_transparent-union-1_3265:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/transparent-union-1.c'
    sources:
      binary: transparent-union-1.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
test_transparent-union-1_353:
  build:
    cflags: "-Wc++-compat  -Wno-c++-compat\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/transparent-union-1.c'
    sources:
      binary: transparent-union-1.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
test_transparent-union-1_742:
  build:
    cflags: "-Wc++-compat  -Wno-c++-compat\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/transparent-union-1.c'
    sources:
      binary: transparent-union-1.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
test_uninit-17_1774:
  build:
    cflags: "-std=gnu++98 -O2 -Wuninitialized -fno-ivopts\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-17.c'
    sources:
      binary: uninit-17.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("may be used uninitialized")[^\n]*\n?)+'
test_uninit-17_1775:
  build:
    cflags: "-std=gnu++11 -O2 -Wuninitialized -fno-ivopts\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-17.c'
    sources:
      binary: uninit-17.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("may be used uninitialized")[^\n]*\n?)+'
test_uninit-17_1776:
  build:
    cflags: "-std=gnu++14 -O2 -Wuninitialized -fno-ivopts\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-17.c'
    sources:
      binary: uninit-17.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("may be used uninitialized")[^\n]*\n?)+'
test_uninit-17_2235:
  build:
    cflags: "-Wc++-compat  -O2 -Wuninitialized -fno-ivopts\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-17.c'
    sources:
      binary: uninit-17.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("may be used uninitialized")[^\n]*\n?)+'
test_uninit-17_3266:
  build:
    cflags: "-std=gnu++98 -O2 -Wuninitialized -fno-ivopts\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-17.c'
    sources:
      binary: uninit-17.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("may be used uninitialized")[^\n]*\n?)+'
test_uninit-17_3267:
  build:
    cflags: "-std=gnu++11 -O2 -Wuninitialized -fno-ivopts\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-17.c'
    sources:
      binary: uninit-17.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("may be used uninitialized")[^\n]*\n?)+'
test_uninit-17_3268:
  build:
    cflags: "-std=gnu++14 -O2 -Wuninitialized -fno-ivopts\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-17.c'
    sources:
      binary: uninit-17.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("may be used uninitialized")[^\n]*\n?)+'
test_uninit-17_354:
  build:
    cflags: "-Wc++-compat  -O2 -Wuninitialized -fno-ivopts\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-17.c'
    sources:
      binary: uninit-17.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("may be used uninitialized")[^\n]*\n?)+'
test_uninit-17_743:
  build:
    cflags: "-Wc++-compat  -O2 -Wuninitialized -fno-ivopts\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-17.c'
    sources:
      binary: uninit-17.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("may be used uninitialized")[^\n]*\n?)+'
test_uninit-D-O0_1777:
  build:
    cflags: "-std=gnu++98 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-D-O0.c'
    sources:
      binary: uninit-D-O0.s
  group: GRPSERIAL
test_uninit-D-O0_1778:
  build:
    cflags: "-std=gnu++11 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-D-O0.c'
    sources:
      binary: uninit-D-O0.s
  group: GRPSERIAL
test_uninit-D-O0_1779:
  build:
    cflags: "-std=gnu++14 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-D-O0.c'
    sources:
      binary: uninit-D-O0.s
  group: GRPSERIAL
test_uninit-D-O0_2236:
  build:
    cflags: "-Wc++-compat  -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-D-O0.c'
    sources:
      binary: uninit-D-O0.s
  group: GRPSERIAL
test_uninit-D-O0_3269:
  build:
    cflags: "-std=gnu++98 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-D-O0.c'
    sources:
      binary: uninit-D-O0.s
  group: GRPSERIAL
test_uninit-D-O0_3270:
  build:
    cflags: "-std=gnu++11 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-D-O0.c'
    sources:
      binary: uninit-D-O0.s
  group: GRPSERIAL
test_uninit-D-O0_3271:
  build:
    cflags: "-std=gnu++14 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-D-O0.c'
    sources:
      binary: uninit-D-O0.s
  group: GRPSERIAL
test_uninit-D-O0_355:
  build:
    cflags: "-Wc++-compat  -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-D-O0.c'
    sources:
      binary: uninit-D-O0.s
  group: GRPSERIAL
test_uninit-D-O0_744:
  build:
    cflags: "-Wc++-compat  -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-D-O0.c'
    sources:
      binary: uninit-D-O0.s
  group: GRPSERIAL
test_uninit-D_1780:
  build:
    cflags: "-std=gnu++98 -O -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-D.c'
    sources:
      binary: uninit-D.s
  group: GRPSERIAL
test_uninit-D_1781:
  build:
    cflags: "-std=gnu++11 -O -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-D.c'
    sources:
      binary: uninit-D.s
  group: GRPSERIAL
test_uninit-D_1782:
  build:
    cflags: "-std=gnu++14 -O -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-D.c'
    sources:
      binary: uninit-D.s
  group: GRPSERIAL
test_uninit-D_2237:
  build:
    cflags: "-Wc++-compat  -O -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-D.c'
    sources:
      binary: uninit-D.s
  group: GRPSERIAL
test_uninit-D_3272:
  build:
    cflags: "-std=gnu++98 -O -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-D.c'
    sources:
      binary: uninit-D.s
  group: GRPSERIAL
test_uninit-D_3273:
  build:
    cflags: "-std=gnu++11 -O -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-D.c'
    sources:
      binary: uninit-D.s
  group: GRPSERIAL
test_uninit-D_3274:
  build:
    cflags: "-std=gnu++14 -O -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-D.c'
    sources:
      binary: uninit-D.s
  group: GRPSERIAL
test_uninit-D_356:
  build:
    cflags: "-Wc++-compat  -O -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-D.c'
    sources:
      binary: uninit-D.s
  group: GRPSERIAL
test_uninit-D_745:
  build:
    cflags: "-Wc++-compat  -O -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-D.c'
    sources:
      binary: uninit-D.s
  group: GRPSERIAL
test_uninit-E-O0_1783:
  build:
    cflags: "-std=gnu++98 -Wuninitialized -Winit-self\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-E-O0.c'
    sources:
      binary: uninit-E-O0.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("i")[^\n]*\n?)+'
test_uninit-E-O0_1784:
  build:
    cflags: "-std=gnu++11 -Wuninitialized -Winit-self\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-E-O0.c'
    sources:
      binary: uninit-E-O0.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("i")[^\n]*\n?)+'
test_uninit-E-O0_1785:
  build:
    cflags: "-std=gnu++14 -Wuninitialized -Winit-self\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-E-O0.c'
    sources:
      binary: uninit-E-O0.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("i")[^\n]*\n?)+'
test_uninit-E-O0_2238:
  build:
    cflags: "-Wc++-compat  -Wuninitialized -Winit-self\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-E-O0.c'
    sources:
      binary: uninit-E-O0.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("i")[^\n]*\n?)+'
test_uninit-E-O0_3275:
  build:
    cflags: "-std=gnu++98 -Wuninitialized -Winit-self\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-E-O0.c'
    sources:
      binary: uninit-E-O0.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("i")[^\n]*\n?)+'
test_uninit-E-O0_3276:
  build:
    cflags: "-std=gnu++11 -Wuninitialized -Winit-self\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-E-O0.c'
    sources:
      binary: uninit-E-O0.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("i")[^\n]*\n?)+'
test_uninit-E-O0_3277:
  build:
    cflags: "-std=gnu++14 -Wuninitialized -Winit-self\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-E-O0.c'
    sources:
      binary: uninit-E-O0.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("i")[^\n]*\n?)+'
test_uninit-E-O0_357:
  build:
    cflags: "-Wc++-compat  -Wuninitialized -Winit-self\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-E-O0.c'
    sources:
      binary: uninit-E-O0.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("i")[^\n]*\n?)+'
test_uninit-E-O0_746:
  build:
    cflags: "-Wc++-compat  -Wuninitialized -Winit-self\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-E-O0.c'
    sources:
      binary: uninit-E-O0.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("i")[^\n]*\n?)+'
test_uninit-E_1786:
  build:
    cflags: "-std=gnu++98 -O -Wuninitialized -Winit-self\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-E.c'
    sources:
      binary: uninit-E.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("i")[^\n]*\n?)+'
test_uninit-E_1787:
  build:
    cflags: "-std=gnu++11 -O -Wuninitialized -Winit-self\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-E.c'
    sources:
      binary: uninit-E.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("i")[^\n]*\n?)+'
test_uninit-E_1788:
  build:
    cflags: "-std=gnu++14 -O -Wuninitialized -Winit-self\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-E.c'
    sources:
      binary: uninit-E.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("i")[^\n]*\n?)+'
test_uninit-E_2239:
  build:
    cflags: "-Wc++-compat  -O -Wuninitialized -Winit-self\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-E.c'
    sources:
      binary: uninit-E.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("i")[^\n]*\n?)+'
test_uninit-E_3278:
  build:
    cflags: "-std=gnu++98 -O -Wuninitialized -Winit-self\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-E.c'
    sources:
      binary: uninit-E.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("i")[^\n]*\n?)+'
test_uninit-E_3279:
  build:
    cflags: "-std=gnu++11 -O -Wuninitialized -Winit-self\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-E.c'
    sources:
      binary: uninit-E.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("i")[^\n]*\n?)+'
test_uninit-E_3280:
  build:
    cflags: "-std=gnu++14 -O -Wuninitialized -Winit-self\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-E.c'
    sources:
      binary: uninit-E.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("i")[^\n]*\n?)+'
test_uninit-E_358:
  build:
    cflags: "-Wc++-compat  -O -Wuninitialized -Winit-self\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-E.c'
    sources:
      binary: uninit-E.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("i")[^\n]*\n?)+'
test_uninit-E_747:
  build:
    cflags: "-Wc++-compat  -O -Wuninitialized -Winit-self\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-E.c'
    sources:
      binary: uninit-E.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("i")[^\n]*\n?)+'
test_uninit-F-O0_1789:
  build:
    cflags: "-std=gnu++98 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-F-O0.c'
    sources:
      binary: uninit-F-O0.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("i")[^\n]*\n?)+'
test_uninit-F-O0_1790:
  build:
    cflags: "-std=gnu++11 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-F-O0.c'
    sources:
      binary: uninit-F-O0.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("i")[^\n]*\n?)+'
test_uninit-F-O0_1791:
  build:
    cflags: "-std=gnu++14 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-F-O0.c'
    sources:
      binary: uninit-F-O0.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("i")[^\n]*\n?)+'
test_uninit-F-O0_2240:
  build:
    cflags: "-Wc++-compat  -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-F-O0.c'
    sources:
      binary: uninit-F-O0.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("i")[^\n]*\n?)+'
test_uninit-F-O0_3281:
  build:
    cflags: "-std=gnu++98 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-F-O0.c'
    sources:
      binary: uninit-F-O0.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("i")[^\n]*\n?)+'
test_uninit-F-O0_3282:
  build:
    cflags: "-std=gnu++11 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-F-O0.c'
    sources:
      binary: uninit-F-O0.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("i")[^\n]*\n?)+'
test_uninit-F-O0_3283:
  build:
    cflags: "-std=gnu++14 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-F-O0.c'
    sources:
      binary: uninit-F-O0.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("i")[^\n]*\n?)+'
test_uninit-F-O0_359:
  build:
    cflags: "-Wc++-compat  -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-F-O0.c'
    sources:
      binary: uninit-F-O0.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("i")[^\n]*\n?)+'
test_uninit-F-O0_748:
  build:
    cflags: "-Wc++-compat  -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-F-O0.c'
    sources:
      binary: uninit-F-O0.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("i")[^\n]*\n?)+'
test_uninit-F_1792:
  build:
    cflags: "-std=gnu++98 -O -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-F.c'
    sources:
      binary: uninit-F.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("i")[^\n]*\n?)+'
test_uninit-F_1793:
  build:
    cflags: "-std=gnu++11 -O -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-F.c'
    sources:
      binary: uninit-F.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("i")[^\n]*\n?)+'
test_uninit-F_1794:
  build:
    cflags: "-std=gnu++14 -O -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-F.c'
    sources:
      binary: uninit-F.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("i")[^\n]*\n?)+'
test_uninit-F_2241:
  build:
    cflags: "-Wc++-compat  -O -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-F.c'
    sources:
      binary: uninit-F.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("i")[^\n]*\n?)+'
test_uninit-F_3284:
  build:
    cflags: "-std=gnu++98 -O -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-F.c'
    sources:
      binary: uninit-F.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("i")[^\n]*\n?)+'
test_uninit-F_3285:
  build:
    cflags: "-std=gnu++11 -O -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-F.c'
    sources:
      binary: uninit-F.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("i")[^\n]*\n?)+'
test_uninit-F_3286:
  build:
    cflags: "-std=gnu++14 -O -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-F.c'
    sources:
      binary: uninit-F.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("i")[^\n]*\n?)+'
test_uninit-F_360:
  build:
    cflags: "-Wc++-compat  -O -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-F.c'
    sources:
      binary: uninit-F.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("i")[^\n]*\n?)+'
test_uninit-F_749:
  build:
    cflags: "-Wc++-compat  -O -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-F.c'
    sources:
      binary: uninit-F.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("i")[^\n]*\n?)+'
test_uninit-G-O0_1795:
  build:
    cflags: "-std=gnu++98 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-G-O0.c'
    sources:
      binary: uninit-G-O0.s
  group: GRPSERIAL
test_uninit-G-O0_1796:
  build:
    cflags: "-std=gnu++11 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-G-O0.c'
    sources:
      binary: uninit-G-O0.s
  group: GRPSERIAL
test_uninit-G-O0_1797:
  build:
    cflags: "-std=gnu++14 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-G-O0.c'
    sources:
      binary: uninit-G-O0.s
  group: GRPSERIAL
test_uninit-G-O0_2242:
  build:
    cflags: "-Wc++-compat  -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-G-O0.c'
    sources:
      binary: uninit-G-O0.s
  group: GRPSERIAL
test_uninit-G-O0_3287:
  build:
    cflags: "-std=gnu++98 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-G-O0.c'
    sources:
      binary: uninit-G-O0.s
  group: GRPSERIAL
test_uninit-G-O0_3288:
  build:
    cflags: "-std=gnu++11 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-G-O0.c'
    sources:
      binary: uninit-G-O0.s
  group: GRPSERIAL
test_uninit-G-O0_3289:
  build:
    cflags: "-std=gnu++14 -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-G-O0.c'
    sources:
      binary: uninit-G-O0.s
  group: GRPSERIAL
test_uninit-G-O0_361:
  build:
    cflags: "-Wc++-compat  -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-G-O0.c'
    sources:
      binary: uninit-G-O0.s
  group: GRPSERIAL
test_uninit-G-O0_750:
  build:
    cflags: "-Wc++-compat  -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-G-O0.c'
    sources:
      binary: uninit-G-O0.s
  group: GRPSERIAL
test_uninit-G_1798:
  build:
    cflags: "-std=gnu++98 -O -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-G.c'
    sources:
      binary: uninit-G.s
  group: GRPSERIAL
test_uninit-G_1799:
  build:
    cflags: "-std=gnu++11 -O -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-G.c'
    sources:
      binary: uninit-G.s
  group: GRPSERIAL
test_uninit-G_1800:
  build:
    cflags: "-std=gnu++14 -O -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-G.c'
    sources:
      binary: uninit-G.s
  group: GRPSERIAL
test_uninit-G_2243:
  build:
    cflags: "-Wc++-compat  -O -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-G.c'
    sources:
      binary: uninit-G.s
  group: GRPSERIAL
test_uninit-G_3290:
  build:
    cflags: "-std=gnu++98 -O -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-G.c'
    sources:
      binary: uninit-G.s
  group: GRPSERIAL
test_uninit-G_3291:
  build:
    cflags: "-std=gnu++11 -O -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-G.c'
    sources:
      binary: uninit-G.s
  group: GRPSERIAL
test_uninit-G_3292:
  build:
    cflags: "-std=gnu++14 -O -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-G.c'
    sources:
      binary: uninit-G.s
  group: GRPSERIAL
test_uninit-G_362:
  build:
    cflags: "-Wc++-compat  -O -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-G.c'
    sources:
      binary: uninit-G.s
  group: GRPSERIAL
test_uninit-G_751:
  build:
    cflags: "-Wc++-compat  -O -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-G.c'
    sources:
      binary: uninit-G.s
  group: GRPSERIAL
test_uninit-pr51010_1801:
  build:
    cflags: "-std=gnu++98 -O -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-pr51010.c'
    sources:
      binary: uninit-pr51010.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("a\\\\\\[<unknown>\\\\\\].
          is used uninitialized")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("a\\\\\\[j\\\\\\]. is
          used uninitialized")[^\n]*\n?)+'
test_uninit-pr51010_1802:
  build:
    cflags: "-std=gnu++11 -O -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-pr51010.c'
    sources:
      binary: uninit-pr51010.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("a\\\\\\[<unknown>\\\\\\].
          is used uninitialized")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("a\\\\\\[j\\\\\\]. is
          used uninitialized")[^\n]*\n?)+'
test_uninit-pr51010_1803:
  build:
    cflags: "-std=gnu++14 -O -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-pr51010.c'
    sources:
      binary: uninit-pr51010.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("a\\\\\\[<unknown>\\\\\\].
          is used uninitialized")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("a\\\\\\[j\\\\\\]. is
          used uninitialized")[^\n]*\n?)+'
test_uninit-pr51010_2244:
  build:
    cflags: "-Wc++-compat  -O -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-pr51010.c'
    sources:
      binary: uninit-pr51010.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("a\\\\\\[<unknown>\\\\\\].
          is used uninitialized")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("a\\\\\\[j\\\\\\]. is
          used uninitialized")[^\n]*\n?)+'
test_uninit-pr51010_3293:
  build:
    cflags: "-std=gnu++98 -O -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-pr51010.c'
    sources:
      binary: uninit-pr51010.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("a\\\\\\[<unknown>\\\\\\].
          is used uninitialized")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("a\\\\\\[j\\\\\\]. is
          used uninitialized")[^\n]*\n?)+'
test_uninit-pr51010_3294:
  build:
    cflags: "-std=gnu++11 -O -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-pr51010.c'
    sources:
      binary: uninit-pr51010.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("a\\\\\\[<unknown>\\\\\\].
          is used uninitialized")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("a\\\\\\[j\\\\\\]. is
          used uninitialized")[^\n]*\n?)+'
test_uninit-pr51010_3295:
  build:
    cflags: "-std=gnu++14 -O -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-pr51010.c'
    sources:
      binary: uninit-pr51010.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("a\\\\\\[<unknown>\\\\\\].
          is used uninitialized")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("a\\\\\\[j\\\\\\]. is
          used uninitialized")[^\n]*\n?)+'
test_uninit-pr51010_363:
  build:
    cflags: "-Wc++-compat  -O -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-pr51010.c'
    sources:
      binary: uninit-pr51010.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("a\\\\\\[<unknown>\\\\\\].
          is used uninitialized")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("a\\\\\\[j\\\\\\]. is
          used uninitialized")[^\n]*\n?)+'
test_uninit-pr51010_752:
  build:
    cflags: "-Wc++-compat  -O -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/uninit-pr51010.c'
    sources:
      binary: uninit-pr51010.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("a\\\\\\[<unknown>\\\\\\].
          is used uninitialized")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("a\\\\\\[j\\\\\\]. is
          used uninitialized")[^\n]*\n?)+'
test_va-arg-va-list-type_1804:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/va-arg-va-list-type.c'
    sources:
      binary: va-arg-va-list-type.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("first argument
          to \''va_arg\'' not of type \''va_list\''")[^\n]*\n?)+'
test_va-arg-va-list-type_1805:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/va-arg-va-list-type.c'
    sources:
      binary: va-arg-va-list-type.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("first argument
          to \''va_arg\'' not of type \''va_list\''")[^\n]*\n?)+'
test_va-arg-va-list-type_1806:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/va-arg-va-list-type.c'
    sources:
      binary: va-arg-va-list-type.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("first argument
          to \''va_arg\'' not of type \''va_list\''")[^\n]*\n?)+'
test_va-arg-va-list-type_2245:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/va-arg-va-list-type.c'
    sources:
      binary: va-arg-va-list-type.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("first argument
          to \''va_arg\'' not of type \''va_list\''")[^\n]*\n?)+'
test_va-arg-va-list-type_3296:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/va-arg-va-list-type.c'
    sources:
      binary: va-arg-va-list-type.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("first argument
          to \''va_arg\'' not of type \''va_list\''")[^\n]*\n?)+'
test_va-arg-va-list-type_3297:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/va-arg-va-list-type.c'
    sources:
      binary: va-arg-va-list-type.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("first argument
          to \''va_arg\'' not of type \''va_list\''")[^\n]*\n?)+'
test_va-arg-va-list-type_3298:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/va-arg-va-list-type.c'
    sources:
      binary: va-arg-va-list-type.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("first argument
          to \''va_arg\'' not of type \''va_list\''")[^\n]*\n?)+'
test_va-arg-va-list-type_364:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/va-arg-va-list-type.c'
    sources:
      binary: va-arg-va-list-type.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("first argument
          to \''va_arg\'' not of type \''va_list\''")[^\n]*\n?)+'
test_va-arg-va-list-type_753:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/va-arg-va-list-type.c'
    sources:
      binary: va-arg-va-list-type.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("first argument
          to \''va_arg\'' not of type \''va_list\''")[^\n]*\n?)+'
test_vector-1_1807:
  build:
    cflags: "-std=gnu++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-1.c'
    sources:
      binary: vector-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_vector-1_1808:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-1.c'
    sources:
      binary: vector-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_vector-1_1809:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-1.c'
    sources:
      binary: vector-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_vector-1_2246:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-1.c'
    sources:
      binary: vector-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_vector-1_3299:
  build:
    cflags: "-std=gnu++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-1.c'
    sources:
      binary: vector-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_vector-1_3300:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-1.c'
    sources:
      binary: vector-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_vector-1_3301:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-1.c'
    sources:
      binary: vector-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_vector-1_365:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-1.c'
    sources:
      binary: vector-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_vector-1_754:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-1.c'
    sources:
      binary: vector-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_vector-2_1810:
  build:
    cflags: "-std=gnu++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-2.c'
    sources:
      binary: vector-2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_vector-2_1811:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-2.c'
    sources:
      binary: vector-2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_vector-2_1812:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-2.c'
    sources:
      binary: vector-2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_vector-2_2247:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-2.c'
    sources:
      binary: vector-2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_vector-2_3302:
  build:
    cflags: "-std=gnu++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-2.c'
    sources:
      binary: vector-2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_vector-2_3303:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-2.c'
    sources:
      binary: vector-2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_vector-2_3304:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-2.c'
    sources:
      binary: vector-2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_vector-2_366:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-2.c'
    sources:
      binary: vector-2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_vector-2_755:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-2.c'
    sources:
      binary: vector-2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_vector-3_1813:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-3.c'
    sources:
      binary: vector-3.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_vector-3_1814:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-3.c'
    sources:
      binary: vector-3.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_vector-3_1815:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-3.c'
    sources:
      binary: vector-3.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_vector-3_2248:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-3.c'
    sources:
      binary: vector-3.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_vector-3_3305:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-3.c'
    sources:
      binary: vector-3.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_vector-3_3306:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-3.c'
    sources:
      binary: vector-3.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_vector-3_3307:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-3.c'
    sources:
      binary: vector-3.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_vector-3_367:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-3.c'
    sources:
      binary: vector-3.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_vector-3_756:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-3.c'
    sources:
      binary: vector-3.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_vector-4_1816:
  build:
    cflags: "-std=gnu++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-4.c'
    sources:
      binary: vector-4.s
  group: GRPSERIAL
test_vector-4_1817:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-4.c'
    sources:
      binary: vector-4.s
  group: GRPSERIAL
test_vector-4_1818:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-4.c'
    sources:
      binary: vector-4.s
  group: GRPSERIAL
test_vector-4_2249:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-4.c'
    sources:
      binary: vector-4.s
  group: GRPSERIAL
test_vector-4_3308:
  build:
    cflags: "-std=gnu++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-4.c'
    sources:
      binary: vector-4.s
  group: GRPSERIAL
test_vector-4_3309:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-4.c'
    sources:
      binary: vector-4.s
  group: GRPSERIAL
test_vector-4_3310:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-4.c'
    sources:
      binary: vector-4.s
  group: GRPSERIAL
test_vector-4_368:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-4.c'
    sources:
      binary: vector-4.s
  group: GRPSERIAL
test_vector-4_757:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-4.c'
    sources:
      binary: vector-4.s
  group: GRPSERIAL
test_vector-compare-1_1819:
  build:
    cflags: "-std=gnu++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-compare-1.c'
    sources:
      binary: vector-compare-1.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("comparing vectors
          with different element types")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning to type|cannot convert")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("comparing vectors
          with different number of elements")[^\n]*\n?)+'
test_vector-compare-1_1820:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-compare-1.c'
    sources:
      binary: vector-compare-1.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("comparing vectors
          with different element types")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning to type|cannot convert")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("comparing vectors
          with different number of elements")[^\n]*\n?)+'
test_vector-compare-1_1821:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-compare-1.c'
    sources:
      binary: vector-compare-1.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("comparing vectors
          with different element types")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning to type|cannot convert")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("comparing vectors
          with different number of elements")[^\n]*\n?)+'
test_vector-compare-1_2250:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-compare-1.c'
    sources:
      binary: vector-compare-1.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("comparing vectors
          with different element types")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning to type|cannot convert")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("comparing vectors
          with different number of elements")[^\n]*\n?)+'
test_vector-compare-1_3311:
  build:
    cflags: "-std=gnu++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-compare-1.c'
    sources:
      binary: vector-compare-1.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("comparing vectors
          with different element types")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning to type|cannot convert")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("comparing vectors
          with different number of elements")[^\n]*\n?)+'
test_vector-compare-1_3312:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-compare-1.c'
    sources:
      binary: vector-compare-1.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("comparing vectors
          with different element types")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning to type|cannot convert")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("comparing vectors
          with different number of elements")[^\n]*\n?)+'
test_vector-compare-1_3313:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-compare-1.c'
    sources:
      binary: vector-compare-1.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("comparing vectors
          with different element types")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning to type|cannot convert")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("comparing vectors
          with different number of elements")[^\n]*\n?)+'
test_vector-compare-1_369:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-compare-1.c'
    sources:
      binary: vector-compare-1.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("comparing vectors
          with different element types")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning to type|cannot convert")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("comparing vectors
          with different number of elements")[^\n]*\n?)+'
test_vector-compare-1_758:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-compare-1.c'
    sources:
      binary: vector-compare-1.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("comparing vectors
          with different element types")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning to type|cannot convert")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("comparing vectors
          with different number of elements")[^\n]*\n?)+'
test_vector-compare-2_1822:
  build:
    cflags: "-std=gnu++98 -msse2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-compare-2.c'
    sources:
      binary: vector-compare-2.s
  group: GRPSERIAL
test_vector-compare-2_1823:
  build:
    cflags: "-std=gnu++11 -msse2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-compare-2.c'
    sources:
      binary: vector-compare-2.s
  group: GRPSERIAL
test_vector-compare-2_1824:
  build:
    cflags: "-std=gnu++14 -msse2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-compare-2.c'
    sources:
      binary: vector-compare-2.s
  group: GRPSERIAL
test_vector-compare-2_2251:
  build:
    cflags: "-Wc++-compat  -msse2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-compare-2.c'
    sources:
      binary: vector-compare-2.s
  group: GRPSERIAL
test_vector-compare-2_3314:
  build:
    cflags: "-std=gnu++98 -msse2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-compare-2.c'
    sources:
      binary: vector-compare-2.s
  group: GRPSERIAL
test_vector-compare-2_3315:
  build:
    cflags: "-std=gnu++11 -msse2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-compare-2.c'
    sources:
      binary: vector-compare-2.s
  group: GRPSERIAL
test_vector-compare-2_3316:
  build:
    cflags: "-std=gnu++14 -msse2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-compare-2.c'
    sources:
      binary: vector-compare-2.s
  group: GRPSERIAL
test_vector-compare-2_370:
  build:
    cflags: "-Wc++-compat  -msse2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-compare-2.c'
    sources:
      binary: vector-compare-2.s
  group: GRPSERIAL
test_vector-compare-2_759:
  build:
    cflags: "-Wc++-compat  -msse2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-compare-2.c'
    sources:
      binary: vector-compare-2.s
  group: GRPSERIAL
test_vector-compare-3_1825:
  build:
    cflags: "-std=gnu++98 -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-compare-3.c'
    sources:
      binary: vector-compare-3.s
  group: GRPSERIAL
test_vector-compare-3_1826:
  build:
    cflags: "-std=gnu++11 -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-compare-3.c'
    sources:
      binary: vector-compare-3.s
  group: GRPSERIAL
test_vector-compare-3_1827:
  build:
    cflags: "-std=gnu++14 -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-compare-3.c'
    sources:
      binary: vector-compare-3.s
  group: GRPSERIAL
test_vector-compare-3_2252:
  build:
    cflags: "-Wc++-compat  -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-compare-3.c'
    sources:
      binary: vector-compare-3.s
  group: GRPSERIAL
test_vector-compare-3_3317:
  build:
    cflags: "-std=gnu++98 -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-compare-3.c'
    sources:
      binary: vector-compare-3.s
  group: GRPSERIAL
test_vector-compare-3_3318:
  build:
    cflags: "-std=gnu++11 -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-compare-3.c'
    sources:
      binary: vector-compare-3.s
  group: GRPSERIAL
test_vector-compare-3_3319:
  build:
    cflags: "-std=gnu++14 -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-compare-3.c'
    sources:
      binary: vector-compare-3.s
  group: GRPSERIAL
test_vector-compare-3_371:
  build:
    cflags: "-Wc++-compat  -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-compare-3.c'
    sources:
      binary: vector-compare-3.s
  group: GRPSERIAL
test_vector-compare-3_760:
  build:
    cflags: "-Wc++-compat  -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-compare-3.c'
    sources:
      binary: vector-compare-3.s
  group: GRPSERIAL
test_vector-compare-4_1828:
  build:
    cflags: "-std=gnu++98 -Wsign-compare -Wno-psabi\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-compare-4.c'
    sources:
      binary: vector-compare-4.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
test_vector-compare-4_1829:
  build:
    cflags: "-std=gnu++11 -Wsign-compare -Wno-psabi\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-compare-4.c'
    sources:
      binary: vector-compare-4.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
test_vector-compare-4_1830:
  build:
    cflags: "-std=gnu++14 -Wsign-compare -Wno-psabi\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-compare-4.c'
    sources:
      binary: vector-compare-4.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
test_vector-compare-4_2253:
  build:
    cflags: "-Wc++-compat  -Wsign-compare -Wno-psabi\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-compare-4.c'
    sources:
      binary: vector-compare-4.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
test_vector-compare-4_3320:
  build:
    cflags: "-std=gnu++98 -Wsign-compare -Wno-psabi\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-compare-4.c'
    sources:
      binary: vector-compare-4.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
test_vector-compare-4_3321:
  build:
    cflags: "-std=gnu++11 -Wsign-compare -Wno-psabi\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-compare-4.c'
    sources:
      binary: vector-compare-4.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
test_vector-compare-4_3322:
  build:
    cflags: "-std=gnu++14 -Wsign-compare -Wno-psabi\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-compare-4.c'
    sources:
      binary: vector-compare-4.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
test_vector-compare-4_372:
  build:
    cflags: "-Wc++-compat  -Wsign-compare -Wno-psabi\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-compare-4.c'
    sources:
      binary: vector-compare-4.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
test_vector-compare-4_761:
  build:
    cflags: "-Wc++-compat  -Wsign-compare -Wno-psabi\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-compare-4.c'
    sources:
      binary: vector-compare-4.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("comparison between
          types")[^\n]*\n?)+'
test_vector-init-1_1831:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-init-1.c'
    sources:
      binary: vector-init-1.s
  group: GRPSERIAL
test_vector-init-1_1832:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-init-1.c'
    sources:
      binary: vector-init-1.s
  group: GRPSERIAL
test_vector-init-1_1833:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-init-1.c'
    sources:
      binary: vector-init-1.s
  group: GRPSERIAL
test_vector-init-1_2254:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-init-1.c'
    sources:
      binary: vector-init-1.s
  group: GRPSERIAL
test_vector-init-1_3323:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-init-1.c'
    sources:
      binary: vector-init-1.s
  group: GRPSERIAL
test_vector-init-1_3324:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-init-1.c'
    sources:
      binary: vector-init-1.s
  group: GRPSERIAL
test_vector-init-1_3325:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-init-1.c'
    sources:
      binary: vector-init-1.s
  group: GRPSERIAL
test_vector-init-1_373:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-init-1.c'
    sources:
      binary: vector-init-1.s
  group: GRPSERIAL
test_vector-init-1_762:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-init-1.c'
    sources:
      binary: vector-init-1.s
  group: GRPSERIAL
test_vector-init-2_1834:
  build:
    cflags: -std=c++98
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-init-2.c'
    sources:
      binary: ./vector-init-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_vector-init-2_1835:
  build:
    cflags: -std=c++11
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-init-2.c'
    sources:
      binary: ./vector-init-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_vector-init-2_1836:
  build:
    cflags: -std=c++14
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-init-2.c'
    sources:
      binary: ./vector-init-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_vector-init-2_2255:
  build:
    cflags: -Wc++-compat
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-init-2.c'
    sources:
      binary: ./vector-init-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_vector-init-2_3326:
  build:
    cflags: -std=c++98
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-init-2.c'
    sources:
      binary: ./vector-init-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_vector-init-2_3327:
  build:
    cflags: -std=c++11
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-init-2.c'
    sources:
      binary: ./vector-init-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_vector-init-2_3328:
  build:
    cflags: -std=c++14
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-init-2.c'
    sources:
      binary: ./vector-init-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_vector-init-2_374:
  build:
    cflags: -Wc++-compat
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-init-2.c'
    sources:
      binary: ./vector-init-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_vector-init-2_763:
  build:
    cflags: -Wc++-compat
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-init-2.c'
    sources:
      binary: ./vector-init-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_vector-scalar-2_1837:
  build:
    cflags: "-std=gnu++98 -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-scalar-2.c'
    sources:
      binary: vector-scalar-2.s
  group: GRPSERIAL
test_vector-scalar-2_1838:
  build:
    cflags: "-std=gnu++11 -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-scalar-2.c'
    sources:
      binary: vector-scalar-2.s
  group: GRPSERIAL
test_vector-scalar-2_1839:
  build:
    cflags: "-std=gnu++14 -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-scalar-2.c'
    sources:
      binary: vector-scalar-2.s
  group: GRPSERIAL
test_vector-scalar-2_2256:
  build:
    cflags: "-Wc++-compat  -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-scalar-2.c'
    sources:
      binary: vector-scalar-2.s
  group: GRPSERIAL
test_vector-scalar-2_3329:
  build:
    cflags: "-std=gnu++98 -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-scalar-2.c'
    sources:
      binary: vector-scalar-2.s
  group: GRPSERIAL
test_vector-scalar-2_3330:
  build:
    cflags: "-std=gnu++11 -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-scalar-2.c'
    sources:
      binary: vector-scalar-2.s
  group: GRPSERIAL
test_vector-scalar-2_3331:
  build:
    cflags: "-std=gnu++14 -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-scalar-2.c'
    sources:
      binary: vector-scalar-2.s
  group: GRPSERIAL
test_vector-scalar-2_375:
  build:
    cflags: "-Wc++-compat  -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-scalar-2.c'
    sources:
      binary: vector-scalar-2.s
  group: GRPSERIAL
test_vector-scalar-2_764:
  build:
    cflags: "-Wc++-compat  -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-scalar-2.c'
    sources:
      binary: vector-scalar-2.s
  group: GRPSERIAL
test_vector-scalar_1840:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-scalar.c'
    sources:
      binary: vector-scalar.s
  group: GRPSERIAL
test_vector-scalar_1841:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-scalar.c'
    sources:
      binary: vector-scalar.s
  group: GRPSERIAL
test_vector-scalar_1842:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-scalar.c'
    sources:
      binary: vector-scalar.s
  group: GRPSERIAL
test_vector-scalar_2257:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-scalar.c'
    sources:
      binary: vector-scalar.s
  group: GRPSERIAL
test_vector-scalar_3332:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-scalar.c'
    sources:
      binary: vector-scalar.s
  group: GRPSERIAL
test_vector-scalar_3333:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-scalar.c'
    sources:
      binary: vector-scalar.s
  group: GRPSERIAL
test_vector-scalar_3334:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-scalar.c'
    sources:
      binary: vector-scalar.s
  group: GRPSERIAL
test_vector-scalar_376:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-scalar.c'
    sources:
      binary: vector-scalar.s
  group: GRPSERIAL
test_vector-scalar_765:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-scalar.c'
    sources:
      binary: vector-scalar.s
  group: GRPSERIAL
test_vector-shift1_1846:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-shift1.c'
    sources:
      binary: vector-shift1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands
          to binary <<")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands
          to binary >>")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands")[^\n]*\n?)+'
test_vector-shift1_1847:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-shift1.c'
    sources:
      binary: vector-shift1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands
          to binary <<")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands
          to binary >>")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands")[^\n]*\n?)+'
test_vector-shift1_1848:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-shift1.c'
    sources:
      binary: vector-shift1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands
          to binary <<")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands
          to binary >>")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands")[^\n]*\n?)+'
test_vector-shift1_2259:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-shift1.c'
    sources:
      binary: vector-shift1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands
          to binary <<")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands
          to binary >>")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands")[^\n]*\n?)+'
test_vector-shift1_3338:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-shift1.c'
    sources:
      binary: vector-shift1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands
          to binary <<")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands
          to binary >>")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands")[^\n]*\n?)+'
test_vector-shift1_3339:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-shift1.c'
    sources:
      binary: vector-shift1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands
          to binary <<")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands
          to binary >>")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands")[^\n]*\n?)+'
test_vector-shift1_3340:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-shift1.c'
    sources:
      binary: vector-shift1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands
          to binary <<")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands
          to binary >>")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands")[^\n]*\n?)+'
test_vector-shift1_378:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-shift1.c'
    sources:
      binary: vector-shift1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands
          to binary <<")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands
          to binary >>")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands")[^\n]*\n?)+'
test_vector-shift1_767:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-shift1.c'
    sources:
      binary: vector-shift1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands
          to binary <<")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands
          to binary >>")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands")[^\n]*\n?)+'
test_vector-shift3_1849:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-shift3.c'
    sources:
      binary: vector-shift3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar1.*(undeclared|was
          not declared)")[^\n]*\n?)+'
test_vector-shift3_1850:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-shift3.c'
    sources:
      binary: vector-shift3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar1.*(undeclared|was
          not declared)")[^\n]*\n?)+'
test_vector-shift3_1851:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-shift3.c'
    sources:
      binary: vector-shift3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar1.*(undeclared|was
          not declared)")[^\n]*\n?)+'
test_vector-shift3_2260:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-shift3.c'
    sources:
      binary: vector-shift3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar1.*(undeclared|was
          not declared)")[^\n]*\n?)+'
test_vector-shift3_3341:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-shift3.c'
    sources:
      binary: vector-shift3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar1.*(undeclared|was
          not declared)")[^\n]*\n?)+'
test_vector-shift3_3342:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-shift3.c'
    sources:
      binary: vector-shift3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar1.*(undeclared|was
          not declared)")[^\n]*\n?)+'
test_vector-shift3_3343:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-shift3.c'
    sources:
      binary: vector-shift3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar1.*(undeclared|was
          not declared)")[^\n]*\n?)+'
test_vector-shift3_379:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-shift3.c'
    sources:
      binary: vector-shift3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar1.*(undeclared|was
          not declared)")[^\n]*\n?)+'
test_vector-shift3_768:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-shift3.c'
    sources:
      binary: vector-shift3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar1.*(undeclared|was
          not declared)")[^\n]*\n?)+'
test_vector-shift_1843:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-shift.c'
    sources:
      binary: vector-shift.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands
          to binary <<")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands
          to binary >>")[^\n]*\n?)+'
test_vector-shift_1844:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-shift.c'
    sources:
      binary: vector-shift.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands
          to binary <<")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands
          to binary >>")[^\n]*\n?)+'
test_vector-shift_1845:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-shift.c'
    sources:
      binary: vector-shift.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands
          to binary <<")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands
          to binary >>")[^\n]*\n?)+'
test_vector-shift_2258:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-shift.c'
    sources:
      binary: vector-shift.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands
          to binary <<")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands
          to binary >>")[^\n]*\n?)+'
test_vector-shift_3335:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-shift.c'
    sources:
      binary: vector-shift.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands
          to binary <<")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands
          to binary >>")[^\n]*\n?)+'
test_vector-shift_3336:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-shift.c'
    sources:
      binary: vector-shift.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands
          to binary <<")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands
          to binary >>")[^\n]*\n?)+'
test_vector-shift_3337:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-shift.c'
    sources:
      binary: vector-shift.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands
          to binary <<")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands
          to binary >>")[^\n]*\n?)+'
test_vector-shift_377:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-shift.c'
    sources:
      binary: vector-shift.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands
          to binary <<")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands
          to binary >>")[^\n]*\n?)+'
test_vector-shift_766:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-shift.c'
    sources:
      binary: vector-shift.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands
          to binary <<")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nvalid operands
          to binary >>")[^\n]*\n?)+'
test_vector-subscript-1_1852:
  build:
    cflags: "-std=gnu++98 -w\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-1.c'
    sources:
      binary: vector-subscript-1.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("subscripted value
          is neither array nor pointer nor vector|invalid types .* for array subscript")[^\n]*\n?)+'
test_vector-subscript-1_1853:
  build:
    cflags: "-std=gnu++11 -w\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-1.c'
    sources:
      binary: vector-subscript-1.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("subscripted value
          is neither array nor pointer nor vector|invalid types .* for array subscript")[^\n]*\n?)+'
test_vector-subscript-1_1854:
  build:
    cflags: "-std=gnu++14 -w\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-1.c'
    sources:
      binary: vector-subscript-1.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("subscripted value
          is neither array nor pointer nor vector|invalid types .* for array subscript")[^\n]*\n?)+'
test_vector-subscript-1_2261:
  build:
    cflags: "-Wc++-compat  -w\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-1.c'
    sources:
      binary: vector-subscript-1.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("subscripted value
          is neither array nor pointer nor vector|invalid types .* for array subscript")[^\n]*\n?)+'
test_vector-subscript-1_3344:
  build:
    cflags: "-std=gnu++98 -w\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-1.c'
    sources:
      binary: vector-subscript-1.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("subscripted value
          is neither array nor pointer nor vector|invalid types .* for array subscript")[^\n]*\n?)+'
test_vector-subscript-1_3345:
  build:
    cflags: "-std=gnu++11 -w\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-1.c'
    sources:
      binary: vector-subscript-1.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("subscripted value
          is neither array nor pointer nor vector|invalid types .* for array subscript")[^\n]*\n?)+'
test_vector-subscript-1_3346:
  build:
    cflags: "-std=gnu++14 -w\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-1.c'
    sources:
      binary: vector-subscript-1.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("subscripted value
          is neither array nor pointer nor vector|invalid types .* for array subscript")[^\n]*\n?)+'
test_vector-subscript-1_380:
  build:
    cflags: "-Wc++-compat  -w\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-1.c'
    sources:
      binary: vector-subscript-1.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("subscripted value
          is neither array nor pointer nor vector|invalid types .* for array subscript")[^\n]*\n?)+'
test_vector-subscript-1_769:
  build:
    cflags: "-Wc++-compat  -w\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-1.c'
    sources:
      binary: vector-subscript-1.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("subscripted value
          is neither array nor pointer nor vector|invalid types .* for array subscript")[^\n]*\n?)+'
test_vector-subscript-2_1855:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-2.c'
    sources:
      binary: vector-subscript-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
test_vector-subscript-2_1856:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-2.c'
    sources:
      binary: vector-subscript-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
test_vector-subscript-2_1857:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-2.c'
    sources:
      binary: vector-subscript-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
test_vector-subscript-2_2262:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-2.c'
    sources:
      binary: vector-subscript-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
test_vector-subscript-2_3347:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-2.c'
    sources:
      binary: vector-subscript-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
test_vector-subscript-2_3348:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-2.c'
    sources:
      binary: vector-subscript-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
test_vector-subscript-2_3349:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-2.c'
    sources:
      binary: vector-subscript-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
test_vector-subscript-2_381:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-2.c'
    sources:
      binary: vector-subscript-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
test_vector-subscript-2_770:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-2.c'
    sources:
      binary: vector-subscript-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
test_vector-subscript-3_1858:
  build:
    cflags: "-std=gnu++98 -Warray-bounds\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-3.c'
    sources:
      binary: vector-subscript-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("index value is out
          of bound")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("index value is out
          of bound")[^\n]*\n?)+'
test_vector-subscript-3_1859:
  build:
    cflags: "-std=gnu++11 -Warray-bounds\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-3.c'
    sources:
      binary: vector-subscript-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("index value is out
          of bound")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("index value is out
          of bound")[^\n]*\n?)+'
test_vector-subscript-3_1860:
  build:
    cflags: "-std=gnu++14 -Warray-bounds\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-3.c'
    sources:
      binary: vector-subscript-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("index value is out
          of bound")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("index value is out
          of bound")[^\n]*\n?)+'
test_vector-subscript-3_2263:
  build:
    cflags: "-Wc++-compat  -Warray-bounds\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-3.c'
    sources:
      binary: vector-subscript-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("index value is out
          of bound")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("index value is out
          of bound")[^\n]*\n?)+'
test_vector-subscript-3_3350:
  build:
    cflags: "-std=gnu++98 -Warray-bounds\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-3.c'
    sources:
      binary: vector-subscript-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("index value is out
          of bound")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("index value is out
          of bound")[^\n]*\n?)+'
test_vector-subscript-3_3351:
  build:
    cflags: "-std=gnu++11 -Warray-bounds\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-3.c'
    sources:
      binary: vector-subscript-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("index value is out
          of bound")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("index value is out
          of bound")[^\n]*\n?)+'
test_vector-subscript-3_3352:
  build:
    cflags: "-std=gnu++14 -Warray-bounds\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-3.c'
    sources:
      binary: vector-subscript-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("index value is out
          of bound")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("index value is out
          of bound")[^\n]*\n?)+'
test_vector-subscript-3_382:
  build:
    cflags: "-Wc++-compat  -Warray-bounds\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-3.c'
    sources:
      binary: vector-subscript-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("index value is out
          of bound")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("index value is out
          of bound")[^\n]*\n?)+'
test_vector-subscript-3_771:
  build:
    cflags: "-Wc++-compat  -Warray-bounds\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-3.c'
    sources:
      binary: vector-subscript-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("index value is out
          of bound")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("index value is out
          of bound")[^\n]*\n?)+'
test_vector-subscript-4_1861:
  build:
    cflags: "-std=gnu++98 -O2 -fdump-tree-optimized -w -Wno-psabi\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-4.c'
    sources:
      binary: vector-subscript-4.s
  group: GRPSERIAL
test_vector-subscript-4_1862:
  build:
    cflags: "-std=gnu++11 -O2 -fdump-tree-optimized -w -Wno-psabi\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-4.c'
    sources:
      binary: vector-subscript-4.s
  group: GRPSERIAL
test_vector-subscript-4_1863:
  build:
    cflags: "-std=gnu++14 -O2 -fdump-tree-optimized -w -Wno-psabi\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-4.c'
    sources:
      binary: vector-subscript-4.s
  group: GRPSERIAL
test_vector-subscript-4_2264:
  build:
    cflags: "-Wc++-compat  -O2 -fdump-tree-optimized -w -Wno-psabi\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-4.c'
    sources:
      binary: vector-subscript-4.s
  group: GRPSERIAL
test_vector-subscript-4_3353:
  build:
    cflags: "-std=gnu++98 -O2 -fdump-tree-optimized -w -Wno-psabi\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-4.c'
    sources:
      binary: vector-subscript-4.s
  group: GRPSERIAL
test_vector-subscript-4_3354:
  build:
    cflags: "-std=gnu++11 -O2 -fdump-tree-optimized -w -Wno-psabi\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-4.c'
    sources:
      binary: vector-subscript-4.s
  group: GRPSERIAL
test_vector-subscript-4_3355:
  build:
    cflags: "-std=gnu++14 -O2 -fdump-tree-optimized -w -Wno-psabi\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-4.c'
    sources:
      binary: vector-subscript-4.s
  group: GRPSERIAL
test_vector-subscript-4_383:
  build:
    cflags: "-Wc++-compat  -O2 -fdump-tree-optimized -w -Wno-psabi\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-4.c'
    sources:
      binary: vector-subscript-4.s
  group: GRPSERIAL
test_vector-subscript-4_772:
  build:
    cflags: "-Wc++-compat  -O2 -fdump-tree-optimized -w -Wno-psabi\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-4.c'
    sources:
      binary: vector-subscript-4.s
  group: GRPSERIAL
test_vector-subscript-5_1864:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-5.c'
    sources:
      binary: vector-subscript-5.s
  group: GRPSERIAL
test_vector-subscript-5_1865:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-5.c'
    sources:
      binary: vector-subscript-5.s
  group: GRPSERIAL
test_vector-subscript-5_1866:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-5.c'
    sources:
      binary: vector-subscript-5.s
  group: GRPSERIAL
test_vector-subscript-5_2265:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-5.c'
    sources:
      binary: vector-subscript-5.s
  group: GRPSERIAL
test_vector-subscript-5_3356:
  build:
    cflags: "-std=c++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-5.c'
    sources:
      binary: vector-subscript-5.s
  group: GRPSERIAL
test_vector-subscript-5_3357:
  build:
    cflags: "-std=c++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-5.c'
    sources:
      binary: vector-subscript-5.s
  group: GRPSERIAL
test_vector-subscript-5_3358:
  build:
    cflags: "-std=c++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-5.c'
    sources:
      binary: vector-subscript-5.s
  group: GRPSERIAL
test_vector-subscript-5_384:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-5.c'
    sources:
      binary: vector-subscript-5.s
  group: GRPSERIAL
test_vector-subscript-5_773:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-5.c'
    sources:
      binary: vector-subscript-5.s
  group: GRPSERIAL
test_vector-subscript-6_1867:
  build:
    cflags: "-std=gnu++98 -O -fno-tree-ccp -fdump-tree-fre1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-6.c'
    sources:
      binary: vector-subscript-6.s
  group: GRPSERIAL
test_vector-subscript-6_1868:
  build:
    cflags: "-std=gnu++11 -O -fno-tree-ccp -fdump-tree-fre1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-6.c'
    sources:
      binary: vector-subscript-6.s
  group: GRPSERIAL
test_vector-subscript-6_1869:
  build:
    cflags: "-std=gnu++14 -O -fno-tree-ccp -fdump-tree-fre1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-6.c'
    sources:
      binary: vector-subscript-6.s
  group: GRPSERIAL
test_vector-subscript-6_2266:
  build:
    cflags: "-Wc++-compat  -O -fno-tree-ccp -fdump-tree-fre1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-6.c'
    sources:
      binary: vector-subscript-6.s
  group: GRPSERIAL
test_vector-subscript-6_3359:
  build:
    cflags: "-std=gnu++98 -O -fno-tree-ccp -fdump-tree-fre1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-6.c'
    sources:
      binary: vector-subscript-6.s
  group: GRPSERIAL
test_vector-subscript-6_3360:
  build:
    cflags: "-std=gnu++11 -O -fno-tree-ccp -fdump-tree-fre1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-6.c'
    sources:
      binary: vector-subscript-6.s
  group: GRPSERIAL
test_vector-subscript-6_3361:
  build:
    cflags: "-std=gnu++14 -O -fno-tree-ccp -fdump-tree-fre1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-6.c'
    sources:
      binary: vector-subscript-6.s
  group: GRPSERIAL
test_vector-subscript-6_385:
  build:
    cflags: "-Wc++-compat  -O -fno-tree-ccp -fdump-tree-fre1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-6.c'
    sources:
      binary: vector-subscript-6.s
  group: GRPSERIAL
test_vector-subscript-6_774:
  build:
    cflags: "-Wc++-compat  -O -fno-tree-ccp -fdump-tree-fre1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-6.c'
    sources:
      binary: vector-subscript-6.s
  group: GRPSERIAL
test_vector-subscript-7_1870:
  build:
    cflags: "-std=gnu++98 -O -fdump-tree-fre1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-7.c'
    sources:
      binary: vector-subscript-7.s
  group: GRPSERIAL
test_vector-subscript-7_1871:
  build:
    cflags: "-std=gnu++11 -O -fdump-tree-fre1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-7.c'
    sources:
      binary: vector-subscript-7.s
  group: GRPSERIAL
test_vector-subscript-7_1872:
  build:
    cflags: "-std=gnu++14 -O -fdump-tree-fre1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-7.c'
    sources:
      binary: vector-subscript-7.s
  group: GRPSERIAL
test_vector-subscript-7_2267:
  build:
    cflags: "-Wc++-compat  -O -fdump-tree-fre1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-7.c'
    sources:
      binary: vector-subscript-7.s
  group: GRPSERIAL
test_vector-subscript-7_3362:
  build:
    cflags: "-std=gnu++98 -O -fdump-tree-fre1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-7.c'
    sources:
      binary: vector-subscript-7.s
  group: GRPSERIAL
test_vector-subscript-7_3363:
  build:
    cflags: "-std=gnu++11 -O -fdump-tree-fre1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-7.c'
    sources:
      binary: vector-subscript-7.s
  group: GRPSERIAL
test_vector-subscript-7_3364:
  build:
    cflags: "-std=gnu++14 -O -fdump-tree-fre1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-7.c'
    sources:
      binary: vector-subscript-7.s
  group: GRPSERIAL
test_vector-subscript-7_386:
  build:
    cflags: "-Wc++-compat  -O -fdump-tree-fre1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-7.c'
    sources:
      binary: vector-subscript-7.s
  group: GRPSERIAL
test_vector-subscript-7_775:
  build:
    cflags: "-Wc++-compat  -O -fdump-tree-fre1\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vector-subscript-7.c'
    sources:
      binary: vector-subscript-7.s
  group: GRPSERIAL
test_vla-1_1873:
  build:
    cflags: "-std=gnu++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vla-1.c'
    sources:
      binary: vla-1.s
  group: GRPSERIAL
test_vla-1_1874:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vla-1.c'
    sources:
      binary: vla-1.s
  group: GRPSERIAL
test_vla-1_1875:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vla-1.c'
    sources:
      binary: vla-1.s
  group: GRPSERIAL
test_vla-1_2268:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vla-1.c'
    sources:
      binary: vla-1.s
  group: GRPSERIAL
test_vla-1_3365:
  build:
    cflags: "-std=gnu++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vla-1.c'
    sources:
      binary: vla-1.s
  group: GRPSERIAL
test_vla-1_3366:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vla-1.c'
    sources:
      binary: vla-1.s
  group: GRPSERIAL
test_vla-1_3367:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vla-1.c'
    sources:
      binary: vla-1.s
  group: GRPSERIAL
test_vla-1_387:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vla-1.c'
    sources:
      binary: vla-1.s
  group: GRPSERIAL
test_vla-1_776:
  build:
    cflags: "-Wc++-compat  \n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/vla-1.c'
    sources:
      binary: vla-1.s
  group: GRPSERIAL
test_warn-ommitted-condop_1876:
  build:
    cflags: "-std=gnu++98 -Wparentheses -ftrack-macro-expansion=0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/warn-ommitted-condop.c'
    sources:
      binary: warn-ommitted-condop.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
test_warn-ommitted-condop_1877:
  build:
    cflags: "-std=gnu++11 -Wparentheses -ftrack-macro-expansion=0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/warn-ommitted-condop.c'
    sources:
      binary: warn-ommitted-condop.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
test_warn-ommitted-condop_1878:
  build:
    cflags: "-std=gnu++14 -Wparentheses -ftrack-macro-expansion=0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/warn-ommitted-condop.c'
    sources:
      binary: warn-ommitted-condop.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
test_warn-ommitted-condop_2269:
  build:
    cflags: "-Wc++-compat  -Wparentheses -ftrack-macro-expansion=0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/warn-ommitted-condop.c'
    sources:
      binary: warn-ommitted-condop.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
test_warn-ommitted-condop_3368:
  build:
    cflags: "-std=gnu++98 -Wparentheses -ftrack-macro-expansion=0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/warn-ommitted-condop.c'
    sources:
      binary: warn-ommitted-condop.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
test_warn-ommitted-condop_3369:
  build:
    cflags: "-std=gnu++11 -Wparentheses -ftrack-macro-expansion=0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/warn-ommitted-condop.c'
    sources:
      binary: warn-ommitted-condop.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
test_warn-ommitted-condop_3370:
  build:
    cflags: "-std=gnu++14 -Wparentheses -ftrack-macro-expansion=0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/warn-ommitted-condop.c'
    sources:
      binary: warn-ommitted-condop.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
test_warn-ommitted-condop_388:
  build:
    cflags: "-Wc++-compat  -Wparentheses -ftrack-macro-expansion=0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/warn-ommitted-condop.c'
    sources:
      binary: warn-ommitted-condop.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
test_warn-ommitted-condop_777:
  build:
    cflags: "-Wc++-compat  -Wparentheses -ftrack-macro-expansion=0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/warn-ommitted-condop.c'
    sources:
      binary: warn-ommitted-condop.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("omitted middle operand")[^\n]*\n?)+'
test_wdate-time_1879:
  build:
    cflags: "-std=gnu++98 -Wdate-time\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/wdate-time.c'
    sources:
      binary: wdate-time.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("might prevent reproducible
          builds")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("might prevent reproducible
          builds")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("might prevent reproducible
          builds")[^\n]*\n?)+'
test_wdate-time_1880:
  build:
    cflags: "-std=gnu++11 -Wdate-time\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/wdate-time.c'
    sources:
      binary: wdate-time.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("might prevent reproducible
          builds")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("might prevent reproducible
          builds")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("might prevent reproducible
          builds")[^\n]*\n?)+'
test_wdate-time_1881:
  build:
    cflags: "-std=gnu++14 -Wdate-time\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/wdate-time.c'
    sources:
      binary: wdate-time.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("might prevent reproducible
          builds")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("might prevent reproducible
          builds")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("might prevent reproducible
          builds")[^\n]*\n?)+'
test_wdate-time_2270:
  build:
    cflags: "-Wc++-compat  -Wdate-time\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/wdate-time.c'
    sources:
      binary: wdate-time.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("might prevent reproducible
          builds")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("might prevent reproducible
          builds")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("might prevent reproducible
          builds")[^\n]*\n?)+'
test_wdate-time_3371:
  build:
    cflags: "-std=gnu++98 -Wdate-time\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/wdate-time.c'
    sources:
      binary: wdate-time.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("might prevent reproducible
          builds")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("might prevent reproducible
          builds")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("might prevent reproducible
          builds")[^\n]*\n?)+'
test_wdate-time_3372:
  build:
    cflags: "-std=gnu++11 -Wdate-time\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/wdate-time.c'
    sources:
      binary: wdate-time.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("might prevent reproducible
          builds")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("might prevent reproducible
          builds")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("might prevent reproducible
          builds")[^\n]*\n?)+'
test_wdate-time_3373:
  build:
    cflags: "-std=gnu++14 -Wdate-time\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/wdate-time.c'
    sources:
      binary: wdate-time.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("might prevent reproducible
          builds")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("might prevent reproducible
          builds")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("might prevent reproducible
          builds")[^\n]*\n?)+'
test_wdate-time_389:
  build:
    cflags: "-Wc++-compat  -Wdate-time\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/wdate-time.c'
    sources:
      binary: wdate-time.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("might prevent reproducible
          builds")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("might prevent reproducible
          builds")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("might prevent reproducible
          builds")[^\n]*\n?)+'
test_wdate-time_778:
  build:
    cflags: "-Wc++-compat  -Wdate-time\n -S"
    files: '@ROOTPATH@/compilers/gcc/./c-c++-common/wdate-time.c'
    sources:
      binary: wdate-time.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("might prevent reproducible
          builds")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("might prevent reproducible
          builds")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("might prevent reproducible
          builds")[^\n]*\n?)+'
