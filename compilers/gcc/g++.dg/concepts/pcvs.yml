test_alias1_1:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/alias1.C'
    sources: {binary: alias1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_alias1_144:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/alias1.C'
    sources: {binary: alias1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_alias2_145:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/alias2.C'
    sources: {binary: alias2.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_alias2_2:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/alias2.C'
    sources: {binary: alias2.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_alias3_146:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/alias3.C'
    sources: {binary: alias3.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constraint|invalid")[^\n]*\n?)+'}
test_alias3_3:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/alias3.C'
    sources: {binary: alias3.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constraint|invalid")[^\n]*\n?)+'}
test_alias4_147:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/alias4.C'
    sources: {binary: alias4.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_alias4_4:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/alias4.C'
    sources: {binary: alias4.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_auto1_148:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/auto1.C'
    sources: {binary: auto1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_auto1_5:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/auto1.C'
    sources: {binary: auto1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_auto3_149:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/auto3.C'
    sources: {binary: auto3.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_auto3_6:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/auto3.C'
    sources: {binary: auto3.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_class-deduction1_150:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/class-deduction1.C'
    sources: {binary: class-deduction1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_class-deduction1_7:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/class-deduction1.C'
    sources: {binary: class-deduction1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_class1_152:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/class1.C'
    sources: {binary: class1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_class1_9:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/class1.C'
    sources: {binary: class1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_class2_10:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/class2.C'
    sources: {binary: class2.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constraint|invalid")[^\n]*\n?)+'}
test_class2_153:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/class2.C'
    sources: {binary: class2.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constraint|invalid")[^\n]*\n?)+'}
test_class3_11:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/class3.C'
    sources: {binary: class3.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_class3_154:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/class3.C'
    sources: {binary: class3.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_class4_12:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/class4.C'
    sources: {binary: class4.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_class4_155:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/class4.C'
    sources: {binary: class4.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_class5_13:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/class5.C'
    sources: {binary: class5.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_class5_156:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/class5.C'
    sources: {binary: class5.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_class6_14:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/class6.C'
    sources: {binary: class6.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not specialize")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constraint|invalid")[^\n]*\n?)+'}
test_class6_157:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/class6.C'
    sources: {binary: class6.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not specialize")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constraint|invalid")[^\n]*\n?)+'}
test_class_151:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/class.C'
    sources: {binary: class.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_class_8:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/class.C'
    sources: {binary: class.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_constrained-parm_15:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/constrained-parm.C'
    sources: {binary: constrained-parm.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid|expected")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cv-qualified")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cv-qualified")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid")[^\n]*\n?)+'}
test_constrained-parm_158:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/constrained-parm.C'
    sources: {binary: constrained-parm.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid|expected")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cv-qualified")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cv-qualified")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid")[^\n]*\n?)+'}
test_decl-diagnose_159:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/decl-diagnose.C'
    sources: {binary: decl-diagnose.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("return
          type|member function")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("member
          function")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("a
          concept cannot be a member function")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared
          \''concept\''")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("uninitialized
          const")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared
          \''concept\''")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("a
          destructor cannot be \''concept\''")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("a
          constructor cannot be \''concept\''")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non-template
          variable")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          no initializer")[^\n]*\n?)+'}
      L3: {expect: true, expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''concept\''
          cannot appear in a typedef declaration")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("static
          data member")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("a
          parameter cannot be declared \''concept\''")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("return
          type")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          definition")[^\n]*\n?)+'}
test_decl-diagnose_16:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/decl-diagnose.C'
    sources: {binary: decl-diagnose.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("return
          type|member function")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("member
          function")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("a
          concept cannot be a member function")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared
          \''concept\''")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("uninitialized
          const")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared
          \''concept\''")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("a
          destructor cannot be \''concept\''")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("a
          constructor cannot be \''concept\''")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non-template
          variable")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          no initializer")[^\n]*\n?)+'}
      L3: {expect: true, expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''concept\''
          cannot appear in a typedef declaration")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("static
          data member")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("a
          parameter cannot be declared \''concept\''")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("return
          type")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          definition")[^\n]*\n?)+'}
test_deduction-constraint1_160:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/deduction-constraint1.C'
    sources: {binary: deduction-constraint1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_deduction-constraint1_17:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/deduction-constraint1.C'
    sources: {binary: deduction-constraint1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_diagnostic1_161:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/diagnostic1.C'
    sources: {binary: diagnostic1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_diagnostic1_18:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/diagnostic1.C'
    sources: {binary: diagnostic1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_disjunction1_162:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/disjunction1.C'
    sources: {binary: disjunction1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_disjunction1_19:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/disjunction1.C'
    sources: {binary: disjunction1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_dr1430_163:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/dr1430.C'
    sources: {binary: dr1430.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          reference")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          reference")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
test_dr1430_20:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/dr1430.C'
    sources: {binary: dr1430.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          reference")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          reference")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
test_equiv2_165:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/equiv2.C'
    sources: {binary: ./equiv2.exe, cflags: -std=c++1z -fconcepts}
  group: GRPSERIAL
  run: {cwd: .}
test_equiv2_22:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/equiv2.C'
    sources: {binary: ./equiv2.exe, cflags: -std=c++1z -fconcepts}
  group: GRPSERIAL
  run: {cwd: .}
test_equiv_164:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/equiv.C'
    sources: {binary: equiv.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_equiv_21:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/equiv.C'
    sources: {binary: equiv.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_explicit-inst1_166:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/explicit-inst1.C'
    sources: {binary: explicit-inst1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_explicit-inst1_23:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/explicit-inst1.C'
    sources: {binary: explicit-inst1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_explicit-inst2_167:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/explicit-inst2.C'
    sources: {binary: explicit-inst2.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_explicit-inst2_24:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/explicit-inst2.C'
    sources: {binary: explicit-inst2.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_explicit-inst3_168:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/explicit-inst3.C'
    sources: {binary: explicit-inst3.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_explicit-inst3_25:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/explicit-inst3.C'
    sources: {binary: explicit-inst3.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_explicit-inst4_169:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/explicit-inst4.C'
    sources: {binary: explicit-inst4.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("match")[^\n]*\n?)+'}
test_explicit-inst4_26:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/explicit-inst4.C'
    sources: {binary: explicit-inst4.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("match")[^\n]*\n?)+'}
test_explicit-spec1_170:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/explicit-spec1.C'
    sources: {binary: ./explicit-spec1.exe, cflags: -std=c++1z -fconcepts}
  group: GRPSERIAL
  run: {cwd: .}
test_explicit-spec1_27:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/explicit-spec1.C'
    sources: {binary: ./explicit-spec1.exe, cflags: -std=c++1z -fconcepts}
  group: GRPSERIAL
  run: {cwd: .}
test_explicit-spec2_171:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/explicit-spec2.C'
    sources: {binary: explicit-spec2.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_explicit-spec2_28:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/explicit-spec2.C'
    sources: {binary: explicit-spec2.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_explicit-spec3_172:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/explicit-spec3.C'
    sources: {binary: explicit-spec3.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constraint")[^\n]*\n?)+'}
test_explicit-spec3_29:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/explicit-spec3.C'
    sources: {binary: explicit-spec3.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constraint")[^\n]*\n?)+'}
test_explicit-spec4_173:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/explicit-spec4.C'
    sources: {binary: ./explicit-spec4.exe, cflags: -std=c++1z -fconcepts}
  group: GRPSERIAL
  run: {cwd: .}
test_explicit-spec4_30:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/explicit-spec4.C'
    sources: {binary: ./explicit-spec4.exe, cflags: -std=c++1z -fconcepts}
  group: GRPSERIAL
  run: {cwd: .}
test_explicit-spec5_174:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/explicit-spec5.C'
    sources: {binary: explicit-spec5.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("match")[^\n]*\n?)+'}
test_explicit-spec5_31:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/explicit-spec5.C'
    sources: {binary: explicit-spec5.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("match")[^\n]*\n?)+'}
test_explicit-spec6_175:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/explicit-spec6.C'
    sources: {binary: explicit-spec6.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_explicit-spec6_32:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/explicit-spec6.C'
    sources: {binary: explicit-spec6.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_expression2_177:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/expression2.C'
    sources: {binary: expression2.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("failed")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_expression2_34:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/expression2.C'
    sources: {binary: expression2.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("failed")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_expression3_178:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/expression3.C'
    sources: {binary: expression3.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("failed")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("failed")[^\n]*\n?)+'}
test_expression3_35:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/expression3.C'
    sources: {binary: expression3.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("failed")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("failed")[^\n]*\n?)+'}
test_expression_176:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/expression.C'
    sources: {binary: ./expression.exe, cflags: -std=c++1z -fconcepts}
  group: GRPSERIAL
  run: {cwd: .}
test_expression_33:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/expression.C'
    sources: {binary: ./expression.exe, cflags: -std=c++1z -fconcepts}
  group: GRPSERIAL
  run: {cwd: .}
test_feature-macro_179:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/feature-macro.C'
    sources: {binary: feature-macro.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_feature-macro_36:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/feature-macro.C'
    sources: {binary: feature-macro.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_fn-concept1_180:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/fn-concept1.C'
    sources: {binary: fn-concept1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple
          statements")[^\n]*\n?)+'}
test_fn-concept1_37:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/fn-concept1.C'
    sources: {binary: fn-concept1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple
          statements")[^\n]*\n?)+'}
test_fn-concept2_181:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/fn-concept2.C'
    sources: {binary: fn-concept2.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("deduced
          return type")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("return
          type")[^\n]*\n?)+'}
test_fn-concept2_38:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/fn-concept2.C'
    sources: {binary: fn-concept2.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("deduced
          return type")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("return
          type")[^\n]*\n?)+'}
test_fn10_183:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/fn10.C'
    sources: {binary: fn10.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          match")[^\n]*\n?)+'}
test_fn10_40:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/fn10.C'
    sources: {binary: fn10.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          match")[^\n]*\n?)+'}
test_fn1_182:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/fn1.C'
    sources: {binary: fn1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_fn1_39:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/fn1.C'
    sources: {binary: fn1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_fn2_184:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/fn2.C'
    sources: {binary: fn2.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
test_fn2_41:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/fn2.C'
    sources: {binary: fn2.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
test_fn3_185:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/fn3.C'
    sources: {binary: ./fn3.exe, cflags: -std=c++1z -fconcepts}
  group: GRPSERIAL
  run: {cwd: .}
test_fn3_42:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/fn3.C'
    sources: {binary: ./fn3.exe, cflags: -std=c++1z -fconcepts}
  group: GRPSERIAL
  run: {cwd: .}
test_fn4_186:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/fn4.C'
    sources: {binary: fn4.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("matching")[^\n]*\n?)+'}
test_fn4_43:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/fn4.C'
    sources: {binary: fn4.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("matching")[^\n]*\n?)+'}
test_fn5_187:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/fn5.C'
    sources: {binary: fn5.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constraint|invalid")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constraint|invalid")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot")[^\n]*\n?)+'}
test_fn5_44:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/fn5.C'
    sources: {binary: fn5.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constraint|invalid")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constraint|invalid")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot")[^\n]*\n?)+'}
test_fn6_188:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/fn6.C'
    sources: {binary: fn6.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition")[^\n]*\n?)+'}
test_fn6_45:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/fn6.C'
    sources: {binary: fn6.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition")[^\n]*\n?)+'}
test_fn7_189:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/fn7.C'
    sources: {binary: fn7.exe, cflags: -std=c++1z -fconcepts}
  group: GRPSERIAL
  run: {cwd: .}
test_fn7_46:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/fn7.C'
    sources: {binary: fn7.exe, cflags: -std=c++1z -fconcepts}
  group: GRPSERIAL
  run: {cwd: .}
test_fn8_190:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/fn8.C'
    sources: {binary: fn8.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          matches")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          matches")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          matches")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          matches")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          matches")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          matches")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          matches")[^\n]*\n?)+'}
test_fn8_47:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/fn8.C'
    sources: {binary: fn8.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          matches")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          matches")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          matches")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          matches")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          matches")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          matches")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          matches")[^\n]*\n?)+'}
test_fn9_191:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/fn9.C'
    sources: {binary: ./fn9.exe, cflags: -std=c++1z -fconcepts}
  group: GRPSERIAL
  run: {cwd: .}
test_fn9_48:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/fn9.C'
    sources: {binary: ./fn9.exe, cflags: -std=c++1z -fconcepts}
  group: GRPSERIAL
  run: {cwd: .}
test_friend1_192:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/friend1.C'
    sources: {binary: friend1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not match any template declaration")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("3:\''f\''
          was not declared")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          match")[^\n]*\n?)+'}
test_friend1_49:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/friend1.C'
    sources: {binary: friend1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not match any template declaration")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("3:\''f\''
          was not declared")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          match")[^\n]*\n?)+'}
test_friend2_193:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/friend2.C'
    sources: {binary: friend2.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constraint
          failure")[^\n]*\n?)+'}
test_friend2_50:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/friend2.C'
    sources: {binary: friend2.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constraint
          failure")[^\n]*\n?)+'}
test_generic-fn-err_194:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/generic-fn-err.C'
    sources: {binary: generic-fn-err.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("matching")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("matching")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("matching")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("matching")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("matching")[^\n]*\n?)+'}
test_generic-fn-err_51:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/generic-fn-err.C'
    sources: {binary: generic-fn-err.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("matching")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("matching")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("matching")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("matching")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("matching")[^\n]*\n?)+'}
test_generic-fn_195:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/generic-fn.C'
    sources: {binary: ./generic-fn.exe, cflags: -std=c++1z -fconcepts}
  group: GRPSERIAL
  run: {cwd: .}
test_generic-fn_52:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/generic-fn.C'
    sources: {binary: ./generic-fn.exe, cflags: -std=c++1z -fconcepts}
  group: GRPSERIAL
  run: {cwd: .}
test_iconv1_196:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/iconv1.C'
    sources: {binary: iconv1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assert")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assert")[^\n]*\n?)+'}
test_iconv1_53:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/iconv1.C'
    sources: {binary: iconv1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assert")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assert")[^\n]*\n?)+'}
test_inherit-ctor1_197:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/inherit-ctor1.C'
    sources: {binary: inherit-ctor1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_inherit-ctor1_54:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/inherit-ctor1.C'
    sources: {binary: inherit-ctor1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_inherit-ctor2_198:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/inherit-ctor2.C'
    sources: {binary: inherit-ctor2.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("matching")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("deleted
          function")[^\n]*\n?)+'}
test_inherit-ctor2_55:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/inherit-ctor2.C'
    sources: {binary: inherit-ctor2.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("matching")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("deleted
          function")[^\n]*\n?)+'}
test_inherit-ctor3_199:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/inherit-ctor3.C'
    sources: {binary: inherit-ctor3.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_inherit-ctor3_56:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/inherit-ctor3.C'
    sources: {binary: inherit-ctor3.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_inherit-ctor4_200:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/inherit-ctor4.C'
    sources: {binary: inherit-ctor4.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          matching function")[^\n]*\n?)+'}
test_inherit-ctor4_57:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/inherit-ctor4.C'
    sources: {binary: inherit-ctor4.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          matching function")[^\n]*\n?)+'}
test_intro1_201:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/intro1.C'
    sources: {binary: intro1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_intro1_58:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/intro1.C'
    sources: {binary: intro1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_intro2_202:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/intro2.C'
    sources: {binary: ./intro2.exe, cflags: -std=c++1z -fconcepts}
  group: GRPSERIAL
  run: {cwd: .}
test_intro2_59:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/intro2.C'
    sources: {binary: ./intro2.exe, cflags: -std=c++1z -fconcepts}
  group: GRPSERIAL
  run: {cwd: .}
test_intro3_203:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/intro3.C'
    sources: {binary: intro3.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_intro3_60:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/intro3.C'
    sources: {binary: intro3.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_intro4_204:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/intro4.C'
    sources: {binary: intro4.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          matching|wrong number")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          match pack|no matching concept")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          match pack|no matching concept")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          match pack|no matching concept")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          matching concept")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          matching")[^\n]*\n?)+'}
test_intro4_61:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/intro4.C'
    sources: {binary: intro4.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          matching|wrong number")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          match pack|no matching concept")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          match pack|no matching concept")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          match pack|no matching concept")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          matching concept")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          matching")[^\n]*\n?)+'}
test_intro5_205:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/intro5.C'
    sources: {binary: intro5.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_intro5_62:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/intro5.C'
    sources: {binary: intro5.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_intro6_206:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/intro6.C'
    sources: {binary: intro6.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_intro6_63:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/intro6.C'
    sources: {binary: intro6.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_intro7_207:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/intro7.C'
    sources: {binary: intro7.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_intro7_64:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/intro7.C'
    sources: {binary: intro7.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_member-concept_208:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/member-concept.C'
    sources: {binary: member-concept.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("a
          concept cannot be a member function")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("a
          concept cannot be a member function")[^\n]*\n?)+'}
test_member-concept_65:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/member-concept.C'
    sources: {binary: member-concept.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("a
          concept cannot be a member function")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("a
          concept cannot be a member function")[^\n]*\n?)+'}
test_memfun-err_209:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/memfun-err.C'
    sources: {binary: memfun-err.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("candidate")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("prototype")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("matching")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("matching")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("matching")[^\n]*\n?)+'}
test_memfun-err_66:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/memfun-err.C'
    sources: {binary: memfun-err.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("candidate")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("prototype")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("matching")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("matching")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("matching")[^\n]*\n?)+'}
test_memfun2_211:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/memfun2.C'
    sources: {binary: memfun2.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_memfun2_68:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/memfun2.C'
    sources: {binary: memfun2.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_memfun_210:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/memfun.C'
    sources: {binary: memfun.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_memfun_67:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/memfun.C'
    sources: {binary: memfun.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_memtmpl1_212:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/memtmpl1.C'
    sources: {binary: memtmpl1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_memtmpl1_69:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/memtmpl1.C'
    sources: {binary: memtmpl1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_partial-concept-id1_213:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/partial-concept-id1.C'
    sources: {binary: partial-concept-id1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_partial-concept-id1_70:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/partial-concept-id1.C'
    sources: {binary: partial-concept-id1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_partial-concept-id2_214:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/partial-concept-id2.C'
    sources: {binary: partial-concept-id2.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_partial-concept-id2_71:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/partial-concept-id2.C'
    sources: {binary: partial-concept-id2.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_partial-spec2_216:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/partial-spec2.C'
    sources: {binary: partial-spec2.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_partial-spec2_73:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/partial-spec2.C'
    sources: {binary: partial-spec2.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_partial-spec3_217:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/partial-spec3.C'
    sources: {binary: partial-spec3.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_partial-spec3_74:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/partial-spec3.C'
    sources: {binary: partial-spec3.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_partial-spec4_218:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/partial-spec4.C'
    sources: {binary: partial-spec4.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_partial-spec4_75:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/partial-spec4.C'
    sources: {binary: partial-spec4.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_partial-spec5_219:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/partial-spec5.C'
    sources: {binary: partial-spec5.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_partial-spec5_76:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/partial-spec5.C'
    sources: {binary: partial-spec5.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_partial-spec6_220:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/partial-spec6.C'
    sources: {binary: partial-spec6.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_partial-spec6_77:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/partial-spec6.C'
    sources: {binary: partial-spec6.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_partial-spec_215:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/partial-spec.C'
    sources: {binary: partial-spec.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_partial-spec_72:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/partial-spec.C'
    sources: {binary: partial-spec.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_placeholder1_221:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/placeholder1.C'
    sources: {binary: placeholder1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not satisfy|is_same")[^\n]*\n?)+'}
test_placeholder1_78:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/placeholder1.C'
    sources: {binary: placeholder1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not satisfy|is_same")[^\n]*\n?)+'}
test_placeholder2_222:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/placeholder2.C'
    sources: {binary: placeholder2.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
test_placeholder2_79:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/placeholder2.C'
    sources: {binary: placeholder2.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
test_placeholder3_223:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/placeholder3.C'
    sources: {binary: placeholder3.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_placeholder3_80:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/placeholder3.C'
    sources: {binary: placeholder3.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_placeholder4_224:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/placeholder4.C'
    sources: {binary: placeholder4.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_placeholder4_81:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/placeholder4.C'
    sources: {binary: placeholder4.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_placeholder5_225:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/placeholder5.C'
    sources: {binary: placeholder5.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_placeholder5_82:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/placeholder5.C'
    sources: {binary: placeholder5.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_placeholder6_226:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/placeholder6.C'
    sources: {binary: placeholder6.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_placeholder6_83:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/placeholder6.C'
    sources: {binary: placeholder6.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_pr65552_227:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/pr65552.C'
    sources: {binary: pr65552.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_pr65552_84:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/pr65552.C'
    sources: {binary: pr65552.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_pr65575_228:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/pr65575.C'
    sources: {binary: pr65575.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
test_pr65575_85:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/pr65575.C'
    sources: {binary: pr65575.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
test_pr65634_229:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/pr65634.C'
    sources: {binary: pr65634.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_pr65634_86:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/pr65634.C'
    sources: {binary: pr65634.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_pr65636_230:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/pr65636.C'
    sources: {binary: pr65636.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_pr65636_87:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/pr65636.C'
    sources: {binary: pr65636.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_pr65681_231:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/pr65681.C'
    sources: {binary: pr65681.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_pr65681_88:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/pr65681.C'
    sources: {binary: pr65681.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_pr65848_232:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/pr65848.C'
    sources: {binary: pr65848.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_pr65848_89:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/pr65848.C'
    sources: {binary: pr65848.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_pr65854_233:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/pr65854.C'
    sources: {binary: pr65854.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call function")[^\n]*\n?)+'}
test_pr65854_90:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/pr65854.C'
    sources: {binary: pr65854.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call function")[^\n]*\n?)+'}
test_pr66091_234:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/pr66091.C'
    sources: {binary: pr66091.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_pr66091_91:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/pr66091.C'
    sources: {binary: pr66091.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_pr67249_235:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/pr67249.C'
    sources: {binary: pr67249.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_pr67249_92:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/pr67249.C'
    sources: {binary: pr67249.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_pr68434_236:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/pr68434.C'
    sources: {binary: pr68434.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_pr68434_93:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/pr68434.C'
    sources: {binary: pr68434.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_pr68683_237:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/pr68683.C'
    sources: {binary: pr68683.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_pr68683_94:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/pr68683.C'
    sources: {binary: pr68683.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_req-neg1_238:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req-neg1.C'
    sources: {binary: req-neg1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("type-id")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("typedef")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non-function")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("return
          type")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("parameter|non-function")[^\n]*\n?)+'}
test_req-neg1_95:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req-neg1.C'
    sources: {binary: req-neg1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("type-id")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("typedef")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non-function")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("return
          type")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("parameter|non-function")[^\n]*\n?)+'}
test_req10_240:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req10.C'
    sources: {binary: req10.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("failed")[^\n]*\n?)+'}
test_req10_97:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req10.C'
    sources: {binary: req10.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("failed")[^\n]*\n?)+'}
test_req11_241:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req11.C'
    sources: {binary: req11.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
test_req11_98:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req11.C'
    sources: {binary: req11.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
test_req12_242:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req12.C'
    sources: {binary: req12.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_req12_99:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req12.C'
    sources: {binary: req12.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_req13_100:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req13.C'
    sources: {binary: req13.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_req13_243:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req13.C'
    sources: {binary: req13.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_req14_101:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req14.C'
    sources: {binary: req14.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_req14_244:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req14.C'
    sources: {binary: req14.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_req15_102:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req15.C'
    sources: {binary: req15.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_req15_245:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req15.C'
    sources: {binary: req15.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_req16_103:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req16.C'
    sources: {binary: req16.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_req16_246:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req16.C'
    sources: {binary: req16.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_req17_104:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req17.C'
    sources: {binary: req17.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_req17_247:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req17.C'
    sources: {binary: req17.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_req18_105:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req18.C'
    sources: {binary: req18.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_req18_248:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req18.C'
    sources: {binary: req18.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_req19_106:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req19.C'
    sources: {binary: req19.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_req19_249:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req19.C'
    sources: {binary: req19.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_req1_239:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req1.C'
    sources: {binary: req1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have type")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constraint
          failure|does not have type")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constraint
          failure")[^\n]*\n?)+'}
test_req1_96:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req1.C'
    sources: {binary: req1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have type")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constraint
          failure|does not have type")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constraint
          failure")[^\n]*\n?)+'}
test_req20_108:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req20.C'
    sources: {binary: req20.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_req20_251:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req20.C'
    sources: {binary: req20.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_req2_107:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req2.C'
    sources: {binary: req2.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
test_req2_250:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req2.C'
    sources: {binary: req2.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
test_req3_109:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req3.C'
    sources: {binary: ./req3.exe, cflags: -std=c++1z -fconcepts}
  group: GRPSERIAL
  run: {cwd: .}
test_req3_252:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req3.C'
    sources: {binary: ./req3.exe, cflags: -std=c++1z -fconcepts}
  group: GRPSERIAL
  run: {cwd: .}
test_req4_110:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req4.C'
    sources: {binary: req4.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call|uses overloaded operator")[^\n]*\n?)+'}
test_req4_253:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req4.C'
    sources: {binary: req4.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call|uses overloaded operator")[^\n]*\n?)+'}
test_req5_111:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req5.C'
    sources: {binary: req5.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call|uses overloaded operator")[^\n]*\n?)+'}
test_req5_254:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req5.C'
    sources: {binary: req5.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call|uses overloaded operator")[^\n]*\n?)+'}
test_req6_112:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req6.C'
    sources: {binary: req6.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have|cannot call")[^\n]*\n?)+'}
test_req6_255:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req6.C'
    sources: {binary: req6.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not have|cannot call")[^\n]*\n?)+'}
test_req7_113:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req7.C'
    sources: {binary: req7.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not|bool")[^\n]*\n?)+'}
test_req7_256:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req7.C'
    sources: {binary: req7.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not|bool")[^\n]*\n?)+'}
test_req8_114:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req8.C'
    sources: {binary: req8.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_req8_257:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req8.C'
    sources: {binary: req8.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_req9_115:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req9.C'
    sources: {binary: req9.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_req9_258:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req9.C'
    sources: {binary: req9.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_template-parm10_117:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/template-parm10.C'
    sources: {binary: template-parm10.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_template-parm10_260:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/template-parm10.C'
    sources: {binary: template-parm10.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_template-parm11_118:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/template-parm11.C'
    sources: {binary: template-parm11.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
test_template-parm11_261:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/template-parm11.C'
    sources: {binary: template-parm11.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
test_template-parm12_119:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/template-parm12.C'
    sources: {binary: template-parm12.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_template-parm12_262:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/template-parm12.C'
    sources: {binary: template-parm12.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_template-parm1_116:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/template-parm1.C'
    sources: {binary: template-parm1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_template-parm1_259:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/template-parm1.C'
    sources: {binary: template-parm1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_template-parm2_120:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/template-parm2.C'
    sources: {binary: template-parm2.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constraint
          failure|invalid type")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constraint
          failure|invalid type")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constraint
          failure|invalid type")[^\n]*\n?)+'}
test_template-parm2_263:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/template-parm2.C'
    sources: {binary: template-parm2.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constraint
          failure|invalid type")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constraint
          failure|invalid type")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constraint
          failure|invalid type")[^\n]*\n?)+'}
test_template-parm3_121:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/template-parm3.C'
    sources: {binary: template-parm3.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_template-parm3_264:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/template-parm3.C'
    sources: {binary: template-parm3.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_template-parm4_122:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/template-parm4.C'
    sources: {binary: template-parm4.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constraint
          failure|invalid type")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constraint
          failure|invalid type")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constraint
          failure|invalid type")[^\n]*\n?)+'}
test_template-parm4_265:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/template-parm4.C'
    sources: {binary: template-parm4.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constraint
          failure|invalid type")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constraint
          failure|invalid type")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constraint
          failure|invalid type")[^\n]*\n?)+'}
test_template-parm5_123:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/template-parm5.C'
    sources: {binary: template-parm5.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("default
          argument")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("default
          argument")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("default
          argument")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("default
          argument")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("default
          argument")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("default
          argument")[^\n]*\n?)+'}
test_template-parm5_266:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/template-parm5.C'
    sources: {binary: template-parm5.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("default
          argument")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("default
          argument")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("default
          argument")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("default
          argument")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("default
          argument")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("default
          argument")[^\n]*\n?)+'}
test_template-parm6_124:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/template-parm6.C'
    sources: {binary: template-parm6.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_template-parm6_267:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/template-parm6.C'
    sources: {binary: template-parm6.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_template-parm7_125:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/template-parm7.C'
    sources: {binary: template-parm7.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constraint
          failure|invalid type")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("variadic
          constraint")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constraint
          failure|invalid type")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("variadic
          constraint")[^\n]*\n?)+'}
test_template-parm7_268:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/template-parm7.C'
    sources: {binary: template-parm7.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constraint
          failure|invalid type")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("variadic
          constraint")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constraint
          failure|invalid type")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("variadic
          constraint")[^\n]*\n?)+'}
test_template-parm8_126:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/template-parm8.C'
    sources: {binary: template-parm8.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_template-parm8_269:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/template-parm8.C'
    sources: {binary: template-parm8.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_template-parm9_127:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/template-parm9.C'
    sources: {binary: template-parm9.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constraint
          mismatch|invalid type")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constraint
          mismatch|invalid type")[^\n]*\n?)+'}
test_template-parm9_270:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/template-parm9.C'
    sources: {binary: template-parm9.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constraint
          mismatch|invalid type")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constraint
          mismatch|invalid type")[^\n]*\n?)+'}
test_template-template-parm1_128:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/template-template-parm1.C'
    sources: {binary: template-template-parm1.s, cflags: "-std=c++1z -fconcepts\n
        -S"}
  group: GRPSERIAL
test_template-template-parm1_271:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/template-template-parm1.C'
    sources: {binary: template-template-parm1.s, cflags: "-std=c++1z -fconcepts\n
        -S"}
  group: GRPSERIAL
test_traits1_129:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/traits1.C'
    sources: {binary: traits1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L80: {expect: true, expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L88: {expect: true, expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
test_traits1_272:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/traits1.C'
    sources: {binary: traits1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L80: {expect: true, expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L88: {expect: true, expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
test_traits2_130:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/traits2.C'
    sources: {binary: traits2.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L81: {expect: true, expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L88: {expect: true, expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
test_traits2_273:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/traits2.C'
    sources: {binary: traits2.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L81: {expect: true, expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L88: {expect: true, expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
test_var-concept1_131:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/var-concept1.C'
    sources: {binary: var-concept1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_var-concept1_274:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/var-concept1.C'
    sources: {binary: var-concept1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_var-concept2_132:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/var-concept2.C'
    sources: {binary: var-concept2.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
test_var-concept2_275:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/var-concept2.C'
    sources: {binary: var-concept2.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          call")[^\n]*\n?)+'}
test_var-concept3_133:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/var-concept3.C'
    sources: {binary: var-concept3.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          reference")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          a type")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_var-concept3_276:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/var-concept3.C'
    sources: {binary: var-concept3.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          reference")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          a type")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_var-concept4_134:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/var-concept4.C'
    sources: {binary: var-concept4.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("specialization
          of variable concept")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non-template
          variable")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          number|does not match")[^\n]*\n?)+'}
test_var-concept4_277:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/var-concept4.C'
    sources: {binary: var-concept4.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("specialization
          of variable concept")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non-template
          variable")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          number|does not match")[^\n]*\n?)+'}
test_var-concept5_135:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/var-concept5.C'
    sources: {binary: var-concept5.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          a type")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|not
          a type")[^\n]*\n?)+'}
test_var-concept5_278:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/var-concept5.C'
    sources: {binary: var-concept5.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          a type")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|not
          a type")[^\n]*\n?)+'}
test_var-concept6_136:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/var-concept6.C'
    sources: {binary: var-concept6.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bool")[^\n]*\n?)+'}
test_var-concept6_279:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/var-concept6.C'
    sources: {binary: var-concept6.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bool")[^\n]*\n?)+'}
test_var-templ1_137:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/var-templ1.C'
    sources: {binary: var-templ1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid")[^\n]*\n?)+'}
test_var-templ1_280:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/var-templ1.C'
    sources: {binary: var-templ1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid")[^\n]*\n?)+'}
test_var-templ2_138:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/var-templ2.C'
    sources: {binary: var-templ2.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_var-templ2_281:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/var-templ2.C'
    sources: {binary: var-templ2.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_var-templ3_139:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/var-templ3.C'
    sources: {binary: var-templ3.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_var-templ3_282:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/var-templ3.C'
    sources: {binary: var-templ3.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_variadic1_140:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/variadic1.C'
    sources: {binary: variadic1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_variadic1_283:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/variadic1.C'
    sources: {binary: variadic1.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_variadic2_141:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/variadic2.C'
    sources: {binary: variadic2.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_variadic2_284:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/variadic2.C'
    sources: {binary: variadic2.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_variadic3_142:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/variadic3.C'
    sources: {binary: variadic3.s, cflags: "-std=gnu++14 -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("parameter
          pack")[^\n]*\n?)+'}
test_variadic3_285:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/variadic3.C'
    sources: {binary: variadic3.s, cflags: "-std=gnu++14 -fconcepts\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("parameter
          pack")[^\n]*\n?)+'}
test_variadic4_143:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/variadic4.C'
    sources: {binary: variadic4.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
test_variadic4_286:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/variadic4.C'
    sources: {binary: variadic4.s, cflags: "-std=c++1z -fconcepts\n -S"}
  group: GRPSERIAL
