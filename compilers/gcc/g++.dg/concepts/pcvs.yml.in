---
test_alias1_1:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/alias1.C'
    sources:
      binary: alias1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_alias2_2:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/alias2.C'
    sources:
      binary: alias2.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_alias3_3:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/alias3.C'
    sources:
      binary: alias3.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:12:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(constraint|invalid))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_alias4_4:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/alias4.C'
    sources:
      binary: alias4.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:18:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_auto1_5:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/auto1.C'
    sources:
      binary: auto1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:15:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:16:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:27:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_auto3_6:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/auto3.C'
    sources:
      binary: auto3.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:12:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class-deduction1_7:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/class-deduction1.C'
    sources:
      binary: class-deduction1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:17:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class1_9:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/class1.C'
    sources:
      binary: class1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class2_10:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/class2.C'
    sources:
      binary: class2.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:12:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(constraint|invalid))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class3_11:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/class3.C'
    sources:
      binary: class3.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class4_12:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/class4.C'
    sources:
      binary: class4.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class5_13:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/class5.C'
    sources:
      binary: class5.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class6_14:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/class6.C'
    sources:
      binary: class6.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(does not specialize))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:16:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(constraint|invalid))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class_8:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/class.C'
    sources:
      binary: class.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_constrained-parm_15:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/constrained-parm.C'
    sources:
      binary: constrained-parm.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:6:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cv-qualified))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:7:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cv-qualified))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:8:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:9:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:12:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid|expected))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:13:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decl-diagnose_16:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/decl-diagnose.C'
    sources:
      binary: decl-diagnose.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:3:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('concept' cannot appear in a typedef declaration))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:5:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(a parameter cannot be declared 'concept'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:8:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(return type))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:9:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(no definition))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:14:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(return type|member function))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:15:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(member function))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:17:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(a concept cannot be a member function))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:18:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(declared 'concept'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:19:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(uninitialized const" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:20:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(declared 'concept'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:21:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(a destructor cannot be 'concept'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:22:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(a constructor cannot be 'concept'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:25:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(non-template variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:28:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(has no initializer))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:32:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(static data member))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_deduction-constraint1_17:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/deduction-constraint1.C'
    sources:
      binary: deduction-constraint1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_diagnostic1_18:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/diagnostic1.C'
    sources:
      binary: diagnostic1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:29:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:30:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_disjunction1_19:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/disjunction1.C'
    sources:
      binary: disjunction1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_dr1430_20:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/dr1430.C'
    sources:
      binary: dr1430.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:31:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid reference))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:35:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid reference))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:40:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:41:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_equiv2_22:
  build:
    cflags: '  -std=c++1z -fconcepts'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/equiv2.C'
    sources:
      binary: ./equiv2.exe
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_equiv_21:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/equiv.C'
    sources:
      binary: equiv.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_explicit-inst1_23:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/explicit-inst1.C'
    sources:
      binary: explicit-inst1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_explicit-inst2_24:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/explicit-inst2.C'
    sources:
      binary: explicit-inst2.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_explicit-inst3_25:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/explicit-inst3.C'
    sources:
      binary: explicit-inst3.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_explicit-inst4_26:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/explicit-inst4.C'
    sources:
      binary: explicit-inst4.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:15:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(match))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_explicit-spec1_27:
  build:
    cflags: '  -std=c++1z -fconcepts'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/explicit-spec1.C'
    sources:
      binary: ./explicit-spec1.exe
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_explicit-spec2_28:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/explicit-spec2.C'
    sources:
      binary: explicit-spec2.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_explicit-spec3_29:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/explicit-spec3.C'
    sources:
      binary: explicit-spec3.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(constraint))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_explicit-spec4_30:
  build:
    cflags: '  -std=c++1z -fconcepts'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/explicit-spec4.C'
    sources:
      binary: ./explicit-spec4.exe
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_explicit-spec5_31:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/explicit-spec5.C'
    sources:
      binary: explicit-spec5.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:21:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(match))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_explicit-spec6_32:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/explicit-spec6.C'
    sources:
      binary: explicit-spec6.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_expression2_34:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/expression2.C'
    sources:
      binary: expression2.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:33:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:34:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:40:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(failed))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:41:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_expression3_35:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/expression3.C'
    sources:
      binary: expression3.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:21:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(failed))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:22:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(failed))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_expression_33:
  build:
    cflags: '  -std=c++1z -fconcepts'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/expression.C'
    sources:
      binary: ./expression.exe
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_feature-macro_36:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/feature-macro.C'
    sources:
      binary: feature-macro.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_fn-concept1_37:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/fn-concept1.C'
    sources:
      binary: fn-concept1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:4:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(multiple statements))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_fn-concept2_38:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/fn-concept2.C'
    sources:
      binary: fn-concept2.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:4:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(deduced return type))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:7:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(return type))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_fn10_40:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/fn10.C'
    sources:
      binary: fn10.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:57:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(no match))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_fn1_39:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/fn1.C'
    sources:
      binary: fn1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_fn2_41:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/fn2.C'
    sources:
      binary: fn2.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:13:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:17:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_fn3_42:
  build:
    cflags: '  -std=c++1z -fconcepts'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/fn3.C'
    sources:
      binary: ./fn3.exe
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_fn4_43:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/fn4.C'
    sources:
      binary: fn4.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:16:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(matching))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_fn5_44:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/fn5.C'
    sources:
      binary: fn5.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:18:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(constraint|invalid))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:19:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(constraint|invalid))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:21:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:22:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_fn6_45:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/fn6.C'
    sources:
      binary: fn6.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:14:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(redefinition))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_fn7_46:
  build:
    cflags: '  -std=c++1z -fconcepts'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/fn7.C'
    sources:
      binary: fn7.exe
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_fn8_47:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/fn8.C'
    sources:
      binary: fn8.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(no matches))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(no matches))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:12:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(no matches))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:18:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(no matches))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:19:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(no matches))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:20:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(no matches))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:26:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(no matches))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_fn9_48:
  build:
    cflags: '  -std=c++1z -fconcepts'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/fn9.C'
    sources:
      binary: ./fn9.exe
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_friend1_49:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/friend1.C'
    sources:
      binary: friend1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:19:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(does not match any template declaration))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:26:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:27:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(3:'f' was not declared))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:33:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(no match))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_friend2_50:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/friend2.C'
    sources:
      binary: friend2.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:9:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(constraint failure))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_generic-fn-err_51:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/generic-fn-err.C'
    sources:
      binary: generic-fn-err.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:14:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:15:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:41:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(matching))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:44:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(matching))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:45:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(matching))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:47:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(matching))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:48:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(matching))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_generic-fn_52:
  build:
    cflags: '  -std=c++1z -fconcepts'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/generic-fn.C'
    sources:
      binary: ./generic-fn.exe
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_iconv1_53:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/iconv1.C'
    sources:
      binary: iconv1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:19:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(assert))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:20:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(assert))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inherit-ctor1_54:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/inherit-ctor1.C'
    sources:
      binary: inherit-ctor1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inherit-ctor2_55:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/inherit-ctor2.C'
    sources:
      binary: inherit-ctor2.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:12:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(matching))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:17:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(deleted function))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inherit-ctor3_56:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/inherit-ctor3.C'
    sources:
      binary: inherit-ctor3.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inherit-ctor4_57:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/inherit-ctor4.C'
    sources:
      binary: inherit-ctor4.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:17:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(no matching function))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_intro1_58:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/intro1.C'
    sources:
      binary: intro1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_intro2_59:
  build:
    cflags: '  -std=c++1z -fconcepts'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/intro2.C'
    sources:
      binary: ./intro2.exe
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_intro3_60:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/intro3.C'
    sources:
      binary: intro3.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_intro4_61:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/intro4.C'
    sources:
      binary: intro4.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:20:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(no matching|wrong number))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:21:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot match pack|no matching concept))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:22:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot match pack|no matching concept))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:23:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot match pack|no matching concept))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:24:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(no matching concept))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:30:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(no matching))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_intro5_62:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/intro5.C'
    sources:
      binary: intro5.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_intro6_63:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/intro6.C'
    sources:
      binary: intro6.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_intro7_64:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/intro7.C'
    sources:
      binary: intro7.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_member-concept_65:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/member-concept.C'
    sources:
      binary: member-concept.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:5:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(a concept cannot be a member function))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:8:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(a concept cannot be a member function))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_memfun-err_66:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/memfun-err.C'
    sources:
      binary: memfun-err.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:23:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(candidate))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:27:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(prototype))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:34:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(matching))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:35:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(matching))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:36:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(matching))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_memfun2_68:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/memfun2.C'
    sources:
      binary: memfun2.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_memfun_67:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/memfun.C'
    sources:
      binary: memfun.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_memtmpl1_69:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/memtmpl1.C'
    sources:
      binary: memtmpl1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_partial-concept-id1_70:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/partial-concept-id1.C'
    sources:
      binary: partial-concept-id1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_partial-concept-id2_71:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/partial-concept-id2.C'
    sources:
      binary: partial-concept-id2.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_partial-spec2_73:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/partial-spec2.C'
    sources:
      binary: partial-spec2.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_partial-spec3_74:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/partial-spec3.C'
    sources:
      binary: partial-spec3.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_partial-spec4_75:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/partial-spec4.C'
    sources:
      binary: partial-spec4.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_partial-spec5_76:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/partial-spec5.C'
    sources:
      binary: partial-spec5.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_partial-spec6_77:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/partial-spec6.C'
    sources:
      binary: partial-spec6.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_partial-spec_72:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/partial-spec.C'
    sources:
      binary: partial-spec.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_placeholder1_78:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/placeholder1.C'
    sources:
      binary: placeholder1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:34:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(does not satisfy|is_same))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_placeholder2_79:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/placeholder2.C'
    sources:
      binary: placeholder2.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:30:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:31:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_placeholder3_80:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/placeholder3.C'
    sources:
      binary: placeholder3.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:16:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_placeholder4_81:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/placeholder4.C'
    sources:
      binary: placeholder4.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:19:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_placeholder5_82:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/placeholder5.C'
    sources:
      binary: placeholder5.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:16:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_placeholder6_83:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/placeholder6.C'
    sources:
      binary: placeholder6.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr65552_84:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/pr65552.C'
    sources:
      binary: pr65552.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr65575_85:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/pr65575.C'
    sources:
      binary: pr65575.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:13:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:14:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:15:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:22:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr65634_86:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/pr65634.C'
    sources:
      binary: pr65634.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr65636_87:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/pr65636.C'
    sources:
      binary: pr65636.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr65681_88:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/pr65681.C'
    sources:
      binary: pr65681.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr65848_89:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/pr65848.C'
    sources:
      binary: pr65848.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr65854_90:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/pr65854.C'
    sources:
      binary: pr65854.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:24:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call function))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr66091_91:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/pr66091.C'
    sources:
      binary: pr66091.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr67249_92:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/pr67249.C'
    sources:
      binary: pr67249.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr68434_93:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/pr68434.C'
    sources:
      binary: pr68434.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr68683_94:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/pr68683.C'
    sources:
      binary: pr68683.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_req-neg1_95:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req-neg1.C'
    sources:
      binary: req-neg1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:5:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:6:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(typedef))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:7:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(non-function))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:8:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(return type))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:9:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(parameter|non-function))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(type-id))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_req10_97:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req10.C'
    sources:
      binary: req10.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:17:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(failed))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_req11_98:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req11.C'
    sources:
      binary: req11.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:27:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_req12_99:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req12.C'
    sources:
      binary: req12.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_req13_100:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req13.C'
    sources:
      binary: req13.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_req14_101:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req14.C'
    sources:
      binary: req14.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_req15_102:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req15.C'
    sources:
      binary: req15.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_req16_103:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req16.C'
    sources:
      binary: req16.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_req17_104:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req17.C'
    sources:
      binary: req17.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_req18_105:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req18.C'
    sources:
      binary: req18.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_req19_106:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req19.C'
    sources:
      binary: req19.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_req1_96:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req1.C'
    sources:
      binary: req1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:19:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(does not have type))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:23:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(constraint failure|does not have type))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:24:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(constraint failure))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_req20_108:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req20.C'
    sources:
      binary: req20.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_req2_107:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req2.C'
    sources:
      binary: req2.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:17:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:18:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_req3_109:
  build:
    cflags: '  -std=c++1z -fconcepts'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req3.C'
    sources:
      binary: ./req3.exe
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_req4_110:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req4.C'
    sources:
      binary: req4.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:17:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call|uses overloaded operator))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_req5_111:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req5.C'
    sources:
      binary: req5.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:17:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call|uses overloaded operator))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_req6_112:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req6.C'
    sources:
      binary: req6.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:14:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(does not have|cannot call))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_req7_113:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req7.C'
    sources:
      binary: req7.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:23:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(not|bool))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_req8_114:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req8.C'
    sources:
      binary: req8.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_req9_115:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/req9.C'
    sources:
      binary: req9.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_template-parm10_117:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/template-parm10.C'
    sources:
      binary: template-parm10.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_template-parm11_118:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/template-parm11.C'
    sources:
      binary: template-parm11.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:17:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_template-parm12_119:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/template-parm12.C'
    sources:
      binary: template-parm12.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_template-parm1_116:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/template-parm1.C'
    sources:
      binary: template-parm1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_template-parm2_120:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/template-parm2.C'
    sources:
      binary: template-parm2.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:21:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(constraint failure|invalid type))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:22:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(constraint failure|invalid type))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:23:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(constraint failure|invalid type))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_template-parm3_121:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/template-parm3.C'
    sources:
      binary: template-parm3.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_template-parm4_122:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/template-parm4.C'
    sources:
      binary: template-parm4.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:18:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(constraint failure|invalid type))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:19:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(constraint failure|invalid type))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:20:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(constraint failure|invalid type))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_template-parm5_123:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/template-parm5.C'
    sources:
      binary: template-parm5.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:14:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(default argument))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:15:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(default argument))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:16:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(default argument))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:17:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(default argument))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:18:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(default argument))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:19:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(default argument))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_template-parm6_124:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/template-parm6.C'
    sources:
      binary: template-parm6.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_template-parm7_125:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/template-parm7.C'
    sources:
      binary: template-parm7.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:37:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(constraint failure|invalid type))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:38:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(variadic constraint))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:41:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(constraint failure|invalid type))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:42:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(variadic constraint))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_template-parm8_126:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/template-parm8.C'
    sources:
      binary: template-parm8.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_template-parm9_127:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/template-parm9.C'
    sources:
      binary: template-parm9.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:15:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(constraint mismatch|invalid type))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:16:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(constraint mismatch|invalid type))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_template-template-parm1_128:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/template-template-parm1.C'
    sources:
      binary: template-template-parm1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_traits1_129:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/traits1.C'
    sources:
      binary: traits1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:80:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:81:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:82:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:83:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:84:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:85:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:86:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:87:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:88:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:89:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:90:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:91:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:92:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:93:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:94:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:95:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:96:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_traits2_130:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/traits2.C'
    sources:
      binary: traits2.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:81:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:82:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:83:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:84:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:85:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:86:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:87:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:88:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:89:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:90:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:91:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:92:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:93:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:94:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:95:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:96:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:97:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_var-concept1_131:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/var-concept1.C'
    sources:
      binary: var-concept1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_var-concept2_132:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/var-concept2.C'
    sources:
      binary: var-concept2.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:14:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:15:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot call))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_var-concept3_133:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/var-concept3.C'
    sources:
      binary: var-concept3.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:14:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:18:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid reference))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:21:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(not a type))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:22:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_var-concept4_134:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/var-concept4.C'
    sources:
      binary: var-concept4.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:7:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(wrong number|does not match))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:13:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(specialization of variable concept))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:19:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(non-template variable))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_var-concept5_135:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/var-concept5.C'
    sources:
      binary: var-concept5.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(not a type))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:13:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected|not a type))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_var-concept6_136:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/var-concept6.C'
    sources:
      binary: var-concept6.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:4:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(bool))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_var-templ1_137:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/var-templ1.C'
    sources:
      binary: var-templ1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:16:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_var-templ2_138:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/var-templ2.C'
    sources:
      binary: var-templ2.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_var-templ3_139:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/var-templ3.C'
    sources:
      binary: var-templ3.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_variadic1_140:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/variadic1.C'
    sources:
      binary: variadic1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_variadic2_141:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/variadic2.C'
    sources:
      binary: variadic2.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_variadic3_142:
  build:
    cflags: ' -std=gnu++14 -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/variadic3.C'
    sources:
      binary: variadic3.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fconcepts"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:8:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(parameter pack))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_variadic4_143:
  build:
    cflags: '  -std=c++1z -fconcepts -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/concepts/variadic4.C'
    sources:
      binary: variadic4.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -fconcepts"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
