test_abbrev1_1:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/abbrev1.C'
    sources:
      binary: abbrev1.s
  group: GRPSERIAL
test_abbrev1_349:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/abbrev1.C'
    sources:
      binary: abbrev1.s
  group: GRPSERIAL
test_abbrev2_2:
  build:
    cflags: -std=c++1z
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/abbrev2.C'
    sources:
      binary: ./abbrev2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_abbrev2_350:
  build:
    cflags: -std=c++1z
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/abbrev2.C'
    sources:
      binary: ./abbrev2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_aggr-base1_3:
  build:
    cflags: -std=c++1z
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aggr-base1.C'
    sources:
      binary: ./aggr-base1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_aggr-base1_351:
  build:
    cflags: -std=c++1z
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aggr-base1.C'
    sources:
      binary: ./aggr-base1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_aggr-base1a_352:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aggr-base1a.C'
    sources:
      binary: aggr-base1a.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_aggr-base1a_353:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aggr-base1a.C'
    sources:
      binary: aggr-base1a.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_aggr-base1a_4:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aggr-base1a.C'
    sources:
      binary: aggr-base1a.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_aggr-base1a_5:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aggr-base1a.C'
    sources:
      binary: aggr-base1a.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_aggr-base2_354:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aggr-base2.C'
    sources:
      binary: aggr-base2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_aggr-base2_6:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aggr-base2.C'
    sources:
      binary: aggr-base2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_aggr-base2a_355:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aggr-base2a.C'
    sources:
      binary: aggr-base2a.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_aggr-base2a_356:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aggr-base2a.C'
    sources:
      binary: aggr-base2a.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_aggr-base2a_7:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aggr-base2a.C'
    sources:
      binary: aggr-base2a.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_aggr-base2a_8:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aggr-base2a.C'
    sources:
      binary: aggr-base2a.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_aggr-base3_357:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aggr-base3.C'
    sources:
      binary: aggr-base3.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("base")[^\n]*\n?)+'
test_aggr-base3_9:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aggr-base3.C'
    sources:
      binary: aggr-base3.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("base")[^\n]*\n?)+'
test_aggr-base4_10:
  build:
    cflags: -std=c++1z
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aggr-base4.C'
    sources:
      binary: ./aggr-base4.exe
  group: GRPSERIAL
  run:
    cwd: .
test_aggr-base4_358:
  build:
    cflags: -std=c++1z
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aggr-base4.C'
    sources:
      binary: ./aggr-base4.exe
  group: GRPSERIAL
  run:
    cwd: .
test_aggr-base5_11:
  build:
    cflags: -std=c++1z -w
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aggr-base5.C'
    sources:
      binary: ./aggr-base5.exe
  group: GRPSERIAL
  run:
    cwd: .
test_aggr-base5_359:
  build:
    cflags: -std=c++1z -w
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aggr-base5.C'
    sources:
      binary: ./aggr-base5.exe
  group: GRPSERIAL
  run:
    cwd: .
test_aggr-base6_12:
  build:
    cflags: -std=c++1z -w
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aggr-base6.C'
    sources:
      binary: ./aggr-base6.exe
  group: GRPSERIAL
  run:
    cwd: .
test_aggr-base6_360:
  build:
    cflags: -std=c++1z -w
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aggr-base6.C'
    sources:
      binary: ./aggr-base6.exe
  group: GRPSERIAL
  run:
    cwd: .
test_aligned-new1_13:
  build:
    cflags: -std=c++1z
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aligned-new1.C'
    sources:
      binary: ./aligned-new1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_aligned-new1_361:
  build:
    cflags: -std=c++1z
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aligned-new1.C'
    sources:
      binary: ./aligned-new1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_aligned-new2_14:
  build:
    cflags: -std=c++1z
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aligned-new2.C'
    sources:
      binary: ./aligned-new2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_aligned-new2_362:
  build:
    cflags: -std=c++1z
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aligned-new2.C'
    sources:
      binary: ./aligned-new2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_aligned-new3_15:
  build:
    cflags: -std=c++1z
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aligned-new3.C'
    sources:
      binary: ./aligned-new3.exe
  group: GRPSERIAL
  run:
    cwd: .
test_aligned-new3_363:
  build:
    cflags: -std=c++1z
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aligned-new3.C'
    sources:
      binary: ./aligned-new3.exe
  group: GRPSERIAL
  run:
    cwd: .
test_aligned-new4_16:
  build:
    cflags: "-std=c++14 -Waligned-new\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aligned-new4.C'
    sources:
      binary: aligned-new4.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("-Waligned-new")[^\n]*\n?)+'
test_aligned-new4_364:
  build:
    cflags: "-std=c++14 -Waligned-new\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aligned-new4.C'
    sources:
      binary: aligned-new4.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("-Waligned-new")[^\n]*\n?)+'
test_aligned-new4a_17:
  build:
    cflags: "-std=c++14 -Waligned-new=all\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aligned-new4a.C'
    sources:
      binary: aligned-new4a.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("-Waligned-new")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("-Waligned-new")[^\n]*\n?)+'
test_aligned-new4a_365:
  build:
    cflags: "-std=c++14 -Waligned-new=all\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aligned-new4a.C'
    sources:
      binary: aligned-new4a.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("-Waligned-new")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("-Waligned-new")[^\n]*\n?)+'
test_aligned-new5_18:
  build:
    cflags: -std=gnu++98 -faligned-new
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aligned-new5.C'
    sources:
      binary: ./aligned-new5.exe
  group: GRPSERIAL
  run:
    cwd: .
test_aligned-new5_19:
  build:
    cflags: -std=gnu++11 -faligned-new
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aligned-new5.C'
    sources:
      binary: ./aligned-new5.exe
  group: GRPSERIAL
  run:
    cwd: .
test_aligned-new5_20:
  build:
    cflags: -std=gnu++14 -faligned-new
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aligned-new5.C'
    sources:
      binary: ./aligned-new5.exe
  group: GRPSERIAL
  run:
    cwd: .
test_aligned-new5_366:
  build:
    cflags: -std=gnu++98 -faligned-new
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aligned-new5.C'
    sources:
      binary: ./aligned-new5.exe
  group: GRPSERIAL
  run:
    cwd: .
test_aligned-new5_367:
  build:
    cflags: -std=gnu++11 -faligned-new
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aligned-new5.C'
    sources:
      binary: ./aligned-new5.exe
  group: GRPSERIAL
  run:
    cwd: .
test_aligned-new5_368:
  build:
    cflags: -std=gnu++14 -faligned-new
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aligned-new5.C'
    sources:
      binary: ./aligned-new5.exe
  group: GRPSERIAL
  run:
    cwd: .
test_aligned-new6_21:
  build:
    cflags: -std=gnu++11 -faligned-new -W -Wall -Wno-aligned-new
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aligned-new6.C'
    sources:
      binary: ./aligned-new6.exe
  group: GRPSERIAL
  run:
    cwd: .
test_aligned-new6_22:
  build:
    cflags: -std=gnu++14 -faligned-new -W -Wall -Wno-aligned-new
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aligned-new6.C'
    sources:
      binary: ./aligned-new6.exe
  group: GRPSERIAL
  run:
    cwd: .
test_aligned-new6_369:
  build:
    cflags: -std=gnu++11 -faligned-new -W -Wall -Wno-aligned-new
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aligned-new6.C'
    sources:
      binary: ./aligned-new6.exe
  group: GRPSERIAL
  run:
    cwd: .
test_aligned-new6_370:
  build:
    cflags: -std=gnu++14 -faligned-new -W -Wall -Wno-aligned-new
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aligned-new6.C'
    sources:
      binary: ./aligned-new6.exe
  group: GRPSERIAL
  run:
    cwd: .
test_aligned-new7_23:
  build:
    cflags: "-Wall -std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aligned-new7.C'
    sources:
      binary: aligned-new7.s
  group: GRPSERIAL
test_aligned-new7_371:
  build:
    cflags: "-Wall -std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aligned-new7.C'
    sources:
      binary: aligned-new7.s
  group: GRPSERIAL
test_aligned-new8_24:
  build:
    cflags: -std=c++17
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aligned-new8.C'
    sources:
      binary: ./aligned-new8.exe
  group: GRPSERIAL
  run:
    cwd: .
test_aligned-new8_372:
  build:
    cflags: -std=c++17
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aligned-new8.C'
    sources:
      binary: ./aligned-new8.exe
  group: GRPSERIAL
  run:
    cwd: .
test_attributes-enum-1_25:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/attributes-enum-1.C'
    sources:
      binary: attributes-enum-1.s
  group: GRPSERIAL
test_attributes-enum-1_373:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/attributes-enum-1.C'
    sources:
      binary: attributes-enum-1.s
  group: GRPSERIAL
test_attributes-enum-1a_26:
  build:
    cflags: "-pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/attributes-enum-1a.C'
    sources:
      binary: attributes-enum-1a.s
  group: GRPSERIAL
test_attributes-enum-1a_374:
  build:
    cflags: "-pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/attributes-enum-1a.C'
    sources:
      binary: attributes-enum-1a.s
  group: GRPSERIAL
test_bool-increment1_27:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/bool-increment1.C'
    sources:
      binary: bool-increment1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of an operand
          of type .bool. in .operator--. is forbidden")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of an operand
          of type .bool. in .operator--. is forbidden")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of an operand
          of type .bool. in .operator\\\\+\\\\+. is forbidden in")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of an operand
          of type .bool. in .operator\\\\+\\\\+. is forbidden in")[^\n]*\n?)+'
test_bool-increment1_375:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/bool-increment1.C'
    sources:
      binary: bool-increment1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of an operand
          of type .bool. in .operator--. is forbidden")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of an operand
          of type .bool. in .operator--. is forbidden")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of an operand
          of type .bool. in .operator\\\\+\\\\+. is forbidden in")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of an operand
          of type .bool. in .operator\\\\+\\\\+. is forbidden in")[^\n]*\n?)+'
test_byte1_28:
  build:
    cflags: "-std=c++1z -O3\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/byte1.C'
    sources:
      binary: byte1.s
  group: GRPSERIAL
test_byte1_376:
  build:
    cflags: "-std=c++1z -O3\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/byte1.C'
    sources:
      binary: byte1.s
  group: GRPSERIAL
test_class-deduction10_30:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction10.C'
    sources:
      binary: class-deduction10.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("1:function body")[^\n]*\n?)+'
test_class-deduction10_378:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction10.C'
    sources:
      binary: class-deduction10.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("1:function body")[^\n]*\n?)+'
test_class-deduction11_31:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction11.C'
    sources:
      binary: class-deduction11.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("1:decl-specifier")[^\n]*\n?)+'
test_class-deduction11_379:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction11.C'
    sources:
      binary: class-deduction11.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("1:decl-specifier")[^\n]*\n?)+'
test_class-deduction12_32:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction12.C'
    sources:
      binary: class-deduction12.s
  group: GRPSERIAL
test_class-deduction12_380:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction12.C'
    sources:
      binary: class-deduction12.s
  group: GRPSERIAL
test_class-deduction13_33:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction13.C'
    sources:
      binary: class-deduction13.s
  group: GRPSERIAL
test_class-deduction13_381:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction13.C'
    sources:
      binary: class-deduction13.s
  group: GRPSERIAL
test_class-deduction14_34:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction14.C'
    sources:
      binary: class-deduction14.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_class-deduction14_382:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction14.C'
    sources:
      binary: class-deduction14.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_class-deduction15_35:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction15.C'
    sources:
      binary: class-deduction15.s
  group: GRPSERIAL
test_class-deduction15_383:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction15.C'
    sources:
      binary: class-deduction15.s
  group: GRPSERIAL
test_class-deduction16_36:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction16.C'
    sources:
      binary: class-deduction16.s
  group: GRPSERIAL
test_class-deduction16_384:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction16.C'
    sources:
      binary: class-deduction16.s
  group: GRPSERIAL
test_class-deduction17_37:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction17.C'
    sources:
      binary: class-deduction17.s
  group: GRPSERIAL
test_class-deduction17_385:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction17.C'
    sources:
      binary: class-deduction17.s
  group: GRPSERIAL
test_class-deduction18_38:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction18.C'
    sources:
      binary: class-deduction18.s
  group: GRPSERIAL
test_class-deduction18_386:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction18.C'
    sources:
      binary: class-deduction18.s
  group: GRPSERIAL
test_class-deduction19_387:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction19.C'
    sources:
      binary: class-deduction19.s
  group: GRPSERIAL
test_class-deduction19_39:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction19.C'
    sources:
      binary: class-deduction19.s
  group: GRPSERIAL
test_class-deduction1_29:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction1.C'
    sources:
      binary: class-deduction1.s
  group: GRPSERIAL
test_class-deduction1_377:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction1.C'
    sources:
      binary: class-deduction1.s
  group: GRPSERIAL
test_class-deduction20_389:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction20.C'
    sources:
      binary: class-deduction20.s
  group: GRPSERIAL
test_class-deduction20_41:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction20.C'
    sources:
      binary: class-deduction20.s
  group: GRPSERIAL
test_class-deduction21_390:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction21.C'
    sources:
      binary: class-deduction21.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("return type")[^\n]*\n?)+'
test_class-deduction21_42:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction21.C'
    sources:
      binary: class-deduction21.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("return type")[^\n]*\n?)+'
test_class-deduction22_391:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction22.C'
    sources:
      binary: class-deduction22.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("B")[^\n]*\n?)+'
test_class-deduction22_43:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction22.C'
    sources:
      binary: class-deduction22.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("B")[^\n]*\n?)+'
test_class-deduction23_392:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction23.C'
    sources:
      binary: class-deduction23.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("placeholder")[^\n]*\n?)+'
test_class-deduction23_44:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction23.C'
    sources:
      binary: class-deduction23.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("placeholder")[^\n]*\n?)+'
test_class-deduction24_393:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction24.C'
    sources:
      binary: class-deduction24.s
  group: GRPSERIAL
test_class-deduction24_45:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction24.C'
    sources:
      binary: class-deduction24.s
  group: GRPSERIAL
test_class-deduction25_394:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction25.C'
    sources:
      binary: class-deduction25.s
  group: GRPSERIAL
test_class-deduction25_46:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction25.C'
    sources:
      binary: class-deduction25.s
  group: GRPSERIAL
test_class-deduction26_395:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction26.C'
    sources:
      binary: class-deduction26.s
  group: GRPSERIAL
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_class-deduction26_47:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction26.C'
    sources:
      binary: class-deduction26.s
  group: GRPSERIAL
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_class-deduction27_396:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction27.C'
    sources:
      binary: class-deduction27.s
  group: GRPSERIAL
test_class-deduction27_48:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction27.C'
    sources:
      binary: class-deduction27.s
  group: GRPSERIAL
test_class-deduction28_397:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction28.C'
    sources:
      binary: class-deduction28.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_class-deduction28_49:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction28.C'
    sources:
      binary: class-deduction28.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_class-deduction29_398:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction29.C'
    sources:
      binary: class-deduction29.s
  group: GRPSERIAL
test_class-deduction29_50:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction29.C'
    sources:
      binary: class-deduction29.s
  group: GRPSERIAL
test_class-deduction2_388:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction2.C'
    sources:
      binary: class-deduction2.s
  group: GRPSERIAL
test_class-deduction2_40:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction2.C'
    sources:
      binary: class-deduction2.s
  group: GRPSERIAL
test_class-deduction30_400:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction30.C'
    sources:
      binary: class-deduction30.s
  group: GRPSERIAL
test_class-deduction30_52:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction30.C'
    sources:
      binary: class-deduction30.s
  group: GRPSERIAL
test_class-deduction31_401:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction31.C'
    sources:
      binary: class-deduction31.s
  group: GRPSERIAL
test_class-deduction31_53:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction31.C'
    sources:
      binary: class-deduction31.s
  group: GRPSERIAL
test_class-deduction32_402:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction32.C'
    sources:
      binary: class-deduction32.s
  group: GRPSERIAL
test_class-deduction32_54:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction32.C'
    sources:
      binary: class-deduction32.s
  group: GRPSERIAL
test_class-deduction33_403:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction33.C'
    sources:
      binary: class-deduction33.s
  group: GRPSERIAL
test_class-deduction33_55:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction33.C'
    sources:
      binary: class-deduction33.s
  group: GRPSERIAL
test_class-deduction34_404:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction34.C'
    sources:
      binary: class-deduction34.s
  group: GRPSERIAL
test_class-deduction34_56:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction34.C'
    sources:
      binary: class-deduction34.s
  group: GRPSERIAL
test_class-deduction35_405:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction35.C'
    sources:
      binary: class-deduction35.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_class-deduction35_57:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction35.C'
    sources:
      binary: class-deduction35.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_class-deduction36_406:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction36.C'
    sources:
      binary: class-deduction36.s
  group: GRPSERIAL
test_class-deduction36_58:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction36.C'
    sources:
      binary: class-deduction36.s
  group: GRPSERIAL
test_class-deduction38_407:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction38.C'
    sources:
      binary: class-deduction38.s
  group: GRPSERIAL
test_class-deduction38_59:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction38.C'
    sources:
      binary: class-deduction38.s
  group: GRPSERIAL
test_class-deduction3_399:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction3.C'
    sources:
      binary: class-deduction3.s
  group: GRPSERIAL
test_class-deduction3_51:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction3.C'
    sources:
      binary: class-deduction3.s
  group: GRPSERIAL
test_class-deduction40_409:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction40.C'
    sources:
      binary: class-deduction40.s
  group: GRPSERIAL
test_class-deduction40_61:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction40.C'
    sources:
      binary: class-deduction40.s
  group: GRPSERIAL
test_class-deduction4_408:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction4.C'
    sources:
      binary: class-deduction4.s
  group: GRPSERIAL
test_class-deduction4_60:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction4.C'
    sources:
      binary: class-deduction4.s
  group: GRPSERIAL
test_class-deduction5_410:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction5.C'
    sources:
      binary: class-deduction5.s
  group: GRPSERIAL
test_class-deduction5_62:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction5.C'
    sources:
      binary: class-deduction5.s
  group: GRPSERIAL
test_class-deduction6_411:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction6.C'
    sources:
      binary: class-deduction6.s
  group: GRPSERIAL
test_class-deduction6_63:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction6.C'
    sources:
      binary: class-deduction6.s
  group: GRPSERIAL
test_class-deduction7_412:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction7.C'
    sources:
      binary: class-deduction7.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must have trailing
          return type")[^\n]*\n?)+'
test_class-deduction7_64:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction7.C'
    sources:
      binary: class-deduction7.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must have trailing
          return type")[^\n]*\n?)+'
test_class-deduction8_413:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction8.C'
    sources:
      binary: class-deduction8.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_class-deduction8_65:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction8.C'
    sources:
      binary: class-deduction8.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_class-deduction9_414:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction9.C'
    sources:
      binary: class-deduction9.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("should have been
          declared inside .N")[^\n]*\n?)+'
test_class-deduction9_66:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction9.C'
    sources:
      binary: class-deduction9.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("should have been
          declared inside .N")[^\n]*\n?)+'
test_constexpr-if10_417:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if10.C'
    sources:
      binary: constexpr-if10.s
  group: GRPSERIAL
test_constexpr-if10_69:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if10.C'
    sources:
      binary: constexpr-if10.s
  group: GRPSERIAL
test_constexpr-if11_418:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if11.C'
    sources:
      binary: constexpr-if11.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non-static")[^\n]*\n?)+'
test_constexpr-if11_70:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if11.C'
    sources:
      binary: constexpr-if11.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non-static")[^\n]*\n?)+'
test_constexpr-if12_419:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if12.C'
    sources:
      binary: constexpr-if12.s
  group: GRPSERIAL
test_constexpr-if12_71:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if12.C'
    sources:
      binary: constexpr-if12.s
  group: GRPSERIAL
test_constexpr-if1_415:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if1.C'
    sources:
      binary: constexpr-if1.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("constexpr")[^\n]*\n?)+'
test_constexpr-if1_416:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if1.C'
    sources:
      binary: constexpr-if1.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("constexpr")[^\n]*\n?)+'
test_constexpr-if1_67:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if1.C'
    sources:
      binary: constexpr-if1.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("constexpr")[^\n]*\n?)+'
test_constexpr-if1_68:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if1.C'
    sources:
      binary: constexpr-if1.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("constexpr")[^\n]*\n?)+'
test_constexpr-if2_420:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if2.C'
    sources:
      binary: constexpr-if2.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("constexpr")[^\n]*\n?)+'
test_constexpr-if2_72:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if2.C'
    sources:
      binary: constexpr-if2.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("constexpr")[^\n]*\n?)+'
test_constexpr-if3_421:
  build:
    cflags: -std=gnu++11
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if3.C'
    sources:
      binary: constexpr-if3.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("constexpr")[^\n]*\n?)+'
test_constexpr-if3_422:
  build:
    cflags: -std=gnu++14
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if3.C'
    sources:
      binary: constexpr-if3.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("constexpr")[^\n]*\n?)+'
test_constexpr-if3_73:
  build:
    cflags: -std=gnu++11
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if3.C'
    sources:
      binary: constexpr-if3.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("constexpr")[^\n]*\n?)+'
test_constexpr-if3_74:
  build:
    cflags: -std=gnu++14
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if3.C'
    sources:
      binary: constexpr-if3.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("constexpr")[^\n]*\n?)+'
test_constexpr-if4_423:
  build:
    cflags: "-std=gnu++11 -w\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if4.C'
    sources:
      binary: constexpr-if4.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
test_constexpr-if4_424:
  build:
    cflags: "-std=gnu++14 -w\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if4.C'
    sources:
      binary: constexpr-if4.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
test_constexpr-if4_75:
  build:
    cflags: "-std=gnu++11 -w\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if4.C'
    sources:
      binary: constexpr-if4.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
test_constexpr-if4_76:
  build:
    cflags: "-std=gnu++14 -w\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if4.C'
    sources:
      binary: constexpr-if4.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
test_constexpr-if5_425:
  build:
    cflags: "-std=gnu++11 -w\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if5.C'
    sources:
      binary: constexpr-if5.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
test_constexpr-if5_426:
  build:
    cflags: "-std=gnu++14 -w\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if5.C'
    sources:
      binary: constexpr-if5.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
test_constexpr-if5_77:
  build:
    cflags: "-std=gnu++11 -w\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if5.C'
    sources:
      binary: constexpr-if5.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
test_constexpr-if5_78:
  build:
    cflags: "-std=gnu++14 -w\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if5.C'
    sources:
      binary: constexpr-if5.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
test_constexpr-if6_427:
  build:
    cflags: "-std=gnu++11 -w\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if6.C'
    sources:
      binary: constexpr-if6.s
  group: GRPSERIAL
test_constexpr-if6_428:
  build:
    cflags: "-std=gnu++14 -w\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if6.C'
    sources:
      binary: constexpr-if6.s
  group: GRPSERIAL
test_constexpr-if6_79:
  build:
    cflags: "-std=gnu++11 -w\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if6.C'
    sources:
      binary: constexpr-if6.s
  group: GRPSERIAL
test_constexpr-if6_80:
  build:
    cflags: "-std=gnu++14 -w\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if6.C'
    sources:
      binary: constexpr-if6.s
  group: GRPSERIAL
test_constexpr-if7_429:
  build:
    cflags: "-std=gnu++11 -w\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if7.C'
    sources:
      binary: constexpr-if7.s
  group: GRPSERIAL
test_constexpr-if7_430:
  build:
    cflags: "-std=gnu++14 -w\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if7.C'
    sources:
      binary: constexpr-if7.s
  group: GRPSERIAL
test_constexpr-if7_81:
  build:
    cflags: "-std=gnu++11 -w\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if7.C'
    sources:
      binary: constexpr-if7.s
  group: GRPSERIAL
test_constexpr-if7_82:
  build:
    cflags: "-std=gnu++14 -w\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if7.C'
    sources:
      binary: constexpr-if7.s
  group: GRPSERIAL
test_constexpr-if8_431:
  build:
    cflags: "-std=gnu++11 -w\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if8.C'
    sources:
      binary: constexpr-if8.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
test_constexpr-if8_432:
  build:
    cflags: "-std=gnu++14 -w\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if8.C'
    sources:
      binary: constexpr-if8.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
test_constexpr-if8_83:
  build:
    cflags: "-std=gnu++11 -w\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if8.C'
    sources:
      binary: constexpr-if8.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
test_constexpr-if8_84:
  build:
    cflags: "-std=gnu++14 -w\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if8.C'
    sources:
      binary: constexpr-if8.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
test_constexpr-if9_433:
  build:
    cflags: "-std=gnu++11 -w\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if9.C'
    sources:
      binary: constexpr-if9.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to case label")[^\n]*\n?)+'
test_constexpr-if9_434:
  build:
    cflags: "-std=gnu++14 -w\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if9.C'
    sources:
      binary: constexpr-if9.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to case label")[^\n]*\n?)+'
test_constexpr-if9_85:
  build:
    cflags: "-std=gnu++11 -w\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if9.C'
    sources:
      binary: constexpr-if9.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to case label")[^\n]*\n?)+'
test_constexpr-if9_86:
  build:
    cflags: "-std=gnu++14 -w\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if9.C'
    sources:
      binary: constexpr-if9.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to case label")[^\n]*\n?)+'
test_constexpr-lambda10_436:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda10.C'
    sources:
      binary: constexpr-lambda10.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_constexpr-lambda10_88:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda10.C'
    sources:
      binary: constexpr-lambda10.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_constexpr-lambda11_437:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda11.C'
    sources:
      binary: constexpr-lambda11.s
  group: GRPSERIAL
test_constexpr-lambda11_89:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda11.C'
    sources:
      binary: constexpr-lambda11.s
  group: GRPSERIAL
test_constexpr-lambda12_438:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda12.C'
    sources:
      binary: constexpr-lambda12.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("uninitialized")[^\n]*\n?)+'
test_constexpr-lambda12_90:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda12.C'
    sources:
      binary: constexpr-lambda12.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("uninitialized")[^\n]*\n?)+'
test_constexpr-lambda13_439:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda13.C'
    sources:
      binary: constexpr-lambda13.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("static")[^\n]*\n?)+'
test_constexpr-lambda13_91:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda13.C'
    sources:
      binary: constexpr-lambda13.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("static")[^\n]*\n?)+'
test_constexpr-lambda14_440:
  build:
    cflags: "-std=c++14\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda14.C'
    sources:
      binary: constexpr-lambda14.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constexpr")[^\n]*\n?)+'
test_constexpr-lambda14_92:
  build:
    cflags: "-std=c++14\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda14.C'
    sources:
      binary: constexpr-lambda14.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constexpr")[^\n]*\n?)+'
test_constexpr-lambda15_441:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda15.C'
    sources:
      binary: constexpr-lambda15.s
  group: GRPSERIAL
test_constexpr-lambda15_93:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda15.C'
    sources:
      binary: constexpr-lambda15.s
  group: GRPSERIAL
test_constexpr-lambda16_442:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda16.C'
    sources:
      binary: constexpr-lambda16.s
  group: GRPSERIAL
test_constexpr-lambda16_94:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda16.C'
    sources:
      binary: constexpr-lambda16.s
  group: GRPSERIAL
test_constexpr-lambda1_435:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda1.C'
    sources:
      binary: constexpr-lambda1.s
  group: GRPSERIAL
test_constexpr-lambda1_87:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda1.C'
    sources:
      binary: constexpr-lambda1.s
  group: GRPSERIAL
test_constexpr-lambda2_443:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda2.C'
    sources:
      binary: constexpr-lambda2.s
  group: GRPSERIAL
test_constexpr-lambda2_95:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda2.C'
    sources:
      binary: constexpr-lambda2.s
  group: GRPSERIAL
test_constexpr-lambda3_444:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda3.C'
    sources:
      binary: constexpr-lambda3.s
  group: GRPSERIAL
test_constexpr-lambda3_96:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda3.C'
    sources:
      binary: constexpr-lambda3.s
  group: GRPSERIAL
test_constexpr-lambda4_445:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda4.C'
    sources:
      binary: constexpr-lambda4.s
  group: GRPSERIAL
test_constexpr-lambda4_97:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda4.C'
    sources:
      binary: constexpr-lambda4.s
  group: GRPSERIAL
test_constexpr-lambda5_446:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda5.C'
    sources:
      binary: constexpr-lambda5.s
  group: GRPSERIAL
test_constexpr-lambda5_98:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda5.C'
    sources:
      binary: constexpr-lambda5.s
  group: GRPSERIAL
test_constexpr-lambda6_447:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda6.C'
    sources:
      binary: constexpr-lambda6.s
  group: GRPSERIAL
  validate:
    match:
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_constexpr-lambda6_99:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda6.C'
    sources:
      binary: constexpr-lambda6.s
  group: GRPSERIAL
  validate:
    match:
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_constexpr-lambda7_100:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda7.C'
    sources:
      binary: constexpr-lambda7.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non-literal")[^\n]*\n?)+'
test_constexpr-lambda7_448:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda7.C'
    sources:
      binary: constexpr-lambda7.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non-literal")[^\n]*\n?)+'
test_constexpr-lambda8_101:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda8.C'
    sources:
      binary: constexpr-lambda8.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("static")[^\n]*\n?)+'
test_constexpr-lambda8_449:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda8.C'
    sources:
      binary: constexpr-lambda8.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("static")[^\n]*\n?)+'
test_constexpr-lambda9_102:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda9.C'
    sources:
      binary: constexpr-lambda9.s
  group: GRPSERIAL
test_constexpr-lambda9_450:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda9.C'
    sources:
      binary: constexpr-lambda9.s
  group: GRPSERIAL
test_cplusplus_103:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/cplusplus.C'
    sources:
      binary: cplusplus.s
  group: GRPSERIAL
test_cplusplus_451:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/cplusplus.C'
    sources:
      binary: cplusplus.s
  group: GRPSERIAL
test_decomp-bitfield1_104:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp-bitfield1.C'
    sources:
      binary: decomp-bitfield1.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit")[^\n]*\n?)+'
test_decomp-bitfield1_452:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp-bitfield1.C'
    sources:
      binary: decomp-bitfield1.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit")[^\n]*\n?)+'
test_decomp-constexpr1_105:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp-constexpr1.C'
    sources:
      binary: decomp-constexpr1.s
  group: GRPSERIAL
test_decomp-constexpr1_453:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp-constexpr1.C'
    sources:
      binary: decomp-constexpr1.s
  group: GRPSERIAL
test_decomp10_108:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp10.C'
    sources:
      binary: decomp10.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not an integral
          constant expression")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only 1 name provided")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("get")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("get<0>")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("get<0>")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("tuple_element")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("tuple_element")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no type named
          .type")[^\n]*\n?)+'
test_decomp10_456:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp10.C'
    sources:
      binary: decomp10.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not an integral
          constant expression")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only 1 name provided")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("get")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("get<0>")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("get<0>")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("tuple_element")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("tuple_element")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no type named
          .type")[^\n]*\n?)+'
test_decomp11_109:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp11.C'
    sources:
      binary: decomp11.s
  group: GRPSERIAL
test_decomp11_457:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp11.C'
    sources:
      binary: decomp11.s
  group: GRPSERIAL
test_decomp12_110:
  build:
    cflags: -std=c++1z
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp12.C'
    sources:
      binary: ./decomp12.exe
  group: GRPSERIAL
  run:
    cwd: .
test_decomp12_458:
  build:
    cflags: -std=c++1z
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp12.C'
    sources:
      binary: ./decomp12.exe
  group: GRPSERIAL
  run:
    cwd: .
test_decomp13_111:
  build:
    cflags: "-std=gnu++11 -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp13.C'
    sources:
      binary: decomp13.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp13_112:
  build:
    cflags: "-std=gnu++14 -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp13.C'
    sources:
      binary: decomp13.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp13_459:
  build:
    cflags: "-std=gnu++11 -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp13.C'
    sources:
      binary: decomp13.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp13_460:
  build:
    cflags: "-std=gnu++14 -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp13.C'
    sources:
      binary: decomp13.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp14_113:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp14.C'
    sources:
      binary: decomp14.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("due to ambiguity")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("due to ambiguity")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot decompose
          class type \''F\'': both it and its base class \''A\'' have non-static data
          members")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot decompose
          class type \''G\'': its base classes \''A\'' and \''E\'' have non-static
          data members")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''B\'' is an
          ambiguous base of \''K\''")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp14_114:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp14.C'
    sources:
      binary: decomp14.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("due to ambiguity")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("due to ambiguity")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot decompose
          class type \''F\'': both it and its base class \''A\'' have non-static data
          members")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot decompose
          class type \''G\'': its base classes \''A\'' and \''E\'' have non-static
          data members")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''B\'' is an
          ambiguous base of \''K\''")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp14_461:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp14.C'
    sources:
      binary: decomp14.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("due to ambiguity")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("due to ambiguity")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot decompose
          class type \''F\'': both it and its base class \''A\'' have non-static data
          members")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot decompose
          class type \''G\'': its base classes \''A\'' and \''E\'' have non-static
          data members")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''B\'' is an
          ambiguous base of \''K\''")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp14_462:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp14.C'
    sources:
      binary: decomp14.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("due to ambiguity")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("due to ambiguity")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot decompose
          class type \''F\'': both it and its base class \''A\'' have non-static data
          members")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot decompose
          class type \''G\'': its base classes \''A\'' and \''E\'' have non-static
          data members")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''B\'' is an
          ambiguous base of \''K\''")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp15_115:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp15.C'
    sources:
      binary: decomp15.s
  group: GRPSERIAL
test_decomp15_463:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp15.C'
    sources:
      binary: decomp15.s
  group: GRPSERIAL
test_decomp16_116:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp16.C'
    sources:
      binary: decomp16.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_decomp16_464:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp16.C'
    sources:
      binary: decomp16.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_decomp17_117:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp17.C'
    sources:
      binary: decomp17.s
  group: GRPSERIAL
test_decomp17_465:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp17.C'
    sources:
      binary: decomp17.s
  group: GRPSERIAL
test_decomp18_118:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp18.C'
    sources:
      binary: decomp18.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp18_119:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp18.C'
    sources:
      binary: decomp18.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp18_466:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp18.C'
    sources:
      binary: decomp18.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp18_467:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp18.C'
    sources:
      binary: decomp18.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp19_120:
  build:
    cflags: -std=gnu++11
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp19.C'
    sources:
      binary: ./decomp19.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp19_121:
  build:
    cflags: -std=gnu++14
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp19.C'
    sources:
      binary: ./decomp19.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp19_468:
  build:
    cflags: -std=gnu++11
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp19.C'
    sources:
      binary: ./decomp19.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp19_469:
  build:
    cflags: -std=gnu++14
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp19.C'
    sources:
      binary: ./decomp19.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp1_106:
  build:
    cflags: -std=gnu++11
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp1.C'
    sources:
      binary: ./decomp1.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp1_107:
  build:
    cflags: -std=gnu++14
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp1.C'
    sources:
      binary: ./decomp1.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp1_454:
  build:
    cflags: -std=gnu++11
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp1.C'
    sources:
      binary: ./decomp1.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp1_455:
  build:
    cflags: -std=gnu++14
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp1.C'
    sources:
      binary: ./decomp1.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp20_124:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp20.C'
    sources:
      binary: decomp20.s
  group: GRPSERIAL
test_decomp20_472:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp20.C'
    sources:
      binary: decomp20.s
  group: GRPSERIAL
test_decomp21_125:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp21.C'
    sources:
      binary: decomp21.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected primary-expression
          before \''.\'' token")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid initializer
          for structured binding declaration")[^\n]*\n?)+'
test_decomp21_473:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp21.C'
    sources:
      binary: decomp21.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected primary-expression
          before \''.\'' token")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid initializer
          for structured binding declaration")[^\n]*\n?)+'
test_decomp22_126:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp22.C'
    sources:
      binary: decomp22.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp22_127:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp22.C'
    sources:
      binary: decomp22.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp22_474:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp22.C'
    sources:
      binary: decomp22.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp22_475:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp22.C'
    sources:
      binary: decomp22.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp23_128:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp23.C'
    sources:
      binary: decomp23.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp23_129:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp23.C'
    sources:
      binary: decomp23.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp23_476:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp23.C'
    sources:
      binary: decomp23.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp23_477:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp23.C'
    sources:
      binary: decomp23.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp24_130:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp24.C'
    sources:
      binary: decomp24.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot decompose
          lambda closure type")[^\n]*\n?)+'
test_decomp24_131:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp24.C'
    sources:
      binary: decomp24.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot decompose
          lambda closure type")[^\n]*\n?)+'
test_decomp24_478:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp24.C'
    sources:
      binary: decomp24.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot decompose
          lambda closure type")[^\n]*\n?)+'
test_decomp24_479:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp24.C'
    sources:
      binary: decomp24.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot decompose
          lambda closure type")[^\n]*\n?)+'
test_decomp25_132:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp25.C'
    sources:
      binary: decomp25.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot decompose
          non-array non-class type")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot decompose
          non-array non-class type")[^\n]*\n?)+'
test_decomp25_133:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp25.C'
    sources:
      binary: decomp25.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot decompose
          non-array non-class type")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot decompose
          non-array non-class type")[^\n]*\n?)+'
test_decomp25_480:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp25.C'
    sources:
      binary: decomp25.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot decompose
          non-array non-class type")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot decompose
          non-array non-class type")[^\n]*\n?)+'
test_decomp25_481:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp25.C'
    sources:
      binary: decomp25.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot decompose
          non-array non-class type")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot decompose
          non-array non-class type")[^\n]*\n?)+'
test_decomp26_134:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp26.C'
    sources:
      binary: decomp26.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot decompose
          non-array non-class type")[^\n]*\n?)+'
test_decomp26_135:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp26.C'
    sources:
      binary: decomp26.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot decompose
          non-array non-class type")[^\n]*\n?)+'
test_decomp26_482:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp26.C'
    sources:
      binary: decomp26.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot decompose
          non-array non-class type")[^\n]*\n?)+'
test_decomp26_483:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp26.C'
    sources:
      binary: decomp26.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot decompose
          non-array non-class type")[^\n]*\n?)+'
test_decomp27_136:
  build:
    cflags: -std=c++1z
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp27.C'
    sources:
      binary: ./decomp27.exe
  group: GRPSERIAL
  run:
    cwd: .
test_decomp27_484:
  build:
    cflags: -std=c++1z
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp27.C'
    sources:
      binary: ./decomp27.exe
  group: GRPSERIAL
  run:
    cwd: .
test_decomp28_137:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp28.C'
    sources:
      binary: decomp28.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp28_485:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp28.C'
    sources:
      binary: decomp28.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp2_122:
  build:
    cflags: -std=gnu++11
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp2.C'
    sources:
      binary: ./decomp2.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp2_123:
  build:
    cflags: -std=gnu++14
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp2.C'
    sources:
      binary: ./decomp2.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp2_470:
  build:
    cflags: -std=gnu++11
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp2.C'
    sources:
      binary: ./decomp2.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp2_471:
  build:
    cflags: -std=gnu++14
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp2.C'
    sources:
      binary: ./decomp2.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp30_139:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp30.C'
    sources:
      binary: decomp30.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("deducing from
          brace-enclosed initializer list requires")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid initializer
          for structured binding declaration")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid initializer
          for structured binding declaration")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("deducing from
          brace-enclosed initializer list requires")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("deducing from
          brace-enclosed initializer list requires")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid initializer
          for structured binding declaration")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid initializer
          for structured binding declaration")[^\n]*\n?)+'
test_decomp30_487:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp30.C'
    sources:
      binary: decomp30.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("deducing from
          brace-enclosed initializer list requires")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid initializer
          for structured binding declaration")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid initializer
          for structured binding declaration")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("deducing from
          brace-enclosed initializer list requires")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("deducing from
          brace-enclosed initializer list requires")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid initializer
          for structured binding declaration")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid initializer
          for structured binding declaration")[^\n]*\n?)+'
test_decomp32_140:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp32.C'
    sources:
      binary: decomp32.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("1 name provided")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("1 name provided")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("2 names provided")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("3 names provided")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp32_141:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp32.C'
    sources:
      binary: decomp32.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("1 name provided")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("1 name provided")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("2 names provided")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("3 names provided")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp32_488:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp32.C'
    sources:
      binary: decomp32.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("1 name provided")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("1 name provided")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("2 names provided")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("3 names provided")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp32_489:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp32.C'
    sources:
      binary: decomp32.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("1 name provided")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("1 name provided")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("2 names provided")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("3 names provided")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp33_142:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp33.C'
    sources:
      binary: decomp33.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp33_143:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp33.C'
    sources:
      binary: decomp33.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp33_490:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp33.C'
    sources:
      binary: decomp33.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp33_491:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp33.C'
    sources:
      binary: decomp33.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp34_144:
  build:
    cflags: "-std=gnu++11 -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp34.C'
    sources:
      binary: decomp34.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp34_145:
  build:
    cflags: "-std=gnu++14 -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp34.C'
    sources:
      binary: decomp34.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp34_492:
  build:
    cflags: "-std=gnu++11 -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp34.C'
    sources:
      binary: decomp34.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp34_493:
  build:
    cflags: "-std=gnu++14 -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp34.C'
    sources:
      binary: decomp34.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp3_138:
  build:
    cflags: -S
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp3.C'
    sources:
      binary: decomp3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("decomposition
          declaration cannot be declared with type \''int\''")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("decomposition
          declaration cannot be declared with type \''char\''")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("decomposition
          declaration cannot be declared with type \''decltype.auto.\''")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected primary-expression
          before \''decltype\''")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple ref-qualifiers")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("decomposition
          declaration cannot be declared \''constexpr\''")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''friend\''
          used outside of class")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("decomposition
          declaration cannot be declared \''typedef\''")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("decomposition
          declaration cannot be declared \''inline\''")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid use of
          \''restrict\''")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''long long\''
          invalid for \''decomposition\''")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''virtual\''
          outside class declaration")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''explicit\''
          outside class declaration")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("decomposition
          declaration cannot be declared \''static\''")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("decomposition
          declaration cannot be declared \''extern\''")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''p\'' was not
          declared in this scope")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only 3 names
          provided")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("5 names provided")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only 2 names
          provided")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("4 names provided")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("empty decomposition
          declaration")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("2 names provided")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+(:70:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
test_decomp3_486:
  build:
    cflags: -S
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp3.C'
    sources:
      binary: decomp3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("decomposition
          declaration cannot be declared with type \''int\''")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("decomposition
          declaration cannot be declared with type \''char\''")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("decomposition
          declaration cannot be declared with type \''decltype.auto.\''")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected primary-expression
          before \''decltype\''")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple ref-qualifiers")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("decomposition
          declaration cannot be declared \''constexpr\''")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''friend\''
          used outside of class")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("decomposition
          declaration cannot be declared \''typedef\''")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("decomposition
          declaration cannot be declared \''inline\''")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid use of
          \''restrict\''")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''long long\''
          invalid for \''decomposition\''")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''virtual\''
          outside class declaration")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''explicit\''
          outside class declaration")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("decomposition
          declaration cannot be declared \''static\''")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("decomposition
          declaration cannot be declared \''extern\''")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''p\'' was not
          declared in this scope")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only 3 names
          provided")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("5 names provided")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only 2 names
          provided")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("4 names provided")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("empty decomposition
          declaration")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("2 names provided")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+(:70:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
test_decomp4_146:
  build:
    cflags: -S
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp4.C'
    sources:
      binary: decomp4.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot decompose
          class type \''A\'' because it has an anonymous struct member")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot decompose
          class type \''B\'' because it has an anonymous union member")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot decompose
          non-public member \''C::b\'' of \''C\''")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot decompose
          non-public member \''E::a\'' of \''E\''")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot decompose
          class type \''G\'': both it and its base class \''F\'' have non-static data
          members")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot decompose
          class type \''I\'': its base classes \''F\'' and \''H\'' have non-static
          data members")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
test_decomp4_494:
  build:
    cflags: -S
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp4.C'
    sources:
      binary: decomp4.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot decompose
          class type \''A\'' because it has an anonymous struct member")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot decompose
          class type \''B\'' because it has an anonymous union member")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot decompose
          non-public member \''C::b\'' of \''C\''")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot decompose
          non-public member \''E::a\'' of \''E\''")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot decompose
          class type \''G\'': both it and its base class \''F\'' have non-static data
          members")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot decompose
          class type \''I\'': its base classes \''F\'' and \''H\'' have non-static
          data members")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with -std=c..1z or -std=gnu..1z")[^\n]*\n?)+'
test_decomp5_147:
  build:
    cflags: -std=gnu++11
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp5.C'
    sources:
      binary: ./decomp5.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp5_148:
  build:
    cflags: -std=gnu++14
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp5.C'
    sources:
      binary: ./decomp5.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp5_495:
  build:
    cflags: -std=gnu++11
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp5.C'
    sources:
      binary: ./decomp5.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp5_496:
  build:
    cflags: -std=gnu++14
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp5.C'
    sources:
      binary: ./decomp5.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp6_149:
  build:
    cflags: -std=gnu++11
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp6.C'
    sources:
      binary: ./decomp6.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L109:
        expect: true
        expr: '(^|\n)([^\n]+(:109:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+(:73:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp6_150:
  build:
    cflags: -std=gnu++14
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp6.C'
    sources:
      binary: ./decomp6.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L109:
        expect: true
        expr: '(^|\n)([^\n]+(:109:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+(:73:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp6_497:
  build:
    cflags: -std=gnu++11
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp6.C'
    sources:
      binary: ./decomp6.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L109:
        expect: true
        expr: '(^|\n)([^\n]+(:109:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+(:73:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp6_498:
  build:
    cflags: -std=gnu++14
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp6.C'
    sources:
      binary: ./decomp6.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L109:
        expect: true
        expr: '(^|\n)([^\n]+(:109:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+(:73:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp7_151:
  build:
    cflags: -std=gnu++11
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp7.C'
    sources:
      binary: ./decomp7.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp7_152:
  build:
    cflags: -std=gnu++14
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp7.C'
    sources:
      binary: ./decomp7.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp7_499:
  build:
    cflags: -std=gnu++11
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp7.C'
    sources:
      binary: ./decomp7.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp7_500:
  build:
    cflags: -std=gnu++14
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp7.C'
    sources:
      binary: ./decomp7.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp8_153:
  build:
    cflags: -std=gnu++11
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp8.C'
    sources:
      binary: ./decomp8.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp8_154:
  build:
    cflags: -std=gnu++14
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp8.C'
    sources:
      binary: ./decomp8.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp8_501:
  build:
    cflags: -std=gnu++11
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp8.C'
    sources:
      binary: ./decomp8.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp8_502:
  build:
    cflags: -std=gnu++14
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp8.C'
    sources:
      binary: ./decomp8.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("decomposition declaration
          only available with")[^\n]*\n?)+'
test_decomp9_155:
  build:
    cflags: -std=c++1z
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp9.C'
    sources:
      binary: ./decomp9.exe
  group: GRPSERIAL
  run:
    cwd: .
test_decomp9_503:
  build:
    cflags: -std=c++1z
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp9.C'
    sources:
      binary: ./decomp9.exe
  group: GRPSERIAL
  run:
    cwd: .
test_direct-enum-init1_156:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/direct-enum-init1.C'
    sources:
      binary: direct-enum-init1.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.0e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.\\[0-9]*e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L105:
        expect: true
        expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''D\'' in initialization")[^\n]*\n?)+'
      L107:
        expect: true
        expr: '(^|\n)([^\n]+:107:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''-4\'' from \''int\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L109:
        expect: true
        expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' for argument")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("braces around
          scalar initializer for type \''E\''")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.0e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L118:
        expect: true
        expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''B\'' in initialization")[^\n]*\n?)+'
      L119:
        expect: true
        expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''4.0e.0\'' from \''double\'' to \''short int\'' inside")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''long int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''short int\'' to \''B\''")[^\n]*\n?)+'
      L122:
        expect: true
        expr: '(^|\n)([^\n]+:122:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L123:
        expect: true
        expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \\[^\\n\\r]* from \''int\'' to \''short int\'' inside")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+:124:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''long long int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''ll\'' from \''long long int\'' to \''int\'' inside")[^\n]*\n?)+'
      L126:
        expect: true
        expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''short int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+:133:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.0e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L143:
        expect: true
        expr: '(^|\n)([^\n]+:143:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''A\''")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+:144:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L145:
        expect: true
        expr: '(^|\n)([^\n]+:145:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''C\'' in initialization")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''3.0e.0f\'' from \''float\'' to \''int\'' inside")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''D\'' in initialization")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+:155:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''A\''")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid cast
          from type \''T\'' to type \''D\''")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''T\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L160:
        expect: true
        expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid cast
          from type \''T\'' to type \''D\''")[^\n]*\n?)+'
      L161:
        expect: true
        expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L162:
        expect: true
        expr: '(^|\n)([^\n]+:162:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''long int\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''A\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+:166:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L167:
        expect: true
        expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''-1\'' from \''int\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L168:
        expect: true
        expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L169:
        expect: true
        expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.0e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L170:
        expect: true
        expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L171:
        expect: true
        expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.\\[0-9]*e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+:172:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L173:
        expect: true
        expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L174:
        expect: true
        expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''D\'' in initialization")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''-4\'' from \''int\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+:177:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' for argument")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L179:
        expect: true
        expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("braces around
          scalar initializer for type \''E\''")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L181:
        expect: true
        expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L182:
        expect: true
        expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.0e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''B\'' in initialization")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''4.0e.0\'' from \''double\'' to \''short int\'' inside")[^\n]*\n?)+'
      L188:
        expect: true
        expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''long int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L189:
        expect: true
        expr: '(^|\n)([^\n]+:189:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''short int\'' to \''B\''")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L191:
        expect: true
        expr: '(^|\n)([^\n]+:191:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \\[^\\n\\r]* from \''int\'' to \''short int\'' inside")[^\n]*\n?)+'
      L192:
        expect: true
        expr: '(^|\n)([^\n]+:192:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''long long int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''ll\'' from \''long long int\'' to \''int\'' inside")[^\n]*\n?)+'
      L194:
        expect: true
        expr: '(^|\n)([^\n]+:194:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''short int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L195:
        expect: true
        expr: '(^|\n)([^\n]+:195:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''A\''")[^\n]*\n?)+'
      L201:
        expect: true
        expr: '(^|\n)([^\n]+:201:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L202:
        expect: true
        expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L203:
        expect: true
        expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.0e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L211:
        expect: true
        expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''A\''")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L213:
        expect: true
        expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''C\'' in initialization")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''3.0e.0f\'' from \''float\'' to \''int\'' inside")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''D\'' in initialization")[^\n]*\n?)+'
      L224:
        expect: true
        expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''A\''")[^\n]*\n?)+'
      L225:
        expect: true
        expr: '(^|\n)([^\n]+:225:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L226:
        expect: true
        expr: '(^|\n)([^\n]+:226:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''C\'' in initialization")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''3.0e.0f\'' from \''float\'' to \''int\'' inside")[^\n]*\n?)+'
      L228:
        expect: true
        expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''D\'' in initialization")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid cast
          from type \''T\'' to type \''D\''")[^\n]*\n?)+'
      L232:
        expect: true
        expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''A\''")[^\n]*\n?)+'
      L233:
        expect: true
        expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L234:
        expect: true
        expr: '(^|\n)([^\n]+:234:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''C\'' in initialization")[^\n]*\n?)+'
      L235:
        expect: true
        expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''3.0e.0f\'' from \''float\'' to \''int\'' inside")[^\n]*\n?)+'
      L236:
        expect: true
        expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''D\'' in initialization")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''T\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid cast
          from type \''T\'' to type \''D\''")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''long int\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''A\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''-1\'' from \''int\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.0e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.\\[0-9]*e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''D\'' in initialization")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''-4\'' from \''int\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' for argument")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("braces around
          scalar initializer for type \''E\''")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.0e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''B\'' in initialization")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''4.0e.0\'' from \''double\'' to \''short int\'' inside")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''long int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''short int\'' to \''B\''")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \\[^\\n\\r]* from \''int\'' to \''short int\'' inside")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''long long int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''ll\'' from \''long long int\'' to \''int\'' inside")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''short int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.0e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("list-initializer
          for non-class type must not be parenthesized")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''A\''")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''C\'' in initialization")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''3.0e.0f\'' from \''float\'' to \''int\'' inside")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''D\'' in initialization")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''A\''")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid cast
          from type \''T\'' to type \''D\''")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''T\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid cast
          from type \''T\'' to type \''D\''")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''long int\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''A\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''-1\'' from \''int\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
test_direct-enum-init1_157:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/direct-enum-init1.C'
    sources:
      binary: direct-enum-init1.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.0e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.\\[0-9]*e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L105:
        expect: true
        expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''D\'' in initialization")[^\n]*\n?)+'
      L107:
        expect: true
        expr: '(^|\n)([^\n]+:107:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''-4\'' from \''int\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L109:
        expect: true
        expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' for argument")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("braces around
          scalar initializer for type \''E\''")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.0e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L118:
        expect: true
        expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''B\'' in initialization")[^\n]*\n?)+'
      L119:
        expect: true
        expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''4.0e.0\'' from \''double\'' to \''short int\'' inside")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''long int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''short int\'' to \''B\''")[^\n]*\n?)+'
      L122:
        expect: true
        expr: '(^|\n)([^\n]+:122:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L123:
        expect: true
        expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \\[^\\n\\r]* from \''int\'' to \''short int\'' inside")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+:124:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''long long int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''ll\'' from \''long long int\'' to \''int\'' inside")[^\n]*\n?)+'
      L126:
        expect: true
        expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''short int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+:133:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.0e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L143:
        expect: true
        expr: '(^|\n)([^\n]+:143:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''A\''")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+:144:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L145:
        expect: true
        expr: '(^|\n)([^\n]+:145:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''C\'' in initialization")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''3.0e.0f\'' from \''float\'' to \''int\'' inside")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''D\'' in initialization")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+:155:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''A\''")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid cast
          from type \''T\'' to type \''D\''")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''T\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L160:
        expect: true
        expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid cast
          from type \''T\'' to type \''D\''")[^\n]*\n?)+'
      L161:
        expect: true
        expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L162:
        expect: true
        expr: '(^|\n)([^\n]+:162:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''long int\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''A\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+:166:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L167:
        expect: true
        expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''-1\'' from \''int\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L168:
        expect: true
        expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L169:
        expect: true
        expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.0e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L170:
        expect: true
        expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L171:
        expect: true
        expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.\\[0-9]*e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+:172:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L173:
        expect: true
        expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L174:
        expect: true
        expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''D\'' in initialization")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''-4\'' from \''int\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+:177:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' for argument")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L179:
        expect: true
        expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("braces around
          scalar initializer for type \''E\''")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L181:
        expect: true
        expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L182:
        expect: true
        expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.0e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''B\'' in initialization")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''4.0e.0\'' from \''double\'' to \''short int\'' inside")[^\n]*\n?)+'
      L188:
        expect: true
        expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''long int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L189:
        expect: true
        expr: '(^|\n)([^\n]+:189:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''short int\'' to \''B\''")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L191:
        expect: true
        expr: '(^|\n)([^\n]+:191:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \\[^\\n\\r]* from \''int\'' to \''short int\'' inside")[^\n]*\n?)+'
      L192:
        expect: true
        expr: '(^|\n)([^\n]+:192:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''long long int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''ll\'' from \''long long int\'' to \''int\'' inside")[^\n]*\n?)+'
      L194:
        expect: true
        expr: '(^|\n)([^\n]+:194:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''short int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L195:
        expect: true
        expr: '(^|\n)([^\n]+:195:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''A\''")[^\n]*\n?)+'
      L201:
        expect: true
        expr: '(^|\n)([^\n]+:201:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L202:
        expect: true
        expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L203:
        expect: true
        expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.0e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L211:
        expect: true
        expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''A\''")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L213:
        expect: true
        expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''C\'' in initialization")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''3.0e.0f\'' from \''float\'' to \''int\'' inside")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''D\'' in initialization")[^\n]*\n?)+'
      L224:
        expect: true
        expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''A\''")[^\n]*\n?)+'
      L225:
        expect: true
        expr: '(^|\n)([^\n]+:225:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L226:
        expect: true
        expr: '(^|\n)([^\n]+:226:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''C\'' in initialization")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''3.0e.0f\'' from \''float\'' to \''int\'' inside")[^\n]*\n?)+'
      L228:
        expect: true
        expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''D\'' in initialization")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid cast
          from type \''T\'' to type \''D\''")[^\n]*\n?)+'
      L232:
        expect: true
        expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''A\''")[^\n]*\n?)+'
      L233:
        expect: true
        expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L234:
        expect: true
        expr: '(^|\n)([^\n]+:234:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''C\'' in initialization")[^\n]*\n?)+'
      L235:
        expect: true
        expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''3.0e.0f\'' from \''float\'' to \''int\'' inside")[^\n]*\n?)+'
      L236:
        expect: true
        expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''D\'' in initialization")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''T\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid cast
          from type \''T\'' to type \''D\''")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''long int\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''A\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''-1\'' from \''int\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.0e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.\\[0-9]*e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''D\'' in initialization")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''-4\'' from \''int\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' for argument")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("braces around
          scalar initializer for type \''E\''")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.0e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''B\'' in initialization")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''4.0e.0\'' from \''double\'' to \''short int\'' inside")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''long int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''short int\'' to \''B\''")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \\[^\\n\\r]* from \''int\'' to \''short int\'' inside")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''long long int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''ll\'' from \''long long int\'' to \''int\'' inside")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''short int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.0e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("list-initializer
          for non-class type must not be parenthesized")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''A\''")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''C\'' in initialization")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''3.0e.0f\'' from \''float\'' to \''int\'' inside")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''D\'' in initialization")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''A\''")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid cast
          from type \''T\'' to type \''D\''")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''T\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid cast
          from type \''T\'' to type \''D\''")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''long int\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''A\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''-1\'' from \''int\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
test_direct-enum-init1_504:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/direct-enum-init1.C'
    sources:
      binary: direct-enum-init1.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.0e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.\\[0-9]*e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L105:
        expect: true
        expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''D\'' in initialization")[^\n]*\n?)+'
      L107:
        expect: true
        expr: '(^|\n)([^\n]+:107:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''-4\'' from \''int\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L109:
        expect: true
        expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' for argument")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("braces around
          scalar initializer for type \''E\''")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.0e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L118:
        expect: true
        expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''B\'' in initialization")[^\n]*\n?)+'
      L119:
        expect: true
        expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''4.0e.0\'' from \''double\'' to \''short int\'' inside")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''long int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''short int\'' to \''B\''")[^\n]*\n?)+'
      L122:
        expect: true
        expr: '(^|\n)([^\n]+:122:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L123:
        expect: true
        expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \\[^\\n\\r]* from \''int\'' to \''short int\'' inside")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+:124:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''long long int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''ll\'' from \''long long int\'' to \''int\'' inside")[^\n]*\n?)+'
      L126:
        expect: true
        expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''short int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+:133:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.0e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L143:
        expect: true
        expr: '(^|\n)([^\n]+:143:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''A\''")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+:144:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L145:
        expect: true
        expr: '(^|\n)([^\n]+:145:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''C\'' in initialization")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''3.0e.0f\'' from \''float\'' to \''int\'' inside")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''D\'' in initialization")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+:155:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''A\''")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid cast
          from type \''T\'' to type \''D\''")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''T\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L160:
        expect: true
        expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid cast
          from type \''T\'' to type \''D\''")[^\n]*\n?)+'
      L161:
        expect: true
        expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L162:
        expect: true
        expr: '(^|\n)([^\n]+:162:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''long int\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''A\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+:166:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L167:
        expect: true
        expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''-1\'' from \''int\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L168:
        expect: true
        expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L169:
        expect: true
        expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.0e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L170:
        expect: true
        expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L171:
        expect: true
        expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.\\[0-9]*e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+:172:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L173:
        expect: true
        expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L174:
        expect: true
        expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''D\'' in initialization")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''-4\'' from \''int\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+:177:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' for argument")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L179:
        expect: true
        expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("braces around
          scalar initializer for type \''E\''")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L181:
        expect: true
        expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L182:
        expect: true
        expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.0e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''B\'' in initialization")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''4.0e.0\'' from \''double\'' to \''short int\'' inside")[^\n]*\n?)+'
      L188:
        expect: true
        expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''long int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L189:
        expect: true
        expr: '(^|\n)([^\n]+:189:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''short int\'' to \''B\''")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L191:
        expect: true
        expr: '(^|\n)([^\n]+:191:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \\[^\\n\\r]* from \''int\'' to \''short int\'' inside")[^\n]*\n?)+'
      L192:
        expect: true
        expr: '(^|\n)([^\n]+:192:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''long long int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''ll\'' from \''long long int\'' to \''int\'' inside")[^\n]*\n?)+'
      L194:
        expect: true
        expr: '(^|\n)([^\n]+:194:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''short int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L195:
        expect: true
        expr: '(^|\n)([^\n]+:195:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''A\''")[^\n]*\n?)+'
      L201:
        expect: true
        expr: '(^|\n)([^\n]+:201:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L202:
        expect: true
        expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L203:
        expect: true
        expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.0e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L211:
        expect: true
        expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''A\''")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L213:
        expect: true
        expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''C\'' in initialization")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''3.0e.0f\'' from \''float\'' to \''int\'' inside")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''D\'' in initialization")[^\n]*\n?)+'
      L224:
        expect: true
        expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''A\''")[^\n]*\n?)+'
      L225:
        expect: true
        expr: '(^|\n)([^\n]+:225:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L226:
        expect: true
        expr: '(^|\n)([^\n]+:226:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''C\'' in initialization")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''3.0e.0f\'' from \''float\'' to \''int\'' inside")[^\n]*\n?)+'
      L228:
        expect: true
        expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''D\'' in initialization")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid cast
          from type \''T\'' to type \''D\''")[^\n]*\n?)+'
      L232:
        expect: true
        expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''A\''")[^\n]*\n?)+'
      L233:
        expect: true
        expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L234:
        expect: true
        expr: '(^|\n)([^\n]+:234:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''C\'' in initialization")[^\n]*\n?)+'
      L235:
        expect: true
        expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''3.0e.0f\'' from \''float\'' to \''int\'' inside")[^\n]*\n?)+'
      L236:
        expect: true
        expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''D\'' in initialization")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''T\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid cast
          from type \''T\'' to type \''D\''")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''long int\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''A\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''-1\'' from \''int\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.0e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.\\[0-9]*e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''D\'' in initialization")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''-4\'' from \''int\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' for argument")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("braces around
          scalar initializer for type \''E\''")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.0e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''B\'' in initialization")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''4.0e.0\'' from \''double\'' to \''short int\'' inside")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''long int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''short int\'' to \''B\''")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \\[^\\n\\r]* from \''int\'' to \''short int\'' inside")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''long long int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''ll\'' from \''long long int\'' to \''int\'' inside")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''short int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.0e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("list-initializer
          for non-class type must not be parenthesized")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''A\''")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''C\'' in initialization")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''3.0e.0f\'' from \''float\'' to \''int\'' inside")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''D\'' in initialization")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''A\''")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid cast
          from type \''T\'' to type \''D\''")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''T\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid cast
          from type \''T\'' to type \''D\''")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''long int\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''A\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''-1\'' from \''int\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
test_direct-enum-init1_505:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/direct-enum-init1.C'
    sources:
      binary: direct-enum-init1.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.0e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.\\[0-9]*e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L105:
        expect: true
        expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''D\'' in initialization")[^\n]*\n?)+'
      L107:
        expect: true
        expr: '(^|\n)([^\n]+:107:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''-4\'' from \''int\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L109:
        expect: true
        expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' for argument")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("braces around
          scalar initializer for type \''E\''")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.0e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L118:
        expect: true
        expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''B\'' in initialization")[^\n]*\n?)+'
      L119:
        expect: true
        expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''4.0e.0\'' from \''double\'' to \''short int\'' inside")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''long int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''short int\'' to \''B\''")[^\n]*\n?)+'
      L122:
        expect: true
        expr: '(^|\n)([^\n]+:122:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L123:
        expect: true
        expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \\[^\\n\\r]* from \''int\'' to \''short int\'' inside")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+:124:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''long long int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''ll\'' from \''long long int\'' to \''int\'' inside")[^\n]*\n?)+'
      L126:
        expect: true
        expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''short int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+:133:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.0e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L143:
        expect: true
        expr: '(^|\n)([^\n]+:143:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''A\''")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+:144:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L145:
        expect: true
        expr: '(^|\n)([^\n]+:145:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''C\'' in initialization")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''3.0e.0f\'' from \''float\'' to \''int\'' inside")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''D\'' in initialization")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+:155:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''A\''")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid cast
          from type \''T\'' to type \''D\''")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''T\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L160:
        expect: true
        expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid cast
          from type \''T\'' to type \''D\''")[^\n]*\n?)+'
      L161:
        expect: true
        expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L162:
        expect: true
        expr: '(^|\n)([^\n]+:162:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''long int\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''A\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+:166:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L167:
        expect: true
        expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''-1\'' from \''int\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L168:
        expect: true
        expr: '(^|\n)([^\n]+:168:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L169:
        expect: true
        expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.0e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L170:
        expect: true
        expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L171:
        expect: true
        expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.\\[0-9]*e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+:172:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L173:
        expect: true
        expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L174:
        expect: true
        expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''D\'' in initialization")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''-4\'' from \''int\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L177:
        expect: true
        expr: '(^|\n)([^\n]+:177:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' for argument")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L179:
        expect: true
        expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("braces around
          scalar initializer for type \''E\''")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L181:
        expect: true
        expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L182:
        expect: true
        expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.0e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''B\'' in initialization")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''4.0e.0\'' from \''double\'' to \''short int\'' inside")[^\n]*\n?)+'
      L188:
        expect: true
        expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''long int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L189:
        expect: true
        expr: '(^|\n)([^\n]+:189:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''short int\'' to \''B\''")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L191:
        expect: true
        expr: '(^|\n)([^\n]+:191:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \\[^\\n\\r]* from \''int\'' to \''short int\'' inside")[^\n]*\n?)+'
      L192:
        expect: true
        expr: '(^|\n)([^\n]+:192:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''long long int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''ll\'' from \''long long int\'' to \''int\'' inside")[^\n]*\n?)+'
      L194:
        expect: true
        expr: '(^|\n)([^\n]+:194:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''short int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L195:
        expect: true
        expr: '(^|\n)([^\n]+:195:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''A\''")[^\n]*\n?)+'
      L201:
        expect: true
        expr: '(^|\n)([^\n]+:201:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L202:
        expect: true
        expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L203:
        expect: true
        expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.0e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L211:
        expect: true
        expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''A\''")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L213:
        expect: true
        expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''C\'' in initialization")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''3.0e.0f\'' from \''float\'' to \''int\'' inside")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''D\'' in initialization")[^\n]*\n?)+'
      L224:
        expect: true
        expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''A\''")[^\n]*\n?)+'
      L225:
        expect: true
        expr: '(^|\n)([^\n]+:225:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L226:
        expect: true
        expr: '(^|\n)([^\n]+:226:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''C\'' in initialization")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''3.0e.0f\'' from \''float\'' to \''int\'' inside")[^\n]*\n?)+'
      L228:
        expect: true
        expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''D\'' in initialization")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid cast
          from type \''T\'' to type \''D\''")[^\n]*\n?)+'
      L232:
        expect: true
        expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''A\''")[^\n]*\n?)+'
      L233:
        expect: true
        expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L234:
        expect: true
        expr: '(^|\n)([^\n]+:234:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''C\'' in initialization")[^\n]*\n?)+'
      L235:
        expect: true
        expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''3.0e.0f\'' from \''float\'' to \''int\'' inside")[^\n]*\n?)+'
      L236:
        expect: true
        expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''D\'' in initialization")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''T\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid cast
          from type \''T\'' to type \''D\''")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''long int\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''A\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''-1\'' from \''int\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.0e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.\\[0-9]*e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''D\'' in initialization")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''-4\'' from \''int\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' for argument")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("braces around
          scalar initializer for type \''E\''")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.0e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''double\'' to \''B\'' in initialization")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''4.0e.0\'' from \''double\'' to \''short int\'' inside")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''long int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''short int\'' to \''B\''")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \\[^\\n\\r]* from \''int\'' to \''short int\'' inside")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''long long int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''ll\'' from \''long long int\'' to \''int\'' inside")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''short int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''C\'' in initialization")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''5.0e.0\'' from \''double\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("list-initializer
          for non-class type must not be parenthesized")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''E\'' in initialization")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''A\''")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''C\'' in initialization")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''3.0e.0f\'' from \''float\'' to \''int\'' inside")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \\[^\\n\\r]* to \''D\'' in initialization")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''A\''")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from \''int\'' to \''B\''")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid cast
          from type \''T\'' to type \''D\''")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''T\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid cast
          from type \''T\'' to type \''D\''")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''long int\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''A\'' to \''D\'' in initialization")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot convert
          \''int\'' to \''E\'' in initialization")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("narrowing conversion
          of \''-1\'' from \''int\'' to \''unsigned char\'' inside")[^\n]*\n?)+'
test_elide1_158:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/elide1.C'
    sources:
      binary: elide1.s
  group: GRPSERIAL
test_elide1_506:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/elide1.C'
    sources:
      binary: elide1.s
  group: GRPSERIAL
test_elide2_159:
  build:
    cflags: -std=c++11  -pedantic-errors -Wno-long-long
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/elide2.C'
    sources:
      binary: ./elide2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_elide2_160:
  build:
    cflags: -std=c++14  -pedantic-errors -Wno-long-long
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/elide2.C'
    sources:
      binary: ./elide2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_elide2_507:
  build:
    cflags: -std=c++11  -pedantic-errors -Wno-long-long
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/elide2.C'
    sources:
      binary: ./elide2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_elide2_508:
  build:
    cflags: -std=c++14  -pedantic-errors -Wno-long-long
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/elide2.C'
    sources:
      binary: ./elide2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_eval-order2_161:
  build:
    cflags: -std=c++1z
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/eval-order2.C'
    sources:
      binary: ./eval-order2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_eval-order2_509:
  build:
    cflags: -std=c++1z
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/eval-order2.C'
    sources:
      binary: ./eval-order2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_eval-order3_162:
  build:
    cflags: -std=c++1z
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/eval-order3.C'
    sources:
      binary: ./eval-order3.exe
  group: GRPSERIAL
  run:
    cwd: .
test_eval-order3_510:
  build:
    cflags: -std=c++1z
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/eval-order3.C'
    sources:
      binary: ./eval-order3.exe
  group: GRPSERIAL
  run:
    cwd: .
test_eval-order4_163:
  build:
    cflags: -std=gnu++98 -fstrong-eval-order
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/eval-order4.C'
    sources:
      binary: ./eval-order4.exe
  group: GRPSERIAL
  run:
    cwd: .
test_eval-order4_164:
  build:
    cflags: -std=gnu++11 -fstrong-eval-order
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/eval-order4.C'
    sources:
      binary: ./eval-order4.exe
  group: GRPSERIAL
  run:
    cwd: .
test_eval-order4_165:
  build:
    cflags: -std=gnu++14 -fstrong-eval-order
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/eval-order4.C'
    sources:
      binary: ./eval-order4.exe
  group: GRPSERIAL
  run:
    cwd: .
test_eval-order4_511:
  build:
    cflags: -std=gnu++98 -fstrong-eval-order
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/eval-order4.C'
    sources:
      binary: ./eval-order4.exe
  group: GRPSERIAL
  run:
    cwd: .
test_eval-order4_512:
  build:
    cflags: -std=gnu++11 -fstrong-eval-order
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/eval-order4.C'
    sources:
      binary: ./eval-order4.exe
  group: GRPSERIAL
  run:
    cwd: .
test_eval-order4_513:
  build:
    cflags: -std=gnu++14 -fstrong-eval-order
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/eval-order4.C'
    sources:
      binary: ./eval-order4.exe
  group: GRPSERIAL
  run:
    cwd: .
test_fallthrough1_166:
  build:
    cflags: "-std=c++1z -Wextra -Wall -Wpedantic\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fallthrough1.C'
    sources:
      binary: fallthrough1.s
  group: GRPSERIAL
test_fallthrough1_514:
  build:
    cflags: "-std=c++1z -Wextra -Wall -Wpedantic\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fallthrough1.C'
    sources:
      binary: fallthrough1.s
  group: GRPSERIAL
test_feat-cxx1z_167:
  build:
    cflags: "-std=c++1z -I./g++.dg/cpp1y -I./g++.dg/cpp1y/testinc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/feat-cxx1z.C'
    sources:
      binary: feat-cxx1z.s
  group: GRPSERIAL
test_feat-cxx1z_515:
  build:
    cflags: "-std=c++1z -I./g++.dg/cpp1y -I./g++.dg/cpp1y/testinc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/feat-cxx1z.C'
    sources:
      binary: feat-cxx1z.s
  group: GRPSERIAL
test_fold-ice1_168:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fold-ice1.C'
    sources:
      binary: fold-ice1.s
  group: GRPSERIAL
test_fold-ice1_516:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fold-ice1.C'
    sources:
      binary: fold-ice1.s
  group: GRPSERIAL
test_fold-mangle_169:
  build:
    cflags: "-std=c++1z -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fold-mangle.C'
    sources:
      binary: fold-mangle.s
  group: GRPSERIAL
test_fold-mangle_517:
  build:
    cflags: "-std=c++1z -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fold-mangle.C'
    sources:
      binary: fold-mangle.s
  group: GRPSERIAL
test_fold1_170:
  build:
    cflags: -std=c++1z
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fold1.C'
    sources:
      binary: ./fold1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_fold1_518:
  build:
    cflags: -std=c++1z
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fold1.C'
    sources:
      binary: ./fold1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_fold2_171:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fold2.C'
    sources:
      binary: fold2.s
  group: GRPSERIAL
test_fold2_519:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fold2.C'
    sources:
      binary: fold2.s
  group: GRPSERIAL
test_fold3_172:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fold3.C'
    sources:
      binary: fold3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("empty")[^\n]*\n?)+'
test_fold3_520:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fold3.C'
    sources:
      binary: fold3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("empty")[^\n]*\n?)+'
test_fold4_173:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fold4.C'
    sources:
      binary: fold4.s
  group: GRPSERIAL
test_fold4_521:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fold4.C'
    sources:
      binary: fold4.s
  group: GRPSERIAL
test_fold5_174:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fold5.C'
    sources:
      binary: fold5.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("fold")[^\n]*\n?)+'
test_fold5_175:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fold5.C'
    sources:
      binary: fold5.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("fold")[^\n]*\n?)+'
test_fold5_522:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fold5.C'
    sources:
      binary: fold5.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("fold")[^\n]*\n?)+'
test_fold5_523:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fold5.C'
    sources:
      binary: fold5.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("fold")[^\n]*\n?)+'
test_fold6_176:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fold6.C'
    sources:
      binary: fold6.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_fold6_524:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fold6.C'
    sources:
      binary: fold6.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_fold7_177:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fold7.C'
    sources:
      binary: fold7.s
  group: GRPSERIAL
test_fold7_525:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fold7.C'
    sources:
      binary: fold7.s
  group: GRPSERIAL
test_fold7a_178:
  build:
    cflags: "-pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fold7a.C'
    sources:
      binary: fold7a.s
  group: GRPSERIAL
test_fold7a_526:
  build:
    cflags: "-pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fold7a.C'
    sources:
      binary: fold7a.s
  group: GRPSERIAL
test_fold8_179:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fold8.C'
    sources:
      binary: fold8.s
  group: GRPSERIAL
test_fold8_527:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fold8.C'
    sources:
      binary: fold8.s
  group: GRPSERIAL
test_fold9_180:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fold9.C'
    sources:
      binary: fold9.s
  group: GRPSERIAL
test_fold9_528:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fold9.C'
    sources:
      binary: fold9.s
  group: GRPSERIAL
test_gen-attrs1_181:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/gen-attrs1.C'
    sources:
      binary: gen-attrs1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("attribute using prefix
          only available")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("\''foo::using\'' scoped
          attribute directive ignored")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("attribute using prefix
          only available")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("attribute using
          prefix used together with scoped attribute token")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("attribute using prefix
          only available")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("attribute using
          prefix used together with scoped attribute token")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("attribute using prefix
          only available")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("attribute using prefix
          only available")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("\''using::using\''
          scoped attribute directive ignored")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("attribute using prefix
          only available")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("\''bitand::bitor\''
          scoped attribute directive ignored")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("\''bitand::xor\''
          scoped attribute directive ignored")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("attribute using prefix
          only available")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("\''foo::bar\'' scoped
          attribute directive ignored")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("\''foo::baz\'' scoped
          attribute directive ignored")[^\n]*\n?)+'
test_gen-attrs1_182:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/gen-attrs1.C'
    sources:
      binary: gen-attrs1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("attribute using prefix
          only available")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("\''foo::using\'' scoped
          attribute directive ignored")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("attribute using prefix
          only available")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("attribute using
          prefix used together with scoped attribute token")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("attribute using prefix
          only available")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("attribute using
          prefix used together with scoped attribute token")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("attribute using prefix
          only available")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("attribute using prefix
          only available")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("\''using::using\''
          scoped attribute directive ignored")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("attribute using prefix
          only available")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("\''bitand::bitor\''
          scoped attribute directive ignored")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("\''bitand::xor\''
          scoped attribute directive ignored")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("attribute using prefix
          only available")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("\''foo::bar\'' scoped
          attribute directive ignored")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("\''foo::baz\'' scoped
          attribute directive ignored")[^\n]*\n?)+'
test_gen-attrs1_529:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/gen-attrs1.C'
    sources:
      binary: gen-attrs1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("attribute using prefix
          only available")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("\''foo::using\'' scoped
          attribute directive ignored")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("attribute using prefix
          only available")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("attribute using
          prefix used together with scoped attribute token")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("attribute using prefix
          only available")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("attribute using
          prefix used together with scoped attribute token")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("attribute using prefix
          only available")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("attribute using prefix
          only available")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("\''using::using\''
          scoped attribute directive ignored")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("attribute using prefix
          only available")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("\''bitand::bitor\''
          scoped attribute directive ignored")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("\''bitand::xor\''
          scoped attribute directive ignored")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("attribute using prefix
          only available")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("\''foo::bar\'' scoped
          attribute directive ignored")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("\''foo::baz\'' scoped
          attribute directive ignored")[^\n]*\n?)+'
test_gen-attrs1_530:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/gen-attrs1.C'
    sources:
      binary: gen-attrs1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("attribute using prefix
          only available")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("\''foo::using\'' scoped
          attribute directive ignored")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("attribute using prefix
          only available")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("attribute using
          prefix used together with scoped attribute token")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("attribute using prefix
          only available")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("attribute using
          prefix used together with scoped attribute token")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("attribute using prefix
          only available")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("attribute using prefix
          only available")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("\''using::using\''
          scoped attribute directive ignored")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("attribute using prefix
          only available")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("\''bitand::bitor\''
          scoped attribute directive ignored")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("\''bitand::xor\''
          scoped attribute directive ignored")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("attribute using prefix
          only available")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("\''foo::bar\'' scoped
          attribute directive ignored")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("\''foo::baz\'' scoped
          attribute directive ignored")[^\n]*\n?)+'
test_has-unique-obj-representations1_183:
  build:
    cflags: "-std=c++11 -pedantic-errors -Wno-long-long -Wno-error=pedantic\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/has-unique-obj-representations1.C'
    sources:
      binary: has-unique-obj-representations1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("forbids flexible array
          member")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("exceeds its type")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("exceeds its type")[^\n]*\n?)+'
test_has-unique-obj-representations1_184:
  build:
    cflags: "-std=c++14 -pedantic-errors -Wno-long-long -Wno-error=pedantic\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/has-unique-obj-representations1.C'
    sources:
      binary: has-unique-obj-representations1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("forbids flexible array
          member")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("exceeds its type")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("exceeds its type")[^\n]*\n?)+'
test_has-unique-obj-representations1_531:
  build:
    cflags: "-std=c++11 -pedantic-errors -Wno-long-long -Wno-error=pedantic\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/has-unique-obj-representations1.C'
    sources:
      binary: has-unique-obj-representations1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("forbids flexible array
          member")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("exceeds its type")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("exceeds its type")[^\n]*\n?)+'
test_has-unique-obj-representations1_532:
  build:
    cflags: "-std=c++14 -pedantic-errors -Wno-long-long -Wno-error=pedantic\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/has-unique-obj-representations1.C'
    sources:
      binary: has-unique-obj-representations1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("forbids flexible array
          member")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("exceeds its type")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("exceeds its type")[^\n]*\n?)+'
test_has-unique-obj-representations2_185:
  build:
    cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/has-unique-obj-representations2.C'
    sources:
      binary: has-unique-obj-representations2.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete type")[^\n]*\n?)+'
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete type")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("flexible array
          member in union")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete type")[^\n]*\n?)+'
test_has-unique-obj-representations2_186:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/has-unique-obj-representations2.C'
    sources:
      binary: has-unique-obj-representations2.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete type")[^\n]*\n?)+'
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete type")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("flexible array
          member in union")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete type")[^\n]*\n?)+'
test_has-unique-obj-representations2_187:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/has-unique-obj-representations2.C'
    sources:
      binary: has-unique-obj-representations2.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete type")[^\n]*\n?)+'
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete type")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("flexible array
          member in union")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete type")[^\n]*\n?)+'
test_has-unique-obj-representations2_533:
  build:
    cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/has-unique-obj-representations2.C'
    sources:
      binary: has-unique-obj-representations2.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete type")[^\n]*\n?)+'
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete type")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("flexible array
          member in union")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete type")[^\n]*\n?)+'
test_has-unique-obj-representations2_534:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/has-unique-obj-representations2.C'
    sources:
      binary: has-unique-obj-representations2.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete type")[^\n]*\n?)+'
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete type")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("flexible array
          member in union")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete type")[^\n]*\n?)+'
test_has-unique-obj-representations2_535:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/has-unique-obj-representations2.C'
    sources:
      binary: has-unique-obj-representations2.s
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete type")[^\n]*\n?)+'
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete type")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("flexible array
          member in union")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete type")[^\n]*\n?)+'
test_inh-ctor1_188:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor1.C'
    sources:
      binary: inh-ctor1.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("direct")[^\n]*\n?)+'
test_inh-ctor1_189:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor1.C'
    sources:
      binary: inh-ctor1.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("direct")[^\n]*\n?)+'
test_inh-ctor1_536:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor1.C'
    sources:
      binary: inh-ctor1.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("direct")[^\n]*\n?)+'
test_inh-ctor1_537:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor1.C'
    sources:
      binary: inh-ctor1.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("direct")[^\n]*\n?)+'
test_inh-ctor22_190:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor22.C'
    sources:
      binary: inh-ctor22.s
  group: GRPSERIAL
  validate:
    match:
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_inh-ctor22_191:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor22.C'
    sources:
      binary: inh-ctor22.s
  group: GRPSERIAL
  validate:
    match:
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_inh-ctor22_538:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor22.C'
    sources:
      binary: inh-ctor22.s
  group: GRPSERIAL
  validate:
    match:
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_inh-ctor22_539:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor22.C'
    sources:
      binary: inh-ctor22.s
  group: GRPSERIAL
  validate:
    match:
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_inh-ctor23_192:
  build:
    cflags: "-std=gnu++11 -fnew-inheriting-ctors -fdump-tree-gimple -O2 -fno-inline\
      \ -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor23.C'
    sources:
      binary: inh-ctor23.s
  group: GRPSERIAL
test_inh-ctor23_193:
  build:
    cflags: "-std=gnu++14 -fnew-inheriting-ctors -fdump-tree-gimple -O2 -fno-inline\
      \ -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor23.C'
    sources:
      binary: inh-ctor23.s
  group: GRPSERIAL
test_inh-ctor23_540:
  build:
    cflags: "-std=gnu++11 -fnew-inheriting-ctors -fdump-tree-gimple -O2 -fno-inline\
      \ -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor23.C'
    sources:
      binary: inh-ctor23.s
  group: GRPSERIAL
test_inh-ctor23_541:
  build:
    cflags: "-std=gnu++14 -fnew-inheriting-ctors -fdump-tree-gimple -O2 -fno-inline\
      \ -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor23.C'
    sources:
      binary: inh-ctor23.s
  group: GRPSERIAL
test_inh-ctor24_194:
  build:
    cflags: "-std=gnu++11 -fnew-inheriting-ctors\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor24.C'
    sources:
      binary: inh-ctor24.s
  group: GRPSERIAL
  validate:
    match:
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_inh-ctor24_195:
  build:
    cflags: "-std=gnu++14 -fnew-inheriting-ctors\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor24.C'
    sources:
      binary: inh-ctor24.s
  group: GRPSERIAL
  validate:
    match:
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_inh-ctor24_542:
  build:
    cflags: "-std=gnu++11 -fnew-inheriting-ctors\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor24.C'
    sources:
      binary: inh-ctor24.s
  group: GRPSERIAL
  validate:
    match:
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_inh-ctor24_543:
  build:
    cflags: "-std=gnu++14 -fnew-inheriting-ctors\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor24.C'
    sources:
      binary: inh-ctor24.s
  group: GRPSERIAL
  validate:
    match:
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_inh-ctor25_196:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor25.C'
    sources:
      binary: inh-ctor25.s
  group: GRPSERIAL
test_inh-ctor25_197:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor25.C'
    sources:
      binary: inh-ctor25.s
  group: GRPSERIAL
test_inh-ctor25_544:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor25.C'
    sources:
      binary: inh-ctor25.s
  group: GRPSERIAL
test_inh-ctor25_545:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor25.C'
    sources:
      binary: inh-ctor25.s
  group: GRPSERIAL
test_inh-ctor26_198:
  build:
    cflags: "-std=gnu++11 -fnew-inheriting-ctors -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor26.C'
    sources:
      binary: inh-ctor26.s
  group: GRPSERIAL
test_inh-ctor26_199:
  build:
    cflags: "-std=gnu++14 -fnew-inheriting-ctors -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor26.C'
    sources:
      binary: inh-ctor26.s
  group: GRPSERIAL
test_inh-ctor26_546:
  build:
    cflags: "-std=gnu++11 -fnew-inheriting-ctors -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor26.C'
    sources:
      binary: inh-ctor26.s
  group: GRPSERIAL
test_inh-ctor26_547:
  build:
    cflags: "-std=gnu++14 -fnew-inheriting-ctors -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor26.C'
    sources:
      binary: inh-ctor26.s
  group: GRPSERIAL
test_inh-ctor27_200:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor27.C'
    sources:
      binary: inh-ctor27.s
  group: GRPSERIAL
test_inh-ctor27_201:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor27.C'
    sources:
      binary: inh-ctor27.s
  group: GRPSERIAL
test_inh-ctor27_548:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor27.C'
    sources:
      binary: inh-ctor27.s
  group: GRPSERIAL
test_inh-ctor27_549:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor27.C'
    sources:
      binary: inh-ctor27.s
  group: GRPSERIAL
test_inh-ctor28_202:
  build:
    cflags: "-std=gnu++11 -fnew-inheriting-ctors\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor28.C'
    sources:
      binary: inh-ctor28.s
  group: GRPSERIAL
test_inh-ctor28_203:
  build:
    cflags: "-std=gnu++14 -fnew-inheriting-ctors\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor28.C'
    sources:
      binary: inh-ctor28.s
  group: GRPSERIAL
test_inh-ctor28_550:
  build:
    cflags: "-std=gnu++11 -fnew-inheriting-ctors\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor28.C'
    sources:
      binary: inh-ctor28.s
  group: GRPSERIAL
test_inh-ctor28_551:
  build:
    cflags: "-std=gnu++14 -fnew-inheriting-ctors\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor28.C'
    sources:
      binary: inh-ctor28.s
  group: GRPSERIAL
test_inh-ctor29_204:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor29.C'
    sources:
      binary: inh-ctor29.s
  group: GRPSERIAL
test_inh-ctor29_205:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor29.C'
    sources:
      binary: inh-ctor29.s
  group: GRPSERIAL
test_inh-ctor29_552:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor29.C'
    sources:
      binary: inh-ctor29.s
  group: GRPSERIAL
test_inh-ctor29_553:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor29.C'
    sources:
      binary: inh-ctor29.s
  group: GRPSERIAL
test_inh-ctor30_206:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor30.C'
    sources:
      binary: inh-ctor30.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ambiguous")[^\n]*\n?)+'
test_inh-ctor30_207:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor30.C'
    sources:
      binary: inh-ctor30.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ambiguous")[^\n]*\n?)+'
test_inh-ctor30_554:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor30.C'
    sources:
      binary: inh-ctor30.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ambiguous")[^\n]*\n?)+'
test_inh-ctor30_555:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor30.C'
    sources:
      binary: inh-ctor30.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ambiguous")[^\n]*\n?)+'
test_inh-ctor31_208:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor31.C'
    sources:
      binary: inh-ctor31.s
  group: GRPSERIAL
test_inh-ctor31_209:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor31.C'
    sources:
      binary: inh-ctor31.s
  group: GRPSERIAL
test_inh-ctor31_556:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor31.C'
    sources:
      binary: inh-ctor31.s
  group: GRPSERIAL
test_inh-ctor31_557:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor31.C'
    sources:
      binary: inh-ctor31.s
  group: GRPSERIAL
test_inh-ctor32_210:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor32.C'
    sources:
      binary: inh-ctor32.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_inh-ctor32_211:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor32.C'
    sources:
      binary: inh-ctor32.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_inh-ctor32_558:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor32.C'
    sources:
      binary: inh-ctor32.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_inh-ctor32_559:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor32.C'
    sources:
      binary: inh-ctor32.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_inh-ctor33_212:
  build:
    cflags: -std=gnu++11 -fnew-inheriting-ctors
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor33.C'
    sources:
      binary: inh-ctor33.exe
  group: GRPSERIAL
  run:
    cwd: .
test_inh-ctor33_213:
  build:
    cflags: -std=gnu++14 -fnew-inheriting-ctors
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor33.C'
    sources:
      binary: inh-ctor33.exe
  group: GRPSERIAL
  run:
    cwd: .
test_inh-ctor33_560:
  build:
    cflags: -std=gnu++11 -fnew-inheriting-ctors
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor33.C'
    sources:
      binary: inh-ctor33.exe
  group: GRPSERIAL
  run:
    cwd: .
test_inh-ctor33_561:
  build:
    cflags: -std=gnu++14 -fnew-inheriting-ctors
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor33.C'
    sources:
      binary: inh-ctor33.exe
  group: GRPSERIAL
  run:
    cwd: .
test_inh-ctor34_214:
  build:
    cflags: "-std=gnu++11 -fnew-inheriting-ctors\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor34.C'
    sources:
      binary: inh-ctor34.s
  group: GRPSERIAL
test_inh-ctor34_215:
  build:
    cflags: "-std=gnu++14 -fnew-inheriting-ctors\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor34.C'
    sources:
      binary: inh-ctor34.s
  group: GRPSERIAL
test_inh-ctor34_562:
  build:
    cflags: "-std=gnu++11 -fnew-inheriting-ctors\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor34.C'
    sources:
      binary: inh-ctor34.s
  group: GRPSERIAL
test_inh-ctor34_563:
  build:
    cflags: "-std=gnu++14 -fnew-inheriting-ctors\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor34.C'
    sources:
      binary: inh-ctor34.s
  group: GRPSERIAL
test_inh-ctor35_216:
  build:
    cflags: "-std=gnu++11 -fno-new-inheriting-ctors\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor35.C'
    sources:
      binary: inh-ctor35.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_inh-ctor35_217:
  build:
    cflags: "-std=gnu++14 -fno-new-inheriting-ctors\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor35.C'
    sources:
      binary: inh-ctor35.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_inh-ctor35_564:
  build:
    cflags: "-std=gnu++11 -fno-new-inheriting-ctors\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor35.C'
    sources:
      binary: inh-ctor35.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_inh-ctor35_565:
  build:
    cflags: "-std=gnu++14 -fno-new-inheriting-ctors\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor35.C'
    sources:
      binary: inh-ctor35.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_inh-ctor35a_218:
  build:
    cflags: "-std=gnu++11 -fnew-inheriting-ctors\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor35a.C'
    sources:
      binary: inh-ctor35a.s
  group: GRPSERIAL
test_inh-ctor35a_219:
  build:
    cflags: "-std=gnu++14 -fnew-inheriting-ctors\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor35a.C'
    sources:
      binary: inh-ctor35a.s
  group: GRPSERIAL
test_inh-ctor35a_566:
  build:
    cflags: "-std=gnu++11 -fnew-inheriting-ctors\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor35a.C'
    sources:
      binary: inh-ctor35a.s
  group: GRPSERIAL
test_inh-ctor35a_567:
  build:
    cflags: "-std=gnu++14 -fnew-inheriting-ctors\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor35a.C'
    sources:
      binary: inh-ctor35a.s
  group: GRPSERIAL
test_inh-ctor36_220:
  build:
    cflags: -std=c++11  -pedantic-errors -Wno-long-long
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor36.C'
    sources:
      binary: inh-ctor36.exe
  group: GRPSERIAL
  run:
    cwd: .
test_inh-ctor36_221:
  build:
    cflags: -std=c++14  -pedantic-errors -Wno-long-long
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor36.C'
    sources:
      binary: inh-ctor36.exe
  group: GRPSERIAL
  run:
    cwd: .
test_inh-ctor36_568:
  build:
    cflags: -std=c++11  -pedantic-errors -Wno-long-long
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor36.C'
    sources:
      binary: inh-ctor36.exe
  group: GRPSERIAL
  run:
    cwd: .
test_inh-ctor36_569:
  build:
    cflags: -std=c++14  -pedantic-errors -Wno-long-long
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor36.C'
    sources:
      binary: inh-ctor36.exe
  group: GRPSERIAL
  run:
    cwd: .
test_inh-ctor37_222:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor37.C'
    sources:
      binary: inh-ctor37.s
  group: GRPSERIAL
test_inh-ctor37_223:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor37.C'
    sources:
      binary: inh-ctor37.s
  group: GRPSERIAL
test_inh-ctor37_570:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor37.C'
    sources:
      binary: inh-ctor37.s
  group: GRPSERIAL
test_inh-ctor37_571:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor37.C'
    sources:
      binary: inh-ctor37.s
  group: GRPSERIAL
test_inh-ctor38_224:
  build:
    cflags: -std=c++11  -pedantic-errors -Wno-long-long
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor38.C'
    sources:
      binary: ./inh-ctor38.exe
  group: GRPSERIAL
  run:
    cwd: .
test_inh-ctor38_225:
  build:
    cflags: -std=c++14  -pedantic-errors -Wno-long-long
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor38.C'
    sources:
      binary: ./inh-ctor38.exe
  group: GRPSERIAL
  run:
    cwd: .
test_inh-ctor38_572:
  build:
    cflags: -std=c++11  -pedantic-errors -Wno-long-long
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor38.C'
    sources:
      binary: ./inh-ctor38.exe
  group: GRPSERIAL
  run:
    cwd: .
test_inh-ctor38_573:
  build:
    cflags: -std=c++14  -pedantic-errors -Wno-long-long
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor38.C'
    sources:
      binary: ./inh-ctor38.exe
  group: GRPSERIAL
  run:
    cwd: .
test_init-statement1_226:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/init-statement1.C'
    sources:
      binary: init-statement1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("init-statement")[^\n]*\n?)+'
test_init-statement1_227:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/init-statement1.C'
    sources:
      binary: init-statement1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("init-statement")[^\n]*\n?)+'
test_init-statement1_574:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/init-statement1.C'
    sources:
      binary: init-statement1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("init-statement")[^\n]*\n?)+'
test_init-statement1_575:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/init-statement1.C'
    sources:
      binary: init-statement1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("init-statement")[^\n]*\n?)+'
test_init-statement2_228:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/init-statement2.C'
    sources:
      binary: init-statement2.s
  group: GRPSERIAL
test_init-statement2_576:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/init-statement2.C'
    sources:
      binary: init-statement2.s
  group: GRPSERIAL
test_init-statement3_229:
  build:
    cflags: -std=c++1z
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/init-statement3.C'
    sources:
      binary: ./init-statement3.exe
  group: GRPSERIAL
  run:
    cwd: .
test_init-statement3_577:
  build:
    cflags: -std=c++1z
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/init-statement3.C'
    sources:
      binary: ./init-statement3.exe
  group: GRPSERIAL
  run:
    cwd: .
test_init-statement4_230:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/init-statement4.C'
    sources:
      binary: init-statement4.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared")[^\n]*\n?)+'
test_init-statement4_578:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/init-statement4.C'
    sources:
      binary: init-statement4.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared")[^\n]*\n?)+'
test_init-statement5_231:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/init-statement5.C'
    sources:
      binary: init-statement5.s
  group: GRPSERIAL
test_init-statement5_579:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/init-statement5.C'
    sources:
      binary: init-statement5.s
  group: GRPSERIAL
test_init-statement6_232:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/init-statement6.C'
    sources:
      binary: init-statement6.s
  group: GRPSERIAL
test_init-statement6_580:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/init-statement6.C'
    sources:
      binary: init-statement6.s
  group: GRPSERIAL
test_init-statement7_233:
  build:
    cflags: -std=c++1z
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/init-statement7.C'
    sources:
      binary: ./init-statement7.exe
  group: GRPSERIAL
  run:
    cwd: .
test_init-statement7_581:
  build:
    cflags: -std=c++1z
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/init-statement7.C'
    sources:
      binary: ./init-statement7.exe
  group: GRPSERIAL
  run:
    cwd: .
test_init-statement8_234:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/init-statement8.C'
    sources:
      binary: init-statement8.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration")[^\n]*\n?)+'
test_init-statement8_582:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/init-statement8.C'
    sources:
      binary: init-statement8.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration")[^\n]*\n?)+'
test_init-statement9_235:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/init-statement9.C'
    sources:
      binary: init-statement9.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration")[^\n]*\n?)+'
test_init-statement9_583:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/init-statement9.C'
    sources:
      binary: init-statement9.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration")[^\n]*\n?)+'
test_inline-var1a_236:
  build:
    cflags: "-std=c++1z -Wno-deprecated -g\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inline-var1a.C'
    sources:
      binary: inline-var1a.s
  group: GRPSERIAL
test_inline-var1a_584:
  build:
    cflags: "-std=c++1z -Wno-deprecated -g\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inline-var1a.C'
    sources:
      binary: inline-var1a.s
  group: GRPSERIAL
test_inline-var2_237:
  build:
    cflags: "-std=gnu++11 -Wdeprecated\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inline-var2.C'
    sources:
      binary: inline-var2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+(:114:)[^\n]*[0-9]+: warning:[^\n]*("redundant redeclaration
          of")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+(:115:)[^\n]*[0-9]+: warning:[^\n]*("redundant redeclaration
          of")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("redundant redeclaration
          of")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("redundant redeclaration
          of")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("odr-used inline
          variable \''var19\'' is not defined")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("uninitialized
          const")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''var30\'' declared
          as an \''inline\'' field")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''TT\'' declared
          as an \''inline\'' type")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''var31\'' declared
          as an \''inline\'' parameter")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''inline\''
          specifier invalid for variable \''var32\'' declared at block scope")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''inline\''
          specifier invalid for variable \''var33\'' declared at block scope")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("uninitialized
          const")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
test_inline-var2_238:
  build:
    cflags: "-std=gnu++14 -Wdeprecated\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inline-var2.C'
    sources:
      binary: inline-var2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+(:114:)[^\n]*[0-9]+: warning:[^\n]*("redundant redeclaration
          of")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+(:115:)[^\n]*[0-9]+: warning:[^\n]*("redundant redeclaration
          of")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("redundant redeclaration
          of")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("redundant redeclaration
          of")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("odr-used inline
          variable \''var19\'' is not defined")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("uninitialized
          const")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''var30\'' declared
          as an \''inline\'' field")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''TT\'' declared
          as an \''inline\'' type")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''var31\'' declared
          as an \''inline\'' parameter")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''inline\''
          specifier invalid for variable \''var32\'' declared at block scope")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''inline\''
          specifier invalid for variable \''var33\'' declared at block scope")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("uninitialized
          const")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
test_inline-var2_585:
  build:
    cflags: "-std=gnu++11 -Wdeprecated\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inline-var2.C'
    sources:
      binary: inline-var2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+(:114:)[^\n]*[0-9]+: warning:[^\n]*("redundant redeclaration
          of")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+(:115:)[^\n]*[0-9]+: warning:[^\n]*("redundant redeclaration
          of")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("redundant redeclaration
          of")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("redundant redeclaration
          of")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("odr-used inline
          variable \''var19\'' is not defined")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("uninitialized
          const")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''var30\'' declared
          as an \''inline\'' field")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''TT\'' declared
          as an \''inline\'' type")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''var31\'' declared
          as an \''inline\'' parameter")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''inline\''
          specifier invalid for variable \''var32\'' declared at block scope")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''inline\''
          specifier invalid for variable \''var33\'' declared at block scope")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("uninitialized
          const")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
test_inline-var2_586:
  build:
    cflags: "-std=gnu++14 -Wdeprecated\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inline-var2.C'
    sources:
      binary: inline-var2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+(:114:)[^\n]*[0-9]+: warning:[^\n]*("redundant redeclaration
          of")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+(:115:)[^\n]*[0-9]+: warning:[^\n]*("redundant redeclaration
          of")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("redundant redeclaration
          of")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("redundant redeclaration
          of")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("odr-used inline
          variable \''var19\'' is not defined")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("uninitialized
          const")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''var30\'' declared
          as an \''inline\'' field")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''TT\'' declared
          as an \''inline\'' type")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''var31\'' declared
          as an \''inline\'' parameter")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''inline\''
          specifier invalid for variable \''var32\'' declared at block scope")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''inline\''
          specifier invalid for variable \''var33\'' declared at block scope")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("uninitialized
          const")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
test_inline-var3_239:
  build:
    cflags: "-std=gnu++98 -g0 -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inline-var3.C'
    sources:
      binary: inline-var3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("variable templates
          only available with")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("variable templates
          only available with")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("variable templates
          only available with")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("variable templates
          only available with")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
test_inline-var3_240:
  build:
    cflags: "-std=gnu++11 -g0 -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inline-var3.C'
    sources:
      binary: inline-var3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("variable templates
          only available with")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("variable templates
          only available with")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("variable templates
          only available with")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("variable templates
          only available with")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
test_inline-var3_241:
  build:
    cflags: "-std=gnu++14 -g0 -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inline-var3.C'
    sources:
      binary: inline-var3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("variable templates
          only available with")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("variable templates
          only available with")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("variable templates
          only available with")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("variable templates
          only available with")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
test_inline-var3_587:
  build:
    cflags: "-std=gnu++98 -g0 -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inline-var3.C'
    sources:
      binary: inline-var3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("variable templates
          only available with")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("variable templates
          only available with")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("variable templates
          only available with")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("variable templates
          only available with")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
test_inline-var3_588:
  build:
    cflags: "-std=gnu++11 -g0 -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inline-var3.C'
    sources:
      binary: inline-var3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("variable templates
          only available with")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("variable templates
          only available with")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("variable templates
          only available with")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("variable templates
          only available with")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
test_inline-var3_589:
  build:
    cflags: "-std=gnu++14 -g0 -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inline-var3.C'
    sources:
      binary: inline-var3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("variable templates
          only available with")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("variable templates
          only available with")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("variable templates
          only available with")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("variable templates
          only available with")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("inline variables are
          only available with")[^\n]*\n?)+'
test_lambda-inherit1_242:
  build:
    cflags: "-std=c++17\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/lambda-inherit1.C'
    sources:
      binary: lambda-inherit1.s
  group: GRPSERIAL
test_lambda-inherit1_590:
  build:
    cflags: "-std=c++17\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/lambda-inherit1.C'
    sources:
      binary: lambda-inherit1.s
  group: GRPSERIAL
test_lambda-this1_243:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/lambda-this1.C'
    sources:
      binary: lambda-this1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("already captured
          \''this\''")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("in read-only
          object")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("explicit by-copy
          capture of \''this\'' redundant with by-copy capture default")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue required
          as left operand of assignment")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''this\'' was
          not captured for this lambda function")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid use of
          non-static data member \''B::b\''")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of deleted
          function")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of deleted
          function")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of deleted
          function")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of deleted
          function")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("already captured
          \''this\''")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
test_lambda-this1_244:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/lambda-this1.C'
    sources:
      binary: lambda-this1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("already captured
          \''this\''")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("in read-only
          object")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("explicit by-copy
          capture of \''this\'' redundant with by-copy capture default")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue required
          as left operand of assignment")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''this\'' was
          not captured for this lambda function")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid use of
          non-static data member \''B::b\''")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of deleted
          function")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of deleted
          function")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of deleted
          function")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of deleted
          function")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("already captured
          \''this\''")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
test_lambda-this1_591:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/lambda-this1.C'
    sources:
      binary: lambda-this1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("already captured
          \''this\''")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("in read-only
          object")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("explicit by-copy
          capture of \''this\'' redundant with by-copy capture default")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue required
          as left operand of assignment")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''this\'' was
          not captured for this lambda function")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid use of
          non-static data member \''B::b\''")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of deleted
          function")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of deleted
          function")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of deleted
          function")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of deleted
          function")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("already captured
          \''this\''")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
test_lambda-this1_592:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/lambda-this1.C'
    sources:
      binary: lambda-this1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("already captured
          \''this\''")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("in read-only
          object")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("explicit by-copy
          capture of \''this\'' redundant with by-copy capture default")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue required
          as left operand of assignment")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''this\'' was
          not captured for this lambda function")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid use of
          non-static data member \''B::b\''")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of deleted
          function")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of deleted
          function")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of deleted
          function")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of deleted
          function")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("already captured
          \''this\''")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
test_lambda-this2_245:
  build:
    cflags: -std=gnu++11
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/lambda-this2.C'
    sources:
      binary: ./lambda-this2.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
test_lambda-this2_246:
  build:
    cflags: -std=gnu++14
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/lambda-this2.C'
    sources:
      binary: ./lambda-this2.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
test_lambda-this2_593:
  build:
    cflags: -std=gnu++11
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/lambda-this2.C'
    sources:
      binary: ./lambda-this2.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
test_lambda-this2_594:
  build:
    cflags: -std=gnu++14
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/lambda-this2.C'
    sources:
      binary: ./lambda-this2.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("\''*this\'' capture
          only available with")[^\n]*\n?)+'
test_lambda-this3_247:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/lambda-this3.C'
    sources:
      binary: lambda-this3.s
  group: GRPSERIAL
test_lambda-this3_595:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/lambda-this3.C'
    sources:
      binary: lambda-this3.s
  group: GRPSERIAL
test_launder1_248:
  build:
    cflags: -std=c++11 -pedantic-errors -Wno-long-long -O2
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/launder1.C'
    sources:
      binary: ./launder1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_launder1_249:
  build:
    cflags: -std=c++14 -pedantic-errors -Wno-long-long -O2
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/launder1.C'
    sources:
      binary: ./launder1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_launder1_596:
  build:
    cflags: -std=c++11 -pedantic-errors -Wno-long-long -O2
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/launder1.C'
    sources:
      binary: ./launder1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_launder1_597:
  build:
    cflags: -std=c++14 -pedantic-errors -Wno-long-long -O2
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/launder1.C'
    sources:
      binary: ./launder1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_launder2_250:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/launder2.C'
    sources:
      binary: launder2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non-pointer argument
          to")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong number
          of arguments to")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong number
          of arguments to")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong number
          of arguments to")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong number of
          arguments to")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong number of
          arguments to")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non-pointer argument
          to")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non-pointer argument
          to")[^\n]*\n?)+'
test_launder2_251:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/launder2.C'
    sources:
      binary: launder2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non-pointer argument
          to")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong number
          of arguments to")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong number
          of arguments to")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong number
          of arguments to")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong number of
          arguments to")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong number of
          arguments to")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non-pointer argument
          to")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non-pointer argument
          to")[^\n]*\n?)+'
test_launder2_598:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/launder2.C'
    sources:
      binary: launder2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non-pointer argument
          to")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong number
          of arguments to")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong number
          of arguments to")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong number
          of arguments to")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong number of
          arguments to")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong number of
          arguments to")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non-pointer argument
          to")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non-pointer argument
          to")[^\n]*\n?)+'
test_launder2_599:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/launder2.C'
    sources:
      binary: launder2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non-pointer argument
          to")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong number
          of arguments to")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong number
          of arguments to")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong number
          of arguments to")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong number of
          arguments to")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong number of
          arguments to")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non-pointer argument
          to")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non-pointer argument
          to")[^\n]*\n?)+'
test_launder3_252:
  build:
    cflags: -std=c++11 -pedantic-errors -Wno-long-long -O2
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/launder3.C'
    sources:
      binary: ./launder3.exe
  group: GRPSERIAL
  run:
    cwd: .
test_launder3_253:
  build:
    cflags: -std=c++14 -pedantic-errors -Wno-long-long -O2
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/launder3.C'
    sources:
      binary: ./launder3.exe
  group: GRPSERIAL
  run:
    cwd: .
test_launder3_600:
  build:
    cflags: -std=c++11 -pedantic-errors -Wno-long-long -O2
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/launder3.C'
    sources:
      binary: ./launder3.exe
  group: GRPSERIAL
  run:
    cwd: .
test_launder3_601:
  build:
    cflags: -std=c++14 -pedantic-errors -Wno-long-long -O2
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/launder3.C'
    sources:
      binary: ./launder3.exe
  group: GRPSERIAL
  run:
    cwd: .
test_launder4_254:
  build:
    cflags: -std=c++11 -pedantic-errors -Wno-long-long -O2
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/launder4.C'
    sources:
      binary: ./launder4.exe
  group: GRPSERIAL
  run:
    cwd: .
test_launder4_255:
  build:
    cflags: -std=c++14 -pedantic-errors -Wno-long-long -O2
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/launder4.C'
    sources:
      binary: ./launder4.exe
  group: GRPSERIAL
  run:
    cwd: .
test_launder4_602:
  build:
    cflags: -std=c++11 -pedantic-errors -Wno-long-long -O2
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/launder4.C'
    sources:
      binary: ./launder4.exe
  group: GRPSERIAL
  run:
    cwd: .
test_launder4_603:
  build:
    cflags: -std=c++14 -pedantic-errors -Wno-long-long -O2
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/launder4.C'
    sources:
      binary: ./launder4.exe
  group: GRPSERIAL
  run:
    cwd: .
test_launder5_256:
  build:
    cflags: -std=c++11 -pedantic-errors -Wno-long-long -O2
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/launder5.C'
    sources:
      binary: ./launder5.exe
  group: GRPSERIAL
  run:
    cwd: .
test_launder5_257:
  build:
    cflags: -std=c++14 -pedantic-errors -Wno-long-long -O2
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/launder5.C'
    sources:
      binary: ./launder5.exe
  group: GRPSERIAL
  run:
    cwd: .
test_launder5_604:
  build:
    cflags: -std=c++11 -pedantic-errors -Wno-long-long -O2
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/launder5.C'
    sources:
      binary: ./launder5.exe
  group: GRPSERIAL
  run:
    cwd: .
test_launder5_605:
  build:
    cflags: -std=c++14 -pedantic-errors -Wno-long-long -O2
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/launder5.C'
    sources:
      binary: ./launder5.exe
  group: GRPSERIAL
  run:
    cwd: .
test_launder6_258:
  build:
    cflags: -std=c++11 -pedantic-errors -Wno-long-long -O2
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/launder6.C'
    sources:
      binary: ./launder6.exe
  group: GRPSERIAL
  run:
    cwd: .
test_launder6_259:
  build:
    cflags: -std=c++14 -pedantic-errors -Wno-long-long -O2
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/launder6.C'
    sources:
      binary: ./launder6.exe
  group: GRPSERIAL
  run:
    cwd: .
test_launder6_606:
  build:
    cflags: -std=c++11 -pedantic-errors -Wno-long-long -O2
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/launder6.C'
    sources:
      binary: ./launder6.exe
  group: GRPSERIAL
  run:
    cwd: .
test_launder6_607:
  build:
    cflags: -std=c++14 -pedantic-errors -Wno-long-long -O2
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/launder6.C'
    sources:
      binary: ./launder6.exe
  group: GRPSERIAL
  run:
    cwd: .
test_maybe_unused1_260:
  build:
    cflags: "-std=gnu++11 -Wunused -Wextra\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/maybe_unused1.C'
    sources:
      binary: maybe_unused1.s
  group: GRPSERIAL
test_maybe_unused1_261:
  build:
    cflags: "-std=gnu++14 -Wunused -Wextra\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/maybe_unused1.C'
    sources:
      binary: maybe_unused1.s
  group: GRPSERIAL
test_maybe_unused1_608:
  build:
    cflags: "-std=gnu++11 -Wunused -Wextra\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/maybe_unused1.C'
    sources:
      binary: maybe_unused1.s
  group: GRPSERIAL
test_maybe_unused1_609:
  build:
    cflags: "-std=gnu++14 -Wunused -Wextra\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/maybe_unused1.C'
    sources:
      binary: maybe_unused1.s
  group: GRPSERIAL
test_namespace-attribs_262:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/namespace-attribs.C'
    sources:
      binary: namespace-attribs.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
test_namespace-attribs_610:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/namespace-attribs.C'
    sources:
      binary: namespace-attribs.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
test_nested-namespace-def1_263:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nested-namespace-def1.C'
    sources:
      binary: nested-namespace-def1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be inline")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nested identifier
          required")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot have attributes")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot have attributes|ignored")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot have attributes")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot have attributes|ignored")[^\n]*\n?)+'
test_nested-namespace-def1_611:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nested-namespace-def1.C'
    sources:
      binary: nested-namespace-def1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be inline")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nested identifier
          required")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot have attributes")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot have attributes|ignored")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot have attributes")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot have attributes|ignored")[^\n]*\n?)+'
test_nested-namespace-def2_264:
  build:
    cflags: "-std=c++11 -pedantic-errors\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nested-namespace-def2.C'
    sources:
      binary: nested-namespace-def2.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nested namespace
          definitions only available with")[^\n]*\n?)+'
test_nested-namespace-def2_612:
  build:
    cflags: "-std=c++11 -pedantic-errors\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nested-namespace-def2.C'
    sources:
      binary: nested-namespace-def2.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nested namespace
          definitions only available with")[^\n]*\n?)+'
test_nested-namespace-def3_265:
  build:
    cflags: "-std=c++11\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nested-namespace-def3.C'
    sources:
      binary: nested-namespace-def3.s
  group: GRPSERIAL
test_nested-namespace-def3_613:
  build:
    cflags: "-std=c++11\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nested-namespace-def3.C'
    sources:
      binary: nested-namespace-def3.s
  group: GRPSERIAL
test_nodiscard1_266:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nodiscard1.C'
    sources:
      binary: nodiscard1.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("")[^\n]*\n?)+'
test_nodiscard1_267:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nodiscard1.C'
    sources:
      binary: nodiscard1.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("")[^\n]*\n?)+'
test_nodiscard1_614:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nodiscard1.C'
    sources:
      binary: nodiscard1.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("")[^\n]*\n?)+'
test_nodiscard1_615:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nodiscard1.C'
    sources:
      binary: nodiscard1.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("")[^\n]*\n?)+'
test_nodiscard2_268:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nodiscard2.C'
    sources:
      binary: nodiscard2.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("Wunused-result")[^\n]*\n?)+'
test_nodiscard2_269:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nodiscard2.C'
    sources:
      binary: nodiscard2.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("Wunused-result")[^\n]*\n?)+'
test_nodiscard2_616:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nodiscard2.C'
    sources:
      binary: nodiscard2.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("Wunused-result")[^\n]*\n?)+'
test_nodiscard2_617:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nodiscard2.C'
    sources:
      binary: nodiscard2.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("Wunused-result")[^\n]*\n?)+'
test_nodiscard3_270:
  build:
    cflags: "-std=c++1z -O -ftrack-macro-expansion=0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nodiscard3.C'
    sources:
      binary: nodiscard3.s
  group: GRPSERIAL
  validate:
    match:
      L105:
        expect: true
        expr: '(^|\n)([^\n]+(:105:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L107:
        expect: true
        expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+(:115:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L117:
        expect: true
        expr: '(^|\n)([^\n]+(:117:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L132:
        expect: true
        expr: '(^|\n)([^\n]+(:132:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+(:134:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L139:
        expect: true
        expr: '(^|\n)([^\n]+(:139:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L141:
        expect: true
        expr: '(^|\n)([^\n]+(:141:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+(:147:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L149:
        expect: true
        expr: '(^|\n)([^\n]+(:149:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+(:155:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L162:
        expect: true
        expr: '(^|\n)([^\n]+(:162:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+(:164:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L169:
        expect: true
        expr: '(^|\n)([^\n]+(:169:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L171:
        expect: true
        expr: '(^|\n)([^\n]+(:171:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+(:183:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L185:
        expect: true
        expr: '(^|\n)([^\n]+(:185:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+(:190:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L192:
        expect: true
        expr: '(^|\n)([^\n]+(:192:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L200:
        expect: true
        expr: '(^|\n)([^\n]+(:200:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L202:
        expect: true
        expr: '(^|\n)([^\n]+(:202:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+(:75:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+(:77:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
test_nodiscard3_618:
  build:
    cflags: "-std=c++1z -O -ftrack-macro-expansion=0\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nodiscard3.C'
    sources:
      binary: nodiscard3.s
  group: GRPSERIAL
  validate:
    match:
      L105:
        expect: true
        expr: '(^|\n)([^\n]+(:105:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L107:
        expect: true
        expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+(:115:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L117:
        expect: true
        expr: '(^|\n)([^\n]+(:117:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L132:
        expect: true
        expr: '(^|\n)([^\n]+(:132:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+(:134:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L139:
        expect: true
        expr: '(^|\n)([^\n]+(:139:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L141:
        expect: true
        expr: '(^|\n)([^\n]+(:141:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+(:147:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L149:
        expect: true
        expr: '(^|\n)([^\n]+(:149:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+(:155:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L162:
        expect: true
        expr: '(^|\n)([^\n]+(:162:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+(:164:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L169:
        expect: true
        expr: '(^|\n)([^\n]+(:169:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L171:
        expect: true
        expr: '(^|\n)([^\n]+(:171:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L183:
        expect: true
        expr: '(^|\n)([^\n]+(:183:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L185:
        expect: true
        expr: '(^|\n)([^\n]+(:185:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+(:190:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L192:
        expect: true
        expr: '(^|\n)([^\n]+(:192:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L200:
        expect: true
        expr: '(^|\n)([^\n]+(:200:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L202:
        expect: true
        expr: '(^|\n)([^\n]+(:202:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+(:75:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+(:77:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("nodiscard")[^\n]*\n?)+'
test_nodiscard4_271:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nodiscard4.C'
    sources:
      binary: nodiscard4.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("ignoring returned
          value of type")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ignoring returned
          value of type")[^\n]*\n?)+'
test_nodiscard4_272:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nodiscard4.C'
    sources:
      binary: nodiscard4.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("ignoring returned
          value of type")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ignoring returned
          value of type")[^\n]*\n?)+'
test_nodiscard4_619:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nodiscard4.C'
    sources:
      binary: nodiscard4.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("ignoring returned
          value of type")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ignoring returned
          value of type")[^\n]*\n?)+'
test_nodiscard4_620:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nodiscard4.C'
    sources:
      binary: nodiscard4.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("ignoring returned
          value of type")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ignoring returned
          value of type")[^\n]*\n?)+'
test_noexcept-type11_274:
  build:
    cflags: "-Wall -std=c++14\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type11.C'
    sources:
      binary: noexcept-type11.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+(:3:)[^\n]*[0-9]+: warning:[^\n]*("mangled")[^\n]*\n?)+'
test_noexcept-type11_622:
  build:
    cflags: "-Wall -std=c++14\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type11.C'
    sources:
      binary: noexcept-type11.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+(:3:)[^\n]*[0-9]+: warning:[^\n]*("mangled")[^\n]*\n?)+'
test_noexcept-type11a_275:
  build:
    cflags: "-Wall -Wno-noexcept-type -std=c++14\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type11a.C'
    sources:
      binary: noexcept-type11a.s
  group: GRPSERIAL
test_noexcept-type11a_623:
  build:
    cflags: "-Wall -Wno-noexcept-type -std=c++14\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type11a.C'
    sources:
      binary: noexcept-type11a.s
  group: GRPSERIAL
test_noexcept-type12_276:
  build:
    cflags: "-std=c++1z -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type12.C'
    sources:
      binary: noexcept-type12.s
  group: GRPSERIAL
test_noexcept-type12_624:
  build:
    cflags: "-std=c++1z -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type12.C'
    sources:
      binary: noexcept-type12.s
  group: GRPSERIAL
test_noexcept-type13_277:
  build:
    cflags: "-std=gnu++98 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type13.C'
    sources:
      binary: noexcept-type13.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("mangled name")[^\n]*\n?)+'
test_noexcept-type13_278:
  build:
    cflags: "-std=gnu++11 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type13.C'
    sources:
      binary: noexcept-type13.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("mangled name")[^\n]*\n?)+'
test_noexcept-type13_279:
  build:
    cflags: "-std=gnu++14 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type13.C'
    sources:
      binary: noexcept-type13.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("mangled name")[^\n]*\n?)+'
test_noexcept-type13_625:
  build:
    cflags: "-std=gnu++98 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type13.C'
    sources:
      binary: noexcept-type13.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("mangled name")[^\n]*\n?)+'
test_noexcept-type13_626:
  build:
    cflags: "-std=gnu++11 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type13.C'
    sources:
      binary: noexcept-type13.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("mangled name")[^\n]*\n?)+'
test_noexcept-type13_627:
  build:
    cflags: "-std=gnu++14 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type13.C'
    sources:
      binary: noexcept-type13.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("mangled name")[^\n]*\n?)+'
test_noexcept-type14_280:
  build:
    cflags: "-std=gnu++11 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type14.C'
    sources:
      binary: noexcept-type14.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("mangled name")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("mangled name")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("mangled name")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("mangled name")[^\n]*\n?)+'
test_noexcept-type14_281:
  build:
    cflags: "-std=gnu++14 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type14.C'
    sources:
      binary: noexcept-type14.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("mangled name")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("mangled name")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("mangled name")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("mangled name")[^\n]*\n?)+'
test_noexcept-type14_628:
  build:
    cflags: "-std=gnu++11 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type14.C'
    sources:
      binary: noexcept-type14.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("mangled name")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("mangled name")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("mangled name")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("mangled name")[^\n]*\n?)+'
test_noexcept-type14_629:
  build:
    cflags: "-std=gnu++14 -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type14.C'
    sources:
      binary: noexcept-type14.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("mangled name")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("mangled name")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("mangled name")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("mangled name")[^\n]*\n?)+'
test_noexcept-type15_282:
  build:
    cflags: "-std=c++17\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type15.C'
    sources:
      binary: noexcept-type15.s
  group: GRPSERIAL
test_noexcept-type15_630:
  build:
    cflags: "-std=c++17\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type15.C'
    sources:
      binary: noexcept-type15.s
  group: GRPSERIAL
test_noexcept-type16_283:
  build:
    cflags: "-std=c++1z -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type16.C'
    sources:
      binary: noexcept-type16.s
  group: GRPSERIAL
test_noexcept-type16_631:
  build:
    cflags: "-std=c++1z -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type16.C'
    sources:
      binary: noexcept-type16.s
  group: GRPSERIAL
test_noexcept-type17_284:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type17.C'
    sources:
      binary: noexcept-type17.s
  group: GRPSERIAL
test_noexcept-type17_632:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type17.C'
    sources:
      binary: noexcept-type17.s
  group: GRPSERIAL
test_noexcept-type1_273:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type1.C'
    sources:
      binary: noexcept-type1.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("dynamic exception
          specification")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_noexcept-type1_621:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type1.C'
    sources:
      binary: noexcept-type1.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("dynamic exception
          specification")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_noexcept-type2_285:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type2.C'
    sources:
      binary: noexcept-type2.s
  group: GRPSERIAL
test_noexcept-type2_633:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type2.C'
    sources:
      binary: noexcept-type2.s
  group: GRPSERIAL
test_noexcept-type3_286:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type3.C'
    sources:
      binary: noexcept-type3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("deleted")[^\n]*\n?)+'
test_noexcept-type3_634:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type3.C'
    sources:
      binary: noexcept-type3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("deleted")[^\n]*\n?)+'
test_noexcept-type4_287:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type4.C'
    sources:
      binary: noexcept-type4.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_noexcept-type4_635:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type4.C'
    sources:
      binary: noexcept-type4.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_noexcept-type5_288:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type5.C'
    sources:
      binary: noexcept-type5.s
  group: GRPSERIAL
test_noexcept-type5_636:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type5.C'
    sources:
      binary: noexcept-type5.s
  group: GRPSERIAL
test_noexcept-type6_289:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type6.C'
    sources:
      binary: noexcept-type6.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_noexcept-type6_637:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type6.C'
    sources:
      binary: noexcept-type6.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_noexcept-type7_290:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type7.C'
    sources:
      binary: noexcept-type7.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_noexcept-type7_638:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type7.C'
    sources:
      binary: noexcept-type7.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_noexcept-type8_291:
  build:
    cflags: -std=c++1z
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type8.C'
    sources:
      binary: ./noexcept-type8.exe
  group: GRPSERIAL
  run:
    cwd: .
test_noexcept-type8_639:
  build:
    cflags: -std=c++1z
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type8.C'
    sources:
      binary: ./noexcept-type8.exe
  group: GRPSERIAL
  run:
    cwd: .
test_noexcept-type9_292:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type9.C'
    sources:
      binary: noexcept-type9.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_noexcept-type9_640:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type9.C'
    sources:
      binary: noexcept-type9.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_nontype-auto10_294:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype-auto10.C'
    sources:
      binary: nontype-auto10.s
  group: GRPSERIAL
test_nontype-auto10_642:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype-auto10.C'
    sources:
      binary: nontype-auto10.s
  group: GRPSERIAL
test_nontype-auto13_295:
  build:
    cflags: "-std=c++17\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype-auto13.C'
    sources:
      binary: nontype-auto13.s
  group: GRPSERIAL
test_nontype-auto13_643:
  build:
    cflags: "-std=c++17\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype-auto13.C'
    sources:
      binary: nontype-auto13.s
  group: GRPSERIAL
test_nontype-auto1_293:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype-auto1.C'
    sources:
      binary: nontype-auto1.s
  group: GRPSERIAL
test_nontype-auto1_641:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype-auto1.C'
    sources:
      binary: nontype-auto1.s
  group: GRPSERIAL
test_nontype-auto2_296:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype-auto2.C'
    sources:
      binary: nontype-auto2.s
  group: GRPSERIAL
test_nontype-auto2_644:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype-auto2.C'
    sources:
      binary: nontype-auto2.s
  group: GRPSERIAL
test_nontype-auto3_297:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype-auto3.C'
    sources:
      binary: nontype-auto3.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_nontype-auto3_645:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype-auto3.C'
    sources:
      binary: nontype-auto3.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_nontype-auto4_298:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype-auto4.C'
    sources:
      binary: nontype-auto4.s
  group: GRPSERIAL
test_nontype-auto4_646:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype-auto4.C'
    sources:
      binary: nontype-auto4.s
  group: GRPSERIAL
test_nontype-auto5_299:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype-auto5.C'
    sources:
      binary: nontype-auto5.s
  group: GRPSERIAL
test_nontype-auto5_647:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype-auto5.C'
    sources:
      binary: nontype-auto5.s
  group: GRPSERIAL
test_nontype-auto6_300:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype-auto6.C'
    sources:
      binary: nontype-auto6.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_nontype-auto6_301:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype-auto6.C'
    sources:
      binary: nontype-auto6.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_nontype-auto6_648:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype-auto6.C'
    sources:
      binary: nontype-auto6.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_nontype-auto6_649:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype-auto6.C'
    sources:
      binary: nontype-auto6.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_nontype-auto7_302:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype-auto7.C'
    sources:
      binary: nontype-auto7.s
  group: GRPSERIAL
test_nontype-auto7_650:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype-auto7.C'
    sources:
      binary: nontype-auto7.s
  group: GRPSERIAL
test_nontype-auto8_303:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype-auto8.C'
    sources:
      binary: nontype-auto8.s
  group: GRPSERIAL
test_nontype-auto8_651:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype-auto8.C'
    sources:
      binary: nontype-auto8.s
  group: GRPSERIAL
test_nontype-auto9_304:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype-auto9.C'
    sources:
      binary: nontype-auto9.s
  group: GRPSERIAL
test_nontype-auto9_652:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype-auto9.C'
    sources:
      binary: nontype-auto9.s
  group: GRPSERIAL
test_nontype1_305:
  build:
    cflags: "-std=c++1z -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype1.C'
    sources:
      binary: nontype1.s
  group: GRPSERIAL
test_nontype1_653:
  build:
    cflags: "-std=c++1z -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype1.C'
    sources:
      binary: nontype1.s
  group: GRPSERIAL
test_nontype2_306:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype2.C'
    sources:
      binary: nontype2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("string literal")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_nontype2_654:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype2.C'
    sources:
      binary: nontype2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("string literal")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_nontype3_307:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype3.C'
    sources:
      binary: nontype3.s
  group: GRPSERIAL
test_nontype3_655:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype3.C'
    sources:
      binary: nontype3.s
  group: GRPSERIAL
test_nontype3a_308:
  build:
    cflags: "-pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype3a.C'
    sources:
      binary: nontype3a.s
  group: GRPSERIAL
test_nontype3a_656:
  build:
    cflags: "-pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype3a.C'
    sources:
      binary: nontype3a.s
  group: GRPSERIAL
test_pr78771_309:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/pr78771.C'
    sources:
      binary: pr78771.s
  group: GRPSERIAL
test_pr78771_657:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/pr78771.C'
    sources:
      binary: pr78771.s
  group: GRPSERIAL
test_pr79143_310:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/pr79143.C'
    sources:
      binary: pr79143.s
  group: GRPSERIAL
test_pr79143_658:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/pr79143.C'
    sources:
      binary: pr79143.s
  group: GRPSERIAL
test_range-for1_311:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/range-for1.C'
    sources:
      binary: range-for1.s
  group: GRPSERIAL
test_range-for1_659:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/range-for1.C'
    sources:
      binary: range-for1.s
  group: GRPSERIAL
test_register1_312:
  build:
    cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/register1.C'
    sources:
      binary: register1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("storage class
          \''register\'' invalid for function")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
test_register1_313:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/register1.C'
    sources:
      binary: register1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("storage class
          \''register\'' invalid for function")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
test_register1_314:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/register1.C'
    sources:
      binary: register1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("storage class
          \''register\'' invalid for function")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
test_register1_660:
  build:
    cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/register1.C'
    sources:
      binary: register1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("storage class
          \''register\'' invalid for function")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
test_register1_661:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/register1.C'
    sources:
      binary: register1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("storage class
          \''register\'' invalid for function")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
test_register1_662:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/register1.C'
    sources:
      binary: register1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("storage class
          \''register\'' invalid for function")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO C\\\\+\\\\+1z
          does not allow \''register\'' storage class specifier")[^\n]*\n?)+'
test_register2_315:
  build:
    cflags: "-std=gnu++98 -Wno-register\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/register2.C'
    sources:
      binary: register2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("storage class
          \''register\'' invalid for function")[^\n]*\n?)+'
test_register2_316:
  build:
    cflags: "-std=gnu++11 -Wno-register\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/register2.C'
    sources:
      binary: register2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("storage class
          \''register\'' invalid for function")[^\n]*\n?)+'
test_register2_317:
  build:
    cflags: "-std=gnu++14 -Wno-register\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/register2.C'
    sources:
      binary: register2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("storage class
          \''register\'' invalid for function")[^\n]*\n?)+'
test_register2_663:
  build:
    cflags: "-std=gnu++98 -Wno-register\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/register2.C'
    sources:
      binary: register2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("storage class
          \''register\'' invalid for function")[^\n]*\n?)+'
test_register2_664:
  build:
    cflags: "-std=gnu++11 -Wno-register\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/register2.C'
    sources:
      binary: register2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("storage class
          \''register\'' invalid for function")[^\n]*\n?)+'
test_register2_665:
  build:
    cflags: "-std=gnu++14 -Wno-register\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/register2.C'
    sources:
      binary: register2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("storage class
          \''register\'' invalid for function")[^\n]*\n?)+'
test_register3_318:
  build:
    cflags: "-std=gnu++98 -Wregister\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/register3.C'
    sources:
      binary: register3.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("\''register\'' storage
          class specifier used")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("storage class
          \''register\'' invalid for function")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("\''register\'' storage
          class specifier used")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("\''register\'' storage
          class specifier used")[^\n]*\n?)+'
test_register3_319:
  build:
    cflags: "-std=gnu++11 -Wregister\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/register3.C'
    sources:
      binary: register3.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("\''register\'' storage
          class specifier used")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("storage class
          \''register\'' invalid for function")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("\''register\'' storage
          class specifier used")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("\''register\'' storage
          class specifier used")[^\n]*\n?)+'
test_register3_320:
  build:
    cflags: "-std=gnu++14 -Wregister\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/register3.C'
    sources:
      binary: register3.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("\''register\'' storage
          class specifier used")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("storage class
          \''register\'' invalid for function")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("\''register\'' storage
          class specifier used")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("\''register\'' storage
          class specifier used")[^\n]*\n?)+'
test_register3_666:
  build:
    cflags: "-std=gnu++98 -Wregister\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/register3.C'
    sources:
      binary: register3.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("\''register\'' storage
          class specifier used")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("storage class
          \''register\'' invalid for function")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("\''register\'' storage
          class specifier used")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("\''register\'' storage
          class specifier used")[^\n]*\n?)+'
test_register3_667:
  build:
    cflags: "-std=gnu++11 -Wregister\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/register3.C'
    sources:
      binary: register3.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("\''register\'' storage
          class specifier used")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("storage class
          \''register\'' invalid for function")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("\''register\'' storage
          class specifier used")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("\''register\'' storage
          class specifier used")[^\n]*\n?)+'
test_register3_668:
  build:
    cflags: "-std=gnu++14 -Wregister\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/register3.C'
    sources:
      binary: register3.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("\''register\'' storage
          class specifier used")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("storage class
          \''register\'' invalid for function")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("\''register\'' storage
          class specifier used")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("\''register\'' storage
          class specifier used")[^\n]*\n?)+'
test_regress1_321:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/regress1.C'
    sources:
      binary: regress1.s
  group: GRPSERIAL
test_regress1_669:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/regress1.C'
    sources:
      binary: regress1.s
  group: GRPSERIAL
test_regress2_322:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/regress2.C'
    sources:
      binary: regress2.s
  group: GRPSERIAL
test_regress2_670:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/regress2.C'
    sources:
      binary: regress2.s
  group: GRPSERIAL
test_static_assert-nomsg_323:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/static_assert-nomsg.C'
    sources:
      binary: static_assert-nomsg.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("static assertion
          failed")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("static assertion
          failed")[^\n]*\n?)+'
test_static_assert-nomsg_671:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/static_assert-nomsg.C'
    sources:
      binary: static_assert-nomsg.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("static assertion
          failed")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("static assertion
          failed")[^\n]*\n?)+'
test_ttp1_324:
  build:
    cflags: "-std=gnu++98 -fnew-ttp-matching\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/ttp1.C'
    sources:
      binary: ttp1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no match")[^\n]*\n?)+'
test_ttp1_325:
  build:
    cflags: "-std=gnu++11 -fnew-ttp-matching\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/ttp1.C'
    sources:
      binary: ttp1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no match")[^\n]*\n?)+'
test_ttp1_326:
  build:
    cflags: "-std=gnu++14 -fnew-ttp-matching\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/ttp1.C'
    sources:
      binary: ttp1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no match")[^\n]*\n?)+'
test_ttp1_672:
  build:
    cflags: "-std=gnu++98 -fnew-ttp-matching\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/ttp1.C'
    sources:
      binary: ttp1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no match")[^\n]*\n?)+'
test_ttp1_673:
  build:
    cflags: "-std=gnu++11 -fnew-ttp-matching\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/ttp1.C'
    sources:
      binary: ttp1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no match")[^\n]*\n?)+'
test_ttp1_674:
  build:
    cflags: "-std=gnu++14 -fnew-ttp-matching\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/ttp1.C'
    sources:
      binary: ttp1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no match")[^\n]*\n?)+'
test_typename-tmpl-tmpl-parm-neg_327:
  build:
    cflags: "-std=gnu++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/typename-tmpl-tmpl-parm-neg.C'
    sources:
      binary: typename-tmpl-tmpl-parm-neg.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .>.")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .class.
          or .typename. before")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .class.
          or .typename. before")[^\n]*\n?)+'
test_typename-tmpl-tmpl-parm-neg_328:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/typename-tmpl-tmpl-parm-neg.C'
    sources:
      binary: typename-tmpl-tmpl-parm-neg.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .>.")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .class.
          or .typename. before")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .class.
          or .typename. before")[^\n]*\n?)+'
test_typename-tmpl-tmpl-parm-neg_329:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/typename-tmpl-tmpl-parm-neg.C'
    sources:
      binary: typename-tmpl-tmpl-parm-neg.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .>.")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .class.
          or .typename. before")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .class.
          or .typename. before")[^\n]*\n?)+'
test_typename-tmpl-tmpl-parm-neg_675:
  build:
    cflags: "-std=gnu++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/typename-tmpl-tmpl-parm-neg.C'
    sources:
      binary: typename-tmpl-tmpl-parm-neg.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .>.")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .class.
          or .typename. before")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .class.
          or .typename. before")[^\n]*\n?)+'
test_typename-tmpl-tmpl-parm-neg_676:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/typename-tmpl-tmpl-parm-neg.C'
    sources:
      binary: typename-tmpl-tmpl-parm-neg.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .>.")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .class.
          or .typename. before")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .class.
          or .typename. before")[^\n]*\n?)+'
test_typename-tmpl-tmpl-parm-neg_677:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/typename-tmpl-tmpl-parm-neg.C'
    sources:
      binary: typename-tmpl-tmpl-parm-neg.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .>.")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .class.
          or .typename. before")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .class.
          or .typename. before")[^\n]*\n?)+'
test_typename-tmpl-tmpl-parm-ped-neg_330:
  build:
    cflags: "-std=gnu++98 -pedantic\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/typename-tmpl-tmpl-parm-ped-neg.C'
    sources:
      binary: typename-tmpl-tmpl-parm-ped-neg.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("ISO C.. forbids typename
          key in template template parameter")[^\n]*\n?)+'
test_typename-tmpl-tmpl-parm-ped-neg_331:
  build:
    cflags: "-std=gnu++11 -pedantic\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/typename-tmpl-tmpl-parm-ped-neg.C'
    sources:
      binary: typename-tmpl-tmpl-parm-ped-neg.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("ISO C.. forbids typename
          key in template template parameter")[^\n]*\n?)+'
test_typename-tmpl-tmpl-parm-ped-neg_332:
  build:
    cflags: "-std=gnu++14 -pedantic\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/typename-tmpl-tmpl-parm-ped-neg.C'
    sources:
      binary: typename-tmpl-tmpl-parm-ped-neg.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("ISO C.. forbids typename
          key in template template parameter")[^\n]*\n?)+'
test_typename-tmpl-tmpl-parm-ped-neg_678:
  build:
    cflags: "-std=gnu++98 -pedantic\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/typename-tmpl-tmpl-parm-ped-neg.C'
    sources:
      binary: typename-tmpl-tmpl-parm-ped-neg.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("ISO C.. forbids typename
          key in template template parameter")[^\n]*\n?)+'
test_typename-tmpl-tmpl-parm-ped-neg_679:
  build:
    cflags: "-std=gnu++11 -pedantic\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/typename-tmpl-tmpl-parm-ped-neg.C'
    sources:
      binary: typename-tmpl-tmpl-parm-ped-neg.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("ISO C.. forbids typename
          key in template template parameter")[^\n]*\n?)+'
test_typename-tmpl-tmpl-parm-ped-neg_680:
  build:
    cflags: "-std=gnu++14 -pedantic\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/typename-tmpl-tmpl-parm-ped-neg.C'
    sources:
      binary: typename-tmpl-tmpl-parm-ped-neg.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("ISO C.. forbids typename
          key in template template parameter")[^\n]*\n?)+'
test_typename-tmpl-tmpl-parm_333:
  build:
    cflags: "-std=gnu++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/typename-tmpl-tmpl-parm.C'
    sources:
      binary: typename-tmpl-tmpl-parm.s
  group: GRPSERIAL
test_typename-tmpl-tmpl-parm_334:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/typename-tmpl-tmpl-parm.C'
    sources:
      binary: typename-tmpl-tmpl-parm.s
  group: GRPSERIAL
test_typename-tmpl-tmpl-parm_335:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/typename-tmpl-tmpl-parm.C'
    sources:
      binary: typename-tmpl-tmpl-parm.s
  group: GRPSERIAL
test_typename-tmpl-tmpl-parm_681:
  build:
    cflags: "-std=gnu++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/typename-tmpl-tmpl-parm.C'
    sources:
      binary: typename-tmpl-tmpl-parm.s
  group: GRPSERIAL
test_typename-tmpl-tmpl-parm_682:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/typename-tmpl-tmpl-parm.C'
    sources:
      binary: typename-tmpl-tmpl-parm.s
  group: GRPSERIAL
test_typename-tmpl-tmpl-parm_683:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/typename-tmpl-tmpl-parm.C'
    sources:
      binary: typename-tmpl-tmpl-parm.s
  group: GRPSERIAL
test_udlit-utf8char_336:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/udlit-utf8char.C'
    sources:
      binary: udlit-utf8char.s
  group: GRPSERIAL
test_udlit-utf8char_684:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/udlit-utf8char.C'
    sources:
      binary: udlit-utf8char.s
  group: GRPSERIAL
test_using1_337:
  build:
    cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/using1.C'
    sources:
      binary: using1.s
  group: GRPSERIAL
  validate:
    match:
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_using1_338:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/using1.C'
    sources:
      binary: using1.s
  group: GRPSERIAL
  validate:
    match:
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_using1_339:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/using1.C'
    sources:
      binary: using1.s
  group: GRPSERIAL
  validate:
    match:
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_using1_685:
  build:
    cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/using1.C'
    sources:
      binary: using1.s
  group: GRPSERIAL
  validate:
    match:
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_using1_686:
  build:
    cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/using1.C'
    sources:
      binary: using1.s
  group: GRPSERIAL
  validate:
    match:
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_using1_687:
  build:
    cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/using1.C'
    sources:
      binary: using1.s
  group: GRPSERIAL
  validate:
    match:
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_using2_340:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/using2.C'
    sources:
      binary: using2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("pack expansion")[^\n]*\n?)+'
test_using2_341:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/using2.C'
    sources:
      binary: using2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("pack expansion")[^\n]*\n?)+'
test_using2_688:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/using2.C'
    sources:
      binary: using2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("pack expansion")[^\n]*\n?)+'
test_using2_689:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/using2.C'
    sources:
      binary: using2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("pack expansion")[^\n]*\n?)+'
test_using3_342:
  build:
    cflags: "-std=gnu++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/using3.C'
    sources:
      binary: using3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("comma")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("comma")[^\n]*\n?)+'
test_using3_343:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/using3.C'
    sources:
      binary: using3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("comma")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("comma")[^\n]*\n?)+'
test_using3_344:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/using3.C'
    sources:
      binary: using3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("comma")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("comma")[^\n]*\n?)+'
test_using3_690:
  build:
    cflags: "-std=gnu++98 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/using3.C'
    sources:
      binary: using3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("comma")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("comma")[^\n]*\n?)+'
test_using3_691:
  build:
    cflags: "-std=gnu++11 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/using3.C'
    sources:
      binary: using3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("comma")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("comma")[^\n]*\n?)+'
test_using3_692:
  build:
    cflags: "-std=gnu++14 \n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/using3.C'
    sources:
      binary: using3.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("comma")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("comma")[^\n]*\n?)+'
test_utf8-2_345:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/utf8-2.C'
    sources:
      binary: utf8-2.s
  group: GRPSERIAL
test_utf8-2_693:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/utf8-2.C'
    sources:
      binary: utf8-2.s
  group: GRPSERIAL
test_utf8-2a_346:
  build:
    cflags: "-pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/utf8-2a.C'
    sources:
      binary: utf8-2a.s
  group: GRPSERIAL
test_utf8-2a_694:
  build:
    cflags: "-pedantic-errors -Wno-long-long\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/utf8-2a.C'
    sources:
      binary: utf8-2a.s
  group: GRPSERIAL
test_utf8-neg_347:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/utf8-neg.C'
    sources:
      binary: utf8-neg.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("empty character")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("multi-character character
          constant")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("multi-character character
          constant")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("multi-character character
          constant")[^\n]*\n?)+'
test_utf8-neg_695:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/utf8-neg.C'
    sources:
      binary: utf8-neg.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("empty character")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("multi-character character
          constant")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("multi-character character
          constant")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("multi-character character
          constant")[^\n]*\n?)+'
test_utf8_348:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/utf8.C'
    sources:
      binary: utf8.s
  group: GRPSERIAL
test_utf8_696:
  build:
    cflags: "-std=c++1z\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/utf8.C'
    sources:
      binary: utf8.s
  group: GRPSERIAL
