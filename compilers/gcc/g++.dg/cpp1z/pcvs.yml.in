---
test_abbrev1_1:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/abbrev1.C'
    sources:
      binary: abbrev1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_abbrev2_2:
  build:
    cflags: '  -std=c++1z'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/abbrev2.C'
    sources:
      binary: ./abbrev2.exe
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_aggr-base1_3:
  build:
    cflags: '  -std=c++1z'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aggr-base1.C'
    sources:
      binary: ./aggr-base1.exe
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_aggr-base1a_4:
  build:
    cflags: ' -std=c++11  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aggr-base1a.C'
    sources:
      binary: aggr-base1a.s
  group: GRPSERIAL
  info: &1
    regex-err:
      - |-
        (^|
        )([^
        ]+(:14:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:15:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_aggr-base1a_5:
  build:
    cflags: ' -std=c++14  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aggr-base1a.C'
    sources:
      binary: aggr-base1a.s
  group: GRPSERIAL
  info: *1
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_aggr-base2_6:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aggr-base2.C'
    sources:
      binary: aggr-base2.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
    regex-err:
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_aggr-base2a_7:
  build:
    cflags: ' -std=c++11  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aggr-base2a.C'
    sources:
      binary: aggr-base2a.s
  group: GRPSERIAL
  info: &2
    regex-err:
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_aggr-base2a_8:
  build:
    cflags: ' -std=c++14  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aggr-base2a.C'
    sources:
      binary: aggr-base2a.s
  group: GRPSERIAL
  info: *2
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_aggr-base3_9:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aggr-base3.C'
    sources:
      binary: aggr-base3.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
    regex-err:
      - |-
        (^|
        )([^
        ]+(:9:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(base))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_aggr-base4_10:
  build:
    cflags: '  -std=c++1z'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aggr-base4.C'
    sources:
      binary: ./aggr-base4.exe
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_aggr-base5_11:
  build:
    cflags: '  -std=c++1z -w'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aggr-base5.C'
    sources:
      binary: ./aggr-base5.exe
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -w"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_aggr-base6_12:
  build:
    cflags: '  -std=c++1z -w'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aggr-base6.C'
    sources:
      binary: ./aggr-base6.exe
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -w"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_aligned-new1_13:
  build:
    cflags: '  -std=c++1z'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aligned-new1.C'
    sources:
      binary: ./aligned-new1.exe
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_aligned-new2_14:
  build:
    cflags: '  -std=c++1z'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aligned-new2.C'
    sources:
      binary: ./aligned-new2.exe
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_aligned-new3_15:
  build:
    cflags: '  -std=c++1z'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aligned-new3.C'
    sources:
      binary: ./aligned-new3.exe
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_aligned-new4_16:
  build:
    cflags: '  -std=c++14 -Waligned-new -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aligned-new4.C'
    sources:
      binary: aligned-new4.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++14 -Waligned-new"'
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: warning:[^
        ]*(-Waligned-new))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_aligned-new4a_17:
  build:
    cflags: '  -std=c++14 -Waligned-new=all -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aligned-new4a.C'
    sources:
      binary: aligned-new4a.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++14 -Waligned-new=all"'
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: warning:[^
        ]*(-Waligned-new))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:12:)[^
        ]*([0-9]+: warning:[^
        ]*(-Waligned-new))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_aligned-new5_18:
  build:
    cflags: ' -std=gnu++98 -faligned-new'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aligned-new5.C'
    sources:
      binary: ./aligned-new5.exe
  group: GRPSERIAL
  info: &3
    extraopts:
      - -faligned-new
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_aligned-new5_19:
  build:
    cflags: ' -std=gnu++11 -faligned-new'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aligned-new5.C'
    sources:
      binary: ./aligned-new5.exe
  group: GRPSERIAL
  info: *3
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_aligned-new5_20:
  build:
    cflags: ' -std=gnu++14 -faligned-new'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aligned-new5.C'
    sources:
      binary: ./aligned-new5.exe
  group: GRPSERIAL
  info: *3
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_aligned-new6_21:
  build:
    cflags: ' -std=gnu++11 -faligned-new -W -Wall -Wno-aligned-new'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aligned-new6.C'
    sources:
      binary: ./aligned-new6.exe
  group: GRPSERIAL
  info: &4
    extraopts:
      - '"-faligned-new -W -Wall -Wno-aligned-new"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_aligned-new6_22:
  build:
    cflags: ' -std=gnu++14 -faligned-new -W -Wall -Wno-aligned-new'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aligned-new6.C'
    sources:
      binary: ./aligned-new6.exe
  group: GRPSERIAL
  info: *4
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_aligned-new7_23:
  build:
    cflags: '  -Wall -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aligned-new7.C'
    sources:
      binary: aligned-new7.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-Wall -std=c++1z"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_aligned-new8_24:
  build:
    cflags: '  -std=c++17'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/aligned-new8.C'
    sources:
      binary: ./aligned-new8.exe
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++17
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_attributes-enum-1_25:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/attributes-enum-1.C'
    sources:
      binary: attributes-enum-1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_attributes-enum-1a_26:
  build:
    cflags: '   -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/attributes-enum-1a.C'
    sources:
      binary: attributes-enum-1a.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_bool-increment1_27:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/bool-increment1.C'
    sources:
      binary: bool-increment1.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
    regex-err:
      - |-
        (^|
        )([^
        ]+(:8:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(use of an operand of type .bool. in .operator\\+\\+. is forbidden in))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:9:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(use of an operand of type .bool. in .operator\\+\\+. is forbidden in))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(use of an operand of type .bool. in .operator--. is forbidden))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(use of an operand of type .bool. in .operator--. is forbidden))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_byte1_28:
  build:
    cflags: '  -std=c++1z -O3 -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/byte1.C'
    sources:
      binary: byte1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -O3"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class-deduction10_30:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction10.C'
    sources:
      binary: class-deduction10.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
    regex-err:
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(1:function body))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class-deduction11_31:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction11.C'
    sources:
      binary: class-deduction11.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
    regex-err:
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(1:decl-specifier))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class-deduction12_32:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction12.C'
    sources:
      binary: class-deduction12.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class-deduction13_33:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction13.C'
    sources:
      binary: class-deduction13.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class-deduction14_34:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction14.C'
    sources:
      binary: class-deduction14.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
    regex-err:
      - |-
        (^|
        )([^
        ]+(:15:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class-deduction15_35:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction15.C'
    sources:
      binary: class-deduction15.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class-deduction16_36:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction16.C'
    sources:
      binary: class-deduction16.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class-deduction17_37:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction17.C'
    sources:
      binary: class-deduction17.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class-deduction18_38:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction18.C'
    sources:
      binary: class-deduction18.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class-deduction19_39:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction19.C'
    sources:
      binary: class-deduction19.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class-deduction1_29:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction1.C'
    sources:
      binary: class-deduction1.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class-deduction20_41:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction20.C'
    sources:
      binary: class-deduction20.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class-deduction21_42:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction21.C'
    sources:
      binary: class-deduction21.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
    regex-err:
      - |-
        (^|
        )([^
        ]+(:13:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(return type))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class-deduction22_43:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction22.C'
    sources:
      binary: class-deduction22.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
    regex-err:
      - |-
        (^|
        )([^
        ]+(:6:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(B))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class-deduction23_44:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction23.C'
    sources:
      binary: class-deduction23.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
    regex-err:
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(placeholder))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class-deduction24_45:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction24.C'
    sources:
      binary: class-deduction24.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class-deduction25_46:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction25.C'
    sources:
      binary: class-deduction25.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class-deduction26_47:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction26.C'
    sources:
      binary: class-deduction26.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
    regex-err:
      - |-
        (^|
        )([^
        ]+(:23:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class-deduction27_48:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction27.C'
    sources:
      binary: class-deduction27.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class-deduction28_49:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction28.C'
    sources:
      binary: class-deduction28.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
    regex-err:
      - |-
        (^|
        )([^
        ]+(:12:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:24:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class-deduction29_50:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction29.C'
    sources:
      binary: class-deduction29.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class-deduction2_40:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction2.C'
    sources:
      binary: class-deduction2.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class-deduction30_52:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction30.C'
    sources:
      binary: class-deduction30.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class-deduction31_53:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction31.C'
    sources:
      binary: class-deduction31.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class-deduction32_54:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction32.C'
    sources:
      binary: class-deduction32.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class-deduction33_55:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction33.C'
    sources:
      binary: class-deduction33.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class-deduction34_56:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction34.C'
    sources:
      binary: class-deduction34.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class-deduction35_57:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction35.C'
    sources:
      binary: class-deduction35.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
    regex-err:
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class-deduction36_58:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction36.C'
    sources:
      binary: class-deduction36.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class-deduction38_59:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction38.C'
    sources:
      binary: class-deduction38.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class-deduction3_51:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction3.C'
    sources:
      binary: class-deduction3.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class-deduction40_61:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction40.C'
    sources:
      binary: class-deduction40.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class-deduction4_60:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction4.C'
    sources:
      binary: class-deduction4.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class-deduction5_62:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction5.C'
    sources:
      binary: class-deduction5.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class-deduction6_63:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction6.C'
    sources:
      binary: class-deduction6.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class-deduction7_64:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction7.C'
    sources:
      binary: class-deduction7.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
    regex-err:
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(must have trailing return type))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class-deduction8_65:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction8.C'
    sources:
      binary: class-deduction8.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
    regex-err:
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_class-deduction9_66:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/class-deduction9.C'
    sources:
      binary: class-deduction9.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
    regex-err:
      - |-
        (^|
        )([^
        ]+(:13:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(should have been declared inside .N))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_constexpr-if10_69:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if10.C'
    sources:
      binary: constexpr-if10.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_constexpr-if11_70:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if11.C'
    sources:
      binary: constexpr-if11.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
    regex-err:
      - |-
        (^|
        )([^
        ]+(:14:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(non-static))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_constexpr-if12_71:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if12.C'
    sources:
      binary: constexpr-if12.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_constexpr-if1_67:
  build:
    cflags: ' -std=gnu++11  -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if1.C'
    sources:
      binary: constexpr-if1.s
  group: GRPSERIAL
  info: &5
    extraopts:
      - '""'
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:7:)[^
        ]*([0-9]+: warning:[^
        ]*(constexpr" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_constexpr-if1_68:
  build:
    cflags: ' -std=gnu++14  -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if1.C'
    sources:
      binary: constexpr-if1.s
  group: GRPSERIAL
  info: *5
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_constexpr-if2_72:
  build:
    cflags: ' -std=gnu++14  -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if2.C'
    sources:
      binary: constexpr-if2.s
  group: GRPSERIAL
  info:
    extraopts:
      - '""'
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:9:)[^
        ]*([0-9]+: warning:[^
        ]*(constexpr" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_constexpr-if3_73:
  build:
    cflags: ' -std=gnu++11 '
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if3.C'
    sources:
      binary: constexpr-if3.exe
  group: GRPSERIAL
  info: &6
    extraopts:
      - '""'
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:7:)[^
        ]*([0-9]+: warning:[^
        ]*(constexpr" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_constexpr-if3_74:
  build:
    cflags: ' -std=gnu++14 '
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if3.C'
    sources:
      binary: constexpr-if3.exe
  group: GRPSERIAL
  info: *6
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_constexpr-if4_75:
  build:
    cflags: ' -std=gnu++11 -w -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if4.C'
    sources:
      binary: constexpr-if4.s
  group: GRPSERIAL
  info: &7
    extraopts:
      - '"-w"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:9:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(jump to label))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_constexpr-if4_76:
  build:
    cflags: ' -std=gnu++14 -w -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if4.C'
    sources:
      binary: constexpr-if4.s
  group: GRPSERIAL
  info: *7
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_constexpr-if5_77:
  build:
    cflags: ' -std=gnu++11 -w -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if5.C'
    sources:
      binary: constexpr-if5.s
  group: GRPSERIAL
  info: &8
    extraopts:
      - '"-w"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:12:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(jump to label))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_constexpr-if5_78:
  build:
    cflags: ' -std=gnu++14 -w -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if5.C'
    sources:
      binary: constexpr-if5.s
  group: GRPSERIAL
  info: *8
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_constexpr-if6_79:
  build:
    cflags: ' -std=gnu++11 -w -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if6.C'
    sources:
      binary: constexpr-if6.s
  group: GRPSERIAL
  info: &9
    extraopts:
      - '"-w"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_constexpr-if6_80:
  build:
    cflags: ' -std=gnu++14 -w -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if6.C'
    sources:
      binary: constexpr-if6.s
  group: GRPSERIAL
  info: *9
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_constexpr-if7_81:
  build:
    cflags: ' -std=gnu++11 -w -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if7.C'
    sources:
      binary: constexpr-if7.s
  group: GRPSERIAL
  info: &10
    extraopts:
      - '"-w"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_constexpr-if7_82:
  build:
    cflags: ' -std=gnu++14 -w -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if7.C'
    sources:
      binary: constexpr-if7.s
  group: GRPSERIAL
  info: *10
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_constexpr-if8_83:
  build:
    cflags: ' -std=gnu++11 -w -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if8.C'
    sources:
      binary: constexpr-if8.s
  group: GRPSERIAL
  info: &11
    extraopts:
      - '"-w"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:8:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(jump to label))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_constexpr-if8_84:
  build:
    cflags: ' -std=gnu++14 -w -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if8.C'
    sources:
      binary: constexpr-if8.s
  group: GRPSERIAL
  info: *11
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_constexpr-if9_85:
  build:
    cflags: ' -std=gnu++11 -w -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if9.C'
    sources:
      binary: constexpr-if9.s
  group: GRPSERIAL
  info: &12
    extraopts:
      - '"-w"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:9:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(jump to case label))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_constexpr-if9_86:
  build:
    cflags: ' -std=gnu++14 -w -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-if9.C'
    sources:
      binary: constexpr-if9.s
  group: GRPSERIAL
  info: *12
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_constexpr-lambda10_88:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda10.C'
    sources:
      binary: constexpr-lambda10.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
    regex-err:
      - |-
        (^|
        )([^
        ]+(:8:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_constexpr-lambda11_89:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda11.C'
    sources:
      binary: constexpr-lambda11.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_constexpr-lambda12_90:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda12.C'
    sources:
      binary: constexpr-lambda12.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
    regex-err:
      - |-
        (^|
        )([^
        ]+(:6:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(uninitialized))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_constexpr-lambda13_91:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda13.C'
    sources:
      binary: constexpr-lambda13.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
    regex-err:
      - |-
        (^|
        )([^
        ]+(:3:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(duplicate))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:4:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(duplicate))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:5:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(static))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_constexpr-lambda14_92:
  build:
    cflags: '  -std=c++14 -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda14.C'
    sources:
      binary: constexpr-lambda14.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++14
    regex-err:
      - |-
        (^|
        )([^
        ]+(:3:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(constexpr))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_constexpr-lambda15_93:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda15.C'
    sources:
      binary: constexpr-lambda15.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_constexpr-lambda16_94:
  build:
    cflags: ' -std=c++14  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda16.C'
    sources:
      binary: constexpr-lambda16.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_constexpr-lambda1_87:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda1.C'
    sources:
      binary: constexpr-lambda1.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_constexpr-lambda2_95:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda2.C'
    sources:
      binary: constexpr-lambda2.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_constexpr-lambda3_96:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda3.C'
    sources:
      binary: constexpr-lambda3.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_constexpr-lambda4_97:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda4.C'
    sources:
      binary: constexpr-lambda4.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_constexpr-lambda5_98:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda5.C'
    sources:
      binary: constexpr-lambda5.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_constexpr-lambda6_99:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda6.C'
    sources:
      binary: constexpr-lambda6.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
    regex-err:
      - |-
        (^|
        )([^
        ]+(:27:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_constexpr-lambda7_100:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda7.C'
    sources:
      binary: constexpr-lambda7.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
    regex-err:
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(non-literal))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_constexpr-lambda8_101:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda8.C'
    sources:
      binary: constexpr-lambda8.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
    regex-err:
      - |-
        (^|
        )([^
        ]+(:9:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(static))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_constexpr-lambda9_102:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/constexpr-lambda9.C'
    sources:
      binary: constexpr-lambda9.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_cplusplus_103:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/cplusplus.C'
    sources:
      binary: cplusplus.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp-bitfield1_104:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp-bitfield1.C'
    sources:
      binary: decomp-bitfield1.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
    regex-err:
      - |-
        (^|
        )([^
        ]+(:16:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(bit))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:17:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(bit))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:18:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(bit))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp-constexpr1_105:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp-constexpr1.C'
    sources:
      binary: decomp-constexpr1.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp10_108:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp10.C'
    sources:
      binary: decomp10.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
    regex-err:
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(is not an integral constant expression))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:14:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(only 1 name provided))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:19:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(get))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:23:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(get<0>))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:28:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(get<0>))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:35:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(tuple_element))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:40:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(tuple_element))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:46:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(no type named .type))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp11_109:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp11.C'
    sources:
      binary: decomp11.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp12_110:
  build:
    cflags: '  -std=c++1z'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp12.C'
    sources:
      binary: ./decomp12.exe
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp13_111:
  build:
    cflags: -std=gnu++11 -ffat-lto-objects -S
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp13.C'
    sources:
      binary: decomp13.s
  group: GRPSERIAL
  info: &13
    extraopts:
      - '""'
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:14:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:16:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:18:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:20:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:26:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:28:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:30:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:34:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:42:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:44:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:51:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp13_112:
  build:
    cflags: -std=gnu++14 -ffat-lto-objects -S
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp13.C'
    sources:
      binary: decomp13.s
  group: GRPSERIAL
  info: *13
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp14_113:
  build:
    cflags: ' -std=gnu++11  -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp14.C'
    sources:
      binary: decomp14.s
  group: GRPSERIAL
  info: &14
    extraopts:
      - '""'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:22:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot decompose class type 'F': both it and its base class 'A' have non-static data members))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:24:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot decompose class type 'G': its base classes 'A' and 'E' have non-static data members))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:27:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('B' is an ambiguous base of 'K'))[^
        ]*
        ?)+
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:12:)[^
        ]*([0-9]+: warning:[^
        ]*(due to ambiguity))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:14:)[^
        ]*([0-9]+: warning:[^
        ]*(due to ambiguity))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:21:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:23:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:25:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:26:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:28:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:29:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp14_114:
  build:
    cflags: ' -std=gnu++14  -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp14.C'
    sources:
      binary: decomp14.s
  group: GRPSERIAL
  info: *14
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp15_115:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp15.C'
    sources:
      binary: decomp15.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp16_116:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp16.C'
    sources:
      binary: decomp16.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:13:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:15:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:17:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:19:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:21:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:26:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:33:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:34:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:38:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:42:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:43:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:44:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:45:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:46:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp17_117:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp17.C'
    sources:
      binary: decomp17.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp18_118:
  build:
    cflags: ' -std=gnu++11  -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp18.C'
    sources:
      binary: decomp18.s
  group: GRPSERIAL
  info: &15
    extraopts:
      - '""'
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp18_119:
  build:
    cflags: ' -std=gnu++14  -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp18.C'
    sources:
      binary: decomp18.s
  group: GRPSERIAL
  info: *15
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp19_120:
  build:
    cflags: ' -std=gnu++11 '
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp19.C'
    sources:
      binary: ./decomp19.exe
  group: GRPSERIAL
  info: &16
    extraopts:
      - '""'
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp19_121:
  build:
    cflags: ' -std=gnu++14 '
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp19.C'
    sources:
      binary: ./decomp19.exe
  group: GRPSERIAL
  info: *16
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp1_106:
  build:
    cflags: ' -std=gnu++11 '
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp1.C'
    sources:
      binary: ./decomp1.exe
  group: GRPSERIAL
  info: &17
    extraopts:
      - '""'
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:12:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:13:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp1_107:
  build:
    cflags: ' -std=gnu++14 '
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp1.C'
    sources:
      binary: ./decomp1.exe
  group: GRPSERIAL
  info: *17
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp20_124:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp20.C'
    sources:
      binary: decomp20.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp21_125:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp21.C'
    sources:
      binary: decomp21.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
    regex-err:
      - |-
        (^|
        )([^
        ]+(:14:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected primary-expression before '.' token))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:15:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid initializer for structured binding declaration" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp22_126:
  build:
    cflags: ' -std=gnu++11  -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp22.C'
    sources:
      binary: decomp22.s
  group: GRPSERIAL
  info: &18
    extraopts:
      - '""'
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:19:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp22_127:
  build:
    cflags: ' -std=gnu++14  -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp22.C'
    sources:
      binary: decomp22.s
  group: GRPSERIAL
  info: *18
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp23_128:
  build:
    cflags: ' -std=gnu++11  -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp23.C'
    sources:
      binary: decomp23.s
  group: GRPSERIAL
  info: &19
    extraopts:
      - '""'
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp23_129:
  build:
    cflags: ' -std=gnu++14  -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp23.C'
    sources:
      binary: decomp23.s
  group: GRPSERIAL
  info: *19
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp24_130:
  build:
    cflags: ' -std=gnu++11  -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp24.C'
    sources:
      binary: decomp24.s
  group: GRPSERIAL
  info: &20
    extraopts:
      - '""'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:9:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot decompose lambda closure type))[^
        ]*
        ?)+
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp24_131:
  build:
    cflags: ' -std=gnu++14  -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp24.C'
    sources:
      binary: decomp24.s
  group: GRPSERIAL
  info: *20
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp25_132:
  build:
    cflags: ' -std=gnu++11  -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp25.C'
    sources:
      binary: decomp25.s
  group: GRPSERIAL
  info: &21
    extraopts:
      - '""'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:9:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot decompose non-array non-class type))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot decompose non-array non-class type))[^
        ]*
        ?)+
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:12:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp25_133:
  build:
    cflags: ' -std=gnu++14  -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp25.C'
    sources:
      binary: decomp25.s
  group: GRPSERIAL
  info: *21
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp26_134:
  build:
    cflags: ' -std=gnu++11  -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp26.C'
    sources:
      binary: decomp26.s
  group: GRPSERIAL
  info: &22
    extraopts:
      - '""'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:6:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot decompose non-array non-class type))[^
        ]*
        ?)+
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:5:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp26_135:
  build:
    cflags: ' -std=gnu++14  -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp26.C'
    sources:
      binary: decomp26.s
  group: GRPSERIAL
  info: *22
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp27_136:
  build:
    cflags: '  -std=c++1z'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp27.C'
    sources:
      binary: ./decomp27.exe
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp28_137:
  build:
    cflags: ' -std=gnu++14  -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp28.C'
    sources:
      binary: decomp28.s
  group: GRPSERIAL
  info:
    extraopts:
      - '""'
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:18:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:25:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:38:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp2_122:
  build:
    cflags: ' -std=gnu++11 '
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp2.C'
    sources:
      binary: ./decomp2.exe
  group: GRPSERIAL
  info: &23
    extraopts:
      - '""'
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:12:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:13:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:14:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:15:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:16:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:17:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp2_123:
  build:
    cflags: ' -std=gnu++14 '
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp2.C'
    sources:
      binary: ./decomp2.exe
  group: GRPSERIAL
  info: *23
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp30_139:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp30.C'
    sources:
      binary: decomp30.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
    regex-err:
      - |-
        (^|
        )([^
        ]+(:8:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid initializer for structured binding declaration))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:9:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid initializer for structured binding declaration))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(deducing from brace-enclosed initializer list requires))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid initializer for structured binding declaration))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:12:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid initializer for structured binding declaration))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:13:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(deducing from brace-enclosed initializer list requires))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:14:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(deducing from brace-enclosed initializer list requires))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp32_140:
  build:
    cflags: ' -std=gnu++11  -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp32.C'
    sources:
      binary: decomp32.s
  group: GRPSERIAL
  info: &24
    extraopts:
      - '""'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:19:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(1 name provided))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:23:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(1 name provided" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:26:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(2 names provided" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:30:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(3 names provided))[^
        ]*
        ?)+
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:21:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:25:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:28:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:32:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp32_141:
  build:
    cflags: ' -std=gnu++14  -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp32.C'
    sources:
      binary: decomp32.s
  group: GRPSERIAL
  info: *24
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp33_142:
  build:
    cflags: ' -std=gnu++11  -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp33.C'
    sources:
      binary: decomp33.s
  group: GRPSERIAL
  info: &25
    extraopts:
      - '""'
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:14:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:20:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp33_143:
  build:
    cflags: ' -std=gnu++14  -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp33.C'
    sources:
      binary: decomp33.s
  group: GRPSERIAL
  info: *25
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp34_144:
  build:
    cflags: -std=gnu++11 -ffat-lto-objects -S
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp34.C'
    sources:
      binary: decomp34.s
  group: GRPSERIAL
  info: &26
    extraopts:
      - '""'
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:7:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:8:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp34_145:
  build:
    cflags: -std=gnu++14 -ffat-lto-objects -S
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp34.C'
    sources:
      binary: decomp34.s
  group: GRPSERIAL
  info: *26
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp3_138:
  build:
    cflags: '   -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp3.C'
    sources:
      binary: decomp3.s
  group: GRPSERIAL
  info:
    extraopts:
      - '""'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:12:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(decomposition declaration cannot be declared with type 'int'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:14:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(decomposition declaration cannot be declared with type 'char'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:17:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(decomposition declaration cannot be declared with type 'decltype.auto.'" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:19:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected primary-expression before 'decltype'" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:20:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(multiple ref-qualifiers))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:22:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(decomposition declaration cannot be declared 'constexpr'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:24:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('friend' used outside of class))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:26:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(decomposition declaration cannot be declared 'typedef'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:28:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(decomposition declaration cannot be declared 'inline'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:30:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid use of 'restrict'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:32:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('long long' invalid for 'decomposition'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:34:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('virtual' outside class declaration))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:36:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('explicit' outside class declaration))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:38:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(decomposition declaration cannot be declared 'static'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:40:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(decomposition declaration cannot be declared 'extern'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:45:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('p' was not declared in this scope))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:54:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(only 3 names provided))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:57:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(5 names provided))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:60:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(only 2 names provided))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:63:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(4 names provided))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:66:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(empty decomposition declaration))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:68:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(2 names provided))[^
        ]*
        ?)+
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:13:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with -std=c..1z or -std=gnu..1z" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:15:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with -std=c..1z or -std=gnu..1z" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:16:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with -std=c..1z or -std=gnu..1z" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:18:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with -std=c..1z or -std=gnu..1z" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:21:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with -std=c..1z or -std=gnu..1z" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:23:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with -std=c..1z or -std=gnu..1z" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:25:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with -std=c..1z or -std=gnu..1z" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:27:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with -std=c..1z or -std=gnu..1z" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:29:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with -std=c..1z or -std=gnu..1z" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:31:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with -std=c..1z or -std=gnu..1z" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:33:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with -std=c..1z or -std=gnu..1z" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:35:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with -std=c..1z or -std=gnu..1z" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:37:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with -std=c..1z or -std=gnu..1z" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:39:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with -std=c..1z or -std=gnu..1z" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:41:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with -std=c..1z or -std=gnu..1z" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:56:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with -std=c..1z or -std=gnu..1z" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:59:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with -std=c..1z or -std=gnu..1z" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:62:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with -std=c..1z or -std=gnu..1z" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:65:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with -std=c..1z or -std=gnu..1z" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:67:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with -std=c..1z or -std=gnu..1z" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:70:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with -std=c..1z or -std=gnu..1z" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp4_146:
  build:
    cflags: '   -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp4.C'
    sources:
      binary: decomp4.s
  group: GRPSERIAL
  info:
    extraopts:
      - '""'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:17:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot decompose class type 'A' because it has an anonymous struct member))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:19:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot decompose class type 'B' because it has an anonymous union member))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:21:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot decompose non-public member 'C::b' of 'C'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:24:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot decompose non-public member 'E::a' of 'E'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:27:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot decompose class type 'G': both it and its base class 'F' have non-static data members))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:30:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot decompose class type 'I': its base classes 'F' and 'H' have non-static data members))[^
        ]*
        ?)+
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:18:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with -std=c..1z or -std=gnu..1z" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:20:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with -std=c..1z or -std=gnu..1z" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:22:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with -std=c..1z or -std=gnu..1z" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:23:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with -std=c..1z or -std=gnu..1z" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:25:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with -std=c..1z or -std=gnu..1z" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:26:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with -std=c..1z or -std=gnu..1z" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:28:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with -std=c..1z or -std=gnu..1z" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:29:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with -std=c..1z or -std=gnu..1z" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:31:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with -std=c..1z or -std=gnu..1z" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp5_147:
  build:
    cflags: ' -std=gnu++11 '
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp5.C'
    sources:
      binary: ./decomp5.exe
  group: GRPSERIAL
  info: &27
    extraopts:
      - '""'
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:15:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:21:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:27:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp5_148:
  build:
    cflags: ' -std=gnu++14 '
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp5.C'
    sources:
      binary: ./decomp5.exe
  group: GRPSERIAL
  info: *27
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp6_149:
  build:
    cflags: ' -std=gnu++11 '
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp6.C'
    sources:
      binary: ./decomp6.exe
  group: GRPSERIAL
  info: &28
    extraopts:
      - '""'
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:26:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:37:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:62:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:73:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:98:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:109:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp6_150:
  build:
    cflags: ' -std=gnu++14 '
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp6.C'
    sources:
      binary: ./decomp6.exe
  group: GRPSERIAL
  info: *28
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp7_151:
  build:
    cflags: ' -std=gnu++11 '
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp7.C'
    sources:
      binary: ./decomp7.exe
  group: GRPSERIAL
  info: &29
    extraopts:
      - '""'
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:13:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:14:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:15:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:16:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:17:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:18:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:19:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:20:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp7_152:
  build:
    cflags: ' -std=gnu++14 '
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp7.C'
    sources:
      binary: ./decomp7.exe
  group: GRPSERIAL
  info: *29
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp8_153:
  build:
    cflags: ' -std=gnu++11 '
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp8.C'
    sources:
      binary: ./decomp8.exe
  group: GRPSERIAL
  info: &30
    extraopts:
      - '""'
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:17:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:23:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:29:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:48:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:54:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:60:)[^
        ]*([0-9]+: warning:[^
        ]*(decomposition declaration only available with" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp8_154:
  build:
    cflags: ' -std=gnu++14 '
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp8.C'
    sources:
      binary: ./decomp8.exe
  group: GRPSERIAL
  info: *30
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_decomp9_155:
  build:
    cflags: '  -std=c++1z'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/decomp9.C'
    sources:
      binary: ./decomp9.exe
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_direct-enum-init1_156:
  build:
    cflags: ' -std=c++11  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/direct-enum-init1.C'
    sources:
      binary: direct-enum-init1.s
  group: GRPSERIAL
  info: &31
    regex-err:
      - |-
        (^|
        )([^
        ]+(:20:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid conversion from 'int' to 'A'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:21:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid conversion from 'int' to 'B'" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:23:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid cast from type 'T' to type 'D'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:24:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'T' to 'D' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:25:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid cast from type 'T' to type 'D'" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:26:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'int' to 'D' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:27:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'long int' to 'D' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:29:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'A' to 'D' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:30:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'int' to 'E' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:31:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'int' to 'E' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:32:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(narrowing conversion of '-1' from 'int' to 'unsigned char' inside" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:33:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'double' to 'E' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:34:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(narrowing conversion of '5.0e.0' from 'double' to 'unsigned char' inside" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:35:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'double' to 'E' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:36:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(narrowing conversion of '5.\[0-9]*e.0' from 'double' to 'unsigned char' inside" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:37:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid conversion from 'int' to 'B'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:38:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'int' to 'C' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:40:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert \[^\n\r]* to 'D' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:41:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert \[^\n\r]* to 'E' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:42:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(narrowing conversion of '-4' from 'int' to 'unsigned char' inside" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:43:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert \[^\n\r]* to 'E' for argument))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:44:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'int' to 'E' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:45:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(braces around scalar initializer for type 'E'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:46:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'int' to 'E' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:47:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'double' to 'E' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:48:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(narrowing conversion of '5.0e.0' from 'double' to 'unsigned char' inside" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:49:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'int' to 'E' in initialization))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:50:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid conversion from 'int' to 'B'" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:52:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'double' to 'B' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:53:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(narrowing conversion of '4.0e.0' from 'double' to 'short int' inside" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:54:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'long int' to 'C' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:55:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid conversion from 'short int' to 'B'" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:56:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid conversion from 'int' to 'B'" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:57:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(narrowing conversion of \[^\n\r]* from 'int' to 'short int' inside" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:58:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'long long int' to 'C' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:59:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(narrowing conversion of 'll' from 'long long int' to 'int' inside" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:60:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'short int' to 'C' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:61:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'int' to 'C' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:66:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert \[^\n\r]* to 'E' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:67:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert \[^\n\r]* to 'E' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:68:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(narrowing conversion of '5.0e.0' from 'double' to 'unsigned char' inside" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:69:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(list-initializer for non-class type must not be parenthesized))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:70:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert \[^\n\r]* to 'E' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:76:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid conversion from 'int' to 'A'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:77:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid conversion from 'int' to 'B'" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:78:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert \[^\n\r]* to 'C' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:79:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(narrowing conversion of '3.0e.0f' from 'float' to 'int' inside" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:80:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert \[^\n\r]* to 'D' in initialization))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:87:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid conversion from 'int' to 'A'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:88:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid conversion from 'int' to 'B'" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:90:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid cast from type 'T' to type 'D'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:91:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'T' to 'D' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:92:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid cast from type 'T' to type 'D'" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:93:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'int' to 'D' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:94:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'long int' to 'D' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:96:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'A' to 'D' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:97:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'int' to 'E' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:98:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'int' to 'E' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:99:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(narrowing conversion of '-1' from 'int' to 'unsigned char' inside" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:100:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'double' to 'E' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:101:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(narrowing conversion of '5.0e.0' from 'double' to 'unsigned char' inside" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:102:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'double' to 'E' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:103:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(narrowing conversion of '5.\[0-9]*e.0' from 'double' to 'unsigned char' inside" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:104:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid conversion from 'int' to 'B'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:105:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'int' to 'C' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:106:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert \[^\n\r]* to 'D' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:107:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert \[^\n\r]* to 'E' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:108:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(narrowing conversion of '-4' from 'int' to 'unsigned char' inside" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:109:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert \[^\n\r]* to 'E' for argument))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:110:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'int' to 'E' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:111:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(braces around scalar initializer for type 'E'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:112:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'int' to 'E' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:113:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'double' to 'E' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:114:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(narrowing conversion of '5.0e.0' from 'double' to 'unsigned char' inside" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:115:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'int' to 'E' in initialization))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:116:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid conversion from 'int' to 'B'" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:118:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'double' to 'B' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:119:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(narrowing conversion of '4.0e.0' from 'double' to 'short int' inside" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:120:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'long int' to 'C' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:121:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid conversion from 'short int' to 'B'" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:122:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid conversion from 'int' to 'B'" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:123:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(narrowing conversion of \[^\n\r]* from 'int' to 'short int' inside" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:124:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'long long int' to 'C' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:125:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(narrowing conversion of 'll' from 'long long int' to 'int' inside" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:126:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'short int' to 'C' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:127:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'int' to 'C' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:133:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert \[^\n\r]* to 'E' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:134:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert \[^\n\r]* to 'E' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:135:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(narrowing conversion of '5.0e.0' from 'double' to 'unsigned char' inside" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:143:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid conversion from 'int' to 'A'" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:144:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid conversion from 'int' to 'B'" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:145:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert \[^\n\r]* to 'C' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:146:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(narrowing conversion of '3.0e.0f' from 'float' to 'int' inside" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:147:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert \[^\n\r]* to 'D' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:155:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid conversion from 'int' to 'A'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:156:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid conversion from 'int' to 'B'" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:158:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid cast from type 'T' to type 'D'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:159:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'T' to 'D' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:160:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid cast from type 'T' to type 'D'" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:161:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'int' to 'D' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:162:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'long int' to 'D' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:164:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'A' to 'D' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:165:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'int' to 'E' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:166:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'int' to 'E' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:167:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(narrowing conversion of '-1' from 'int' to 'unsigned char' inside" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:168:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'double' to 'E' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:169:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(narrowing conversion of '5.0e.0' from 'double' to 'unsigned char' inside" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:170:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'double' to 'E' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:171:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(narrowing conversion of '5.\[0-9]*e.0' from 'double' to 'unsigned char' inside" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:172:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid conversion from 'int' to 'B'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:173:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'int' to 'C' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:174:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert \[^\n\r]* to 'D' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:175:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert \[^\n\r]* to 'E' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:176:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(narrowing conversion of '-4' from 'int' to 'unsigned char' inside" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:177:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert \[^\n\r]* to 'E' for argument))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:178:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'int' to 'E' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:179:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(braces around scalar initializer for type 'E'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:180:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'int' to 'E' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:181:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'double' to 'E' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:182:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(narrowing conversion of '5.0e.0' from 'double' to 'unsigned char' inside" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:183:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'int' to 'E' in initialization))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:184:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid conversion from 'int' to 'B'" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:186:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'double' to 'B' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:187:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(narrowing conversion of '4.0e.0' from 'double' to 'short int' inside" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:188:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'long int' to 'C' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:189:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid conversion from 'short int' to 'B'" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:190:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid conversion from 'int' to 'B'" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:191:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(narrowing conversion of \[^\n\r]* from 'int' to 'short int' inside" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:192:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'long long int' to 'C' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:193:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(narrowing conversion of 'll' from 'long long int' to 'int' inside" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:194:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'short int' to 'C' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:195:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert 'int' to 'C' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:201:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert \[^\n\r]* to 'E' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:202:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert \[^\n\r]* to 'E' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:203:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(narrowing conversion of '5.0e.0' from 'double' to 'unsigned char' inside" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:211:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid conversion from 'int' to 'A'" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:212:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid conversion from 'int' to 'B'" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:213:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert \[^\n\r]* to 'C' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:214:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(narrowing conversion of '3.0e.0f' from 'float' to 'int' inside" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:215:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert \[^\n\r]* to 'D' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:224:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid conversion from 'int' to 'A'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:225:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid conversion from 'int' to 'B'" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:226:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert \[^\n\r]* to 'C' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:227:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(narrowing conversion of '3.0e.0f' from 'float' to 'int' inside" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:228:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert \[^\n\r]* to 'D' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:232:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid conversion from 'int' to 'A'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:233:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid conversion from 'int' to 'B'" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:234:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert \[^\n\r]* to 'C' in initialization" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:235:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(narrowing conversion of '3.0e.0f' from 'float' to 'int' inside" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:236:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot convert \[^\n\r]* to 'D' in initialization" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_direct-enum-init1_157:
  build:
    cflags: ' -std=c++14  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/direct-enum-init1.C'
    sources:
      binary: direct-enum-init1.s
  group: GRPSERIAL
  info: *31
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_elide1_158:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/elide1.C'
    sources:
      binary: elide1.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_elide2_159:
  build:
    cflags: ' -std=c++11  -pedantic-errors -Wno-long-long'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/elide2.C'
    sources:
      binary: ./elide2.exe
  group: GRPSERIAL
  info: &32 {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_elide2_160:
  build:
    cflags: ' -std=c++14  -pedantic-errors -Wno-long-long'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/elide2.C'
    sources:
      binary: ./elide2.exe
  group: GRPSERIAL
  info: *32
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_eval-order2_161:
  build:
    cflags: '  -std=c++1z'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/eval-order2.C'
    sources:
      binary: ./eval-order2.exe
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_eval-order3_162:
  build:
    cflags: '  -std=c++1z'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/eval-order3.C'
    sources:
      binary: ./eval-order3.exe
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_eval-order4_163:
  build:
    cflags: ' -std=gnu++98 -fstrong-eval-order'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/eval-order4.C'
    sources:
      binary: ./eval-order4.exe
  group: GRPSERIAL
  info: &33
    extraopts:
      - '"-fstrong-eval-order"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_eval-order4_164:
  build:
    cflags: ' -std=gnu++11 -fstrong-eval-order'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/eval-order4.C'
    sources:
      binary: ./eval-order4.exe
  group: GRPSERIAL
  info: *33
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_eval-order4_165:
  build:
    cflags: ' -std=gnu++14 -fstrong-eval-order'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/eval-order4.C'
    sources:
      binary: ./eval-order4.exe
  group: GRPSERIAL
  info: *33
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_fallthrough1_166:
  build:
    cflags: '  -std=c++1z -Wextra -Wall -Wpedantic -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fallthrough1.C'
    sources:
      binary: fallthrough1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -Wextra -Wall -Wpedantic"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_feat-cxx1z_167:
  build:
    cflags: '  -std=c++1z -I./g++.dg/cpp1y -I./g++.dg/cpp1y/testinc -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/feat-cxx1z.C'
    sources:
      binary: feat-cxx1z.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -I${srcdir}/g++.dg/cpp1y -I${srcdir}/g++.dg/cpp1y/testinc"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_fold-ice1_168:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fold-ice1.C'
    sources:
      binary: fold-ice1.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_fold-mangle_169:
  build:
    cflags: -std=c++1z -ffat-lto-objects -S
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fold-mangle.C'
    sources:
      binary: fold-mangle.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_fold1_170:
  build:
    cflags: '  -std=c++1z'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fold1.C'
    sources:
      binary: ./fold1.exe
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_fold2_171:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fold2.C'
    sources:
      binary: fold2.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_fold3_172:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fold3.C'
    sources:
      binary: fold3.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(empty))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_fold4_173:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fold4.C'
    sources:
      binary: fold4.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_fold5_174:
  build:
    cflags: ' -std=c++11  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fold5.C'
    sources:
      binary: fold5.s
  group: GRPSERIAL
  info: &34
    regex-err:
      - |-
        (^|
        )([^
        ]+(:7:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(fold))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_fold5_175:
  build:
    cflags: ' -std=c++14  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fold5.C'
    sources:
      binary: fold5.s
  group: GRPSERIAL
  info: *34
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_fold6_176:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fold6.C'
    sources:
      binary: fold6.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
    regex-err:
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:12:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:13:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:14:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:15:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:16:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:17:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:18:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:19:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:20:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:21:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:22:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:23:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:24:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:25:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:26:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:27:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:28:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:29:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:30:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:31:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:32:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:33:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:34:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:35:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:36:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:37:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:38:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:39:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:40:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:41:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_fold7_177:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fold7.C'
    sources:
      binary: fold7.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_fold7a_178:
  build:
    cflags: '   -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fold7a.C'
    sources:
      binary: fold7a.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_fold8_179:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fold8.C'
    sources:
      binary: fold8.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_fold9_180:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/fold9.C'
    sources:
      binary: fold9.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_gen-attrs1_181:
  build:
    cflags: ' -std=gnu++11  -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/gen-attrs1.C'
    sources:
      binary: gen-attrs1.s
  group: GRPSERIAL
  info: &35
    extraopts:
      - '""'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:21:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(attribute using prefix used together with scoped attribute token))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:24:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(attribute using prefix used together with scoped attribute token))[^
        ]*
        ?)+
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:7:)[^
        ]*([0-9]+: warning:[^
        ]*(attribute using prefix only available" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:8:)[^
        ]*([0-9]+: warning:[^
        ]*('foo::bar' scoped attribute directive ignored))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:9:)[^
        ]*([0-9]+: warning:[^
        ]*('foo::baz' scoped attribute directive ignored" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: warning:[^
        ]*(attribute using prefix only available" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: warning:[^
        ]*('foo::using' scoped attribute directive ignored))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:12:)[^
        ]*([0-9]+: warning:[^
        ]*(attribute using prefix only available" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:22:)[^
        ]*([0-9]+: warning:[^
        ]*(ignored" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:23:)[^
        ]*([0-9]+: warning:[^
        ]*(attribute using prefix only available" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:25:)[^
        ]*([0-9]+: warning:[^
        ]*(ignored" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:26:)[^
        ]*([0-9]+: warning:[^
        ]*(attribute using prefix only available" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:35:)[^
        ]*([0-9]+: warning:[^
        ]*(attribute using prefix only available" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:36:)[^
        ]*([0-9]+: warning:[^
        ]*('using::using' scoped attribute directive ignored" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:37:)[^
        ]*([0-9]+: warning:[^
        ]*(attribute using prefix only available" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:38:)[^
        ]*([0-9]+: warning:[^
        ]*('bitand::bitor' scoped attribute directive ignored" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:39:)[^
        ]*([0-9]+: warning:[^
        ]*('bitand::xor' scoped attribute directive ignored" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_gen-attrs1_182:
  build:
    cflags: ' -std=gnu++14  -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/gen-attrs1.C'
    sources:
      binary: gen-attrs1.s
  group: GRPSERIAL
  info: *35
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_has-unique-obj-representations1_183:
  build:
    cflags: ' -std=c++11 -pedantic-errors -Wno-long-long -Wno-error=pedantic -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/has-unique-obj-representations1.C'
    sources:
      binary: has-unique-obj-representations1.s
  group: GRPSERIAL
  info: &36
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:12:)[^
        ]*([0-9]+: warning:[^
        ]*(forbids flexible array member))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:15:)[^
        ]*([0-9]+: warning:[^
        ]*(exceeds its type))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:18:)[^
        ]*([0-9]+: warning:[^
        ]*(exceeds its type))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_has-unique-obj-representations1_184:
  build:
    cflags: ' -std=c++14 -pedantic-errors -Wno-long-long -Wno-error=pedantic -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/has-unique-obj-representations1.C'
    sources:
      binary: has-unique-obj-representations1.s
  group: GRPSERIAL
  info: *36
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_has-unique-obj-representations2_185:
  build:
    cflags: ' -std=c++98  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/has-unique-obj-representations2.C'
    sources:
      binary: has-unique-obj-representations2.s
  group: GRPSERIAL
  info: &37
    regex-err:
      - |-
        (^|
        )([^
        ]+(:2:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(incomplete type))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:3:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(incomplete type))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:4:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(flexible array member in union))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:5:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(incomplete type))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_has-unique-obj-representations2_186:
  build:
    cflags: ' -std=c++11  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/has-unique-obj-representations2.C'
    sources:
      binary: has-unique-obj-representations2.s
  group: GRPSERIAL
  info: *37
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_has-unique-obj-representations2_187:
  build:
    cflags: ' -std=c++14  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/has-unique-obj-representations2.C'
    sources:
      binary: has-unique-obj-representations2.s
  group: GRPSERIAL
  info: *37
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inh-ctor1_188:
  build:
    cflags: ' -std=c++11  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor1.C'
    sources:
      binary: inh-ctor1.s
  group: GRPSERIAL
  info: &38
    regex-err:
      - |-
        (^|
        )([^
        ]+(:5:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(direct))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inh-ctor1_189:
  build:
    cflags: ' -std=c++14  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor1.C'
    sources:
      binary: inh-ctor1.s
  group: GRPSERIAL
  info: *38
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inh-ctor22_190:
  build:
    cflags: ' -std=c++11  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor22.C'
    sources:
      binary: inh-ctor22.s
  group: GRPSERIAL
  info: &39
    regex-err:
      - |-
        (^|
        )([^
        ]+(:25:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:33:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inh-ctor22_191:
  build:
    cflags: ' -std=c++14  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor22.C'
    sources:
      binary: inh-ctor22.s
  group: GRPSERIAL
  info: *39
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inh-ctor23_192:
  build:
    cflags: -std=gnu++11 -fnew-inheriting-ctors -fdump-tree-gimple -O2 -fno-inline -ffat-lto-objects -S
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor23.C'
    sources:
      binary: inh-ctor23.s
  group: GRPSERIAL
  info: &40
    extraopts:
      - '"-fnew-inheriting-ctors -fdump-tree-gimple -O2 -fno-inline"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inh-ctor23_193:
  build:
    cflags: -std=gnu++14 -fnew-inheriting-ctors -fdump-tree-gimple -O2 -fno-inline -ffat-lto-objects -S
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor23.C'
    sources:
      binary: inh-ctor23.s
  group: GRPSERIAL
  info: *40
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inh-ctor24_194:
  build:
    cflags: ' -std=gnu++11 -fnew-inheriting-ctors -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor24.C'
    sources:
      binary: inh-ctor24.s
  group: GRPSERIAL
  info: &41
    extraopts:
      - -fnew-inheriting-ctors
    regex-err:
      - |-
        (^|
        )([^
        ]+(:24:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inh-ctor24_195:
  build:
    cflags: ' -std=gnu++14 -fnew-inheriting-ctors -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor24.C'
    sources:
      binary: inh-ctor24.s
  group: GRPSERIAL
  info: *41
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inh-ctor25_196:
  build:
    cflags: ' -std=c++11  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor25.C'
    sources:
      binary: inh-ctor25.s
  group: GRPSERIAL
  info: &42 {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inh-ctor25_197:
  build:
    cflags: ' -std=c++14  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor25.C'
    sources:
      binary: inh-ctor25.s
  group: GRPSERIAL
  info: *42
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inh-ctor26_198:
  build:
    cflags: -std=gnu++11 -fnew-inheriting-ctors -ffat-lto-objects -S
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor26.C'
    sources:
      binary: inh-ctor26.s
  group: GRPSERIAL
  info: &43
    extraopts:
      - -fnew-inheriting-ctors
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inh-ctor26_199:
  build:
    cflags: -std=gnu++14 -fnew-inheriting-ctors -ffat-lto-objects -S
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor26.C'
    sources:
      binary: inh-ctor26.s
  group: GRPSERIAL
  info: *43
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inh-ctor27_200:
  build:
    cflags: ' -std=c++11  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor27.C'
    sources:
      binary: inh-ctor27.s
  group: GRPSERIAL
  info: &44 {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inh-ctor27_201:
  build:
    cflags: ' -std=c++14  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor27.C'
    sources:
      binary: inh-ctor27.s
  group: GRPSERIAL
  info: *44
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inh-ctor28_202:
  build:
    cflags: ' -std=gnu++11 -fnew-inheriting-ctors -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor28.C'
    sources:
      binary: inh-ctor28.s
  group: GRPSERIAL
  info: &45
    extraopts:
      - -fnew-inheriting-ctors
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inh-ctor28_203:
  build:
    cflags: ' -std=gnu++14 -fnew-inheriting-ctors -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor28.C'
    sources:
      binary: inh-ctor28.s
  group: GRPSERIAL
  info: *45
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inh-ctor29_204:
  build:
    cflags: ' -std=c++11  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor29.C'
    sources:
      binary: inh-ctor29.s
  group: GRPSERIAL
  info: &46 {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inh-ctor29_205:
  build:
    cflags: ' -std=c++14  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor29.C'
    sources:
      binary: inh-ctor29.s
  group: GRPSERIAL
  info: *46
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inh-ctor30_206:
  build:
    cflags: ' -std=c++11  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor30.C'
    sources:
      binary: inh-ctor30.s
  group: GRPSERIAL
  info: &47
    regex-err:
      - |-
        (^|
        )([^
        ]+(:16:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(ambiguous))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inh-ctor30_207:
  build:
    cflags: ' -std=c++14  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor30.C'
    sources:
      binary: inh-ctor30.s
  group: GRPSERIAL
  info: *47
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inh-ctor31_208:
  build:
    cflags: ' -std=c++11  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor31.C'
    sources:
      binary: inh-ctor31.s
  group: GRPSERIAL
  info: &48 {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inh-ctor31_209:
  build:
    cflags: ' -std=c++14  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor31.C'
    sources:
      binary: inh-ctor31.s
  group: GRPSERIAL
  info: *48
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inh-ctor32_210:
  build:
    cflags: ' -std=c++11  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor32.C'
    sources:
      binary: inh-ctor32.s
  group: GRPSERIAL
  info: &49
    regex-err:
      - |-
        (^|
        )([^
        ]+(:16:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inh-ctor32_211:
  build:
    cflags: ' -std=c++14  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor32.C'
    sources:
      binary: inh-ctor32.s
  group: GRPSERIAL
  info: *49
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inh-ctor33_212:
  build:
    cflags: ' -std=gnu++11 -fnew-inheriting-ctors'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor33.C'
    sources:
      binary: inh-ctor33.exe
  group: GRPSERIAL
  info: &50
    extraopts:
      - -fnew-inheriting-ctors
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inh-ctor33_213:
  build:
    cflags: ' -std=gnu++14 -fnew-inheriting-ctors'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor33.C'
    sources:
      binary: inh-ctor33.exe
  group: GRPSERIAL
  info: *50
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inh-ctor34_214:
  build:
    cflags: ' -std=gnu++11 -fnew-inheriting-ctors -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor34.C'
    sources:
      binary: inh-ctor34.s
  group: GRPSERIAL
  info: &51
    extraopts:
      - -fnew-inheriting-ctors
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inh-ctor34_215:
  build:
    cflags: ' -std=gnu++14 -fnew-inheriting-ctors -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor34.C'
    sources:
      binary: inh-ctor34.s
  group: GRPSERIAL
  info: *51
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inh-ctor35_216:
  build:
    cflags: ' -std=gnu++11 -fno-new-inheriting-ctors -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor35.C'
    sources:
      binary: inh-ctor35.s
  group: GRPSERIAL
  info: &52
    extraopts:
      - -fno-new-inheriting-ctors
    regex-err:
      - |-
        (^|
        )([^
        ]+(:21:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inh-ctor35_217:
  build:
    cflags: ' -std=gnu++14 -fno-new-inheriting-ctors -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor35.C'
    sources:
      binary: inh-ctor35.s
  group: GRPSERIAL
  info: *52
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inh-ctor35a_218:
  build:
    cflags: ' -std=gnu++11 -fnew-inheriting-ctors -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor35a.C'
    sources:
      binary: inh-ctor35a.s
  group: GRPSERIAL
  info: &53
    extraopts:
      - -fnew-inheriting-ctors
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inh-ctor35a_219:
  build:
    cflags: ' -std=gnu++14 -fnew-inheriting-ctors -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor35a.C'
    sources:
      binary: inh-ctor35a.s
  group: GRPSERIAL
  info: *53
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inh-ctor36_220:
  build:
    cflags: ' -std=c++11  -pedantic-errors -Wno-long-long'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor36.C'
    sources:
      binary: inh-ctor36.exe
  group: GRPSERIAL
  info: &54 {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inh-ctor36_221:
  build:
    cflags: ' -std=c++14  -pedantic-errors -Wno-long-long'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor36.C'
    sources:
      binary: inh-ctor36.exe
  group: GRPSERIAL
  info: *54
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inh-ctor37_222:
  build:
    cflags: ' -std=c++11  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor37.C'
    sources:
      binary: inh-ctor37.s
  group: GRPSERIAL
  info: &55 {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inh-ctor37_223:
  build:
    cflags: ' -std=c++14  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor37.C'
    sources:
      binary: inh-ctor37.s
  group: GRPSERIAL
  info: *55
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inh-ctor38_224:
  build:
    cflags: ' -std=c++11  -pedantic-errors -Wno-long-long'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor38.C'
    sources:
      binary: ./inh-ctor38.exe
  group: GRPSERIAL
  info: &56 {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inh-ctor38_225:
  build:
    cflags: ' -std=c++14  -pedantic-errors -Wno-long-long'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inh-ctor38.C'
    sources:
      binary: ./inh-ctor38.exe
  group: GRPSERIAL
  info: *56
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_init-statement1_226:
  build:
    cflags: ' -std=gnu++11  -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/init-statement1.C'
    sources:
      binary: init-statement1.s
  group: GRPSERIAL
  info: &57
    extraopts:
      - '""'
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: warning:[^
        ]*(init-statement" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_init-statement1_227:
  build:
    cflags: ' -std=gnu++14  -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/init-statement1.C'
    sources:
      binary: init-statement1.s
  group: GRPSERIAL
  info: *57
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_init-statement2_228:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/init-statement2.C'
    sources:
      binary: init-statement2.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_init-statement3_229:
  build:
    cflags: '  -std=c++1z'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/init-statement3.C'
    sources:
      binary: ./init-statement3.exe
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_init-statement4_230:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/init-statement4.C'
    sources:
      binary: init-statement4.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
    regex-err:
      - |-
        (^|
        )([^
        ]+(:14:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(not declared))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:32:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(not declared))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:40:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(not declared))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:54:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(not declared))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:56:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(not declared))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:58:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(not declared))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_init-statement5_231:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/init-statement5.C'
    sources:
      binary: init-statement5.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_init-statement6_232:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/init-statement6.C'
    sources:
      binary: init-statement6.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_init-statement7_233:
  build:
    cflags: '  -std=c++1z'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/init-statement7.C'
    sources:
      binary: ./init-statement7.exe
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_init-statement8_234:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/init-statement8.C'
    sources:
      binary: init-statement8.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
    regex-err:
      - |-
        (^|
        )([^
        ]+(:7:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(redeclaration))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_init-statement9_235:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/init-statement9.C'
    sources:
      binary: init-statement9.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
    regex-err:
      - |-
        (^|
        )([^
        ]+(:9:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(redeclaration))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:13:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(redeclaration))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:15:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(redeclaration))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:16:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(redeclaration))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inline-var1a_236:
  build:
    cflags: '  -std=c++1z -Wno-deprecated -g -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inline-var1a.C'
    sources:
      binary: inline-var1a.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -Wno-deprecated -g"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inline-var2_237:
  build:
    cflags: ' -std=gnu++11 -Wdeprecated -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inline-var2.C'
    sources:
      binary: inline-var2.s
  group: GRPSERIAL
  info: &58
    extraopts:
      - '"-Wdeprecated"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:22:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(redefinition of" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:38:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(odr-used inline variable 'var19' is not defined" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:43:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(has incomplete type))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:44:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(has incomplete type))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:50:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(uninitialized const" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:56:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(redefinition of))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:57:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(redefinition of))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:58:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(redefinition of))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:59:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(redefinition of))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:60:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(redefinition of))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:61:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(redefinition of))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:64:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('var30' declared as an 'inline' field))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:66:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('TT' declared as an 'inline' type))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:68:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('var31' declared as an 'inline' parameter))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:70:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('inline' specifier invalid for variable 'var32' declared at block scope))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:71:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('inline' specifier invalid for variable 'var33' declared at block scope))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:77:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(has incomplete type))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:78:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(has incomplete type))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:92:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(uninitialized const" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:101:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(redefinition of))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:103:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(redefinition of))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:106:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(redefinition of))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:108:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(redefinition of))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:110:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(redefinition of))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:112:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(redefinition of))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:116:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(redefinition of" "))[^
        ]*
        ?)+
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:4:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:5:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:8:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:9:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:16:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:18:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:19:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:21:)[^
        ]*([0-9]+: warning:[^
        ]*(redundant redeclaration of" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:23:)[^
        ]*([0-9]+: warning:[^
        ]*(redundant redeclaration of" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:26:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:27:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:30:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:31:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:32:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:33:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:36:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:37:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:42:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:45:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:48:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:49:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:51:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:52:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:53:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:54:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:76:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:79:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:90:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:91:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:93:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:94:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:95:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:96:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:98:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:114:)[^
        ]*([0-9]+: warning:[^
        ]*(redundant redeclaration of" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:115:)[^
        ]*([0-9]+: warning:[^
        ]*(redundant redeclaration of" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inline-var2_238:
  build:
    cflags: ' -std=gnu++14 -Wdeprecated -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inline-var2.C'
    sources:
      binary: inline-var2.s
  group: GRPSERIAL
  info: *58
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inline-var3_239:
  build:
    cflags: -std=gnu++98 -g0 -ffat-lto-objects -S
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inline-var3.C'
    sources:
      binary: inline-var3.s
  group: GRPSERIAL
  info: &59
    extraopts:
      - '"-g0"'
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:7:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:8:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:12:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:16:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:19:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:22:)[^
        ]*([0-9]+: warning:[^
        ]*(variable templates only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:23:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:24:)[^
        ]*([0-9]+: warning:[^
        ]*(variable templates only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:25:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:28:)[^
        ]*([0-9]+: warning:[^
        ]*(variable templates only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:29:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:30:)[^
        ]*([0-9]+: warning:[^
        ]*(variable templates only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:31:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:36:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:39:)[^
        ]*([0-9]+: warning:[^
        ]*(inline variables are only available with" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inline-var3_240:
  build:
    cflags: -std=gnu++11 -g0 -ffat-lto-objects -S
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inline-var3.C'
    sources:
      binary: inline-var3.s
  group: GRPSERIAL
  info: *59
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_inline-var3_241:
  build:
    cflags: -std=gnu++14 -g0 -ffat-lto-objects -S
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/inline-var3.C'
    sources:
      binary: inline-var3.s
  group: GRPSERIAL
  info: *59
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_lambda-inherit1_242:
  build:
    cflags: '  -std=c++17 -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/lambda-inherit1.C'
    sources:
      binary: lambda-inherit1.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++17
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_lambda-this1_243:
  build:
    cflags: ' -std=c++11  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/lambda-this1.C'
    sources:
      binary: lambda-this1.s
  group: GRPSERIAL
  info: &60
    regex-err:
      - |-
        (^|
        )([^
        ]+(:8:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(already captured 'this'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:9:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('*this' capture only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(already captured 'this'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('*this' capture only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:13:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('*this' capture only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:15:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(in read-only object))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:16:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('*this' capture only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:17:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('*this' capture only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:20:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(explicit by-copy capture of 'this' redundant with by-copy capture default))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:22:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('*this' capture only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:23:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('*this' capture only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:24:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('*this' capture only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:25:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(lvalue required as left operand of assignment))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:26:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('*this' capture only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:33:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('*this' capture only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:36:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('this' was not captured for this lambda function))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:37:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid use of non-static data member 'B::b'" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:38:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('*this' capture only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:45:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(use of deleted function))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:46:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('*this' capture only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:50:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(use of deleted function))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:51:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('*this' capture only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:60:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(use of deleted function))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:61:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('*this' capture only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:65:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(use of deleted function))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:66:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('*this' capture only available with" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_lambda-this1_244:
  build:
    cflags: ' -std=c++14  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/lambda-this1.C'
    sources:
      binary: lambda-this1.s
  group: GRPSERIAL
  info: *60
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_lambda-this2_245:
  build:
    cflags: ' -std=gnu++11 '
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/lambda-this2.C'
    sources:
      binary: ./lambda-this2.exe
  group: GRPSERIAL
  info: &61
    extraopts:
      - '""'
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:14:)[^
        ]*([0-9]+: warning:[^
        ]*('*this' capture only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:26:)[^
        ]*([0-9]+: warning:[^
        ]*('*this' capture only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:41:)[^
        ]*([0-9]+: warning:[^
        ]*('*this' capture only available with" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:53:)[^
        ]*([0-9]+: warning:[^
        ]*('*this' capture only available with" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_lambda-this2_246:
  build:
    cflags: ' -std=gnu++14 '
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/lambda-this2.C'
    sources:
      binary: ./lambda-this2.exe
  group: GRPSERIAL
  info: *61
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_lambda-this3_247:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/lambda-this3.C'
    sources:
      binary: lambda-this3.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_launder1_248:
  build:
    cflags: ' -std=c++11 -pedantic-errors -Wno-long-long -O2'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/launder1.C'
    sources:
      binary: ./launder1.exe
  group: GRPSERIAL
  info: &62 {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_launder1_249:
  build:
    cflags: ' -std=c++14 -pedantic-errors -Wno-long-long -O2'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/launder1.C'
    sources:
      binary: ./launder1.exe
  group: GRPSERIAL
  info: *62
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_launder2_250:
  build:
    cflags: ' -std=c++11  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/launder2.C'
    sources:
      binary: launder2.s
  group: GRPSERIAL
  info: &63
    regex-err:
      - |-
        (^|
        )([^
        ]+(:4:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(wrong number of arguments to))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:5:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(wrong number of arguments to))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:7:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(non-pointer argument to))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:9:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(non-pointer argument to))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(non-pointer argument to))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:27:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(wrong number of arguments to))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:28:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(wrong number of arguments to))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:29:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(wrong number of arguments to))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_launder2_251:
  build:
    cflags: ' -std=c++14  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/launder2.C'
    sources:
      binary: launder2.s
  group: GRPSERIAL
  info: *63
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_launder3_252:
  build:
    cflags: ' -std=c++11 -pedantic-errors -Wno-long-long -O2'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/launder3.C'
    sources:
      binary: ./launder3.exe
  group: GRPSERIAL
  info: &64 {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_launder3_253:
  build:
    cflags: ' -std=c++14 -pedantic-errors -Wno-long-long -O2'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/launder3.C'
    sources:
      binary: ./launder3.exe
  group: GRPSERIAL
  info: *64
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_launder4_254:
  build:
    cflags: ' -std=c++11 -pedantic-errors -Wno-long-long -O2'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/launder4.C'
    sources:
      binary: ./launder4.exe
  group: GRPSERIAL
  info: &65 {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_launder4_255:
  build:
    cflags: ' -std=c++14 -pedantic-errors -Wno-long-long -O2'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/launder4.C'
    sources:
      binary: ./launder4.exe
  group: GRPSERIAL
  info: *65
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_launder5_256:
  build:
    cflags: ' -std=c++11 -pedantic-errors -Wno-long-long -O2'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/launder5.C'
    sources:
      binary: ./launder5.exe
  group: GRPSERIAL
  info: &66 {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_launder5_257:
  build:
    cflags: ' -std=c++14 -pedantic-errors -Wno-long-long -O2'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/launder5.C'
    sources:
      binary: ./launder5.exe
  group: GRPSERIAL
  info: *66
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_launder6_258:
  build:
    cflags: ' -std=c++11 -pedantic-errors -Wno-long-long -O2'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/launder6.C'
    sources:
      binary: ./launder6.exe
  group: GRPSERIAL
  info: &67 {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_launder6_259:
  build:
    cflags: ' -std=c++14 -pedantic-errors -Wno-long-long -O2'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/launder6.C'
    sources:
      binary: ./launder6.exe
  group: GRPSERIAL
  info: *67
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_maybe_unused1_260:
  build:
    cflags: ' -std=gnu++11 -Wunused -Wextra -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/maybe_unused1.C'
    sources:
      binary: maybe_unused1.s
  group: GRPSERIAL
  info: &68
    extraopts:
      - '"-Wunused -Wextra"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_maybe_unused1_261:
  build:
    cflags: ' -std=gnu++14 -Wunused -Wextra -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/maybe_unused1.C'
    sources:
      binary: maybe_unused1.s
  group: GRPSERIAL
  info: *68
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_namespace-attribs_262:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/namespace-attribs.C'
    sources:
      binary: namespace-attribs.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z"'
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:5:)[^
        ]*([0-9]+: warning:[^
        ]*(ignored))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:9:)[^
        ]*([0-9]+: warning:[^
        ]*(ignored))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_nested-namespace-def1_263:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nested-namespace-def1.C'
    sources:
      binary: nested-namespace-def1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:12:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot be inline))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:14:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(nested identifier required))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:16:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot have attributes))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:18:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot have attributes|ignored))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:20:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot have attributes))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:22:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(cannot have attributes|ignored))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_nested-namespace-def2_264:
  build:
    cflags: '  -std=c++11 -pedantic-errors -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nested-namespace-def2.C'
    sources:
      binary: nested-namespace-def2.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++11 -pedantic-errors"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:3:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(nested namespace definitions only available with))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_nested-namespace-def3_265:
  build:
    cflags: '  -std=c++11 -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nested-namespace-def3.C'
    sources:
      binary: nested-namespace-def3.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++11"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_nodiscard1_266:
  build:
    cflags: ' -std=c++11  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nodiscard1.C'
    sources:
      binary: nodiscard1.s
  group: GRPSERIAL
  info: &69
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:7:)[^
        ]*([0-9]+: warning:[^
        ]*())[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_nodiscard1_267:
  build:
    cflags: ' -std=c++14  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nodiscard1.C'
    sources:
      binary: nodiscard1.s
  group: GRPSERIAL
  info: *69
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_nodiscard2_268:
  build:
    cflags: ' -std=c++11  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nodiscard2.C'
    sources:
      binary: nodiscard2.s
  group: GRPSERIAL
  info: &70
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:9:)[^
        ]*([0-9]+: warning:[^
        ]*(Wunused-result))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_nodiscard2_269:
  build:
    cflags: ' -std=c++14  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nodiscard2.C'
    sources:
      binary: nodiscard2.s
  group: GRPSERIAL
  info: *70
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_nodiscard3_270:
  build:
    cflags: '  -std=c++1z -O -ftrack-macro-expansion=0 -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nodiscard3.C'
    sources:
      binary: nodiscard3.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z -O -ftrack-macro-expansion=0"'
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:16:)[^
        ]*([0-9]+: warning:[^
        ]*(nodiscard))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:17:)[^
        ]*([0-9]+: warning:[^
        ]*(nodiscard))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:55:)[^
        ]*([0-9]+: warning:[^
        ]*(nodiscard))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:57:)[^
        ]*([0-9]+: warning:[^
        ]*(nodiscard))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:65:)[^
        ]*([0-9]+: warning:[^
        ]*(nodiscard))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:67:)[^
        ]*([0-9]+: warning:[^
        ]*(nodiscard))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:75:)[^
        ]*([0-9]+: warning:[^
        ]*(nodiscard))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:77:)[^
        ]*([0-9]+: warning:[^
        ]*(nodiscard))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:85:)[^
        ]*([0-9]+: warning:[^
        ]*(nodiscard))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:87:)[^
        ]*([0-9]+: warning:[^
        ]*(nodiscard))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:95:)[^
        ]*([0-9]+: warning:[^
        ]*(nodiscard))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:97:)[^
        ]*([0-9]+: warning:[^
        ]*(nodiscard))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:105:)[^
        ]*([0-9]+: warning:[^
        ]*(nodiscard))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:107:)[^
        ]*([0-9]+: warning:[^
        ]*(nodiscard))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:115:)[^
        ]*([0-9]+: warning:[^
        ]*(nodiscard))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:117:)[^
        ]*([0-9]+: warning:[^
        ]*(nodiscard))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:125:)[^
        ]*([0-9]+: warning:[^
        ]*(nodiscard))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:127:)[^
        ]*([0-9]+: warning:[^
        ]*(nodiscard))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:132:)[^
        ]*([0-9]+: warning:[^
        ]*(nodiscard))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:134:)[^
        ]*([0-9]+: warning:[^
        ]*(nodiscard))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:139:)[^
        ]*([0-9]+: warning:[^
        ]*(nodiscard))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:141:)[^
        ]*([0-9]+: warning:[^
        ]*(nodiscard))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:147:)[^
        ]*([0-9]+: warning:[^
        ]*(nodiscard))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:149:)[^
        ]*([0-9]+: warning:[^
        ]*(nodiscard))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:155:)[^
        ]*([0-9]+: warning:[^
        ]*(nodiscard))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:157:)[^
        ]*([0-9]+: warning:[^
        ]*(nodiscard))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:162:)[^
        ]*([0-9]+: warning:[^
        ]*(nodiscard))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:164:)[^
        ]*([0-9]+: warning:[^
        ]*(nodiscard))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:169:)[^
        ]*([0-9]+: warning:[^
        ]*(nodiscard))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:171:)[^
        ]*([0-9]+: warning:[^
        ]*(nodiscard))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:176:)[^
        ]*([0-9]+: warning:[^
        ]*(nodiscard))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:178:)[^
        ]*([0-9]+: warning:[^
        ]*(nodiscard))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:183:)[^
        ]*([0-9]+: warning:[^
        ]*(nodiscard))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:185:)[^
        ]*([0-9]+: warning:[^
        ]*(nodiscard))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:190:)[^
        ]*([0-9]+: warning:[^
        ]*(nodiscard))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:192:)[^
        ]*([0-9]+: warning:[^
        ]*(nodiscard))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:200:)[^
        ]*([0-9]+: warning:[^
        ]*(nodiscard))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:202:)[^
        ]*([0-9]+: warning:[^
        ]*(nodiscard))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_nodiscard4_271:
  build:
    cflags: ' -std=c++11  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nodiscard4.C'
    sources:
      binary: nodiscard4.s
  group: GRPSERIAL
  info: &71
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:12:)[^
        ]*([0-9]+: warning:[^
        ]*(ignoring returned value of type))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:13:)[^
        ]*([0-9]+: warning:[^
        ]*(ignoring returned value of type))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_nodiscard4_272:
  build:
    cflags: ' -std=c++14  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nodiscard4.C'
    sources:
      binary: nodiscard4.s
  group: GRPSERIAL
  info: *71
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_noexcept-type11_274:
  build:
    cflags: '  -Wall -std=c++14 -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type11.C'
    sources:
      binary: noexcept-type11.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-Wall -std=c++14"'
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:3:)[^
        ]*([0-9]+: warning:[^
        ]*(mangled))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_noexcept-type11a_275:
  build:
    cflags: '  -Wall -Wno-noexcept-type -std=c++14 -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type11a.C'
    sources:
      binary: noexcept-type11a.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-Wall -Wno-noexcept-type -std=c++14"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_noexcept-type12_276:
  build:
    cflags: -std=c++1z -ffat-lto-objects -S
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type12.C'
    sources:
      binary: noexcept-type12.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_noexcept-type13_277:
  build:
    cflags: ' -std=gnu++98 -Wall -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type13.C'
    sources:
      binary: noexcept-type13.s
  group: GRPSERIAL
  info: &72
    extraopts:
      - '"-Wall"'
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:8:)[^
        ]*([0-9]+: warning:[^
        ]*(mangled name" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_noexcept-type13_278:
  build:
    cflags: ' -std=gnu++11 -Wall -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type13.C'
    sources:
      binary: noexcept-type13.s
  group: GRPSERIAL
  info: *72
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_noexcept-type13_279:
  build:
    cflags: ' -std=gnu++14 -Wall -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type13.C'
    sources:
      binary: noexcept-type13.s
  group: GRPSERIAL
  info: *72
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_noexcept-type14_280:
  build:
    cflags: ' -std=gnu++11 -Wall -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type14.C'
    sources:
      binary: noexcept-type14.s
  group: GRPSERIAL
  info: &73
    extraopts:
      - '"-Wall"'
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:8:)[^
        ]*([0-9]+: warning:[^
        ]*(mangled name" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:9:)[^
        ]*([0-9]+: warning:[^
        ]*(mangled name" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: warning:[^
        ]*(mangled name" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:13:)[^
        ]*([0-9]+: warning:[^
        ]*(mangled name" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_noexcept-type14_281:
  build:
    cflags: ' -std=gnu++14 -Wall -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type14.C'
    sources:
      binary: noexcept-type14.s
  group: GRPSERIAL
  info: *73
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_noexcept-type15_282:
  build:
    cflags: '  -std=c++17 -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type15.C'
    sources:
      binary: noexcept-type15.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++17
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_noexcept-type16_283:
  build:
    cflags: -std=c++1z -ffat-lto-objects -S
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type16.C'
    sources:
      binary: noexcept-type16.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_noexcept-type17_284:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type17.C'
    sources:
      binary: noexcept-type17.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_noexcept-type1_273:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type1.C'
    sources:
      binary: noexcept-type1.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
    regex-err:
      - |-
        (^|
        )([^
        ]+(:4:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(dynamic exception specification))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:5:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:8:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_noexcept-type2_285:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type2.C'
    sources:
      binary: noexcept-type2.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_noexcept-type3_286:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type3.C'
    sources:
      binary: noexcept-type3.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
    regex-err:
      - |-
        (^|
        )([^
        ]+(:12:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(deleted))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_noexcept-type4_287:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type4.C'
    sources:
      binary: noexcept-type4.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
    regex-err:
      - |-
        (^|
        )([^
        ]+(:15:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_noexcept-type5_288:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type5.C'
    sources:
      binary: noexcept-type5.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_noexcept-type6_289:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type6.C'
    sources:
      binary: noexcept-type6.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
    regex-err:
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_noexcept-type7_290:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type7.C'
    sources:
      binary: noexcept-type7.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
    regex-err:
      - |-
        (^|
        )([^
        ]+(:13:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_noexcept-type8_291:
  build:
    cflags: '  -std=c++1z'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type8.C'
    sources:
      binary: ./noexcept-type8.exe
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_noexcept-type9_292:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/noexcept-type9.C'
    sources:
      binary: noexcept-type9.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
    regex-err:
      - |-
        (^|
        )([^
        ]+(:18:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_nontype-auto10_294:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype-auto10.C'
    sources:
      binary: nontype-auto10.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_nontype-auto13_295:
  build:
    cflags: '  -std=c++17 -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype-auto13.C'
    sources:
      binary: nontype-auto13.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++17
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_nontype-auto1_293:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype-auto1.C'
    sources:
      binary: nontype-auto1.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_nontype-auto2_296:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype-auto2.C'
    sources:
      binary: nontype-auto2.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_nontype-auto3_297:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype-auto3.C'
    sources:
      binary: nontype-auto3.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
    regex-err:
      - |-
        (^|
        )([^
        ]+(:7:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_nontype-auto4_298:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype-auto4.C'
    sources:
      binary: nontype-auto4.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_nontype-auto5_299:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype-auto5.C'
    sources:
      binary: nontype-auto5.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_nontype-auto6_300:
  build:
    cflags: ' -std=c++11  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype-auto6.C'
    sources:
      binary: nontype-auto6.s
  group: GRPSERIAL
  info: &74
    regex-err:
      - |-
        (^|
        )([^
        ]+(:7:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_nontype-auto6_301:
  build:
    cflags: ' -std=c++14  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype-auto6.C'
    sources:
      binary: nontype-auto6.s
  group: GRPSERIAL
  info: *74
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_nontype-auto7_302:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype-auto7.C'
    sources:
      binary: nontype-auto7.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_nontype-auto8_303:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype-auto8.C'
    sources:
      binary: nontype-auto8.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_nontype-auto9_304:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype-auto9.C'
    sources:
      binary: nontype-auto9.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_nontype1_305:
  build:
    cflags: -std=c++1z -ffat-lto-objects -S
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype1.C'
    sources:
      binary: nontype1.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_nontype2_306:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype2.C'
    sources:
      binary: nontype2.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
    regex-err:
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:12:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(string literal))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:13:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:17:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_nontype3_307:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype3.C'
    sources:
      binary: nontype3.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_nontype3a_308:
  build:
    cflags: '   -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/nontype3a.C'
    sources:
      binary: nontype3a.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr78771_309:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/pr78771.C'
    sources:
      binary: pr78771.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr79143_310:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/pr79143.C'
    sources:
      binary: pr79143.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_range-for1_311:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/range-for1.C'
    sources:
      binary: range-for1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_register1_312:
  build:
    cflags: ' -std=c++98  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/register1.C'
    sources:
      binary: register1.s
  group: GRPSERIAL
  info: &75
    regex-err:
      - |-
        (^|
        )([^
        ]+(:12:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(ISO C\\+\\+1z does not allow 'register' storage class specifier" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:13:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(storage class 'register' invalid for function))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:14:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(ISO C\\+\\+1z does not allow 'register' storage class specifier" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:25:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(ISO C\\+\\+1z does not allow 'register' storage class specifier" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_register1_313:
  build:
    cflags: ' -std=c++11  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/register1.C'
    sources:
      binary: register1.s
  group: GRPSERIAL
  info: *75
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_register1_314:
  build:
    cflags: ' -std=c++14  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/register1.C'
    sources:
      binary: register1.s
  group: GRPSERIAL
  info: *75
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_register2_315:
  build:
    cflags: ' -std=gnu++98 -Wno-register -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/register2.C'
    sources:
      binary: register2.s
  group: GRPSERIAL
  info: &76
    extraopts:
      - '"-Wno-register"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:14:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(storage class 'register' invalid for function))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_register2_316:
  build:
    cflags: ' -std=gnu++11 -Wno-register -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/register2.C'
    sources:
      binary: register2.s
  group: GRPSERIAL
  info: *76
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_register2_317:
  build:
    cflags: ' -std=gnu++14 -Wno-register -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/register2.C'
    sources:
      binary: register2.s
  group: GRPSERIAL
  info: *76
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_register3_318:
  build:
    cflags: ' -std=gnu++98 -Wregister -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/register3.C'
    sources:
      binary: register3.s
  group: GRPSERIAL
  info: &77
    extraopts:
      - '"-Wregister"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:14:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(storage class 'register' invalid for function))[^
        ]*
        ?)+
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:13:)[^
        ]*([0-9]+: warning:[^
        ]*('register' storage class specifier used))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:15:)[^
        ]*([0-9]+: warning:[^
        ]*('register' storage class specifier used))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:26:)[^
        ]*([0-9]+: warning:[^
        ]*('register' storage class specifier used))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_register3_319:
  build:
    cflags: ' -std=gnu++11 -Wregister -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/register3.C'
    sources:
      binary: register3.s
  group: GRPSERIAL
  info: *77
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_register3_320:
  build:
    cflags: ' -std=gnu++14 -Wregister -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/register3.C'
    sources:
      binary: register3.s
  group: GRPSERIAL
  info: *77
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_regress1_321:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/regress1.C'
    sources:
      binary: regress1.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_regress2_322:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/regress2.C'
    sources:
      binary: regress2.s
  group: GRPSERIAL
  info:
    extraopts:
      - -std=c++1z
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_static_assert-nomsg_323:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/static_assert-nomsg.C'
    sources:
      binary: static_assert-nomsg.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:19:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(static assertion failed))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:20:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(static assertion failed))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_ttp1_324:
  build:
    cflags: ' -std=gnu++98 -fnew-ttp-matching -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/ttp1.C'
    sources:
      binary: ttp1.s
  group: GRPSERIAL
  info: &78
    extraopts:
      - -fnew-ttp-matching
    regex-err:
      - |-
        (^|
        )([^
        ]+(:15:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(no match))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_ttp1_325:
  build:
    cflags: ' -std=gnu++11 -fnew-ttp-matching -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/ttp1.C'
    sources:
      binary: ttp1.s
  group: GRPSERIAL
  info: *78
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_ttp1_326:
  build:
    cflags: ' -std=gnu++14 -fnew-ttp-matching -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/ttp1.C'
    sources:
      binary: ttp1.s
  group: GRPSERIAL
  info: *78
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_typename-tmpl-tmpl-parm-neg_327:
  build:
    cflags: ' -std=gnu++98  -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/typename-tmpl-tmpl-parm-neg.C'
    sources:
      binary: typename-tmpl-tmpl-parm-neg.s
  group: GRPSERIAL
  info: &79
    extraopts:
      - '""'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:4:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected .class. or .typename. before))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:7:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected .class. or .typename. before))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected identifier" "expected))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected .>." "expected))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_typename-tmpl-tmpl-parm-neg_328:
  build:
    cflags: ' -std=gnu++11  -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/typename-tmpl-tmpl-parm-neg.C'
    sources:
      binary: typename-tmpl-tmpl-parm-neg.s
  group: GRPSERIAL
  info: *79
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_typename-tmpl-tmpl-parm-neg_329:
  build:
    cflags: ' -std=gnu++14  -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/typename-tmpl-tmpl-parm-neg.C'
    sources:
      binary: typename-tmpl-tmpl-parm-neg.s
  group: GRPSERIAL
  info: *79
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_typename-tmpl-tmpl-parm-ped-neg_330:
  build:
    cflags: ' -std=gnu++98 -pedantic -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/typename-tmpl-tmpl-parm-ped-neg.C'
    sources:
      binary: typename-tmpl-tmpl-parm-ped-neg.s
  group: GRPSERIAL
  info: &80
    extraopts:
      - '"-pedantic"'
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:21:)[^
        ]*([0-9]+: warning:[^
        ]*(ISO C.. forbids typename key in template template parameter))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_typename-tmpl-tmpl-parm-ped-neg_331:
  build:
    cflags: ' -std=gnu++11 -pedantic -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/typename-tmpl-tmpl-parm-ped-neg.C'
    sources:
      binary: typename-tmpl-tmpl-parm-ped-neg.s
  group: GRPSERIAL
  info: *80
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_typename-tmpl-tmpl-parm-ped-neg_332:
  build:
    cflags: ' -std=gnu++14 -pedantic -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/typename-tmpl-tmpl-parm-ped-neg.C'
    sources:
      binary: typename-tmpl-tmpl-parm-ped-neg.s
  group: GRPSERIAL
  info: *80
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_typename-tmpl-tmpl-parm_333:
  build:
    cflags: ' -std=gnu++98  -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/typename-tmpl-tmpl-parm.C'
    sources:
      binary: typename-tmpl-tmpl-parm.s
  group: GRPSERIAL
  info: &81
    extraopts:
      - '""'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_typename-tmpl-tmpl-parm_334:
  build:
    cflags: ' -std=gnu++11  -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/typename-tmpl-tmpl-parm.C'
    sources:
      binary: typename-tmpl-tmpl-parm.s
  group: GRPSERIAL
  info: *81
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_typename-tmpl-tmpl-parm_335:
  build:
    cflags: ' -std=gnu++14  -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/typename-tmpl-tmpl-parm.C'
    sources:
      binary: typename-tmpl-tmpl-parm.s
  group: GRPSERIAL
  info: *81
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_udlit-utf8char_336:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/udlit-utf8char.C'
    sources:
      binary: udlit-utf8char.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_using1_337:
  build:
    cflags: ' -std=c++98  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/using1.C'
    sources:
      binary: using1.s
  group: GRPSERIAL
  info: &82
    regex-err:
      - |-
        (^|
        )([^
        ]+(:22:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_using1_338:
  build:
    cflags: ' -std=c++11  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/using1.C'
    sources:
      binary: using1.s
  group: GRPSERIAL
  info: *82
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_using1_339:
  build:
    cflags: ' -std=c++14  -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/using1.C'
    sources:
      binary: using1.s
  group: GRPSERIAL
  info: *82
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_using2_340:
  build:
    cflags: ' -std=gnu++11  -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/using2.C'
    sources:
      binary: using2.s
  group: GRPSERIAL
  info: &83
    extraopts:
      - '""'
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: warning:[^
        ]*(pack expansion" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_using2_341:
  build:
    cflags: ' -std=gnu++14  -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/using2.C'
    sources:
      binary: using2.s
  group: GRPSERIAL
  info: *83
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_using3_342:
  build:
    cflags: ' -std=gnu++98  -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/using3.C'
    sources:
      binary: using3.s
  group: GRPSERIAL
  info: &84
    extraopts:
      - '""'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:18:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(redeclaration))[^
        ]*
        ?)+
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: warning:[^
        ]*(comma" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:19:)[^
        ]*([0-9]+: warning:[^
        ]*(comma" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_using3_343:
  build:
    cflags: ' -std=gnu++11  -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/using3.C'
    sources:
      binary: using3.s
  group: GRPSERIAL
  info: *84
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_using3_344:
  build:
    cflags: ' -std=gnu++14  -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/using3.C'
    sources:
      binary: using3.s
  group: GRPSERIAL
  info: *84
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_utf8-2_345:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/utf8-2.C'
    sources:
      binary: utf8-2.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_utf8-2a_346:
  build:
    cflags: '   -pedantic-errors -Wno-long-long -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/utf8-2a.C'
    sources:
      binary: utf8-2a.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_utf8-neg_347:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/utf8-neg.C'
    sources:
      binary: utf8-neg.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:4:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(empty character))[^
        ]*
        ?)+
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:5:)[^
        ]*([0-9]+: warning:[^
        ]*(multi-character character constant))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:6:)[^
        ]*([0-9]+: warning:[^
        ]*(multi-character character constant))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:7:)[^
        ]*([0-9]+: warning:[^
        ]*(multi-character character constant))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_utf8_348:
  build:
    cflags: '  -std=c++1z -S'
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/cpp1z/utf8.C'
    sources:
      binary: utf8.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c++1z"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
