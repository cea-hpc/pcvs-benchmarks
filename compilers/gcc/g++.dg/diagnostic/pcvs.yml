test_aka1_1:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/aka1.C'
    sources: {binary: aka1.s, cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("B
          .aka A.")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("type
          .A. requested")[^\n]*\n?)+'}
test_aka1_2:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/aka1.C'
    sources: {binary: aka1.s, cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("B
          .aka A.")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("type
          .A. requested")[^\n]*\n?)+'}
test_aka1_3:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/aka1.C'
    sources: {binary: aka1.s, cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("B
          .aka A.")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("type
          .A. requested")[^\n]*\n?)+'}
test_aka1_77:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/aka1.C'
    sources: {binary: aka1.s, cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("B
          .aka A.")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("type
          .A. requested")[^\n]*\n?)+'}
test_aka1_78:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/aka1.C'
    sources: {binary: aka1.s, cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("B
          .aka A.")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("type
          .A. requested")[^\n]*\n?)+'}
test_aka1_79:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/aka1.C'
    sources: {binary: aka1.s, cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("B
          .aka A.")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("type
          .A. requested")[^\n]*\n?)+'}
test_bad-binary-ops_4:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/bad-binary-ops.C'
    sources: {binary: bad-binary-ops.s, cflags: "-std=gnu++98 -fdiagnostics-show-caret\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          match for .operator")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          match for .operator")[^\n]*\n?)+'}
test_bad-binary-ops_5:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/bad-binary-ops.C'
    sources: {binary: bad-binary-ops.s, cflags: "-std=gnu++11 -fdiagnostics-show-caret\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          match for .operator")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          match for .operator")[^\n]*\n?)+'}
test_bad-binary-ops_6:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/bad-binary-ops.C'
    sources: {binary: bad-binary-ops.s, cflags: "-std=gnu++14 -fdiagnostics-show-caret\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          match for .operator")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          match for .operator")[^\n]*\n?)+'}
test_bad-binary-ops_80:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/bad-binary-ops.C'
    sources: {binary: bad-binary-ops.s, cflags: "-std=gnu++98 -fdiagnostics-show-caret\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          match for .operator")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          match for .operator")[^\n]*\n?)+'}
test_bad-binary-ops_81:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/bad-binary-ops.C'
    sources: {binary: bad-binary-ops.s, cflags: "-std=gnu++11 -fdiagnostics-show-caret\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          match for .operator")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          match for .operator")[^\n]*\n?)+'}
test_bad-binary-ops_82:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/bad-binary-ops.C'
    sources: {binary: bad-binary-ops.s, cflags: "-std=gnu++14 -fdiagnostics-show-caret\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          match for .operator")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          match for .operator")[^\n]*\n?)+'}
test_bindings1_7:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/bindings1.C'
    sources: {binary: ./bindings1.exe, cflags: -std=c++98  -pedantic-errors -Wno-long-long}
  group: GRPSERIAL
  run: {cwd: .}
test_bindings1_8:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/bindings1.C'
    sources: {binary: ./bindings1.exe, cflags: -std=c++11  -pedantic-errors -Wno-long-long}
  group: GRPSERIAL
  run: {cwd: .}
test_bindings1_83:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/bindings1.C'
    sources: {binary: ./bindings1.exe, cflags: -std=c++98  -pedantic-errors -Wno-long-long}
  group: GRPSERIAL
  run: {cwd: .}
test_bindings1_84:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/bindings1.C'
    sources: {binary: ./bindings1.exe, cflags: -std=c++11  -pedantic-errors -Wno-long-long}
  group: GRPSERIAL
  run: {cwd: .}
test_bindings1_85:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/bindings1.C'
    sources: {binary: ./bindings1.exe, cflags: -std=c++14  -pedantic-errors -Wno-long-long}
  group: GRPSERIAL
  run: {cwd: .}
test_bindings1_9:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/bindings1.C'
    sources: {binary: ./bindings1.exe, cflags: -std=c++14  -pedantic-errors -Wno-long-long}
  group: GRPSERIAL
  run: {cwd: .}
test_bitfld1_10:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/bitfld1.C'
    sources: {binary: bitfld1.s, cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unsigned
          char:1")[^\n]*\n?)+'}
test_bitfld1_11:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/bitfld1.C'
    sources: {binary: bitfld1.s, cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unsigned
          char:1")[^\n]*\n?)+'}
test_bitfld1_12:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/bitfld1.C'
    sources: {binary: bitfld1.s, cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unsigned
          char:1")[^\n]*\n?)+'}
test_bitfld1_86:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/bitfld1.C'
    sources: {binary: bitfld1.s, cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unsigned
          char:1")[^\n]*\n?)+'}
test_bitfld1_87:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/bitfld1.C'
    sources: {binary: bitfld1.s, cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unsigned
          char:1")[^\n]*\n?)+'}
test_bitfld1_88:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/bitfld1.C'
    sources: {binary: bitfld1.s, cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unsigned
          char:1")[^\n]*\n?)+'}
test_bitfld2_13:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/bitfld2.C'
    sources: {binary: bitfld2.s, cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \'';\'' after struct")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C.. forbids declaration")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C.. prohibits anonymous")[^\n]*\n?)+'}
test_bitfld2_14:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/bitfld2.C'
    sources: {binary: bitfld2.s, cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \'';\'' after struct")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C.. forbids declaration")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C.. prohibits anonymous")[^\n]*\n?)+'}
test_bitfld2_15:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/bitfld2.C'
    sources: {binary: bitfld2.s, cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \'';\'' after struct")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C.. forbids declaration")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C.. prohibits anonymous")[^\n]*\n?)+'}
test_bitfld2_89:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/bitfld2.C'
    sources: {binary: bitfld2.s, cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \'';\'' after struct")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C.. forbids declaration")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C.. prohibits anonymous")[^\n]*\n?)+'}
test_bitfld2_90:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/bitfld2.C'
    sources: {binary: bitfld2.s, cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \'';\'' after struct")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C.. forbids declaration")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C.. prohibits anonymous")[^\n]*\n?)+'}
test_bitfld2_91:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/bitfld2.C'
    sources: {binary: bitfld2.s, cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \'';\'' after struct")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C.. forbids declaration")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C.. prohibits anonymous")[^\n]*\n?)+'}
test_disable_16:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/disable.C'
    sources: {binary: disable.s, cflags: "-std=gnu++98 -Wtemplates -Wmultiple-inheritance
        -Wvirtual-inheritance -Wnamespaces\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("multiple")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("virtual")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("namespace")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("template")[^\n]*\n?)+'}
test_disable_17:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/disable.C'
    sources: {binary: disable.s, cflags: "-std=gnu++11 -Wtemplates -Wmultiple-inheritance
        -Wvirtual-inheritance -Wnamespaces\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("multiple")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("virtual")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("namespace")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("template")[^\n]*\n?)+'}
test_disable_18:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/disable.C'
    sources: {binary: disable.s, cflags: "-std=gnu++14 -Wtemplates -Wmultiple-inheritance
        -Wvirtual-inheritance -Wnamespaces\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("multiple")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("virtual")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("namespace")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("template")[^\n]*\n?)+'}
test_disable_92:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/disable.C'
    sources: {binary: disable.s, cflags: "-std=gnu++98 -Wtemplates -Wmultiple-inheritance
        -Wvirtual-inheritance -Wnamespaces\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("multiple")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("virtual")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("namespace")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("template")[^\n]*\n?)+'}
test_disable_93:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/disable.C'
    sources: {binary: disable.s, cflags: "-std=gnu++11 -Wtemplates -Wmultiple-inheritance
        -Wvirtual-inheritance -Wnamespaces\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("multiple")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("virtual")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("namespace")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("template")[^\n]*\n?)+'}
test_disable_94:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/disable.C'
    sources: {binary: disable.s, cflags: "-std=gnu++14 -Wtemplates -Wmultiple-inheritance
        -Wvirtual-inheritance -Wnamespaces\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("multiple")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("virtual")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("namespace")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("template")[^\n]*\n?)+'}
test_expr1_19:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/expr1.C'
    sources: {binary: expr1.s, cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("i
          = 0")[^\n]*\n?)+'}
test_expr1_20:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/expr1.C'
    sources: {binary: expr1.s, cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("i
          = 0")[^\n]*\n?)+'}
test_expr1_21:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/expr1.C'
    sources: {binary: expr1.s, cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("i
          = 0")[^\n]*\n?)+'}
test_expr1_95:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/expr1.C'
    sources: {binary: expr1.s, cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("i
          = 0")[^\n]*\n?)+'}
test_expr1_96:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/expr1.C'
    sources: {binary: expr1.s, cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("i
          = 0")[^\n]*\n?)+'}
test_expr1_97:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/expr1.C'
    sources: {binary: expr1.s, cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("i
          = 0")[^\n]*\n?)+'}
test_inhibit-warn-1_22:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/inhibit-warn-1.C'
    sources: {binary: inhibit-warn-1.s, cflags: "-std=gnu++11 -Wbool-compare\n -S"}
  group: GRPSERIAL
test_inhibit-warn-1_23:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/inhibit-warn-1.C'
    sources: {binary: inhibit-warn-1.s, cflags: "-std=gnu++14 -Wbool-compare\n -S"}
  group: GRPSERIAL
test_inhibit-warn-1_98:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/inhibit-warn-1.C'
    sources: {binary: inhibit-warn-1.s, cflags: "-std=gnu++11 -Wbool-compare\n -S"}
  group: GRPSERIAL
test_inhibit-warn-1_99:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/inhibit-warn-1.C'
    sources: {binary: inhibit-warn-1.s, cflags: "-std=gnu++14 -Wbool-compare\n -S"}
  group: GRPSERIAL
test_inhibit-warn-2_100:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/inhibit-warn-2.C'
    sources: {binary: inhibit-warn-2.s, cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("private")[^\n]*\n?)+'}
test_inhibit-warn-2_101:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/inhibit-warn-2.C'
    sources: {binary: inhibit-warn-2.s, cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("private")[^\n]*\n?)+'}
test_inhibit-warn-2_102:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/inhibit-warn-2.C'
    sources: {binary: inhibit-warn-2.s, cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("private")[^\n]*\n?)+'}
test_inhibit-warn-2_24:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/inhibit-warn-2.C'
    sources: {binary: inhibit-warn-2.s, cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("private")[^\n]*\n?)+'}
test_inhibit-warn-2_25:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/inhibit-warn-2.C'
    sources: {binary: inhibit-warn-2.s, cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("private")[^\n]*\n?)+'}
test_inhibit-warn-2_26:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/inhibit-warn-2.C'
    sources: {binary: inhibit-warn-2.s, cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("private")[^\n]*\n?)+'}
test_method1_103:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/method1.C'
    sources: {binary: method1.s, cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("without
          object")[^\n]*\n?)+'}
test_method1_104:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/method1.C'
    sources: {binary: method1.s, cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("without
          object")[^\n]*\n?)+'}
test_method1_105:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/method1.C'
    sources: {binary: method1.s, cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("without
          object")[^\n]*\n?)+'}
test_method1_27:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/method1.C'
    sources: {binary: method1.s, cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("without
          object")[^\n]*\n?)+'}
test_method1_28:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/method1.C'
    sources: {binary: method1.s, cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("without
          object")[^\n]*\n?)+'}
test_method1_29:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/method1.C'
    sources: {binary: method1.s, cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("without
          object")[^\n]*\n?)+'}
test_parm1_106:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/parm1.C'
    sources: {binary: parm1.s, cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("foo")[^\n]*\n?)+'}
test_parm1_107:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/parm1.C'
    sources: {binary: parm1.s, cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("foo")[^\n]*\n?)+'}
test_parm1_108:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/parm1.C'
    sources: {binary: parm1.s, cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("foo")[^\n]*\n?)+'}
test_parm1_30:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/parm1.C'
    sources: {binary: parm1.s, cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("foo")[^\n]*\n?)+'}
test_parm1_31:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/parm1.C'
    sources: {binary: parm1.s, cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("foo")[^\n]*\n?)+'}
test_parm1_32:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/parm1.C'
    sources: {binary: parm1.s, cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("foo")[^\n]*\n?)+'}
test_pr13981_109:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr13981.C'
    sources: {binary: pr13981.s, cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          convert")[^\n]*\n?)+'}
test_pr13981_110:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr13981.C'
    sources: {binary: pr13981.s, cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          convert")[^\n]*\n?)+'}
test_pr13981_111:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr13981.C'
    sources: {binary: pr13981.s, cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          convert")[^\n]*\n?)+'}
test_pr13981_33:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr13981.C'
    sources: {binary: pr13981.s, cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          convert")[^\n]*\n?)+'}
test_pr13981_34:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr13981.C'
    sources: {binary: pr13981.s, cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          convert")[^\n]*\n?)+'}
test_pr13981_35:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr13981.C'
    sources: {binary: pr13981.s, cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          convert")[^\n]*\n?)+'}
test_pr58979_112:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr58979.C'
    sources: {binary: pr58979.s, cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          type argument of")[^\n]*\n?)+'}
test_pr58979_113:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr58979.C'
    sources: {binary: pr58979.s, cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          type argument of")[^\n]*\n?)+'}
test_pr58979_114:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr58979.C'
    sources: {binary: pr58979.s, cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          type argument of")[^\n]*\n?)+'}
test_pr58979_36:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr58979.C'
    sources: {binary: pr58979.s, cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          type argument of")[^\n]*\n?)+'}
test_pr58979_37:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr58979.C'
    sources: {binary: pr58979.s, cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          type argument of")[^\n]*\n?)+'}
test_pr58979_38:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr58979.C'
    sources: {binary: pr58979.s, cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          type argument of")[^\n]*\n?)+'}
test_pr59838_115:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr59838.C'
    sources: {binary: pr59838.s, cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to incomplete type")[^\n]*\n?)+'}
test_pr59838_116:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr59838.C'
    sources: {binary: pr59838.s, cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to incomplete type")[^\n]*\n?)+'}
test_pr59838_117:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr59838.C'
    sources: {binary: pr59838.s, cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to incomplete type")[^\n]*\n?)+'}
test_pr59838_39:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr59838.C'
    sources: {binary: pr59838.s, cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to incomplete type")[^\n]*\n?)+'}
test_pr59838_40:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr59838.C'
    sources: {binary: pr59838.s, cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to incomplete type")[^\n]*\n?)+'}
test_pr59838_41:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr59838.C'
    sources: {binary: pr59838.s, cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to incomplete type")[^\n]*\n?)+'}
test_pr60862_118:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr60862.C'
    sources: {binary: pr60862.s, cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("17:invalid
          conversion")[^\n]*\n?)+'}
test_pr60862_119:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr60862.C'
    sources: {binary: pr60862.s, cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("17:invalid
          conversion")[^\n]*\n?)+'}
test_pr60862_120:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr60862.C'
    sources: {binary: pr60862.s, cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("17:invalid
          conversion")[^\n]*\n?)+'}
test_pr60862_42:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr60862.C'
    sources: {binary: pr60862.s, cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("17:invalid
          conversion")[^\n]*\n?)+'}
test_pr60862_43:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr60862.C'
    sources: {binary: pr60862.s, cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("17:invalid
          conversion")[^\n]*\n?)+'}
test_pr60862_44:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr60862.C'
    sources: {binary: pr60862.s, cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("17:invalid
          conversion")[^\n]*\n?)+'}
test_pr61004_121:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr61004.C'
    sources: {binary: pr61004.s, cflags: "-std=gnu++98 -O2 -Wall\n -S"}
  group: GRPSERIAL
test_pr61004_122:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr61004.C'
    sources: {binary: pr61004.s, cflags: "-std=gnu++11 -O2 -Wall\n -S"}
  group: GRPSERIAL
test_pr61004_123:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr61004.C'
    sources: {binary: pr61004.s, cflags: "-std=gnu++14 -O2 -Wall\n -S"}
  group: GRPSERIAL
test_pr61004_45:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr61004.C'
    sources: {binary: pr61004.s, cflags: "-std=gnu++98 -O2 -Wall\n -S"}
  group: GRPSERIAL
test_pr61004_46:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr61004.C'
    sources: {binary: pr61004.s, cflags: "-std=gnu++11 -O2 -Wall\n -S"}
  group: GRPSERIAL
test_pr61004_47:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr61004.C'
    sources: {binary: pr61004.s, cflags: "-std=gnu++14 -O2 -Wall\n -S"}
  group: GRPSERIAL
test_pr70105_124:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr70105.C'
    sources: {binary: pr70105.s, cflags: "-std=gnu++98 -Wsequence-point -fdiagnostics-show-caret\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("may
          be undefined")[^\n]*\n?)+'}
test_pr70105_125:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr70105.C'
    sources: {binary: pr70105.s, cflags: "-std=gnu++11 -Wsequence-point -fdiagnostics-show-caret\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("may
          be undefined")[^\n]*\n?)+'}
test_pr70105_126:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr70105.C'
    sources: {binary: pr70105.s, cflags: "-std=gnu++14 -Wsequence-point -fdiagnostics-show-caret\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("may
          be undefined")[^\n]*\n?)+'}
test_pr70105_48:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr70105.C'
    sources: {binary: pr70105.s, cflags: "-std=gnu++98 -Wsequence-point -fdiagnostics-show-caret\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("may
          be undefined")[^\n]*\n?)+'}
test_pr70105_49:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr70105.C'
    sources: {binary: pr70105.s, cflags: "-std=gnu++11 -Wsequence-point -fdiagnostics-show-caret\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("may
          be undefined")[^\n]*\n?)+'}
test_pr70105_50:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr70105.C'
    sources: {binary: pr70105.s, cflags: "-std=gnu++14 -Wsequence-point -fdiagnostics-show-caret\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("may
          be undefined")[^\n]*\n?)+'}
test_pr71075_127:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr71075.C'
    sources: {binary: pr71075.s, cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          matching")[^\n]*\n?)+'}
test_pr71075_128:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr71075.C'
    sources: {binary: pr71075.s, cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          matching")[^\n]*\n?)+'}
test_pr71075_129:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr71075.C'
    sources: {binary: pr71075.s, cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          matching")[^\n]*\n?)+'}
test_pr71075_51:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr71075.C'
    sources: {binary: pr71075.s, cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          matching")[^\n]*\n?)+'}
test_pr71075_52:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr71075.C'
    sources: {binary: pr71075.s, cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          matching")[^\n]*\n?)+'}
test_pr71075_53:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr71075.C'
    sources: {binary: pr71075.s, cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          matching")[^\n]*\n?)+'}
test_pr72803_130:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr72803.C'
    sources: {binary: pr72803.s, cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("style
          of line directive is a GCC extension")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("512:
          expected .;. after class definition")[^\n]*\n?)+'}
test_pr72803_131:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr72803.C'
    sources: {binary: pr72803.s, cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("style
          of line directive is a GCC extension")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("512:
          expected .;. after class definition")[^\n]*\n?)+'}
test_pr72803_132:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr72803.C'
    sources: {binary: pr72803.s, cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("style
          of line directive is a GCC extension")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("512:
          expected .;. after class definition")[^\n]*\n?)+'}
test_pr72803_54:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr72803.C'
    sources: {binary: pr72803.s, cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("style
          of line directive is a GCC extension")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("512:
          expected .;. after class definition")[^\n]*\n?)+'}
test_pr72803_55:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr72803.C'
    sources: {binary: pr72803.s, cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("style
          of line directive is a GCC extension")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("512:
          expected .;. after class definition")[^\n]*\n?)+'}
test_pr72803_56:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr72803.C'
    sources: {binary: pr72803.s, cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("style
          of line directive is a GCC extension")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("512:
          expected .;. after class definition")[^\n]*\n?)+'}
test_pr77949_133:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr77949.C'
    sources: {binary: pr77949.s, cflags: "-std=gnu++98 -fdiagnostics-parseable-fixits\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("0:
          expected .;. after class definition")[^\n]*\n?)+'}
test_pr77949_134:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr77949.C'
    sources: {binary: pr77949.s, cflags: "-std=gnu++11 -fdiagnostics-parseable-fixits\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("0:
          expected .;. after class definition")[^\n]*\n?)+'}
test_pr77949_135:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr77949.C'
    sources: {binary: pr77949.s, cflags: "-std=gnu++14 -fdiagnostics-parseable-fixits\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("0:
          expected .;. after class definition")[^\n]*\n?)+'}
test_pr77949_57:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr77949.C'
    sources: {binary: pr77949.s, cflags: "-std=gnu++98 -fdiagnostics-parseable-fixits\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("0:
          expected .;. after class definition")[^\n]*\n?)+'}
test_pr77949_58:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr77949.C'
    sources: {binary: pr77949.s, cflags: "-std=gnu++11 -fdiagnostics-parseable-fixits\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("0:
          expected .;. after class definition")[^\n]*\n?)+'}
test_pr77949_59:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr77949.C'
    sources: {binary: pr77949.s, cflags: "-std=gnu++14 -fdiagnostics-parseable-fixits\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("0:
          expected .;. after class definition")[^\n]*\n?)+'}
test_pr79304_136:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr79304.C'
    sources: {binary: pr79304.s, cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("->c")[^\n]*\n?)+'}
test_pr79304_137:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr79304.C'
    sources: {binary: pr79304.s, cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("->c")[^\n]*\n?)+'}
test_pr79304_138:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr79304.C'
    sources: {binary: pr79304.s, cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("->c")[^\n]*\n?)+'}
test_pr79304_60:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr79304.C'
    sources: {binary: pr79304.s, cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("->c")[^\n]*\n?)+'}
test_pr79304_61:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr79304.C'
    sources: {binary: pr79304.s, cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("->c")[^\n]*\n?)+'}
test_pr79304_62:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr79304.C'
    sources: {binary: pr79304.s, cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("->c")[^\n]*\n?)+'}
test_pr80473_139:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr80473.C'
    sources: {binary: pr80473.s, cflags: "-std=gnu++11 -Wall -w\n -S"}
  group: GRPSERIAL
test_pr80473_140:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr80473.C'
    sources: {binary: pr80473.s, cflags: "-std=gnu++14 -Wall -w\n -S"}
  group: GRPSERIAL
test_pr80473_63:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr80473.C'
    sources: {binary: pr80473.s, cflags: "-std=gnu++11 -Wall -w\n -S"}
  group: GRPSERIAL
test_pr80473_64:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/pr80473.C'
    sources: {binary: pr80473.s, cflags: "-std=gnu++14 -Wall -w\n -S"}
  group: GRPSERIAL
test_ref1_141:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/ref1.C'
    sources: {binary: ref1.s, cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("rvalue")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("rvalue")[^\n]*\n?)+'}
test_ref1_142:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/ref1.C'
    sources: {binary: ref1.s, cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("rvalue")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("rvalue")[^\n]*\n?)+'}
test_ref1_143:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/ref1.C'
    sources: {binary: ref1.s, cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("rvalue")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("rvalue")[^\n]*\n?)+'}
test_ref1_65:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/ref1.C'
    sources: {binary: ref1.s, cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("rvalue")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("rvalue")[^\n]*\n?)+'}
test_ref1_66:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/ref1.C'
    sources: {binary: ref1.s, cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("rvalue")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("rvalue")[^\n]*\n?)+'}
test_ref1_67:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/ref1.C'
    sources: {binary: ref1.s, cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("rvalue")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("rvalue")[^\n]*\n?)+'}
test_ref2_144:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/ref2.C'
    sources: {binary: ref2.s, cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("rvalue")[^\n]*\n?)+'}
test_ref2_145:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/ref2.C'
    sources: {binary: ref2.s, cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("rvalue")[^\n]*\n?)+'}
test_ref2_146:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/ref2.C'
    sources: {binary: ref2.s, cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("rvalue")[^\n]*\n?)+'}
test_ref2_68:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/ref2.C'
    sources: {binary: ref2.s, cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("rvalue")[^\n]*\n?)+'}
test_ref2_69:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/ref2.C'
    sources: {binary: ref2.s, cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("rvalue")[^\n]*\n?)+'}
test_ref2_70:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/ref2.C'
    sources: {binary: ref2.s, cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("rvalue")[^\n]*\n?)+'}
test_string-literal-concat_147:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/string-literal-concat.C'
    sources: {binary: string-literal-concat.s, cflags: "-fdiagnostics-show-caret -std=c++11\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("34:
          non-standard concatenation")[^\n]*\n?)+'}
      L3: {expect: true, expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("24:
          non-standard concatenation")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("30:
          non-standard concatenation")[^\n]*\n?)+'}
test_string-literal-concat_71:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/string-literal-concat.C'
    sources: {binary: string-literal-concat.s, cflags: "-fdiagnostics-show-caret -std=c++11\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("34:
          non-standard concatenation")[^\n]*\n?)+'}
      L3: {expect: true, expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("24:
          non-standard concatenation")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("30:
          non-standard concatenation")[^\n]*\n?)+'}
test_variadic1_148:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/variadic1.C'
    sources: {binary: variadic1.s, cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("sizeof\\\\.\\\\.\\\\.")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          be overloaded")[^\n]*\n?)+'}
test_variadic1_149:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/variadic1.C'
    sources: {binary: variadic1.s, cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("sizeof\\\\.\\\\.\\\\.")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          be overloaded")[^\n]*\n?)+'}
test_variadic1_72:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/variadic1.C'
    sources: {binary: variadic1.s, cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("sizeof\\\\.\\\\.\\\\.")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          be overloaded")[^\n]*\n?)+'}
test_variadic1_73:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/variadic1.C'
    sources: {binary: variadic1.s, cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("sizeof\\\\.\\\\.\\\\.")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          be overloaded")[^\n]*\n?)+'}
test_wrong-tag-1_150:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/wrong-tag-1.C'
    sources: {binary: wrong-tag-1.s, cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("tag
          used in naming")[^\n]*\n?)+'}
test_wrong-tag-1_151:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/wrong-tag-1.C'
    sources: {binary: wrong-tag-1.s, cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("tag
          used in naming")[^\n]*\n?)+'}
test_wrong-tag-1_152:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/wrong-tag-1.C'
    sources: {binary: wrong-tag-1.s, cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("tag
          used in naming")[^\n]*\n?)+'}
test_wrong-tag-1_74:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/wrong-tag-1.C'
    sources: {binary: wrong-tag-1.s, cflags: "-std=c++98  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("tag
          used in naming")[^\n]*\n?)+'}
test_wrong-tag-1_75:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/wrong-tag-1.C'
    sources: {binary: wrong-tag-1.s, cflags: "-std=c++11  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("tag
          used in naming")[^\n]*\n?)+'}
test_wrong-tag-1_76:
  build:
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/diagnostic/wrong-tag-1.C'
    sources: {binary: wrong-tag-1.s, cflags: "-std=c++14  -pedantic-errors -Wno-long-long\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("tag
          used in naming")[^\n]*\n?)+'}
