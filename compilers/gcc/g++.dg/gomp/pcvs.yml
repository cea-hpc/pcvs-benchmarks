test_atomic-14_1:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/atomic-14.C'
    sources:
      binary: atomic-14.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of an operand
          of type .bool.")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of an operand
          of type .bool.")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of an operand
          of type .bool.")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of an operand
          of type .bool.")[^\n]*\n?)+'
test_atomic-14_2:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/atomic-14.C'
    sources:
      binary: atomic-14.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of an operand
          of type .bool.")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of an operand
          of type .bool.")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of an operand
          of type .bool.")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of an operand
          of type .bool.")[^\n]*\n?)+'
test_atomic-14_3:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/atomic-14.C'
    sources:
      binary: atomic-14.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of an operand
          of type .bool.")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of an operand
          of type .bool.")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of an operand
          of type .bool.")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of an operand
          of type .bool.")[^\n]*\n?)+'
test_atomic-14_683:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/atomic-14.C'
    sources:
      binary: atomic-14.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of an operand
          of type .bool.")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of an operand
          of type .bool.")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of an operand
          of type .bool.")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of an operand
          of type .bool.")[^\n]*\n?)+'
test_atomic-14_684:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/atomic-14.C'
    sources:
      binary: atomic-14.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of an operand
          of type .bool.")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of an operand
          of type .bool.")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of an operand
          of type .bool.")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of an operand
          of type .bool.")[^\n]*\n?)+'
test_atomic-14_685:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/atomic-14.C'
    sources:
      binary: atomic-14.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of an operand
          of type .bool.")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of an operand
          of type .bool.")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of an operand
          of type .bool.")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of an operand
          of type .bool.")[^\n]*\n?)+'
test_atomic-17_4:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/atomic-17.C'
    sources:
      binary: atomic-17.s
  group: GRPSERIAL
test_atomic-17_5:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/atomic-17.C'
    sources:
      binary: atomic-17.s
  group: GRPSERIAL
test_atomic-17_6:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/atomic-17.C'
    sources:
      binary: atomic-17.s
  group: GRPSERIAL
test_atomic-17_686:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/atomic-17.C'
    sources:
      binary: atomic-17.s
  group: GRPSERIAL
test_atomic-17_687:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/atomic-17.C'
    sources:
      binary: atomic-17.s
  group: GRPSERIAL
test_atomic-17_688:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/atomic-17.C'
    sources:
      binary: atomic-17.s
  group: GRPSERIAL
test_atomic-5_689:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/atomic-5.C'
    sources:
      binary: atomic-5.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operator")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid form")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("read-only variable")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("read-only variable")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("read-only variable")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operator")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue required")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected end
          of line")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected primary-expression")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not allowed")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_atomic-5_690:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/atomic-5.C'
    sources:
      binary: atomic-5.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operator")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid form")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("read-only variable")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("read-only variable")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("read-only variable")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operator")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue required")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected end
          of line")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected primary-expression")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not allowed")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_atomic-5_691:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/atomic-5.C'
    sources:
      binary: atomic-5.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operator")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid form")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("read-only variable")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("read-only variable")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("read-only variable")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operator")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue required")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected end
          of line")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected primary-expression")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not allowed")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_atomic-5_7:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/atomic-5.C'
    sources:
      binary: atomic-5.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operator")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid form")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("read-only variable")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("read-only variable")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("read-only variable")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operator")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue required")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected end
          of line")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected primary-expression")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not allowed")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_atomic-5_8:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/atomic-5.C'
    sources:
      binary: atomic-5.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operator")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid form")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("read-only variable")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("read-only variable")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("read-only variable")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operator")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue required")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected end
          of line")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected primary-expression")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not allowed")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_atomic-5_9:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/atomic-5.C'
    sources:
      binary: atomic-5.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operator")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid form")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("read-only variable")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("read-only variable")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("read-only variable")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operator")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue required")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected end
          of line")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected primary-expression")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not allowed")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_atomic-6_10:
  build:
    cflags: "-std=gnu++98 -w -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/atomic-6.C'
    sources:
      binary: atomic-6.s
  group: GRPSERIAL
test_atomic-6_11:
  build:
    cflags: "-std=gnu++11 -w -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/atomic-6.C'
    sources:
      binary: atomic-6.s
  group: GRPSERIAL
test_atomic-6_12:
  build:
    cflags: "-std=gnu++14 -w -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/atomic-6.C'
    sources:
      binary: atomic-6.s
  group: GRPSERIAL
test_atomic-6_692:
  build:
    cflags: "-std=gnu++98 -w -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/atomic-6.C'
    sources:
      binary: atomic-6.s
  group: GRPSERIAL
test_atomic-6_693:
  build:
    cflags: "-std=gnu++11 -w -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/atomic-6.C'
    sources:
      binary: atomic-6.s
  group: GRPSERIAL
test_atomic-6_694:
  build:
    cflags: "-std=gnu++14 -w -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/atomic-6.C'
    sources:
      binary: atomic-6.s
  group: GRPSERIAL
test_barrier-1_13:
  build:
    cflags: "-std=gnu++98 -fopenmp -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/barrier-1.C'
    sources:
      binary: barrier-1.s
  group: GRPSERIAL
test_barrier-1_14:
  build:
    cflags: "-std=gnu++11 -fopenmp -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/barrier-1.C'
    sources:
      binary: barrier-1.s
  group: GRPSERIAL
test_barrier-1_15:
  build:
    cflags: "-std=gnu++14 -fopenmp -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/barrier-1.C'
    sources:
      binary: barrier-1.s
  group: GRPSERIAL
test_barrier-1_695:
  build:
    cflags: "-std=gnu++98 -fopenmp -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/barrier-1.C'
    sources:
      binary: barrier-1.s
  group: GRPSERIAL
test_barrier-1_696:
  build:
    cflags: "-std=gnu++11 -fopenmp -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/barrier-1.C'
    sources:
      binary: barrier-1.s
  group: GRPSERIAL
test_barrier-1_697:
  build:
    cflags: "-std=gnu++14 -fopenmp -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/barrier-1.C'
    sources:
      binary: barrier-1.s
  group: GRPSERIAL
test_barrier-2_16:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/barrier-2.C'
    sources:
      binary: barrier-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("compound statements")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected end of
          line")[^\n]*\n?)+'
test_barrier-2_17:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/barrier-2.C'
    sources:
      binary: barrier-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("compound statements")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected end of
          line")[^\n]*\n?)+'
test_barrier-2_18:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/barrier-2.C'
    sources:
      binary: barrier-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("compound statements")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected end of
          line")[^\n]*\n?)+'
test_barrier-2_698:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/barrier-2.C'
    sources:
      binary: barrier-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("compound statements")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected end of
          line")[^\n]*\n?)+'
test_barrier-2_699:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/barrier-2.C'
    sources:
      binary: barrier-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("compound statements")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected end of
          line")[^\n]*\n?)+'
test_barrier-2_700:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/barrier-2.C'
    sources:
      binary: barrier-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("compound statements")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected end of
          line")[^\n]*\n?)+'
test_block-0_19:
  build:
    cflags: "-std=gnu++98 -fopenmp -fdump-tree-omplower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-0.C'
    sources:
      binary: block-0.s
  group: GRPSERIAL
test_block-0_20:
  build:
    cflags: "-std=gnu++11 -fopenmp -fdump-tree-omplower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-0.C'
    sources:
      binary: block-0.s
  group: GRPSERIAL
test_block-0_21:
  build:
    cflags: "-std=gnu++14 -fopenmp -fdump-tree-omplower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-0.C'
    sources:
      binary: block-0.s
  group: GRPSERIAL
test_block-0_701:
  build:
    cflags: "-std=gnu++98 -fopenmp -fdump-tree-omplower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-0.C'
    sources:
      binary: block-0.s
  group: GRPSERIAL
test_block-0_702:
  build:
    cflags: "-std=gnu++11 -fopenmp -fdump-tree-omplower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-0.C'
    sources:
      binary: block-0.s
  group: GRPSERIAL
test_block-0_703:
  build:
    cflags: "-std=gnu++14 -fopenmp -fdump-tree-omplower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-0.C'
    sources:
      binary: block-0.s
  group: GRPSERIAL
test_block-10_25:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-10.C'
    sources:
      binary: block-10.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
test_block-10_26:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-10.C'
    sources:
      binary: block-10.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
test_block-10_27:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-10.C'
    sources:
      binary: block-10.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
test_block-10_707:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-10.C'
    sources:
      binary: block-10.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
test_block-10_708:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-10.C'
    sources:
      binary: block-10.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
test_block-10_709:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-10.C'
    sources:
      binary: block-10.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
test_block-11_28:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-11.C'
    sources:
      binary: block-11.s
  group: GRPSERIAL
test_block-11_29:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-11.C'
    sources:
      binary: block-11.s
  group: GRPSERIAL
test_block-11_30:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-11.C'
    sources:
      binary: block-11.s
  group: GRPSERIAL
test_block-11_710:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-11.C'
    sources:
      binary: block-11.s
  group: GRPSERIAL
test_block-11_711:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-11.C'
    sources:
      binary: block-11.s
  group: GRPSERIAL
test_block-11_712:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-11.C'
    sources:
      binary: block-11.s
  group: GRPSERIAL
test_block-1_22:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-1.C'
    sources:
      binary: block-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
test_block-1_23:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-1.C'
    sources:
      binary: block-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
test_block-1_24:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-1.C'
    sources:
      binary: block-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
test_block-1_704:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-1.C'
    sources:
      binary: block-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
test_block-1_705:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-1.C'
    sources:
      binary: block-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
test_block-1_706:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-1.C'
    sources:
      binary: block-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
test_block-2_31:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-2.C'
    sources:
      binary: block-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break")[^\n]*\n?)+'
test_block-2_32:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-2.C'
    sources:
      binary: block-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break")[^\n]*\n?)+'
test_block-2_33:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-2.C'
    sources:
      binary: block-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break")[^\n]*\n?)+'
test_block-2_713:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-2.C'
    sources:
      binary: block-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break")[^\n]*\n?)+'
test_block-2_714:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-2.C'
    sources:
      binary: block-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break")[^\n]*\n?)+'
test_block-2_715:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-2.C'
    sources:
      binary: block-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break")[^\n]*\n?)+'
test_block-3_34:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-3.C'
    sources:
      binary: block-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
test_block-3_35:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-3.C'
    sources:
      binary: block-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
test_block-3_36:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-3.C'
    sources:
      binary: block-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
test_block-3_716:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-3.C'
    sources:
      binary: block-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
test_block-3_717:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-3.C'
    sources:
      binary: block-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
test_block-3_718:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-3.C'
    sources:
      binary: block-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
test_block-4_37:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-4.C'
    sources:
      binary: block-4.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
test_block-4_38:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-4.C'
    sources:
      binary: block-4.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
test_block-4_39:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-4.C'
    sources:
      binary: block-4.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
test_block-4_719:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-4.C'
    sources:
      binary: block-4.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
test_block-4_720:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-4.C'
    sources:
      binary: block-4.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
test_block-4_721:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-4.C'
    sources:
      binary: block-4.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
test_block-5_40:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-5.C'
    sources:
      binary: block-5.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
test_block-5_41:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-5.C'
    sources:
      binary: block-5.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
test_block-5_42:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-5.C'
    sources:
      binary: block-5.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
test_block-5_722:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-5.C'
    sources:
      binary: block-5.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
test_block-5_723:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-5.C'
    sources:
      binary: block-5.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
test_block-5_724:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-5.C'
    sources:
      binary: block-5.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
test_block-6_43:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-6.C'
    sources:
      binary: block-6.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
test_block-6_44:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-6.C'
    sources:
      binary: block-6.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
test_block-6_45:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-6.C'
    sources:
      binary: block-6.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
test_block-6_725:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-6.C'
    sources:
      binary: block-6.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
test_block-6_726:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-6.C'
    sources:
      binary: block-6.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
test_block-6_727:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-6.C'
    sources:
      binary: block-6.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
test_block-7_46:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-7.C'
    sources:
      binary: block-7.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
test_block-7_47:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-7.C'
    sources:
      binary: block-7.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
test_block-7_48:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-7.C'
    sources:
      binary: block-7.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
test_block-7_728:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-7.C'
    sources:
      binary: block-7.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
test_block-7_729:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-7.C'
    sources:
      binary: block-7.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
test_block-7_730:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-7.C'
    sources:
      binary: block-7.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
test_block-8_49:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-8.C'
    sources:
      binary: block-8.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
test_block-8_50:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-8.C'
    sources:
      binary: block-8.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
test_block-8_51:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-8.C'
    sources:
      binary: block-8.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
test_block-8_731:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-8.C'
    sources:
      binary: block-8.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
test_block-8_732:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-8.C'
    sources:
      binary: block-8.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
test_block-8_733:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-8.C'
    sources:
      binary: block-8.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid exit")[^\n]*\n?)+'
test_block-9_52:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-9.C'
    sources:
      binary: block-9.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
test_block-9_53:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-9.C'
    sources:
      binary: block-9.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
test_block-9_54:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-9.C'
    sources:
      binary: block-9.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
test_block-9_734:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-9.C'
    sources:
      binary: block-9.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
test_block-9_735:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-9.C'
    sources:
      binary: block-9.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
test_block-9_736:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/block-9.C'
    sources:
      binary: block-9.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump|enters")[^\n]*\n?)+'
test_clause-1_55:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/clause-1.C'
    sources:
      binary: clause-1.s
  group: GRPSERIAL
  validate:
    match:
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("T::n")[^\n]*\n?)+'
test_clause-1_56:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/clause-1.C'
    sources:
      binary: clause-1.s
  group: GRPSERIAL
  validate:
    match:
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("T::n")[^\n]*\n?)+'
test_clause-1_57:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/clause-1.C'
    sources:
      binary: clause-1.s
  group: GRPSERIAL
  validate:
    match:
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("T::n")[^\n]*\n?)+'
test_clause-1_737:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/clause-1.C'
    sources:
      binary: clause-1.s
  group: GRPSERIAL
  validate:
    match:
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("T::n")[^\n]*\n?)+'
test_clause-1_738:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/clause-1.C'
    sources:
      binary: clause-1.s
  group: GRPSERIAL
  validate:
    match:
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("T::n")[^\n]*\n?)+'
test_clause-1_739:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/clause-1.C'
    sources:
      binary: clause-1.s
  group: GRPSERIAL
  validate:
    match:
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("T::n")[^\n]*\n?)+'
test_clause-2_58:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/clause-2.C'
    sources:
      binary: clause-2.s
  group: GRPSERIAL
  validate:
    match:
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("context")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("context")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("context")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("context")[^\n]*\n?)+'
test_clause-2_59:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/clause-2.C'
    sources:
      binary: clause-2.s
  group: GRPSERIAL
  validate:
    match:
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("context")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("context")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("context")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("context")[^\n]*\n?)+'
test_clause-2_60:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/clause-2.C'
    sources:
      binary: clause-2.s
  group: GRPSERIAL
  validate:
    match:
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("context")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("context")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("context")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("context")[^\n]*\n?)+'
test_clause-2_740:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/clause-2.C'
    sources:
      binary: clause-2.s
  group: GRPSERIAL
  validate:
    match:
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("context")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("context")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("context")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("context")[^\n]*\n?)+'
test_clause-2_741:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/clause-2.C'
    sources:
      binary: clause-2.s
  group: GRPSERIAL
  validate:
    match:
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("context")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("context")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("context")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("context")[^\n]*\n?)+'
test_clause-2_742:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/clause-2.C'
    sources:
      binary: clause-2.s
  group: GRPSERIAL
  validate:
    match:
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("context")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("context")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("context")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("context")[^\n]*\n?)+'
test_clause-3_61:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/clause-3.C'
    sources:
      binary: clause-3.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction not found for")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction not found for")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction not found for")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction not found for")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must be \''threadprivate\''")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must be \''threadprivate\''")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unspecified bounds")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unspecified bounds")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unspecified bounds")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate\''")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate\''")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate\''")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadpriv")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate\''")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate\''")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'
test_clause-3_62:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/clause-3.C'
    sources:
      binary: clause-3.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction not found for")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction not found for")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction not found for")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction not found for")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must be \''threadprivate\''")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must be \''threadprivate\''")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unspecified bounds")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unspecified bounds")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unspecified bounds")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate\''")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate\''")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate\''")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadpriv")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate\''")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate\''")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'
test_clause-3_63:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/clause-3.C'
    sources:
      binary: clause-3.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction not found for")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction not found for")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction not found for")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction not found for")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must be \''threadprivate\''")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must be \''threadprivate\''")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unspecified bounds")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unspecified bounds")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unspecified bounds")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate\''")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate\''")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate\''")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadpriv")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate\''")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate\''")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'
test_clause-3_743:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/clause-3.C'
    sources:
      binary: clause-3.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction not found for")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction not found for")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction not found for")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction not found for")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must be \''threadprivate\''")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must be \''threadprivate\''")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unspecified bounds")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unspecified bounds")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unspecified bounds")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate\''")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate\''")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate\''")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadpriv")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate\''")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate\''")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'
test_clause-3_744:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/clause-3.C'
    sources:
      binary: clause-3.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction not found for")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction not found for")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction not found for")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction not found for")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must be \''threadprivate\''")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must be \''threadprivate\''")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unspecified bounds")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unspecified bounds")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unspecified bounds")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate\''")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate\''")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate\''")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadpriv")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate\''")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate\''")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'
test_clause-3_745:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/clause-3.C'
    sources:
      binary: clause-3.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more than once")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction not found for")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction not found for")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction not found for")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction not found for")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must be \''threadprivate\''")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must be \''threadprivate\''")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unspecified bounds")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unspecified bounds")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unspecified bounds")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate\''")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate\''")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate\''")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadpriv")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate\''")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate\''")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'
test_clause-4_64:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/clause-4.C'
    sources:
      binary: clause-4.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause before")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause before")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause before")[^\n]*\n?)+'
test_clause-4_65:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/clause-4.C'
    sources:
      binary: clause-4.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause before")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause before")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause before")[^\n]*\n?)+'
test_clause-4_66:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/clause-4.C'
    sources:
      binary: clause-4.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause before")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause before")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause before")[^\n]*\n?)+'
test_clause-4_746:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/clause-4.C'
    sources:
      binary: clause-4.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause before")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause before")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause before")[^\n]*\n?)+'
test_clause-4_747:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/clause-4.C'
    sources:
      binary: clause-4.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause before")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause before")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause before")[^\n]*\n?)+'
test_clause-4_748:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/clause-4.C'
    sources:
      binary: clause-4.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause before")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause before")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause before")[^\n]*\n?)+'
test_copyin-1_67:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/copyin-1.C'
    sources:
      binary: copyin-1.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("threadprivate")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("threadprivate")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("threadprivate")[^\n]*\n?)+'
test_copyin-1_68:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/copyin-1.C'
    sources:
      binary: copyin-1.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("threadprivate")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("threadprivate")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("threadprivate")[^\n]*\n?)+'
test_copyin-1_69:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/copyin-1.C'
    sources:
      binary: copyin-1.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("threadprivate")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("threadprivate")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("threadprivate")[^\n]*\n?)+'
test_copyin-1_749:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/copyin-1.C'
    sources:
      binary: copyin-1.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("threadprivate")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("threadprivate")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("threadprivate")[^\n]*\n?)+'
test_copyin-1_750:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/copyin-1.C'
    sources:
      binary: copyin-1.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("threadprivate")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("threadprivate")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("threadprivate")[^\n]*\n?)+'
test_copyin-1_751:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/copyin-1.C'
    sources:
      binary: copyin-1.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("threadprivate")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("threadprivate")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("threadprivate")[^\n]*\n?)+'
test_critical-1_70:
  build:
    cflags: "-std=gnu++98 -fopenmp -fdump-tree-omplower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/critical-1.C'
    sources:
      binary: critical-1.s
  group: GRPSERIAL
test_critical-1_71:
  build:
    cflags: "-std=gnu++11 -fopenmp -fdump-tree-omplower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/critical-1.C'
    sources:
      binary: critical-1.s
  group: GRPSERIAL
test_critical-1_72:
  build:
    cflags: "-std=gnu++14 -fopenmp -fdump-tree-omplower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/critical-1.C'
    sources:
      binary: critical-1.s
  group: GRPSERIAL
test_critical-1_752:
  build:
    cflags: "-std=gnu++98 -fopenmp -fdump-tree-omplower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/critical-1.C'
    sources:
      binary: critical-1.s
  group: GRPSERIAL
test_critical-1_753:
  build:
    cflags: "-std=gnu++11 -fopenmp -fdump-tree-omplower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/critical-1.C'
    sources:
      binary: critical-1.s
  group: GRPSERIAL
test_critical-1_754:
  build:
    cflags: "-std=gnu++14 -fopenmp -fdump-tree-omplower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/critical-1.C'
    sources:
      binary: critical-1.s
  group: GRPSERIAL
test_critical-2_73:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/critical-2.C'
    sources:
      binary: critical-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .\\\\).")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .\\\\).")[^\n]*\n?)+'
test_critical-2_74:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/critical-2.C'
    sources:
      binary: critical-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .\\\\).")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .\\\\).")[^\n]*\n?)+'
test_critical-2_75:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/critical-2.C'
    sources:
      binary: critical-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .\\\\).")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .\\\\).")[^\n]*\n?)+'
test_critical-2_755:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/critical-2.C'
    sources:
      binary: critical-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .\\\\).")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .\\\\).")[^\n]*\n?)+'
test_critical-2_756:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/critical-2.C'
    sources:
      binary: critical-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .\\\\).")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .\\\\).")[^\n]*\n?)+'
test_critical-2_757:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/critical-2.C'
    sources:
      binary: critical-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .\\\\).")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .\\\\).")[^\n]*\n?)+'
test_declare-simd-1_758:
  build:
    cflags: "-std=gnu++98 -fopenmp -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-1.C'
    sources:
      binary: declare-simd-1.s
  group: GRPSERIAL
test_declare-simd-1_759:
  build:
    cflags: "-std=gnu++11 -fopenmp -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-1.C'
    sources:
      binary: declare-simd-1.s
  group: GRPSERIAL
test_declare-simd-1_76:
  build:
    cflags: "-std=gnu++98 -fopenmp -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-1.C'
    sources:
      binary: declare-simd-1.s
  group: GRPSERIAL
test_declare-simd-1_760:
  build:
    cflags: "-std=gnu++14 -fopenmp -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-1.C'
    sources:
      binary: declare-simd-1.s
  group: GRPSERIAL
test_declare-simd-1_77:
  build:
    cflags: "-std=gnu++11 -fopenmp -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-1.C'
    sources:
      binary: declare-simd-1.s
  group: GRPSERIAL
test_declare-simd-1_78:
  build:
    cflags: "-std=gnu++14 -fopenmp -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-1.C'
    sources:
      binary: declare-simd-1.s
  group: GRPSERIAL
test_declare-simd-2_761:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-2.C'
    sources:
      binary: declare-simd-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected unqualified-id
          before")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause is incompatible
          with")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by a single function declaration or definition")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has no member")[^\n]*\n?)+'
test_declare-simd-2_762:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-2.C'
    sources:
      binary: declare-simd-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected unqualified-id
          before")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause is incompatible
          with")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by a single function declaration or definition")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has no member")[^\n]*\n?)+'
test_declare-simd-2_763:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-2.C'
    sources:
      binary: declare-simd-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected unqualified-id
          before")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause is incompatible
          with")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by a single function declaration or definition")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has no member")[^\n]*\n?)+'
test_declare-simd-2_79:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-2.C'
    sources:
      binary: declare-simd-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected unqualified-id
          before")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause is incompatible
          with")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by a single function declaration or definition")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has no member")[^\n]*\n?)+'
test_declare-simd-2_80:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-2.C'
    sources:
      binary: declare-simd-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected unqualified-id
          before")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause is incompatible
          with")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by a single function declaration or definition")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has no member")[^\n]*\n?)+'
test_declare-simd-2_81:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-2.C'
    sources:
      binary: declare-simd-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected unqualified-id
          before")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by function declaration or definition")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause is incompatible
          with")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not immediately
          followed by a single function declaration or definition")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has no member")[^\n]*\n?)+'
test_declare-simd-3_764:
  build:
    cflags: "-std=gnu++98 -fopenmp -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-3.C'
    sources:
      binary: declare-simd-3.s
  group: GRPSERIAL
test_declare-simd-3_765:
  build:
    cflags: "-std=gnu++11 -fopenmp -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-3.C'
    sources:
      binary: declare-simd-3.s
  group: GRPSERIAL
test_declare-simd-3_766:
  build:
    cflags: "-std=gnu++14 -fopenmp -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-3.C'
    sources:
      binary: declare-simd-3.s
  group: GRPSERIAL
test_declare-simd-3_82:
  build:
    cflags: "-std=gnu++98 -fopenmp -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-3.C'
    sources:
      binary: declare-simd-3.s
  group: GRPSERIAL
test_declare-simd-3_83:
  build:
    cflags: "-std=gnu++11 -fopenmp -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-3.C'
    sources:
      binary: declare-simd-3.s
  group: GRPSERIAL
test_declare-simd-3_84:
  build:
    cflags: "-std=gnu++14 -fopenmp -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-3.C'
    sources:
      binary: declare-simd-3.s
  group: GRPSERIAL
test_declare-simd-4_767:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-4.C'
    sources:
      binary: declare-simd-4.s
  group: GRPSERIAL
test_declare-simd-4_768:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-4.C'
    sources:
      binary: declare-simd-4.s
  group: GRPSERIAL
test_declare-simd-4_769:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-4.C'
    sources:
      binary: declare-simd-4.s
  group: GRPSERIAL
test_declare-simd-4_85:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-4.C'
    sources:
      binary: declare-simd-4.s
  group: GRPSERIAL
test_declare-simd-4_86:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-4.C'
    sources:
      binary: declare-simd-4.s
  group: GRPSERIAL
test_declare-simd-4_87:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-4.C'
    sources:
      binary: declare-simd-4.s
  group: GRPSERIAL
test_declare-simd-5_770:
  build:
    cflags: "-std=gnu++98 -fopenmp-simd\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-5.C'
    sources:
      binary: declare-simd-5.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear. clause
          step is a parameter .b. not specified in .uniform. clause")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear. clause
          step is a parameter .b. not specified in .uniform. clause")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("linear step expression
          must be integral")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of parameter
          outside function body before .\\\\). token")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of parameter
          outside function body before .\\\\+. token")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of parameter
          outside function body before .\\\\). token")[^\n]*\n?)+'
test_declare-simd-5_771:
  build:
    cflags: "-std=gnu++11 -fopenmp-simd\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-5.C'
    sources:
      binary: declare-simd-5.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear. clause
          step is a parameter .b. not specified in .uniform. clause")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear. clause
          step is a parameter .b. not specified in .uniform. clause")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("linear step expression
          must be integral")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of parameter
          outside function body before .\\\\). token")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of parameter
          outside function body before .\\\\+. token")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of parameter
          outside function body before .\\\\). token")[^\n]*\n?)+'
test_declare-simd-5_772:
  build:
    cflags: "-std=gnu++14 -fopenmp-simd\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-5.C'
    sources:
      binary: declare-simd-5.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear. clause
          step is a parameter .b. not specified in .uniform. clause")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear. clause
          step is a parameter .b. not specified in .uniform. clause")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("linear step expression
          must be integral")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of parameter
          outside function body before .\\\\). token")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of parameter
          outside function body before .\\\\+. token")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of parameter
          outside function body before .\\\\). token")[^\n]*\n?)+'
test_declare-simd-5_88:
  build:
    cflags: "-std=gnu++98 -fopenmp-simd\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-5.C'
    sources:
      binary: declare-simd-5.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear. clause
          step is a parameter .b. not specified in .uniform. clause")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear. clause
          step is a parameter .b. not specified in .uniform. clause")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("linear step expression
          must be integral")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of parameter
          outside function body before .\\\\). token")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of parameter
          outside function body before .\\\\+. token")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of parameter
          outside function body before .\\\\). token")[^\n]*\n?)+'
test_declare-simd-5_89:
  build:
    cflags: "-std=gnu++11 -fopenmp-simd\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-5.C'
    sources:
      binary: declare-simd-5.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear. clause
          step is a parameter .b. not specified in .uniform. clause")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear. clause
          step is a parameter .b. not specified in .uniform. clause")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("linear step expression
          must be integral")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of parameter
          outside function body before .\\\\). token")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of parameter
          outside function body before .\\\\+. token")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of parameter
          outside function body before .\\\\). token")[^\n]*\n?)+'
test_declare-simd-5_90:
  build:
    cflags: "-std=gnu++14 -fopenmp-simd\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-5.C'
    sources:
      binary: declare-simd-5.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear. clause
          step is a parameter .b. not specified in .uniform. clause")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear. clause
          step is a parameter .b. not specified in .uniform. clause")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("linear step expression
          must be integral")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of parameter
          outside function body before .\\\\). token")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of parameter
          outside function body before .\\\\+. token")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of parameter
          outside function body before .\\\\). token")[^\n]*\n?)+'
test_declare-simd-6_773:
  build:
    cflags: "-std=gnu++98 -fopenmp-simd\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-6.C'
    sources:
      binary: declare-simd-6.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier applied
          to non-reference variable")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier applied
          to non-reference variable")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("applied to non-integral
          non-pointer variable")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("applied to non-integral
          non-pointer variable")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("applied to non-integral
          non-pointer variable")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("applied to non-integral
          non-pointer variable")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier applied
          to non-reference variable")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier applied
          to non-reference variable")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("applied to non-integral
          non-pointer variable")[^\n]*\n?)+'
test_declare-simd-6_774:
  build:
    cflags: "-std=gnu++11 -fopenmp-simd\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-6.C'
    sources:
      binary: declare-simd-6.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier applied
          to non-reference variable")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier applied
          to non-reference variable")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("applied to non-integral
          non-pointer variable")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("applied to non-integral
          non-pointer variable")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("applied to non-integral
          non-pointer variable")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("applied to non-integral
          non-pointer variable")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier applied
          to non-reference variable")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier applied
          to non-reference variable")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("applied to non-integral
          non-pointer variable")[^\n]*\n?)+'
test_declare-simd-6_775:
  build:
    cflags: "-std=gnu++14 -fopenmp-simd\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-6.C'
    sources:
      binary: declare-simd-6.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier applied
          to non-reference variable")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier applied
          to non-reference variable")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("applied to non-integral
          non-pointer variable")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("applied to non-integral
          non-pointer variable")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("applied to non-integral
          non-pointer variable")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("applied to non-integral
          non-pointer variable")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier applied
          to non-reference variable")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier applied
          to non-reference variable")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("applied to non-integral
          non-pointer variable")[^\n]*\n?)+'
test_declare-simd-6_91:
  build:
    cflags: "-std=gnu++98 -fopenmp-simd\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-6.C'
    sources:
      binary: declare-simd-6.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier applied
          to non-reference variable")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier applied
          to non-reference variable")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("applied to non-integral
          non-pointer variable")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("applied to non-integral
          non-pointer variable")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("applied to non-integral
          non-pointer variable")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("applied to non-integral
          non-pointer variable")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier applied
          to non-reference variable")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier applied
          to non-reference variable")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("applied to non-integral
          non-pointer variable")[^\n]*\n?)+'
test_declare-simd-6_92:
  build:
    cflags: "-std=gnu++11 -fopenmp-simd\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-6.C'
    sources:
      binary: declare-simd-6.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier applied
          to non-reference variable")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier applied
          to non-reference variable")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("applied to non-integral
          non-pointer variable")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("applied to non-integral
          non-pointer variable")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("applied to non-integral
          non-pointer variable")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("applied to non-integral
          non-pointer variable")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier applied
          to non-reference variable")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier applied
          to non-reference variable")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("applied to non-integral
          non-pointer variable")[^\n]*\n?)+'
test_declare-simd-6_93:
  build:
    cflags: "-std=gnu++14 -fopenmp-simd\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-6.C'
    sources:
      binary: declare-simd-6.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier applied
          to non-reference variable")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier applied
          to non-reference variable")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("applied to non-integral
          non-pointer variable")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("applied to non-integral
          non-pointer variable")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("applied to non-integral
          non-pointer variable")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("applied to non-integral
          non-pointer variable")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier applied
          to non-reference variable")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier applied
          to non-reference variable")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("applied to non-integral
          non-pointer variable")[^\n]*\n?)+'
test_declare-simd-7_776:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-7.C'
    sources:
      binary: declare-simd-7.s
  group: GRPSERIAL
test_declare-simd-7_777:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-7.C'
    sources:
      binary: declare-simd-7.s
  group: GRPSERIAL
test_declare-simd-7_778:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-7.C'
    sources:
      binary: declare-simd-7.s
  group: GRPSERIAL
test_declare-simd-7_94:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-7.C'
    sources:
      binary: declare-simd-7.s
  group: GRPSERIAL
test_declare-simd-7_95:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-7.C'
    sources:
      binary: declare-simd-7.s
  group: GRPSERIAL
test_declare-simd-7_96:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-simd-7.C'
    sources:
      binary: declare-simd-7.s
  group: GRPSERIAL
test_declare-target-1_779:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-target-1.C'
    sources:
      binary: declare-target-1.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("overloaded function
          name .f4. in clause .to.")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("template .f5<int>.
          in clause .to.")[^\n]*\n?)+'
test_declare-target-1_780:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-target-1.C'
    sources:
      binary: declare-target-1.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("overloaded function
          name .f4. in clause .to.")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("template .f5<int>.
          in clause .to.")[^\n]*\n?)+'
test_declare-target-1_781:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-target-1.C'
    sources:
      binary: declare-target-1.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("overloaded function
          name .f4. in clause .to.")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("template .f5<int>.
          in clause .to.")[^\n]*\n?)+'
test_declare-target-1_97:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-target-1.C'
    sources:
      binary: declare-target-1.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("overloaded function
          name .f4. in clause .to.")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("template .f5<int>.
          in clause .to.")[^\n]*\n?)+'
test_declare-target-1_98:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-target-1.C'
    sources:
      binary: declare-target-1.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("overloaded function
          name .f4. in clause .to.")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("template .f5<int>.
          in clause .to.")[^\n]*\n?)+'
test_declare-target-1_99:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/declare-target-1.C'
    sources:
      binary: declare-target-1.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("overloaded function
          name .f4. in clause .to.")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("template .f5<int>.
          in clause .to.")[^\n]*\n?)+'
test_depend-1_100:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/depend-1.C'
    sources:
      binary: depend-1.s
  group: GRPSERIAL
  validate:
    match:
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer or array type")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array type length
          expression must be specified")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for pointer type
          length expression must be specified")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
test_depend-1_101:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/depend-1.C'
    sources:
      binary: depend-1.s
  group: GRPSERIAL
  validate:
    match:
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer or array type")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array type length
          expression must be specified")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for pointer type
          length expression must be specified")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
test_depend-1_102:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/depend-1.C'
    sources:
      binary: depend-1.s
  group: GRPSERIAL
  validate:
    match:
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer or array type")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array type length
          expression must be specified")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for pointer type
          length expression must be specified")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
test_depend-1_782:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/depend-1.C'
    sources:
      binary: depend-1.s
  group: GRPSERIAL
  validate:
    match:
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer or array type")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array type length
          expression must be specified")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for pointer type
          length expression must be specified")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
test_depend-1_783:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/depend-1.C'
    sources:
      binary: depend-1.s
  group: GRPSERIAL
  validate:
    match:
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer or array type")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array type length
          expression must be specified")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for pointer type
          length expression must be specified")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
test_depend-1_784:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/depend-1.C'
    sources:
      binary: depend-1.s
  group: GRPSERIAL
  validate:
    match:
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer or array type")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array type length
          expression must be specified")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for pointer type
          length expression must be specified")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
test_depend-2_103:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/depend-2.C'
    sources:
      binary: depend-2.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer or array type")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array type length
          expression must be specified")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative low
          bound in array section")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative length
          in array section")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for pointer type
          length expression must be specified")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative low
          bound in array section")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative length
          in array section")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
test_depend-2_104:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/depend-2.C'
    sources:
      binary: depend-2.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer or array type")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array type length
          expression must be specified")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative low
          bound in array section")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative length
          in array section")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for pointer type
          length expression must be specified")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative low
          bound in array section")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative length
          in array section")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
test_depend-2_105:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/depend-2.C'
    sources:
      binary: depend-2.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer or array type")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array type length
          expression must be specified")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative low
          bound in array section")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative length
          in array section")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for pointer type
          length expression must be specified")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative low
          bound in array section")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative length
          in array section")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
test_depend-2_785:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/depend-2.C'
    sources:
      binary: depend-2.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer or array type")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array type length
          expression must be specified")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative low
          bound in array section")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative length
          in array section")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for pointer type
          length expression must be specified")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative low
          bound in array section")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative length
          in array section")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
test_depend-2_786:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/depend-2.C'
    sources:
      binary: depend-2.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer or array type")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array type length
          expression must be specified")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative low
          bound in array section")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative length
          in array section")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for pointer type
          length expression must be specified")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative low
          bound in array section")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative length
          in array section")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
test_depend-2_787:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/depend-2.C'
    sources:
      binary: depend-2.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          of array section does not have integral type")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not have
          pointer or array type")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array type length
          expression must be specified")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative low
          bound in array section")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative length
          in array section")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for pointer type
          length expression must be specified")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative low
          bound in array section")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative length
          in array section")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("low bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("high bound \\[^\\n\\r]*
          above array section size")[^\n]*\n?)+'
test_flush-1_106:
  build:
    cflags: "-std=gnu++98 -fopenmp -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/flush-1.C'
    sources:
      binary: flush-1.s
  group: GRPSERIAL
test_flush-1_107:
  build:
    cflags: "-std=gnu++11 -fopenmp -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/flush-1.C'
    sources:
      binary: flush-1.s
  group: GRPSERIAL
test_flush-1_108:
  build:
    cflags: "-std=gnu++14 -fopenmp -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/flush-1.C'
    sources:
      binary: flush-1.s
  group: GRPSERIAL
test_flush-1_788:
  build:
    cflags: "-std=gnu++98 -fopenmp -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/flush-1.C'
    sources:
      binary: flush-1.s
  group: GRPSERIAL
test_flush-1_789:
  build:
    cflags: "-std=gnu++11 -fopenmp -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/flush-1.C'
    sources:
      binary: flush-1.s
  group: GRPSERIAL
test_flush-1_790:
  build:
    cflags: "-std=gnu++14 -fopenmp -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/flush-1.C'
    sources:
      binary: flush-1.s
  group: GRPSERIAL
test_flush-2_109:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/flush-2.C'
    sources:
      binary: flush-2.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared|expected")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared|expected")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared")[^\n]*\n?)+'
test_flush-2_110:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/flush-2.C'
    sources:
      binary: flush-2.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared|expected")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared|expected")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared")[^\n]*\n?)+'
test_flush-2_111:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/flush-2.C'
    sources:
      binary: flush-2.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared|expected")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared|expected")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared")[^\n]*\n?)+'
test_flush-2_791:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/flush-2.C'
    sources:
      binary: flush-2.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared|expected")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared|expected")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared")[^\n]*\n?)+'
test_flush-2_792:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/flush-2.C'
    sources:
      binary: flush-2.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared|expected")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared|expected")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared")[^\n]*\n?)+'
test_flush-2_793:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/flush-2.C'
    sources:
      binary: flush-2.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared|expected")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared|expected")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared")[^\n]*\n?)+'
test_for-10_115:
  build:
    cflags: "-std=gnu++98 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-10.C'
    sources:
      binary: for-10.s
  group: GRPSERIAL
test_for-10_116:
  build:
    cflags: "-std=gnu++11 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-10.C'
    sources:
      binary: for-10.s
  group: GRPSERIAL
test_for-10_117:
  build:
    cflags: "-std=gnu++14 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-10.C'
    sources:
      binary: for-10.s
  group: GRPSERIAL
test_for-10_797:
  build:
    cflags: "-std=gnu++98 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-10.C'
    sources:
      binary: for-10.s
  group: GRPSERIAL
test_for-10_798:
  build:
    cflags: "-std=gnu++11 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-10.C'
    sources:
      binary: for-10.s
  group: GRPSERIAL
test_for-10_799:
  build:
    cflags: "-std=gnu++14 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-10.C'
    sources:
      binary: for-10.s
  group: GRPSERIAL
test_for-11_118:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-11.C'
    sources:
      binary: for-11.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_for-11_119:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-11.C'
    sources:
      binary: for-11.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_for-11_120:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-11.C'
    sources:
      binary: for-11.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_for-11_800:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-11.C'
    sources:
      binary: for-11.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_for-11_801:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-11.C'
    sources:
      binary: for-11.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_for-11_802:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-11.C'
    sources:
      binary: for-11.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_for-12_121:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-12.C'
    sources:
      binary: for-12.s
  group: GRPSERIAL
test_for-12_122:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-12.C'
    sources:
      binary: for-12.s
  group: GRPSERIAL
test_for-12_123:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-12.C'
    sources:
      binary: for-12.s
  group: GRPSERIAL
test_for-12_803:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-12.C'
    sources:
      binary: for-12.s
  group: GRPSERIAL
test_for-12_804:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-12.C'
    sources:
      binary: for-12.s
  group: GRPSERIAL
test_for-12_805:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-12.C'
    sources:
      binary: for-12.s
  group: GRPSERIAL
test_for-13_124:
  build:
    cflags: "-std=gnu++98 -fopenmp -fdump-tree-lower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-13.C'
    sources:
      binary: for-13.s
  group: GRPSERIAL
test_for-13_125:
  build:
    cflags: "-std=gnu++11 -fopenmp -fdump-tree-lower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-13.C'
    sources:
      binary: for-13.s
  group: GRPSERIAL
test_for-13_126:
  build:
    cflags: "-std=gnu++14 -fopenmp -fdump-tree-lower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-13.C'
    sources:
      binary: for-13.s
  group: GRPSERIAL
test_for-13_806:
  build:
    cflags: "-std=gnu++98 -fopenmp -fdump-tree-lower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-13.C'
    sources:
      binary: for-13.s
  group: GRPSERIAL
test_for-13_807:
  build:
    cflags: "-std=gnu++11 -fopenmp -fdump-tree-lower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-13.C'
    sources:
      binary: for-13.s
  group: GRPSERIAL
test_for-13_808:
  build:
    cflags: "-std=gnu++14 -fopenmp -fdump-tree-lower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-13.C'
    sources:
      binary: for-13.s
  group: GRPSERIAL
test_for-14_127:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-14.C'
    sources:
      binary: for-14.s
  group: GRPSERIAL
test_for-14_128:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-14.C'
    sources:
      binary: for-14.s
  group: GRPSERIAL
test_for-14_129:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-14.C'
    sources:
      binary: for-14.s
  group: GRPSERIAL
test_for-14_809:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-14.C'
    sources:
      binary: for-14.s
  group: GRPSERIAL
test_for-14_810:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-14.C'
    sources:
      binary: for-14.s
  group: GRPSERIAL
test_for-14_811:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-14.C'
    sources:
      binary: for-14.s
  group: GRPSERIAL
test_for-15_130:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-15.C'
    sources:
      binary: for-15.s
  group: GRPSERIAL
test_for-15_131:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-15.C'
    sources:
      binary: for-15.s
  group: GRPSERIAL
test_for-15_132:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-15.C'
    sources:
      binary: for-15.s
  group: GRPSERIAL
test_for-15_812:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-15.C'
    sources:
      binary: for-15.s
  group: GRPSERIAL
test_for-15_813:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-15.C'
    sources:
      binary: for-15.s
  group: GRPSERIAL
test_for-15_814:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-15.C'
    sources:
      binary: for-15.s
  group: GRPSERIAL
test_for-16_133:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-16.C'
    sources:
      binary: for-16.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing increment
          expression")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing controlling
          predicate")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing increment
          expression")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing controlling
          predicate")[^\n]*\n?)+'
test_for-16_134:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-16.C'
    sources:
      binary: for-16.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing increment
          expression")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing controlling
          predicate")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing increment
          expression")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing controlling
          predicate")[^\n]*\n?)+'
test_for-16_135:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-16.C'
    sources:
      binary: for-16.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing increment
          expression")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing controlling
          predicate")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing increment
          expression")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing controlling
          predicate")[^\n]*\n?)+'
test_for-16_815:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-16.C'
    sources:
      binary: for-16.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing increment
          expression")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing controlling
          predicate")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing increment
          expression")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing controlling
          predicate")[^\n]*\n?)+'
test_for-16_816:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-16.C'
    sources:
      binary: for-16.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing increment
          expression")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing controlling
          predicate")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing increment
          expression")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing controlling
          predicate")[^\n]*\n?)+'
test_for-16_817:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-16.C'
    sources:
      binary: for-16.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing increment
          expression")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing controlling
          predicate")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing increment
          expression")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing controlling
          predicate")[^\n]*\n?)+'
test_for-17_136:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-17.C'
    sources:
      binary: for-17.s
  group: GRPSERIAL
test_for-17_137:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-17.C'
    sources:
      binary: for-17.s
  group: GRPSERIAL
test_for-17_138:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-17.C'
    sources:
      binary: for-17.s
  group: GRPSERIAL
test_for-17_818:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-17.C'
    sources:
      binary: for-17.s
  group: GRPSERIAL
test_for-17_819:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-17.C'
    sources:
      binary: for-17.s
  group: GRPSERIAL
test_for-17_820:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-17.C'
    sources:
      binary: for-17.s
  group: GRPSERIAL
test_for-18_139:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-18.C'
    sources:
      binary: for-18.s
  group: GRPSERIAL
test_for-18_140:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-18.C'
    sources:
      binary: for-18.s
  group: GRPSERIAL
test_for-18_141:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-18.C'
    sources:
      binary: for-18.s
  group: GRPSERIAL
test_for-18_821:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-18.C'
    sources:
      binary: for-18.s
  group: GRPSERIAL
test_for-18_822:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-18.C'
    sources:
      binary: for-18.s
  group: GRPSERIAL
test_for-18_823:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-18.C'
    sources:
      binary: for-18.s
  group: GRPSERIAL
test_for-19_142:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-19.C'
    sources:
      binary: for-19.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("forbids incrementing
          a pointer of type")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("forbids incrementing
          a pointer of type")[^\n]*\n?)+'
test_for-19_143:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-19.C'
    sources:
      binary: for-19.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("forbids incrementing
          a pointer of type")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("forbids incrementing
          a pointer of type")[^\n]*\n?)+'
test_for-19_144:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-19.C'
    sources:
      binary: for-19.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("forbids incrementing
          a pointer of type")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("forbids incrementing
          a pointer of type")[^\n]*\n?)+'
test_for-19_824:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-19.C'
    sources:
      binary: for-19.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("forbids incrementing
          a pointer of type")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("forbids incrementing
          a pointer of type")[^\n]*\n?)+'
test_for-19_825:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-19.C'
    sources:
      binary: for-19.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("forbids incrementing
          a pointer of type")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("forbids incrementing
          a pointer of type")[^\n]*\n?)+'
test_for-19_826:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-19.C'
    sources:
      binary: for-19.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("forbids incrementing
          a pointer of type")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("forbids incrementing
          a pointer of type")[^\n]*\n?)+'
test_for-1_112:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-1.C'
    sources:
      binary: for-1.s
  group: GRPSERIAL
  validate:
    match:
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for statement
          expected")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing controlling
          predicate")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression")[^\n]*\n?)+'
test_for-1_113:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-1.C'
    sources:
      binary: for-1.s
  group: GRPSERIAL
  validate:
    match:
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for statement
          expected")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing controlling
          predicate")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression")[^\n]*\n?)+'
test_for-1_114:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-1.C'
    sources:
      binary: for-1.s
  group: GRPSERIAL
  validate:
    match:
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for statement
          expected")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing controlling
          predicate")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression")[^\n]*\n?)+'
test_for-1_794:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-1.C'
    sources:
      binary: for-1.s
  group: GRPSERIAL
  validate:
    match:
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for statement
          expected")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing controlling
          predicate")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression")[^\n]*\n?)+'
test_for-1_795:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-1.C'
    sources:
      binary: for-1.s
  group: GRPSERIAL
  validate:
    match:
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for statement
          expected")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing controlling
          predicate")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression")[^\n]*\n?)+'
test_for-1_796:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-1.C'
    sources:
      binary: for-1.s
  group: GRPSERIAL
  validate:
    match:
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for statement
          expected")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing controlling
          predicate")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression")[^\n]*\n?)+'
test_for-20_148:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-20.C'
    sources:
      binary: for-20.s
  group: GRPSERIAL
test_for-20_149:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-20.C'
    sources:
      binary: for-20.s
  group: GRPSERIAL
test_for-20_150:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-20.C'
    sources:
      binary: for-20.s
  group: GRPSERIAL
test_for-20_830:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-20.C'
    sources:
      binary: for-20.s
  group: GRPSERIAL
test_for-20_831:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-20.C'
    sources:
      binary: for-20.s
  group: GRPSERIAL
test_for-20_832:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-20.C'
    sources:
      binary: for-20.s
  group: GRPSERIAL
test_for-2_145:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-2.C'
    sources:
      binary: for-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many")[^\n]*\n?)+'
test_for-2_146:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-2.C'
    sources:
      binary: for-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many")[^\n]*\n?)+'
test_for-2_147:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-2.C'
    sources:
      binary: for-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many")[^\n]*\n?)+'
test_for-2_827:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-2.C'
    sources:
      binary: for-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many")[^\n]*\n?)+'
test_for-2_828:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-2.C'
    sources:
      binary: for-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many")[^\n]*\n?)+'
test_for-2_829:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-2.C'
    sources:
      binary: for-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many")[^\n]*\n?)+'
test_for-3_151:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-3.C'
    sources:
      binary: for-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid schedule
          kind")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid schedule
          kind")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("integral")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not take")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_for-3_152:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-3.C'
    sources:
      binary: for-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid schedule
          kind")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid schedule
          kind")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("integral")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not take")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_for-3_153:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-3.C'
    sources:
      binary: for-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid schedule
          kind")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid schedule
          kind")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("integral")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not take")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_for-3_833:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-3.C'
    sources:
      binary: for-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid schedule
          kind")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid schedule
          kind")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("integral")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not take")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_for-3_834:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-3.C'
    sources:
      binary: for-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid schedule
          kind")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid schedule
          kind")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("integral")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not take")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_for-3_835:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-3.C'
    sources:
      binary: for-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid schedule
          kind")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid schedule
          kind")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("integral")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not take")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_for-4_154:
  build:
    cflags: "-std=gnu++98 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-4.C'
    sources:
      binary: for-4.s
  group: GRPSERIAL
test_for-4_155:
  build:
    cflags: "-std=gnu++11 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-4.C'
    sources:
      binary: for-4.s
  group: GRPSERIAL
test_for-4_156:
  build:
    cflags: "-std=gnu++14 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-4.C'
    sources:
      binary: for-4.s
  group: GRPSERIAL
test_for-4_836:
  build:
    cflags: "-std=gnu++98 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-4.C'
    sources:
      binary: for-4.s
  group: GRPSERIAL
test_for-4_837:
  build:
    cflags: "-std=gnu++11 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-4.C'
    sources:
      binary: for-4.s
  group: GRPSERIAL
test_for-4_838:
  build:
    cflags: "-std=gnu++14 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-4.C'
    sources:
      binary: for-4.s
  group: GRPSERIAL
test_for-5_157:
  build:
    cflags: "-std=gnu++98 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-5.C'
    sources:
      binary: for-5.s
  group: GRPSERIAL
test_for-5_158:
  build:
    cflags: "-std=gnu++11 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-5.C'
    sources:
      binary: for-5.s
  group: GRPSERIAL
test_for-5_159:
  build:
    cflags: "-std=gnu++14 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-5.C'
    sources:
      binary: for-5.s
  group: GRPSERIAL
test_for-5_839:
  build:
    cflags: "-std=gnu++98 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-5.C'
    sources:
      binary: for-5.s
  group: GRPSERIAL
test_for-5_840:
  build:
    cflags: "-std=gnu++11 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-5.C'
    sources:
      binary: for-5.s
  group: GRPSERIAL
test_for-5_841:
  build:
    cflags: "-std=gnu++14 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-5.C'
    sources:
      binary: for-5.s
  group: GRPSERIAL
test_for-6_160:
  build:
    cflags: "-std=gnu++98 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-6.C'
    sources:
      binary: for-6.s
  group: GRPSERIAL
test_for-6_161:
  build:
    cflags: "-std=gnu++11 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-6.C'
    sources:
      binary: for-6.s
  group: GRPSERIAL
test_for-6_162:
  build:
    cflags: "-std=gnu++14 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-6.C'
    sources:
      binary: for-6.s
  group: GRPSERIAL
test_for-6_842:
  build:
    cflags: "-std=gnu++98 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-6.C'
    sources:
      binary: for-6.s
  group: GRPSERIAL
test_for-6_843:
  build:
    cflags: "-std=gnu++11 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-6.C'
    sources:
      binary: for-6.s
  group: GRPSERIAL
test_for-6_844:
  build:
    cflags: "-std=gnu++14 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-6.C'
    sources:
      binary: for-6.s
  group: GRPSERIAL
test_for-7_163:
  build:
    cflags: "-std=gnu++98 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-7.C'
    sources:
      binary: for-7.s
  group: GRPSERIAL
test_for-7_164:
  build:
    cflags: "-std=gnu++11 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-7.C'
    sources:
      binary: for-7.s
  group: GRPSERIAL
test_for-7_165:
  build:
    cflags: "-std=gnu++14 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-7.C'
    sources:
      binary: for-7.s
  group: GRPSERIAL
test_for-7_845:
  build:
    cflags: "-std=gnu++98 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-7.C'
    sources:
      binary: for-7.s
  group: GRPSERIAL
test_for-7_846:
  build:
    cflags: "-std=gnu++11 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-7.C'
    sources:
      binary: for-7.s
  group: GRPSERIAL
test_for-7_847:
  build:
    cflags: "-std=gnu++14 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-7.C'
    sources:
      binary: for-7.s
  group: GRPSERIAL
test_for-8_166:
  build:
    cflags: "-std=gnu++98 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-8.C'
    sources:
      binary: for-8.s
  group: GRPSERIAL
test_for-8_167:
  build:
    cflags: "-std=gnu++11 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-8.C'
    sources:
      binary: for-8.s
  group: GRPSERIAL
test_for-8_168:
  build:
    cflags: "-std=gnu++14 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-8.C'
    sources:
      binary: for-8.s
  group: GRPSERIAL
test_for-8_848:
  build:
    cflags: "-std=gnu++98 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-8.C'
    sources:
      binary: for-8.s
  group: GRPSERIAL
test_for-8_849:
  build:
    cflags: "-std=gnu++11 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-8.C'
    sources:
      binary: for-8.s
  group: GRPSERIAL
test_for-8_850:
  build:
    cflags: "-std=gnu++14 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-8.C'
    sources:
      binary: for-8.s
  group: GRPSERIAL
test_for-9_169:
  build:
    cflags: "-std=gnu++98 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-9.C'
    sources:
      binary: for-9.s
  group: GRPSERIAL
test_for-9_170:
  build:
    cflags: "-std=gnu++11 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-9.C'
    sources:
      binary: for-9.s
  group: GRPSERIAL
test_for-9_171:
  build:
    cflags: "-std=gnu++14 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-9.C'
    sources:
      binary: for-9.s
  group: GRPSERIAL
test_for-9_851:
  build:
    cflags: "-std=gnu++98 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-9.C'
    sources:
      binary: for-9.s
  group: GRPSERIAL
test_for-9_852:
  build:
    cflags: "-std=gnu++11 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-9.C'
    sources:
      binary: for-9.s
  group: GRPSERIAL
test_for-9_853:
  build:
    cflags: "-std=gnu++14 -fopenmp -fdump-tree-ompexp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/for-9.C'
    sources:
      binary: for-9.s
  group: GRPSERIAL
test_linear-1_172:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/linear-1.C'
    sources:
      binary: linear-1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
test_linear-1_173:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/linear-1.C'
    sources:
      binary: linear-1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
test_linear-1_174:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/linear-1.C'
    sources:
      binary: linear-1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
test_linear-1_854:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/linear-1.C'
    sources:
      binary: linear-1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
test_linear-1_855:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/linear-1.C'
    sources:
      binary: linear-1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
test_linear-1_856:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/linear-1.C'
    sources:
      binary: linear-1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("modifier should
          not be specified in")[^\n]*\n?)+'
test_linear-2_175:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/linear-2.C'
    sources:
      binary: linear-2.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear. is
          not valid for .#pragma omp target teams distribute parallel for.")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .j. should not be linear")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear. is not
          valid for .#pragma omp distribute parallel for.")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .j. should not be linear")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear. is not
          valid for .#pragma omp target teams distribute parallel for.")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .j. should not be linear")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear. is not
          valid for .#pragma omp distribute parallel for.")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .j. should not be linear")[^\n]*\n?)+'
test_linear-2_176:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/linear-2.C'
    sources:
      binary: linear-2.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear. is
          not valid for .#pragma omp target teams distribute parallel for.")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .j. should not be linear")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear. is not
          valid for .#pragma omp distribute parallel for.")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .j. should not be linear")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear. is not
          valid for .#pragma omp target teams distribute parallel for.")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .j. should not be linear")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear. is not
          valid for .#pragma omp distribute parallel for.")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .j. should not be linear")[^\n]*\n?)+'
test_linear-2_177:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/linear-2.C'
    sources:
      binary: linear-2.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear. is
          not valid for .#pragma omp target teams distribute parallel for.")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .j. should not be linear")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear. is not
          valid for .#pragma omp distribute parallel for.")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .j. should not be linear")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear. is not
          valid for .#pragma omp target teams distribute parallel for.")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .j. should not be linear")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear. is not
          valid for .#pragma omp distribute parallel for.")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .j. should not be linear")[^\n]*\n?)+'
test_linear-2_857:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/linear-2.C'
    sources:
      binary: linear-2.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear. is
          not valid for .#pragma omp target teams distribute parallel for.")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .j. should not be linear")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear. is not
          valid for .#pragma omp distribute parallel for.")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .j. should not be linear")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear. is not
          valid for .#pragma omp target teams distribute parallel for.")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .j. should not be linear")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear. is not
          valid for .#pragma omp distribute parallel for.")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .j. should not be linear")[^\n]*\n?)+'
test_linear-2_858:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/linear-2.C'
    sources:
      binary: linear-2.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear. is
          not valid for .#pragma omp target teams distribute parallel for.")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .j. should not be linear")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear. is not
          valid for .#pragma omp distribute parallel for.")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .j. should not be linear")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear. is not
          valid for .#pragma omp target teams distribute parallel for.")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .j. should not be linear")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear. is not
          valid for .#pragma omp distribute parallel for.")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .j. should not be linear")[^\n]*\n?)+'
test_linear-2_859:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/linear-2.C'
    sources:
      binary: linear-2.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear. is
          not valid for .#pragma omp target teams distribute parallel for.")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .j. should not be linear")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear. is not
          valid for .#pragma omp distribute parallel for.")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .j. should not be linear")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear. is not
          valid for .#pragma omp target teams distribute parallel for.")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .j. should not be linear")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear. is not
          valid for .#pragma omp distribute parallel for.")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .i. should not be linear")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration variable
          .j. should not be linear")[^\n]*\n?)+'
test_loop-1_178:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/loop-1.C'
    sources:
      binary: loop-1.s
  group: GRPSERIAL
  validate:
    match:
      L101:
        expect: true
        expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L105:
        expect: true
        expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L109:
        expect: true
        expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L117:
        expect: true
        expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+:129:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+:133:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L138:
        expect: true
        expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L161:
        expect: true
        expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L167:
        expect: true
        expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L170:
        expect: true
        expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L173:
        expect: true
        expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L179:
        expect: true
        expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L182:
        expect: true
        expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate|condition expression refers to iteration variable")[^\n]*\n?)+'
      L185:
        expect: true
        expr: '(^|\n)([^\n]+:185:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L188:
        expect: true
        expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression|increment expression refers to iteration variable")[^\n]*\n?)+'
      L191:
        expect: true
        expr: '(^|\n)([^\n]+:191:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L194:
        expect: true
        expr: '(^|\n)([^\n]+:194:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+:197:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L200:
        expect: true
        expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L203:
        expect: true
        expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L210:
        expect: true
        expr: '(^|\n)([^\n]+:210:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L219:
        expect: true
        expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L223:
        expect: true
        expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L231:
        expect: true
        expr: '(^|\n)([^\n]+:231:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L235:
        expect: true
        expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L238:
        expect: true
        expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L242:
        expect: true
        expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L247:
        expect: true
        expr: '(^|\n)([^\n]+:247:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate|condition expression refers to iteration variable")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression|increment expression refers to iteration variable")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
test_loop-1_179:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/loop-1.C'
    sources:
      binary: loop-1.s
  group: GRPSERIAL
  validate:
    match:
      L101:
        expect: true
        expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L105:
        expect: true
        expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L109:
        expect: true
        expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L117:
        expect: true
        expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+:129:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+:133:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L138:
        expect: true
        expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L161:
        expect: true
        expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L167:
        expect: true
        expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L170:
        expect: true
        expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L173:
        expect: true
        expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L179:
        expect: true
        expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L182:
        expect: true
        expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate|condition expression refers to iteration variable")[^\n]*\n?)+'
      L185:
        expect: true
        expr: '(^|\n)([^\n]+:185:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L188:
        expect: true
        expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression|increment expression refers to iteration variable")[^\n]*\n?)+'
      L191:
        expect: true
        expr: '(^|\n)([^\n]+:191:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L194:
        expect: true
        expr: '(^|\n)([^\n]+:194:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+:197:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L200:
        expect: true
        expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L203:
        expect: true
        expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L210:
        expect: true
        expr: '(^|\n)([^\n]+:210:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L219:
        expect: true
        expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L223:
        expect: true
        expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L231:
        expect: true
        expr: '(^|\n)([^\n]+:231:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L235:
        expect: true
        expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L238:
        expect: true
        expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L242:
        expect: true
        expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L247:
        expect: true
        expr: '(^|\n)([^\n]+:247:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate|condition expression refers to iteration variable")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression|increment expression refers to iteration variable")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
test_loop-1_180:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/loop-1.C'
    sources:
      binary: loop-1.s
  group: GRPSERIAL
  validate:
    match:
      L101:
        expect: true
        expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L105:
        expect: true
        expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L109:
        expect: true
        expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L117:
        expect: true
        expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+:129:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+:133:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L138:
        expect: true
        expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L161:
        expect: true
        expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L167:
        expect: true
        expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L170:
        expect: true
        expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L173:
        expect: true
        expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L179:
        expect: true
        expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L182:
        expect: true
        expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate|condition expression refers to iteration variable")[^\n]*\n?)+'
      L185:
        expect: true
        expr: '(^|\n)([^\n]+:185:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L188:
        expect: true
        expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression|increment expression refers to iteration variable")[^\n]*\n?)+'
      L191:
        expect: true
        expr: '(^|\n)([^\n]+:191:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L194:
        expect: true
        expr: '(^|\n)([^\n]+:194:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+:197:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L200:
        expect: true
        expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L203:
        expect: true
        expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L210:
        expect: true
        expr: '(^|\n)([^\n]+:210:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L219:
        expect: true
        expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L223:
        expect: true
        expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L231:
        expect: true
        expr: '(^|\n)([^\n]+:231:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L235:
        expect: true
        expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L238:
        expect: true
        expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L242:
        expect: true
        expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L247:
        expect: true
        expr: '(^|\n)([^\n]+:247:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate|condition expression refers to iteration variable")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression|increment expression refers to iteration variable")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
test_loop-1_860:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/loop-1.C'
    sources:
      binary: loop-1.s
  group: GRPSERIAL
  validate:
    match:
      L101:
        expect: true
        expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L105:
        expect: true
        expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L109:
        expect: true
        expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L117:
        expect: true
        expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+:129:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+:133:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L138:
        expect: true
        expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L161:
        expect: true
        expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L167:
        expect: true
        expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L170:
        expect: true
        expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L173:
        expect: true
        expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L179:
        expect: true
        expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L182:
        expect: true
        expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate|condition expression refers to iteration variable")[^\n]*\n?)+'
      L185:
        expect: true
        expr: '(^|\n)([^\n]+:185:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L188:
        expect: true
        expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression|increment expression refers to iteration variable")[^\n]*\n?)+'
      L191:
        expect: true
        expr: '(^|\n)([^\n]+:191:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L194:
        expect: true
        expr: '(^|\n)([^\n]+:194:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+:197:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L200:
        expect: true
        expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L203:
        expect: true
        expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L210:
        expect: true
        expr: '(^|\n)([^\n]+:210:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L219:
        expect: true
        expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L223:
        expect: true
        expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L231:
        expect: true
        expr: '(^|\n)([^\n]+:231:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L235:
        expect: true
        expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L238:
        expect: true
        expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L242:
        expect: true
        expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L247:
        expect: true
        expr: '(^|\n)([^\n]+:247:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate|condition expression refers to iteration variable")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression|increment expression refers to iteration variable")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
test_loop-1_861:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/loop-1.C'
    sources:
      binary: loop-1.s
  group: GRPSERIAL
  validate:
    match:
      L101:
        expect: true
        expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L105:
        expect: true
        expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L109:
        expect: true
        expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L117:
        expect: true
        expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+:129:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+:133:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L138:
        expect: true
        expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L161:
        expect: true
        expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L167:
        expect: true
        expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L170:
        expect: true
        expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L173:
        expect: true
        expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L179:
        expect: true
        expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L182:
        expect: true
        expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate|condition expression refers to iteration variable")[^\n]*\n?)+'
      L185:
        expect: true
        expr: '(^|\n)([^\n]+:185:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L188:
        expect: true
        expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression|increment expression refers to iteration variable")[^\n]*\n?)+'
      L191:
        expect: true
        expr: '(^|\n)([^\n]+:191:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L194:
        expect: true
        expr: '(^|\n)([^\n]+:194:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+:197:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L200:
        expect: true
        expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L203:
        expect: true
        expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L210:
        expect: true
        expr: '(^|\n)([^\n]+:210:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L219:
        expect: true
        expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L223:
        expect: true
        expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L231:
        expect: true
        expr: '(^|\n)([^\n]+:231:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L235:
        expect: true
        expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L238:
        expect: true
        expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L242:
        expect: true
        expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L247:
        expect: true
        expr: '(^|\n)([^\n]+:247:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate|condition expression refers to iteration variable")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression|increment expression refers to iteration variable")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
test_loop-1_862:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/loop-1.C'
    sources:
      binary: loop-1.s
  group: GRPSERIAL
  validate:
    match:
      L101:
        expect: true
        expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L105:
        expect: true
        expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L109:
        expect: true
        expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L117:
        expect: true
        expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+:129:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+:133:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L138:
        expect: true
        expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L161:
        expect: true
        expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L167:
        expect: true
        expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L170:
        expect: true
        expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L173:
        expect: true
        expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L179:
        expect: true
        expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L182:
        expect: true
        expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate|condition expression refers to iteration variable")[^\n]*\n?)+'
      L185:
        expect: true
        expr: '(^|\n)([^\n]+:185:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L188:
        expect: true
        expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression|increment expression refers to iteration variable")[^\n]*\n?)+'
      L191:
        expect: true
        expr: '(^|\n)([^\n]+:191:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L194:
        expect: true
        expr: '(^|\n)([^\n]+:194:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L197:
        expect: true
        expr: '(^|\n)([^\n]+:197:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L200:
        expect: true
        expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L203:
        expect: true
        expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L210:
        expect: true
        expr: '(^|\n)([^\n]+:210:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L219:
        expect: true
        expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L223:
        expect: true
        expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L231:
        expect: true
        expr: '(^|\n)([^\n]+:231:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L235:
        expect: true
        expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L238:
        expect: true
        expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L242:
        expect: true
        expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L247:
        expect: true
        expr: '(^|\n)([^\n]+:247:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate|condition expression refers to iteration variable")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression|increment expression refers to iteration variable")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
test_loop-2_181:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/loop-2.C'
    sources:
      binary: loop-2.s
  group: GRPSERIAL
  validate:
    match:
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L118:
        expect: true
        expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L122:
        expect: true
        expr: '(^|\n)([^\n]+:122:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L126:
        expect: true
        expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L130:
        expect: true
        expr: '(^|\n)([^\n]+:130:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L139:
        expect: true
        expr: '(^|\n)([^\n]+:139:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L160:
        expect: true
        expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L163:
        expect: true
        expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+:166:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L169:
        expect: true
        expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+:172:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L181:
        expect: true
        expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate|condition expression refers to iteration variable")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression|increment expression refers to iteration variable")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+:196:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L199:
        expect: true
        expr: '(^|\n)([^\n]+:199:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L202:
        expect: true
        expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L205:
        expect: true
        expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L217:
        expect: true
        expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L221:
        expect: true
        expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L224:
        expect: true
        expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L228:
        expect: true
        expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L232:
        expect: true
        expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L236:
        expect: true
        expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L240:
        expect: true
        expr: '(^|\n)([^\n]+:240:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L244:
        expect: true
        expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L249:
        expect: true
        expr: '(^|\n)([^\n]+:249:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate|condition expression refers to iteration variable")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression|increment expression refers to iteration variable")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
test_loop-2_182:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/loop-2.C'
    sources:
      binary: loop-2.s
  group: GRPSERIAL
  validate:
    match:
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L118:
        expect: true
        expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L122:
        expect: true
        expr: '(^|\n)([^\n]+:122:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L126:
        expect: true
        expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L130:
        expect: true
        expr: '(^|\n)([^\n]+:130:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L139:
        expect: true
        expr: '(^|\n)([^\n]+:139:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L160:
        expect: true
        expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L163:
        expect: true
        expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+:166:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L169:
        expect: true
        expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+:172:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L181:
        expect: true
        expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate|condition expression refers to iteration variable")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression|increment expression refers to iteration variable")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+:196:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L199:
        expect: true
        expr: '(^|\n)([^\n]+:199:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L202:
        expect: true
        expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L205:
        expect: true
        expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L217:
        expect: true
        expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L221:
        expect: true
        expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L224:
        expect: true
        expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L228:
        expect: true
        expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L232:
        expect: true
        expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L236:
        expect: true
        expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L240:
        expect: true
        expr: '(^|\n)([^\n]+:240:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L244:
        expect: true
        expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L249:
        expect: true
        expr: '(^|\n)([^\n]+:249:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate|condition expression refers to iteration variable")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression|increment expression refers to iteration variable")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
test_loop-2_183:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/loop-2.C'
    sources:
      binary: loop-2.s
  group: GRPSERIAL
  validate:
    match:
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L118:
        expect: true
        expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L122:
        expect: true
        expr: '(^|\n)([^\n]+:122:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L126:
        expect: true
        expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L130:
        expect: true
        expr: '(^|\n)([^\n]+:130:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L139:
        expect: true
        expr: '(^|\n)([^\n]+:139:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L160:
        expect: true
        expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L163:
        expect: true
        expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+:166:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L169:
        expect: true
        expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+:172:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L181:
        expect: true
        expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate|condition expression refers to iteration variable")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression|increment expression refers to iteration variable")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+:196:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L199:
        expect: true
        expr: '(^|\n)([^\n]+:199:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L202:
        expect: true
        expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L205:
        expect: true
        expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L217:
        expect: true
        expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L221:
        expect: true
        expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L224:
        expect: true
        expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L228:
        expect: true
        expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L232:
        expect: true
        expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L236:
        expect: true
        expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L240:
        expect: true
        expr: '(^|\n)([^\n]+:240:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L244:
        expect: true
        expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L249:
        expect: true
        expr: '(^|\n)([^\n]+:249:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate|condition expression refers to iteration variable")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression|increment expression refers to iteration variable")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
test_loop-2_863:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/loop-2.C'
    sources:
      binary: loop-2.s
  group: GRPSERIAL
  validate:
    match:
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L118:
        expect: true
        expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L122:
        expect: true
        expr: '(^|\n)([^\n]+:122:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L126:
        expect: true
        expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L130:
        expect: true
        expr: '(^|\n)([^\n]+:130:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L139:
        expect: true
        expr: '(^|\n)([^\n]+:139:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L160:
        expect: true
        expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L163:
        expect: true
        expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+:166:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L169:
        expect: true
        expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+:172:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L181:
        expect: true
        expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate|condition expression refers to iteration variable")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression|increment expression refers to iteration variable")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+:196:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L199:
        expect: true
        expr: '(^|\n)([^\n]+:199:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L202:
        expect: true
        expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L205:
        expect: true
        expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L217:
        expect: true
        expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L221:
        expect: true
        expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L224:
        expect: true
        expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L228:
        expect: true
        expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L232:
        expect: true
        expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L236:
        expect: true
        expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L240:
        expect: true
        expr: '(^|\n)([^\n]+:240:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L244:
        expect: true
        expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L249:
        expect: true
        expr: '(^|\n)([^\n]+:249:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate|condition expression refers to iteration variable")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression|increment expression refers to iteration variable")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
test_loop-2_864:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/loop-2.C'
    sources:
      binary: loop-2.s
  group: GRPSERIAL
  validate:
    match:
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L118:
        expect: true
        expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L122:
        expect: true
        expr: '(^|\n)([^\n]+:122:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L126:
        expect: true
        expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L130:
        expect: true
        expr: '(^|\n)([^\n]+:130:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L139:
        expect: true
        expr: '(^|\n)([^\n]+:139:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L160:
        expect: true
        expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L163:
        expect: true
        expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+:166:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L169:
        expect: true
        expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+:172:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L181:
        expect: true
        expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate|condition expression refers to iteration variable")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression|increment expression refers to iteration variable")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+:196:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L199:
        expect: true
        expr: '(^|\n)([^\n]+:199:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L202:
        expect: true
        expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L205:
        expect: true
        expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L217:
        expect: true
        expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L221:
        expect: true
        expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L224:
        expect: true
        expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L228:
        expect: true
        expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L232:
        expect: true
        expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L236:
        expect: true
        expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L240:
        expect: true
        expr: '(^|\n)([^\n]+:240:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L244:
        expect: true
        expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L249:
        expect: true
        expr: '(^|\n)([^\n]+:249:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate|condition expression refers to iteration variable")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression|increment expression refers to iteration variable")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
test_loop-2_865:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/loop-2.C'
    sources:
      binary: loop-2.s
  group: GRPSERIAL
  validate:
    match:
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L118:
        expect: true
        expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L122:
        expect: true
        expr: '(^|\n)([^\n]+:122:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L126:
        expect: true
        expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L130:
        expect: true
        expr: '(^|\n)([^\n]+:130:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L139:
        expect: true
        expr: '(^|\n)([^\n]+:139:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L160:
        expect: true
        expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L163:
        expect: true
        expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+:166:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L169:
        expect: true
        expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+:172:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L181:
        expect: true
        expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate|condition expression refers to iteration variable")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression|increment expression refers to iteration variable")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+:196:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L199:
        expect: true
        expr: '(^|\n)([^\n]+:199:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L202:
        expect: true
        expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L205:
        expect: true
        expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L217:
        expect: true
        expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L221:
        expect: true
        expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L224:
        expect: true
        expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L228:
        expect: true
        expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L232:
        expect: true
        expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L236:
        expect: true
        expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L240:
        expect: true
        expr: '(^|\n)([^\n]+:240:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L244:
        expect: true
        expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L249:
        expect: true
        expr: '(^|\n)([^\n]+:249:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate|condition expression refers to iteration variable")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid increment
          expression|increment expression refers to iteration variable")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
test_loop-3_184:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/loop-3.C'
    sources:
      binary: loop-3.s
  group: GRPSERIAL
  validate:
    match:
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L105:
        expect: true
        expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L119:
        expect: true
        expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+:124:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L139:
        expect: true
        expr: '(^|\n)([^\n]+:139:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L143:
        expect: true
        expr: '(^|\n)([^\n]+:143:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+:155:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L167:
        expect: true
        expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+:172:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L200:
        expect: true
        expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L203:
        expect: true
        expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L206:
        expect: true
        expr: '(^|\n)([^\n]+:206:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L209:
        expect: true
        expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L218:
        expect: true
        expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L221:
        expect: true
        expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate|condition expression refers to iteration variable")[^\n]*\n?)+'
      L224:
        expect: true
        expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L230:
        expect: true
        expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L237:
        expect: true
        expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L242:
        expect: true
        expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L246:
        expect: true
        expr: '(^|\n)([^\n]+:246:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L249:
        expect: true
        expr: '(^|\n)([^\n]+:249:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L253:
        expect: true
        expr: '(^|\n)([^\n]+:253:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L257:
        expect: true
        expr: '(^|\n)([^\n]+:257:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L261:
        expect: true
        expr: '(^|\n)([^\n]+:261:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L266:
        expect: true
        expr: '(^|\n)([^\n]+:266:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L270:
        expect: true
        expr: '(^|\n)([^\n]+:270:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L274:
        expect: true
        expr: '(^|\n)([^\n]+:274:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate|condition expression refers to iteration variable")[^\n]*\n?)+'
test_loop-3_185:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/loop-3.C'
    sources:
      binary: loop-3.s
  group: GRPSERIAL
  validate:
    match:
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L105:
        expect: true
        expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L119:
        expect: true
        expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+:124:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L139:
        expect: true
        expr: '(^|\n)([^\n]+:139:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L143:
        expect: true
        expr: '(^|\n)([^\n]+:143:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+:155:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L167:
        expect: true
        expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+:172:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L200:
        expect: true
        expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L203:
        expect: true
        expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L206:
        expect: true
        expr: '(^|\n)([^\n]+:206:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L209:
        expect: true
        expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L218:
        expect: true
        expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L221:
        expect: true
        expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate|condition expression refers to iteration variable")[^\n]*\n?)+'
      L224:
        expect: true
        expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L230:
        expect: true
        expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L237:
        expect: true
        expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L242:
        expect: true
        expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L246:
        expect: true
        expr: '(^|\n)([^\n]+:246:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L249:
        expect: true
        expr: '(^|\n)([^\n]+:249:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L253:
        expect: true
        expr: '(^|\n)([^\n]+:253:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L257:
        expect: true
        expr: '(^|\n)([^\n]+:257:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L261:
        expect: true
        expr: '(^|\n)([^\n]+:261:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L266:
        expect: true
        expr: '(^|\n)([^\n]+:266:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L270:
        expect: true
        expr: '(^|\n)([^\n]+:270:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L274:
        expect: true
        expr: '(^|\n)([^\n]+:274:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate|condition expression refers to iteration variable")[^\n]*\n?)+'
test_loop-3_186:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/loop-3.C'
    sources:
      binary: loop-3.s
  group: GRPSERIAL
  validate:
    match:
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L105:
        expect: true
        expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L119:
        expect: true
        expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+:124:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L139:
        expect: true
        expr: '(^|\n)([^\n]+:139:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L143:
        expect: true
        expr: '(^|\n)([^\n]+:143:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+:155:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L167:
        expect: true
        expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+:172:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L200:
        expect: true
        expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L203:
        expect: true
        expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L206:
        expect: true
        expr: '(^|\n)([^\n]+:206:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L209:
        expect: true
        expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L218:
        expect: true
        expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L221:
        expect: true
        expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate|condition expression refers to iteration variable")[^\n]*\n?)+'
      L224:
        expect: true
        expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L230:
        expect: true
        expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L237:
        expect: true
        expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L242:
        expect: true
        expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L246:
        expect: true
        expr: '(^|\n)([^\n]+:246:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L249:
        expect: true
        expr: '(^|\n)([^\n]+:249:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L253:
        expect: true
        expr: '(^|\n)([^\n]+:253:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L257:
        expect: true
        expr: '(^|\n)([^\n]+:257:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L261:
        expect: true
        expr: '(^|\n)([^\n]+:261:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L266:
        expect: true
        expr: '(^|\n)([^\n]+:266:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L270:
        expect: true
        expr: '(^|\n)([^\n]+:270:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L274:
        expect: true
        expr: '(^|\n)([^\n]+:274:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate|condition expression refers to iteration variable")[^\n]*\n?)+'
test_loop-3_866:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/loop-3.C'
    sources:
      binary: loop-3.s
  group: GRPSERIAL
  validate:
    match:
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L105:
        expect: true
        expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L119:
        expect: true
        expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+:124:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L139:
        expect: true
        expr: '(^|\n)([^\n]+:139:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L143:
        expect: true
        expr: '(^|\n)([^\n]+:143:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+:155:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L167:
        expect: true
        expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+:172:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L200:
        expect: true
        expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L203:
        expect: true
        expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L206:
        expect: true
        expr: '(^|\n)([^\n]+:206:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L209:
        expect: true
        expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L218:
        expect: true
        expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L221:
        expect: true
        expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate|condition expression refers to iteration variable")[^\n]*\n?)+'
      L224:
        expect: true
        expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L230:
        expect: true
        expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L237:
        expect: true
        expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L242:
        expect: true
        expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L246:
        expect: true
        expr: '(^|\n)([^\n]+:246:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L249:
        expect: true
        expr: '(^|\n)([^\n]+:249:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L253:
        expect: true
        expr: '(^|\n)([^\n]+:253:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L257:
        expect: true
        expr: '(^|\n)([^\n]+:257:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L261:
        expect: true
        expr: '(^|\n)([^\n]+:261:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L266:
        expect: true
        expr: '(^|\n)([^\n]+:266:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L270:
        expect: true
        expr: '(^|\n)([^\n]+:270:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L274:
        expect: true
        expr: '(^|\n)([^\n]+:274:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate|condition expression refers to iteration variable")[^\n]*\n?)+'
test_loop-3_867:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/loop-3.C'
    sources:
      binary: loop-3.s
  group: GRPSERIAL
  validate:
    match:
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L105:
        expect: true
        expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L119:
        expect: true
        expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+:124:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L139:
        expect: true
        expr: '(^|\n)([^\n]+:139:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L143:
        expect: true
        expr: '(^|\n)([^\n]+:143:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+:155:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L167:
        expect: true
        expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+:172:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L200:
        expect: true
        expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L203:
        expect: true
        expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L206:
        expect: true
        expr: '(^|\n)([^\n]+:206:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L209:
        expect: true
        expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L218:
        expect: true
        expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L221:
        expect: true
        expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate|condition expression refers to iteration variable")[^\n]*\n?)+'
      L224:
        expect: true
        expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L230:
        expect: true
        expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L237:
        expect: true
        expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L242:
        expect: true
        expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L246:
        expect: true
        expr: '(^|\n)([^\n]+:246:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L249:
        expect: true
        expr: '(^|\n)([^\n]+:249:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L253:
        expect: true
        expr: '(^|\n)([^\n]+:253:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L257:
        expect: true
        expr: '(^|\n)([^\n]+:257:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L261:
        expect: true
        expr: '(^|\n)([^\n]+:261:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L266:
        expect: true
        expr: '(^|\n)([^\n]+:266:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L270:
        expect: true
        expr: '(^|\n)([^\n]+:270:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L274:
        expect: true
        expr: '(^|\n)([^\n]+:274:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate|condition expression refers to iteration variable")[^\n]*\n?)+'
test_loop-3_868:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/loop-3.C'
    sources:
      binary: loop-3.s
  group: GRPSERIAL
  validate:
    match:
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L105:
        expect: true
        expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L119:
        expect: true
        expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+:124:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L139:
        expect: true
        expr: '(^|\n)([^\n]+:139:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L143:
        expect: true
        expr: '(^|\n)([^\n]+:143:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+:155:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L167:
        expect: true
        expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+:172:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L200:
        expect: true
        expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L203:
        expect: true
        expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L206:
        expect: true
        expr: '(^|\n)([^\n]+:206:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L209:
        expect: true
        expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L212:
        expect: true
        expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L218:
        expect: true
        expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L221:
        expect: true
        expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate|condition expression refers to iteration variable")[^\n]*\n?)+'
      L224:
        expect: true
        expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L227:
        expect: true
        expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L230:
        expect: true
        expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L237:
        expect: true
        expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L242:
        expect: true
        expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L246:
        expect: true
        expr: '(^|\n)([^\n]+:246:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'
      L249:
        expect: true
        expr: '(^|\n)([^\n]+:249:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L253:
        expect: true
        expr: '(^|\n)([^\n]+:253:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L257:
        expect: true
        expr: '(^|\n)([^\n]+:257:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L261:
        expect: true
        expr: '(^|\n)([^\n]+:261:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L266:
        expect: true
        expr: '(^|\n)([^\n]+:266:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L270:
        expect: true
        expr: '(^|\n)([^\n]+:270:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L274:
        expect: true
        expr: '(^|\n)([^\n]+:274:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment expression
          refers to iteration variable")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition expression
          refers to iteration variable")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate|condition expression refers to iteration variable")[^\n]*\n?)+'
test_macro-1_187:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/macro-1.C'
    sources:
      binary: macro-1.s
  group: GRPSERIAL
test_macro-1_188:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/macro-1.C'
    sources:
      binary: macro-1.s
  group: GRPSERIAL
test_macro-1_189:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/macro-1.C'
    sources:
      binary: macro-1.s
  group: GRPSERIAL
test_macro-1_869:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/macro-1.C'
    sources:
      binary: macro-1.s
  group: GRPSERIAL
test_macro-1_870:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/macro-1.C'
    sources:
      binary: macro-1.s
  group: GRPSERIAL
test_macro-1_871:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/macro-1.C'
    sources:
      binary: macro-1.s
  group: GRPSERIAL
test_macro-2_190:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/macro-2.C'
    sources:
      binary: macro-2.s
  group: GRPSERIAL
test_macro-2_191:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/macro-2.C'
    sources:
      binary: macro-2.s
  group: GRPSERIAL
test_macro-2_192:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/macro-2.C'
    sources:
      binary: macro-2.s
  group: GRPSERIAL
test_macro-2_872:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/macro-2.C'
    sources:
      binary: macro-2.s
  group: GRPSERIAL
test_macro-2_873:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/macro-2.C'
    sources:
      binary: macro-2.s
  group: GRPSERIAL
test_macro-2_874:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/macro-2.C'
    sources:
      binary: macro-2.s
  group: GRPSERIAL
test_macro-3_193:
  build:
    cflags: "-std=gnu++98 -fopenmp -fdump-tree-omplower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/macro-3.C'
    sources:
      binary: macro-3.s
  group: GRPSERIAL
test_macro-3_194:
  build:
    cflags: "-std=gnu++11 -fopenmp -fdump-tree-omplower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/macro-3.C'
    sources:
      binary: macro-3.s
  group: GRPSERIAL
test_macro-3_195:
  build:
    cflags: "-std=gnu++14 -fopenmp -fdump-tree-omplower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/macro-3.C'
    sources:
      binary: macro-3.s
  group: GRPSERIAL
test_macro-3_875:
  build:
    cflags: "-std=gnu++98 -fopenmp -fdump-tree-omplower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/macro-3.C'
    sources:
      binary: macro-3.s
  group: GRPSERIAL
test_macro-3_876:
  build:
    cflags: "-std=gnu++11 -fopenmp -fdump-tree-omplower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/macro-3.C'
    sources:
      binary: macro-3.s
  group: GRPSERIAL
test_macro-3_877:
  build:
    cflags: "-std=gnu++14 -fopenmp -fdump-tree-omplower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/macro-3.C'
    sources:
      binary: macro-3.s
  group: GRPSERIAL
test_macro-4_196:
  build:
    cflags: "-std=gnu++98 -fopenmp -Wunknown-pragmas\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/macro-4.C'
    sources:
      binary: macro-4.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ignoring #pragma omp
          _Pragma")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("ignoring #pragma omp
          _Pragma")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("ignoring #pragma omp
          serial")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("ignoring #pragma omp
          serial")[^\n]*\n?)+'
test_macro-4_197:
  build:
    cflags: "-std=gnu++11 -fopenmp -Wunknown-pragmas\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/macro-4.C'
    sources:
      binary: macro-4.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ignoring #pragma omp
          _Pragma")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("ignoring #pragma omp
          _Pragma")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("ignoring #pragma omp
          serial")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("ignoring #pragma omp
          serial")[^\n]*\n?)+'
test_macro-4_198:
  build:
    cflags: "-std=gnu++14 -fopenmp -Wunknown-pragmas\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/macro-4.C'
    sources:
      binary: macro-4.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ignoring #pragma omp
          _Pragma")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("ignoring #pragma omp
          _Pragma")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("ignoring #pragma omp
          serial")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("ignoring #pragma omp
          serial")[^\n]*\n?)+'
test_macro-4_878:
  build:
    cflags: "-std=gnu++98 -fopenmp -Wunknown-pragmas\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/macro-4.C'
    sources:
      binary: macro-4.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ignoring #pragma omp
          _Pragma")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("ignoring #pragma omp
          _Pragma")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("ignoring #pragma omp
          serial")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("ignoring #pragma omp
          serial")[^\n]*\n?)+'
test_macro-4_879:
  build:
    cflags: "-std=gnu++11 -fopenmp -Wunknown-pragmas\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/macro-4.C'
    sources:
      binary: macro-4.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ignoring #pragma omp
          _Pragma")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("ignoring #pragma omp
          _Pragma")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("ignoring #pragma omp
          serial")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("ignoring #pragma omp
          serial")[^\n]*\n?)+'
test_macro-4_880:
  build:
    cflags: "-std=gnu++14 -fopenmp -Wunknown-pragmas\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/macro-4.C'
    sources:
      binary: macro-4.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ignoring #pragma omp
          _Pragma")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("ignoring #pragma omp
          _Pragma")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("ignoring #pragma omp
          serial")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("ignoring #pragma omp
          serial")[^\n]*\n?)+'
test_master-1_199:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/master-1.C'
    sources:
      binary: master-1.s
  group: GRPSERIAL
test_master-1_200:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/master-1.C'
    sources:
      binary: master-1.s
  group: GRPSERIAL
test_master-1_201:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/master-1.C'
    sources:
      binary: master-1.s
  group: GRPSERIAL
test_master-1_881:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/master-1.C'
    sources:
      binary: master-1.s
  group: GRPSERIAL
test_master-1_882:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/master-1.C'
    sources:
      binary: master-1.s
  group: GRPSERIAL
test_master-1_883:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/master-1.C'
    sources:
      binary: master-1.s
  group: GRPSERIAL
test_master-2_202:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/master-2.C'
    sources:
      binary: master-2.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_master-2_203:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/master-2.C'
    sources:
      binary: master-2.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_master-2_204:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/master-2.C'
    sources:
      binary: master-2.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_master-2_884:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/master-2.C'
    sources:
      binary: master-2.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_master-2_885:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/master-2.C'
    sources:
      binary: master-2.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_master-2_886:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/master-2.C'
    sources:
      binary: master-2.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_master-3_205:
  build:
    cflags: "-std=gnu++98 -fopenmp -fdump-tree-omplower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/master-3.C'
    sources:
      binary: master-3.s
  group: GRPSERIAL
test_master-3_206:
  build:
    cflags: "-std=gnu++11 -fopenmp -fdump-tree-omplower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/master-3.C'
    sources:
      binary: master-3.s
  group: GRPSERIAL
test_master-3_207:
  build:
    cflags: "-std=gnu++14 -fopenmp -fdump-tree-omplower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/master-3.C'
    sources:
      binary: master-3.s
  group: GRPSERIAL
test_master-3_887:
  build:
    cflags: "-std=gnu++98 -fopenmp -fdump-tree-omplower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/master-3.C'
    sources:
      binary: master-3.s
  group: GRPSERIAL
test_master-3_888:
  build:
    cflags: "-std=gnu++11 -fopenmp -fdump-tree-omplower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/master-3.C'
    sources:
      binary: master-3.s
  group: GRPSERIAL
test_master-3_889:
  build:
    cflags: "-std=gnu++14 -fopenmp -fdump-tree-omplower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/master-3.C'
    sources:
      binary: master-3.s
  group: GRPSERIAL
test_member-1_208:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/member-1.C'
    sources:
      binary: member-1.s
  group: GRPSERIAL
test_member-1_209:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/member-1.C'
    sources:
      binary: member-1.s
  group: GRPSERIAL
test_member-1_210:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/member-1.C'
    sources:
      binary: member-1.s
  group: GRPSERIAL
test_member-1_890:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/member-1.C'
    sources:
      binary: member-1.s
  group: GRPSERIAL
test_member-1_891:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/member-1.C'
    sources:
      binary: member-1.s
  group: GRPSERIAL
test_member-1_892:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/member-1.C'
    sources:
      binary: member-1.s
  group: GRPSERIAL
test_member-2_211:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/member-2.C'
    sources:
      binary: member-2.s
  group: GRPSERIAL
  validate:
    match:
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .private.")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .lastprivate.")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .linear.")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .reduction.")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .private.")[^\n]*\n?)+'
      L138:
        expect: true
        expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .lastprivate.")[^\n]*\n?)+'
      L141:
        expect: true
        expr: '(^|\n)([^\n]+:141:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .linear.")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+:144:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .reduction.")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has const type
          for .reduction.")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has const type
          for .reduction.")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .shared.")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .shared.")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .private.")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .lastprivate.")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .linear.")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .reduction.")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has const type
          for .reduction.")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .shared.")[^\n]*\n?)+'
test_member-2_212:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/member-2.C'
    sources:
      binary: member-2.s
  group: GRPSERIAL
  validate:
    match:
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .private.")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .lastprivate.")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .linear.")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .reduction.")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .private.")[^\n]*\n?)+'
      L138:
        expect: true
        expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .lastprivate.")[^\n]*\n?)+'
      L141:
        expect: true
        expr: '(^|\n)([^\n]+:141:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .linear.")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+:144:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .reduction.")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has const type
          for .reduction.")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has const type
          for .reduction.")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .shared.")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .shared.")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .private.")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .lastprivate.")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .linear.")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .reduction.")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has const type
          for .reduction.")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .shared.")[^\n]*\n?)+'
test_member-2_213:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/member-2.C'
    sources:
      binary: member-2.s
  group: GRPSERIAL
  validate:
    match:
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .private.")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .lastprivate.")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .linear.")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .reduction.")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .private.")[^\n]*\n?)+'
      L138:
        expect: true
        expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .lastprivate.")[^\n]*\n?)+'
      L141:
        expect: true
        expr: '(^|\n)([^\n]+:141:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .linear.")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+:144:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .reduction.")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has const type
          for .reduction.")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has const type
          for .reduction.")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .shared.")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .shared.")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .private.")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .lastprivate.")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .linear.")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .reduction.")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has const type
          for .reduction.")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .shared.")[^\n]*\n?)+'
test_member-2_893:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/member-2.C'
    sources:
      binary: member-2.s
  group: GRPSERIAL
  validate:
    match:
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .private.")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .lastprivate.")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .linear.")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .reduction.")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .private.")[^\n]*\n?)+'
      L138:
        expect: true
        expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .lastprivate.")[^\n]*\n?)+'
      L141:
        expect: true
        expr: '(^|\n)([^\n]+:141:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .linear.")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+:144:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .reduction.")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has const type
          for .reduction.")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has const type
          for .reduction.")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .shared.")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .shared.")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .private.")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .lastprivate.")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .linear.")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .reduction.")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has const type
          for .reduction.")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .shared.")[^\n]*\n?)+'
test_member-2_894:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/member-2.C'
    sources:
      binary: member-2.s
  group: GRPSERIAL
  validate:
    match:
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .private.")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .lastprivate.")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .linear.")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .reduction.")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .private.")[^\n]*\n?)+'
      L138:
        expect: true
        expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .lastprivate.")[^\n]*\n?)+'
      L141:
        expect: true
        expr: '(^|\n)([^\n]+:141:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .linear.")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+:144:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .reduction.")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has const type
          for .reduction.")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has const type
          for .reduction.")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .shared.")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .shared.")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .private.")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .lastprivate.")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .linear.")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .reduction.")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has const type
          for .reduction.")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .shared.")[^\n]*\n?)+'
test_member-2_895:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/member-2.C'
    sources:
      binary: member-2.s
  group: GRPSERIAL
  validate:
    match:
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .private.")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .lastprivate.")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .linear.")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .reduction.")[^\n]*\n?)+'
      L134:
        expect: true
        expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .private.")[^\n]*\n?)+'
      L138:
        expect: true
        expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .lastprivate.")[^\n]*\n?)+'
      L141:
        expect: true
        expr: '(^|\n)([^\n]+:141:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .linear.")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+:144:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .reduction.")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has const type
          for .reduction.")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has const type
          for .reduction.")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .shared.")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .shared.")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .private.")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .lastprivate.")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .linear.")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .reduction.")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has const type
          for .reduction.")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined
          .shared. for .shared.")[^\n]*\n?)+'
test_member-3_214:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/member-3.C'
    sources:
      binary: member-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .\\\\).
          before .\\\\.. token")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .\\\\).
          before .\\\\.. token")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .\\\\).
          before .->. token")[^\n]*\n?)+'
test_member-3_215:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/member-3.C'
    sources:
      binary: member-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .\\\\).
          before .\\\\.. token")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .\\\\).
          before .\\\\.. token")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .\\\\).
          before .->. token")[^\n]*\n?)+'
test_member-3_216:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/member-3.C'
    sources:
      binary: member-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .\\\\).
          before .\\\\.. token")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .\\\\).
          before .\\\\.. token")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .\\\\).
          before .->. token")[^\n]*\n?)+'
test_member-3_896:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/member-3.C'
    sources:
      binary: member-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .\\\\).
          before .\\\\.. token")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .\\\\).
          before .\\\\.. token")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .\\\\).
          before .->. token")[^\n]*\n?)+'
test_member-3_897:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/member-3.C'
    sources:
      binary: member-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .\\\\).
          before .\\\\.. token")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .\\\\).
          before .\\\\.. token")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .\\\\).
          before .->. token")[^\n]*\n?)+'
test_member-3_898:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/member-3.C'
    sources:
      binary: member-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .\\\\).
          before .\\\\.. token")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .\\\\).
          before .\\\\.. token")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected .\\\\).
          before .->. token")[^\n]*\n?)+'
test_member-4_217:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/member-4.C'
    sources:
      binary: member-4.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once in data clauses")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once in data clauses")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once in data clauses")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more than
          once in data clauses")[^\n]*\n?)+'
test_member-4_218:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/member-4.C'
    sources:
      binary: member-4.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once in data clauses")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once in data clauses")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once in data clauses")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more than
          once in data clauses")[^\n]*\n?)+'
test_member-4_219:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/member-4.C'
    sources:
      binary: member-4.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once in data clauses")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once in data clauses")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once in data clauses")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more than
          once in data clauses")[^\n]*\n?)+'
test_member-4_899:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/member-4.C'
    sources:
      binary: member-4.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once in data clauses")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once in data clauses")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once in data clauses")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more than
          once in data clauses")[^\n]*\n?)+'
test_member-4_900:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/member-4.C'
    sources:
      binary: member-4.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once in data clauses")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once in data clauses")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once in data clauses")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more than
          once in data clauses")[^\n]*\n?)+'
test_member-4_901:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/member-4.C'
    sources:
      binary: member-4.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once in data clauses")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once in data clauses")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more
          than once in data clauses")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears more than
          once in data clauses")[^\n]*\n?)+'
test_method-1_220:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/method-1.C'
    sources:
      binary: method-1.s
  group: GRPSERIAL
test_method-1_221:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/method-1.C'
    sources:
      binary: method-1.s
  group: GRPSERIAL
test_method-1_222:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/method-1.C'
    sources:
      binary: method-1.s
  group: GRPSERIAL
test_method-1_902:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/method-1.C'
    sources:
      binary: method-1.s
  group: GRPSERIAL
test_method-1_903:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/method-1.C'
    sources:
      binary: method-1.s
  group: GRPSERIAL
test_method-1_904:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/method-1.C'
    sources:
      binary: method-1.s
  group: GRPSERIAL
test_openmp-simd-1_223:
  build:
    cflags: "-std=gnu++98 -fopenmp-simd -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/openmp-simd-1.C'
    sources:
      binary: openmp-simd-1.s
  group: GRPSERIAL
test_openmp-simd-1_224:
  build:
    cflags: "-std=gnu++11 -fopenmp-simd -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/openmp-simd-1.C'
    sources:
      binary: openmp-simd-1.s
  group: GRPSERIAL
test_openmp-simd-1_225:
  build:
    cflags: "-std=gnu++14 -fopenmp-simd -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/openmp-simd-1.C'
    sources:
      binary: openmp-simd-1.s
  group: GRPSERIAL
test_openmp-simd-1_905:
  build:
    cflags: "-std=gnu++98 -fopenmp-simd -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/openmp-simd-1.C'
    sources:
      binary: openmp-simd-1.s
  group: GRPSERIAL
test_openmp-simd-1_906:
  build:
    cflags: "-std=gnu++11 -fopenmp-simd -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/openmp-simd-1.C'
    sources:
      binary: openmp-simd-1.s
  group: GRPSERIAL
test_openmp-simd-1_907:
  build:
    cflags: "-std=gnu++14 -fopenmp-simd -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/openmp-simd-1.C'
    sources:
      binary: openmp-simd-1.s
  group: GRPSERIAL
test_openmp-simd-2_226:
  build:
    cflags: "-std=gnu++98 -fopenmp-simd -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/openmp-simd-2.C'
    sources:
      binary: openmp-simd-2.s
  group: GRPSERIAL
test_openmp-simd-2_227:
  build:
    cflags: "-std=gnu++11 -fopenmp-simd -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/openmp-simd-2.C'
    sources:
      binary: openmp-simd-2.s
  group: GRPSERIAL
test_openmp-simd-2_228:
  build:
    cflags: "-std=gnu++14 -fopenmp-simd -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/openmp-simd-2.C'
    sources:
      binary: openmp-simd-2.s
  group: GRPSERIAL
test_openmp-simd-2_908:
  build:
    cflags: "-std=gnu++98 -fopenmp-simd -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/openmp-simd-2.C'
    sources:
      binary: openmp-simd-2.s
  group: GRPSERIAL
test_openmp-simd-2_909:
  build:
    cflags: "-std=gnu++11 -fopenmp-simd -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/openmp-simd-2.C'
    sources:
      binary: openmp-simd-2.s
  group: GRPSERIAL
test_openmp-simd-2_910:
  build:
    cflags: "-std=gnu++14 -fopenmp-simd -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/openmp-simd-2.C'
    sources:
      binary: openmp-simd-2.s
  group: GRPSERIAL
test_openmp-simd-3_229:
  build:
    cflags: "-std=gnu++98 -fopenmp-simd -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/openmp-simd-3.C'
    sources:
      binary: openmp-simd-3.s
  group: GRPSERIAL
test_openmp-simd-3_230:
  build:
    cflags: "-std=gnu++11 -fopenmp-simd -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/openmp-simd-3.C'
    sources:
      binary: openmp-simd-3.s
  group: GRPSERIAL
test_openmp-simd-3_231:
  build:
    cflags: "-std=gnu++14 -fopenmp-simd -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/openmp-simd-3.C'
    sources:
      binary: openmp-simd-3.s
  group: GRPSERIAL
test_openmp-simd-3_911:
  build:
    cflags: "-std=gnu++98 -fopenmp-simd -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/openmp-simd-3.C'
    sources:
      binary: openmp-simd-3.s
  group: GRPSERIAL
test_openmp-simd-3_912:
  build:
    cflags: "-std=gnu++11 -fopenmp-simd -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/openmp-simd-3.C'
    sources:
      binary: openmp-simd-3.s
  group: GRPSERIAL
test_openmp-simd-3_913:
  build:
    cflags: "-std=gnu++14 -fopenmp-simd -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/openmp-simd-3.C'
    sources:
      binary: openmp-simd-3.s
  group: GRPSERIAL
test_ordered-1_232:
  build:
    cflags: "-std=gnu++98 -fopenmp -fdump-tree-omplower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/ordered-1.C'
    sources:
      binary: ordered-1.s
  group: GRPSERIAL
test_ordered-1_233:
  build:
    cflags: "-std=gnu++11 -fopenmp -fdump-tree-omplower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/ordered-1.C'
    sources:
      binary: ordered-1.s
  group: GRPSERIAL
test_ordered-1_234:
  build:
    cflags: "-std=gnu++14 -fopenmp -fdump-tree-omplower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/ordered-1.C'
    sources:
      binary: ordered-1.s
  group: GRPSERIAL
test_ordered-1_914:
  build:
    cflags: "-std=gnu++98 -fopenmp -fdump-tree-omplower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/ordered-1.C'
    sources:
      binary: ordered-1.s
  group: GRPSERIAL
test_ordered-1_915:
  build:
    cflags: "-std=gnu++11 -fopenmp -fdump-tree-omplower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/ordered-1.C'
    sources:
      binary: ordered-1.s
  group: GRPSERIAL
test_ordered-1_916:
  build:
    cflags: "-std=gnu++14 -fopenmp -fdump-tree-omplower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/ordered-1.C'
    sources:
      binary: ordered-1.s
  group: GRPSERIAL
test_ordered-2_235:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/ordered-2.C'
    sources:
      binary: ordered-2.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region may not
          be closely nested inside of")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_ordered-2_236:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/ordered-2.C'
    sources:
      binary: ordered-2.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region may not
          be closely nested inside of")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_ordered-2_237:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/ordered-2.C'
    sources:
      binary: ordered-2.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region may not
          be closely nested inside of")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_ordered-2_917:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/ordered-2.C'
    sources:
      binary: ordered-2.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region may not
          be closely nested inside of")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_ordered-2_918:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/ordered-2.C'
    sources:
      binary: ordered-2.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region may not
          be closely nested inside of")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_ordered-2_919:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/ordered-2.C'
    sources:
      binary: ordered-2.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region may not
          be closely nested inside of")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_parallel-1_238:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/parallel-1.C'
    sources:
      binary: parallel-1.s
  group: GRPSERIAL
test_parallel-1_239:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/parallel-1.C'
    sources:
      binary: parallel-1.s
  group: GRPSERIAL
test_parallel-1_240:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/parallel-1.C'
    sources:
      binary: parallel-1.s
  group: GRPSERIAL
test_parallel-1_920:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/parallel-1.C'
    sources:
      binary: parallel-1.s
  group: GRPSERIAL
test_parallel-1_921:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/parallel-1.C'
    sources:
      binary: parallel-1.s
  group: GRPSERIAL
test_parallel-1_922:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/parallel-1.C'
    sources:
      binary: parallel-1.s
  group: GRPSERIAL
test_parallel-2_241:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/parallel-2.C'
    sources:
      binary: parallel-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing")[^\n]*\n?)+'
test_parallel-2_242:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/parallel-2.C'
    sources:
      binary: parallel-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing")[^\n]*\n?)+'
test_parallel-2_243:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/parallel-2.C'
    sources:
      binary: parallel-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing")[^\n]*\n?)+'
test_parallel-2_923:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/parallel-2.C'
    sources:
      binary: parallel-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing")[^\n]*\n?)+'
test_parallel-2_924:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/parallel-2.C'
    sources:
      binary: parallel-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing")[^\n]*\n?)+'
test_parallel-2_925:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/parallel-2.C'
    sources:
      binary: parallel-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing")[^\n]*\n?)+'
test_parallel-3_244:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/parallel-3.C'
    sources:
      binary: parallel-3.s
  group: GRPSERIAL
test_parallel-3_245:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/parallel-3.C'
    sources:
      binary: parallel-3.s
  group: GRPSERIAL
test_parallel-3_246:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/parallel-3.C'
    sources:
      binary: parallel-3.s
  group: GRPSERIAL
test_parallel-3_926:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/parallel-3.C'
    sources:
      binary: parallel-3.s
  group: GRPSERIAL
test_parallel-3_927:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/parallel-3.C'
    sources:
      binary: parallel-3.s
  group: GRPSERIAL
test_parallel-3_928:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/parallel-3.C'
    sources:
      binary: parallel-3.s
  group: GRPSERIAL
test_parallel-4_247:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/parallel-4.C'
    sources:
      binary: parallel-4.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many")[^\n]*\n?)+'
test_parallel-4_248:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/parallel-4.C'
    sources:
      binary: parallel-4.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many")[^\n]*\n?)+'
test_parallel-4_249:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/parallel-4.C'
    sources:
      binary: parallel-4.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many")[^\n]*\n?)+'
test_parallel-4_929:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/parallel-4.C'
    sources:
      binary: parallel-4.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many")[^\n]*\n?)+'
test_parallel-4_930:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/parallel-4.C'
    sources:
      binary: parallel-4.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many")[^\n]*\n?)+'
test_parallel-4_931:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/parallel-4.C'
    sources:
      binary: parallel-4.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too many")[^\n]*\n?)+'
test_parallel-5_250:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/parallel-5.C'
    sources:
      binary: parallel-5.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''nowait\''")[^\n]*\n?)+'
test_parallel-5_251:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/parallel-5.C'
    sources:
      binary: parallel-5.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''nowait\''")[^\n]*\n?)+'
test_parallel-5_252:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/parallel-5.C'
    sources:
      binary: parallel-5.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''nowait\''")[^\n]*\n?)+'
test_parallel-5_932:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/parallel-5.C'
    sources:
      binary: parallel-5.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''nowait\''")[^\n]*\n?)+'
test_parallel-5_933:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/parallel-5.C'
    sources:
      binary: parallel-5.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''nowait\''")[^\n]*\n?)+'
test_parallel-5_934:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/parallel-5.C'
    sources:
      binary: parallel-5.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''nowait\''")[^\n]*\n?)+'
test_pr24849_253:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr24849.C'
    sources:
      binary: pr24849.s
  group: GRPSERIAL
test_pr24849_254:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr24849.C'
    sources:
      binary: pr24849.s
  group: GRPSERIAL
test_pr24849_255:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr24849.C'
    sources:
      binary: pr24849.s
  group: GRPSERIAL
test_pr24849_935:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr24849.C'
    sources:
      binary: pr24849.s
  group: GRPSERIAL
test_pr24849_936:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr24849.C'
    sources:
      binary: pr24849.s
  group: GRPSERIAL
test_pr24849_937:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr24849.C'
    sources:
      binary: pr24849.s
  group: GRPSERIAL
test_pr25874_256:
  build:
    cflags: "-std=gnu++98 -O -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr25874.C'
    sources:
      binary: pr25874.s
  group: GRPSERIAL
test_pr25874_257:
  build:
    cflags: "-std=gnu++11 -O -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr25874.C'
    sources:
      binary: pr25874.s
  group: GRPSERIAL
test_pr25874_258:
  build:
    cflags: "-std=gnu++14 -O -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr25874.C'
    sources:
      binary: pr25874.s
  group: GRPSERIAL
test_pr25874_938:
  build:
    cflags: "-std=gnu++98 -O -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr25874.C'
    sources:
      binary: pr25874.s
  group: GRPSERIAL
test_pr25874_939:
  build:
    cflags: "-std=gnu++11 -O -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr25874.C'
    sources:
      binary: pr25874.s
  group: GRPSERIAL
test_pr25874_940:
  build:
    cflags: "-std=gnu++14 -O -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr25874.C'
    sources:
      binary: pr25874.s
  group: GRPSERIAL
test_pr25996_259:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr25996.C'
    sources:
      binary: pr25996.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared|expected
          iteration decl")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared|invalid
          controlling predicate")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared|invalid
          increment expression")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared|expected
          iteration decl")[^\n]*\n?)+'
test_pr25996_260:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr25996.C'
    sources:
      binary: pr25996.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared|expected
          iteration decl")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared|invalid
          controlling predicate")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared|invalid
          increment expression")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared|expected
          iteration decl")[^\n]*\n?)+'
test_pr25996_261:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr25996.C'
    sources:
      binary: pr25996.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared|expected
          iteration decl")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared|invalid
          controlling predicate")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared|invalid
          increment expression")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared|expected
          iteration decl")[^\n]*\n?)+'
test_pr25996_941:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr25996.C'
    sources:
      binary: pr25996.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared|expected
          iteration decl")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared|invalid
          controlling predicate")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared|invalid
          increment expression")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared|expected
          iteration decl")[^\n]*\n?)+'
test_pr25996_942:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr25996.C'
    sources:
      binary: pr25996.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared|expected
          iteration decl")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared|invalid
          controlling predicate")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared|invalid
          increment expression")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared|expected
          iteration decl")[^\n]*\n?)+'
test_pr25996_943:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr25996.C'
    sources:
      binary: pr25996.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared|expected
          iteration decl")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared|invalid
          controlling predicate")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared|invalid
          increment expression")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not declared|expected
          iteration decl")[^\n]*\n?)+'
test_pr26611-1_262:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26611-1.C'
    sources:
      binary: pr26611-1.s
  group: GRPSERIAL
test_pr26611-1_263:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26611-1.C'
    sources:
      binary: pr26611-1.s
  group: GRPSERIAL
test_pr26611-1_264:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26611-1.C'
    sources:
      binary: pr26611-1.s
  group: GRPSERIAL
test_pr26611-1_944:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26611-1.C'
    sources:
      binary: pr26611-1.s
  group: GRPSERIAL
test_pr26611-1_945:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26611-1.C'
    sources:
      binary: pr26611-1.s
  group: GRPSERIAL
test_pr26611-1_946:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26611-1.C'
    sources:
      binary: pr26611-1.s
  group: GRPSERIAL
test_pr26611-2_265:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26611-2.C'
    sources:
      binary: pr26611-2.s
  group: GRPSERIAL
test_pr26611-2_266:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26611-2.C'
    sources:
      binary: pr26611-2.s
  group: GRPSERIAL
test_pr26611-2_267:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26611-2.C'
    sources:
      binary: pr26611-2.s
  group: GRPSERIAL
test_pr26611-2_947:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26611-2.C'
    sources:
      binary: pr26611-2.s
  group: GRPSERIAL
test_pr26611-2_948:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26611-2.C'
    sources:
      binary: pr26611-2.s
  group: GRPSERIAL
test_pr26611-2_949:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26611-2.C'
    sources:
      binary: pr26611-2.s
  group: GRPSERIAL
test_pr26690-1_268:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26690-1.C'
    sources:
      binary: pr26690-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no matching function")[^\n]*\n?)+'
test_pr26690-1_269:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26690-1.C'
    sources:
      binary: pr26690-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no matching function")[^\n]*\n?)+'
test_pr26690-1_270:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26690-1.C'
    sources:
      binary: pr26690-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no matching function")[^\n]*\n?)+'
test_pr26690-1_950:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26690-1.C'
    sources:
      binary: pr26690-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no matching function")[^\n]*\n?)+'
test_pr26690-1_951:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26690-1.C'
    sources:
      binary: pr26690-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no matching function")[^\n]*\n?)+'
test_pr26690-1_952:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26690-1.C'
    sources:
      binary: pr26690-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no matching function")[^\n]*\n?)+'
test_pr26690-2_271:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26690-2.C'
    sources:
      binary: pr26690-2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("call of overloaded")[^\n]*\n?)+'
test_pr26690-2_272:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26690-2.C'
    sources:
      binary: pr26690-2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("call of overloaded")[^\n]*\n?)+'
test_pr26690-2_273:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26690-2.C'
    sources:
      binary: pr26690-2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("call of overloaded")[^\n]*\n?)+'
test_pr26690-2_953:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26690-2.C'
    sources:
      binary: pr26690-2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("call of overloaded")[^\n]*\n?)+'
test_pr26690-2_954:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26690-2.C'
    sources:
      binary: pr26690-2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("call of overloaded")[^\n]*\n?)+'
test_pr26690-2_955:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26690-2.C'
    sources:
      binary: pr26690-2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("call of overloaded")[^\n]*\n?)+'
test_pr26823-1_274:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26823-1.C'
    sources:
      binary: pr26823-1.s
  group: GRPSERIAL
test_pr26823-1_275:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26823-1.C'
    sources:
      binary: pr26823-1.s
  group: GRPSERIAL
test_pr26823-1_276:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26823-1.C'
    sources:
      binary: pr26823-1.s
  group: GRPSERIAL
test_pr26823-1_956:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26823-1.C'
    sources:
      binary: pr26823-1.s
  group: GRPSERIAL
test_pr26823-1_957:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26823-1.C'
    sources:
      binary: pr26823-1.s
  group: GRPSERIAL
test_pr26823-1_958:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26823-1.C'
    sources:
      binary: pr26823-1.s
  group: GRPSERIAL
test_pr26823-2_277:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26823-2.C'
    sources:
      binary: pr26823-2.s
  group: GRPSERIAL
test_pr26823-2_278:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26823-2.C'
    sources:
      binary: pr26823-2.s
  group: GRPSERIAL
test_pr26823-2_279:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26823-2.C'
    sources:
      binary: pr26823-2.s
  group: GRPSERIAL
test_pr26823-2_959:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26823-2.C'
    sources:
      binary: pr26823-2.s
  group: GRPSERIAL
test_pr26823-2_960:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26823-2.C'
    sources:
      binary: pr26823-2.s
  group: GRPSERIAL
test_pr26823-2_961:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26823-2.C'
    sources:
      binary: pr26823-2.s
  group: GRPSERIAL
test_pr26913_280:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26913.C'
    sources:
      binary: pr26913.s
  group: GRPSERIAL
test_pr26913_281:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26913.C'
    sources:
      binary: pr26913.s
  group: GRPSERIAL
test_pr26913_282:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26913.C'
    sources:
      binary: pr26913.s
  group: GRPSERIAL
test_pr26913_962:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26913.C'
    sources:
      binary: pr26913.s
  group: GRPSERIAL
test_pr26913_963:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26913.C'
    sources:
      binary: pr26913.s
  group: GRPSERIAL
test_pr26913_964:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr26913.C'
    sources:
      binary: pr26913.s
  group: GRPSERIAL
test_pr27310_283:
  build:
    cflags: "-std=gnu++98 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27310.C'
    sources:
      binary: pr27310.s
  group: GRPSERIAL
test_pr27310_284:
  build:
    cflags: "-std=gnu++11 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27310.C'
    sources:
      binary: pr27310.s
  group: GRPSERIAL
test_pr27310_285:
  build:
    cflags: "-std=gnu++14 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27310.C'
    sources:
      binary: pr27310.s
  group: GRPSERIAL
test_pr27310_965:
  build:
    cflags: "-std=gnu++98 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27310.C'
    sources:
      binary: pr27310.s
  group: GRPSERIAL
test_pr27310_966:
  build:
    cflags: "-std=gnu++11 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27310.C'
    sources:
      binary: pr27310.s
  group: GRPSERIAL
test_pr27310_967:
  build:
    cflags: "-std=gnu++14 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27310.C'
    sources:
      binary: pr27310.s
  group: GRPSERIAL
test_pr27325_286:
  build:
    cflags: "-std=gnu++98 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27325.C'
    sources:
      binary: pr27325.s
  group: GRPSERIAL
test_pr27325_287:
  build:
    cflags: "-std=gnu++11 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27325.C'
    sources:
      binary: pr27325.s
  group: GRPSERIAL
test_pr27325_288:
  build:
    cflags: "-std=gnu++14 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27325.C'
    sources:
      binary: pr27325.s
  group: GRPSERIAL
test_pr27325_968:
  build:
    cflags: "-std=gnu++98 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27325.C'
    sources:
      binary: pr27325.s
  group: GRPSERIAL
test_pr27325_969:
  build:
    cflags: "-std=gnu++11 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27325.C'
    sources:
      binary: pr27325.s
  group: GRPSERIAL
test_pr27325_970:
  build:
    cflags: "-std=gnu++14 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27325.C'
    sources:
      binary: pr27325.s
  group: GRPSERIAL
test_pr27337-1_289:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27337-1.C'
    sources:
      binary: pr27337-1.s
  group: GRPSERIAL
test_pr27337-1_290:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27337-1.C'
    sources:
      binary: pr27337-1.s
  group: GRPSERIAL
test_pr27337-1_291:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27337-1.C'
    sources:
      binary: pr27337-1.s
  group: GRPSERIAL
test_pr27337-1_971:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27337-1.C'
    sources:
      binary: pr27337-1.s
  group: GRPSERIAL
test_pr27337-1_972:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27337-1.C'
    sources:
      binary: pr27337-1.s
  group: GRPSERIAL
test_pr27337-1_973:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27337-1.C'
    sources:
      binary: pr27337-1.s
  group: GRPSERIAL
test_pr27337-2_292:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27337-2.C'
    sources:
      binary: pr27337-2.s
  group: GRPSERIAL
test_pr27337-2_293:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27337-2.C'
    sources:
      binary: pr27337-2.s
  group: GRPSERIAL
test_pr27337-2_294:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27337-2.C'
    sources:
      binary: pr27337-2.s
  group: GRPSERIAL
test_pr27337-2_974:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27337-2.C'
    sources:
      binary: pr27337-2.s
  group: GRPSERIAL
test_pr27337-2_975:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27337-2.C'
    sources:
      binary: pr27337-2.s
  group: GRPSERIAL
test_pr27337-2_976:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27337-2.C'
    sources:
      binary: pr27337-2.s
  group: GRPSERIAL
test_pr27359_295:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27359.C'
    sources:
      binary: pr27359.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|was not
          declared")[^\n]*\n?)+'
test_pr27359_296:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27359.C'
    sources:
      binary: pr27359.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|was not
          declared")[^\n]*\n?)+'
test_pr27359_297:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27359.C'
    sources:
      binary: pr27359.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|was not
          declared")[^\n]*\n?)+'
test_pr27359_977:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27359.C'
    sources:
      binary: pr27359.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|was not
          declared")[^\n]*\n?)+'
test_pr27359_978:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27359.C'
    sources:
      binary: pr27359.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|was not
          declared")[^\n]*\n?)+'
test_pr27359_979:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27359.C'
    sources:
      binary: pr27359.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected|was not
          declared")[^\n]*\n?)+'
test_pr27415_298:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27415.C'
    sources:
      binary: pr27415.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("should not be
          firstprivate")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("should not be
          reduction")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("should not be
          reduction")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("should not be
          firstprivate")[^\n]*\n?)+'
test_pr27415_299:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27415.C'
    sources:
      binary: pr27415.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("should not be
          firstprivate")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("should not be
          reduction")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("should not be
          reduction")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("should not be
          firstprivate")[^\n]*\n?)+'
test_pr27415_300:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27415.C'
    sources:
      binary: pr27415.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("should not be
          firstprivate")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("should not be
          reduction")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("should not be
          reduction")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("should not be
          firstprivate")[^\n]*\n?)+'
test_pr27415_980:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27415.C'
    sources:
      binary: pr27415.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("should not be
          firstprivate")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("should not be
          reduction")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("should not be
          reduction")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("should not be
          firstprivate")[^\n]*\n?)+'
test_pr27415_981:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27415.C'
    sources:
      binary: pr27415.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("should not be
          firstprivate")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("should not be
          reduction")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("should not be
          reduction")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("should not be
          firstprivate")[^\n]*\n?)+'
test_pr27415_982:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27415.C'
    sources:
      binary: pr27415.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("should not be
          firstprivate")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("should not be
          reduction")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("should not be
          reduction")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("should not be
          firstprivate")[^\n]*\n?)+'
test_pr27499_301:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27499.C'
    sources:
      binary: pr27499.s
  group: GRPSERIAL
test_pr27499_302:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27499.C'
    sources:
      binary: pr27499.s
  group: GRPSERIAL
test_pr27499_303:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27499.C'
    sources:
      binary: pr27499.s
  group: GRPSERIAL
test_pr27499_983:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27499.C'
    sources:
      binary: pr27499.s
  group: GRPSERIAL
test_pr27499_984:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27499.C'
    sources:
      binary: pr27499.s
  group: GRPSERIAL
test_pr27499_985:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr27499.C'
    sources:
      binary: pr27499.s
  group: GRPSERIAL
test_pr29965-10_307:
  build:
    cflags: "-std=gnu++98 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-10.C'
    sources:
      binary: pr29965-10.s
  group: GRPSERIAL
test_pr29965-10_308:
  build:
    cflags: "-std=gnu++11 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-10.C'
    sources:
      binary: pr29965-10.s
  group: GRPSERIAL
test_pr29965-10_309:
  build:
    cflags: "-std=gnu++14 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-10.C'
    sources:
      binary: pr29965-10.s
  group: GRPSERIAL
test_pr29965-10_989:
  build:
    cflags: "-std=gnu++98 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-10.C'
    sources:
      binary: pr29965-10.s
  group: GRPSERIAL
test_pr29965-10_990:
  build:
    cflags: "-std=gnu++11 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-10.C'
    sources:
      binary: pr29965-10.s
  group: GRPSERIAL
test_pr29965-10_991:
  build:
    cflags: "-std=gnu++14 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-10.C'
    sources:
      binary: pr29965-10.s
  group: GRPSERIAL
test_pr29965-1_304:
  build:
    cflags: "-std=gnu++98 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-1.C'
    sources:
      binary: pr29965-1.s
  group: GRPSERIAL
test_pr29965-1_305:
  build:
    cflags: "-std=gnu++11 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-1.C'
    sources:
      binary: pr29965-1.s
  group: GRPSERIAL
test_pr29965-1_306:
  build:
    cflags: "-std=gnu++14 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-1.C'
    sources:
      binary: pr29965-1.s
  group: GRPSERIAL
test_pr29965-1_986:
  build:
    cflags: "-std=gnu++98 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-1.C'
    sources:
      binary: pr29965-1.s
  group: GRPSERIAL
test_pr29965-1_987:
  build:
    cflags: "-std=gnu++11 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-1.C'
    sources:
      binary: pr29965-1.s
  group: GRPSERIAL
test_pr29965-1_988:
  build:
    cflags: "-std=gnu++14 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-1.C'
    sources:
      binary: pr29965-1.s
  group: GRPSERIAL
test_pr29965-2_310:
  build:
    cflags: "-std=gnu++98 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-2.C'
    sources:
      binary: pr29965-2.s
  group: GRPSERIAL
test_pr29965-2_311:
  build:
    cflags: "-std=gnu++11 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-2.C'
    sources:
      binary: pr29965-2.s
  group: GRPSERIAL
test_pr29965-2_312:
  build:
    cflags: "-std=gnu++14 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-2.C'
    sources:
      binary: pr29965-2.s
  group: GRPSERIAL
test_pr29965-2_992:
  build:
    cflags: "-std=gnu++98 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-2.C'
    sources:
      binary: pr29965-2.s
  group: GRPSERIAL
test_pr29965-2_993:
  build:
    cflags: "-std=gnu++11 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-2.C'
    sources:
      binary: pr29965-2.s
  group: GRPSERIAL
test_pr29965-2_994:
  build:
    cflags: "-std=gnu++14 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-2.C'
    sources:
      binary: pr29965-2.s
  group: GRPSERIAL
test_pr29965-3_313:
  build:
    cflags: "-std=gnu++98 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-3.C'
    sources:
      binary: pr29965-3.s
  group: GRPSERIAL
test_pr29965-3_314:
  build:
    cflags: "-std=gnu++11 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-3.C'
    sources:
      binary: pr29965-3.s
  group: GRPSERIAL
test_pr29965-3_315:
  build:
    cflags: "-std=gnu++14 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-3.C'
    sources:
      binary: pr29965-3.s
  group: GRPSERIAL
test_pr29965-3_995:
  build:
    cflags: "-std=gnu++98 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-3.C'
    sources:
      binary: pr29965-3.s
  group: GRPSERIAL
test_pr29965-3_996:
  build:
    cflags: "-std=gnu++11 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-3.C'
    sources:
      binary: pr29965-3.s
  group: GRPSERIAL
test_pr29965-3_997:
  build:
    cflags: "-std=gnu++14 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-3.C'
    sources:
      binary: pr29965-3.s
  group: GRPSERIAL
test_pr29965-4_1000:
  build:
    cflags: "-std=gnu++14 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-4.C'
    sources:
      binary: pr29965-4.s
  group: GRPSERIAL
test_pr29965-4_316:
  build:
    cflags: "-std=gnu++98 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-4.C'
    sources:
      binary: pr29965-4.s
  group: GRPSERIAL
test_pr29965-4_317:
  build:
    cflags: "-std=gnu++11 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-4.C'
    sources:
      binary: pr29965-4.s
  group: GRPSERIAL
test_pr29965-4_318:
  build:
    cflags: "-std=gnu++14 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-4.C'
    sources:
      binary: pr29965-4.s
  group: GRPSERIAL
test_pr29965-4_998:
  build:
    cflags: "-std=gnu++98 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-4.C'
    sources:
      binary: pr29965-4.s
  group: GRPSERIAL
test_pr29965-4_999:
  build:
    cflags: "-std=gnu++11 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-4.C'
    sources:
      binary: pr29965-4.s
  group: GRPSERIAL
test_pr29965-5_1001:
  build:
    cflags: "-std=gnu++98 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-5.C'
    sources:
      binary: pr29965-5.s
  group: GRPSERIAL
test_pr29965-5_1002:
  build:
    cflags: "-std=gnu++11 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-5.C'
    sources:
      binary: pr29965-5.s
  group: GRPSERIAL
test_pr29965-5_1003:
  build:
    cflags: "-std=gnu++14 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-5.C'
    sources:
      binary: pr29965-5.s
  group: GRPSERIAL
test_pr29965-5_319:
  build:
    cflags: "-std=gnu++98 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-5.C'
    sources:
      binary: pr29965-5.s
  group: GRPSERIAL
test_pr29965-5_320:
  build:
    cflags: "-std=gnu++11 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-5.C'
    sources:
      binary: pr29965-5.s
  group: GRPSERIAL
test_pr29965-5_321:
  build:
    cflags: "-std=gnu++14 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-5.C'
    sources:
      binary: pr29965-5.s
  group: GRPSERIAL
test_pr29965-6_1004:
  build:
    cflags: "-std=gnu++98 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-6.C'
    sources:
      binary: pr29965-6.s
  group: GRPSERIAL
test_pr29965-6_1005:
  build:
    cflags: "-std=gnu++11 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-6.C'
    sources:
      binary: pr29965-6.s
  group: GRPSERIAL
test_pr29965-6_1006:
  build:
    cflags: "-std=gnu++14 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-6.C'
    sources:
      binary: pr29965-6.s
  group: GRPSERIAL
test_pr29965-6_322:
  build:
    cflags: "-std=gnu++98 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-6.C'
    sources:
      binary: pr29965-6.s
  group: GRPSERIAL
test_pr29965-6_323:
  build:
    cflags: "-std=gnu++11 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-6.C'
    sources:
      binary: pr29965-6.s
  group: GRPSERIAL
test_pr29965-6_324:
  build:
    cflags: "-std=gnu++14 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-6.C'
    sources:
      binary: pr29965-6.s
  group: GRPSERIAL
test_pr29965-7_1007:
  build:
    cflags: "-std=gnu++98 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-7.C'
    sources:
      binary: pr29965-7.s
  group: GRPSERIAL
test_pr29965-7_1008:
  build:
    cflags: "-std=gnu++11 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-7.C'
    sources:
      binary: pr29965-7.s
  group: GRPSERIAL
test_pr29965-7_1009:
  build:
    cflags: "-std=gnu++14 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-7.C'
    sources:
      binary: pr29965-7.s
  group: GRPSERIAL
test_pr29965-7_325:
  build:
    cflags: "-std=gnu++98 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-7.C'
    sources:
      binary: pr29965-7.s
  group: GRPSERIAL
test_pr29965-7_326:
  build:
    cflags: "-std=gnu++11 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-7.C'
    sources:
      binary: pr29965-7.s
  group: GRPSERIAL
test_pr29965-7_327:
  build:
    cflags: "-std=gnu++14 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-7.C'
    sources:
      binary: pr29965-7.s
  group: GRPSERIAL
test_pr29965-8_1010:
  build:
    cflags: "-std=gnu++98 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-8.C'
    sources:
      binary: pr29965-8.s
  group: GRPSERIAL
test_pr29965-8_1011:
  build:
    cflags: "-std=gnu++11 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-8.C'
    sources:
      binary: pr29965-8.s
  group: GRPSERIAL
test_pr29965-8_1012:
  build:
    cflags: "-std=gnu++14 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-8.C'
    sources:
      binary: pr29965-8.s
  group: GRPSERIAL
test_pr29965-8_328:
  build:
    cflags: "-std=gnu++98 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-8.C'
    sources:
      binary: pr29965-8.s
  group: GRPSERIAL
test_pr29965-8_329:
  build:
    cflags: "-std=gnu++11 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-8.C'
    sources:
      binary: pr29965-8.s
  group: GRPSERIAL
test_pr29965-8_330:
  build:
    cflags: "-std=gnu++14 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-8.C'
    sources:
      binary: pr29965-8.s
  group: GRPSERIAL
test_pr29965-9_1013:
  build:
    cflags: "-std=gnu++98 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-9.C'
    sources:
      binary: pr29965-9.s
  group: GRPSERIAL
test_pr29965-9_1014:
  build:
    cflags: "-std=gnu++11 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-9.C'
    sources:
      binary: pr29965-9.s
  group: GRPSERIAL
test_pr29965-9_1015:
  build:
    cflags: "-std=gnu++14 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-9.C'
    sources:
      binary: pr29965-9.s
  group: GRPSERIAL
test_pr29965-9_331:
  build:
    cflags: "-std=gnu++98 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-9.C'
    sources:
      binary: pr29965-9.s
  group: GRPSERIAL
test_pr29965-9_332:
  build:
    cflags: "-std=gnu++11 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-9.C'
    sources:
      binary: pr29965-9.s
  group: GRPSERIAL
test_pr29965-9_333:
  build:
    cflags: "-std=gnu++14 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr29965-9.C'
    sources:
      binary: pr29965-9.s
  group: GRPSERIAL
test_pr30494_1016:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr30494.C'
    sources:
      binary: pr30494.s
  group: GRPSERIAL
test_pr30494_1017:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr30494.C'
    sources:
      binary: pr30494.s
  group: GRPSERIAL
test_pr30494_1018:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr30494.C'
    sources:
      binary: pr30494.s
  group: GRPSERIAL
test_pr30494_334:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr30494.C'
    sources:
      binary: pr30494.s
  group: GRPSERIAL
test_pr30494_335:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr30494.C'
    sources:
      binary: pr30494.s
  group: GRPSERIAL
test_pr30494_336:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr30494.C'
    sources:
      binary: pr30494.s
  group: GRPSERIAL
test_pr30558_1019:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr30558.C'
    sources:
      binary: pr30558.s
  group: GRPSERIAL
test_pr30558_1020:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr30558.C'
    sources:
      binary: pr30558.s
  group: GRPSERIAL
test_pr30558_1021:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr30558.C'
    sources:
      binary: pr30558.s
  group: GRPSERIAL
test_pr30558_337:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr30558.C'
    sources:
      binary: pr30558.s
  group: GRPSERIAL
test_pr30558_338:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr30558.C'
    sources:
      binary: pr30558.s
  group: GRPSERIAL
test_pr30558_339:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr30558.C'
    sources:
      binary: pr30558.s
  group: GRPSERIAL
test_pr30696_1022:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr30696.C'
    sources:
      binary: pr30696.s
  group: GRPSERIAL
test_pr30696_1023:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr30696.C'
    sources:
      binary: pr30696.s
  group: GRPSERIAL
test_pr30696_1024:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr30696.C'
    sources:
      binary: pr30696.s
  group: GRPSERIAL
test_pr30696_340:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr30696.C'
    sources:
      binary: pr30696.s
  group: GRPSERIAL
test_pr30696_341:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr30696.C'
    sources:
      binary: pr30696.s
  group: GRPSERIAL
test_pr30696_342:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr30696.C'
    sources:
      binary: pr30696.s
  group: GRPSERIAL
test_pr31598_1025:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr31598.C'
    sources:
      binary: pr31598.s
  group: GRPSERIAL
test_pr31598_1026:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr31598.C'
    sources:
      binary: pr31598.s
  group: GRPSERIAL
test_pr31598_1027:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr31598.C'
    sources:
      binary: pr31598.s
  group: GRPSERIAL
test_pr31598_343:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr31598.C'
    sources:
      binary: pr31598.s
  group: GRPSERIAL
test_pr31598_344:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr31598.C'
    sources:
      binary: pr31598.s
  group: GRPSERIAL
test_pr31598_345:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr31598.C'
    sources:
      binary: pr31598.s
  group: GRPSERIAL
test_pr31748_1028:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr31748.C'
    sources:
      binary: pr31748.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("struct A.*is not
          a variable")[^\n]*\n?)+'
test_pr31748_1029:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr31748.C'
    sources:
      binary: pr31748.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("struct A.*is not
          a variable")[^\n]*\n?)+'
test_pr31748_1030:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr31748.C'
    sources:
      binary: pr31748.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("struct A.*is not
          a variable")[^\n]*\n?)+'
test_pr31748_346:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr31748.C'
    sources:
      binary: pr31748.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("struct A.*is not
          a variable")[^\n]*\n?)+'
test_pr31748_347:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr31748.C'
    sources:
      binary: pr31748.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("struct A.*is not
          a variable")[^\n]*\n?)+'
test_pr31748_348:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr31748.C'
    sources:
      binary: pr31748.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("struct A.*is not
          a variable")[^\n]*\n?)+'
test_pr31769_1031:
  build:
    cflags: "-std=gnu++98 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr31769.C'
    sources:
      binary: pr31769.s
  group: GRPSERIAL
test_pr31769_1032:
  build:
    cflags: "-std=gnu++11 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr31769.C'
    sources:
      binary: pr31769.s
  group: GRPSERIAL
test_pr31769_1033:
  build:
    cflags: "-std=gnu++14 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr31769.C'
    sources:
      binary: pr31769.s
  group: GRPSERIAL
test_pr31769_349:
  build:
    cflags: "-std=gnu++98 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr31769.C'
    sources:
      binary: pr31769.s
  group: GRPSERIAL
test_pr31769_350:
  build:
    cflags: "-std=gnu++11 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr31769.C'
    sources:
      binary: pr31769.s
  group: GRPSERIAL
test_pr31769_351:
  build:
    cflags: "-std=gnu++14 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr31769.C'
    sources:
      binary: pr31769.s
  group: GRPSERIAL
test_pr32177_1034:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr32177.C'
    sources:
      binary: pr32177.s
  group: GRPSERIAL
test_pr32177_1035:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr32177.C'
    sources:
      binary: pr32177.s
  group: GRPSERIAL
test_pr32177_1036:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr32177.C'
    sources:
      binary: pr32177.s
  group: GRPSERIAL
test_pr32177_352:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr32177.C'
    sources:
      binary: pr32177.s
  group: GRPSERIAL
test_pr32177_353:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr32177.C'
    sources:
      binary: pr32177.s
  group: GRPSERIAL
test_pr32177_354:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr32177.C'
    sources:
      binary: pr32177.s
  group: GRPSERIAL
test_pr33333_1037:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr33333.C'
    sources:
      binary: pr33333.s
  group: GRPSERIAL
test_pr33333_1038:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr33333.C'
    sources:
      binary: pr33333.s
  group: GRPSERIAL
test_pr33333_1039:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr33333.C'
    sources:
      binary: pr33333.s
  group: GRPSERIAL
test_pr33333_355:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr33333.C'
    sources:
      binary: pr33333.s
  group: GRPSERIAL
test_pr33333_356:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr33333.C'
    sources:
      binary: pr33333.s
  group: GRPSERIAL
test_pr33333_357:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr33333.C'
    sources:
      binary: pr33333.s
  group: GRPSERIAL
test_pr33372-1_1040:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr33372-1.C'
    sources:
      binary: pr33372-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("chunk size expression
          must be integral")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''num_threads\''
          expression must be integral")[^\n]*\n?)+'
test_pr33372-1_1041:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr33372-1.C'
    sources:
      binary: pr33372-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("chunk size expression
          must be integral")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''num_threads\''
          expression must be integral")[^\n]*\n?)+'
test_pr33372-1_1042:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr33372-1.C'
    sources:
      binary: pr33372-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("chunk size expression
          must be integral")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''num_threads\''
          expression must be integral")[^\n]*\n?)+'
test_pr33372-1_358:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr33372-1.C'
    sources:
      binary: pr33372-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("chunk size expression
          must be integral")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''num_threads\''
          expression must be integral")[^\n]*\n?)+'
test_pr33372-1_359:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr33372-1.C'
    sources:
      binary: pr33372-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("chunk size expression
          must be integral")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''num_threads\''
          expression must be integral")[^\n]*\n?)+'
test_pr33372-1_360:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr33372-1.C'
    sources:
      binary: pr33372-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("chunk size expression
          must be integral")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''num_threads\''
          expression must be integral")[^\n]*\n?)+'
test_pr33372-2_1043:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr33372-2.C'
    sources:
      binary: pr33372-2.s
  group: GRPSERIAL
test_pr33372-2_1044:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr33372-2.C'
    sources:
      binary: pr33372-2.s
  group: GRPSERIAL
test_pr33372-2_1045:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr33372-2.C'
    sources:
      binary: pr33372-2.s
  group: GRPSERIAL
test_pr33372-2_361:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr33372-2.C'
    sources:
      binary: pr33372-2.s
  group: GRPSERIAL
test_pr33372-2_362:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr33372-2.C'
    sources:
      binary: pr33372-2.s
  group: GRPSERIAL
test_pr33372-2_363:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr33372-2.C'
    sources:
      binary: pr33372-2.s
  group: GRPSERIAL
test_pr33372-3_1046:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr33372-3.C'
    sources:
      binary: pr33372-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("chunk size expression
          must be integral")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''num_threads\''
          expression must be integral")[^\n]*\n?)+'
test_pr33372-3_1047:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr33372-3.C'
    sources:
      binary: pr33372-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("chunk size expression
          must be integral")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''num_threads\''
          expression must be integral")[^\n]*\n?)+'
test_pr33372-3_1048:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr33372-3.C'
    sources:
      binary: pr33372-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("chunk size expression
          must be integral")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''num_threads\''
          expression must be integral")[^\n]*\n?)+'
test_pr33372-3_364:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr33372-3.C'
    sources:
      binary: pr33372-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("chunk size expression
          must be integral")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''num_threads\''
          expression must be integral")[^\n]*\n?)+'
test_pr33372-3_365:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr33372-3.C'
    sources:
      binary: pr33372-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("chunk size expression
          must be integral")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''num_threads\''
          expression must be integral")[^\n]*\n?)+'
test_pr33372-3_366:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr33372-3.C'
    sources:
      binary: pr33372-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("chunk size expression
          must be integral")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''num_threads\''
          expression must be integral")[^\n]*\n?)+'
test_pr33890_1049:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr33890.C'
    sources:
      binary: pr33890.s
  group: GRPSERIAL
test_pr33890_1050:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr33890.C'
    sources:
      binary: pr33890.s
  group: GRPSERIAL
test_pr33890_1051:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr33890.C'
    sources:
      binary: pr33890.s
  group: GRPSERIAL
test_pr33890_367:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr33890.C'
    sources:
      binary: pr33890.s
  group: GRPSERIAL
test_pr33890_368:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr33890.C'
    sources:
      binary: pr33890.s
  group: GRPSERIAL
test_pr33890_369:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr33890.C'
    sources:
      binary: pr33890.s
  group: GRPSERIAL
test_pr34607_1052:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr34607.C'
    sources:
      binary: pr34607.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|expected")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|expected")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|expected")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected primary-expression")[^\n]*\n?)+'
test_pr34607_1053:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr34607.C'
    sources:
      binary: pr34607.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|expected")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|expected")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|expected")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected primary-expression")[^\n]*\n?)+'
test_pr34607_1054:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr34607.C'
    sources:
      binary: pr34607.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|expected")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|expected")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|expected")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected primary-expression")[^\n]*\n?)+'
test_pr34607_370:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr34607.C'
    sources:
      binary: pr34607.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|expected")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|expected")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|expected")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected primary-expression")[^\n]*\n?)+'
test_pr34607_371:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr34607.C'
    sources:
      binary: pr34607.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|expected")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|expected")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|expected")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected primary-expression")[^\n]*\n?)+'
test_pr34607_372:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr34607.C'
    sources:
      binary: pr34607.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|expected")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|expected")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared|expected")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected primary-expression")[^\n]*\n?)+'
test_pr34608_1055:
  build:
    cflags: "-std=gnu++98 -ftest-coverage -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr34608.C'
    sources:
      binary: pr34608.s
  group: GRPSERIAL
test_pr34608_1056:
  build:
    cflags: "-std=gnu++11 -ftest-coverage -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr34608.C'
    sources:
      binary: pr34608.s
  group: GRPSERIAL
test_pr34608_1057:
  build:
    cflags: "-std=gnu++14 -ftest-coverage -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr34608.C'
    sources:
      binary: pr34608.s
  group: GRPSERIAL
test_pr34608_373:
  build:
    cflags: "-std=gnu++98 -ftest-coverage -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr34608.C'
    sources:
      binary: pr34608.s
  group: GRPSERIAL
test_pr34608_374:
  build:
    cflags: "-std=gnu++11 -ftest-coverage -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr34608.C'
    sources:
      binary: pr34608.s
  group: GRPSERIAL
test_pr34608_375:
  build:
    cflags: "-std=gnu++14 -ftest-coverage -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr34608.C'
    sources:
      binary: pr34608.s
  group: GRPSERIAL
test_pr34694_1058:
  build:
    cflags: "-std=gnu++98 -O -fopenmp -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr34694.C'
    sources:
      binary: pr34694.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("is used uninitialized")[^\n]*\n?)+'
test_pr34694_1059:
  build:
    cflags: "-std=gnu++11 -O -fopenmp -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr34694.C'
    sources:
      binary: pr34694.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("is used uninitialized")[^\n]*\n?)+'
test_pr34694_1060:
  build:
    cflags: "-std=gnu++14 -O -fopenmp -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr34694.C'
    sources:
      binary: pr34694.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("is used uninitialized")[^\n]*\n?)+'
test_pr34694_376:
  build:
    cflags: "-std=gnu++98 -O -fopenmp -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr34694.C'
    sources:
      binary: pr34694.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("is used uninitialized")[^\n]*\n?)+'
test_pr34694_377:
  build:
    cflags: "-std=gnu++11 -O -fopenmp -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr34694.C'
    sources:
      binary: pr34694.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("is used uninitialized")[^\n]*\n?)+'
test_pr34694_378:
  build:
    cflags: "-std=gnu++14 -O -fopenmp -Wall\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr34694.C'
    sources:
      binary: pr34694.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("is used uninitialized")[^\n]*\n?)+'
test_pr34964_1061:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr34964.C'
    sources:
      binary: pr34964.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer")[^\n]*\n?)+'
test_pr34964_1062:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr34964.C'
    sources:
      binary: pr34964.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer")[^\n]*\n?)+'
test_pr34964_1063:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr34964.C'
    sources:
      binary: pr34964.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer")[^\n]*\n?)+'
test_pr34964_379:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr34964.C'
    sources:
      binary: pr34964.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer")[^\n]*\n?)+'
test_pr34964_380:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr34964.C'
    sources:
      binary: pr34964.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer")[^\n]*\n?)+'
test_pr34964_381:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr34964.C'
    sources:
      binary: pr34964.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer")[^\n]*\n?)+'
test_pr35028_1064:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35028.C'
    sources:
      binary: pr35028.s
  group: GRPSERIAL
test_pr35028_1065:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35028.C'
    sources:
      binary: pr35028.s
  group: GRPSERIAL
test_pr35028_1066:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35028.C'
    sources:
      binary: pr35028.s
  group: GRPSERIAL
test_pr35028_382:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35028.C'
    sources:
      binary: pr35028.s
  group: GRPSERIAL
test_pr35028_383:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35028.C'
    sources:
      binary: pr35028.s
  group: GRPSERIAL
test_pr35028_384:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35028.C'
    sources:
      binary: pr35028.s
  group: GRPSERIAL
test_pr35078_1067:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35078.C'
    sources:
      binary: pr35078.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid type
          for iteration variable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid type for
          iteration variable")[^\n]*\n?)+'
test_pr35078_1068:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35078.C'
    sources:
      binary: pr35078.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid type
          for iteration variable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid type for
          iteration variable")[^\n]*\n?)+'
test_pr35078_1069:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35078.C'
    sources:
      binary: pr35078.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid type
          for iteration variable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid type for
          iteration variable")[^\n]*\n?)+'
test_pr35078_385:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35078.C'
    sources:
      binary: pr35078.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid type
          for iteration variable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid type for
          iteration variable")[^\n]*\n?)+'
test_pr35078_386:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35078.C'
    sources:
      binary: pr35078.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid type
          for iteration variable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid type for
          iteration variable")[^\n]*\n?)+'
test_pr35078_387:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35078.C'
    sources:
      binary: pr35078.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid type
          for iteration variable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid type for
          iteration variable")[^\n]*\n?)+'
test_pr35099_1070:
  build:
    cflags: "-std=gnu++98 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35099.C'
    sources:
      binary: pr35099.s
  group: GRPSERIAL
test_pr35099_1071:
  build:
    cflags: "-std=gnu++11 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35099.C'
    sources:
      binary: pr35099.s
  group: GRPSERIAL
test_pr35099_1072:
  build:
    cflags: "-std=gnu++14 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35099.C'
    sources:
      binary: pr35099.s
  group: GRPSERIAL
test_pr35099_388:
  build:
    cflags: "-std=gnu++98 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35099.C'
    sources:
      binary: pr35099.s
  group: GRPSERIAL
test_pr35099_389:
  build:
    cflags: "-std=gnu++11 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35099.C'
    sources:
      binary: pr35099.s
  group: GRPSERIAL
test_pr35099_390:
  build:
    cflags: "-std=gnu++14 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35099.C'
    sources:
      binary: pr35099.s
  group: GRPSERIAL
test_pr35158_1073:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35158.C'
    sources:
      binary: pr35158.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("parenthesized
          initialization is not allowed in OpenMP \''for\'' loop")[^\n]*\n?)+'
test_pr35158_1074:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35158.C'
    sources:
      binary: pr35158.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("parenthesized
          initialization is not allowed in OpenMP \''for\'' loop")[^\n]*\n?)+'
test_pr35158_1075:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35158.C'
    sources:
      binary: pr35158.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("parenthesized
          initialization is not allowed in OpenMP \''for\'' loop")[^\n]*\n?)+'
test_pr35158_391:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35158.C'
    sources:
      binary: pr35158.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("parenthesized
          initialization is not allowed in OpenMP \''for\'' loop")[^\n]*\n?)+'
test_pr35158_392:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35158.C'
    sources:
      binary: pr35158.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("parenthesized
          initialization is not allowed in OpenMP \''for\'' loop")[^\n]*\n?)+'
test_pr35158_393:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35158.C'
    sources:
      binary: pr35158.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("parenthesized
          initialization is not allowed in OpenMP \''for\'' loop")[^\n]*\n?)+'
test_pr35244_1076:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35244.C'
    sources:
      binary: pr35244.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not file,
          namespace or block scope variable")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not file,
          namespace or block scope variable")[^\n]*\n?)+'
test_pr35244_1077:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35244.C'
    sources:
      binary: pr35244.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not file,
          namespace or block scope variable")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not file,
          namespace or block scope variable")[^\n]*\n?)+'
test_pr35244_1078:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35244.C'
    sources:
      binary: pr35244.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not file,
          namespace or block scope variable")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not file,
          namespace or block scope variable")[^\n]*\n?)+'
test_pr35244_394:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35244.C'
    sources:
      binary: pr35244.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not file,
          namespace or block scope variable")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not file,
          namespace or block scope variable")[^\n]*\n?)+'
test_pr35244_395:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35244.C'
    sources:
      binary: pr35244.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not file,
          namespace or block scope variable")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not file,
          namespace or block scope variable")[^\n]*\n?)+'
test_pr35244_396:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35244.C'
    sources:
      binary: pr35244.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not file,
          namespace or block scope variable")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not file,
          namespace or block scope variable")[^\n]*\n?)+'
test_pr35328_1079:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35328.C'
    sources:
      binary: pr35328.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared as function
          returning a function")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared as function
          returning a function")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared as function
          returning a function")[^\n]*\n?)+'
test_pr35328_1080:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35328.C'
    sources:
      binary: pr35328.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared as function
          returning a function")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared as function
          returning a function")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared as function
          returning a function")[^\n]*\n?)+'
test_pr35328_1081:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35328.C'
    sources:
      binary: pr35328.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared as function
          returning a function")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared as function
          returning a function")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared as function
          returning a function")[^\n]*\n?)+'
test_pr35328_397:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35328.C'
    sources:
      binary: pr35328.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared as function
          returning a function")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared as function
          returning a function")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared as function
          returning a function")[^\n]*\n?)+'
test_pr35328_398:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35328.C'
    sources:
      binary: pr35328.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared as function
          returning a function")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared as function
          returning a function")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared as function
          returning a function")[^\n]*\n?)+'
test_pr35328_399:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35328.C'
    sources:
      binary: pr35328.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared as function
          returning a function")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared as function
          returning a function")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared as function
          returning a function")[^\n]*\n?)+'
test_pr35337_1082:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35337.C'
    sources:
      binary: pr35337.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("struct A\\[^\\n\\]*is
          not a variable")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("struct A\\[^\\n\\]*is
          not a variable")[^\n]*\n?)+'
test_pr35337_1083:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35337.C'
    sources:
      binary: pr35337.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("struct A\\[^\\n\\]*is
          not a variable")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("struct A\\[^\\n\\]*is
          not a variable")[^\n]*\n?)+'
test_pr35337_1084:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35337.C'
    sources:
      binary: pr35337.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("struct A\\[^\\n\\]*is
          not a variable")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("struct A\\[^\\n\\]*is
          not a variable")[^\n]*\n?)+'
test_pr35337_400:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35337.C'
    sources:
      binary: pr35337.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("struct A\\[^\\n\\]*is
          not a variable")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("struct A\\[^\\n\\]*is
          not a variable")[^\n]*\n?)+'
test_pr35337_401:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35337.C'
    sources:
      binary: pr35337.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("struct A\\[^\\n\\]*is
          not a variable")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("struct A\\[^\\n\\]*is
          not a variable")[^\n]*\n?)+'
test_pr35337_402:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35337.C'
    sources:
      binary: pr35337.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("struct A\\[^\\n\\]*is
          not a variable")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("struct A\\[^\\n\\]*is
          not a variable")[^\n]*\n?)+'
test_pr35364_1085:
  build:
    cflags: "-std=gnu++98 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35364.C'
    sources:
      binary: pr35364.s
  group: GRPSERIAL
test_pr35364_1086:
  build:
    cflags: "-std=gnu++11 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35364.C'
    sources:
      binary: pr35364.s
  group: GRPSERIAL
test_pr35364_1087:
  build:
    cflags: "-std=gnu++14 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35364.C'
    sources:
      binary: pr35364.s
  group: GRPSERIAL
test_pr35364_403:
  build:
    cflags: "-std=gnu++98 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35364.C'
    sources:
      binary: pr35364.s
  group: GRPSERIAL
test_pr35364_404:
  build:
    cflags: "-std=gnu++11 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35364.C'
    sources:
      binary: pr35364.s
  group: GRPSERIAL
test_pr35364_405:
  build:
    cflags: "-std=gnu++14 -O2 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35364.C'
    sources:
      binary: pr35364.s
  group: GRPSERIAL
test_pr35751_1088:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35751.C'
    sources:
      binary: pr35751.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("14:storage size
          of")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("14:storage size
          of")[^\n]*\n?)+'
test_pr35751_1089:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35751.C'
    sources:
      binary: pr35751.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("14:storage size
          of")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("14:storage size
          of")[^\n]*\n?)+'
test_pr35751_1090:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35751.C'
    sources:
      binary: pr35751.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("14:storage size
          of")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("14:storage size
          of")[^\n]*\n?)+'
test_pr35751_406:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35751.C'
    sources:
      binary: pr35751.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("14:storage size
          of")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("14:storage size
          of")[^\n]*\n?)+'
test_pr35751_407:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35751.C'
    sources:
      binary: pr35751.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("14:storage size
          of")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("14:storage size
          of")[^\n]*\n?)+'
test_pr35751_408:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr35751.C'
    sources:
      binary: pr35751.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("14:storage size
          of")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("14:storage size
          of")[^\n]*\n?)+'
test_pr36237_1091:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr36237.C'
    sources:
      binary: pr36237.s
  group: GRPSERIAL
test_pr36237_1092:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr36237.C'
    sources:
      binary: pr36237.s
  group: GRPSERIAL
test_pr36237_1093:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr36237.C'
    sources:
      binary: pr36237.s
  group: GRPSERIAL
test_pr36237_409:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr36237.C'
    sources:
      binary: pr36237.s
  group: GRPSERIAL
test_pr36237_410:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr36237.C'
    sources:
      binary: pr36237.s
  group: GRPSERIAL
test_pr36237_411:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr36237.C'
    sources:
      binary: pr36237.s
  group: GRPSERIAL
test_pr36790_1094:
  build:
    cflags: "-std=gnu++98 -fopenmp -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr36790.C'
    sources:
      binary: pr36790.s
  group: GRPSERIAL
test_pr36790_1095:
  build:
    cflags: "-std=gnu++11 -fopenmp -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr36790.C'
    sources:
      binary: pr36790.s
  group: GRPSERIAL
test_pr36790_1096:
  build:
    cflags: "-std=gnu++14 -fopenmp -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr36790.C'
    sources:
      binary: pr36790.s
  group: GRPSERIAL
test_pr36790_412:
  build:
    cflags: "-std=gnu++98 -fopenmp -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr36790.C'
    sources:
      binary: pr36790.s
  group: GRPSERIAL
test_pr36790_413:
  build:
    cflags: "-std=gnu++11 -fopenmp -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr36790.C'
    sources:
      binary: pr36790.s
  group: GRPSERIAL
test_pr36790_414:
  build:
    cflags: "-std=gnu++14 -fopenmp -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr36790.C'
    sources:
      binary: pr36790.s
  group: GRPSERIAL
test_pr37189_1097:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr37189.C'
    sources:
      binary: pr37189.s
  group: GRPSERIAL
test_pr37189_1098:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr37189.C'
    sources:
      binary: pr37189.s
  group: GRPSERIAL
test_pr37189_1099:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr37189.C'
    sources:
      binary: pr37189.s
  group: GRPSERIAL
test_pr37189_415:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr37189.C'
    sources:
      binary: pr37189.s
  group: GRPSERIAL
test_pr37189_416:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr37189.C'
    sources:
      binary: pr37189.s
  group: GRPSERIAL
test_pr37189_417:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr37189.C'
    sources:
      binary: pr37189.s
  group: GRPSERIAL
test_pr37346_1100:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr37346.C'
    sources:
      binary: pr37346.s
  group: GRPSERIAL
test_pr37346_1101:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr37346.C'
    sources:
      binary: pr37346.s
  group: GRPSERIAL
test_pr37346_1102:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr37346.C'
    sources:
      binary: pr37346.s
  group: GRPSERIAL
test_pr37346_418:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr37346.C'
    sources:
      binary: pr37346.s
  group: GRPSERIAL
test_pr37346_419:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr37346.C'
    sources:
      binary: pr37346.s
  group: GRPSERIAL
test_pr37346_420:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr37346.C'
    sources:
      binary: pr37346.s
  group: GRPSERIAL
test_pr37533_1103:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr37533.C'
    sources:
      binary: pr37533.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from")[^\n]*\n?)+'
test_pr37533_1104:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr37533.C'
    sources:
      binary: pr37533.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from")[^\n]*\n?)+'
test_pr37533_1105:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr37533.C'
    sources:
      binary: pr37533.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from")[^\n]*\n?)+'
test_pr37533_421:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr37533.C'
    sources:
      binary: pr37533.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from")[^\n]*\n?)+'
test_pr37533_422:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr37533.C'
    sources:
      binary: pr37533.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from")[^\n]*\n?)+'
test_pr37533_423:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr37533.C'
    sources:
      binary: pr37533.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid conversion
          from")[^\n]*\n?)+'
test_pr38633_1106:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr38633.C'
    sources:
      binary: pr38633.s
  group: GRPSERIAL
test_pr38633_1107:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr38633.C'
    sources:
      binary: pr38633.s
  group: GRPSERIAL
test_pr38633_1108:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr38633.C'
    sources:
      binary: pr38633.s
  group: GRPSERIAL
test_pr38633_424:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr38633.C'
    sources:
      binary: pr38633.s
  group: GRPSERIAL
test_pr38633_425:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr38633.C'
    sources:
      binary: pr38633.s
  group: GRPSERIAL
test_pr38633_426:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr38633.C'
    sources:
      binary: pr38633.s
  group: GRPSERIAL
test_pr38639_1109:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr38639.C'
    sources:
      binary: pr38639.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
test_pr38639_1110:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr38639.C'
    sources:
      binary: pr38639.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
test_pr38639_427:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr38639.C'
    sources:
      binary: pr38639.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
test_pr38639_428:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr38639.C'
    sources:
      binary: pr38639.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer expression
          refers to iteration variable")[^\n]*\n?)+'
test_pr39495-1_1111:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr39495-1.C'
    sources:
      binary: pr39495-1.s
  group: GRPSERIAL
test_pr39495-1_1112:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr39495-1.C'
    sources:
      binary: pr39495-1.s
  group: GRPSERIAL
test_pr39495-1_1113:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr39495-1.C'
    sources:
      binary: pr39495-1.s
  group: GRPSERIAL
test_pr39495-1_429:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr39495-1.C'
    sources:
      binary: pr39495-1.s
  group: GRPSERIAL
test_pr39495-1_430:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr39495-1.C'
    sources:
      binary: pr39495-1.s
  group: GRPSERIAL
test_pr39495-1_431:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr39495-1.C'
    sources:
      binary: pr39495-1.s
  group: GRPSERIAL
test_pr39495-2_1114:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr39495-2.C'
    sources:
      binary: pr39495-2.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
test_pr39495-2_1115:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr39495-2.C'
    sources:
      binary: pr39495-2.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
test_pr39495-2_1116:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr39495-2.C'
    sources:
      binary: pr39495-2.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
test_pr39495-2_432:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr39495-2.C'
    sources:
      binary: pr39495-2.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
test_pr39495-2_433:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr39495-2.C'
    sources:
      binary: pr39495-2.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
test_pr39495-2_434:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr39495-2.C'
    sources:
      binary: pr39495-2.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid controlling
          predicate")[^\n]*\n?)+'
test_pr41429_1117:
  build:
    cflags: "-std=gnu++98 -fopenmp -O2 -fpic\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr41429.C'
    sources:
      binary: pr41429.s
  group: GRPSERIAL
test_pr41429_1118:
  build:
    cflags: "-std=gnu++11 -fopenmp -O2 -fpic\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr41429.C'
    sources:
      binary: pr41429.s
  group: GRPSERIAL
test_pr41429_1119:
  build:
    cflags: "-std=gnu++14 -fopenmp -O2 -fpic\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr41429.C'
    sources:
      binary: pr41429.s
  group: GRPSERIAL
test_pr41429_435:
  build:
    cflags: "-std=gnu++98 -fopenmp -O2 -fpic\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr41429.C'
    sources:
      binary: pr41429.s
  group: GRPSERIAL
test_pr41429_436:
  build:
    cflags: "-std=gnu++11 -fopenmp -O2 -fpic\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr41429.C'
    sources:
      binary: pr41429.s
  group: GRPSERIAL
test_pr41429_437:
  build:
    cflags: "-std=gnu++14 -fopenmp -O2 -fpic\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr41429.C'
    sources:
      binary: pr41429.s
  group: GRPSERIAL
test_pr41967_1120:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr41967.C'
    sources:
      binary: pr41967.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("collapsed loops
          not perfectly nested")[^\n]*\n?)+'
test_pr41967_1121:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr41967.C'
    sources:
      binary: pr41967.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("collapsed loops
          not perfectly nested")[^\n]*\n?)+'
test_pr41967_1122:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr41967.C'
    sources:
      binary: pr41967.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("collapsed loops
          not perfectly nested")[^\n]*\n?)+'
test_pr41967_438:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr41967.C'
    sources:
      binary: pr41967.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("collapsed loops
          not perfectly nested")[^\n]*\n?)+'
test_pr41967_439:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr41967.C'
    sources:
      binary: pr41967.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("collapsed loops
          not perfectly nested")[^\n]*\n?)+'
test_pr41967_440:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr41967.C'
    sources:
      binary: pr41967.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("collapsed loops
          not perfectly nested")[^\n]*\n?)+'
test_pr42234_1123:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr42234.C'
    sources:
      binary: pr42234.s
  group: GRPSERIAL
test_pr42234_1124:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr42234.C'
    sources:
      binary: pr42234.s
  group: GRPSERIAL
test_pr42234_1125:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr42234.C'
    sources:
      binary: pr42234.s
  group: GRPSERIAL
test_pr42234_441:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr42234.C'
    sources:
      binary: pr42234.s
  group: GRPSERIAL
test_pr42234_442:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr42234.C'
    sources:
      binary: pr42234.s
  group: GRPSERIAL
test_pr42234_443:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr42234.C'
    sources:
      binary: pr42234.s
  group: GRPSERIAL
test_pr47963_1126:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr47963.C'
    sources:
      binary: pr47963.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has non-integral
          type")[^\n]*\n?)+'
test_pr47963_1127:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr47963.C'
    sources:
      binary: pr47963.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has non-integral
          type")[^\n]*\n?)+'
test_pr47963_1128:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr47963.C'
    sources:
      binary: pr47963.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has non-integral
          type")[^\n]*\n?)+'
test_pr47963_444:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr47963.C'
    sources:
      binary: pr47963.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has non-integral
          type")[^\n]*\n?)+'
test_pr47963_445:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr47963.C'
    sources:
      binary: pr47963.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has non-integral
          type")[^\n]*\n?)+'
test_pr47963_446:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr47963.C'
    sources:
      binary: pr47963.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has non-integral
          type")[^\n]*\n?)+'
test_pr48632_1129:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr48632.C'
    sources:
      binary: pr48632.s
  group: GRPSERIAL
test_pr48632_1130:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr48632.C'
    sources:
      binary: pr48632.s
  group: GRPSERIAL
test_pr48632_1131:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr48632.C'
    sources:
      binary: pr48632.s
  group: GRPSERIAL
test_pr48632_447:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr48632.C'
    sources:
      binary: pr48632.s
  group: GRPSERIAL
test_pr48632_448:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr48632.C'
    sources:
      binary: pr48632.s
  group: GRPSERIAL
test_pr48632_449:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr48632.C'
    sources:
      binary: pr48632.s
  group: GRPSERIAL
test_pr48716_1132:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr48716.C'
    sources:
      binary: pr48716.s
  group: GRPSERIAL
test_pr48716_1133:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr48716.C'
    sources:
      binary: pr48716.s
  group: GRPSERIAL
test_pr48716_1134:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr48716.C'
    sources:
      binary: pr48716.s
  group: GRPSERIAL
test_pr48716_450:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr48716.C'
    sources:
      binary: pr48716.s
  group: GRPSERIAL
test_pr48716_451:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr48716.C'
    sources:
      binary: pr48716.s
  group: GRPSERIAL
test_pr48716_452:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr48716.C'
    sources:
      binary: pr48716.s
  group: GRPSERIAL
test_pr49223-1_1135:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr49223-1.C'
    sources:
      binary: pr49223-1.s
  group: GRPSERIAL
test_pr49223-1_1136:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr49223-1.C'
    sources:
      binary: pr49223-1.s
  group: GRPSERIAL
test_pr49223-1_1137:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr49223-1.C'
    sources:
      binary: pr49223-1.s
  group: GRPSERIAL
test_pr49223-1_453:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr49223-1.C'
    sources:
      binary: pr49223-1.s
  group: GRPSERIAL
test_pr49223-1_454:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr49223-1.C'
    sources:
      binary: pr49223-1.s
  group: GRPSERIAL
test_pr49223-1_455:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr49223-1.C'
    sources:
      binary: pr49223-1.s
  group: GRPSERIAL
test_pr49223-2_1138:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr49223-2.C'
    sources:
      binary: pr49223-2.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
test_pr49223-2_1139:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr49223-2.C'
    sources:
      binary: pr49223-2.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
test_pr49223-2_1140:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr49223-2.C'
    sources:
      binary: pr49223-2.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
test_pr49223-2_456:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr49223-2.C'
    sources:
      binary: pr49223-2.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
test_pr49223-2_457:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr49223-2.C'
    sources:
      binary: pr49223-2.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
test_pr49223-2_458:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr49223-2.C'
    sources:
      binary: pr49223-2.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
test_pr51360_1141:
  build:
    cflags: "-std=gnu++98 -Wunused -W -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr51360.C'
    sources:
      binary: pr51360.s
  group: GRPSERIAL
test_pr51360_1142:
  build:
    cflags: "-std=gnu++11 -Wunused -W -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr51360.C'
    sources:
      binary: pr51360.s
  group: GRPSERIAL
test_pr51360_1143:
  build:
    cflags: "-std=gnu++14 -Wunused -W -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr51360.C'
    sources:
      binary: pr51360.s
  group: GRPSERIAL
test_pr51360_459:
  build:
    cflags: "-std=gnu++98 -Wunused -W -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr51360.C'
    sources:
      binary: pr51360.s
  group: GRPSERIAL
test_pr51360_460:
  build:
    cflags: "-std=gnu++11 -Wunused -W -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr51360.C'
    sources:
      binary: pr51360.s
  group: GRPSERIAL
test_pr51360_461:
  build:
    cflags: "-std=gnu++14 -Wunused -W -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr51360.C'
    sources:
      binary: pr51360.s
  group: GRPSERIAL
test_pr51669_1144:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr51669.C'
    sources:
      binary: pr51669.s
  group: GRPSERIAL
test_pr51669_1145:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr51669.C'
    sources:
      binary: pr51669.s
  group: GRPSERIAL
test_pr51669_1146:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr51669.C'
    sources:
      binary: pr51669.s
  group: GRPSERIAL
test_pr51669_462:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr51669.C'
    sources:
      binary: pr51669.s
  group: GRPSERIAL
test_pr51669_463:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr51669.C'
    sources:
      binary: pr51669.s
  group: GRPSERIAL
test_pr51669_464:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr51669.C'
    sources:
      binary: pr51669.s
  group: GRPSERIAL
test_pr56217_1147:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr56217.C'
    sources:
      binary: pr56217.s
  group: GRPSERIAL
test_pr56217_1148:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr56217.C'
    sources:
      binary: pr56217.s
  group: GRPSERIAL
test_pr56217_1149:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr56217.C'
    sources:
      binary: pr56217.s
  group: GRPSERIAL
test_pr56217_465:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr56217.C'
    sources:
      binary: pr56217.s
  group: GRPSERIAL
test_pr56217_466:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr56217.C'
    sources:
      binary: pr56217.s
  group: GRPSERIAL
test_pr56217_467:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr56217.C'
    sources:
      binary: pr56217.s
  group: GRPSERIAL
test_pr58567_1150:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr58567.C'
    sources:
      binary: pr58567.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''int\'' is not
          a class, struct, or union type|expected iteration declaration or initialization")[^\n]*\n?)+'
test_pr58567_1151:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr58567.C'
    sources:
      binary: pr58567.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''int\'' is not
          a class, struct, or union type|expected iteration declaration or initialization")[^\n]*\n?)+'
test_pr58567_1152:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr58567.C'
    sources:
      binary: pr58567.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''int\'' is not
          a class, struct, or union type|expected iteration declaration or initialization")[^\n]*\n?)+'
test_pr58567_468:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr58567.C'
    sources:
      binary: pr58567.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''int\'' is not
          a class, struct, or union type|expected iteration declaration or initialization")[^\n]*\n?)+'
test_pr58567_469:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr58567.C'
    sources:
      binary: pr58567.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''int\'' is not
          a class, struct, or union type|expected iteration declaration or initialization")[^\n]*\n?)+'
test_pr58567_470:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr58567.C'
    sources:
      binary: pr58567.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''int\'' is not
          a class, struct, or union type|expected iteration declaration or initialization")[^\n]*\n?)+'
test_pr58702_1153:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr58702.C'
    sources:
      binary: pr58702.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared")[^\n]*\n?)+'
test_pr58702_1154:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr58702.C'
    sources:
      binary: pr58702.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared")[^\n]*\n?)+'
test_pr58702_1155:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr58702.C'
    sources:
      binary: pr58702.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared")[^\n]*\n?)+'
test_pr58702_471:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr58702.C'
    sources:
      binary: pr58702.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared")[^\n]*\n?)+'
test_pr58702_472:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr58702.C'
    sources:
      binary: pr58702.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared")[^\n]*\n?)+'
test_pr58702_473:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr58702.C'
    sources:
      binary: pr58702.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("was not declared")[^\n]*\n?)+'
test_pr58874_1156:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr58874.C'
    sources:
      binary: pr58874.s
  group: GRPSERIAL
test_pr58874_1157:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr58874.C'
    sources:
      binary: pr58874.s
  group: GRPSERIAL
test_pr58874_1158:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr58874.C'
    sources:
      binary: pr58874.s
  group: GRPSERIAL
test_pr58874_474:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr58874.C'
    sources:
      binary: pr58874.s
  group: GRPSERIAL
test_pr58874_475:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr58874.C'
    sources:
      binary: pr58874.s
  group: GRPSERIAL
test_pr58874_476:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr58874.C'
    sources:
      binary: pr58874.s
  group: GRPSERIAL
test_pr59150_1159:
  build:
    cflags: "-std=gnu++98 -O -fopenmp-simd -fno-tree-ccp -fno-tree-copy-prop -fno-tree-dce\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr59150.C'
    sources:
      binary: pr59150.s
  group: GRPSERIAL
test_pr59150_1160:
  build:
    cflags: "-std=gnu++11 -O -fopenmp-simd -fno-tree-ccp -fno-tree-copy-prop -fno-tree-dce\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr59150.C'
    sources:
      binary: pr59150.s
  group: GRPSERIAL
test_pr59150_1161:
  build:
    cflags: "-std=gnu++14 -O -fopenmp-simd -fno-tree-ccp -fno-tree-copy-prop -fno-tree-dce\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr59150.C'
    sources:
      binary: pr59150.s
  group: GRPSERIAL
test_pr59150_477:
  build:
    cflags: "-std=gnu++98 -O -fopenmp-simd -fno-tree-ccp -fno-tree-copy-prop -fno-tree-dce\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr59150.C'
    sources:
      binary: pr59150.s
  group: GRPSERIAL
test_pr59150_478:
  build:
    cflags: "-std=gnu++11 -O -fopenmp-simd -fno-tree-ccp -fno-tree-copy-prop -fno-tree-dce\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr59150.C'
    sources:
      binary: pr59150.s
  group: GRPSERIAL
test_pr59150_479:
  build:
    cflags: "-std=gnu++14 -O -fopenmp-simd -fno-tree-ccp -fno-tree-copy-prop -fno-tree-dce\n\
      \ -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr59150.C'
    sources:
      binary: pr59150.s
  group: GRPSERIAL
test_pr59297_1162:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr59297.C'
    sources:
      binary: pr59297.s
  group: GRPSERIAL
test_pr59297_1163:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr59297.C'
    sources:
      binary: pr59297.s
  group: GRPSERIAL
test_pr59297_1164:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr59297.C'
    sources:
      binary: pr59297.s
  group: GRPSERIAL
test_pr59297_480:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr59297.C'
    sources:
      binary: pr59297.s
  group: GRPSERIAL
test_pr59297_481:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr59297.C'
    sources:
      binary: pr59297.s
  group: GRPSERIAL
test_pr59297_482:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr59297.C'
    sources:
      binary: pr59297.s
  group: GRPSERIAL
test_pr59627_1165:
  build:
    cflags: "-std=gnu++98 -fopenmp -flto\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr59627.C'
    sources:
      binary: pr59627.s
  group: GRPSERIAL
test_pr59627_1166:
  build:
    cflags: "-std=gnu++11 -fopenmp -flto\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr59627.C'
    sources:
      binary: pr59627.s
  group: GRPSERIAL
test_pr59627_1167:
  build:
    cflags: "-std=gnu++14 -fopenmp -flto\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr59627.C'
    sources:
      binary: pr59627.s
  group: GRPSERIAL
test_pr59627_483:
  build:
    cflags: "-std=gnu++98 -fopenmp -flto\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr59627.C'
    sources:
      binary: pr59627.s
  group: GRPSERIAL
test_pr59627_484:
  build:
    cflags: "-std=gnu++11 -fopenmp -flto\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr59627.C'
    sources:
      binary: pr59627.s
  group: GRPSERIAL
test_pr59627_485:
  build:
    cflags: "-std=gnu++14 -fopenmp -flto\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr59627.C'
    sources:
      binary: pr59627.s
  group: GRPSERIAL
test_pr59628_1168:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr59628.C'
    sources:
      binary: pr59628.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_pr59628_1169:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr59628.C'
    sources:
      binary: pr59628.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_pr59628_1170:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr59628.C'
    sources:
      binary: pr59628.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_pr59628_486:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr59628.C'
    sources:
      binary: pr59628.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_pr59628_487:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr59628.C'
    sources:
      binary: pr59628.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_pr59628_488:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr59628.C'
    sources:
      binary: pr59628.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_pr60682_1171:
  build:
    cflags: "-std=gnu++98 -O2 -fopenmp-simd\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr60682.C'
    sources:
      binary: pr60682.s
  group: GRPSERIAL
test_pr60682_1172:
  build:
    cflags: "-std=gnu++11 -O2 -fopenmp-simd\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr60682.C'
    sources:
      binary: pr60682.s
  group: GRPSERIAL
test_pr60682_1173:
  build:
    cflags: "-std=gnu++14 -O2 -fopenmp-simd\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr60682.C'
    sources:
      binary: pr60682.s
  group: GRPSERIAL
test_pr60682_489:
  build:
    cflags: "-std=gnu++98 -O2 -fopenmp-simd\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr60682.C'
    sources:
      binary: pr60682.s
  group: GRPSERIAL
test_pr60682_490:
  build:
    cflags: "-std=gnu++11 -O2 -fopenmp-simd\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr60682.C'
    sources:
      binary: pr60682.s
  group: GRPSERIAL
test_pr60682_491:
  build:
    cflags: "-std=gnu++14 -O2 -fopenmp-simd\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr60682.C'
    sources:
      binary: pr60682.s
  group: GRPSERIAL
test_pr63249_1174:
  build:
    cflags: "-std=gnu++98 -Wall -W -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr63249.C'
    sources:
      binary: pr63249.s
  group: GRPSERIAL
test_pr63249_1175:
  build:
    cflags: "-std=gnu++11 -Wall -W -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr63249.C'
    sources:
      binary: pr63249.s
  group: GRPSERIAL
test_pr63249_1176:
  build:
    cflags: "-std=gnu++14 -Wall -W -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr63249.C'
    sources:
      binary: pr63249.s
  group: GRPSERIAL
test_pr63249_492:
  build:
    cflags: "-std=gnu++98 -Wall -W -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr63249.C'
    sources:
      binary: pr63249.s
  group: GRPSERIAL
test_pr63249_493:
  build:
    cflags: "-std=gnu++11 -Wall -W -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr63249.C'
    sources:
      binary: pr63249.s
  group: GRPSERIAL
test_pr63249_494:
  build:
    cflags: "-std=gnu++14 -Wall -W -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr63249.C'
    sources:
      binary: pr63249.s
  group: GRPSERIAL
test_pr66571-1_1177:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr66571-1.C'
    sources:
      binary: pr66571-1.s
  group: GRPSERIAL
test_pr66571-1_1178:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr66571-1.C'
    sources:
      binary: pr66571-1.s
  group: GRPSERIAL
test_pr66571-1_1179:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr66571-1.C'
    sources:
      binary: pr66571-1.s
  group: GRPSERIAL
test_pr66571-1_495:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr66571-1.C'
    sources:
      binary: pr66571-1.s
  group: GRPSERIAL
test_pr66571-1_496:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr66571-1.C'
    sources:
      binary: pr66571-1.s
  group: GRPSERIAL
test_pr66571-1_497:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr66571-1.C'
    sources:
      binary: pr66571-1.s
  group: GRPSERIAL
test_pr66571-2_1180:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr66571-2.C'
    sources:
      binary: pr66571-2.s
  group: GRPSERIAL
test_pr66571-2_1181:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr66571-2.C'
    sources:
      binary: pr66571-2.s
  group: GRPSERIAL
test_pr66571-2_1182:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr66571-2.C'
    sources:
      binary: pr66571-2.s
  group: GRPSERIAL
test_pr66571-2_498:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr66571-2.C'
    sources:
      binary: pr66571-2.s
  group: GRPSERIAL
test_pr66571-2_499:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr66571-2.C'
    sources:
      binary: pr66571-2.s
  group: GRPSERIAL
test_pr66571-2_500:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr66571-2.C'
    sources:
      binary: pr66571-2.s
  group: GRPSERIAL
test_pr67504_1183:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr67504.C'
    sources:
      binary: pr67504.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("collapse argument
          needs positive constant integer expression")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ordered argument
          needs positive constant integer expression")[^\n]*\n?)+'
test_pr67504_1184:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr67504.C'
    sources:
      binary: pr67504.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("collapse argument
          needs positive constant integer expression")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ordered argument
          needs positive constant integer expression")[^\n]*\n?)+'
test_pr67504_1185:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr67504.C'
    sources:
      binary: pr67504.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("collapse argument
          needs positive constant integer expression")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ordered argument
          needs positive constant integer expression")[^\n]*\n?)+'
test_pr67504_501:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr67504.C'
    sources:
      binary: pr67504.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("collapse argument
          needs positive constant integer expression")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ordered argument
          needs positive constant integer expression")[^\n]*\n?)+'
test_pr67504_502:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr67504.C'
    sources:
      binary: pr67504.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("collapse argument
          needs positive constant integer expression")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ordered argument
          needs positive constant integer expression")[^\n]*\n?)+'
test_pr67504_503:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr67504.C'
    sources:
      binary: pr67504.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("collapse argument
          needs positive constant integer expression")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ordered argument
          needs positive constant integer expression")[^\n]*\n?)+'
test_pr67511_1186:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr67511.C'
    sources:
      binary: pr67511.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no match for")[^\n]*\n?)+'
test_pr67511_1187:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr67511.C'
    sources:
      binary: pr67511.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no match for")[^\n]*\n?)+'
test_pr67511_1188:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr67511.C'
    sources:
      binary: pr67511.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no match for")[^\n]*\n?)+'
test_pr67511_504:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr67511.C'
    sources:
      binary: pr67511.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no match for")[^\n]*\n?)+'
test_pr67511_505:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr67511.C'
    sources:
      binary: pr67511.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no match for")[^\n]*\n?)+'
test_pr67511_506:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr67511.C'
    sources:
      binary: pr67511.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no match for")[^\n]*\n?)+'
test_pr67514_1189:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr67514.C'
    sources:
      binary: pr67514.s
  group: GRPSERIAL
test_pr67514_1190:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr67514.C'
    sources:
      binary: pr67514.s
  group: GRPSERIAL
test_pr67514_1191:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr67514.C'
    sources:
      binary: pr67514.s
  group: GRPSERIAL
test_pr67514_507:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr67514.C'
    sources:
      binary: pr67514.s
  group: GRPSERIAL
test_pr67514_508:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr67514.C'
    sources:
      binary: pr67514.s
  group: GRPSERIAL
test_pr67514_509:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr67514.C'
    sources:
      binary: pr67514.s
  group: GRPSERIAL
test_pr67522_1192:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr67522.C'
    sources:
      binary: pr67522.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in")[^\n]*\n?)+'
test_pr67522_1193:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr67522.C'
    sources:
      binary: pr67522.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in")[^\n]*\n?)+'
test_pr67522_1194:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr67522.C'
    sources:
      binary: pr67522.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in")[^\n]*\n?)+'
test_pr67522_510:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr67522.C'
    sources:
      binary: pr67522.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in")[^\n]*\n?)+'
test_pr67522_511:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr67522.C'
    sources:
      binary: pr67522.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in")[^\n]*\n?)+'
test_pr67522_512:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr67522.C'
    sources:
      binary: pr67522.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in")[^\n]*\n?)+'
test_pr67523_1195:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr67523.C'
    sources:
      binary: pr67523.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used with class
          iteration variable")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used with class
          iteration variable")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used with class
          iteration variable")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used with class
          iteration variable")[^\n]*\n?)+'
test_pr67523_1196:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr67523.C'
    sources:
      binary: pr67523.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used with class
          iteration variable")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used with class
          iteration variable")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used with class
          iteration variable")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used with class
          iteration variable")[^\n]*\n?)+'
test_pr67523_1197:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr67523.C'
    sources:
      binary: pr67523.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used with class
          iteration variable")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used with class
          iteration variable")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used with class
          iteration variable")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used with class
          iteration variable")[^\n]*\n?)+'
test_pr67523_513:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr67523.C'
    sources:
      binary: pr67523.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used with class
          iteration variable")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used with class
          iteration variable")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used with class
          iteration variable")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used with class
          iteration variable")[^\n]*\n?)+'
test_pr67523_514:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr67523.C'
    sources:
      binary: pr67523.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used with class
          iteration variable")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used with class
          iteration variable")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used with class
          iteration variable")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used with class
          iteration variable")[^\n]*\n?)+'
test_pr67523_515:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr67523.C'
    sources:
      binary: pr67523.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used with class
          iteration variable")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used with class
          iteration variable")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used with class
          iteration variable")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("used with class
          iteration variable")[^\n]*\n?)+'
test_pr71910_1198:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr71910.C'
    sources:
      binary: pr71910.s
  group: GRPSERIAL
test_pr71910_1199:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr71910.C'
    sources:
      binary: pr71910.s
  group: GRPSERIAL
test_pr71910_1200:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr71910.C'
    sources:
      binary: pr71910.s
  group: GRPSERIAL
test_pr71910_516:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr71910.C'
    sources:
      binary: pr71910.s
  group: GRPSERIAL
test_pr71910_517:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr71910.C'
    sources:
      binary: pr71910.s
  group: GRPSERIAL
test_pr71910_518:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr71910.C'
    sources:
      binary: pr71910.s
  group: GRPSERIAL
test_pr71941_1201:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr71941.C'
    sources:
      binary: pr71941.s
  group: GRPSERIAL
test_pr71941_1202:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr71941.C'
    sources:
      binary: pr71941.s
  group: GRPSERIAL
test_pr71941_1203:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr71941.C'
    sources:
      binary: pr71941.s
  group: GRPSERIAL
test_pr71941_519:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr71941.C'
    sources:
      binary: pr71941.s
  group: GRPSERIAL
test_pr71941_520:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr71941.C'
    sources:
      binary: pr71941.s
  group: GRPSERIAL
test_pr71941_521:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr71941.C'
    sources:
      binary: pr71941.s
  group: GRPSERIAL
test_pr78363-1_1204:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa -g\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr78363-1.C'
    sources:
      binary: pr78363-1.s
  group: GRPSERIAL
test_pr78363-1_1205:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa -g\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr78363-1.C'
    sources:
      binary: pr78363-1.s
  group: GRPSERIAL
test_pr78363-1_522:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa -g\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr78363-1.C'
    sources:
      binary: pr78363-1.s
  group: GRPSERIAL
test_pr78363-1_523:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa -g\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr78363-1.C'
    sources:
      binary: pr78363-1.s
  group: GRPSERIAL
test_pr78363-2_1206:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa -g\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr78363-2.C'
    sources:
      binary: pr78363-2.s
  group: GRPSERIAL
test_pr78363-2_1207:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa -g\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr78363-2.C'
    sources:
      binary: pr78363-2.s
  group: GRPSERIAL
test_pr78363-2_524:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa -g\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr78363-2.C'
    sources:
      binary: pr78363-2.s
  group: GRPSERIAL
test_pr78363-2_525:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa -g\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr78363-2.C'
    sources:
      binary: pr78363-2.s
  group: GRPSERIAL
test_pr78363-3_1208:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa -g\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr78363-3.C'
    sources:
      binary: pr78363-3.s
  group: GRPSERIAL
test_pr78363-3_1209:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa -g\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr78363-3.C'
    sources:
      binary: pr78363-3.s
  group: GRPSERIAL
test_pr78363-3_526:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa -g\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr78363-3.C'
    sources:
      binary: pr78363-3.s
  group: GRPSERIAL
test_pr78363-3_527:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa -g\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr78363-3.C'
    sources:
      binary: pr78363-3.s
  group: GRPSERIAL
test_pr79429_1210:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr79429.C'
    sources:
      binary: pr79429.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected declaration
          specifiers")[^\n]*\n?)+'
test_pr79429_1211:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr79429.C'
    sources:
      binary: pr79429.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected declaration
          specifiers")[^\n]*\n?)+'
test_pr79429_1212:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr79429.C'
    sources:
      binary: pr79429.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected declaration
          specifiers")[^\n]*\n?)+'
test_pr79429_528:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr79429.C'
    sources:
      binary: pr79429.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected declaration
          specifiers")[^\n]*\n?)+'
test_pr79429_529:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr79429.C'
    sources:
      binary: pr79429.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected declaration
          specifiers")[^\n]*\n?)+'
test_pr79429_530:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr79429.C'
    sources:
      binary: pr79429.s
  group: GRPSERIAL
  validate:
    match:
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected declaration
          specifiers")[^\n]*\n?)+'
test_pr79664_1213:
  build:
    cflags: "-std=c++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr79664.C'
    sources:
      binary: pr79664.s
  group: GRPSERIAL
  validate:
    match:
      L105:
        expect: true
        expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a constant
          expression")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a constant
          expression")[^\n]*\n?)+'
      L123:
        expect: true
        expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a constant
          expression")[^\n]*\n?)+'
      L132:
        expect: true
        expr: '(^|\n)([^\n]+:132:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a constant
          expression")[^\n]*\n?)+'
      L141:
        expect: true
        expr: '(^|\n)([^\n]+:141:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a constant
          expression")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a constant
          expression")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a constant
          expression")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+:166:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a constant
          expression")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a constant
          expression")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a constant
          expression")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a constant
          expression")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a constant
          expression")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a constant
          expression")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a constant
          expression")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a constant
          expression")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a constant
          expression")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a constant
          expression")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a constant
          expression")[^\n]*\n?)+'
test_pr79664_531:
  build:
    cflags: "-std=c++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr79664.C'
    sources:
      binary: pr79664.s
  group: GRPSERIAL
  validate:
    match:
      L105:
        expect: true
        expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a constant
          expression")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a constant
          expression")[^\n]*\n?)+'
      L123:
        expect: true
        expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a constant
          expression")[^\n]*\n?)+'
      L132:
        expect: true
        expr: '(^|\n)([^\n]+:132:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a constant
          expression")[^\n]*\n?)+'
      L141:
        expect: true
        expr: '(^|\n)([^\n]+:141:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a constant
          expression")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a constant
          expression")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a constant
          expression")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+:166:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a constant
          expression")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a constant
          expression")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a constant
          expression")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a constant
          expression")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a constant
          expression")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a constant
          expression")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a constant
          expression")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a constant
          expression")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a constant
          expression")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a constant
          expression")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a constant
          expression")[^\n]*\n?)+'
test_pr80141_1214:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr80141.C'
    sources:
      binary: pr80141.s
  group: GRPSERIAL
test_pr80141_1215:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr80141.C'
    sources:
      binary: pr80141.s
  group: GRPSERIAL
test_pr80141_1216:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr80141.C'
    sources:
      binary: pr80141.s
  group: GRPSERIAL
test_pr80141_532:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr80141.C'
    sources:
      binary: pr80141.s
  group: GRPSERIAL
test_pr80141_533:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr80141.C'
    sources:
      binary: pr80141.s
  group: GRPSERIAL
test_pr80141_534:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr80141.C'
    sources:
      binary: pr80141.s
  group: GRPSERIAL
test_pr81011_1217:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr81011.C'
    sources:
      binary: pr81011.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is private within
          this context")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is private within
          this context")[^\n]*\n?)+'
test_pr81011_1218:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr81011.C'
    sources:
      binary: pr81011.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is private within
          this context")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is private within
          this context")[^\n]*\n?)+'
test_pr81011_1219:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr81011.C'
    sources:
      binary: pr81011.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is private within
          this context")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is private within
          this context")[^\n]*\n?)+'
test_pr81011_535:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr81011.C'
    sources:
      binary: pr81011.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is private within
          this context")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is private within
          this context")[^\n]*\n?)+'
test_pr81011_536:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr81011.C'
    sources:
      binary: pr81011.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is private within
          this context")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is private within
          this context")[^\n]*\n?)+'
test_pr81011_537:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr81011.C'
    sources:
      binary: pr81011.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is private within
          this context")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is private within
          this context")[^\n]*\n?)+'
test_pr81154_1220:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr81154.C'
    sources:
      binary: pr81154.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
test_pr81154_1221:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr81154.C'
    sources:
      binary: pr81154.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
test_pr81154_1222:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr81154.C'
    sources:
      binary: pr81154.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
test_pr81154_538:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr81154.C'
    sources:
      binary: pr81154.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
test_pr81154_539:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr81154.C'
    sources:
      binary: pr81154.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
test_pr81154_540:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/pr81154.C'
    sources:
      binary: pr81154.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a variable
          in clause")[^\n]*\n?)+'
test_predetermined-1_1223:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/predetermined-1.C'
    sources:
      binary: predetermined-1.s
  group: GRPSERIAL
  validate:
    match:
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing \''parallel\''")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing \''parallel\''")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing \''parallel\''")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified")[^\n]*\n?)+'
test_predetermined-1_1224:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/predetermined-1.C'
    sources:
      binary: predetermined-1.s
  group: GRPSERIAL
  validate:
    match:
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing \''parallel\''")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing \''parallel\''")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing \''parallel\''")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified")[^\n]*\n?)+'
test_predetermined-1_1225:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/predetermined-1.C'
    sources:
      binary: predetermined-1.s
  group: GRPSERIAL
  validate:
    match:
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing \''parallel\''")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing \''parallel\''")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing \''parallel\''")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified")[^\n]*\n?)+'
test_predetermined-1_541:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/predetermined-1.C'
    sources:
      binary: predetermined-1.s
  group: GRPSERIAL
  validate:
    match:
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing \''parallel\''")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing \''parallel\''")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing \''parallel\''")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified")[^\n]*\n?)+'
test_predetermined-1_542:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/predetermined-1.C'
    sources:
      binary: predetermined-1.s
  group: GRPSERIAL
  validate:
    match:
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing \''parallel\''")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing \''parallel\''")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing \''parallel\''")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified")[^\n]*\n?)+'
test_predetermined-1_543:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/predetermined-1.C'
    sources:
      binary: predetermined-1.s
  group: GRPSERIAL
  validate:
    match:
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing \''parallel\''")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing \''parallel\''")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing \''parallel\''")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified")[^\n]*\n?)+'
test_private-1_1226:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/private-1.C'
    sources:
      binary: private-1.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined")[^\n]*\n?)+'
test_private-1_1227:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/private-1.C'
    sources:
      binary: private-1.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined")[^\n]*\n?)+'
test_private-1_1228:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/private-1.C'
    sources:
      binary: private-1.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined")[^\n]*\n?)+'
test_private-1_544:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/private-1.C'
    sources:
      binary: private-1.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined")[^\n]*\n?)+'
test_private-1_545:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/private-1.C'
    sources:
      binary: private-1.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined")[^\n]*\n?)+'
test_private-1_546:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/private-1.C'
    sources:
      binary: private-1.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined")[^\n]*\n?)+'
test_reference-1_1229:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/reference-1.C'
    sources:
      binary: reference-1.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
test_reference-1_1230:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/reference-1.C'
    sources:
      binary: reference-1.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
test_reference-1_1231:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/reference-1.C'
    sources:
      binary: reference-1.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
test_reference-1_547:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/reference-1.C'
    sources:
      binary: reference-1.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
test_reference-1_548:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/reference-1.C'
    sources:
      binary: reference-1.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
test_reference-1_549:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/reference-1.C'
    sources:
      binary: reference-1.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
test_sections-1_1232:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sections-1.C'
    sources:
      binary: sections-1.s
  group: GRPSERIAL
test_sections-1_1233:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sections-1.C'
    sources:
      binary: sections-1.s
  group: GRPSERIAL
test_sections-1_1234:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sections-1.C'
    sources:
      binary: sections-1.s
  group: GRPSERIAL
test_sections-1_550:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sections-1.C'
    sources:
      binary: sections-1.s
  group: GRPSERIAL
test_sections-1_551:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sections-1.C'
    sources:
      binary: sections-1.s
  group: GRPSERIAL
test_sections-1_552:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sections-1.C'
    sources:
      binary: sections-1.s
  group: GRPSERIAL
test_sections-2_1235:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sections-2.C'
    sources:
      binary: sections-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_sections-2_1236:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sections-2.C'
    sources:
      binary: sections-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_sections-2_1237:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sections-2.C'
    sources:
      binary: sections-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_sections-2_553:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sections-2.C'
    sources:
      binary: sections-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_sections-2_554:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sections-2.C'
    sources:
      binary: sections-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_sections-2_555:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sections-2.C'
    sources:
      binary: sections-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_sections-3_1238:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sections-3.C'
    sources:
      binary: sections-3.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''nowait\''")[^\n]*\n?)+'
test_sections-3_1239:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sections-3.C'
    sources:
      binary: sections-3.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''nowait\''")[^\n]*\n?)+'
test_sections-3_1240:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sections-3.C'
    sources:
      binary: sections-3.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''nowait\''")[^\n]*\n?)+'
test_sections-3_556:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sections-3.C'
    sources:
      binary: sections-3.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''nowait\''")[^\n]*\n?)+'
test_sections-3_557:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sections-3.C'
    sources:
      binary: sections-3.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''nowait\''")[^\n]*\n?)+'
test_sections-3_558:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sections-3.C'
    sources:
      binary: sections-3.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''nowait\''")[^\n]*\n?)+'
test_sections-4_1241:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sections-4.C'
    sources:
      binary: sections-4.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may only be used
          in")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may only be used
          in")[^\n]*\n?)+'
test_sections-4_1242:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sections-4.C'
    sources:
      binary: sections-4.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may only be used
          in")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may only be used
          in")[^\n]*\n?)+'
test_sections-4_1243:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sections-4.C'
    sources:
      binary: sections-4.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may only be used
          in")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may only be used
          in")[^\n]*\n?)+'
test_sections-4_559:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sections-4.C'
    sources:
      binary: sections-4.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may only be used
          in")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may only be used
          in")[^\n]*\n?)+'
test_sections-4_560:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sections-4.C'
    sources:
      binary: sections-4.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may only be used
          in")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may only be used
          in")[^\n]*\n?)+'
test_sections-4_561:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sections-4.C'
    sources:
      binary: sections-4.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may only be used
          in")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may only be used
          in")[^\n]*\n?)+'
test_sharing-1_1244:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sharing-1.C'
    sources:
      binary: sharing-1.s
  group: GRPSERIAL
  validate:
    match:
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing \''parallel\''")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified
          in")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified
          in")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified
          in")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified
          in")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified
          in")[^\n]*\n?)+'
test_sharing-1_1245:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sharing-1.C'
    sources:
      binary: sharing-1.s
  group: GRPSERIAL
  validate:
    match:
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing \''parallel\''")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified
          in")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified
          in")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified
          in")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified
          in")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified
          in")[^\n]*\n?)+'
test_sharing-1_1246:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sharing-1.C'
    sources:
      binary: sharing-1.s
  group: GRPSERIAL
  validate:
    match:
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing \''parallel\''")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified
          in")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified
          in")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified
          in")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified
          in")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified
          in")[^\n]*\n?)+'
test_sharing-1_562:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sharing-1.C'
    sources:
      binary: sharing-1.s
  group: GRPSERIAL
  validate:
    match:
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing \''parallel\''")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified
          in")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified
          in")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified
          in")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified
          in")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified
          in")[^\n]*\n?)+'
test_sharing-1_563:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sharing-1.C'
    sources:
      binary: sharing-1.s
  group: GRPSERIAL
  validate:
    match:
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing \''parallel\''")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified
          in")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified
          in")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified
          in")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified
          in")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified
          in")[^\n]*\n?)+'
test_sharing-1_564:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sharing-1.C'
    sources:
      binary: sharing-1.s
  group: GRPSERIAL
  validate:
    match:
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing \''parallel\''")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified
          in")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified
          in")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified
          in")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified
          in")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not specified
          in")[^\n]*\n?)+'
test_sharing-2_1247:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sharing-2.C'
    sources:
      binary: sharing-2.s
  group: GRPSERIAL
  validate:
    match:
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
test_sharing-2_1248:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sharing-2.C'
    sources:
      binary: sharing-2.s
  group: GRPSERIAL
  validate:
    match:
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
test_sharing-2_1249:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sharing-2.C'
    sources:
      binary: sharing-2.s
  group: GRPSERIAL
  validate:
    match:
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
test_sharing-2_565:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sharing-2.C'
    sources:
      binary: sharing-2.s
  group: GRPSERIAL
  validate:
    match:
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
test_sharing-2_566:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sharing-2.C'
    sources:
      binary: sharing-2.s
  group: GRPSERIAL
  validate:
    match:
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
test_sharing-2_567:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sharing-2.C'
    sources:
      binary: sharing-2.s
  group: GRPSERIAL
  validate:
    match:
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is predetermined")[^\n]*\n?)+'
test_simd-1_1250:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/simd-1.C'
    sources:
      binary: simd-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
test_simd-1_1251:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/simd-1.C'
    sources:
      binary: simd-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
test_simd-1_1252:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/simd-1.C'
    sources:
      binary: simd-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
test_simd-1_568:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/simd-1.C'
    sources:
      binary: simd-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
test_simd-1_569:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/simd-1.C'
    sources:
      binary: simd-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
test_simd-1_570:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/simd-1.C'
    sources:
      binary: simd-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a pointer
          nor an array")[^\n]*\n?)+'
test_sink-1_1253:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sink-1.C'
    sources:
      binary: sink-1.s
  group: GRPSERIAL
test_sink-1_1254:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sink-1.C'
    sources:
      binary: sink-1.s
  group: GRPSERIAL
test_sink-1_1255:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sink-1.C'
    sources:
      binary: sink-1.s
  group: GRPSERIAL
test_sink-1_571:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sink-1.C'
    sources:
      binary: sink-1.s
  group: GRPSERIAL
test_sink-1_572:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sink-1.C'
    sources:
      binary: sink-1.s
  group: GRPSERIAL
test_sink-1_573:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sink-1.C'
    sources:
      binary: sink-1.s
  group: GRPSERIAL
test_sink-2_1256:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sink-2.C'
    sources:
      binary: sink-2.s
  group: GRPSERIAL
test_sink-2_1257:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sink-2.C'
    sources:
      binary: sink-2.s
  group: GRPSERIAL
test_sink-2_1258:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sink-2.C'
    sources:
      binary: sink-2.s
  group: GRPSERIAL
test_sink-2_574:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sink-2.C'
    sources:
      binary: sink-2.s
  group: GRPSERIAL
test_sink-2_575:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sink-2.C'
    sources:
      binary: sink-2.s
  group: GRPSERIAL
test_sink-2_576:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sink-2.C'
    sources:
      binary: sink-2.s
  group: GRPSERIAL
test_sink-3_1259:
  build:
    cflags: "-std=gnu++98 -fopenmp -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sink-3.C'
    sources:
      binary: sink-3.s
  group: GRPSERIAL
test_sink-3_1260:
  build:
    cflags: "-std=gnu++11 -fopenmp -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sink-3.C'
    sources:
      binary: sink-3.s
  group: GRPSERIAL
test_sink-3_1261:
  build:
    cflags: "-std=gnu++14 -fopenmp -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sink-3.C'
    sources:
      binary: sink-3.s
  group: GRPSERIAL
test_sink-3_577:
  build:
    cflags: "-std=gnu++98 -fopenmp -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sink-3.C'
    sources:
      binary: sink-3.s
  group: GRPSERIAL
test_sink-3_578:
  build:
    cflags: "-std=gnu++11 -fopenmp -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sink-3.C'
    sources:
      binary: sink-3.s
  group: GRPSERIAL
test_sink-3_579:
  build:
    cflags: "-std=gnu++14 -fopenmp -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/sink-3.C'
    sources:
      binary: sink-3.s
  group: GRPSERIAL
test_target-1_1262:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/target-1.C'
    sources:
      binary: target-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid entry
          to OpenMP structured block")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
test_target-1_1263:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/target-1.C'
    sources:
      binary: target-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid entry
          to OpenMP structured block")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
test_target-1_1264:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/target-1.C'
    sources:
      binary: target-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid entry
          to OpenMP structured block")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
test_target-1_580:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/target-1.C'
    sources:
      binary: target-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid entry
          to OpenMP structured block")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
test_target-1_581:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/target-1.C'
    sources:
      binary: target-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid entry
          to OpenMP structured block")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
test_target-1_582:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/target-1.C'
    sources:
      binary: target-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid entry
          to OpenMP structured block")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
test_target-2_1265:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/target-2.C'
    sources:
      binary: target-2.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid entry
          to OpenMP structured block")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
test_target-2_1266:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/target-2.C'
    sources:
      binary: target-2.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid entry
          to OpenMP structured block")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
test_target-2_1267:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/target-2.C'
    sources:
      binary: target-2.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid entry
          to OpenMP structured block")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
test_target-2_583:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/target-2.C'
    sources:
      binary: target-2.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid entry
          to OpenMP structured block")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
test_target-2_584:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/target-2.C'
    sources:
      binary: target-2.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid entry
          to OpenMP structured block")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
test_target-2_585:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/target-2.C'
    sources:
      binary: target-2.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid entry
          to OpenMP structured block")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
test_target-teams-1_1268:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/target-teams-1.C'
    sources:
      binary: target-teams-1.s
  group: GRPSERIAL
test_target-teams-1_1269:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/target-teams-1.C'
    sources:
      binary: target-teams-1.s
  group: GRPSERIAL
test_target-teams-1_1270:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/target-teams-1.C'
    sources:
      binary: target-teams-1.s
  group: GRPSERIAL
test_target-teams-1_586:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/target-teams-1.C'
    sources:
      binary: target-teams-1.s
  group: GRPSERIAL
test_target-teams-1_587:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/target-teams-1.C'
    sources:
      binary: target-teams-1.s
  group: GRPSERIAL
test_target-teams-1_588:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/target-teams-1.C'
    sources:
      binary: target-teams-1.s
  group: GRPSERIAL
test_task-1_1271:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/task-1.C'
    sources:
      binary: task-1.s
  group: GRPSERIAL
test_task-1_1272:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/task-1.C'
    sources:
      binary: task-1.s
  group: GRPSERIAL
test_task-1_1273:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/task-1.C'
    sources:
      binary: task-1.s
  group: GRPSERIAL
test_task-1_589:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/task-1.C'
    sources:
      binary: task-1.s
  group: GRPSERIAL
test_task-1_590:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/task-1.C'
    sources:
      binary: task-1.s
  group: GRPSERIAL
test_task-1_591:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/task-1.C'
    sources:
      binary: task-1.s
  group: GRPSERIAL
test_taskgroup-1_1274:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/taskgroup-1.C'
    sources:
      binary: taskgroup-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid entry
          to OpenMP structured block")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
test_taskgroup-1_1275:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/taskgroup-1.C'
    sources:
      binary: taskgroup-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid entry
          to OpenMP structured block")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
test_taskgroup-1_1276:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/taskgroup-1.C'
    sources:
      binary: taskgroup-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid entry
          to OpenMP structured block")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
test_taskgroup-1_592:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/taskgroup-1.C'
    sources:
      binary: taskgroup-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid entry
          to OpenMP structured block")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
test_taskgroup-1_593:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/taskgroup-1.C'
    sources:
      binary: taskgroup-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid entry
          to OpenMP structured block")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
test_taskgroup-1_594:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/taskgroup-1.C'
    sources:
      binary: taskgroup-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid entry
          to OpenMP structured block")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
test_teams-1_1277:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/teams-1.C'
    sources:
      binary: teams-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid entry
          to OpenMP structured block")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid entry
          to OpenMP structured block")[^\n]*\n?)+'
test_teams-1_1278:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/teams-1.C'
    sources:
      binary: teams-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid entry
          to OpenMP structured block")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid entry
          to OpenMP structured block")[^\n]*\n?)+'
test_teams-1_1279:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/teams-1.C'
    sources:
      binary: teams-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid entry
          to OpenMP structured block")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid entry
          to OpenMP structured block")[^\n]*\n?)+'
test_teams-1_595:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/teams-1.C'
    sources:
      binary: teams-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid entry
          to OpenMP structured block")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid entry
          to OpenMP structured block")[^\n]*\n?)+'
test_teams-1_596:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/teams-1.C'
    sources:
      binary: teams-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid entry
          to OpenMP structured block")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid entry
          to OpenMP structured block")[^\n]*\n?)+'
test_teams-1_597:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/teams-1.C'
    sources:
      binary: teams-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump to label")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("statement will never
          be executed")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("jump")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid entry
          to OpenMP structured block")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid branch
          to/from OpenMP structured block")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid entry
          to OpenMP structured block")[^\n]*\n?)+'
test_this-1_1280:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/this-1.C'
    sources:
      binary: this-1.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not an function
          argument")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not an function
          argument")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
test_this-1_1281:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/this-1.C'
    sources:
      binary: this-1.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not an function
          argument")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not an function
          argument")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
test_this-1_1282:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/this-1.C'
    sources:
      binary: this-1.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not an function
          argument")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not an function
          argument")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
test_this-1_598:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/this-1.C'
    sources:
      binary: this-1.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not an function
          argument")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not an function
          argument")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
test_this-1_599:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/this-1.C'
    sources:
      binary: this-1.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not an function
          argument")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not an function
          argument")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
test_this-1_600:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/this-1.C'
    sources:
      binary: this-1.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not an function
          argument")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not an function
          argument")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
test_this-2_1283:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/this-2.C'
    sources:
      binary: this-2.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
test_this-2_1284:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/this-2.C'
    sources:
      binary: this-2.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
test_this-2_1285:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/this-2.C'
    sources:
      binary: this-2.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
test_this-2_601:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/this-2.C'
    sources:
      binary: this-2.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
test_this-2_602:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/this-2.C'
    sources:
      binary: this-2.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
test_this-2_603:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/this-2.C'
    sources:
      binary: this-2.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".this. allowed
          in OpenMP only in .declare simd. clauses")[^\n]*\n?)+'
test_tls-1_1286:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-1.C'
    sources:
      binary: tls-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("after first use")[^\n]*\n?)+'
test_tls-1_1287:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-1.C'
    sources:
      binary: tls-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("after first use")[^\n]*\n?)+'
test_tls-1_1288:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-1.C'
    sources:
      binary: tls-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("after first use")[^\n]*\n?)+'
test_tls-1_604:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-1.C'
    sources:
      binary: tls-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("after first use")[^\n]*\n?)+'
test_tls-1_605:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-1.C'
    sources:
      binary: tls-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("after first use")[^\n]*\n?)+'
test_tls-1_606:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-1.C'
    sources:
      binary: tls-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declared")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("after first use")[^\n]*\n?)+'
test_tls-2_1289:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-2.C'
    sources:
      binary: tls-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("automatic variable")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
test_tls-2_1290:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-2.C'
    sources:
      binary: tls-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("automatic variable")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
test_tls-2_1291:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-2.C'
    sources:
      binary: tls-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("automatic variable")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
test_tls-2_607:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-2.C'
    sources:
      binary: tls-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("automatic variable")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
test_tls-2_608:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-2.C'
    sources:
      binary: tls-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("automatic variable")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
test_tls-2_609:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-2.C'
    sources:
      binary: tls-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("automatic variable")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has incomplete
          type")[^\n]*\n?)+'
test_tls-3_1292:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-3.C'
    sources:
      binary: tls-3.s
  group: GRPSERIAL
test_tls-3_1293:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-3.C'
    sources:
      binary: tls-3.s
  group: GRPSERIAL
test_tls-3_1294:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-3.C'
    sources:
      binary: tls-3.s
  group: GRPSERIAL
test_tls-3_610:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-3.C'
    sources:
      binary: tls-3.s
  group: GRPSERIAL
test_tls-3_611:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-3.C'
    sources:
      binary: tls-3.s
  group: GRPSERIAL
test_tls-3_612:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-3.C'
    sources:
      binary: tls-3.s
  group: GRPSERIAL
test_tls-4_1295:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-4.C'
    sources:
      binary: tls-4.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive not
          in")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive not
          in")[^\n]*\n?)+'
test_tls-4_1296:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-4.C'
    sources:
      binary: tls-4.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive not
          in")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive not
          in")[^\n]*\n?)+'
test_tls-4_1297:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-4.C'
    sources:
      binary: tls-4.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive not
          in")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive not
          in")[^\n]*\n?)+'
test_tls-4_613:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-4.C'
    sources:
      binary: tls-4.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive not
          in")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive not
          in")[^\n]*\n?)+'
test_tls-4_614:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-4.C'
    sources:
      binary: tls-4.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive not
          in")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive not
          in")[^\n]*\n?)+'
test_tls-4_615:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-4.C'
    sources:
      binary: tls-4.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive not
          in")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive not
          in")[^\n]*\n?)+'
test_tls-5_1298:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-5.C'
    sources:
      binary: tls-5.s
  group: GRPSERIAL
test_tls-5_1299:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-5.C'
    sources:
      binary: tls-5.s
  group: GRPSERIAL
test_tls-5_616:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-5.C'
    sources:
      binary: tls-5.s
  group: GRPSERIAL
test_tls-5_617:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-5.C'
    sources:
      binary: tls-5.s
  group: GRPSERIAL
test_tls-template1_1300:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-template1.C'
    sources:
      binary: tls-template1.s
  group: GRPSERIAL
test_tls-template1_1301:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-template1.C'
    sources:
      binary: tls-template1.s
  group: GRPSERIAL
test_tls-template1_1302:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-template1.C'
    sources:
      binary: tls-template1.s
  group: GRPSERIAL
test_tls-template1_618:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-template1.C'
    sources:
      binary: tls-template1.s
  group: GRPSERIAL
test_tls-template1_619:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-template1.C'
    sources:
      binary: tls-template1.s
  group: GRPSERIAL
test_tls-template1_620:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-template1.C'
    sources:
      binary: tls-template1.s
  group: GRPSERIAL
test_tls-wrap1_1303:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-wrap1.C'
    sources:
      binary: tls-wrap1.s
  group: GRPSERIAL
test_tls-wrap1_1304:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-wrap1.C'
    sources:
      binary: tls-wrap1.s
  group: GRPSERIAL
test_tls-wrap1_1305:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-wrap1.C'
    sources:
      binary: tls-wrap1.s
  group: GRPSERIAL
test_tls-wrap1_621:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-wrap1.C'
    sources:
      binary: tls-wrap1.s
  group: GRPSERIAL
test_tls-wrap1_622:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-wrap1.C'
    sources:
      binary: tls-wrap1.s
  group: GRPSERIAL
test_tls-wrap1_623:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-wrap1.C'
    sources:
      binary: tls-wrap1.s
  group: GRPSERIAL
test_tls-wrap2_1306:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-wrap2.C'
    sources:
      binary: tls-wrap2.s
  group: GRPSERIAL
test_tls-wrap2_1307:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-wrap2.C'
    sources:
      binary: tls-wrap2.s
  group: GRPSERIAL
test_tls-wrap2_1308:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-wrap2.C'
    sources:
      binary: tls-wrap2.s
  group: GRPSERIAL
test_tls-wrap2_624:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-wrap2.C'
    sources:
      binary: tls-wrap2.s
  group: GRPSERIAL
test_tls-wrap2_625:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-wrap2.C'
    sources:
      binary: tls-wrap2.s
  group: GRPSERIAL
test_tls-wrap2_626:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-wrap2.C'
    sources:
      binary: tls-wrap2.s
  group: GRPSERIAL
test_tls-wrap3_1309:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-wrap3.C'
    sources:
      binary: tls-wrap3.s
  group: GRPSERIAL
test_tls-wrap3_1310:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-wrap3.C'
    sources:
      binary: tls-wrap3.s
  group: GRPSERIAL
test_tls-wrap3_1311:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-wrap3.C'
    sources:
      binary: tls-wrap3.s
  group: GRPSERIAL
test_tls-wrap3_627:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-wrap3.C'
    sources:
      binary: tls-wrap3.s
  group: GRPSERIAL
test_tls-wrap3_628:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-wrap3.C'
    sources:
      binary: tls-wrap3.s
  group: GRPSERIAL
test_tls-wrap3_629:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-wrap3.C'
    sources:
      binary: tls-wrap3.s
  group: GRPSERIAL
test_tls-wrap4_1312:
  build:
    cflags: "-std=gnu++11 -fPIC -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-wrap4.C'
    sources:
      binary: tls-wrap4.s
  group: GRPSERIAL
test_tls-wrap4_1313:
  build:
    cflags: "-std=gnu++14 -fPIC -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-wrap4.C'
    sources:
      binary: tls-wrap4.s
  group: GRPSERIAL
test_tls-wrap4_630:
  build:
    cflags: "-std=gnu++11 -fPIC -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-wrap4.C'
    sources:
      binary: tls-wrap4.s
  group: GRPSERIAL
test_tls-wrap4_631:
  build:
    cflags: "-std=gnu++14 -fPIC -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-wrap4.C'
    sources:
      binary: tls-wrap4.s
  group: GRPSERIAL
test_tls-wrapper-cse_1314:
  build:
    cflags: "-std=gnu++98 -fopenmp -O -fno-inline -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-wrapper-cse.C'
    sources:
      binary: tls-wrapper-cse.s
  group: GRPSERIAL
test_tls-wrapper-cse_1315:
  build:
    cflags: "-std=gnu++11 -fopenmp -O -fno-inline -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-wrapper-cse.C'
    sources:
      binary: tls-wrapper-cse.s
  group: GRPSERIAL
test_tls-wrapper-cse_1316:
  build:
    cflags: "-std=gnu++14 -fopenmp -O -fno-inline -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-wrapper-cse.C'
    sources:
      binary: tls-wrapper-cse.s
  group: GRPSERIAL
test_tls-wrapper-cse_632:
  build:
    cflags: "-std=gnu++98 -fopenmp -O -fno-inline -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-wrapper-cse.C'
    sources:
      binary: tls-wrapper-cse.s
  group: GRPSERIAL
test_tls-wrapper-cse_633:
  build:
    cflags: "-std=gnu++11 -fopenmp -O -fno-inline -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-wrapper-cse.C'
    sources:
      binary: tls-wrapper-cse.s
  group: GRPSERIAL
test_tls-wrapper-cse_634:
  build:
    cflags: "-std=gnu++14 -fopenmp -O -fno-inline -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tls-wrapper-cse.C'
    sources:
      binary: tls-wrapper-cse.s
  group: GRPSERIAL
test_tpl-atomic-1_1317:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-atomic-1.C'
    sources:
      binary: tpl-atomic-1.s
  group: GRPSERIAL
test_tpl-atomic-1_1318:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-atomic-1.C'
    sources:
      binary: tpl-atomic-1.s
  group: GRPSERIAL
test_tpl-atomic-1_1319:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-atomic-1.C'
    sources:
      binary: tpl-atomic-1.s
  group: GRPSERIAL
test_tpl-atomic-1_635:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-atomic-1.C'
    sources:
      binary: tpl-atomic-1.s
  group: GRPSERIAL
test_tpl-atomic-1_636:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-atomic-1.C'
    sources:
      binary: tpl-atomic-1.s
  group: GRPSERIAL
test_tpl-atomic-1_637:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-atomic-1.C'
    sources:
      binary: tpl-atomic-1.s
  group: GRPSERIAL
test_tpl-atomic-2_1320:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-atomic-2.C'
    sources:
      binary: tpl-atomic-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid|evaluation")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid|evaluation")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid|evaluation")[^\n]*\n?)+'
test_tpl-atomic-2_1321:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-atomic-2.C'
    sources:
      binary: tpl-atomic-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid|evaluation")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid|evaluation")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid|evaluation")[^\n]*\n?)+'
test_tpl-atomic-2_1322:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-atomic-2.C'
    sources:
      binary: tpl-atomic-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid|evaluation")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid|evaluation")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid|evaluation")[^\n]*\n?)+'
test_tpl-atomic-2_638:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-atomic-2.C'
    sources:
      binary: tpl-atomic-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid|evaluation")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid|evaluation")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid|evaluation")[^\n]*\n?)+'
test_tpl-atomic-2_639:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-atomic-2.C'
    sources:
      binary: tpl-atomic-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid|evaluation")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid|evaluation")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid|evaluation")[^\n]*\n?)+'
test_tpl-atomic-2_640:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-atomic-2.C'
    sources:
      binary: tpl-atomic-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid|evaluation")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid|evaluation")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid|evaluation")[^\n]*\n?)+'
test_tpl-barrier-1_1323:
  build:
    cflags: "-std=gnu++98 -fopenmp -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-barrier-1.C'
    sources:
      binary: tpl-barrier-1.s
  group: GRPSERIAL
test_tpl-barrier-1_1324:
  build:
    cflags: "-std=gnu++11 -fopenmp -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-barrier-1.C'
    sources:
      binary: tpl-barrier-1.s
  group: GRPSERIAL
test_tpl-barrier-1_1325:
  build:
    cflags: "-std=gnu++14 -fopenmp -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-barrier-1.C'
    sources:
      binary: tpl-barrier-1.s
  group: GRPSERIAL
test_tpl-barrier-1_641:
  build:
    cflags: "-std=gnu++98 -fopenmp -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-barrier-1.C'
    sources:
      binary: tpl-barrier-1.s
  group: GRPSERIAL
test_tpl-barrier-1_642:
  build:
    cflags: "-std=gnu++11 -fopenmp -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-barrier-1.C'
    sources:
      binary: tpl-barrier-1.s
  group: GRPSERIAL
test_tpl-barrier-1_643:
  build:
    cflags: "-std=gnu++14 -fopenmp -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-barrier-1.C'
    sources:
      binary: tpl-barrier-1.s
  group: GRPSERIAL
test_tpl-for-1_1326:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-for-1.C'
    sources:
      binary: tpl-for-1.s
  group: GRPSERIAL
test_tpl-for-1_1327:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-for-1.C'
    sources:
      binary: tpl-for-1.s
  group: GRPSERIAL
test_tpl-for-1_1328:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-for-1.C'
    sources:
      binary: tpl-for-1.s
  group: GRPSERIAL
test_tpl-for-1_644:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-for-1.C'
    sources:
      binary: tpl-for-1.s
  group: GRPSERIAL
test_tpl-for-1_645:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-for-1.C'
    sources:
      binary: tpl-for-1.s
  group: GRPSERIAL
test_tpl-for-1_646:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-for-1.C'
    sources:
      binary: tpl-for-1.s
  group: GRPSERIAL
test_tpl-for-2_1329:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-for-2.C'
    sources:
      binary: tpl-for-2.s
  group: GRPSERIAL
test_tpl-for-2_1330:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-for-2.C'
    sources:
      binary: tpl-for-2.s
  group: GRPSERIAL
test_tpl-for-2_1331:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-for-2.C'
    sources:
      binary: tpl-for-2.s
  group: GRPSERIAL
test_tpl-for-2_647:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-for-2.C'
    sources:
      binary: tpl-for-2.s
  group: GRPSERIAL
test_tpl-for-2_648:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-for-2.C'
    sources:
      binary: tpl-for-2.s
  group: GRPSERIAL
test_tpl-for-2_649:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-for-2.C'
    sources:
      binary: tpl-for-2.s
  group: GRPSERIAL
test_tpl-for-3_1332:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-for-3.C'
    sources:
      binary: tpl-for-3.s
  group: GRPSERIAL
test_tpl-for-3_1333:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-for-3.C'
    sources:
      binary: tpl-for-3.s
  group: GRPSERIAL
test_tpl-for-3_1334:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-for-3.C'
    sources:
      binary: tpl-for-3.s
  group: GRPSERIAL
test_tpl-for-3_650:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-for-3.C'
    sources:
      binary: tpl-for-3.s
  group: GRPSERIAL
test_tpl-for-3_651:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-for-3.C'
    sources:
      binary: tpl-for-3.s
  group: GRPSERIAL
test_tpl-for-3_652:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-for-3.C'
    sources:
      binary: tpl-for-3.s
  group: GRPSERIAL
test_tpl-master-1_1335:
  build:
    cflags: "-std=gnu++98 -fopenmp -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-master-1.C'
    sources:
      binary: tpl-master-1.s
  group: GRPSERIAL
test_tpl-master-1_1336:
  build:
    cflags: "-std=gnu++11 -fopenmp -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-master-1.C'
    sources:
      binary: tpl-master-1.s
  group: GRPSERIAL
test_tpl-master-1_1337:
  build:
    cflags: "-std=gnu++14 -fopenmp -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-master-1.C'
    sources:
      binary: tpl-master-1.s
  group: GRPSERIAL
test_tpl-master-1_653:
  build:
    cflags: "-std=gnu++98 -fopenmp -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-master-1.C'
    sources:
      binary: tpl-master-1.s
  group: GRPSERIAL
test_tpl-master-1_654:
  build:
    cflags: "-std=gnu++11 -fopenmp -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-master-1.C'
    sources:
      binary: tpl-master-1.s
  group: GRPSERIAL
test_tpl-master-1_655:
  build:
    cflags: "-std=gnu++14 -fopenmp -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-master-1.C'
    sources:
      binary: tpl-master-1.s
  group: GRPSERIAL
test_tpl-parallel-1_1338:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-parallel-1.C'
    sources:
      binary: tpl-parallel-1.s
  group: GRPSERIAL
test_tpl-parallel-1_1339:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-parallel-1.C'
    sources:
      binary: tpl-parallel-1.s
  group: GRPSERIAL
test_tpl-parallel-1_1340:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-parallel-1.C'
    sources:
      binary: tpl-parallel-1.s
  group: GRPSERIAL
test_tpl-parallel-1_656:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-parallel-1.C'
    sources:
      binary: tpl-parallel-1.s
  group: GRPSERIAL
test_tpl-parallel-1_657:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-parallel-1.C'
    sources:
      binary: tpl-parallel-1.s
  group: GRPSERIAL
test_tpl-parallel-1_658:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-parallel-1.C'
    sources:
      binary: tpl-parallel-1.s
  group: GRPSERIAL
test_tpl-parallel-2_1341:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-parallel-2.C'
    sources:
      binary: tpl-parallel-2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must be integral")[^\n]*\n?)+'
test_tpl-parallel-2_1342:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-parallel-2.C'
    sources:
      binary: tpl-parallel-2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must be integral")[^\n]*\n?)+'
test_tpl-parallel-2_1343:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-parallel-2.C'
    sources:
      binary: tpl-parallel-2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must be integral")[^\n]*\n?)+'
test_tpl-parallel-2_659:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-parallel-2.C'
    sources:
      binary: tpl-parallel-2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must be integral")[^\n]*\n?)+'
test_tpl-parallel-2_660:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-parallel-2.C'
    sources:
      binary: tpl-parallel-2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must be integral")[^\n]*\n?)+'
test_tpl-parallel-2_661:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-parallel-2.C'
    sources:
      binary: tpl-parallel-2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must be integral")[^\n]*\n?)+'
test_tpl-target-update_1344:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-target-update.C'
    sources:
      binary: tpl-target-update.s
  group: GRPSERIAL
test_tpl-target-update_1345:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-target-update.C'
    sources:
      binary: tpl-target-update.s
  group: GRPSERIAL
test_tpl-target-update_1346:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-target-update.C'
    sources:
      binary: tpl-target-update.s
  group: GRPSERIAL
test_tpl-target-update_662:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-target-update.C'
    sources:
      binary: tpl-target-update.s
  group: GRPSERIAL
test_tpl-target-update_663:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-target-update.C'
    sources:
      binary: tpl-target-update.s
  group: GRPSERIAL
test_tpl-target-update_664:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/tpl-target-update.C'
    sources:
      binary: tpl-target-update.s
  group: GRPSERIAL
test_udr-1_1347:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/udr-1.C'
    sources:
      binary: udr-1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L105:
        expect: true
        expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("reference type")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("reference type")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("reference type")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
test_udr-1_1348:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/udr-1.C'
    sources:
      binary: udr-1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L105:
        expect: true
        expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("reference type")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("reference type")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("reference type")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
test_udr-1_1349:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/udr-1.C'
    sources:
      binary: udr-1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L105:
        expect: true
        expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("reference type")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("reference type")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("reference type")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
test_udr-1_665:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/udr-1.C'
    sources:
      binary: udr-1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L105:
        expect: true
        expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("reference type")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("reference type")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("reference type")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
test_udr-1_666:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/udr-1.C'
    sources:
      binary: udr-1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L105:
        expect: true
        expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("reference type")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("reference type")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("reference type")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
test_udr-1_667:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/udr-1.C'
    sources:
      binary: udr-1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L101:
        expect: true
        expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L105:
        expect: true
        expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("reference type")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function or array
          type")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("reference type")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("reference type")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared arithmetic
          type")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const, volatile
          or __restrict")[^\n]*\n?)+'
test_udr-2_1350:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/udr-2.C'
    sources:
      binary: udr-2.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
test_udr-2_1351:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/udr-2.C'
    sources:
      binary: udr-2.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
test_udr-2_1352:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/udr-2.C'
    sources:
      binary: udr-2.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
test_udr-2_668:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/udr-2.C'
    sources:
      binary: udr-2.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
test_udr-2_669:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/udr-2.C'
    sources:
      binary: udr-2.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
test_udr-2_670:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/udr-2.C'
    sources:
      binary: udr-2.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L102:
        expect: true
        expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner refers
          to variable")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer refers
          to variable")[^\n]*\n?)+'
test_udr-3_1353:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/udr-3.C'
    sources:
      binary: udr-3.s
  group: GRPSERIAL
  validate:
    match:
      L101:
        expect: true
        expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be overloaded")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be overloaded")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with")[^\n]*\n?)+'
      L136:
        expect: true
        expr: '(^|\n)([^\n]+:136:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be overloaded")[^\n]*\n?)+'
      L149:
        expect: true
        expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L162:
        expect: true
        expr: '(^|\n)([^\n]+:162:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with")[^\n]*\n?)+'
      L163:
        expect: true
        expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be overloaded")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be overloaded")[^\n]*\n?)+'
      L174:
        expect: true
        expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid initializer
          clause")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid initializer
          clause")[^\n]*\n?)+'
      L188:
        expect: true
        expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction with constructor initializer for base class")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("one of the initializer
          call arguments should be")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("one of the initializer
          call arguments should be")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be overloaded")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
test_udr-3_1354:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/udr-3.C'
    sources:
      binary: udr-3.s
  group: GRPSERIAL
  validate:
    match:
      L101:
        expect: true
        expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be overloaded")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be overloaded")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with")[^\n]*\n?)+'
      L136:
        expect: true
        expr: '(^|\n)([^\n]+:136:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be overloaded")[^\n]*\n?)+'
      L149:
        expect: true
        expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L162:
        expect: true
        expr: '(^|\n)([^\n]+:162:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with")[^\n]*\n?)+'
      L163:
        expect: true
        expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be overloaded")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be overloaded")[^\n]*\n?)+'
      L174:
        expect: true
        expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid initializer
          clause")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid initializer
          clause")[^\n]*\n?)+'
      L188:
        expect: true
        expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction with constructor initializer for base class")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("one of the initializer
          call arguments should be")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("one of the initializer
          call arguments should be")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be overloaded")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
test_udr-3_1355:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/udr-3.C'
    sources:
      binary: udr-3.s
  group: GRPSERIAL
  validate:
    match:
      L101:
        expect: true
        expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be overloaded")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be overloaded")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with")[^\n]*\n?)+'
      L136:
        expect: true
        expr: '(^|\n)([^\n]+:136:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be overloaded")[^\n]*\n?)+'
      L149:
        expect: true
        expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L162:
        expect: true
        expr: '(^|\n)([^\n]+:162:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with")[^\n]*\n?)+'
      L163:
        expect: true
        expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be overloaded")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be overloaded")[^\n]*\n?)+'
      L174:
        expect: true
        expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid initializer
          clause")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid initializer
          clause")[^\n]*\n?)+'
      L188:
        expect: true
        expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction with constructor initializer for base class")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("one of the initializer
          call arguments should be")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("one of the initializer
          call arguments should be")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be overloaded")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
test_udr-3_671:
  build:
    cflags: "-std=gnu++98 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/udr-3.C'
    sources:
      binary: udr-3.s
  group: GRPSERIAL
  validate:
    match:
      L101:
        expect: true
        expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be overloaded")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be overloaded")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with")[^\n]*\n?)+'
      L136:
        expect: true
        expr: '(^|\n)([^\n]+:136:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be overloaded")[^\n]*\n?)+'
      L149:
        expect: true
        expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L162:
        expect: true
        expr: '(^|\n)([^\n]+:162:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with")[^\n]*\n?)+'
      L163:
        expect: true
        expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be overloaded")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be overloaded")[^\n]*\n?)+'
      L174:
        expect: true
        expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid initializer
          clause")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid initializer
          clause")[^\n]*\n?)+'
      L188:
        expect: true
        expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction with constructor initializer for base class")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("one of the initializer
          call arguments should be")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("one of the initializer
          call arguments should be")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be overloaded")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
test_udr-3_672:
  build:
    cflags: "-std=gnu++11 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/udr-3.C'
    sources:
      binary: udr-3.s
  group: GRPSERIAL
  validate:
    match:
      L101:
        expect: true
        expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be overloaded")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be overloaded")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with")[^\n]*\n?)+'
      L136:
        expect: true
        expr: '(^|\n)([^\n]+:136:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be overloaded")[^\n]*\n?)+'
      L149:
        expect: true
        expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L162:
        expect: true
        expr: '(^|\n)([^\n]+:162:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with")[^\n]*\n?)+'
      L163:
        expect: true
        expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be overloaded")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be overloaded")[^\n]*\n?)+'
      L174:
        expect: true
        expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid initializer
          clause")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid initializer
          clause")[^\n]*\n?)+'
      L188:
        expect: true
        expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction with constructor initializer for base class")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("one of the initializer
          call arguments should be")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("one of the initializer
          call arguments should be")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be overloaded")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
test_udr-3_673:
  build:
    cflags: "-std=gnu++14 -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/udr-3.C'
    sources:
      binary: udr-3.s
  group: GRPSERIAL
  validate:
    match:
      L101:
        expect: true
        expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be overloaded")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be overloaded")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with")[^\n]*\n?)+'
      L136:
        expect: true
        expr: '(^|\n)([^\n]+:136:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be overloaded")[^\n]*\n?)+'
      L149:
        expect: true
        expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L162:
        expect: true
        expr: '(^|\n)([^\n]+:162:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with")[^\n]*\n?)+'
      L163:
        expect: true
        expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be overloaded")[^\n]*\n?)+'
      L164:
        expect: true
        expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with")[^\n]*\n?)+'
      L165:
        expect: true
        expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be overloaded")[^\n]*\n?)+'
      L174:
        expect: true
        expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid initializer
          clause")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid initializer
          clause")[^\n]*\n?)+'
      L188:
        expect: true
        expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction with constructor initializer for base class")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("one of the initializer
          call arguments should be")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("one of the initializer
          call arguments should be")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be overloaded")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'
test_udr-4_1356:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/udr-4.C'
    sources:
      binary: udr-4.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid reduction-identifier")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete type")[^\n]*\n?)+'
test_udr-4_1357:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/udr-4.C'
    sources:
      binary: udr-4.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid reduction-identifier")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete type")[^\n]*\n?)+'
test_udr-4_1358:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/udr-4.C'
    sources:
      binary: udr-4.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid reduction-identifier")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete type")[^\n]*\n?)+'
test_udr-4_674:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/udr-4.C'
    sources:
      binary: udr-4.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid reduction-identifier")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete type")[^\n]*\n?)+'
test_udr-4_675:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/udr-4.C'
    sources:
      binary: udr-4.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid reduction-identifier")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete type")[^\n]*\n?)+'
test_udr-4_676:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/udr-4.C'
    sources:
      binary: udr-4.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid reduction-identifier")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete type")[^\n]*\n?)+'
test_udr-5_1359:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/udr-5.C'
    sources:
      binary: udr-5.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("within this context")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("within this context")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("within this context")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("within this context")[^\n]*\n?)+'
test_udr-5_1360:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/udr-5.C'
    sources:
      binary: udr-5.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("within this context")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("within this context")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("within this context")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("within this context")[^\n]*\n?)+'
test_udr-5_1361:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/udr-5.C'
    sources:
      binary: udr-5.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("within this context")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("within this context")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("within this context")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("within this context")[^\n]*\n?)+'
test_udr-5_677:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/udr-5.C'
    sources:
      binary: udr-5.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("within this context")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("within this context")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("within this context")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("within this context")[^\n]*\n?)+'
test_udr-5_678:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/udr-5.C'
    sources:
      binary: udr-5.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("within this context")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("within this context")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("within this context")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("within this context")[^\n]*\n?)+'
test_udr-5_679:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/udr-5.C'
    sources:
      binary: udr-5.s
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("within this context")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("within this context")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("within this context")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("within this context")[^\n]*\n?)+'
test_udr-6_1362:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/udr-6.C'
    sources:
      binary: udr-6.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction lookup is ambiguous")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction lookup is ambiguous")[^\n]*\n?)+'
test_udr-6_1363:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/udr-6.C'
    sources:
      binary: udr-6.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction lookup is ambiguous")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction lookup is ambiguous")[^\n]*\n?)+'
test_udr-6_1364:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/udr-6.C'
    sources:
      binary: udr-6.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction lookup is ambiguous")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction lookup is ambiguous")[^\n]*\n?)+'
test_udr-6_680:
  build:
    cflags: "-std=c++98 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/udr-6.C'
    sources:
      binary: udr-6.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction lookup is ambiguous")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction lookup is ambiguous")[^\n]*\n?)+'
test_udr-6_681:
  build:
    cflags: "-std=c++11 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/udr-6.C'
    sources:
      binary: udr-6.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction lookup is ambiguous")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction lookup is ambiguous")[^\n]*\n?)+'
test_udr-6_682:
  build:
    cflags: "-std=c++14 -fopenmp -Wno-hsa\n -S"
    files: '@ROOTPATH@/compilers/gcc/./g++.dg/gomp/udr-6.C'
    sources:
      binary: udr-6.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction lookup is ambiguous")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user defined
          reduction lookup is ambiguous")[^\n]*\n?)+'
