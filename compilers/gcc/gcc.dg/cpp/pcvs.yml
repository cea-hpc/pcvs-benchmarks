test_19921210-1_1:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/19921210-1.c
    sources:
      binary: 19921210-1.s
  group: GRPSERIAL
test_19921210-1_406:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/19921210-1.c
    sources:
      binary: 19921210-1.s
  group: GRPSERIAL
test_19930510-1_2:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/19930510-1.c
    sources:
      binary: 19930510-1.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid")[^\n]*\n?)+'
test_19930510-1_407:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/19930510-1.c
    sources:
      binary: 19930510-1.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid")[^\n]*\n?)+'
test_19940712-1_3:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/19940712-1.c
    sources:
      binary: 19940712-1.i
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unterminated comment")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unterminated comment")[^\n]*\n?)+'
test_19940712-1_408:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/19940712-1.c
    sources:
      binary: 19940712-1.i
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unterminated comment")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unterminated comment")[^\n]*\n?)+'
test_19951025-1_4:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/19951025-1.c
    sources:
      binary: 19951025-1.i
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("include expects")[^\n]*\n?)+'
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("newline at end")[^\n]*\n?)+'
test_19951025-1_409:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/19951025-1.c
    sources:
      binary: 19951025-1.i
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("include expects")[^\n]*\n?)+'
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("newline at end")[^\n]*\n?)+'
test_19951227-1_410:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/19951227-1.c
    sources:
      binary: 19951227-1.i
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
test_19951227-1_5:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/19951227-1.c
    sources:
      binary: 19951227-1.i
  group: GRPSERIAL
  validate:
    match:
      L2:
        expect: true
        expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
test_19960224-1_411:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/19960224-1.c
    sources:
      binary: 19960224-1.i
  group: GRPSERIAL
test_19960224-1_6:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/19960224-1.c
    sources:
      binary: 19960224-1.i
  group: GRPSERIAL
test_19990119-1_412:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/19990119-1.c
    sources:
      binary: 19990119-1.s
  group: GRPSERIAL
test_19990119-1_7:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/19990119-1.c
    sources:
      binary: 19990119-1.s
  group: GRPSERIAL
test_19990228-1_413:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/19990228-1.c
    sources:
      binary: 19990228-1.i
  group: GRPSERIAL
test_19990228-1_8:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/19990228-1.c
    sources:
      binary: 19990228-1.i
  group: GRPSERIAL
test_19990407-1_414:
  build:
    cflags: -ansi -pedantic-errors
    files: compilers/gcc/./gcc.dg/cpp/19990407-1.c
    sources:
      binary: ./19990407-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_19990407-1_9:
  build:
    cflags: -ansi -pedantic-errors
    files: compilers/gcc/./gcc.dg/cpp/19990407-1.c
    sources:
      binary: ./19990407-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_19990409-1_10:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/19990409-1.c
    sources:
      binary: 19990409-1.s
  group: GRPSERIAL
test_19990409-1_415:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/19990409-1.c
    sources:
      binary: 19990409-1.s
  group: GRPSERIAL
test_19990413-1_11:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/19990413-1.c
    sources:
      binary: 19990413-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''else\'' without
          a previous \''if\''")[^\n]*\n?)+'
test_19990413-1_416:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/19990413-1.c
    sources:
      binary: 19990413-1.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''else\'' without
          a previous \''if\''")[^\n]*\n?)+'
test_20000127-1_12:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/20000127-1.c
    sources:
      binary: 20000127-1.s
  group: GRPSERIAL
test_20000127-1_417:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/20000127-1.c
    sources:
      binary: 20000127-1.s
  group: GRPSERIAL
test_20000129-1_13:
  build:
    cflags: -Wall -E
    files: compilers/gcc/./gcc.dg/cpp/20000129-1.c
    sources:
      binary: 20000129-1.i
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("trigraph ...")[^\n]*\n?)+'
test_20000129-1_418:
  build:
    cflags: -Wall -E
    files: compilers/gcc/./gcc.dg/cpp/20000129-1.c
    sources:
      binary: 20000129-1.i
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("trigraph ...")[^\n]*\n?)+'
test_20000207-1_14:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/20000207-1.c
    sources:
      binary: 20000207-1.i
  group: GRPSERIAL
test_20000207-1_419:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/20000207-1.c
    sources:
      binary: 20000207-1.i
  group: GRPSERIAL
test_20000207-2_15:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/20000207-2.c
    sources:
      binary: 20000207-2.i
  group: GRPSERIAL
test_20000207-2_420:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/20000207-2.c
    sources:
      binary: 20000207-2.i
  group: GRPSERIAL
test_20000209-1_16:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/20000209-1.c
    sources:
      binary: 20000209-1.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("here")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("here")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("here")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("here")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("here")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("here")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("here")[^\n]*\n?)+'
test_20000209-1_421:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/20000209-1.c
    sources:
      binary: 20000209-1.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("here")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("here")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("here")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("here")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("here")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("here")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("here")[^\n]*\n?)+'
test_20000209-2_17:
  build:
    cflags: -Wall -S
    files: compilers/gcc/./gcc.dg/cpp/20000209-2.c
    sources:
      binary: 20000209-2.s
  group: GRPSERIAL
test_20000209-2_422:
  build:
    cflags: -Wall -S
    files: compilers/gcc/./gcc.dg/cpp/20000209-2.c
    sources:
      binary: 20000209-2.s
  group: GRPSERIAL
test_20000301-1_18:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/20000301-1.c
    sources:
      binary: 20000301-1.i
  group: GRPSERIAL
test_20000301-1_423:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/20000301-1.c
    sources:
      binary: 20000301-1.i
  group: GRPSERIAL
test_20000419-1_19:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/20000419-1.c
    sources:
      binary: 20000419-1.i
  group: GRPSERIAL
test_20000419-1_424:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/20000419-1.c
    sources:
      binary: 20000419-1.i
  group: GRPSERIAL
test_20000519-1_20:
  build:
    cflags: -ansi -E
    files: compilers/gcc/./gcc.dg/cpp/20000519-1.c
    sources:
      binary: 20000519-1.i
  group: GRPSERIAL
test_20000519-1_425:
  build:
    cflags: -ansi -E
    files: compilers/gcc/./gcc.dg/cpp/20000519-1.c
    sources:
      binary: 20000519-1.i
  group: GRPSERIAL
test_20000529-1_21:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/20000529-1.c
    sources:
      binary: 20000529-1.s
  group: GRPSERIAL
test_20000529-1_426:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/20000529-1.c
    sources:
      binary: 20000529-1.s
  group: GRPSERIAL
test_20000625-1_22:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/20000625-1.c
    sources:
      binary: 20000625-1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("valid preprocessing
          token")[^\n]*\n?)+'
test_20000625-1_427:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/20000625-1.c
    sources:
      binary: 20000625-1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("valid preprocessing
          token")[^\n]*\n?)+'
test_20000627-1_23:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/20000627-1.c
    sources:
      binary: 20000627-1.s
  group: GRPSERIAL
test_20000627-1_428:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/20000627-1.c
    sources:
      binary: 20000627-1.s
  group: GRPSERIAL
test_20000628-1_24:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/20000628-1.c
    sources:
      binary: 20000628-1.s
  group: GRPSERIAL
test_20000628-1_429:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/20000628-1.c
    sources:
      binary: 20000628-1.s
  group: GRPSERIAL
test_20000725-1_25:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/20000725-1.c
    sources:
      binary: 20000725-1.i
  group: GRPSERIAL
test_20000725-1_430:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/20000725-1.c
    sources:
      binary: 20000725-1.i
  group: GRPSERIAL
test_20020927-1_26:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/20020927-1.c
    sources:
      binary: 20020927-1.i
  group: GRPSERIAL
test_20020927-1_431:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/20020927-1.c
    sources:
      binary: 20020927-1.i
  group: GRPSERIAL
test_20050215-1_27:
  build:
    cflags: -g3 -S
    files: compilers/gcc/./gcc.dg/cpp/20050215-1.c
    sources:
      binary: 20050215-1.s
  group: GRPSERIAL
test_20050215-1_432:
  build:
    cflags: -g3 -S
    files: compilers/gcc/./gcc.dg/cpp/20050215-1.c
    sources:
      binary: 20050215-1.s
  group: GRPSERIAL
test_Wmissingdirs_28:
  build:
    cflags: -std=gnu99 -I /jolly/well/better/not/exist -Wmissing-include-dirs -E
    files: compilers/gcc/./gcc.dg/cpp/Wmissingdirs.c
    sources:
      binary: Wmissingdirs.i
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("No such file or directory.*Wmissing-include-dirs")[^\n]*\n?)+'
test_Wmissingdirs_433:
  build:
    cflags: -std=gnu99 -I /jolly/well/better/not/exist -Wmissing-include-dirs -E
    files: compilers/gcc/./gcc.dg/cpp/Wmissingdirs.c
    sources:
      binary: Wmissingdirs.i
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("No such file or directory.*Wmissing-include-dirs")[^\n]*\n?)+'
test_Wsignprom_29:
  build:
    cflags: -Wall -E
    files: compilers/gcc/./gcc.dg/cpp/Wsignprom.c
    sources:
      binary: Wsignprom.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("10:changes sign when
          promoted")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("10:changes sign when
          promoted")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("10:changes sign when
          promoted")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("5:changes sign when
          promoted")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("14:changes sign when
          promoted")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("9:changes sign when
          promoted")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("5:changes sign when
          promoted")[^\n]*\n?)+'
test_Wsignprom_434:
  build:
    cflags: -Wall -E
    files: compilers/gcc/./gcc.dg/cpp/Wsignprom.c
    sources:
      binary: Wsignprom.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("10:changes sign when
          promoted")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("10:changes sign when
          promoted")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("10:changes sign when
          promoted")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("5:changes sign when
          promoted")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("14:changes sign when
          promoted")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("9:changes sign when
          promoted")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("5:changes sign when
          promoted")[^\n]*\n?)+'
test_Wtrigraphs-2_30:
  build:
    cflags: -std=c99 -Wtrigraphs -E
    files: compilers/gcc/./gcc.dg/cpp/Wtrigraphs-2.c
    sources:
      binary: Wtrigraphs-2.i
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("converted")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("converted")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("converted")[^\n]*\n?)+'
test_Wtrigraphs-2_435:
  build:
    cflags: -std=c99 -Wtrigraphs -E
    files: compilers/gcc/./gcc.dg/cpp/Wtrigraphs-2.c
    sources:
      binary: Wtrigraphs-2.i
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("converted")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("converted")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("converted")[^\n]*\n?)+'
test_Wtrigraphs_31:
  build:
    cflags: -std=gnu99 -Wtrigraphs -E
    files: compilers/gcc/./gcc.dg/cpp/Wtrigraphs.c
    sources:
      binary: Wtrigraphs.i
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
test_Wtrigraphs_436:
  build:
    cflags: -std=gnu99 -Wtrigraphs -E
    files: compilers/gcc/./gcc.dg/cpp/Wtrigraphs.c
    sources:
      binary: Wtrigraphs.i
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'
test_Wunknown-pragmas-1_32:
  build:
    cflags: -Wunknown-pragmas -S
    files: compilers/gcc/./gcc.dg/cpp/Wunknown-pragmas-1.c
    sources:
      binary: Wunknown-pragmas-1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("unknown2")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("unknown3")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("unknown_before")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("unknown_before")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("unknown_after")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("unknown_after")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("unknown4")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("unknown5")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("unknown1")[^\n]*\n?)+'
test_Wunknown-pragmas-1_437:
  build:
    cflags: -Wunknown-pragmas -S
    files: compilers/gcc/./gcc.dg/cpp/Wunknown-pragmas-1.c
    sources:
      binary: Wunknown-pragmas-1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("unknown2")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("unknown3")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("unknown_before")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("unknown_before")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("unknown_after")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("unknown_after")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("unknown4")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("unknown5")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("unknown1")[^\n]*\n?)+'
test_Wunused_33:
  build:
    cflags: -Wunused-macros -Dfoo -Dfoo -E
    files: compilers/gcc/./gcc.dg/cpp/Wunused.c
    sources:
      binary: Wunused.i
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("used")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("used")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("used")[^\n]*\n?)+'
test_Wunused_438:
  build:
    cflags: -Wunused-macros -Dfoo -Dfoo -E
    files: compilers/gcc/./gcc.dg/cpp/Wunused.c
    sources:
      binary: Wunused.i
  group: GRPSERIAL
  validate:
    match:
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("used")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("used")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("used")[^\n]*\n?)+'
test_Wvariadic-1_34:
  build:
    cflags: -std=iso9899:1990 -pedantic -Werror -S
    files: compilers/gcc/./gcc.dg/cpp/Wvariadic-1.c
    sources:
      binary: Wvariadic-1.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("variadic")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("variadic")[^\n]*\n?)+'
test_Wvariadic-1_439:
  build:
    cflags: -std=iso9899:1990 -pedantic -Werror -S
    files: compilers/gcc/./gcc.dg/cpp/Wvariadic-1.c
    sources:
      binary: Wvariadic-1.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("variadic")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("variadic")[^\n]*\n?)+'
test_Wvariadic-1p_35:
  build:
    cflags: -std=iso9899:1990 -S
    files: compilers/gcc/./gcc.dg/cpp/Wvariadic-1p.c
    sources:
      binary: Wvariadic-1p.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("variadic")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("variadic")[^\n]*\n?)+'
test_Wvariadic-1p_440:
  build:
    cflags: -std=iso9899:1990 -S
    files: compilers/gcc/./gcc.dg/cpp/Wvariadic-1p.c
    sources:
      binary: Wvariadic-1p.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("variadic")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("variadic")[^\n]*\n?)+'
test_Wvariadic-2_36:
  build:
    cflags: -std=iso9899:1990 -pedantic -Werror -Wno-variadic-macros -S
    files: compilers/gcc/./gcc.dg/cpp/Wvariadic-2.c
    sources:
      binary: Wvariadic-2.s
  group: GRPSERIAL
test_Wvariadic-2_441:
  build:
    cflags: -std=iso9899:1990 -pedantic -Werror -Wno-variadic-macros -S
    files: compilers/gcc/./gcc.dg/cpp/Wvariadic-2.c
    sources:
      binary: Wvariadic-2.s
  group: GRPSERIAL
test_Wvariadic-3_37:
  build:
    cflags: -std=iso9899:1999 -pedantic -Werror -S
    files: compilers/gcc/./gcc.dg/cpp/Wvariadic-3.c
    sources:
      binary: Wvariadic-3.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("variadic")[^\n]*\n?)+'
test_Wvariadic-3_442:
  build:
    cflags: -std=iso9899:1999 -pedantic -Werror -S
    files: compilers/gcc/./gcc.dg/cpp/Wvariadic-3.c
    sources:
      binary: Wvariadic-3.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("variadic")[^\n]*\n?)+'
test_Wvariadic-4_38:
  build:
    cflags: -std=iso9899:1999 -pedantic -Werror -Wno-variadic-macros -S
    files: compilers/gcc/./gcc.dg/cpp/Wvariadic-4.c
    sources:
      binary: Wvariadic-4.s
  group: GRPSERIAL
test_Wvariadic-4_443:
  build:
    cflags: -std=iso9899:1999 -pedantic -Werror -Wno-variadic-macros -S
    files: compilers/gcc/./gcc.dg/cpp/Wvariadic-4.c
    sources:
      binary: Wvariadic-4.s
  group: GRPSERIAL
test__Pragma1_39:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/_Pragma1.c
    sources:
      binary: _Pragma1.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("poisoned")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("poisoned")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing binary
          operator")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("poisoned")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("poisoned")[^\n]*\n?)+'
test__Pragma1_444:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/_Pragma1.c
    sources:
      binary: _Pragma1.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("poisoned")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("poisoned")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing binary
          operator")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("poisoned")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("poisoned")[^\n]*\n?)+'
test__Pragma2_40:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/_Pragma2.c
    sources:
      binary: _Pragma2.i
  group: GRPSERIAL
test__Pragma2_445:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/_Pragma2.c
    sources:
      binary: _Pragma2.i
  group: GRPSERIAL
test__Pragma3_41:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/_Pragma3.c
    sources:
      binary: _Pragma3.i
  group: GRPSERIAL
test__Pragma3_446:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/_Pragma3.c
    sources:
      binary: _Pragma3.i
  group: GRPSERIAL
test__Pragma4_42:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/_Pragma4.c
    sources:
      binary: _Pragma4.i
  group: GRPSERIAL
test__Pragma4_447:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/_Pragma4.c
    sources:
      binary: _Pragma4.i
  group: GRPSERIAL
test__Pragma5_43:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/_Pragma5.c
    sources:
      binary: _Pragma5.i
  group: GRPSERIAL
test__Pragma5_448:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/_Pragma5.c
    sources:
      binary: _Pragma5.i
  group: GRPSERIAL
test__Pragma6_44:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/_Pragma6.c
    sources:
      binary: _Pragma6.s
  group: GRPSERIAL
test__Pragma6_449:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/_Pragma6.c
    sources:
      binary: _Pragma6.s
  group: GRPSERIAL
test__Pragma7_45:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/_Pragma7.c
    sources:
      binary: _Pragma7.s
  group: GRPSERIAL
test__Pragma7_450:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/_Pragma7.c
    sources:
      binary: _Pragma7.s
  group: GRPSERIAL
test_arith-1_451:
  build:
    cflags: ' -E'
    files: compilers/gcc/./gcc.dg/cpp/arith-1.c
    sources:
      binary: arith-1.i
  group: GRPSERIAL
test_arith-1_46:
  build:
    cflags: ' -E'
    files: compilers/gcc/./gcc.dg/cpp/arith-1.c
    sources:
      binary: arith-1.i
  group: GRPSERIAL
test_arith-3_452:
  build:
    cflags: -std=c99 -fshow-column -E
    files: compilers/gcc/./gcc.dg/cpp/arith-3.c
    sources:
      binary: arith-3.i
  group: GRPSERIAL
  validate:
    match:
      L144:
        expect: true
        expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("so large")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+(:146:)[^\n]*[0-9]+: warning:[^\n]*("too large")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("too large")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("too large")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("so large")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+(:180:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+(:184:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'
      L204:
        expect: true
        expr: '(^|\n)([^\n]+(:204:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'
      L208:
        expect: true
        expr: '(^|\n)([^\n]+(:208:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'
      L229:
        expect: true
        expr: '(^|\n)([^\n]+(:229:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'
      L233:
        expect: true
        expr: '(^|\n)([^\n]+(:233:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'
      L237:
        expect: true
        expr: '(^|\n)([^\n]+(:237:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'
      L265:
        expect: true
        expr: '(^|\n)([^\n]+(:265:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'
      L277:
        expect: true
        expr: '(^|\n)([^\n]+:277:[^\n]*[0-9]+: (fatal )?error:[^\n]*("13:division
          by zero")[^\n]*\n?)+'
      L289:
        expect: true
        expr: '(^|\n)([^\n]+:289:[^\n]*[0-9]+: (fatal )?error:[^\n]*("13:division
          by zero")[^\n]*\n?)+'
      L325:
        expect: true
        expr: '(^|\n)([^\n]+(:325:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'
      L333:
        expect: true
        expr: '(^|\n)([^\n]+(:333:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'
      L341:
        expect: true
        expr: '(^|\n)([^\n]+(:341:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'
      L345:
        expect: true
        expr: '(^|\n)([^\n]+(:345:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'
      L358:
        expect: true
        expr: '(^|\n)([^\n]+(:358:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'
      L377:
        expect: true
        expr: '(^|\n)([^\n]+(:377:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'
test_arith-3_47:
  build:
    cflags: -std=c99 -fshow-column -E
    files: compilers/gcc/./gcc.dg/cpp/arith-3.c
    sources:
      binary: arith-3.i
  group: GRPSERIAL
  validate:
    match:
      L144:
        expect: true
        expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("so large")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+(:146:)[^\n]*[0-9]+: warning:[^\n]*("too large")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("too large")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("too large")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("so large")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+(:180:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+(:184:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'
      L204:
        expect: true
        expr: '(^|\n)([^\n]+(:204:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'
      L208:
        expect: true
        expr: '(^|\n)([^\n]+(:208:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'
      L229:
        expect: true
        expr: '(^|\n)([^\n]+(:229:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'
      L233:
        expect: true
        expr: '(^|\n)([^\n]+(:233:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'
      L237:
        expect: true
        expr: '(^|\n)([^\n]+(:237:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'
      L265:
        expect: true
        expr: '(^|\n)([^\n]+(:265:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'
      L277:
        expect: true
        expr: '(^|\n)([^\n]+:277:[^\n]*[0-9]+: (fatal )?error:[^\n]*("13:division
          by zero")[^\n]*\n?)+'
      L289:
        expect: true
        expr: '(^|\n)([^\n]+:289:[^\n]*[0-9]+: (fatal )?error:[^\n]*("13:division
          by zero")[^\n]*\n?)+'
      L325:
        expect: true
        expr: '(^|\n)([^\n]+(:325:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'
      L333:
        expect: true
        expr: '(^|\n)([^\n]+(:333:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'
      L341:
        expect: true
        expr: '(^|\n)([^\n]+(:341:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'
      L345:
        expect: true
        expr: '(^|\n)([^\n]+(:345:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'
      L358:
        expect: true
        expr: '(^|\n)([^\n]+(:358:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'
      L377:
        expect: true
        expr: '(^|\n)([^\n]+(:377:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'
test_assembl2_453:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/assembl2.S
    sources:
      binary: assembl2.i
  group: GRPSERIAL
test_assembl2_48:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/assembl2.S
    sources:
      binary: assembl2.i
  group: GRPSERIAL
test_assembler_454:
  build:
    cflags: ' -E'
    files: compilers/gcc/./gcc.dg/cpp/assembler.S
    sources:
      binary: assembler.i
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("diagnostic")[^\n]*\n?)+'
test_assembler_49:
  build:
    cflags: ' -E'
    files: compilers/gcc/./gcc.dg/cpp/assembler.S
    sources:
      binary: assembler.i
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("diagnostic")[^\n]*\n?)+'
test_assert1_455:
  build:
    cflags: -Wno-deprecated -S
    files: compilers/gcc/./gcc.dg/cpp/assert1.c
    sources:
      binary: assert1.s
  group: GRPSERIAL
test_assert1_50:
  build:
    cflags: -Wno-deprecated -S
    files: compilers/gcc/./gcc.dg/cpp/assert1.c
    sources:
      binary: assert1.s
  group: GRPSERIAL
test_assert2_456:
  build:
    cflags: -fshow-column -Wno-deprecated -E
    files: compilers/gcc/./gcc.dg/cpp/assert2.c
    sources:
      binary: assert2.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("without predicate")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("6:an identifier")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("6:an identifier")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("9:is not valid")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("without predicate")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("9:an identifier")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("9:an identifier")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("9:missing")[^\n]*\n?)+'
test_assert2_51:
  build:
    cflags: -fshow-column -Wno-deprecated -E
    files: compilers/gcc/./gcc.dg/cpp/assert2.c
    sources:
      binary: assert2.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("without predicate")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("6:an identifier")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("6:an identifier")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("9:is not valid")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("without predicate")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("9:an identifier")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("9:an identifier")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("9:missing")[^\n]*\n?)+'
test_assert3_457:
  build:
    cflags: -A abc=def -A abc(ghi) "-Aabc = jkl" -A abc=mno -A -abc=mno -Wno-deprecated
      -E
    files: compilers/gcc/./gcc.dg/cpp/assert3.c
    sources:
      binary: assert3.i
  group: GRPSERIAL
test_assert3_52:
  build:
    cflags: -A abc=def -A abc(ghi) "-Aabc = jkl" -A abc=mno -A -abc=mno -Wno-deprecated
      -E
    files: compilers/gcc/./gcc.dg/cpp/assert3.c
    sources:
      binary: assert3.i
  group: GRPSERIAL
test_assert4_458:
  build:
    cflags: -ansi -Wno-deprecated -E
    files: compilers/gcc/./gcc.dg/cpp/assert4.c
    sources:
      binary: assert4.i
  group: GRPSERIAL
test_assert4_53:
  build:
    cflags: -ansi -Wno-deprecated -E
    files: compilers/gcc/./gcc.dg/cpp/assert4.c
    sources:
      binary: assert4.i
  group: GRPSERIAL
test_avoidpaste1_459:
  build:
    cflags: -ansi -E
    files: compilers/gcc/./gcc.dg/cpp/avoidpaste1.c
    sources:
      binary: avoidpaste1.i
  group: GRPSERIAL
test_avoidpaste1_54:
  build:
    cflags: -ansi -E
    files: compilers/gcc/./gcc.dg/cpp/avoidpaste1.c
    sources:
      binary: avoidpaste1.i
  group: GRPSERIAL
test_avoidpaste2_460:
  build:
    cflags: -ansi -E
    files: compilers/gcc/./gcc.dg/cpp/avoidpaste2.c
    sources:
      binary: avoidpaste2.i
  group: GRPSERIAL
test_avoidpaste2_55:
  build:
    cflags: -ansi -E
    files: compilers/gcc/./gcc.dg/cpp/avoidpaste2.c
    sources:
      binary: avoidpaste2.i
  group: GRPSERIAL
test_backslash2_462:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/backslash2.c
    sources:
      binary: backslash2.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("separated by space")[^\n]*\n?)+'
test_backslash2_57:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/backslash2.c
    sources:
      binary: backslash2.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("separated by space")[^\n]*\n?)+'
test_backslash_461:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/backslash.c
    sources:
      binary: backslash.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("separated by space")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("separated by space")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("separated by space")[^\n]*\n?)+'
test_backslash_56:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/backslash.c
    sources:
      binary: backslash.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("separated by space")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("separated by space")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("separated by space")[^\n]*\n?)+'
test_builtin-macro-1_463:
  build:
    cflags: -ansi -pedantic-errors
    files: compilers/gcc/./gcc.dg/cpp/builtin-macro-1.c
    sources:
      binary: ./builtin-macro-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_builtin-macro-1_58:
  build:
    cflags: -ansi -pedantic-errors
    files: compilers/gcc/./gcc.dg/cpp/builtin-macro-1.c
    sources:
      binary: ./builtin-macro-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_c89-pedantic_464:
  build:
    cflags: -std=c89 -pedantic -E
    files: compilers/gcc/./gcc.dg/cpp/c89-pedantic.c
    sources:
      binary: c89-pedantic.i
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("long long")[^\n]*\n?)+'
test_c89-pedantic_59:
  build:
    cflags: -std=c89 -pedantic -E
    files: compilers/gcc/./gcc.dg/cpp/c89-pedantic.c
    sources:
      binary: c89-pedantic.i
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("long long")[^\n]*\n?)+'
test_c89_465:
  build:
    cflags: -std=c89 -E
    files: compilers/gcc/./gcc.dg/cpp/c89.c
    sources:
      binary: c89.i
  group: GRPSERIAL
test_c89_60:
  build:
    cflags: -std=c89 -E
    files: compilers/gcc/./gcc.dg/cpp/c89.c
    sources:
      binary: c89.i
  group: GRPSERIAL
test_c90-empty-macro-args_466:
  build:
    cflags: -std=c89 -pedantic -S
    files: compilers/gcc/./gcc.dg/cpp/c90-empty-macro-args.c
    sources:
      binary: c90-empty-macro-args.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("macro f2 argument
          2: empty macro arguments are undefined")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("macro f2 argument
          2: empty macro arguments are undefined")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("macro f3 argument
          1: empty macro arguments are undefined")[^\n]*\n?)+'
test_c90-empty-macro-args_61:
  build:
    cflags: -std=c89 -pedantic -S
    files: compilers/gcc/./gcc.dg/cpp/c90-empty-macro-args.c
    sources:
      binary: c90-empty-macro-args.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("macro f2 argument
          2: empty macro arguments are undefined")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("macro f2 argument
          2: empty macro arguments are undefined")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("macro f3 argument
          1: empty macro arguments are undefined")[^\n]*\n?)+'
test_c90-if-comma-1_467:
  build:
    cflags: -std=iso9899:1990 -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/c90-if-comma-1.c
    sources:
      binary: c90-if-comma-1.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("comma")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("comma")[^\n]*\n?)+'
test_c90-if-comma-1_62:
  build:
    cflags: -std=iso9899:1990 -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/c90-if-comma-1.c
    sources:
      binary: c90-if-comma-1.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("comma")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("comma")[^\n]*\n?)+'
test_c90-pedantic_468:
  build:
    cflags: -std=c90 -pedantic -E
    files: compilers/gcc/./gcc.dg/cpp/c90-pedantic.c
    sources:
      binary: c90-pedantic.i
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("long long")[^\n]*\n?)+'
test_c90-pedantic_63:
  build:
    cflags: -std=c90 -pedantic -E
    files: compilers/gcc/./gcc.dg/cpp/c90-pedantic.c
    sources:
      binary: c90-pedantic.i
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("long long")[^\n]*\n?)+'
test_c90_469:
  build:
    cflags: -std=c90 -E
    files: compilers/gcc/./gcc.dg/cpp/c90.c
    sources:
      binary: c90.i
  group: GRPSERIAL
test_c90_64:
  build:
    cflags: -std=c90 -E
    files: compilers/gcc/./gcc.dg/cpp/c90.c
    sources:
      binary: c90.i
  group: GRPSERIAL
test_c94-pedantic_470:
  build:
    cflags: -std=iso9899:199409 -pedantic -E
    files: compilers/gcc/./gcc.dg/cpp/c94-pedantic.c
    sources:
      binary: c94-pedantic.i
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("long long")[^\n]*\n?)+'
test_c94-pedantic_65:
  build:
    cflags: -std=iso9899:199409 -pedantic -E
    files: compilers/gcc/./gcc.dg/cpp/c94-pedantic.c
    sources:
      binary: c94-pedantic.i
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("long long")[^\n]*\n?)+'
test_c94_471:
  build:
    cflags: -std=iso9899:199409 -E
    files: compilers/gcc/./gcc.dg/cpp/c94.c
    sources:
      binary: c94.i
  group: GRPSERIAL
test_c94_66:
  build:
    cflags: -std=iso9899:199409 -E
    files: compilers/gcc/./gcc.dg/cpp/c94.c
    sources:
      binary: c94.i
  group: GRPSERIAL
test_c99-empty-macro-args_472:
  build:
    cflags: -std=c99 -pedantic -S
    files: compilers/gcc/./gcc.dg/cpp/c99-empty-macro-args.c
    sources:
      binary: c99-empty-macro-args.s
  group: GRPSERIAL
test_c99-empty-macro-args_67:
  build:
    cflags: -std=c99 -pedantic -S
    files: compilers/gcc/./gcc.dg/cpp/c99-empty-macro-args.c
    sources:
      binary: c99-empty-macro-args.s
  group: GRPSERIAL
test_c99-hexfloat-3_473:
  build:
    cflags: -std=iso9899:1999 -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/c99-hexfloat-3.c
    sources:
      binary: c99-hexfloat-3.s
  group: GRPSERIAL
test_c99-hexfloat-3_68:
  build:
    cflags: -std=iso9899:1999 -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/c99-hexfloat-3.c
    sources:
      binary: c99-hexfloat-3.s
  group: GRPSERIAL
test_c99-if-comma-1_474:
  build:
    cflags: -std=iso9899:1999 -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/c99-if-comma-1.c
    sources:
      binary: c99-if-comma-1.i
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("comma")[^\n]*\n?)+'
test_c99-if-comma-1_69:
  build:
    cflags: -std=iso9899:1999 -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/c99-if-comma-1.c
    sources:
      binary: c99-if-comma-1.i
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("comma")[^\n]*\n?)+'
test_c99-pedantic_475:
  build:
    cflags: -std=c99 -pedantic -E
    files: compilers/gcc/./gcc.dg/cpp/c99-pedantic.c
    sources:
      binary: c99-pedantic.i
  group: GRPSERIAL
test_c99-pedantic_70:
  build:
    cflags: -std=c99 -pedantic -E
    files: compilers/gcc/./gcc.dg/cpp/c99-pedantic.c
    sources:
      binary: c99-pedantic.i
  group: GRPSERIAL
test_c99_476:
  build:
    cflags: -std=c99 -E
    files: compilers/gcc/./gcc.dg/cpp/c99.c
    sources:
      binary: c99.i
  group: GRPSERIAL
test_c99_71:
  build:
    cflags: -std=c99 -E
    files: compilers/gcc/./gcc.dg/cpp/c99.c
    sources:
      binary: c99.i
  group: GRPSERIAL
test_charconst-2_477:
  build:
    cflags: -fsigned-char -S
    files: compilers/gcc/./gcc.dg/cpp/charconst-2.c
    sources:
      binary: charconst-2.s
  group: GRPSERIAL
test_charconst-2_72:
  build:
    cflags: -fsigned-char -S
    files: compilers/gcc/./gcc.dg/cpp/charconst-2.c
    sources:
      binary: charconst-2.s
  group: GRPSERIAL
test_charconst-3_478:
  build:
    cflags: -Wno-multichar
    files: compilers/gcc/./gcc.dg/cpp/charconst-3.c
    sources:
      binary: ./charconst-3.exe
  group: GRPSERIAL
  run:
    cwd: .
test_charconst-3_73:
  build:
    cflags: -Wno-multichar
    files: compilers/gcc/./gcc.dg/cpp/charconst-3.c
    sources:
      binary: ./charconst-3.exe
  group: GRPSERIAL
  run:
    cwd: .
test_charconst-4_479:
  build:
    cflags: -Wno-multichar -fsigned-char
    files: compilers/gcc/./gcc.dg/cpp/charconst-4.c
    sources:
      binary: ./charconst-4.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("too long")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("too long")[^\n]*\n?)+'
test_charconst-4_74:
  build:
    cflags: -Wno-multichar -fsigned-char
    files: compilers/gcc/./gcc.dg/cpp/charconst-4.c
    sources:
      binary: ./charconst-4.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("too long")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("too long")[^\n]*\n?)+'
test_charconst_480:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/charconst.c
    sources:
      binary: charconst.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("empty")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("empty")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("too long")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("too long")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("multi-char")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("empty")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("empty")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("too long")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("too long")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("multi-char")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("too long")[^\n]*\n?)+'
test_charconst_75:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/charconst.c
    sources:
      binary: charconst.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("empty")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("empty")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("too long")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("too long")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("multi-char")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("empty")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("empty")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("too long")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("too long")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("multi-char")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("too long")[^\n]*\n?)+'
test_cmdlne-C2_482:
  build:
    cflags: -C -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-C2.c
    sources:
      binary: cmdlne-C2.i
  group: GRPSERIAL
test_cmdlne-C2_77:
  build:
    cflags: -C -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-C2.c
    sources:
      binary: cmdlne-C2.i
  group: GRPSERIAL
test_cmdlne-C3_483:
  build:
    cflags: -C -P -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-C3.c
    sources:
      binary: cmdlne-C3.i
  group: GRPSERIAL
test_cmdlne-C3_78:
  build:
    cflags: -C -P -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-C3.c
    sources:
      binary: cmdlne-C3.i
  group: GRPSERIAL
test_cmdlne-C_481:
  build:
    cflags: -C -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-C.c
    sources:
      binary: cmdlne-C.i
  group: GRPSERIAL
test_cmdlne-C_76:
  build:
    cflags: -C -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-C.c
    sources:
      binary: cmdlne-C.i
  group: GRPSERIAL
test_cmdlne-M-2_484:
  build:
    cflags: -M -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-M-2.c
    sources:
      binary: cmdlne-M-2.i
  group: GRPSERIAL
test_cmdlne-M-2_79:
  build:
    cflags: -M -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-M-2.c
    sources:
      binary: cmdlne-M-2.i
  group: GRPSERIAL
test_cmdlne-M_485:
  build:
    cflags: -M -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-M.c
    sources:
      binary: cmdlne-M.i
  group: GRPSERIAL
test_cmdlne-M_80:
  build:
    cflags: -M -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-M.c
    sources:
      binary: cmdlne-M.i
  group: GRPSERIAL
test_cmdlne-P_486:
  build:
    cflags: -P -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-P.c
    sources:
      binary: cmdlne-P.i
  group: GRPSERIAL
test_cmdlne-P_81:
  build:
    cflags: -P -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-P.c
    sources:
      binary: cmdlne-P.i
  group: GRPSERIAL
test_cmdlne-dD-M_487:
  build:
    cflags: -dD -M -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dD-M.c
    sources:
      binary: cmdlne-dD-M.i
  group: GRPSERIAL
test_cmdlne-dD-M_82:
  build:
    cflags: -dD -M -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dD-M.c
    sources:
      binary: cmdlne-dD-M.i
  group: GRPSERIAL
test_cmdlne-dD-dM_488:
  build:
    cflags: -dD -dM -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dD-dM.c
    sources:
      binary: cmdlne-dD-dM.i
  group: GRPSERIAL
test_cmdlne-dD-dM_83:
  build:
    cflags: -dD -dM -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dD-dM.c
    sources:
      binary: cmdlne-dD-dM.i
  group: GRPSERIAL
test_cmdlne-dD_489:
  build:
    cflags: -dD -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dD.c
    sources:
      binary: cmdlne-dD.i
  group: GRPSERIAL
test_cmdlne-dD_84:
  build:
    cflags: -dD -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dD.c
    sources:
      binary: cmdlne-dD.i
  group: GRPSERIAL
test_cmdlne-dI-C_490:
  build:
    cflags: -dI -C -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dI-C.c
    sources:
      binary: cmdlne-dI-C.i
  group: GRPSERIAL
test_cmdlne-dI-C_85:
  build:
    cflags: -dI -C -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dI-C.c
    sources:
      binary: cmdlne-dI-C.i
  group: GRPSERIAL
test_cmdlne-dI-M_491:
  build:
    cflags: -dI -M -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dI-M.c
    sources:
      binary: cmdlne-dI-M.i
  group: GRPSERIAL
test_cmdlne-dI-M_86:
  build:
    cflags: -dI -M -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dI-M.c
    sources:
      binary: cmdlne-dI-M.i
  group: GRPSERIAL
test_cmdlne-dM-M_492:
  build:
    cflags: -dM -M -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dM-M.c
    sources:
      binary: cmdlne-dM-M.i
  group: GRPSERIAL
test_cmdlne-dM-M_87:
  build:
    cflags: -dM -M -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dM-M.c
    sources:
      binary: cmdlne-dM-M.i
  group: GRPSERIAL
test_cmdlne-dM-dD_493:
  build:
    cflags: -dM -dD -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dM-dD.c
    sources:
      binary: cmdlne-dM-dD.i
  group: GRPSERIAL
test_cmdlne-dM-dD_88:
  build:
    cflags: -dM -dD -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dM-dD.c
    sources:
      binary: cmdlne-dM-dD.i
  group: GRPSERIAL
test_cmdlne-dM_494:
  build:
    cflags: -dM -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dM.c
    sources:
      binary: cmdlne-dM.i
  group: GRPSERIAL
test_cmdlne-dM_89:
  build:
    cflags: -dM -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dM.c
    sources:
      binary: cmdlne-dM.i
  group: GRPSERIAL
test_cmdlne-dN-M_495:
  build:
    cflags: -dN -M -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dN-M.c
    sources:
      binary: cmdlne-dN-M.i
  group: GRPSERIAL
test_cmdlne-dN-M_90:
  build:
    cflags: -dN -M -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dN-M.c
    sources:
      binary: cmdlne-dN-M.i
  group: GRPSERIAL
test_cmdlne-dU-10_497:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-10.c
    sources:
      binary: cmdlne-dU-10.i
  group: GRPSERIAL
test_cmdlne-dU-10_92:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-10.c
    sources:
      binary: cmdlne-dU-10.i
  group: GRPSERIAL
test_cmdlne-dU-11_498:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-11.c
    sources:
      binary: cmdlne-dU-11.i
  group: GRPSERIAL
test_cmdlne-dU-11_93:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-11.c
    sources:
      binary: cmdlne-dU-11.i
  group: GRPSERIAL
test_cmdlne-dU-12_499:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-12.c
    sources:
      binary: cmdlne-dU-12.i
  group: GRPSERIAL
test_cmdlne-dU-12_94:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-12.c
    sources:
      binary: cmdlne-dU-12.i
  group: GRPSERIAL
test_cmdlne-dU-13_500:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-13.c
    sources:
      binary: cmdlne-dU-13.i
  group: GRPSERIAL
test_cmdlne-dU-13_95:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-13.c
    sources:
      binary: cmdlne-dU-13.i
  group: GRPSERIAL
test_cmdlne-dU-14_501:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-14.c
    sources:
      binary: cmdlne-dU-14.i
  group: GRPSERIAL
test_cmdlne-dU-14_96:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-14.c
    sources:
      binary: cmdlne-dU-14.i
  group: GRPSERIAL
test_cmdlne-dU-15_502:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-15.c
    sources:
      binary: cmdlne-dU-15.i
  group: GRPSERIAL
test_cmdlne-dU-15_97:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-15.c
    sources:
      binary: cmdlne-dU-15.i
  group: GRPSERIAL
test_cmdlne-dU-16_503:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-16.c
    sources:
      binary: cmdlne-dU-16.i
  group: GRPSERIAL
test_cmdlne-dU-16_98:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-16.c
    sources:
      binary: cmdlne-dU-16.i
  group: GRPSERIAL
test_cmdlne-dU-17_504:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-17.c
    sources:
      binary: cmdlne-dU-17.i
  group: GRPSERIAL
test_cmdlne-dU-17_99:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-17.c
    sources:
      binary: cmdlne-dU-17.i
  group: GRPSERIAL
test_cmdlne-dU-18_100:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-18.c
    sources:
      binary: cmdlne-dU-18.i
  group: GRPSERIAL
test_cmdlne-dU-18_505:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-18.c
    sources:
      binary: cmdlne-dU-18.i
  group: GRPSERIAL
test_cmdlne-dU-19_101:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-19.c
    sources:
      binary: cmdlne-dU-19.i
  group: GRPSERIAL
test_cmdlne-dU-19_506:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-19.c
    sources:
      binary: cmdlne-dU-19.i
  group: GRPSERIAL
test_cmdlne-dU-1_496:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-1.c
    sources:
      binary: cmdlne-dU-1.i
  group: GRPSERIAL
test_cmdlne-dU-1_91:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-1.c
    sources:
      binary: cmdlne-dU-1.i
  group: GRPSERIAL
test_cmdlne-dU-20_103:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-20.c
    sources:
      binary: cmdlne-dU-20.i
  group: GRPSERIAL
test_cmdlne-dU-20_508:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-20.c
    sources:
      binary: cmdlne-dU-20.i
  group: GRPSERIAL
test_cmdlne-dU-21_104:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-21.c
    sources:
      binary: cmdlne-dU-21.i
  group: GRPSERIAL
test_cmdlne-dU-21_509:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-21.c
    sources:
      binary: cmdlne-dU-21.i
  group: GRPSERIAL
test_cmdlne-dU-22_105:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-22.c
    sources:
      binary: cmdlne-dU-22.i
  group: GRPSERIAL
test_cmdlne-dU-22_510:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-22.c
    sources:
      binary: cmdlne-dU-22.i
  group: GRPSERIAL
test_cmdlne-dU-23_106:
  build:
    cflags: -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-23.c
    sources:
      binary: cmdlne-dU-23.i
  group: GRPSERIAL
test_cmdlne-dU-23_511:
  build:
    cflags: -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-23.c
    sources:
      binary: cmdlne-dU-23.i
  group: GRPSERIAL
test_cmdlne-dU-2_102:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-2.c
    sources:
      binary: cmdlne-dU-2.i
  group: GRPSERIAL
test_cmdlne-dU-2_507:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-2.c
    sources:
      binary: cmdlne-dU-2.i
  group: GRPSERIAL
test_cmdlne-dU-3_107:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-3.c
    sources:
      binary: cmdlne-dU-3.i
  group: GRPSERIAL
test_cmdlne-dU-3_512:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-3.c
    sources:
      binary: cmdlne-dU-3.i
  group: GRPSERIAL
test_cmdlne-dU-4_108:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-4.c
    sources:
      binary: cmdlne-dU-4.i
  group: GRPSERIAL
test_cmdlne-dU-4_513:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-4.c
    sources:
      binary: cmdlne-dU-4.i
  group: GRPSERIAL
test_cmdlne-dU-5_109:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-5.c
    sources:
      binary: cmdlne-dU-5.i
  group: GRPSERIAL
test_cmdlne-dU-5_514:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-5.c
    sources:
      binary: cmdlne-dU-5.i
  group: GRPSERIAL
test_cmdlne-dU-6_110:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-6.c
    sources:
      binary: cmdlne-dU-6.i
  group: GRPSERIAL
test_cmdlne-dU-6_515:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-6.c
    sources:
      binary: cmdlne-dU-6.i
  group: GRPSERIAL
test_cmdlne-dU-7_111:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-7.c
    sources:
      binary: cmdlne-dU-7.i
  group: GRPSERIAL
test_cmdlne-dU-7_516:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-7.c
    sources:
      binary: cmdlne-dU-7.i
  group: GRPSERIAL
test_cmdlne-dU-8_112:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-8.c
    sources:
      binary: cmdlne-dU-8.i
  group: GRPSERIAL
test_cmdlne-dU-8_517:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-8.c
    sources:
      binary: cmdlne-dU-8.i
  group: GRPSERIAL
test_cmdlne-dU-9_113:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-9.c
    sources:
      binary: cmdlne-dU-9.i
  group: GRPSERIAL
test_cmdlne-dU-9_518:
  build:
    cflags: -nostdinc -P -dU -E
    files: compilers/gcc/./gcc.dg/cpp/cmdlne-dU-9.c
    sources:
      binary: cmdlne-dU-9.i
  group: GRPSERIAL
test_counter-1_114:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/counter-1.c
    sources:
      binary: counter-1.i
  group: GRPSERIAL
test_counter-1_519:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/counter-1.c
    sources:
      binary: counter-1.i
  group: GRPSERIAL
test_counter-2_115:
  build:
    cflags: -fdirectives-only -E
    files: compilers/gcc/./gcc.dg/cpp/counter-2.c
    sources:
      binary: counter-2.i
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("__COUNTER__ expanded
          inside directive with -fdirectives-only")[^\n]*\n?)+'
test_counter-2_520:
  build:
    cflags: -fdirectives-only -E
    files: compilers/gcc/./gcc.dg/cpp/counter-2.c
    sources:
      binary: counter-2.i
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("__COUNTER__ expanded
          inside directive with -fdirectives-only")[^\n]*\n?)+'
test_counter-3_116:
  build:
    cflags: -fdirectives-only -fpreprocessed -E
    files: compilers/gcc/./gcc.dg/cpp/counter-3.c
    sources:
      binary: counter-3.i
  group: GRPSERIAL
test_counter-3_521:
  build:
    cflags: -fdirectives-only -fpreprocessed -E
    files: compilers/gcc/./gcc.dg/cpp/counter-3.c
    sources:
      binary: counter-3.i
  group: GRPSERIAL
test_cxxcom1_117:
  build:
    cflags: -pedantic -std=gnu89 -E
    files: compilers/gcc/./gcc.dg/cpp/cxxcom1.c
    sources:
      binary: cxxcom1.i
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("style comment|reported
          only once")[^\n]*\n?)+'
test_cxxcom1_522:
  build:
    cflags: -pedantic -std=gnu89 -E
    files: compilers/gcc/./gcc.dg/cpp/cxxcom1.c
    sources:
      binary: cxxcom1.i
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("style comment|reported
          only once")[^\n]*\n?)+'
test_cxxcom2_118:
  build:
    cflags: -pedantic -std=c89 -Wall -E
    files: compilers/gcc/./gcc.dg/cpp/cxxcom2.c
    sources:
      binary: cxxcom2.i
  group: GRPSERIAL
test_cxxcom2_523:
  build:
    cflags: -pedantic -std=c89 -Wall -E
    files: compilers/gcc/./gcc.dg/cpp/cxxcom2.c
    sources:
      binary: cxxcom2.i
  group: GRPSERIAL
test_defined-Wexpansion-to-defined_119:
  build:
    cflags: -Wexpansion-to-defined -E
    files: compilers/gcc/./gcc.dg/cpp/defined-Wexpansion-to-defined.c
    sources:
      binary: defined-Wexpansion-to-defined.i
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("may not be portable")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("may not be portable")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("may not be portable")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("may not be portable")[^\n]*\n?)+'
test_defined-Wexpansion-to-defined_524:
  build:
    cflags: -Wexpansion-to-defined -E
    files: compilers/gcc/./gcc.dg/cpp/defined-Wexpansion-to-defined.c
    sources:
      binary: defined-Wexpansion-to-defined.i
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("may not be portable")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("may not be portable")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("may not be portable")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("may not be portable")[^\n]*\n?)+'
test_defined-Wextra-Wno-expansion-to-defined_120:
  build:
    cflags: -Wextra -Wno-expansion-to-defined -E
    files: compilers/gcc/./gcc.dg/cpp/defined-Wextra-Wno-expansion-to-defined.c
    sources:
      binary: defined-Wextra-Wno-expansion-to-defined.i
  group: GRPSERIAL
test_defined-Wextra-Wno-expansion-to-defined_525:
  build:
    cflags: -Wextra -Wno-expansion-to-defined -E
    files: compilers/gcc/./gcc.dg/cpp/defined-Wextra-Wno-expansion-to-defined.c
    sources:
      binary: defined-Wextra-Wno-expansion-to-defined.i
  group: GRPSERIAL
test_defined-Wextra_121:
  build:
    cflags: -Wextra -E
    files: compilers/gcc/./gcc.dg/cpp/defined-Wextra.c
    sources:
      binary: defined-Wextra.i
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("may not be portable")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("may not be portable")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("may not be portable")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("may not be portable")[^\n]*\n?)+'
test_defined-Wextra_526:
  build:
    cflags: -Wextra -E
    files: compilers/gcc/./gcc.dg/cpp/defined-Wextra.c
    sources:
      binary: defined-Wextra.i
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("may not be portable")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("may not be portable")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("may not be portable")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("may not be portable")[^\n]*\n?)+'
test_defined-Wno-expansion-to-defined_122:
  build:
    cflags: -ansi -pedantic-errors -Wno-expansion-to-defined -E
    files: compilers/gcc/./gcc.dg/cpp/defined-Wno-expansion-to-defined.c
    sources:
      binary: defined-Wno-expansion-to-defined.i
  group: GRPSERIAL
test_defined-Wno-expansion-to-defined_527:
  build:
    cflags: -ansi -pedantic-errors -Wno-expansion-to-defined -E
    files: compilers/gcc/./gcc.dg/cpp/defined-Wno-expansion-to-defined.c
    sources:
      binary: defined-Wno-expansion-to-defined.i
  group: GRPSERIAL
test_defined-syshdr_123:
  build:
    cflags: -Wexpansion-to-defined -E
    files: compilers/gcc/./gcc.dg/cpp/defined-syshdr.c
    sources:
      binary: defined-syshdr.i
  group: GRPSERIAL
test_defined-syshdr_528:
  build:
    cflags: -Wexpansion-to-defined -E
    files: compilers/gcc/./gcc.dg/cpp/defined-syshdr.c
    sources:
      binary: defined-syshdr.i
  group: GRPSERIAL
test_defined_124:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/defined.c
    sources:
      binary: defined.i
  group: GRPSERIAL
  validate:
    match:
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may not be portable")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may not be portable")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may not be portable")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may not be portable")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may not be portable")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may not be portable")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may not be portable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("defined")[^\n]*\n?)+'
test_defined_529:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/defined.c
    sources:
      binary: defined.i
  group: GRPSERIAL
  validate:
    match:
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may not be portable")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may not be portable")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may not be portable")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may not be portable")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may not be portable")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may not be portable")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may not be portable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("defined")[^\n]*\n?)+'
test_digraph1_125:
  build:
    cflags: -std=iso9899:199409 -S
    files: compilers/gcc/./gcc.dg/cpp/digraph1.c
    sources:
      binary: digraph1.s
  group: GRPSERIAL
test_digraph1_530:
  build:
    cflags: -std=iso9899:199409 -S
    files: compilers/gcc/./gcc.dg/cpp/digraph1.c
    sources:
      binary: digraph1.s
  group: GRPSERIAL
test_digraph2_126:
  build:
    cflags: -std=c89 -S
    files: compilers/gcc/./gcc.dg/cpp/digraph2.c
    sources:
      binary: digraph2.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("parse error|syntax
          error|expected")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected declaration")[^\n]*\n?)+'
test_digraph2_531:
  build:
    cflags: -std=c89 -S
    files: compilers/gcc/./gcc.dg/cpp/digraph2.c
    sources:
      binary: digraph2.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("parse error|syntax
          error|expected")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected declaration")[^\n]*\n?)+'
test_digraphs_127:
  build:
    cflags: -std=c99
    files: compilers/gcc/./gcc.dg/cpp/digraphs.c
    sources:
      binary: ./digraphs.exe
  group: GRPSERIAL
  run:
    cwd: .
test_digraphs_532:
  build:
    cflags: -std=c99
    files: compilers/gcc/./gcc.dg/cpp/digraphs.c
    sources:
      binary: ./digraphs.exe
  group: GRPSERIAL
  run:
    cwd: .
test_dir-only-1_128:
  build:
    cflags: -fdirectives-only -E
    files: compilers/gcc/./gcc.dg/cpp/dir-only-1.c
    sources:
      binary: dir-only-1.i
  group: GRPSERIAL
test_dir-only-1_533:
  build:
    cflags: -fdirectives-only -E
    files: compilers/gcc/./gcc.dg/cpp/dir-only-1.c
    sources:
      binary: dir-only-1.i
  group: GRPSERIAL
test_dir-only-2_129:
  build:
    cflags: -fpreprocessed -fdirectives-only -DNOT_SET -E
    files: compilers/gcc/./gcc.dg/cpp/dir-only-2.c
    sources:
      binary: dir-only-2.i
  group: GRPSERIAL
test_dir-only-2_534:
  build:
    cflags: -fpreprocessed -fdirectives-only -DNOT_SET -E
    files: compilers/gcc/./gcc.dg/cpp/dir-only-2.c
    sources:
      binary: dir-only-2.i
  group: GRPSERIAL
test_dir-only-3_130:
  build:
    cflags: -fdirectives-only -H -E
    files: compilers/gcc/./gcc.dg/cpp/dir-only-3.c
    sources:
      binary: dir-only-3.i
  group: GRPSERIAL
test_dir-only-3_535:
  build:
    cflags: -fdirectives-only -H -E
    files: compilers/gcc/./gcc.dg/cpp/dir-only-3.c
    sources:
      binary: dir-only-3.i
  group: GRPSERIAL
test_dir-only-4_131:
  build:
    cflags: -fdirectives-only -Wunused-macros -E
    files: compilers/gcc/./gcc.dg/cpp/dir-only-4.c
    sources:
      binary: dir-only-4.i
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("-fdirectives-only
          is incompatible with -Wunused_macros\\n")[^\n]*\n?)+'
test_dir-only-4_536:
  build:
    cflags: -fdirectives-only -Wunused-macros -E
    files: compilers/gcc/./gcc.dg/cpp/dir-only-4.c
    sources:
      binary: dir-only-4.i
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("-fdirectives-only
          is incompatible with -Wunused_macros\\n")[^\n]*\n?)+'
test_dir-only-5_132:
  build:
    cflags: -fdirectives-only -traditional -E
    files: compilers/gcc/./gcc.dg/cpp/dir-only-5.c
    sources:
      binary: dir-only-5.i
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("-fdirectives-only
          is incompatible with -traditional\\n")[^\n]*\n?)+'
test_dir-only-5_537:
  build:
    cflags: -fdirectives-only -traditional -E
    files: compilers/gcc/./gcc.dg/cpp/dir-only-5.c
    sources:
      binary: dir-only-5.i
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("-fdirectives-only
          is incompatible with -traditional\\n")[^\n]*\n?)+'
test_dir-only-6_133:
  build:
    cflags: -fdirectives-only -E
    files: compilers/gcc/./gcc.dg/cpp/dir-only-6.c
    sources:
      binary: dir-only-6.i
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unterminated comment")[^\n]*\n?)+'
test_dir-only-6_538:
  build:
    cflags: -fdirectives-only -E
    files: compilers/gcc/./gcc.dg/cpp/dir-only-6.c
    sources:
      binary: dir-only-6.i
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unterminated comment")[^\n]*\n?)+'
test_direct2_134:
  build:
    cflags: -ftrack-macro-expansion=0 -S
    files: compilers/gcc/./gcc.dg/cpp/direct2.c
    sources:
      binary: direct2.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("parse|syntax|expected")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray|expected")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray|unknown|expected")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray|unknown|expected")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|for
          each")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|for
          each")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("parse error|syntax
          error|expected")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not give")[^\n]*\n?)+'
test_direct2_539:
  build:
    cflags: -ftrack-macro-expansion=0 -S
    files: compilers/gcc/./gcc.dg/cpp/direct2.c
    sources:
      binary: direct2.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("parse|syntax|expected")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray|expected")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray|unknown|expected")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray|unknown|expected")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|for
          each")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|for
          each")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("parse error|syntax
          error|expected")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does not give")[^\n]*\n?)+'
test_direct2s_135:
  build:
    cflags: -save-temps -ansi -pedantic-errors -ftrack-macro-expansion=0 -S
    cwd: /code/pcvs-benchmarks/compilers/gcc/gcc.dg/cpp
    files: compilers/gcc/./gcc.dg/cpp/direct2s.c
    sources:
      binary: direct2s.s
  group: GRPSERIAL
  run:
    cwd: /code/pcvs-benchmarks/compilers/gcc/gcc.dg/cpp
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("parse|syntax|expected")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray|expected")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray|unknown|expected")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray|unknown|expected")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|for
          each")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|for
          each")[^\n]*\n?)+'
test_direct2s_540:
  build:
    cflags: -save-temps -ansi -pedantic-errors -ftrack-macro-expansion=0 -S
    cwd: /code/pcvs-benchmarks/compilers/gcc/gcc.dg/cpp
    files: compilers/gcc/./gcc.dg/cpp/direct2s.c
    sources:
      binary: direct2s.s
  group: GRPSERIAL
  run:
    cwd: /code/pcvs-benchmarks/compilers/gcc/gcc.dg/cpp
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("parse|syntax|expected")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray|expected")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray|unknown|expected")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("stray|unknown|expected")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|for
          each")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|for
          each")[^\n]*\n?)+'
test_directiv_136:
  build:
    cflags: -pedantic -E
    files: compilers/gcc/./gcc.dg/cpp/directiv.c
    sources:
      binary: directiv.i
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("form feed")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("vertical tab")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unterminated
          argument")[^\n]*\n?)+'
test_directiv_541:
  build:
    cflags: -pedantic -E
    files: compilers/gcc/./gcc.dg/cpp/directiv.c
    sources:
      binary: directiv.i
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("form feed")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("vertical tab")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unterminated
          argument")[^\n]*\n?)+'
test_empty-include_137:
  build:
    cflags: -fshow-column -E
    files: compilers/gcc/./gcc.dg/cpp/empty-include.c
    sources:
      binary: empty-include.i
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("10:empty")[^\n]*\n?)+'
test_empty-include_542:
  build:
    cflags: -fshow-column -E
    files: compilers/gcc/./gcc.dg/cpp/empty-include.c
    sources:
      binary: empty-include.i
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("10:empty")[^\n]*\n?)+'
test_endif-pedantic1_138:
  build:
    cflags: -pedantic -Wno-endif-labels -E
    files: compilers/gcc/./gcc.dg/cpp/endif-pedantic1.c
    sources:
      binary: endif-pedantic1.i
  group: GRPSERIAL
test_endif-pedantic1_543:
  build:
    cflags: -pedantic -Wno-endif-labels -E
    files: compilers/gcc/./gcc.dg/cpp/endif-pedantic1.c
    sources:
      binary: endif-pedantic1.i
  group: GRPSERIAL
test_endif-pedantic2_139:
  build:
    cflags: -Wno-endif-labels -pedantic-errors -Wendif-labels -E
    files: compilers/gcc/./gcc.dg/cpp/endif-pedantic2.c
    sources:
      binary: endif-pedantic2.i
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("extra tokens")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("extra tokens")[^\n]*\n?)+'
test_endif-pedantic2_544:
  build:
    cflags: -Wno-endif-labels -pedantic-errors -Wendif-labels -E
    files: compilers/gcc/./gcc.dg/cpp/endif-pedantic2.c
    sources:
      binary: endif-pedantic2.i
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("extra tokens")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("extra tokens")[^\n]*\n?)+'
test_endif_140:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/endif.c
    sources:
      binary: endif.i
  group: GRPSERIAL
test_endif_545:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/endif.c
    sources:
      binary: endif.i
  group: GRPSERIAL
test_error-1_141:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/error-1.c
    sources:
      binary: error-1.i
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unterminated comment")[^\n]*\n?)+'
test_error-1_546:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/error-1.c
    sources:
      binary: error-1.i
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unterminated comment")[^\n]*\n?)+'
test_escape-1_142:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/escape-1.c
    sources:
      binary: escape-1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no following")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("out of range")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("out of range")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("multi")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unknown escape")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no following")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("out of range")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("out of range")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("multi")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unknown escape")[^\n]*\n?)+'
test_escape-1_547:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/escape-1.c
    sources:
      binary: escape-1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no following")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("out of range")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("out of range")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("multi")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unknown escape")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no following")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("out of range")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("out of range")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("multi")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unknown escape")[^\n]*\n?)+'
test_escape-2_143:
  build:
    cflags: -pedantic -std=c99 -S
    files: compilers/gcc/./gcc.dg/cpp/escape-2.c
    sources:
      binary: escape-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("non-ISO")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("non-ISO")[^\n]*\n?)+'
test_escape-2_548:
  build:
    cflags: -pedantic -std=c99 -S
    files: compilers/gcc/./gcc.dg/cpp/escape-2.c
    sources:
      binary: escape-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("non-ISO")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("non-ISO")[^\n]*\n?)+'
test_escape_144:
  build:
    cflags: -Wtraditional -std=c89 -S
    files: compilers/gcc/./gcc.dg/cpp/escape.c
    sources:
      binary: escape.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("traditional")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("traditional")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("only valid")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("traditional")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("traditional")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("only valid")[^\n]*\n?)+'
test_escape_549:
  build:
    cflags: -Wtraditional -std=c89 -S
    files: compilers/gcc/./gcc.dg/cpp/escape.c
    sources:
      binary: escape.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("traditional")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("traditional")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("only valid")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("traditional")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("traditional")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("only valid")[^\n]*\n?)+'
test_expr-overflow-1_145:
  build:
    cflags: -std=c99 -E
    files: compilers/gcc/./gcc.dg/cpp/expr-overflow-1.c
    sources:
      binary: expr-overflow-1.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'
test_expr-overflow-1_550:
  build:
    cflags: -std=c99 -E
    files: compilers/gcc/./gcc.dg/cpp/expr-overflow-1.c
    sources:
      binary: expr-overflow-1.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'
test_expr_146:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/expr.c
    sources:
      binary: expr.i
  group: GRPSERIAL
test_expr_551:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/expr.c
    sources:
      binary: expr.i
  group: GRPSERIAL
test_extratokens2_148:
  build:
    cflags: -Wno-endif-labels -E
    files: compilers/gcc/./gcc.dg/cpp/extratokens2.c
    sources:
      binary: extratokens2.i
  group: GRPSERIAL
test_extratokens2_553:
  build:
    cflags: -Wno-endif-labels -E
    files: compilers/gcc/./gcc.dg/cpp/extratokens2.c
    sources:
      binary: extratokens2.i
  group: GRPSERIAL
test_extratokens_147:
  build:
    cflags: -Wno-deprecated -E
    files: compilers/gcc/./gcc.dg/cpp/extratokens.c
    sources:
      binary: extratokens.i
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("extra tokens")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("extra tokens")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("extra tokens")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("extra tokens")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("extra tokens")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("extra tokens")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("extra tokens")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("extra tokens")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("extra tokens")[^\n]*\n?)+'
test_extratokens_552:
  build:
    cflags: -Wno-deprecated -E
    files: compilers/gcc/./gcc.dg/cpp/extratokens.c
    sources:
      binary: extratokens.i
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("extra tokens")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("extra tokens")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("extra tokens")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("extra tokens")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("extra tokens")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("extra tokens")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("extra tokens")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("extra tokens")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("extra tokens")[^\n]*\n?)+'
test_fpreprocessed_149:
  build:
    cflags: -fpreprocessed -E
    files: compilers/gcc/./gcc.dg/cpp/fpreprocessed.c
    sources:
      binary: fpreprocessed.i
  group: GRPSERIAL
test_fpreprocessed_554:
  build:
    cflags: -fpreprocessed -E
    files: compilers/gcc/./gcc.dg/cpp/fpreprocessed.c
    sources:
      binary: fpreprocessed.i
  group: GRPSERIAL
test_gnuc89-pedantic_150:
  build:
    cflags: -std=gnu89 -pedantic -E
    files: compilers/gcc/./gcc.dg/cpp/gnuc89-pedantic.c
    sources:
      binary: gnuc89-pedantic.i
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("long long")[^\n]*\n?)+'
test_gnuc89-pedantic_555:
  build:
    cflags: -std=gnu89 -pedantic -E
    files: compilers/gcc/./gcc.dg/cpp/gnuc89-pedantic.c
    sources:
      binary: gnuc89-pedantic.i
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("long long")[^\n]*\n?)+'
test_gnuc89_151:
  build:
    cflags: -std=gnu89 -E
    files: compilers/gcc/./gcc.dg/cpp/gnuc89.c
    sources:
      binary: gnuc89.i
  group: GRPSERIAL
test_gnuc89_556:
  build:
    cflags: -std=gnu89 -E
    files: compilers/gcc/./gcc.dg/cpp/gnuc89.c
    sources:
      binary: gnuc89.i
  group: GRPSERIAL
test_gnuc99-pedantic_152:
  build:
    cflags: -std=gnu99 -pedantic -E
    files: compilers/gcc/./gcc.dg/cpp/gnuc99-pedantic.c
    sources:
      binary: gnuc99-pedantic.i
  group: GRPSERIAL
test_gnuc99-pedantic_557:
  build:
    cflags: -std=gnu99 -pedantic -E
    files: compilers/gcc/./gcc.dg/cpp/gnuc99-pedantic.c
    sources:
      binary: gnuc99-pedantic.i
  group: GRPSERIAL
test_gnuc99_153:
  build:
    cflags: -std=gnu99 -E
    files: compilers/gcc/./gcc.dg/cpp/gnuc99.c
    sources:
      binary: gnuc99.i
  group: GRPSERIAL
test_gnuc99_558:
  build:
    cflags: -std=gnu99 -E
    files: compilers/gcc/./gcc.dg/cpp/gnuc99.c
    sources:
      binary: gnuc99.i
  group: GRPSERIAL
test_hash1_154:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/hash1.c
    sources:
      binary: hash1.i
  group: GRPSERIAL
test_hash1_559:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/hash1.c
    sources:
      binary: hash1.i
  group: GRPSERIAL
test_ident-1_155:
  build:
    cflags: -Wno-deprecated -E
    files: compilers/gcc/./gcc.dg/cpp/ident-1.c
    sources:
      binary: ident-1.i
  group: GRPSERIAL
test_ident-1_560:
  build:
    cflags: -Wno-deprecated -E
    files: compilers/gcc/./gcc.dg/cpp/ident-1.c
    sources:
      binary: ident-1.i
  group: GRPSERIAL
test_ident_156:
  build:
    cflags: -Wno-deprecated -S
    files: compilers/gcc/./gcc.dg/cpp/ident.c
    sources:
      binary: ident.s
  group: GRPSERIAL
test_ident_561:
  build:
    cflags: -Wno-deprecated -S
    files: compilers/gcc/./gcc.dg/cpp/ident.c
    sources:
      binary: ident.s
  group: GRPSERIAL
test_if-1_157:
  build:
    cflags: -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/if-1.c
    sources:
      binary: if-1.i
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loating constant")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid digit")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("integer constant")[^\n]*\n?)+'
test_if-1_562:
  build:
    cflags: -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/if-1.c
    sources:
      binary: if-1.i
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loating constant")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid digit")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("integer constant")[^\n]*\n?)+'
test_if-2_158:
  build:
    cflags: -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/if-2.c
    sources:
      binary: if-2.i
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("(multi-character character
          constant)|(character constant (is )?too long)")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("character constant
          (is )?too long")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("empty character
          constant")[^\n]*\n?)+'
test_if-2_563:
  build:
    cflags: -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/if-2.c
    sources:
      binary: if-2.i
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("(multi-character character
          constant)|(character constant (is )?too long)")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("character constant
          (is )?too long")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("empty character
          constant")[^\n]*\n?)+'
test_if-4_159:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/if-4.c
    sources:
      binary: if-4.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not valid")[^\n]*\n?)+'
test_if-4_564:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/if-4.c
    sources:
      binary: if-4.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not valid")[^\n]*\n?)+'
test_if-5_160:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/if-5.c
    sources:
      binary: if-5.i
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("macro names")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("macro names")[^\n]*\n?)+'
test_if-5_565:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/if-5.c
    sources:
      binary: if-5.i
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("macro names")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("macro names")[^\n]*\n?)+'
test_if-cexp_161:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/if-cexp.c
    sources:
      binary: if-cexp.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OK")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\'':\'' without")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OK")[^\n]*\n?)+'
test_if-cexp_566:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/if-cexp.c
    sources:
      binary: if-cexp.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OK")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\'':\'' without")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OK")[^\n]*\n?)+'
test_if-div_162:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/if-div.c
    sources:
      binary: if-div.i
  group: GRPSERIAL
test_if-div_567:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/if-div.c
    sources:
      binary: if-div.i
  group: GRPSERIAL
test_if-mop_163:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/if-mop.c
    sources:
      binary: if-mop.i
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no right op")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no right op")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing bin")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing bin")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing bin")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no left op")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no left op")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no expression")[^\n]*\n?)+'
test_if-mop_568:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/if-mop.c
    sources:
      binary: if-mop.i
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no right op")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no right op")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing bin")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing bin")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing bin")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no left op")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no left op")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no expression")[^\n]*\n?)+'
test_if-mpar_164:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/if-mpar.c
    sources:
      binary: if-mpar.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("9:missing \''\\\\)\''")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("8:missing \''\\\\(\''")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("5:missing \''\\\\(\''")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("6:missing \''\\\\(\''")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("5:missing \''\\\\)\''")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("5:missing \''\\\\)\''")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("6:missing \''\\\\)\''")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("5:missing \''\\\\)\''")[^\n]*\n?)+'
test_if-mpar_569:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/if-mpar.c
    sources:
      binary: if-mpar.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("9:missing \''\\\\)\''")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("8:missing \''\\\\(\''")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("5:missing \''\\\\(\''")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("6:missing \''\\\\(\''")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("5:missing \''\\\\)\''")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("5:missing \''\\\\)\''")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("6:missing \''\\\\)\''")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("5:missing \''\\\\)\''")[^\n]*\n?)+'
test_if-oppr2_166:
  build:
    cflags: ' -E'
    files: compilers/gcc/./gcc.dg/cpp/if-oppr2.c
    sources:
      binary: if-oppr2.i
  group: GRPSERIAL
test_if-oppr2_571:
  build:
    cflags: ' -E'
    files: compilers/gcc/./gcc.dg/cpp/if-oppr2.c
    sources:
      binary: if-oppr2.i
  group: GRPSERIAL
test_if-oppr_165:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/if-oppr.c
    sources:
      binary: if-oppr.i
  group: GRPSERIAL
test_if-oppr_570:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/if-oppr.c
    sources:
      binary: if-oppr.i
  group: GRPSERIAL
test_if-paren_167:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/if-paren.c
    sources:
      binary: if-paren.i
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression between")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_if-paren_572:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/if-paren.c
    sources:
      binary: if-paren.i
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expression between")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_if-sc_168:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/if-sc.c
    sources:
      binary: if-sc.i
  group: GRPSERIAL
test_if-sc_573:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/if-sc.c
    sources:
      binary: if-sc.i
  group: GRPSERIAL
test_if-shift_169:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/if-shift.c
    sources:
      binary: if-shift.i
  group: GRPSERIAL
test_if-shift_574:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/if-shift.c
    sources:
      binary: if-shift.i
  group: GRPSERIAL
test_if-unary_170:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/if-unary.c
    sources:
      binary: if-unary.i
  group: GRPSERIAL
test_if-unary_575:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/if-unary.c
    sources:
      binary: if-unary.i
  group: GRPSERIAL
test_import1_171:
  build:
    cflags: -Wno-deprecated -E
    files: compilers/gcc/./gcc.dg/cpp/import1.c
    sources:
      binary: import1.i
  group: GRPSERIAL
test_import1_576:
  build:
    cflags: -Wno-deprecated -E
    files: compilers/gcc/./gcc.dg/cpp/import1.c
    sources:
      binary: import1.i
  group: GRPSERIAL
test_import2_172:
  build:
    cflags: -Wno-deprecated -E
    files: compilers/gcc/./gcc.dg/cpp/import2.c
    sources:
      binary: import2.i
  group: GRPSERIAL
test_import2_577:
  build:
    cflags: -Wno-deprecated -E
    files: compilers/gcc/./gcc.dg/cpp/import2.c
    sources:
      binary: import2.i
  group: GRPSERIAL
test_include1_173:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/include1.c
    sources:
      binary: include1.i
  group: GRPSERIAL
test_include1_578:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/include1.c
    sources:
      binary: include1.i
  group: GRPSERIAL
test_include2_174:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/include2.c
    sources:
      binary: include2.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("extra tokens")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("silly")[^\n]*\n?)+'
test_include2_579:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/include2.c
    sources:
      binary: include2.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("extra tokens")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("silly")[^\n]*\n?)+'
test_include2a_175:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/include2a.c
    sources:
      binary: include2a.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("extra tokens")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("silly")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing")[^\n]*\n?)+'
test_include2a_580:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/include2a.c
    sources:
      binary: include2a.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("extra tokens")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("silly")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing")[^\n]*\n?)+'
test_include3_176:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/include3.c
    sources:
      binary: include3.s
  group: GRPSERIAL
test_include3_581:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/include3.c
    sources:
      binary: include3.s
  group: GRPSERIAL
test_include4_177:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/include4.c
    sources:
      binary: include4.s
  group: GRPSERIAL
test_include4_582:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/include4.c
    sources:
      binary: include4.s
  group: GRPSERIAL
test_include5_178:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/include5.c
    sources:
      binary: include5.s
  group: GRPSERIAL
test_include5_583:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/include5.c
    sources:
      binary: include5.s
  group: GRPSERIAL
test_include6_179:
  build:
    cflags: -std=gnu99 -E
    files: compilers/gcc/./gcc.dg/cpp/include6.c
    sources:
      binary: include6.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("include expects")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("include expects")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("include expects")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("include expects")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("include expects")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("include expects")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("include expects")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("include expects")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("include expects")[^\n]*\n?)+'
test_include6_584:
  build:
    cflags: -std=gnu99 -E
    files: compilers/gcc/./gcc.dg/cpp/include6.c
    sources:
      binary: include6.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("include expects")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("include expects")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("include expects")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("include expects")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("include expects")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("include expects")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("include expects")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("include expects")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("include expects")[^\n]*\n?)+'
test_include7_180:
  build:
    cflags: -I "" -S
    files: compilers/gcc/./gcc.dg/cpp/include7.c
    sources:
      binary: include7.s
  group: GRPSERIAL
test_include7_585:
  build:
    cflags: -I "" -S
    files: compilers/gcc/./gcc.dg/cpp/include7.c
    sources:
      binary: include7.s
  group: GRPSERIAL
test_lexident_181:
  build:
    cflags: -trigraphs -fdollars-in-identifiers -E
    files: compilers/gcc/./gcc.dg/cpp/lexident.c
    sources:
      binary: lexident.i
  group: GRPSERIAL
test_lexident_586:
  build:
    cflags: -trigraphs -fdollars-in-identifiers -E
    files: compilers/gcc/./gcc.dg/cpp/lexident.c
    sources:
      binary: lexident.i
  group: GRPSERIAL
test_lexnum_182:
  build:
    cflags: -trigraphs
    files: compilers/gcc/./gcc.dg/cpp/lexnum.c
    sources:
      binary: ./lexnum.exe
  group: GRPSERIAL
  run:
    cwd: .
test_lexnum_587:
  build:
    cflags: -trigraphs
    files: compilers/gcc/./gcc.dg/cpp/lexnum.c
    sources:
      binary: ./lexnum.exe
  group: GRPSERIAL
  run:
    cwd: .
test_lexstrng_183:
  build:
    cflags: -trigraphs
    files: compilers/gcc/./gcc.dg/cpp/lexstrng.c
    sources:
      binary: ./lexstrng.exe
  group: GRPSERIAL
  run:
    cwd: .
test_lexstrng_588:
  build:
    cflags: -trigraphs
    files: compilers/gcc/./gcc.dg/cpp/lexstrng.c
    sources:
      binary: ./lexstrng.exe
  group: GRPSERIAL
  run:
    cwd: .
test_line1_184:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/line1.c
    sources:
      binary: line1.i
  group: GRPSERIAL
test_line1_589:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/line1.c
    sources:
      binary: line1.i
  group: GRPSERIAL
test_line2_185:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/line2.c
    sources:
      binary: line2.i
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("out of range")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("out of range")[^\n]*\n?)+'
test_line2_590:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/line2.c
    sources:
      binary: line2.i
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("out of range")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("out of range")[^\n]*\n?)+'
test_line3_186:
  build:
    cflags: -Wwrite-strings -S
    files: compilers/gcc/./gcc.dg/cpp/line3.c
    sources:
      binary: line3.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("discards \''const\''
          qualifier")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("discards \''const\''
          qualifier")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("discards \''const\''
          qualifier")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("discards \''const\''
          qualifier")[^\n]*\n?)+'
test_line3_591:
  build:
    cflags: -Wwrite-strings -S
    files: compilers/gcc/./gcc.dg/cpp/line3.c
    sources:
      binary: line3.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("discards \''const\''
          qualifier")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("discards \''const\''
          qualifier")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("discards \''const\''
          qualifier")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("discards \''const\''
          qualifier")[^\n]*\n?)+'
test_line4_187:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/line4.c
    sources:
      binary: line4.s
  group: GRPSERIAL
test_line4_592:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/line4.c
    sources:
      binary: line4.s
  group: GRPSERIAL
test_line5_188:
  build:
    cflags: -fpreprocessed -E
    files: compilers/gcc/./gcc.dg/cpp/line5.c
    sources:
      binary: line5.i
  group: GRPSERIAL
test_line5_593:
  build:
    cflags: -fpreprocessed -E
    files: compilers/gcc/./gcc.dg/cpp/line5.c
    sources:
      binary: line5.i
  group: GRPSERIAL
test_line6_189:
  build:
    cflags: ' -E'
    files: compilers/gcc/./gcc.dg/cpp/line6.c
    sources:
      binary: line6.i
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("line number out of
          range")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("line number out of
          range")[^\n]*\n?)+'
test_line6_594:
  build:
    cflags: ' -E'
    files: compilers/gcc/./gcc.dg/cpp/line6.c
    sources:
      binary: line6.i
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("line number out of
          range")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("line number out of
          range")[^\n]*\n?)+'
test_line7_190:
  build:
    cflags: -std=c99 -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/line7.c
    sources:
      binary: line7.i
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected end
          of file")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a positive
          integer")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a valid
          filename")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("extra tokens
          at end")[^\n]*\n?)+'
test_line7_595:
  build:
    cflags: -std=c99 -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/line7.c
    sources:
      binary: line7.i
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected end
          of file")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a positive
          integer")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not a valid
          filename")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("extra tokens
          at end")[^\n]*\n?)+'
test_line8_191:
  build:
    cflags: -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/line8.c
    sources:
      binary: line8.s
  group: GRPSERIAL
test_line8_596:
  build:
    cflags: -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/line8.c
    sources:
      binary: line8.s
  group: GRPSERIAL
test_mac-dir-1_192:
  build:
    cflags: ''
    files: compilers/gcc/./gcc.dg/cpp/mac-dir-1.c
    sources:
      binary: ./mac-dir-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_mac-dir-1_597:
  build:
    cflags: ''
    files: compilers/gcc/./gcc.dg/cpp/mac-dir-1.c
    sources:
      binary: ./mac-dir-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_mac-dir-2_193:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/mac-dir-2.c
    sources:
      binary: mac-dir-2.i
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not portable")[^\n]*\n?)+'
test_mac-dir-2_598:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/mac-dir-2.c
    sources:
      binary: mac-dir-2.i
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not portable")[^\n]*\n?)+'
test_mac-eol-at-eof_194:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/mac-eol-at-eof.c
    sources:
      binary: mac-eol-at-eof.s
  group: GRPSERIAL
test_mac-eol-at-eof_599:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/mac-eol-at-eof.c
    sources:
      binary: mac-eol-at-eof.s
  group: GRPSERIAL
test_maccom1_195:
  build:
    cflags: -CC -E
    files: compilers/gcc/./gcc.dg/cpp/maccom1.c
    sources:
      binary: maccom1.i
  group: GRPSERIAL
test_maccom1_600:
  build:
    cflags: -CC -E
    files: compilers/gcc/./gcc.dg/cpp/maccom1.c
    sources:
      binary: maccom1.i
  group: GRPSERIAL
test_maccom2_196:
  build:
    cflags: -CC -E
    files: compilers/gcc/./gcc.dg/cpp/maccom2.c
    sources:
      binary: maccom2.i
  group: GRPSERIAL
test_maccom2_601:
  build:
    cflags: -CC -E
    files: compilers/gcc/./gcc.dg/cpp/maccom2.c
    sources:
      binary: maccom2.i
  group: GRPSERIAL
test_maccom3_197:
  build:
    cflags: -CC -E
    files: compilers/gcc/./gcc.dg/cpp/maccom3.c
    sources:
      binary: maccom3.i
  group: GRPSERIAL
test_maccom3_602:
  build:
    cflags: -CC -E
    files: compilers/gcc/./gcc.dg/cpp/maccom3.c
    sources:
      binary: maccom3.i
  group: GRPSERIAL
test_maccom4_198:
  build:
    cflags: -CC -E
    files: compilers/gcc/./gcc.dg/cpp/maccom4.c
    sources:
      binary: maccom4.i
  group: GRPSERIAL
test_maccom4_603:
  build:
    cflags: -CC -E
    files: compilers/gcc/./gcc.dg/cpp/maccom4.c
    sources:
      binary: maccom4.i
  group: GRPSERIAL
test_maccom5_199:
  build:
    cflags: -CC -E
    files: compilers/gcc/./gcc.dg/cpp/maccom5.c
    sources:
      binary: maccom5.i
  group: GRPSERIAL
test_maccom5_604:
  build:
    cflags: -CC -E
    files: compilers/gcc/./gcc.dg/cpp/maccom5.c
    sources:
      binary: maccom5.i
  group: GRPSERIAL
test_maccom6_200:
  build:
    cflags: -CC -E
    files: compilers/gcc/./gcc.dg/cpp/maccom6.c
    sources:
      binary: maccom6.i
  group: GRPSERIAL
test_maccom6_605:
  build:
    cflags: -CC -E
    files: compilers/gcc/./gcc.dg/cpp/maccom6.c
    sources:
      binary: maccom6.i
  group: GRPSERIAL
test_macro-exp-tracking-1_201:
  build:
    cflags: -ftrack-macro-expansion=1 -S
    files: compilers/gcc/./gcc.dg/cpp/macro-exp-tracking-1.c
    sources:
      binary: macro-exp-tracking-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operands")[^\n]*\n?)+'
test_macro-exp-tracking-1_606:
  build:
    cflags: -ftrack-macro-expansion=1 -S
    files: compilers/gcc/./gcc.dg/cpp/macro-exp-tracking-1.c
    sources:
      binary: macro-exp-tracking-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid operands")[^\n]*\n?)+'
test_macro-exp-tracking-2_202:
  build:
    cflags: -ftrack-macro-expansion=1 -S
    files: compilers/gcc/./gcc.dg/cpp/macro-exp-tracking-2.c
    sources:
      binary: macro-exp-tracking-2.s
  group: GRPSERIAL
test_macro-exp-tracking-2_607:
  build:
    cflags: -ftrack-macro-expansion=1 -S
    files: compilers/gcc/./gcc.dg/cpp/macro-exp-tracking-2.c
    sources:
      binary: macro-exp-tracking-2.s
  group: GRPSERIAL
test_macro-exp-tracking-3_203:
  build:
    cflags: -fshow-column -ftrack-macro-expansion=1 -S
    files: compilers/gcc/./gcc.dg/cpp/macro-exp-tracking-3.c
    sources:
      binary: macro-exp-tracking-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("16:invalid operands
          to binary <<")[^\n]*\n?)+'
test_macro-exp-tracking-3_608:
  build:
    cflags: -fshow-column -ftrack-macro-expansion=1 -S
    files: compilers/gcc/./gcc.dg/cpp/macro-exp-tracking-3.c
    sources:
      binary: macro-exp-tracking-3.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("16:invalid operands
          to binary <<")[^\n]*\n?)+'
test_macro-exp-tracking-4_204:
  build:
    cflags: -fshow-column -ftrack-macro-expansion=2 -S
    files: compilers/gcc/./gcc.dg/cpp/macro-exp-tracking-4.c
    sources:
      binary: macro-exp-tracking-4.s
  group: GRPSERIAL
test_macro-exp-tracking-4_609:
  build:
    cflags: -fshow-column -ftrack-macro-expansion=2 -S
    files: compilers/gcc/./gcc.dg/cpp/macro-exp-tracking-4.c
    sources:
      binary: macro-exp-tracking-4.s
  group: GRPSERIAL
test_macro-exp-tracking-5_205:
  build:
    cflags: -fshow-column -ftrack-macro-expansion -S
    files: compilers/gcc/./gcc.dg/cpp/macro-exp-tracking-5.c
    sources:
      binary: macro-exp-tracking-5.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''variable\''
          undeclared")[^\n]*\n?)+'
test_macro-exp-tracking-5_610:
  build:
    cflags: -fshow-column -ftrack-macro-expansion -S
    files: compilers/gcc/./gcc.dg/cpp/macro-exp-tracking-5.c
    sources:
      binary: macro-exp-tracking-5.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''variable\''
          undeclared")[^\n]*\n?)+'
test_macro10_207:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/macro10.c
    sources:
      binary: macro10.i
  group: GRPSERIAL
test_macro10_612:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/macro10.c
    sources:
      binary: macro10.i
  group: GRPSERIAL
test_macro11_208:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/macro11.c
    sources:
      binary: macro11.i
  group: GRPSERIAL
test_macro11_613:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/macro11.c
    sources:
      binary: macro11.i
  group: GRPSERIAL
test_macro1_206:
  build:
    cflags: -ansi -pedantic-errors
    files: compilers/gcc/./gcc.dg/cpp/macro1.c
    sources:
      binary: ./macro1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_macro1_611:
  build:
    cflags: -ansi -pedantic-errors
    files: compilers/gcc/./gcc.dg/cpp/macro1.c
    sources:
      binary: ./macro1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_macro2_209:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/macro2.c
    sources:
      binary: macro2.i
  group: GRPSERIAL
test_macro2_614:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/macro2.c
    sources:
      binary: macro2.i
  group: GRPSERIAL
test_macro3_210:
  build:
    cflags: -std=c99
    files: compilers/gcc/./gcc.dg/cpp/macro3.c
    sources:
      binary: ./macro3.exe
  group: GRPSERIAL
  run:
    cwd: .
test_macro3_615:
  build:
    cflags: -std=c99
    files: compilers/gcc/./gcc.dg/cpp/macro3.c
    sources:
      binary: ./macro3.exe
  group: GRPSERIAL
  run:
    cwd: .
test_macro4_211:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/macro4.c
    sources:
      binary: macro4.i
  group: GRPSERIAL
test_macro4_616:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/macro4.c
    sources:
      binary: macro4.i
  group: GRPSERIAL
test_macro5_212:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/macro5.c
    sources:
      binary: macro5.i
  group: GRPSERIAL
test_macro5_617:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/macro5.c
    sources:
      binary: macro5.i
  group: GRPSERIAL
test_macro6_213:
  build:
    cflags: -ansi -pedantic-errors
    files: compilers/gcc/./gcc.dg/cpp/macro6.c
    sources:
      binary: ./macro6.exe
  group: GRPSERIAL
  run:
    cwd: .
test_macro6_618:
  build:
    cflags: -ansi -pedantic-errors
    files: compilers/gcc/./gcc.dg/cpp/macro6.c
    sources:
      binary: ./macro6.exe
  group: GRPSERIAL
  run:
    cwd: .
test_macro7_214:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/macro7.c
    sources:
      binary: macro7.i
  group: GRPSERIAL
test_macro7_619:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/macro7.c
    sources:
      binary: macro7.i
  group: GRPSERIAL
test_macro8_215:
  build:
    cflags: -std=gnu89 -S
    files: compilers/gcc/./gcc.dg/cpp/macro8.c
    sources:
      binary: macro8.s
  group: GRPSERIAL
test_macro8_620:
  build:
    cflags: -std=gnu89 -S
    files: compilers/gcc/./gcc.dg/cpp/macro8.c
    sources:
      binary: macro8.s
  group: GRPSERIAL
test_macro9_216:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/macro9.c
    sources:
      binary: macro9.s
  group: GRPSERIAL
test_macro9_621:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/macro9.c
    sources:
      binary: macro9.s
  group: GRPSERIAL
test_macspace1_217:
  build:
    cflags: -std=iso9899:1990 -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/macspace1.c
    sources:
      binary: macspace1.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing terminating")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing terminating")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
test_macspace1_622:
  build:
    cflags: -std=iso9899:1990 -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/macspace1.c
    sources:
      binary: macspace1.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing terminating")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing terminating")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("missing whitespace")[^\n]*\n?)+'
test_macspace2_218:
  build:
    cflags: -std=iso9899:1999 -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/macspace2.c
    sources:
      binary: macspace2.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing terminating")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing terminating")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
test_macspace2_623:
  build:
    cflags: -std=iso9899:1999 -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/macspace2.c
    sources:
      binary: macspace2.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing terminating")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing terminating")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires whitespace")[^\n]*\n?)+'
test_macsyntx_219:
  build:
    cflags: -pedantic -std=gnu99 -E
    files: compilers/gcc/./gcc.dg/cpp/macsyntx.c
    sources:
      binary: macsyntx.i
  group: GRPSERIAL
  validate:
    match:
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("identifier")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("space")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("parameter name")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("parameter name")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("comma")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may not appear")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("__VA_ARGS__")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("__VA_ARGS__")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("__VA_ARGS__")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("__VA_ARGS__")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("passed 1")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("passed 2")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires 2")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("requires at least
          one")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("requires at least
          one")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("ISO C")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("requires at least
          one")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unterminated
          argument")[^\n]*\n?)+'
test_macsyntx_624:
  build:
    cflags: -pedantic -std=gnu99 -E
    files: compilers/gcc/./gcc.dg/cpp/macsyntx.c
    sources:
      binary: macsyntx.i
  group: GRPSERIAL
  validate:
    match:
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("identifier")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("space")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("parameter name")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("parameter name")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("comma")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may not appear")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("__VA_ARGS__")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("__VA_ARGS__")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("__VA_ARGS__")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("__VA_ARGS__")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("passed 1")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("passed 2")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires 2")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("requires at least
          one")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("requires at least
          one")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("ISO C")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("requires at least
          one")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unterminated
          argument")[^\n]*\n?)+'
test_mi1_220:
  build:
    cflags: -H -S
    files: compilers/gcc/./gcc.dg/cpp/mi1.c
    sources:
      binary: mi1.s
  group: GRPSERIAL
test_mi1_625:
  build:
    cflags: -H -S
    files: compilers/gcc/./gcc.dg/cpp/mi1.c
    sources:
      binary: mi1.s
  group: GRPSERIAL
test_mi2_221:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/mi2.c
    sources:
      binary: mi2.s
  group: GRPSERIAL
test_mi2_626:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/mi2.c
    sources:
      binary: mi2.s
  group: GRPSERIAL
test_mi3_222:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/mi3.c
    sources:
      binary: mi3.s
  group: GRPSERIAL
test_mi3_627:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/mi3.c
    sources:
      binary: mi3.s
  group: GRPSERIAL
test_mi4_223:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/mi4.c
    sources:
      binary: mi4.i
  group: GRPSERIAL
test_mi4_628:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/mi4.c
    sources:
      binary: mi4.i
  group: GRPSERIAL
test_mi5_224:
  build:
    cflags: -nostdinc -H -C -E
    files: compilers/gcc/./gcc.dg/cpp/mi5.c
    sources:
      binary: mi5.i
  group: GRPSERIAL
test_mi5_629:
  build:
    cflags: -nostdinc -H -C -E
    files: compilers/gcc/./gcc.dg/cpp/mi5.c
    sources:
      binary: mi5.i
  group: GRPSERIAL
test_mi6_225:
  build:
    cflags: ' -S'
    files: compilers/gcc/./gcc.dg/cpp/mi6.c
    sources:
      binary: mi6.s
  group: GRPSERIAL
test_mi6_630:
  build:
    cflags: ' -S'
    files: compilers/gcc/./gcc.dg/cpp/mi6.c
    sources:
      binary: mi6.s
  group: GRPSERIAL
test_mi7_226:
  build:
    cflags: -H -E
    files: compilers/gcc/./gcc.dg/cpp/mi7.c
    sources:
      binary: mi7.i
  group: GRPSERIAL
test_mi7_631:
  build:
    cflags: -H -E
    files: compilers/gcc/./gcc.dg/cpp/mi7.c
    sources:
      binary: mi7.i
  group: GRPSERIAL
test_mi8_227:
  build:
    cflags: -H -E
    files: compilers/gcc/./gcc.dg/cpp/mi8.c
    sources:
      binary: mi8.i
  group: GRPSERIAL
test_mi8_632:
  build:
    cflags: -H -E
    files: compilers/gcc/./gcc.dg/cpp/mi8.c
    sources:
      binary: mi8.i
  group: GRPSERIAL
test_missing-header-1_228:
  build:
    cflags: ' -S'
    files: compilers/gcc/./gcc.dg/cpp/missing-header-1.c
    sources:
      binary: missing-header-1.s
  group: GRPSERIAL
test_missing-header-1_633:
  build:
    cflags: ' -S'
    files: compilers/gcc/./gcc.dg/cpp/missing-header-1.c
    sources:
      binary: missing-header-1.s
  group: GRPSERIAL
test_missing-header-MD_229:
  build:
    cflags: -MD -S
    files: compilers/gcc/./gcc.dg/cpp/missing-header-MD.c
    sources:
      binary: missing-header-MD.s
  group: GRPSERIAL
test_missing-header-MD_634:
  build:
    cflags: -MD -S
    files: compilers/gcc/./gcc.dg/cpp/missing-header-MD.c
    sources:
      binary: missing-header-MD.s
  group: GRPSERIAL
test_missing-header-MMD_230:
  build:
    cflags: -MMD -S
    files: compilers/gcc/./gcc.dg/cpp/missing-header-MMD.c
    sources:
      binary: missing-header-MMD.s
  group: GRPSERIAL
test_missing-header-MMD_635:
  build:
    cflags: -MMD -S
    files: compilers/gcc/./gcc.dg/cpp/missing-header-MMD.c
    sources:
      binary: missing-header-MMD.s
  group: GRPSERIAL
test_missing-sysheader-MD_231:
  build:
    cflags: -MD -S
    files: compilers/gcc/./gcc.dg/cpp/missing-sysheader-MD.c
    sources:
      binary: missing-sysheader-MD.s
  group: GRPSERIAL
test_missing-sysheader-MD_636:
  build:
    cflags: -MD -S
    files: compilers/gcc/./gcc.dg/cpp/missing-sysheader-MD.c
    sources:
      binary: missing-sysheader-MD.s
  group: GRPSERIAL
test_missing-sysheader-MMD_232:
  build:
    cflags: -MMD -S
    files: compilers/gcc/./gcc.dg/cpp/missing-sysheader-MMD.c
    sources:
      binary: missing-sysheader-MMD.s
  group: GRPSERIAL
test_missing-sysheader-MMD_637:
  build:
    cflags: -MMD -S
    files: compilers/gcc/./gcc.dg/cpp/missing-sysheader-MMD.c
    sources:
      binary: missing-sysheader-MMD.s
  group: GRPSERIAL
test_misspelled-directive-1_233:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/misspelled-directive-1.c
    sources:
      binary: misspelled-directive-1.s
  group: GRPSERIAL
  validate:
    match:
      L1:
        expect: true
        expr: '(^|\n)([^\n]+:1:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unterminated")[^\n]*\n?)+'
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid preprocessing
          directive #deifne; did you mean #define?")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid preprocessing
          directive #endfi; did you mean #endif?")[^\n]*\n?)+'
test_misspelled-directive-1_638:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/misspelled-directive-1.c
    sources:
      binary: misspelled-directive-1.s
  group: GRPSERIAL
  validate:
    match:
      L1:
        expect: true
        expr: '(^|\n)([^\n]+:1:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unterminated")[^\n]*\n?)+'
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid preprocessing
          directive #deifne; did you mean #define?")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid preprocessing
          directive #endfi; did you mean #endif?")[^\n]*\n?)+'
test_misspelled-directive-2_234:
  build:
    cflags: -fdiagnostics-show-caret -S
    files: compilers/gcc/./gcc.dg/cpp/misspelled-directive-2.c
    sources:
      binary: misspelled-directive-2.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid preprocessing
          directive #this_does_not_match_anything")[^\n]*\n?)+'
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid preprocessing
          directive #endfi; did you mean #endif?")[^\n]*\n?)+'
test_misspelled-directive-2_639:
  build:
    cflags: -fdiagnostics-show-caret -S
    files: compilers/gcc/./gcc.dg/cpp/misspelled-directive-2.c
    sources:
      binary: misspelled-directive-2.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid preprocessing
          directive #this_does_not_match_anything")[^\n]*\n?)+'
      L3:
        expect: true
        expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid preprocessing
          directive #endfi; did you mean #endif?")[^\n]*\n?)+'
test_multiline-2_235:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/multiline-2.c
    sources:
      binary: multiline-2.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("17:missing term")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing term")[^\n]*\n?)+'
test_multiline-2_640:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/multiline-2.c
    sources:
      binary: multiline-2.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("17:missing term")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing term")[^\n]*\n?)+'
test_multiline_236:
  build:
    cflags: -nostdinc -C -E
    files: compilers/gcc/./gcc.dg/cpp/multiline.c
    sources:
      binary: multiline.i
  group: GRPSERIAL
  validate:
    match:
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("missing term")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("missing term")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("missing term")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("missing term")[^\n]*\n?)+'
test_multiline_641:
  build:
    cflags: -nostdinc -C -E
    files: compilers/gcc/./gcc.dg/cpp/multiline.c
    sources:
      binary: multiline.i
  group: GRPSERIAL
  validate:
    match:
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("missing term")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("missing term")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("missing term")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("missing term")[^\n]*\n?)+'
test_normalize-1_237:
  build:
    cflags: -std=c99 -E
    files: compilers/gcc/./gcc.dg/cpp/normalize-1.c
    sources:
      binary: normalize-1.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
test_normalize-1_642:
  build:
    cflags: -std=c99 -E
    files: compilers/gcc/./gcc.dg/cpp/normalize-1.c
    sources:
      binary: normalize-1.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
test_normalize-2_238:
  build:
    cflags: -std=c99 -Wnormalized=nfkc -E
    files: compilers/gcc/./gcc.dg/cpp/normalize-2.c
    sources:
      binary: normalize-2.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("not in NFKC")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
test_normalize-2_643:
  build:
    cflags: -std=c99 -Wnormalized=nfkc -E
    files: compilers/gcc/./gcc.dg/cpp/normalize-2.c
    sources:
      binary: normalize-2.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("not in NFKC")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("not in NFC")[^\n]*\n?)+'
test_normalize-4_239:
  build:
    cflags: -std=c99 -Wnormalized=none -E
    files: compilers/gcc/./gcc.dg/cpp/normalize-4.c
    sources:
      binary: normalize-4.i
  group: GRPSERIAL
test_normalize-4_644:
  build:
    cflags: -std=c99 -Wnormalized=none -E
    files: compilers/gcc/./gcc.dg/cpp/normalize-4.c
    sources:
      binary: normalize-4.i
  group: GRPSERIAL
test_paste10_241:
  build:
    cflags: ' -E'
    files: compilers/gcc/./gcc.dg/cpp/paste10.c
    sources:
      binary: paste10.i
  group: GRPSERIAL
test_paste10_646:
  build:
    cflags: ' -E'
    files: compilers/gcc/./gcc.dg/cpp/paste10.c
    sources:
      binary: paste10.i
  group: GRPSERIAL
test_paste11_242:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/paste11.c
    sources:
      binary: paste11.i
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("valid preprocessing
          tok")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("valid preprocessing
          tok")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("valid preprocessing
          tok")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("valid preprocessing
          tok")[^\n]*\n?)+'
test_paste11_647:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/paste11.c
    sources:
      binary: paste11.i
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("valid preprocessing
          tok")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("valid preprocessing
          tok")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("valid preprocessing
          tok")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("valid preprocessing
          tok")[^\n]*\n?)+'
test_paste12-2_243:
  build:
    cflags: -ftrack-macro-expansion=2 -E
    files: compilers/gcc/./gcc.dg/cpp/paste12-2.c
    sources:
      binary: paste12-2.i
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*(" does not")[^\n]*\n?)+'
test_paste12-2_648:
  build:
    cflags: -ftrack-macro-expansion=2 -E
    files: compilers/gcc/./gcc.dg/cpp/paste12-2.c
    sources:
      binary: paste12-2.i
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*(" does not")[^\n]*\n?)+'
test_paste12_244:
  build:
    cflags: -ftrack-macro-expansion=0 -E
    files: compilers/gcc/./gcc.dg/cpp/paste12.c
    sources:
      binary: paste12.i
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*(" does not")[^\n]*\n?)+'
test_paste12_649:
  build:
    cflags: -ftrack-macro-expansion=0 -E
    files: compilers/gcc/./gcc.dg/cpp/paste12.c
    sources:
      binary: paste12.i
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*(" does not")[^\n]*\n?)+'
test_paste13_245:
  build:
    cflags: -ftrack-macro-expansion=0 -E
    files: compilers/gcc/./gcc.dg/cpp/paste13.c
    sources:
      binary: paste13.i
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("valid preprocessing
          tok")[^\n]*\n?)+'
test_paste13_650:
  build:
    cflags: -ftrack-macro-expansion=0 -E
    files: compilers/gcc/./gcc.dg/cpp/paste13.c
    sources:
      binary: paste13.i
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("valid preprocessing
          tok")[^\n]*\n?)+'
test_paste14-2_246:
  build:
    cflags: -ftrack-macro-expansion=2 -E
    files: compilers/gcc/./gcc.dg/cpp/paste14-2.c
    sources:
      binary: paste14-2.i
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_paste14-2_651:
  build:
    cflags: -ftrack-macro-expansion=2 -E
    files: compilers/gcc/./gcc.dg/cpp/paste14-2.c
    sources:
      binary: paste14-2.i
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_paste14_247:
  build:
    cflags: -ftrack-macro-expansion=0 -E
    files: compilers/gcc/./gcc.dg/cpp/paste14.c
    sources:
      binary: paste14.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_paste14_652:
  build:
    cflags: -ftrack-macro-expansion=0 -E
    files: compilers/gcc/./gcc.dg/cpp/paste14.c
    sources:
      binary: paste14.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_paste15_248:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/paste15.c
    sources:
      binary: paste15.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("end of a macro
          expansion")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("end of a macro
          expansion")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("end of a macro
          expansion")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("end of a macro
          expansion")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("end of a macro
          expansion")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("end of a macro
          expansion")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("end of a macro
          expansion")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("end of a macro
          expansion")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("end of a macro
          expansion")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("end of a macro
          expansion")[^\n]*\n?)+'
test_paste15_653:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/paste15.c
    sources:
      binary: paste15.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("end of a macro
          expansion")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("end of a macro
          expansion")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("end of a macro
          expansion")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("end of a macro
          expansion")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("end of a macro
          expansion")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("end of a macro
          expansion")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("end of a macro
          expansion")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("end of a macro
          expansion")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("end of a macro
          expansion")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("end of a macro
          expansion")[^\n]*\n?)+'
test_paste16_249:
  build:
    cflags: ' -S'
    files: compilers/gcc/./gcc.dg/cpp/paste16.c
    sources:
      binary: paste16.s
  group: GRPSERIAL
test_paste16_654:
  build:
    cflags: ' -S'
    files: compilers/gcc/./gcc.dg/cpp/paste16.c
    sources:
      binary: paste16.s
  group: GRPSERIAL
test_paste17_250:
  build:
    cflags: -ftrack-macro-expansion=2 -E
    files: compilers/gcc/./gcc.dg/cpp/paste17.c
    sources:
      binary: paste17.i
  group: GRPSERIAL
test_paste17_655:
  build:
    cflags: -ftrack-macro-expansion=2 -E
    files: compilers/gcc/./gcc.dg/cpp/paste17.c
    sources:
      binary: paste17.i
  group: GRPSERIAL
test_paste18_251:
  build:
    cflags: -ftrack-macro-expansion=2 -S
    files: compilers/gcc/./gcc.dg/cpp/paste18.c
    sources:
      binary: paste18.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pasting\\[^\\n\\r\\]*does
          not give\\[^\\n\\r\\]*token")[^\n]*\n?)+'
test_paste18_656:
  build:
    cflags: -ftrack-macro-expansion=2 -S
    files: compilers/gcc/./gcc.dg/cpp/paste18.c
    sources:
      binary: paste18.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pasting\\[^\\n\\r\\]*does
          not give\\[^\\n\\r\\]*token")[^\n]*\n?)+'
test_paste1_240:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/paste1.c
    sources:
      binary: paste1.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot")[^\n]*\n?)+'
test_paste1_645:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/paste1.c
    sources:
      binary: paste1.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot")[^\n]*\n?)+'
test_paste2_252:
  build:
    cflags: -std=c99 -pedantic-errors
    files: compilers/gcc/./gcc.dg/cpp/paste2.c
    sources:
      binary: ./paste2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_paste2_657:
  build:
    cflags: -std=c99 -pedantic-errors
    files: compilers/gcc/./gcc.dg/cpp/paste2.c
    sources:
      binary: ./paste2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_paste3_253:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/paste3.c
    sources:
      binary: paste3.s
  group: GRPSERIAL
test_paste3_658:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/paste3.c
    sources:
      binary: paste3.s
  group: GRPSERIAL
test_paste4_254:
  build:
    cflags: -save-temps -S
    cwd: /code/pcvs-benchmarks/compilers/gcc/gcc.dg/cpp
    files: compilers/gcc/./gcc.dg/cpp/paste4.c
    sources:
      binary: paste4.s
  group: GRPSERIAL
  run:
    cwd: /code/pcvs-benchmarks/compilers/gcc/gcc.dg/cpp
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("exponent|parse
          error|syntax error|expected")[^\n]*\n?)+'
test_paste4_659:
  build:
    cflags: -save-temps -S
    cwd: /code/pcvs-benchmarks/compilers/gcc/gcc.dg/cpp
    files: compilers/gcc/./gcc.dg/cpp/paste4.c
    sources:
      binary: paste4.s
  group: GRPSERIAL
  run:
    cwd: /code/pcvs-benchmarks/compilers/gcc/gcc.dg/cpp
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("exponent|parse
          error|syntax error|expected")[^\n]*\n?)+'
test_paste5_255:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/paste5.c
    sources:
      binary: paste5.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("valid preprocessing
          token")[^\n]*\n?)+'
test_paste5_660:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/paste5.c
    sources:
      binary: paste5.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("valid preprocessing
          token")[^\n]*\n?)+'
test_paste6_256:
  build:
    cflags: -ftrack-macro-expansion=0 -S
    files: compilers/gcc/./gcc.dg/cpp/paste6.c
    sources:
      binary: paste6.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("valid preprocessing")[^\n]*\n?)+'
test_paste6_661:
  build:
    cflags: -ftrack-macro-expansion=0 -S
    files: compilers/gcc/./gcc.dg/cpp/paste6.c
    sources:
      binary: paste6.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("valid preprocessing")[^\n]*\n?)+'
test_paste7_257:
  build:
    cflags: -ansi -pedantic-errors
    files: compilers/gcc/./gcc.dg/cpp/paste7.c
    sources:
      binary: ./paste7.exe
  group: GRPSERIAL
  run:
    cwd: .
test_paste7_662:
  build:
    cflags: -ansi -pedantic-errors
    files: compilers/gcc/./gcc.dg/cpp/paste7.c
    sources:
      binary: ./paste7.exe
  group: GRPSERIAL
  run:
    cwd: .
test_paste8-2_258:
  build:
    cflags: -ftrack-macro-expansion=2 -E
    files: compilers/gcc/./gcc.dg/cpp/paste8-2.c
    sources:
      binary: paste8-2.i
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("valid preprocessing
          token")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("valid preprocessing
          token")[^\n]*\n?)+'
test_paste8-2_663:
  build:
    cflags: -ftrack-macro-expansion=2 -E
    files: compilers/gcc/./gcc.dg/cpp/paste8-2.c
    sources:
      binary: paste8-2.i
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("valid preprocessing
          token")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("valid preprocessing
          token")[^\n]*\n?)+'
test_paste8_259:
  build:
    cflags: -ftrack-macro-expansion=0 -E
    files: compilers/gcc/./gcc.dg/cpp/paste8.c
    sources:
      binary: paste8.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("valid preprocessing
          token")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("valid preprocessing
          token")[^\n]*\n?)+'
test_paste8_664:
  build:
    cflags: -ftrack-macro-expansion=0 -E
    files: compilers/gcc/./gcc.dg/cpp/paste8.c
    sources:
      binary: paste8.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("valid preprocessing
          token")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("valid preprocessing
          token")[^\n]*\n?)+'
test_paste9_260:
  build:
    cflags: ''
    files: compilers/gcc/./gcc.dg/cpp/paste9.c
    sources:
      binary: ./paste9.exe
  group: GRPSERIAL
  run:
    cwd: .
test_paste9_665:
  build:
    cflags: ''
    files: compilers/gcc/./gcc.dg/cpp/paste9.c
    sources:
      binary: ./paste9.exe
  group: GRPSERIAL
  run:
    cwd: .
test_poison_261:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/poison.c
    sources:
      binary: poison.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("foo5")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("foo6")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("foo6")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("foo6")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("foo6")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("foo6")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("foo6")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("foo")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("foo2")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("foo3")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("foo4")[^\n]*\n?)+'
test_poison_666:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/poison.c
    sources:
      binary: poison.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("foo5")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("foo6")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("foo6")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("foo6")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("foo6")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("foo6")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("foo6")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("foo")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("foo2")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("foo3")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("foo4")[^\n]*\n?)+'
test_pr20348_262:
  build:
    cflags: -I./gcc.dg/cpp -I./gcc.dg/cpp/inc -S
    files: compilers/gcc/./gcc.dg/cpp/pr20348.c
    sources:
      binary: pr20348.s
  group: GRPSERIAL
test_pr20348_667:
  build:
    cflags: -I./gcc.dg/cpp -I./gcc.dg/cpp/inc -S
    files: compilers/gcc/./gcc.dg/cpp/pr20348.c
    sources:
      binary: pr20348.s
  group: GRPSERIAL
test_pr20356_263:
  build:
    cflags: -I./gcc.dg/cpp -I./gcc.dg/cpp/inc -S
    files: compilers/gcc/./gcc.dg/cpp/pr20356.c
    sources:
      binary: pr20356.s
  group: GRPSERIAL
test_pr20356_668:
  build:
    cflags: -I./gcc.dg/cpp -I./gcc.dg/cpp/inc -S
    files: compilers/gcc/./gcc.dg/cpp/pr20356.c
    sources:
      binary: pr20356.s
  group: GRPSERIAL
test_pr22168-2_264:
  build:
    cflags: -Wdeprecated -E
    files: compilers/gcc/./gcc.dg/cpp/pr22168-2.c
    sources:
      binary: pr22168-2.i
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("deprecated")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("deprecated")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("deprecated")[^\n]*\n?)+'
test_pr22168-2_669:
  build:
    cflags: -Wdeprecated -E
    files: compilers/gcc/./gcc.dg/cpp/pr22168-2.c
    sources:
      binary: pr22168-2.i
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("deprecated")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("deprecated")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("deprecated")[^\n]*\n?)+'
test_pr22168_265:
  build:
    cflags: -pedantic -E
    files: compilers/gcc/./gcc.dg/cpp/pr22168.c
    sources:
      binary: pr22168.i
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("GCC extension")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("GCC extension")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("GCC extension")[^\n]*\n?)+'
test_pr22168_670:
  build:
    cflags: -pedantic -E
    files: compilers/gcc/./gcc.dg/cpp/pr22168.c
    sources:
      binary: pr22168.i
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("GCC extension")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("GCC extension")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("GCC extension")[^\n]*\n?)+'
test_pr23827_c90_266:
  build:
    cflags: -std=c90 -pedantic-errors
    files: compilers/gcc/./gcc.dg/cpp/pr23827_c90.c
    sources:
      binary: ./pr23827_c90.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr23827_c90_671:
  build:
    cflags: -std=c90 -pedantic-errors
    files: compilers/gcc/./gcc.dg/cpp/pr23827_c90.c
    sources:
      binary: ./pr23827_c90.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr23827_c90_neg_267:
  build:
    cflags: -std=c90 -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/pr23827_c90_neg.c
    sources:
      binary: pr23827_c90_neg.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of C99 hexadecimal
          floating constant")[^\n]*\n?)+'
test_pr23827_c90_neg_672:
  build:
    cflags: -std=c90 -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/pr23827_c90_neg.c
    sources:
      binary: pr23827_c90_neg.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of C99 hexadecimal
          floating constant")[^\n]*\n?)+'
test_pr27777_268:
  build:
    cflags: -trigraphs -Wall -E
    files: compilers/gcc/./gcc.dg/cpp/pr27777.c
    sources:
      binary: pr27777.i
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("BUG")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("trigraph")[^\n]*\n?)+'
test_pr27777_673:
  build:
    cflags: -trigraphs -Wall -E
    files: compilers/gcc/./gcc.dg/cpp/pr27777.c
    sources:
      binary: pr27777.i
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("BUG")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("trigraph")[^\n]*\n?)+'
test_pr28165_269:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/pr28165.c
    sources:
      binary: pr28165.i
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("system_header")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("system_header")[^\n]*\n?)+'
test_pr28165_674:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/pr28165.c
    sources:
      binary: pr28165.i
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("system_header")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("system_header")[^\n]*\n?)+'
test_pr28227_270:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/pr28227.c
    sources:
      binary: pr28227.i
  group: GRPSERIAL
test_pr28227_675:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/pr28227.c
    sources:
      binary: pr28227.i
  group: GRPSERIAL
test_pr28709_271:
  build:
    cflags: -ftrack-macro-expansion=0 -S
    files: compilers/gcc/./gcc.dg/cpp/pr28709.c
    sources:
      binary: pr28709.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*(g)[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier.*\''-\''")[^\n]*\n?)+'
test_pr28709_676:
  build:
    cflags: -ftrack-macro-expansion=0 -S
    files: compilers/gcc/./gcc.dg/cpp/pr28709.c
    sources:
      binary: pr28709.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*(g)[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected identifier.*\''-\''")[^\n]*\n?)+'
test_pr29612-1_272:
  build:
    cflags: ' -S'
    files: compilers/gcc/./gcc.dg/cpp/pr29612-1.c
    sources:
      binary: pr29612-1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("multi-character")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("multi-character")[^\n]*\n?)+'
test_pr29612-1_677:
  build:
    cflags: ' -S'
    files: compilers/gcc/./gcc.dg/cpp/pr29612-1.c
    sources:
      binary: pr29612-1.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("multi-character")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("multi-character")[^\n]*\n?)+'
test_pr29612-2_273:
  build:
    cflags: -Wtraditional -E
    files: compilers/gcc/./gcc.dg/cpp/pr29612-2.c
    sources:
      binary: pr29612-2.i
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("traditional C rejects")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("traditional C rejects")[^\n]*\n?)+'
test_pr29612-2_678:
  build:
    cflags: -Wtraditional -E
    files: compilers/gcc/./gcc.dg/cpp/pr29612-2.c
    sources:
      binary: pr29612-2.i
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("traditional C rejects")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("traditional C rejects")[^\n]*\n?)+'
test_pr30786_274:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/pr30786.c
    sources:
      binary: pr30786.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("parenthesized")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_pr30786_679:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/pr30786.c
    sources:
      binary: pr30786.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("parenthesized")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'
test_pr30805_275:
  build:
    cflags: -std=gnu89 -E
    files: compilers/gcc/./gcc.dg/cpp/pr30805.c
    sources:
      binary: pr30805.i
  group: GRPSERIAL
test_pr30805_680:
  build:
    cflags: -std=gnu89 -E
    files: compilers/gcc/./gcc.dg/cpp/pr30805.c
    sources:
      binary: pr30805.i
  group: GRPSERIAL
test_pr32868_276:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/pr32868.c
    sources:
      binary: pr32868.i
  group: GRPSERIAL
test_pr32868_681:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/pr32868.c
    sources:
      binary: pr32868.i
  group: GRPSERIAL
test_pr32974_277:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/pr32974.c
    sources:
      binary: pr32974.s
  group: GRPSERIAL
test_pr32974_682:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/pr32974.c
    sources:
      binary: pr32974.s
  group: GRPSERIAL
test_pr33415_278:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/pr33415.c
    sources:
      binary: pr33415.s
  group: GRPSERIAL
test_pr33415_683:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/pr33415.c
    sources:
      binary: pr33415.s
  group: GRPSERIAL
test_pr33466_279:
  build:
    cflags: -std=gnu99 -S
    files: compilers/gcc/./gcc.dg/cpp/pr33466.c
    sources:
      binary: pr33466.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
test_pr33466_684:
  build:
    cflags: -std=gnu99 -S
    files: compilers/gcc/./gcc.dg/cpp/pr33466.c
    sources:
      binary: pr33466.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid suffix")[^\n]*\n?)+'
test_pr34602_280:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/pr34602.c
    sources:
      binary: pr34602.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected end")[^\n]*\n?)+'
test_pr34602_685:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/pr34602.c
    sources:
      binary: pr34602.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unexpected end")[^\n]*\n?)+'
test_pr34692_281:
  build:
    cflags: -ffat-lto-objects -S
    files: compilers/gcc/./gcc.dg/cpp/pr34692.c
    sources:
      binary: pr34692.s
  group: GRPSERIAL
test_pr34692_686:
  build:
    cflags: -ffat-lto-objects -S
    files: compilers/gcc/./gcc.dg/cpp/pr34692.c
    sources:
      binary: pr34692.s
  group: GRPSERIAL
test_pr34859_282:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/pr34859.c
    sources:
      binary: pr34859.i
  group: GRPSERIAL
test_pr34859_687:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/pr34859.c
    sources:
      binary: pr34859.i
  group: GRPSERIAL
test_pr35313_283:
  build:
    cflags: -std=c99 -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/pr35313.c
    sources:
      binary: pr35313.i
  group: GRPSERIAL
test_pr35313_688:
  build:
    cflags: -std=c99 -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/pr35313.c
    sources:
      binary: pr35313.i
  group: GRPSERIAL
test_pr35322_284:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/pr35322.c
    sources:
      binary: pr35322.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("#pragma dependency
          expects")[^\n]*\n?)+'
test_pr35322_689:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/pr35322.c
    sources:
      binary: pr35322.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("#pragma dependency
          expects")[^\n]*\n?)+'
test_pr36320_285:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/pr36320.c
    sources:
      binary: pr36320.i
  group: GRPSERIAL
test_pr36320_690:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/pr36320.c
    sources:
      binary: pr36320.i
  group: GRPSERIAL
test_pr43195_286:
  build:
    cflags: -H -E
    files: compilers/gcc/./gcc.dg/cpp/pr43195.c
    sources:
      binary: pr43195.i
  group: GRPSERIAL
test_pr43195_691:
  build:
    cflags: -H -E
    files: compilers/gcc/./gcc.dg/cpp/pr43195.c
    sources:
      binary: pr43195.i
  group: GRPSERIAL
test_pr60570_287:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/pr60570.c
    sources:
      binary: pr60570.i
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("division by zero")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with no expression")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("division by zero")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with no expression")[^\n]*\n?)+'
test_pr60570_692:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/pr60570.c
    sources:
      binary: pr60570.i
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("division by zero")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with no expression")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("division by zero")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with no expression")[^\n]*\n?)+'
test_pr61854-1_288:
  build:
    cflags: -std=c89
    files: compilers/gcc/./gcc.dg/cpp/pr61854-1.c
    sources:
      binary: ./pr61854-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr61854-1_693:
  build:
    cflags: -std=c89
    files: compilers/gcc/./gcc.dg/cpp/pr61854-1.c
    sources:
      binary: ./pr61854-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr61854-2_289:
  build:
    cflags: -std=gnu89
    files: compilers/gcc/./gcc.dg/cpp/pr61854-2.c
    sources:
      binary: ./pr61854-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr61854-2_694:
  build:
    cflags: -std=gnu89
    files: compilers/gcc/./gcc.dg/cpp/pr61854-2.c
    sources:
      binary: ./pr61854-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr61854-3_290:
  build:
    cflags: -std=c89 -E
    files: compilers/gcc/./gcc.dg/cpp/pr61854-3.c
    sources:
      binary: pr61854-3.i
  group: GRPSERIAL
test_pr61854-3_695:
  build:
    cflags: -std=c89 -E
    files: compilers/gcc/./gcc.dg/cpp/pr61854-3.c
    sources:
      binary: pr61854-3.i
  group: GRPSERIAL
test_pr61854-4_291:
  build:
    cflags: -std=c89 -E
    files: compilers/gcc/./gcc.dg/cpp/pr61854-4.c
    sources:
      binary: pr61854-4.i
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("C\\\\+\\\\+ style
          comments are not allowed in ISO C90")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("reported only
          once")[^\n]*\n?)+'
test_pr61854-4_696:
  build:
    cflags: -std=c89 -E
    files: compilers/gcc/./gcc.dg/cpp/pr61854-4.c
    sources:
      binary: pr61854-4.i
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("C\\\\+\\\\+ style
          comments are not allowed in ISO C90")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("reported only
          once")[^\n]*\n?)+'
test_pr61854-5_292:
  build:
    cflags: -std=c89
    files: compilers/gcc/./gcc.dg/cpp/pr61854-5.c
    sources:
      binary: ./pr61854-5.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr61854-5_697:
  build:
    cflags: -std=c89
    files: compilers/gcc/./gcc.dg/cpp/pr61854-5.c
    sources:
      binary: ./pr61854-5.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr61854-6_293:
  build:
    cflags: -std=gnu89
    files: compilers/gcc/./gcc.dg/cpp/pr61854-6.c
    sources:
      binary: ./pr61854-6.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr61854-6_698:
  build:
    cflags: -std=gnu89
    files: compilers/gcc/./gcc.dg/cpp/pr61854-6.c
    sources:
      binary: ./pr61854-6.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr61854-7_294:
  build:
    cflags: -std=c89
    files: compilers/gcc/./gcc.dg/cpp/pr61854-7.c
    sources:
      binary: ./pr61854-7.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr61854-7_699:
  build:
    cflags: -std=c89
    files: compilers/gcc/./gcc.dg/cpp/pr61854-7.c
    sources:
      binary: ./pr61854-7.exe
  group: GRPSERIAL
  run:
    cwd: .
test_pr61854-c90_295:
  build:
    cflags: -std=iso9899:1990 -E
    files: compilers/gcc/./gcc.dg/cpp/pr61854-c90.c
    sources:
      binary: pr61854-c90.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("reported only
          once")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("C\\\\+\\\\+ style
          comments are not allowed in ISO C90")[^\n]*\n?)+'
test_pr61854-c90_700:
  build:
    cflags: -std=iso9899:1990 -E
    files: compilers/gcc/./gcc.dg/cpp/pr61854-c90.c
    sources:
      binary: pr61854-c90.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("reported only
          once")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("C\\\\+\\\\+ style
          comments are not allowed in ISO C90")[^\n]*\n?)+'
test_pr61854-c94_296:
  build:
    cflags: -std=iso9899:199409 -E
    files: compilers/gcc/./gcc.dg/cpp/pr61854-c94.c
    sources:
      binary: pr61854-c94.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("reported only
          once")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("C\\\\+\\\\+ style
          comments are not allowed in ISO C90")[^\n]*\n?)+'
test_pr61854-c94_701:
  build:
    cflags: -std=iso9899:199409 -E
    files: compilers/gcc/./gcc.dg/cpp/pr61854-c94.c
    sources:
      binary: pr61854-c94.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("reported only
          once")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("C\\\\+\\\\+ style
          comments are not allowed in ISO C90")[^\n]*\n?)+'
test_pr61977_297:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/pr61977.c
    sources:
      binary: pr61977.i
  group: GRPSERIAL
test_pr61977_702:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/pr61977.c
    sources:
      binary: pr61977.i
  group: GRPSERIAL
test_pr65238-2_298:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/pr65238-2.c
    sources:
      binary: pr65238-2.i
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("macro .__has_attribute.
          requires an identifier")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing ... after
          .__has_attribute.")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing ... after
          .__has_attribute.")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing binary
          operator before token .unused.")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("macro .__has_attribute.
          requires an identifier")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing ... in
          expression")[^\n]*\n?)+'
test_pr65238-2_703:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/pr65238-2.c
    sources:
      binary: pr65238-2.i
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("macro .__has_attribute.
          requires an identifier")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing ... after
          .__has_attribute.")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing ... after
          .__has_attribute.")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing binary
          operator before token .unused.")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("macro .__has_attribute.
          requires an identifier")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing ... in
          expression")[^\n]*\n?)+'
test_pr66415-1_299:
  build:
    cflags: -Wformat -fdiagnostics-show-caret -S
    files: compilers/gcc/./gcc.dg/cpp/pr66415-1.c
    sources:
      binary: pr66415-1.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("71:format")[^\n]*\n?)+'
test_pr66415-1_704:
  build:
    cflags: -Wformat -fdiagnostics-show-caret -S
    files: compilers/gcc/./gcc.dg/cpp/pr66415-1.c
    sources:
      binary: pr66415-1.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("71:format")[^\n]*\n?)+'
test_pr66415-2_300:
  build:
    cflags: -Wformat -S
    files: compilers/gcc/./gcc.dg/cpp/pr66415-2.c
    sources:
      binary: pr66415-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("format")[^\n]*\n?)+'
test_pr66415-2_705:
  build:
    cflags: -Wformat -S
    files: compilers/gcc/./gcc.dg/cpp/pr66415-2.c
    sources:
      binary: pr66415-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("format")[^\n]*\n?)+'
test_pr69985_301:
  build:
    cflags: -Wformat -S
    files: compilers/gcc/./gcc.dg/cpp/pr69985.c
    sources:
      binary: pr69985.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("15: format .%llu. expects
          a matching")[^\n]*\n?)+'
test_pr69985_706:
  build:
    cflags: -Wformat -S
    files: compilers/gcc/./gcc.dg/cpp/pr69985.c
    sources:
      binary: pr69985.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("15: format .%llu. expects
          a matching")[^\n]*\n?)+'
test_pr71591_302:
  build:
    cflags: -fself-test=fake-value -E
    files: compilers/gcc/./gcc.dg/cpp/pr71591.c
    sources:
      binary: pr71591.i
  group: GRPSERIAL
test_pr71591_707:
  build:
    cflags: -fself-test=fake-value -E
    files: compilers/gcc/./gcc.dg/cpp/pr71591.c
    sources:
      binary: pr71591.i
  group: GRPSERIAL
test_pr71681-1_303:
  build:
    cflags: -remap -I./gcc.dg/cpp/remap -E
    files: compilers/gcc/./gcc.dg/cpp/pr71681-1.c
    sources:
      binary: pr71681-1.i
  group: GRPSERIAL
test_pr71681-1_708:
  build:
    cflags: -remap -I./gcc.dg/cpp/remap -E
    files: compilers/gcc/./gcc.dg/cpp/pr71681-1.c
    sources:
      binary: pr71681-1.i
  group: GRPSERIAL
test_pr71681-2_304:
  build:
    cflags: -remap -I./gcc.dg/cpp/remap -E
    files: compilers/gcc/./gcc.dg/cpp/pr71681-2.c
    sources:
      binary: pr71681-2.i
  group: GRPSERIAL
test_pr71681-2_709:
  build:
    cflags: -remap -I./gcc.dg/cpp/remap -E
    files: compilers/gcc/./gcc.dg/cpp/pr71681-2.c
    sources:
      binary: pr71681-2.i
  group: GRPSERIAL
test_pr7263-2_305:
  build:
    cflags: -std=c89 -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/pr7263-2.c
    sources:
      binary: pr7263-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO C90 does
          not support .long long.")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of C99 long
          long integer constant")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO C90 does
          not support .long long.")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO C90 does not
          support .long long.")[^\n]*\n?)+'
test_pr7263-2_710:
  build:
    cflags: -std=c89 -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/pr7263-2.c
    sources:
      binary: pr7263-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO C90 does
          not support .long long.")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of C99 long
          long integer constant")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO C90 does
          not support .long long.")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO C90 does not
          support .long long.")[^\n]*\n?)+'
test_pr7263-3_306:
  build:
    cflags: -std=c99 -pedantic-errors -ftrack-macro-expansion=0 -S
    files: compilers/gcc/./gcc.dg/cpp/pr7263-3.c
    sources:
      binary: pr7263-3.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO C does not
          support plain .complex. meaning .double complex.")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("imaginary constants
          are a GCC extension")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO C does not
          support plain .complex. meaning .double complex.")[^\n]*\n?)+'
test_pr7263-3_711:
  build:
    cflags: -std=c99 -pedantic-errors -ftrack-macro-expansion=0 -S
    files: compilers/gcc/./gcc.dg/cpp/pr7263-3.c
    sources:
      binary: pr7263-3.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO C does not
          support plain .complex. meaning .double complex.")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("imaginary constants
          are a GCC extension")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO C does not
          support plain .complex. meaning .double complex.")[^\n]*\n?)+'
test_pragma-1_307:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/pragma-1.c
    sources:
      binary: pragma-1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared")[^\n]*\n?)+'
test_pragma-1_712:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/pragma-1.c
    sources:
      binary: pragma-1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared")[^\n]*\n?)+'
test_pragma-2_308:
  build:
    cflags: -dD -S
    files: compilers/gcc/./gcc.dg/cpp/pragma-2.c
    sources:
      binary: pragma-2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared")[^\n]*\n?)+'
test_pragma-2_713:
  build:
    cflags: -dD -S
    files: compilers/gcc/./gcc.dg/cpp/pragma-2.c
    sources:
      binary: pragma-2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared")[^\n]*\n?)+'
test_pragma-3_309:
  build:
    cflags: -fopenmp -E
    files: compilers/gcc/./gcc.dg/cpp/pragma-3.c
    sources:
      binary: pragma-3.i
  group: GRPSERIAL
test_pragma-3_714:
  build:
    cflags: -fopenmp -E
    files: compilers/gcc/./gcc.dg/cpp/pragma-3.c
    sources:
      binary: pragma-3.i
  group: GRPSERIAL
test_pragma-diagnostic-1_310:
  build:
    cflags: -Wuninitialized -ftrack-macro-expansion=0 -S
    files: compilers/gcc/./gcc.dg/cpp/pragma-diagnostic-1.c
    sources:
      binary: pragma-diagnostic-1.s
  group: GRPSERIAL
  validate:
    match:
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("uninitialized")[^\n]*\n?)+'
test_pragma-diagnostic-1_715:
  build:
    cflags: -Wuninitialized -ftrack-macro-expansion=0 -S
    files: compilers/gcc/./gcc.dg/cpp/pragma-diagnostic-1.c
    sources:
      binary: pragma-diagnostic-1.s
  group: GRPSERIAL
  validate:
    match:
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("uninitialized")[^\n]*\n?)+'
test_pragma-diagnostic-2_311:
  build:
    cflags: -Wuninitialized -ftrack-macro-expansion=2 -S
    files: compilers/gcc/./gcc.dg/cpp/pragma-diagnostic-2.c
    sources:
      binary: pragma-diagnostic-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("used uninitialized")[^\n]*\n?)+'
test_pragma-diagnostic-2_716:
  build:
    cflags: -Wuninitialized -ftrack-macro-expansion=2 -S
    files: compilers/gcc/./gcc.dg/cpp/pragma-diagnostic-2.c
    sources:
      binary: pragma-diagnostic-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("used uninitialized")[^\n]*\n?)+'
test_pragma-once-1_312:
  build:
    cflags: -I. -S
    files: compilers/gcc/./gcc.dg/cpp/pragma-once-1.c
    sources:
      binary: pragma-once-1.s
  group: GRPSERIAL
test_pragma-once-1_717:
  build:
    cflags: -I. -S
    files: compilers/gcc/./gcc.dg/cpp/pragma-once-1.c
    sources:
      binary: pragma-once-1.s
  group: GRPSERIAL
test_pragma-pop_macro-1_313:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/pragma-pop_macro-1.c
    sources:
      binary: pragma-pop_macro-1.i
  group: GRPSERIAL
test_pragma-pop_macro-1_718:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/pragma-pop_macro-1.c
    sources:
      binary: pragma-pop_macro-1.i
  group: GRPSERIAL
test_redef1_314:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/redef1.c
    sources:
      binary: redef1.i
  group: GRPSERIAL
test_redef1_719:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/redef1.c
    sources:
      binary: redef1.i
  group: GRPSERIAL
test_redef2_315:
  build:
    cflags: -ansi -Wall -E
    files: compilers/gcc/./gcc.dg/cpp/redef2.c
    sources:
      binary: redef2.i
  group: GRPSERIAL
  validate:
    match:
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
test_redef2_720:
  build:
    cflags: -ansi -Wall -E
    files: compilers/gcc/./gcc.dg/cpp/redef2.c
    sources:
      binary: redef2.i
  group: GRPSERIAL
  validate:
    match:
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
test_redef3_316:
  build:
    cflags: -DC -DD=1 -DE -E
    files: compilers/gcc/./gcc.dg/cpp/redef3.c
    sources:
      binary: redef3.i
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
test_redef3_721:
  build:
    cflags: -DC -DD=1 -DE -E
    files: compilers/gcc/./gcc.dg/cpp/redef3.c
    sources:
      binary: redef3.i
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
test_redef4_317:
  build:
    cflags: ' -E'
    files: compilers/gcc/./gcc.dg/cpp/redef4.c
    sources:
      binary: redef4.i
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+(:100:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+(:103:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+(:106:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L109:
        expect: true
        expr: '(^|\n)([^\n]+(:109:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+(:115:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L118:
        expect: true
        expr: '(^|\n)([^\n]+(:118:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L130:
        expect: true
        expr: '(^|\n)([^\n]+(:130:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+(:133:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L136:
        expect: true
        expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L139:
        expect: true
        expr: '(^|\n)([^\n]+(:139:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+(:142:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L145:
        expect: true
        expr: '(^|\n)([^\n]+(:145:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L160:
        expect: true
        expr: '(^|\n)([^\n]+(:160:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L163:
        expect: true
        expr: '(^|\n)([^\n]+(:163:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+(:166:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L169:
        expect: true
        expr: '(^|\n)([^\n]+(:169:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+(:172:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+(:175:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L181:
        expect: true
        expr: '(^|\n)([^\n]+(:181:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+(:184:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+(:190:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+(:193:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+(:196:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L199:
        expect: true
        expr: '(^|\n)([^\n]+(:199:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L202:
        expect: true
        expr: '(^|\n)([^\n]+(:202:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L205:
        expect: true
        expr: '(^|\n)([^\n]+(:205:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L208:
        expect: true
        expr: '(^|\n)([^\n]+(:208:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L211:
        expect: true
        expr: '(^|\n)([^\n]+(:211:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+(:214:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L217:
        expect: true
        expr: '(^|\n)([^\n]+(:217:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L220:
        expect: true
        expr: '(^|\n)([^\n]+(:220:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L223:
        expect: true
        expr: '(^|\n)([^\n]+(:223:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L252:
        expect: true
        expr: '(^|\n)([^\n]+(:252:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L255:
        expect: true
        expr: '(^|\n)([^\n]+(:255:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L258:
        expect: true
        expr: '(^|\n)([^\n]+(:258:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L261:
        expect: true
        expr: '(^|\n)([^\n]+(:261:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L264:
        expect: true
        expr: '(^|\n)([^\n]+(:264:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L267:
        expect: true
        expr: '(^|\n)([^\n]+(:267:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L270:
        expect: true
        expr: '(^|\n)([^\n]+(:270:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L273:
        expect: true
        expr: '(^|\n)([^\n]+(:273:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L276:
        expect: true
        expr: '(^|\n)([^\n]+(:276:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L279:
        expect: true
        expr: '(^|\n)([^\n]+(:279:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L282:
        expect: true
        expr: '(^|\n)([^\n]+(:282:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L285:
        expect: true
        expr: '(^|\n)([^\n]+(:285:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L288:
        expect: true
        expr: '(^|\n)([^\n]+(:288:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L291:
        expect: true
        expr: '(^|\n)([^\n]+(:291:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L294:
        expect: true
        expr: '(^|\n)([^\n]+(:294:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L297:
        expect: true
        expr: '(^|\n)([^\n]+(:297:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L300:
        expect: true
        expr: '(^|\n)([^\n]+(:300:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L303:
        expect: true
        expr: '(^|\n)([^\n]+(:303:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L306:
        expect: true
        expr: '(^|\n)([^\n]+(:306:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L309:
        expect: true
        expr: '(^|\n)([^\n]+(:309:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L312:
        expect: true
        expr: '(^|\n)([^\n]+(:312:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L315:
        expect: true
        expr: '(^|\n)([^\n]+(:315:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L318:
        expect: true
        expr: '(^|\n)([^\n]+(:318:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L321:
        expect: true
        expr: '(^|\n)([^\n]+(:321:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L324:
        expect: true
        expr: '(^|\n)([^\n]+(:324:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L327:
        expect: true
        expr: '(^|\n)([^\n]+(:327:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L330:
        expect: true
        expr: '(^|\n)([^\n]+(:330:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L333:
        expect: true
        expr: '(^|\n)([^\n]+(:333:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L336:
        expect: true
        expr: '(^|\n)([^\n]+(:336:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L339:
        expect: true
        expr: '(^|\n)([^\n]+(:339:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L342:
        expect: true
        expr: '(^|\n)([^\n]+(:342:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L345:
        expect: true
        expr: '(^|\n)([^\n]+(:345:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L348:
        expect: true
        expr: '(^|\n)([^\n]+(:348:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L351:
        expect: true
        expr: '(^|\n)([^\n]+(:351:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L354:
        expect: true
        expr: '(^|\n)([^\n]+(:354:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L357:
        expect: true
        expr: '(^|\n)([^\n]+(:357:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L360:
        expect: true
        expr: '(^|\n)([^\n]+(:360:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L363:
        expect: true
        expr: '(^|\n)([^\n]+(:363:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L366:
        expect: true
        expr: '(^|\n)([^\n]+(:366:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L369:
        expect: true
        expr: '(^|\n)([^\n]+(:369:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L372:
        expect: true
        expr: '(^|\n)([^\n]+(:372:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L375:
        expect: true
        expr: '(^|\n)([^\n]+(:375:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L378:
        expect: true
        expr: '(^|\n)([^\n]+(:378:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L381:
        expect: true
        expr: '(^|\n)([^\n]+(:381:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L384:
        expect: true
        expr: '(^|\n)([^\n]+(:384:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L387:
        expect: true
        expr: '(^|\n)([^\n]+(:387:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L390:
        expect: true
        expr: '(^|\n)([^\n]+(:390:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L393:
        expect: true
        expr: '(^|\n)([^\n]+(:393:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L396:
        expect: true
        expr: '(^|\n)([^\n]+(:396:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L399:
        expect: true
        expr: '(^|\n)([^\n]+(:399:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L402:
        expect: true
        expr: '(^|\n)([^\n]+(:402:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L405:
        expect: true
        expr: '(^|\n)([^\n]+(:405:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L408:
        expect: true
        expr: '(^|\n)([^\n]+(:408:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L411:
        expect: true
        expr: '(^|\n)([^\n]+(:411:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L414:
        expect: true
        expr: '(^|\n)([^\n]+(:414:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L417:
        expect: true
        expr: '(^|\n)([^\n]+(:417:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L446:
        expect: true
        expr: '(^|\n)([^\n]+(:446:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L450:
        expect: true
        expr: '(^|\n)([^\n]+(:450:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L454:
        expect: true
        expr: '(^|\n)([^\n]+(:454:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L458:
        expect: true
        expr: '(^|\n)([^\n]+(:458:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L462:
        expect: true
        expr: '(^|\n)([^\n]+(:462:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L466:
        expect: true
        expr: '(^|\n)([^\n]+(:466:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+(:70:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+(:73:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
test_redef4_722:
  build:
    cflags: ' -E'
    files: compilers/gcc/./gcc.dg/cpp/redef4.c
    sources:
      binary: redef4.i
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+(:100:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+(:103:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L106:
        expect: true
        expr: '(^|\n)([^\n]+(:106:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L109:
        expect: true
        expr: '(^|\n)([^\n]+(:109:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L112:
        expect: true
        expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+(:115:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L118:
        expect: true
        expr: '(^|\n)([^\n]+(:118:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L130:
        expect: true
        expr: '(^|\n)([^\n]+(:130:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+(:133:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L136:
        expect: true
        expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L139:
        expect: true
        expr: '(^|\n)([^\n]+(:139:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+(:142:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L145:
        expect: true
        expr: '(^|\n)([^\n]+(:145:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L160:
        expect: true
        expr: '(^|\n)([^\n]+(:160:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L163:
        expect: true
        expr: '(^|\n)([^\n]+(:163:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L166:
        expect: true
        expr: '(^|\n)([^\n]+(:166:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L169:
        expect: true
        expr: '(^|\n)([^\n]+(:169:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+(:172:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+(:175:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L181:
        expect: true
        expr: '(^|\n)([^\n]+(:181:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+(:184:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L187:
        expect: true
        expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+(:190:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+(:193:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L196:
        expect: true
        expr: '(^|\n)([^\n]+(:196:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L199:
        expect: true
        expr: '(^|\n)([^\n]+(:199:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L202:
        expect: true
        expr: '(^|\n)([^\n]+(:202:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L205:
        expect: true
        expr: '(^|\n)([^\n]+(:205:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L208:
        expect: true
        expr: '(^|\n)([^\n]+(:208:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L211:
        expect: true
        expr: '(^|\n)([^\n]+(:211:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+(:214:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L217:
        expect: true
        expr: '(^|\n)([^\n]+(:217:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L220:
        expect: true
        expr: '(^|\n)([^\n]+(:220:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L223:
        expect: true
        expr: '(^|\n)([^\n]+(:223:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L252:
        expect: true
        expr: '(^|\n)([^\n]+(:252:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L255:
        expect: true
        expr: '(^|\n)([^\n]+(:255:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L258:
        expect: true
        expr: '(^|\n)([^\n]+(:258:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L261:
        expect: true
        expr: '(^|\n)([^\n]+(:261:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L264:
        expect: true
        expr: '(^|\n)([^\n]+(:264:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L267:
        expect: true
        expr: '(^|\n)([^\n]+(:267:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L270:
        expect: true
        expr: '(^|\n)([^\n]+(:270:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L273:
        expect: true
        expr: '(^|\n)([^\n]+(:273:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L276:
        expect: true
        expr: '(^|\n)([^\n]+(:276:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L279:
        expect: true
        expr: '(^|\n)([^\n]+(:279:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L282:
        expect: true
        expr: '(^|\n)([^\n]+(:282:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L285:
        expect: true
        expr: '(^|\n)([^\n]+(:285:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L288:
        expect: true
        expr: '(^|\n)([^\n]+(:288:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L291:
        expect: true
        expr: '(^|\n)([^\n]+(:291:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L294:
        expect: true
        expr: '(^|\n)([^\n]+(:294:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L297:
        expect: true
        expr: '(^|\n)([^\n]+(:297:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L300:
        expect: true
        expr: '(^|\n)([^\n]+(:300:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L303:
        expect: true
        expr: '(^|\n)([^\n]+(:303:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L306:
        expect: true
        expr: '(^|\n)([^\n]+(:306:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L309:
        expect: true
        expr: '(^|\n)([^\n]+(:309:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L312:
        expect: true
        expr: '(^|\n)([^\n]+(:312:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L315:
        expect: true
        expr: '(^|\n)([^\n]+(:315:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L318:
        expect: true
        expr: '(^|\n)([^\n]+(:318:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L321:
        expect: true
        expr: '(^|\n)([^\n]+(:321:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L324:
        expect: true
        expr: '(^|\n)([^\n]+(:324:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L327:
        expect: true
        expr: '(^|\n)([^\n]+(:327:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L330:
        expect: true
        expr: '(^|\n)([^\n]+(:330:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L333:
        expect: true
        expr: '(^|\n)([^\n]+(:333:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L336:
        expect: true
        expr: '(^|\n)([^\n]+(:336:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L339:
        expect: true
        expr: '(^|\n)([^\n]+(:339:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L342:
        expect: true
        expr: '(^|\n)([^\n]+(:342:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L345:
        expect: true
        expr: '(^|\n)([^\n]+(:345:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L348:
        expect: true
        expr: '(^|\n)([^\n]+(:348:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L351:
        expect: true
        expr: '(^|\n)([^\n]+(:351:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L354:
        expect: true
        expr: '(^|\n)([^\n]+(:354:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L357:
        expect: true
        expr: '(^|\n)([^\n]+(:357:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L360:
        expect: true
        expr: '(^|\n)([^\n]+(:360:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L363:
        expect: true
        expr: '(^|\n)([^\n]+(:363:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L366:
        expect: true
        expr: '(^|\n)([^\n]+(:366:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L369:
        expect: true
        expr: '(^|\n)([^\n]+(:369:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L372:
        expect: true
        expr: '(^|\n)([^\n]+(:372:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L375:
        expect: true
        expr: '(^|\n)([^\n]+(:375:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L378:
        expect: true
        expr: '(^|\n)([^\n]+(:378:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L381:
        expect: true
        expr: '(^|\n)([^\n]+(:381:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L384:
        expect: true
        expr: '(^|\n)([^\n]+(:384:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L387:
        expect: true
        expr: '(^|\n)([^\n]+(:387:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L390:
        expect: true
        expr: '(^|\n)([^\n]+(:390:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L393:
        expect: true
        expr: '(^|\n)([^\n]+(:393:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L396:
        expect: true
        expr: '(^|\n)([^\n]+(:396:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L399:
        expect: true
        expr: '(^|\n)([^\n]+(:399:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L402:
        expect: true
        expr: '(^|\n)([^\n]+(:402:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L405:
        expect: true
        expr: '(^|\n)([^\n]+(:405:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L408:
        expect: true
        expr: '(^|\n)([^\n]+(:408:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L411:
        expect: true
        expr: '(^|\n)([^\n]+(:411:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L414:
        expect: true
        expr: '(^|\n)([^\n]+(:414:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L417:
        expect: true
        expr: '(^|\n)([^\n]+(:417:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L446:
        expect: true
        expr: '(^|\n)([^\n]+(:446:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L450:
        expect: true
        expr: '(^|\n)([^\n]+(:450:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L454:
        expect: true
        expr: '(^|\n)([^\n]+(:454:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L458:
        expect: true
        expr: '(^|\n)([^\n]+(:458:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L462:
        expect: true
        expr: '(^|\n)([^\n]+(:462:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L466:
        expect: true
        expr: '(^|\n)([^\n]+(:466:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+(:70:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+(:73:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("redefined")[^\n]*\n?)+'
test_separate-1_318:
  build:
    cflags: -save-temps -S
    cwd: /code/pcvs-benchmarks/compilers/gcc/gcc.dg/cpp
    files: compilers/gcc/./gcc.dg/cpp/separate-1.c
    sources:
      binary: separate-1.s
  group: GRPSERIAL
  run:
    cwd: /code/pcvs-benchmarks/compilers/gcc/gcc.dg/cpp
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("parse error|syntax
          error|expected")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("parse error|syntax
          error|expected")[^\n]*\n?)+'
test_separate-1_723:
  build:
    cflags: -save-temps -S
    cwd: /code/pcvs-benchmarks/compilers/gcc/gcc.dg/cpp
    files: compilers/gcc/./gcc.dg/cpp/separate-1.c
    sources:
      binary: separate-1.s
  group: GRPSERIAL
  run:
    cwd: /code/pcvs-benchmarks/compilers/gcc/gcc.dg/cpp
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("parse error|syntax
          error|expected")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("parse error|syntax
          error|expected")[^\n]*\n?)+'
test_skipping2_320:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/skipping2.c
    sources:
      binary: skipping2.i
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("extra tokens")[^\n]*\n?)+'
test_skipping2_725:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/skipping2.c
    sources:
      binary: skipping2.i
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("extra tokens")[^\n]*\n?)+'
test_skipping_319:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/skipping.c
    sources:
      binary: skipping.i
  group: GRPSERIAL
test_skipping_724:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/skipping.c
    sources:
      binary: skipping.i
  group: GRPSERIAL
test_source_date_epoch-1_321:
  build:
    cflags: -ansi -pedantic-errors
    files: compilers/gcc/./gcc.dg/cpp/source_date_epoch-1.c
    sources:
      binary: ./source_date_epoch-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_source_date_epoch-1_726:
  build:
    cflags: -ansi -pedantic-errors
    files: compilers/gcc/./gcc.dg/cpp/source_date_epoch-1.c
    sources:
      binary: ./source_date_epoch-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_source_date_epoch-2_322:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/source_date_epoch-2.c
    sources:
      binary: source_date_epoch-2.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("SOURCE_DATE_EPOCH
          must expand")[^\n]*\n?)+'
test_source_date_epoch-2_727:
  build:
    cflags: -ansi -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/source_date_epoch-2.c
    sources:
      binary: source_date_epoch-2.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("SOURCE_DATE_EPOCH
          must expand")[^\n]*\n?)+'
test_source_date_epoch-3_323:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/source_date_epoch-3.c
    sources:
      binary: source_date_epoch-3.i
  group: GRPSERIAL
test_source_date_epoch-3_728:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/source_date_epoch-3.c
    sources:
      binary: source_date_epoch-3.i
  group: GRPSERIAL
test_spacing1_324:
  build:
    cflags: -P -E
    files: compilers/gcc/./gcc.dg/cpp/spacing1.c
    sources:
      binary: spacing1.i
  group: GRPSERIAL
test_spacing1_729:
  build:
    cflags: -P -E
    files: compilers/gcc/./gcc.dg/cpp/spacing1.c
    sources:
      binary: spacing1.i
  group: GRPSERIAL
test_spacing2_325:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/spacing2.c
    sources:
      binary: spacing2.i
  group: GRPSERIAL
test_spacing2_730:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/spacing2.c
    sources:
      binary: spacing2.i
  group: GRPSERIAL
test_strify1_326:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/strify1.c
    sources:
      binary: strify1.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("followed by a
          macro parameter")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("followed by a
          macro parameter")[^\n]*\n?)+'
test_strify1_731:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/strify1.c
    sources:
      binary: strify1.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("followed by a
          macro parameter")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("followed by a
          macro parameter")[^\n]*\n?)+'
test_strify2_327:
  build:
    cflags: -std=c99 -pedantic-errors
    files: compilers/gcc/./gcc.dg/cpp/strify2.c
    sources:
      binary: ./strify2.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("valid string")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("valid string")[^\n]*\n?)+'
test_strify2_732:
  build:
    cflags: -std=c99 -pedantic-errors
    files: compilers/gcc/./gcc.dg/cpp/strify2.c
    sources:
      binary: ./strify2.exe
  group: GRPSERIAL
  run:
    cwd: .
  validate:
    match:
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("valid string")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("valid string")[^\n]*\n?)+'
test_strify3_328:
  build:
    cflags: -ansi -pedantic-errors
    files: compilers/gcc/./gcc.dg/cpp/strify3.c
    sources:
      binary: ./strify3.exe
  group: GRPSERIAL
  run:
    cwd: .
test_strify3_733:
  build:
    cflags: -ansi -pedantic-errors
    files: compilers/gcc/./gcc.dg/cpp/strify3.c
    sources:
      binary: ./strify3.exe
  group: GRPSERIAL
  run:
    cwd: .
test_strify4_329:
  build:
    cflags: -ansi -pedantic-errors
    files: compilers/gcc/./gcc.dg/cpp/strify4.c
    sources:
      binary: ./strify4.exe
  group: GRPSERIAL
  run:
    cwd: .
test_strify4_734:
  build:
    cflags: -ansi -pedantic-errors
    files: compilers/gcc/./gcc.dg/cpp/strify4.c
    sources:
      binary: ./strify4.exe
  group: GRPSERIAL
  run:
    cwd: .
test_strify5_330:
  build:
    cflags: -ansi -pedantic-errors
    files: compilers/gcc/./gcc.dg/cpp/strify5.c
    sources:
      binary: ./strify5.exe
  group: GRPSERIAL
  run:
    cwd: .
test_strify5_735:
  build:
    cflags: -ansi -pedantic-errors
    files: compilers/gcc/./gcc.dg/cpp/strify5.c
    sources:
      binary: ./strify5.exe
  group: GRPSERIAL
  run:
    cwd: .
test_strp1_331:
  build:
    cflags: -ansi -pedantic-errors
    files: compilers/gcc/./gcc.dg/cpp/strp1.c
    sources:
      binary: ./strp1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_strp1_736:
  build:
    cflags: -ansi -pedantic-errors
    files: compilers/gcc/./gcc.dg/cpp/strp1.c
    sources:
      binary: ./strp1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_strp2_332:
  build:
    cflags: -ansi -pedantic-errors
    files: compilers/gcc/./gcc.dg/cpp/strp2.c
    sources:
      binary: ./strp2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_strp2_737:
  build:
    cflags: -ansi -pedantic-errors
    files: compilers/gcc/./gcc.dg/cpp/strp2.c
    sources:
      binary: ./strp2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_syshdr3_334:
  build:
    cflags: -pedantic -std=c89 -ftrack-macro-expansion=1 -S
    files: compilers/gcc/./gcc.dg/cpp/syshdr3.c
    sources:
      binary: syshdr3.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("long long")[^\n]*\n?)+'
test_syshdr3_739:
  build:
    cflags: -pedantic -std=c89 -ftrack-macro-expansion=1 -S
    files: compilers/gcc/./gcc.dg/cpp/syshdr3.c
    sources:
      binary: syshdr3.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("long long")[^\n]*\n?)+'
test_syshdr4_335:
  build:
    cflags: -no-integrated-cpp -S
    files: compilers/gcc/./gcc.dg/cpp/syshdr4.c
    sources:
      binary: syshdr4.s
  group: GRPSERIAL
  validate:
    match:
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("div-by-zero")[^\n]*\n?)+'
test_syshdr4_740:
  build:
    cflags: -no-integrated-cpp -S
    files: compilers/gcc/./gcc.dg/cpp/syshdr4.c
    sources:
      binary: syshdr4.s
  group: GRPSERIAL
  validate:
    match:
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("div-by-zero")[^\n]*\n?)+'
test_syshdr5_336:
  build:
    cflags: -no-integrated-cpp -S
    files: compilers/gcc/./gcc.dg/cpp/syshdr5.c
    sources:
      binary: syshdr5.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("division by zero")[^\n]*\n?)+'
test_syshdr5_741:
  build:
    cflags: -no-integrated-cpp -S
    files: compilers/gcc/./gcc.dg/cpp/syshdr5.c
    sources:
      binary: syshdr5.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("division by zero")[^\n]*\n?)+'
test_syshdr_333:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/syshdr.c
    sources:
      binary: syshdr.i
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("include_next")[^\n]*\n?)+'
test_syshdr_738:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/syshdr.c
    sources:
      binary: syshdr.i
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("include_next")[^\n]*\n?)+'
test_sysmac1_337:
  build:
    cflags: -std=gnu99 -pedantic -Wtraditional -ftrack-macro-expansion=0 -E
    files: compilers/gcc/./gcc.dg/cpp/sysmac1.c
    sources:
      binary: sysmac1.i
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("named variadic macros")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("traditional C rejects")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("used with arguments")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("requires at least
          one")[^\n]*\n?)+'
test_sysmac1_742:
  build:
    cflags: -std=gnu99 -pedantic -Wtraditional -ftrack-macro-expansion=0 -E
    files: compilers/gcc/./gcc.dg/cpp/sysmac1.c
    sources:
      binary: sysmac1.i
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("named variadic macros")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("traditional C rejects")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("used with arguments")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("requires at least
          one")[^\n]*\n?)+'
test_sysmac2_338:
  build:
    cflags: -std=gnu99 -pedantic -Wtraditional -ftrack-macro-expansion=0 -S
    files: compilers/gcc/./gcc.dg/cpp/sysmac2.c
    sources:
      binary: sysmac2.s
  group: GRPSERIAL
  validate:
    match:
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("traditional C rejects")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("traditional C rejects")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("traditional C rejects")[^\n]*\n?)+'
test_sysmac2_743:
  build:
    cflags: -std=gnu99 -pedantic -Wtraditional -ftrack-macro-expansion=0 -S
    files: compilers/gcc/./gcc.dg/cpp/sysmac2.c
    sources:
      binary: sysmac2.s
  group: GRPSERIAL
  validate:
    match:
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("traditional C rejects")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("traditional C rejects")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("traditional C rejects")[^\n]*\n?)+'
test_tr-paste_339:
  build:
    cflags: -traditional-cpp -S
    files: compilers/gcc/./gcc.dg/cpp/tr-paste.c
    sources:
      binary: tr-paste.s
  group: GRPSERIAL
test_tr-paste_744:
  build:
    cflags: -traditional-cpp -S
    files: compilers/gcc/./gcc.dg/cpp/tr-paste.c
    sources:
      binary: tr-paste.s
  group: GRPSERIAL
test_tr-warn1_340:
  build:
    cflags: -pedantic -Wtraditional -E
    files: compilers/gcc/./gcc.dg/cpp/tr-warn1.c
    sources:
      binary: tr-warn1.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("indented")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("indented")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("indented")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("indented")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("indented")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("#elif")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("#elif")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("GCC extension")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("GCC extension")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("GCC extension")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("GCC extension")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("indented")[^\n]*\n?)+'
test_tr-warn1_745:
  build:
    cflags: -pedantic -Wtraditional -E
    files: compilers/gcc/./gcc.dg/cpp/tr-warn1.c
    sources:
      binary: tr-warn1.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("indented")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("indented")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("indented")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("indented")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("indented")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("#elif")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("#elif")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("GCC extension")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("GCC extension")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("GCC extension")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("GCC extension")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("indented")[^\n]*\n?)+'
test_tr-warn2_341:
  build:
    cflags: -Wtraditional -E
    files: compilers/gcc/./gcc.dg/cpp/tr-warn2.c
    sources:
      binary: tr-warn2.i
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("must be used with
          arguments")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("must be used with
          arguments")[^\n]*\n?)+'
test_tr-warn2_746:
  build:
    cflags: -Wtraditional -E
    files: compilers/gcc/./gcc.dg/cpp/tr-warn2.c
    sources:
      binary: tr-warn2.i
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("must be used with
          arguments")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("must be used with
          arguments")[^\n]*\n?)+'
test_tr-warn3_342:
  build:
    cflags: -pedantic -Wtraditional -E
    files: compilers/gcc/./gcc.dg/cpp/tr-warn3.c
    sources:
      binary: tr-warn3.i
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("indented")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("indented")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("indented")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("indented")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("indented")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("indented")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("indented")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("indented")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("indented")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("indented")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("indented")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("indented")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("GCC extension")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("GCC extension")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("GCC extension")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("GCC extension")[^\n]*\n?)+'
test_tr-warn3_747:
  build:
    cflags: -pedantic -Wtraditional -E
    files: compilers/gcc/./gcc.dg/cpp/tr-warn3.c
    sources:
      binary: tr-warn3.i
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("indented")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("indented")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("indented")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("indented")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("indented")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("indented")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("indented")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("indented")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("indented")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("indented")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("indented")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("indented")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("GCC extension")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("GCC extension")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("GCC extension")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("GCC extension")[^\n]*\n?)+'
test_tr-warn4_343:
  build:
    cflags: -Wtraditional -E
    files: compilers/gcc/./gcc.dg/cpp/tr-warn4.c
    sources:
      binary: tr-warn4.i
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("traditional C rejects")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("traditional C rejects")[^\n]*\n?)+'
test_tr-warn4_748:
  build:
    cflags: -Wtraditional -E
    files: compilers/gcc/./gcc.dg/cpp/tr-warn4.c
    sources:
      binary: tr-warn4.i
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("traditional C rejects")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("traditional C rejects")[^\n]*\n?)+'
test_tr-warn5_344:
  build:
    cflags: -Wtraditional -E
    files: compilers/gcc/./gcc.dg/cpp/tr-warn5.c
    sources:
      binary: tr-warn5.i
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("unary plus operator")[^\n]*\n?)+'
test_tr-warn5_749:
  build:
    cflags: -Wtraditional -E
    files: compilers/gcc/./gcc.dg/cpp/tr-warn5.c
    sources:
      binary: tr-warn5.i
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("unary plus operator")[^\n]*\n?)+'
test_tr-warn6_345:
  build:
    cflags: -Wtraditional -E
    files: compilers/gcc/./gcc.dg/cpp/tr-warn6.c
    sources:
      binary: tr-warn6.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*(" would be stringified")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*(" would be stringified")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*(" would be stringified")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*(" would be stringified")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*(" would be stringified")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*(" would be stringified")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*(" would be stringified")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*(" would be stringified")[^\n]*\n?)+'
test_tr-warn6_750:
  build:
    cflags: -Wtraditional -E
    files: compilers/gcc/./gcc.dg/cpp/tr-warn6.c
    sources:
      binary: tr-warn6.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*(" would be stringified")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*(" would be stringified")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*(" would be stringified")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*(" would be stringified")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*(" would be stringified")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*(" would be stringified")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*(" would be stringified")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*(" would be stringified")[^\n]*\n?)+'
test_trigraphs_346:
  build:
    cflags: -ansi
    files: compilers/gcc/./gcc.dg/cpp/trigraphs.c
    sources:
      binary: ./trigraphs.exe
  group: GRPSERIAL
  run:
    cwd: .
test_trigraphs_751:
  build:
    cflags: -ansi
    files: compilers/gcc/./gcc.dg/cpp/trigraphs.c
    sources:
      binary: ./trigraphs.exe
  group: GRPSERIAL
  run:
    cwd: .
test_uchar-1_347:
  build:
    cflags: -funsigned-char -fsigned-char -E
    files: compilers/gcc/./gcc.dg/cpp/uchar-1.c
    sources:
      binary: uchar-1.i
  group: GRPSERIAL
test_uchar-1_752:
  build:
    cflags: -funsigned-char -fsigned-char -E
    files: compilers/gcc/./gcc.dg/cpp/uchar-1.c
    sources:
      binary: uchar-1.i
  group: GRPSERIAL
test_uchar-3_348:
  build:
    cflags: -funsigned-char -fpreprocessed -S
    files: compilers/gcc/./gcc.dg/cpp/uchar-3.c
    sources:
      binary: uchar-3.s
  group: GRPSERIAL
test_uchar-3_753:
  build:
    cflags: -funsigned-char -fpreprocessed -S
    files: compilers/gcc/./gcc.dg/cpp/uchar-3.c
    sources:
      binary: uchar-3.s
  group: GRPSERIAL
test_ucnid-10_350:
  build:
    cflags: -std=c99 -S
    files: compilers/gcc/./gcc.dg/cpp/ucnid-10.c
    sources:
      binary: ucnid-10.s
  group: GRPSERIAL
test_ucnid-10_755:
  build:
    cflags: -std=c99 -S
    files: compilers/gcc/./gcc.dg/cpp/ucnid-10.c
    sources:
      binary: ucnid-10.s
  group: GRPSERIAL
test_ucnid-11_351:
  build:
    cflags: -std=c99 -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/ucnid-11.c
    sources:
      binary: ucnid-11.i
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefined")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefined")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefined")[^\n]*\n?)+'
test_ucnid-11_756:
  build:
    cflags: -std=c99 -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/ucnid-11.c
    sources:
      binary: ucnid-11.i
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefined")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefined")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefined")[^\n]*\n?)+'
test_ucnid-12_352:
  build:
    cflags: -std=c99 -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/ucnid-12.c
    sources:
      binary: ucnid-12.s
  group: GRPSERIAL
test_ucnid-12_757:
  build:
    cflags: -std=c99 -pedantic-errors -S
    files: compilers/gcc/./gcc.dg/cpp/ucnid-12.c
    sources:
      binary: ucnid-12.s
  group: GRPSERIAL
test_ucnid-13_353:
  build:
    cflags: -std=c99 -dD -E
    files: compilers/gcc/./gcc.dg/cpp/ucnid-13.c
    sources:
      binary: ucnid-13.i
  group: GRPSERIAL
test_ucnid-13_758:
  build:
    cflags: -std=c99 -dD -E
    files: compilers/gcc/./gcc.dg/cpp/ucnid-13.c
    sources:
      binary: ucnid-13.i
  group: GRPSERIAL
test_ucnid-14_354:
  build:
    cflags: -std=c99 -dD -E
    files: compilers/gcc/./gcc.dg/cpp/ucnid-14.c
    sources:
      binary: ucnid-14.i
  group: GRPSERIAL
test_ucnid-14_759:
  build:
    cflags: -std=c99 -dD -E
    files: compilers/gcc/./gcc.dg/cpp/ucnid-14.c
    sources:
      binary: ucnid-14.i
  group: GRPSERIAL
test_ucnid-15_355:
  build:
    cflags: -std=c99 -dD -E
    files: compilers/gcc/./gcc.dg/cpp/ucnid-15.c
    sources:
      binary: ucnid-15.i
  group: GRPSERIAL
test_ucnid-15_760:
  build:
    cflags: -std=c99 -dD -E
    files: compilers/gcc/./gcc.dg/cpp/ucnid-15.c
    sources:
      binary: ucnid-15.i
  group: GRPSERIAL
test_ucnid-1_349:
  build:
    cflags: -std=c99 -g3
    files: compilers/gcc/./gcc.dg/cpp/ucnid-1.c
    sources:
      binary: ./ucnid-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_ucnid-1_754:
  build:
    cflags: -std=c99 -g3
    files: compilers/gcc/./gcc.dg/cpp/ucnid-1.c
    sources:
      binary: ./ucnid-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_ucnid-2_356:
  build:
    cflags: -std=c99
    files: compilers/gcc/./gcc.dg/cpp/ucnid-2.c
    sources:
      binary: ./ucnid-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_ucnid-2_761:
  build:
    cflags: -std=c99
    files: compilers/gcc/./gcc.dg/cpp/ucnid-2.c
    sources:
      binary: ./ucnid-2.exe
  group: GRPSERIAL
  run:
    cwd: .
test_ucnid-3_357:
  build:
    cflags: -std=c99 -S
    files: compilers/gcc/./gcc.dg/cpp/ucnid-3.c
    sources:
      binary: ucnid-3.s
  group: GRPSERIAL
test_ucnid-3_762:
  build:
    cflags: -std=c99 -S
    files: compilers/gcc/./gcc.dg/cpp/ucnid-3.c
    sources:
      binary: ucnid-3.s
  group: GRPSERIAL
test_ucnid-4_358:
  build:
    cflags: -std=c99 -E
    files: compilers/gcc/./gcc.dg/cpp/ucnid-4.c
    sources:
      binary: ucnid-4.i
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not valid at
          the start of an identifier")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not valid at
          the start of an identifier")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not valid in an
          identifier")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not valid in an
          identifier")[^\n]*\n?)+'
test_ucnid-4_763:
  build:
    cflags: -std=c99 -E
    files: compilers/gcc/./gcc.dg/cpp/ucnid-4.c
    sources:
      binary: ucnid-4.i
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not valid at
          the start of an identifier")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not valid at
          the start of an identifier")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not valid in an
          identifier")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not valid in an
          identifier")[^\n]*\n?)+'
test_ucnid-5_359:
  build:
    cflags: -std=c99 -pedantic -E
    files: compilers/gcc/./gcc.dg/cpp/ucnid-5.c
    sources:
      binary: ucnid-5.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not valid in
          an identifier")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not valid at
          the start of an identifier")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not valid at
          the start of an identifier")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not valid in an
          identifier")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not valid in an
          identifier")[^\n]*\n?)+'
test_ucnid-5_764:
  build:
    cflags: -std=c99 -pedantic -E
    files: compilers/gcc/./gcc.dg/cpp/ucnid-5.c
    sources:
      binary: ucnid-5.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not valid in
          an identifier")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not valid at
          the start of an identifier")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not valid at
          the start of an identifier")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not valid in an
          identifier")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not valid in an
          identifier")[^\n]*\n?)+'
test_ucnid-6_360:
  build:
    cflags: -std=c89 -S
    files: compilers/gcc/./gcc.dg/cpp/ucnid-6.c
    sources:
      binary: ucnid-6.s
  group: GRPSERIAL
test_ucnid-6_765:
  build:
    cflags: -std=c89 -S
    files: compilers/gcc/./gcc.dg/cpp/ucnid-6.c
    sources:
      binary: ucnid-6.s
  group: GRPSERIAL
test_ucnid-7_361:
  build:
    cflags: -std=c99 -S
    files: compilers/gcc/./gcc.dg/cpp/ucnid-7.c
    sources:
      binary: ucnid-7.s
  group: GRPSERIAL
test_ucnid-7_766:
  build:
    cflags: -std=c99 -S
    files: compilers/gcc/./gcc.dg/cpp/ucnid-7.c
    sources:
      binary: ucnid-7.s
  group: GRPSERIAL
test_ucnid-9_362:
  build:
    cflags: -std=c99 -pedantic -E
    files: compilers/gcc/./gcc.dg/cpp/ucnid-9.c
    sources:
      binary: ucnid-9.i
  group: GRPSERIAL
test_ucnid-9_767:
  build:
    cflags: -std=c99 -pedantic -E
    files: compilers/gcc/./gcc.dg/cpp/ucnid-9.c
    sources:
      binary: ucnid-9.i
  group: GRPSERIAL
test_ucs_363:
  build:
    cflags: -std=c99 -S
    files: compilers/gcc/./gcc.dg/cpp/ucs.c
    sources:
      binary: ucs.s
  group: GRPSERIAL
  validate:
    match:
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("too long|multi-character")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not a valid")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not a valid")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not a valid")[^\n]*\n?)+'
test_ucs_768:
  build:
    cflags: -std=c99 -S
    files: compilers/gcc/./gcc.dg/cpp/ucs.c
    sources:
      binary: ucs.s
  group: GRPSERIAL
  validate:
    match:
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("too long|multi-character")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not a valid")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not a valid")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not a valid")[^\n]*\n?)+'
test_unc1_364:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/unc1.c
    sources:
      binary: unc1.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unterminated")[^\n]*\n?)+'
test_unc1_769:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/unc1.c
    sources:
      binary: unc1.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unterminated")[^\n]*\n?)+'
test_unc2_365:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/unc2.c
    sources:
      binary: unc2.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unterminated")[^\n]*\n?)+'
test_unc2_770:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/unc2.c
    sources:
      binary: unc2.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unterminated")[^\n]*\n?)+'
test_unc3_366:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/unc3.c
    sources:
      binary: unc3.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("#else")[^\n]*\n?)+'
test_unc3_771:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/unc3.c
    sources:
      binary: unc3.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("#else")[^\n]*\n?)+'
test_unc4_367:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/unc4.c
    sources:
      binary: unc4.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("#endif")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("#elif")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("#endif")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("#if")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("#endif")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("#else")[^\n]*\n?)+'
test_unc4_772:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/unc4.c
    sources:
      binary: unc4.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("#endif")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("#elif")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("#endif")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("#if")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("#endif")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("#else")[^\n]*\n?)+'
test_undef-opt-1_368:
  build:
    cflags: -undef -E
    files: compilers/gcc/./gcc.dg/cpp/undef-opt-1.c
    sources:
      binary: undef-opt-1.i
  group: GRPSERIAL
test_undef-opt-1_773:
  build:
    cflags: -undef -E
    files: compilers/gcc/./gcc.dg/cpp/undef-opt-1.c
    sources:
      binary: undef-opt-1.i
  group: GRPSERIAL
test_undef2_369:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/undef2.c
    sources:
      binary: undef2.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("undefining")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("undefining")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("undefining")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("undefining")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("undefining")[^\n]*\n?)+'
test_undef2_774:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/undef2.c
    sources:
      binary: undef2.i
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("undefining")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("undefining")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("undefining")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("undefining")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("undefining")[^\n]*\n?)+'
test_utf8-5byte-1_370:
  build:
    cflags: -std=gnu99
    files: compilers/gcc/./gcc.dg/cpp/utf8-5byte-1.c
    sources:
      binary: ./utf8-5byte-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_utf8-5byte-1_775:
  build:
    cflags: -std=gnu99
    files: compilers/gcc/./gcc.dg/cpp/utf8-5byte-1.c
    sources:
      binary: ./utf8-5byte-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_vararg1_371:
  build:
    cflags: -w
    files: compilers/gcc/./gcc.dg/cpp/vararg1.c
    sources:
      binary: ./vararg1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_vararg1_776:
  build:
    cflags: -w
    files: compilers/gcc/./gcc.dg/cpp/vararg1.c
    sources:
      binary: ./vararg1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_vararg2_372:
  build:
    cflags: -std=gnu99 -E
    files: compilers/gcc/./gcc.dg/cpp/vararg2.c
    sources:
      binary: vararg2.i
  group: GRPSERIAL
test_vararg2_777:
  build:
    cflags: -std=gnu99 -E
    files: compilers/gcc/./gcc.dg/cpp/vararg2.c
    sources:
      binary: vararg2.i
  group: GRPSERIAL
test_vararg3_373:
  build:
    cflags: -std=c99 -E
    files: compilers/gcc/./gcc.dg/cpp/vararg3.c
    sources:
      binary: vararg3.i
  group: GRPSERIAL
test_vararg3_778:
  build:
    cflags: -std=c99 -E
    files: compilers/gcc/./gcc.dg/cpp/vararg3.c
    sources:
      binary: vararg3.i
  group: GRPSERIAL
test_vararg4_374:
  build:
    cflags: -std=gnu99 -E
    files: compilers/gcc/./gcc.dg/cpp/vararg4.c
    sources:
      binary: vararg4.i
  group: GRPSERIAL
test_vararg4_779:
  build:
    cflags: -std=gnu99 -E
    files: compilers/gcc/./gcc.dg/cpp/vararg4.c
    sources:
      binary: vararg4.i
  group: GRPSERIAL
test_very-long-comment_375:
  build:
    cflags: -Wall -S
    files: compilers/gcc/./gcc.dg/cpp/very-long-comment.c
    sources:
      binary: very-long-comment.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("test warning")[^\n]*\n?)+'
test_very-long-comment_780:
  build:
    cflags: -Wall -S
    files: compilers/gcc/./gcc.dg/cpp/very-long-comment.c
    sources:
      binary: very-long-comment.s
  group: GRPSERIAL
  validate:
    match:
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("test warning")[^\n]*\n?)+'
test_warn-comments-2_376:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Werror=comments -E
    files: compilers/gcc/./gcc.dg/cpp/warn-comments-2.c
    sources:
      binary: warn-comments-2.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*(" within comment
          .-Werror=comment.")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multi-line comment
          .-Werror=comment.")[^\n]*\n?)+'
test_warn-comments-2_781:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Werror=comments -E
    files: compilers/gcc/./gcc.dg/cpp/warn-comments-2.c
    sources:
      binary: warn-comments-2.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*(" within comment
          .-Werror=comment.")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multi-line comment
          .-Werror=comment.")[^\n]*\n?)+'
test_warn-comments-3_377:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Werror=comment -E
    files: compilers/gcc/./gcc.dg/cpp/warn-comments-3.c
    sources:
      binary: warn-comments-3.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*(" within comment
          .-Werror=comment.")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multi-line comment
          .-Werror=comment.")[^\n]*\n?)+'
test_warn-comments-3_782:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Werror=comment -E
    files: compilers/gcc/./gcc.dg/cpp/warn-comments-3.c
    sources:
      binary: warn-comments-3.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*(" within comment
          .-Werror=comment.")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multi-line comment
          .-Werror=comment.")[^\n]*\n?)+'
test_warn-comments_378:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Wcomments -E
    files: compilers/gcc/./gcc.dg/cpp/warn-comments.c
    sources:
      binary: warn-comments.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*(" within comment .-Wcomment.")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("1: multi-line comment
          .-Wcomment.")[^\n]*\n?)+'
test_warn-comments_783:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Wcomments -E
    files: compilers/gcc/./gcc.dg/cpp/warn-comments.c
    sources:
      binary: warn-comments.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*(" within comment .-Wcomment.")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("1: multi-line comment
          .-Wcomment.")[^\n]*\n?)+'
test_warn-cxx-compat-2_379:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Werror=c++-compat -E
    files: compilers/gcc/./gcc.dg/cpp/warn-cxx-compat-2.c
    sources:
      binary: warn-cxx-compat-2.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*(" is a special
          operator name in C\\\\+\\\\+ .-Werror=c\\\\+\\\\+-compat.")[^\n]*\n?)+'
test_warn-cxx-compat-2_784:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Werror=c++-compat -E
    files: compilers/gcc/./gcc.dg/cpp/warn-cxx-compat-2.c
    sources:
      binary: warn-cxx-compat-2.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*(" is a special
          operator name in C\\\\+\\\\+ .-Werror=c\\\\+\\\\+-compat.")[^\n]*\n?)+'
test_warn-cxx-compat_380:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Wc++-compat -E
    files: compilers/gcc/./gcc.dg/cpp/warn-cxx-compat.c
    sources:
      binary: warn-cxx-compat.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*(" is a special operator
          name in C\\\\+\\\\+ .-Wc\\\\+\\\\+-compat.")[^\n]*\n?)+'
test_warn-cxx-compat_785:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Wc++-compat -E
    files: compilers/gcc/./gcc.dg/cpp/warn-cxx-compat.c
    sources:
      binary: warn-cxx-compat.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*(" is a special operator
          name in C\\\\+\\\\+ .-Wc\\\\+\\\\+-compat.")[^\n]*\n?)+'
test_warn-deprecated-2_381:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Werror=deprecated -E
    files: compilers/gcc/./gcc.dg/cpp/warn-deprecated-2.c
    sources:
      binary: warn-deprecated-2.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("#assert is a deprecated
          GCC extension .-Werror=deprecated.")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assertions are
          a deprecated extension .-Werror=deprecated.")[^\n]*\n?)+'
test_warn-deprecated-2_786:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Werror=deprecated -E
    files: compilers/gcc/./gcc.dg/cpp/warn-deprecated-2.c
    sources:
      binary: warn-deprecated-2.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("#assert is a deprecated
          GCC extension .-Werror=deprecated.")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assertions are
          a deprecated extension .-Werror=deprecated.")[^\n]*\n?)+'
test_warn-deprecated_382:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Wdeprecated -E
    files: compilers/gcc/./gcc.dg/cpp/warn-deprecated.c
    sources:
      binary: warn-deprecated.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("#assert is a deprecated
          GCC extension .-Wdeprecated.")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("assertions are a deprecated
          extension .-Wdeprecated.")[^\n]*\n?)+'
test_warn-deprecated_787:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Wdeprecated -E
    files: compilers/gcc/./gcc.dg/cpp/warn-deprecated.c
    sources:
      binary: warn-deprecated.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("#assert is a deprecated
          GCC extension .-Wdeprecated.")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("assertions are a deprecated
          extension .-Wdeprecated.")[^\n]*\n?)+'
test_warn-long-long-2_383:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Wtraditional -Werror=long-long -E
    files: compilers/gcc/./gcc.dg/cpp/warn-long-long-2.c
    sources:
      binary: warn-long-long-2.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*(" suffix .-Werror=long-long.")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of C99 long
          long integer constant .-Werror=long-long.")[^\n]*\n?)+'
test_warn-long-long-2_788:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Wtraditional -Werror=long-long -E
    files: compilers/gcc/./gcc.dg/cpp/warn-long-long-2.c
    sources:
      binary: warn-long-long-2.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*(" suffix .-Werror=long-long.")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("use of C99 long
          long integer constant .-Werror=long-long.")[^\n]*\n?)+'
test_warn-long-long_384:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Wtraditional -Wlong-long -E
    files: compilers/gcc/./gcc.dg/cpp/warn-long-long.c
    sources:
      binary: warn-long-long.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*(" suffix .-Wlong-long.")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("use of C99 long long
          integer constant .-Wlong-long.")[^\n]*\n?)+'
test_warn-long-long_789:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Wtraditional -Wlong-long -E
    files: compilers/gcc/./gcc.dg/cpp/warn-long-long.c
    sources:
      binary: warn-long-long.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*(" suffix .-Wlong-long.")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("use of C99 long long
          integer constant .-Wlong-long.")[^\n]*\n?)+'
test_warn-multichar-2_385:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Werror=multichar -E
    files: compilers/gcc/./gcc.dg/cpp/warn-multichar-2.c
    sources:
      binary: warn-multichar-2.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multi-character
          character constant .-Werror=multichar.")[^\n]*\n?)+'
test_warn-multichar-2_790:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Werror=multichar -E
    files: compilers/gcc/./gcc.dg/cpp/warn-multichar-2.c
    sources:
      binary: warn-multichar-2.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multi-character
          character constant .-Werror=multichar.")[^\n]*\n?)+'
test_warn-multichar_386:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Wmultichar -E
    files: compilers/gcc/./gcc.dg/cpp/warn-multichar.c
    sources:
      binary: warn-multichar.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("multi-character character
          constant .-Wmultichar.")[^\n]*\n?)+'
test_warn-multichar_791:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Wmultichar -E
    files: compilers/gcc/./gcc.dg/cpp/warn-multichar.c
    sources:
      binary: warn-multichar.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("multi-character character
          constant .-Wmultichar.")[^\n]*\n?)+'
test_warn-normalized-1_387:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Wnormalized=nfc -E
    files: compilers/gcc/./gcc.dg/cpp/warn-normalized-1.c
    sources:
      binary: warn-normalized-1.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("`.U00000f43\'' is not
          in NFC .-Wnormalized=.")[^\n]*\n?)+'
test_warn-normalized-1_792:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Wnormalized=nfc -E
    files: compilers/gcc/./gcc.dg/cpp/warn-normalized-1.c
    sources:
      binary: warn-normalized-1.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("`.U00000f43\'' is not
          in NFC .-Wnormalized=.")[^\n]*\n?)+'
test_warn-normalized-2_388:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Wnormalized=nfkc -E
    files: compilers/gcc/./gcc.dg/cpp/warn-normalized-2.c
    sources:
      binary: warn-normalized-2.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("`.U000000aa\'' is not
          in NFKC .-Wnormalized=.")[^\n]*\n?)+'
test_warn-normalized-2_793:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Wnormalized=nfkc -E
    files: compilers/gcc/./gcc.dg/cpp/warn-normalized-2.c
    sources:
      binary: warn-normalized-2.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("`.U000000aa\'' is not
          in NFKC .-Wnormalized=.")[^\n]*\n?)+'
test_warn-normalized-3_389:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Werror=normalized=nfc -E
    files: compilers/gcc/./gcc.dg/cpp/warn-normalized-3.c
    sources:
      binary: warn-normalized-3.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("`.U00000f43\''
          is not in NFC .-Werror=normalized=.")[^\n]*\n?)+'
test_warn-normalized-3_794:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Werror=normalized=nfc -E
    files: compilers/gcc/./gcc.dg/cpp/warn-normalized-3.c
    sources:
      binary: warn-normalized-3.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("`.U00000f43\''
          is not in NFC .-Werror=normalized=.")[^\n]*\n?)+'
test_warn-redefined-2_390:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Werror=builtin-macro-redefined -E
    files: compilers/gcc/./gcc.dg/cpp/warn-redefined-2.c
    sources:
      binary: warn-redefined-2.i
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*(" redefined")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*(" redefined")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*(" redefined .-Werror=builtin-macro-redefined.")[^\n]*\n?)+'
test_warn-redefined-2_795:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Werror=builtin-macro-redefined -E
    files: compilers/gcc/./gcc.dg/cpp/warn-redefined-2.c
    sources:
      binary: warn-redefined-2.i
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*(" redefined")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*(" redefined")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*(" redefined .-Werror=builtin-macro-redefined.")[^\n]*\n?)+'
test_warn-redefined_391:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Wbuiltin-macro-redefined -E
    files: compilers/gcc/./gcc.dg/cpp/warn-redefined.c
    sources:
      binary: warn-redefined.i
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*(" redefined")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*(" redefined")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*(" redefined .-Wbuiltin-macro-redefined.")[^\n]*\n?)+'
test_warn-redefined_796:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Wbuiltin-macro-redefined -E
    files: compilers/gcc/./gcc.dg/cpp/warn-redefined.c
    sources:
      binary: warn-redefined.i
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*(" redefined")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*(" redefined")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*(" redefined .-Wbuiltin-macro-redefined.")[^\n]*\n?)+'
test_warn-traditional-2_392:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Werror=traditional -Wno-deprecated
      -Wno-long-long -S
    files: compilers/gcc/./gcc.dg/cpp/warn-traditional-2.c
    sources:
      binary: warn-traditional-2.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*(" must be used
          with arguments in traditional C .-Werror=traditional.")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*(" suffix .-Werror=traditional.")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*(" traditional
          C rejects the unary plus operator .-Werror=traditional.")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("the meaning of
          \''.x\'' is different in traditional C .-Werror=traditional.")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("the meaning of
          \''.a\'' is different in traditional C .-Werror=traditional.")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("the meaning of
          \''.u\'' is different in traditional C .-Werror=traditional.")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("suggest hiding
          #assert from traditional C with an indented # .-Werror=traditional.")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("traditional C
          ignores #define with the # indented .-Werror=traditional.")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("suggest not using
          #elif in traditional C .-Werror=traditional.")[^\n]*\n?)+'
test_warn-traditional-2_797:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Werror=traditional -Wno-deprecated
      -Wno-long-long -S
    files: compilers/gcc/./gcc.dg/cpp/warn-traditional-2.c
    sources:
      binary: warn-traditional-2.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*(" must be used
          with arguments in traditional C .-Werror=traditional.")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*(" suffix .-Werror=traditional.")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*(" traditional
          C rejects the unary plus operator .-Werror=traditional.")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("the meaning of
          \''.x\'' is different in traditional C .-Werror=traditional.")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("the meaning of
          \''.a\'' is different in traditional C .-Werror=traditional.")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("the meaning of
          \''.u\'' is different in traditional C .-Werror=traditional.")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("suggest hiding
          #assert from traditional C with an indented # .-Werror=traditional.")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("traditional C
          ignores #define with the # indented .-Werror=traditional.")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("suggest not using
          #elif in traditional C .-Werror=traditional.")[^\n]*\n?)+'
test_warn-traditional_393:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Wtraditional -Wno-deprecated -Wno-long-long
      -S
    files: compilers/gcc/./gcc.dg/cpp/warn-traditional.c
    sources:
      binary: warn-traditional.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*(" must be used with
          arguments in traditional C .-Wtraditional.")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*(" suffix .-Wtraditional.")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*(" traditional C rejects
          the unary plus operator .-Wtraditional.")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("the meaning of \''.x\''
          is different in traditional C .-Wtraditional.")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("the meaning of \''.a\''
          is different in traditional C .-Wtraditional.")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("the meaning of \''.u\''
          is different in traditional C .-Wtraditional.")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("suggest hiding #assert
          from traditional C with an indented # .-Wtraditional.")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("traditional C ignores
          #define with the # indented .-Wtraditional.")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("suggest not using #elif
          in traditional C .-Wtraditional.")[^\n]*\n?)+'
test_warn-traditional_798:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Wtraditional -Wno-deprecated -Wno-long-long
      -S
    files: compilers/gcc/./gcc.dg/cpp/warn-traditional.c
    sources:
      binary: warn-traditional.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*(" must be used with
          arguments in traditional C .-Wtraditional.")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*(" suffix .-Wtraditional.")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*(" traditional C rejects
          the unary plus operator .-Wtraditional.")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("the meaning of \''.x\''
          is different in traditional C .-Wtraditional.")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("the meaning of \''.a\''
          is different in traditional C .-Wtraditional.")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("the meaning of \''.u\''
          is different in traditional C .-Wtraditional.")[^\n]*\n?)+'
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("suggest hiding #assert
          from traditional C with an indented # .-Wtraditional.")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("traditional C ignores
          #define with the # indented .-Wtraditional.")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("suggest not using #elif
          in traditional C .-Wtraditional.")[^\n]*\n?)+'
test_warn-trigraphs-1_394:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -trigraphs -Wtrigraphs -E
    files: compilers/gcc/./gcc.dg/cpp/warn-trigraphs-1.c
    sources:
      binary: warn-trigraphs-1.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("trigraph \\\\?\\\\?=
          converted to # .-Wtrigraphs.")[^\n]*\n?)+'
test_warn-trigraphs-1_799:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -trigraphs -Wtrigraphs -E
    files: compilers/gcc/./gcc.dg/cpp/warn-trigraphs-1.c
    sources:
      binary: warn-trigraphs-1.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("trigraph \\\\?\\\\?=
          converted to # .-Wtrigraphs.")[^\n]*\n?)+'
test_warn-trigraphs-2_395:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Wtrigraphs -E
    files: compilers/gcc/./gcc.dg/cpp/warn-trigraphs-2.c
    sources:
      binary: warn-trigraphs-2.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("trigraph \\\\?\\\\?=
          ignored, use -trigraphs to enable .-Wtrigraphs.")[^\n]*\n?)+'
test_warn-trigraphs-2_800:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Wtrigraphs -E
    files: compilers/gcc/./gcc.dg/cpp/warn-trigraphs-2.c
    sources:
      binary: warn-trigraphs-2.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("trigraph \\\\?\\\\?=
          ignored, use -trigraphs to enable .-Wtrigraphs.")[^\n]*\n?)+'
test_warn-trigraphs-3_396:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -trigraphs -Werror=trigraphs -E
    files: compilers/gcc/./gcc.dg/cpp/warn-trigraphs-3.c
    sources:
      binary: warn-trigraphs-3.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("trigraph \\\\?\\\\?=
          converted to # .-Werror=trigraphs.")[^\n]*\n?)+'
test_warn-trigraphs-3_801:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -trigraphs -Werror=trigraphs -E
    files: compilers/gcc/./gcc.dg/cpp/warn-trigraphs-3.c
    sources:
      binary: warn-trigraphs-3.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("trigraph \\\\?\\\\?=
          converted to # .-Werror=trigraphs.")[^\n]*\n?)+'
test_warn-trigraphs-4_397:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Werror=trigraphs -E
    files: compilers/gcc/./gcc.dg/cpp/warn-trigraphs-4.c
    sources:
      binary: warn-trigraphs-4.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("trigraph \\\\?\\\\?=
          ignored, use -trigraphs to enable .-Werror=trigraphs.")[^\n]*\n?)+'
test_warn-trigraphs-4_802:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Werror=trigraphs -E
    files: compilers/gcc/./gcc.dg/cpp/warn-trigraphs-4.c
    sources:
      binary: warn-trigraphs-4.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("trigraph \\\\?\\\\?=
          ignored, use -trigraphs to enable .-Werror=trigraphs.")[^\n]*\n?)+'
test_warn-undef-2_398:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Werror=undef -E
    files: compilers/gcc/./gcc.dg/cpp/warn-undef-2.c
    sources:
      binary: warn-undef-2.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*(" is not defined,
          evaluates to 0 .-Werror=undef.")[^\n]*\n?)+'
test_warn-undef-2_803:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Werror=undef -E
    files: compilers/gcc/./gcc.dg/cpp/warn-undef-2.c
    sources:
      binary: warn-undef-2.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*(" is not defined,
          evaluates to 0 .-Werror=undef.")[^\n]*\n?)+'
test_warn-undef_399:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Wundef -E
    files: compilers/gcc/./gcc.dg/cpp/warn-undef.c
    sources:
      binary: warn-undef.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*(" is not defined, evaluates
          to 0 .-Wundef.")[^\n]*\n?)+'
test_warn-undef_804:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Wundef -E
    files: compilers/gcc/./gcc.dg/cpp/warn-undef.c
    sources:
      binary: warn-undef.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*(" is not defined, evaluates
          to 0 .-Wundef.")[^\n]*\n?)+'
test_warn-unused-macros-2_400:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Werror=unused-macros -E
    files: compilers/gcc/./gcc.dg/cpp/warn-unused-macros-2.c
    sources:
      binary: warn-unused-macros-2.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*(" is not used .-Werror=unused-macros.")[^\n]*\n?)+'
test_warn-unused-macros-2_805:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Werror=unused-macros -E
    files: compilers/gcc/./gcc.dg/cpp/warn-unused-macros-2.c
    sources:
      binary: warn-unused-macros-2.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*(" is not used .-Werror=unused-macros.")[^\n]*\n?)+'
test_warn-unused-macros_401:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Wunused-macros -E
    files: compilers/gcc/./gcc.dg/cpp/warn-unused-macros.c
    sources:
      binary: warn-unused-macros.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*(" is not used .-Wunused-macros.")[^\n]*\n?)+'
test_warn-unused-macros_806:
  build:
    cflags: -std=gnu99 -fdiagnostics-show-option -Wunused-macros -E
    files: compilers/gcc/./gcc.dg/cpp/warn-unused-macros.c
    sources:
      binary: warn-unused-macros.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*(" is not used .-Wunused-macros.")[^\n]*\n?)+'
test_warn-variadic-2_402:
  build:
    cflags: -ansi -fdiagnostics-show-option -pedantic -Werror=variadic-macros -E
    files: compilers/gcc/./gcc.dg/cpp/warn-variadic-2.c
    sources:
      binary: warn-variadic-2.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("anonymous variadic
          macros were introduced in C99 .-Werror=variadic-macros.")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO C does not
          permit named variadic macros .-Werror=variadic-macros.")[^\n]*\n?)+'
test_warn-variadic-2_807:
  build:
    cflags: -ansi -fdiagnostics-show-option -pedantic -Werror=variadic-macros -E
    files: compilers/gcc/./gcc.dg/cpp/warn-variadic-2.c
    sources:
      binary: warn-variadic-2.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("anonymous variadic
          macros were introduced in C99 .-Werror=variadic-macros.")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO C does not
          permit named variadic macros .-Werror=variadic-macros.")[^\n]*\n?)+'
test_warn-variadic_403:
  build:
    cflags: -ansi -fdiagnostics-show-option -pedantic -Wvariadic-macros -E
    files: compilers/gcc/./gcc.dg/cpp/warn-variadic.c
    sources:
      binary: warn-variadic.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("anonymous variadic
          macros were introduced in C99 .-Wvariadic-macros.")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("ISO C does not permit
          named variadic macros .-Wvariadic-macros.")[^\n]*\n?)+'
test_warn-variadic_808:
  build:
    cflags: -ansi -fdiagnostics-show-option -pedantic -Wvariadic-macros -E
    files: compilers/gcc/./gcc.dg/cpp/warn-variadic.c
    sources:
      binary: warn-variadic.i
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("anonymous variadic
          macros were introduced in C99 .-Wvariadic-macros.")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("ISO C does not permit
          named variadic macros .-Wvariadic-macros.")[^\n]*\n?)+'
test_wchar-1_404:
  build:
    cflags: -w
    files: compilers/gcc/./gcc.dg/cpp/wchar-1.c
    sources:
      binary: ./wchar-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_wchar-1_809:
  build:
    cflags: -w
    files: compilers/gcc/./gcc.dg/cpp/wchar-1.c
    sources:
      binary: ./wchar-1.exe
  group: GRPSERIAL
  run:
    cwd: .
test_widestr1_405:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/widestr1.c
    sources:
      binary: widestr1.i
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not a valid filename")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expects")[^\n]*\n?)+'
test_widestr1_810:
  build:
    cflags: -ansi -pedantic-errors -E
    files: compilers/gcc/./gcc.dg/cpp/widestr1.c
    sources:
      binary: widestr1.i
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not a valid filename")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expects")[^\n]*\n?)+'
