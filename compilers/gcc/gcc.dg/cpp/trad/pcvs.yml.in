---
test_Wunused_1:
  build:
    cflags: ' -Wunused-macros -traditional-cpp -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/Wunused.c'
    sources:
      binary: Wunused.i
  group: GRPSERIAL
  info:
    extraopts:
      - '"-Wunused-macros -traditional-cpp"'
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:17:)[^
        ]*([0-9]+: warning:[^
        ]*(used))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:18:)[^
        ]*([0-9]+: warning:[^
        ]*(used))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:19:)[^
        ]*([0-9]+: warning:[^
        ]*(used))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test___STDC___2:
  build:
    cflags: '  -traditional-cpp -I./gcc.dg/cpp/trad/ -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/__STDC__.c'
    sources:
      binary: __STDC__.i
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_argcount_3:
  build:
    cflags: '  -traditional-cpp -I./gcc.dg/cpp/trad/ -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/argcount.c'
    sources:
      binary: argcount.i
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:12:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(passed 2" "2 args to 1 param macro))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:13:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(passed 2" "2 args to 1 param macro))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:15:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(passed 1" "1 arg to 0 param macro))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:16:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(passed 2" "2 args to 0 param macro))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:17:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(requires 2" "0 args to 2 param macro))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:18:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(requires 2" "1 args to 2 param macro))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:21:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(passed 3" "3 args to 2 param macro))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_assembler_4:
  build:
    cflags: '  -traditional-cpp -I./gcc.dg/cpp/trad/ -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/assembler.S'
    sources:
      binary: assembler.i
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:18:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(diagnostic))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_assert1_5:
  build:
    cflags: ' -Wno-deprecated -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/assert1.c'
    sources:
      binary: assert1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-Wno-deprecated"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_assert2_6:
  build:
    cflags: ' -Wno-deprecated -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/assert2.c'
    sources:
      binary: assert2.i
  group: GRPSERIAL
  info:
    extraopts:
      - '"-Wno-deprecated"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:5:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(without predicate" "assert w/o predicate))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:6:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(an identifier" "assert punctuation))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:7:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(an identifier" "assert number))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:8:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(missing" "assert w/o answer))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(without predicate" "test w/o predicate))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:13:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(an identifier" "test punctuation))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:16:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(an identifier" "test number))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:23:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(not valid in" "bad syntax))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_assert3_7:
  build:
    cflags: ' -A abc=def -A abc(ghi) "-Aabc = jkl" -A abc=mno -A -abc=mno -Wno-deprecated -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/assert3.c'
    sources:
      binary: assert3.i
  group: GRPSERIAL
  info:
    extraopts:
      - '"-A abc=def -A abc\(ghi\) \"-Aabc = jkl\" -A abc=mno -A -abc=mno -Wno-deprecated"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_builtins_8:
  build:
    cflags: '  -traditional-cpp -I./gcc.dg/cpp/trad/'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/builtins.c'
    sources:
      binary: ./builtins.exe
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_cmdlne-C2_10:
  build:
    cflags: ' -C -traditional-cpp -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/cmdlne-C2.c'
    sources:
      binary: cmdlne-C2.i
  group: GRPSERIAL
  info:
    extraopts:
      - '"-C -traditional-cpp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_cmdlne-C_9:
  build:
    cflags: ' -C -traditional-cpp -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/cmdlne-C.c'
    sources:
      binary: cmdlne-C.i
  group: GRPSERIAL
  info:
    extraopts:
      - '"-C -traditional-cpp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_cmdlne-dD_11:
  build:
    cflags: ' -dD -traditional-cpp -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/cmdlne-dD.c'
    sources:
      binary: cmdlne-dD.i
  group: GRPSERIAL
  info:
    extraopts:
      - '"-dD -traditional-cpp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_cmdlne-dM_12:
  build:
    cflags: ' -dM -traditional-cpp -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/cmdlne-dM.c'
    sources:
      binary: cmdlne-dM.i
  group: GRPSERIAL
  info:
    extraopts:
      - '"-dM -traditional-cpp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_comment-2_13:
  build:
    cflags: ' -traditional-cpp -Wcomments -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/comment-2.c'
    sources:
      binary: comment-2.i
  group: GRPSERIAL
  info:
    extraopts:
      - '"-traditional-cpp -Wcomments"'
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:7:)[^
        ]*([0-9]+: warning:[^
        ]*(within comment))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: warning:[^
        ]*(2: within comment))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_comment-3_14:
  build:
    cflags: '  -traditional-cpp -I./gcc.dg/cpp/trad/ -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/comment-3.c'
    sources:
      binary: comment-3.i
  group: GRPSERIAL
  info:
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:6:)[^
        ]*([0-9]+: warning:[^
        ]*(extra tokens))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_comment_15:
  build:
    cflags: '  -traditional-cpp -I./gcc.dg/cpp/trad/ -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/comment.c'
    sources:
      binary: comment.i
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:5:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(unterminated comment))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_define_16:
  build:
    cflags: ' -traditional-cpp -DDEFINE1DEFINE -DDEFINE2DEFIN= -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/define.c'
    sources:
      binary: define.i
  group: GRPSERIAL
  info:
    extraopts:
      - '"-traditional-cpp -DDEFINE1DEFINE -DDEFINE2DEFIN="'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_defined_17:
  build:
    cflags: '  -traditional-cpp -I./gcc.dg/cpp/trad/ -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/defined.c'
    sources:
      binary: defined.i
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:19:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(defined))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_directive_18:
  build:
    cflags: '  -traditional-cpp -I./gcc.dg/cpp/trad/ -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/directive.c'
    sources:
      binary: directive.i
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(bad))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:15:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_escaped-eof_19:
  build:
    cflags: '  -traditional-cpp -I./gcc.dg/cpp/trad/ -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/escaped-eof.c'
    sources:
      binary: escaped-eof.i
  group: GRPSERIAL
  info:
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:5:)[^
        ]*([0-9]+: warning:[^
        ]*(backslash-new" "escaped EOF warning))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_escaped-nl_20:
  build:
    cflags: '  -traditional-cpp -I./gcc.dg/cpp/trad/ -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/escaped-nl.c'
    sources:
      binary: escaped-nl.i
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_funlike-2_21:
  build:
    cflags: '  -traditional-cpp -I./gcc.dg/cpp/trad/ -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/funlike-2.c'
    sources:
      binary: funlike-2.i
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_funlike-3_22:
  build:
    cflags: '  -traditional-cpp -I./gcc.dg/cpp/trad/ -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/funlike-3.c'
    sources:
      binary: funlike-3.i
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:8:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(unterminated" "unterminated macro in directive))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:12:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(unterminated" "unterminated macro))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_funlike-4_23:
  build:
    cflags: '  -traditional-cpp -I./gcc.dg/cpp/trad/'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/funlike-4.c'
    sources:
      binary: ./funlike-4.exe
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_funlike-5_24:
  build:
    cflags: ' -traditional-cpp -E -dD -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/funlike-5.c'
    sources:
      binary: funlike-5.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-traditional-cpp -E -dD"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_funlike_25:
  build:
    cflags: '  -traditional-cpp -I./gcc.dg/cpp/trad/ -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/funlike.c'
    sources:
      binary: funlike.i
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:24:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(missing binary" "macro-expanded parenthesis))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_hash_26:
  build:
    cflags: '  -traditional-cpp -I./gcc.dg/cpp/trad/ -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/hash.c'
    sources:
      binary: hash.i
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_include_27:
  build:
    cflags: '  -traditional-cpp -I./gcc.dg/cpp/trad/ -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/include.c'
    sources:
      binary: include.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_literals-1_28:
  build:
    cflags: '  -traditional-cpp -I./gcc.dg/cpp/trad/'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/literals-1.c'
    sources:
      binary: ./literals-1.exe
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_literals-2_29:
  build:
    cflags: '  -traditional-cpp -I./gcc.dg/cpp/trad/ -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/literals-2.c'
    sources:
      binary: literals-2.i
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:6:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(not valid" "bad charconst))[^
        ]*
        ?)+
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:5:)[^
        ]*([0-9]+: warning:[^
        ]*(missing terminating" "bad charconst))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_maccom1_30:
  build:
    cflags: ' -CC -traditional-cpp -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/maccom1.c'
    sources:
      binary: maccom1.i
  group: GRPSERIAL
  info:
    extraopts:
      - '"-CC -traditional-cpp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_maccom2_31:
  build:
    cflags: ' -CC -traditional-cpp -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/maccom2.c'
    sources:
      binary: maccom2.i
  group: GRPSERIAL
  info:
    extraopts:
      - '"-CC -traditional-cpp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_maccom3_32:
  build:
    cflags: ' -CC -traditional-cpp -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/maccom3.c'
    sources:
      binary: maccom3.i
  group: GRPSERIAL
  info:
    extraopts:
      - '"-CC -traditional-cpp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_maccom4_33:
  build:
    cflags: ' -CC -traditional-cpp -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/maccom4.c'
    sources:
      binary: maccom4.i
  group: GRPSERIAL
  info:
    extraopts:
      - '"-CC -traditional-cpp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_maccom6_34:
  build:
    cflags: ' -CC -traditional-cpp -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/maccom6.c'
    sources:
      binary: maccom6.i
  group: GRPSERIAL
  info:
    extraopts:
      - '"-CC -traditional-cpp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_macro_35:
  build:
    cflags: '  -traditional-cpp -I./gcc.dg/cpp/trad/ -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/macro.c'
    sources:
      binary: macro.i
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:7:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(macro parameter list))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_macroargs_36:
  build:
    cflags: '  -traditional-cpp -I./gcc.dg/cpp/trad/'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/macroargs.c'
    sources:
      binary: ./macroargs.exe
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_mi1_37:
  build:
    cflags: ' -H -traditional-cpp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/mi1.c'
    sources:
      binary: mi1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-H -traditional-cpp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_mi2_38:
  build:
    cflags: '  -traditional-cpp -I./gcc.dg/cpp/trad/ -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/mi2.c'
    sources:
      binary: mi2.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_mi3_39:
  build:
    cflags: '  -traditional-cpp -I./gcc.dg/cpp/trad/ -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/mi3.c'
    sources:
      binary: mi3.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_mi4_40:
  build:
    cflags: '  -traditional-cpp -I./gcc.dg/cpp/trad/ -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/mi4.c'
    sources:
      binary: mi4.i
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_mi5_41:
  build:
    cflags: ' -H -C -traditional-cpp -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/mi5.c'
    sources:
      binary: mi5.i
  group: GRPSERIAL
  info:
    extraopts:
      - '"-H -C -traditional-cpp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_mi6_42:
  build:
    cflags: '  -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/mi6.c'
    sources:
      binary: mi6.s
  group: GRPSERIAL
  info:
    extraopts:
      - '""'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_mi7_43:
  build:
    cflags: ' -H -traditional-cpp -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/mi7.c'
    sources:
      binary: mi7.i
  group: GRPSERIAL
  info:
    extraopts:
      - '"-H -traditional-cpp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_null-drctv_44:
  build:
    cflags: '  -traditional-cpp -I./gcc.dg/cpp/trad/ -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/null-drctv.c'
    sources:
      binary: null-drctv.i
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:6:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(OK))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_num-sign_45:
  build:
    cflags: '  -traditional-cpp -I./gcc.dg/cpp/trad/ -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/num-sign.c'
    sources:
      binary: num-sign.i
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_paste_46:
  build:
    cflags: '  -traditional-cpp -I./gcc.dg/cpp/trad/ -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/paste.c'
    sources:
      binary: paste.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr65238-3_47:
  build:
    cflags: ' -traditional-cpp'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/pr65238-3.c'
    sources:
      binary: ./pr65238-3.exe
  group: GRPSERIAL
  info:
    extraopts:
      - '"-traditional-cpp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr65238-4_48:
  build:
    cflags: ' -traditional-cpp -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/pr65238-4.c'
    sources:
      binary: pr65238-4.i
  group: GRPSERIAL
  info:
    extraopts:
      - '"-traditional-cpp"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:14:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(unterminated argument list invoking macro .__has_attribute." "" {target "*-*-*))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:15:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(#if with no expression" "" {target "*-*-*))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:16:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(unterminated argument list invoking macro .__has_attribute." "" {target "*-*-*))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:17:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(macro .__has_attribute. passed 2 arguments, but takes just 1" "" {target "*-*-*))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:18:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(missing ... in expression" "" {target "*-*-*))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:19:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(macro .__has_attribute. requires an identifier" "" {target "*-*-*))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_quote_49:
  build:
    cflags: '  -traditional-cpp -I./gcc.dg/cpp/trad/ -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/quote.c'
    sources:
      binary: quote.i
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_recurse-1_50:
  build:
    cflags: '  -traditional-cpp -I./gcc.dg/cpp/trad/ -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/recurse-1.c'
    sources:
      binary: recurse-1.i
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:7:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(detected recursion))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(detected recursion))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_recurse-2_51:
  build:
    cflags: '  -traditional-cpp -I./gcc.dg/cpp/trad/ -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/recurse-2.c'
    sources:
      binary: recurse-2.i
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:7:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(detected recursion))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:13:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(detected recursion))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:16:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(detected recursion))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_recurse-3_52:
  build:
    cflags: '  -traditional-cpp -I./gcc.dg/cpp/trad/ -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/recurse-3.c'
    sources:
      binary: recurse-3.i
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_redef1_53:
  build:
    cflags: '  -traditional-cpp -I./gcc.dg/cpp/trad/ -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/redef1.c'
    sources:
      binary: redef1.i
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_redef2_54:
  build:
    cflags: '  -traditional-cpp -I./gcc.dg/cpp/trad/ -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/redef2.c'
    sources:
      binary: redef2.i
  group: GRPSERIAL
  info:
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:6:)[^
        ]*([0-9]+: warning:[^
        ]*(redefined" "foo redefined))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: warning:[^
        ]*(redefined" "foo redefined 2))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:14:)[^
        ]*([0-9]+: warning:[^
        ]*(redefined" "foo redefined))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:17:)[^
        ]*([0-9]+: warning:[^
        ]*(redefined" "quux redefined))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:20:)[^
        ]*([0-9]+: warning:[^
        ]*(redefined" "bar redefined))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:23:)[^
        ]*([0-9]+: warning:[^
        ]*(redefined" "bat redefined))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:26:)[^
        ]*([0-9]+: warning:[^
        ]*(redefined" "baz redefined))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:29:)[^
        ]*([0-9]+: warning:[^
        ]*(redefined" "f redefined))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:32:)[^
        ]*([0-9]+: warning:[^
        ]*(redefined" "g redefined))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_strify_55:
  build:
    cflags: '  -traditional-cpp -I./gcc.dg/cpp/trad/'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/strify.c'
    sources:
      binary: ./strify.exe
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_uchar_56:
  build:
    cflags: ' -funsigned-char -fsigned-char -traditional-cpp -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/uchar.c'
    sources:
      binary: uchar.i
  group: GRPSERIAL
  info:
    extraopts:
      - '"-funsigned-char -fsigned-char -traditional-cpp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_xwin1_57:
  build:
    cflags: '  -traditional-cpp -I./gcc.dg/cpp/trad/ -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/cpp/trad/xwin1.c'
    sources:
      binary: xwin1.i
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
