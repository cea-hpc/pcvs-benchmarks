test_Wbad-function-cast-1_1:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/Wbad-function-cast-1.c'
    sources: {binary: Wbad-function-cast-1.s, cflags: "-std=gnu99 -Wbad-function-cast\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L126: {expect: true, expr: '(^|\n)([^\n]+(:126:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''short _Fract\''")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Fract\''")[^\n]*\n?)+'}
      L128: {expect: true, expr: '(^|\n)([^\n]+(:128:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''long _Fract\''")[^\n]*\n?)+'}
      L129: {expect: true, expr: '(^|\n)([^\n]+(:129:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''long long _Fract\''")[^\n]*\n?)+'}
      L130: {expect: true, expr: '(^|\n)([^\n]+(:130:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''unsigned short
          _Fract\''")[^\n]*\n?)+'}
      L131: {expect: true, expr: '(^|\n)([^\n]+(:131:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''unsigned _Fract\''")[^\n]*\n?)+'}
      L132: {expect: true, expr: '(^|\n)([^\n]+(:132:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''unsigned long
          _Fract\''")[^\n]*\n?)+'}
      L133: {expect: true, expr: '(^|\n)([^\n]+(:133:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''unsigned long
          long _Fract\''")[^\n]*\n?)+'}
      L134: {expect: true, expr: '(^|\n)([^\n]+(:134:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat short
          _Fract\''")[^\n]*\n?)+'}
      L135: {expect: true, expr: '(^|\n)([^\n]+(:135:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat _Fract\''")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat long _Fract\''")[^\n]*\n?)+'}
      L137: {expect: true, expr: '(^|\n)([^\n]+(:137:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat long long
          _Fract\''")[^\n]*\n?)+'}
      L138: {expect: true, expr: '(^|\n)([^\n]+(:138:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat unsigned
          short _Fract\''")[^\n]*\n?)+'}
      L139: {expect: true, expr: '(^|\n)([^\n]+(:139:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat unsigned
          _Fract\''")[^\n]*\n?)+'}
      L140: {expect: true, expr: '(^|\n)([^\n]+(:140:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat unsigned
          long _Fract\''")[^\n]*\n?)+'}
      L141: {expect: true, expr: '(^|\n)([^\n]+(:141:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat unsigned
          long long _Fract\''")[^\n]*\n?)+'}
      L142: {expect: true, expr: '(^|\n)([^\n]+(:142:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''short _Accum\''")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Accum\''")[^\n]*\n?)+'}
      L144: {expect: true, expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''long _Accum\''")[^\n]*\n?)+'}
      L145: {expect: true, expr: '(^|\n)([^\n]+(:145:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''long long _Accum\''")[^\n]*\n?)+'}
      L146: {expect: true, expr: '(^|\n)([^\n]+(:146:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''unsigned short
          _Accum\''")[^\n]*\n?)+'}
      L147: {expect: true, expr: '(^|\n)([^\n]+(:147:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''unsigned _Accum\''")[^\n]*\n?)+'}
      L148: {expect: true, expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''unsigned long
          _Accum\''")[^\n]*\n?)+'}
      L149: {expect: true, expr: '(^|\n)([^\n]+(:149:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''unsigned long
          long _Accum\''")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat short
          _Accum\''")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat _Accum\''")[^\n]*\n?)+'}
      L152: {expect: true, expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat long _Accum\''")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat long long
          _Accum\''")[^\n]*\n?)+'}
      L154: {expect: true, expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat unsigned
          short _Accum\''")[^\n]*\n?)+'}
      L155: {expect: true, expr: '(^|\n)([^\n]+(:155:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat unsigned
          _Accum\''")[^\n]*\n?)+'}
      L156: {expect: true, expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat unsigned
          long _Accum\''")[^\n]*\n?)+'}
      L157: {expect: true, expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat unsigned
          long long _Accum\''")[^\n]*\n?)+'}
      L159: {expect: true, expr: '(^|\n)([^\n]+(:159:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''short _Fract\''")[^\n]*\n?)+'}
      L160: {expect: true, expr: '(^|\n)([^\n]+(:160:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Fract\''")[^\n]*\n?)+'}
      L161: {expect: true, expr: '(^|\n)([^\n]+(:161:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''long _Fract\''")[^\n]*\n?)+'}
      L162: {expect: true, expr: '(^|\n)([^\n]+(:162:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''long long
          _Fract\''")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+(:163:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''unsigned short
          _Fract\''")[^\n]*\n?)+'}
      L164: {expect: true, expr: '(^|\n)([^\n]+(:164:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''unsigned _Fract\''")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''unsigned long
          _Fract\''")[^\n]*\n?)+'}
      L166: {expect: true, expr: '(^|\n)([^\n]+(:166:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''unsigned long
          long _Fract\''")[^\n]*\n?)+'}
      L167: {expect: true, expr: '(^|\n)([^\n]+(:167:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat short
          _Fract\''")[^\n]*\n?)+'}
      L168: {expect: true, expr: '(^|\n)([^\n]+(:168:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat _Fract\''")[^\n]*\n?)+'}
      L169: {expect: true, expr: '(^|\n)([^\n]+(:169:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat long
          _Fract\''")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+(:170:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat long
          long _Fract\''")[^\n]*\n?)+'}
      L171: {expect: true, expr: '(^|\n)([^\n]+(:171:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat unsigned
          short _Fract\''")[^\n]*\n?)+'}
      L172: {expect: true, expr: '(^|\n)([^\n]+(:172:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat unsigned
          _Fract\''")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat unsigned
          long _Fract\''")[^\n]*\n?)+'}
      L174: {expect: true, expr: '(^|\n)([^\n]+(:174:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat unsigned
          long long _Fract\''")[^\n]*\n?)+'}
      L175: {expect: true, expr: '(^|\n)([^\n]+(:175:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''short _Accum\''")[^\n]*\n?)+'}
      L176: {expect: true, expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Accum\''")[^\n]*\n?)+'}
      L177: {expect: true, expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''long _Accum\''")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''long long
          _Accum\''")[^\n]*\n?)+'}
      L179: {expect: true, expr: '(^|\n)([^\n]+(:179:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''unsigned short
          _Accum\''")[^\n]*\n?)+'}
      L180: {expect: true, expr: '(^|\n)([^\n]+(:180:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''unsigned _Accum\''")[^\n]*\n?)+'}
      L181: {expect: true, expr: '(^|\n)([^\n]+(:181:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''unsigned long
          _Accum\''")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+(:182:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''unsigned long
          long _Accum\''")[^\n]*\n?)+'}
      L183: {expect: true, expr: '(^|\n)([^\n]+(:183:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat short
          _Accum\''")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+(:184:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat _Accum\''")[^\n]*\n?)+'}
      L185: {expect: true, expr: '(^|\n)([^\n]+(:185:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat long
          _Accum\''")[^\n]*\n?)+'}
      L186: {expect: true, expr: '(^|\n)([^\n]+(:186:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat long
          long _Accum\''")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat unsigned
          short _Accum\''")[^\n]*\n?)+'}
      L188: {expect: true, expr: '(^|\n)([^\n]+(:188:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat unsigned
          _Accum\''")[^\n]*\n?)+'}
      L189: {expect: true, expr: '(^|\n)([^\n]+(:189:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat unsigned
          long _Accum\''")[^\n]*\n?)+'}
      L190: {expect: true, expr: '(^|\n)([^\n]+(:190:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat unsigned
          long long _Accum\''")[^\n]*\n?)+'}
      L192: {expect: true, expr: '(^|\n)([^\n]+(:192:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''short
          _Fract\''")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+(:193:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Fract\''")[^\n]*\n?)+'}
      L194: {expect: true, expr: '(^|\n)([^\n]+(:194:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''long _Fract\''")[^\n]*\n?)+'}
      L195: {expect: true, expr: '(^|\n)([^\n]+(:195:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''long long
          _Fract\''")[^\n]*\n?)+'}
      L196: {expect: true, expr: '(^|\n)([^\n]+(:196:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''unsigned
          short _Fract\''")[^\n]*\n?)+'}
      L197: {expect: true, expr: '(^|\n)([^\n]+(:197:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''unsigned
          _Fract\''")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+(:198:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''unsigned
          long _Fract\''")[^\n]*\n?)+'}
      L199: {expect: true, expr: '(^|\n)([^\n]+(:199:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''unsigned
          long long _Fract\''")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+(:200:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat short
          _Fract\''")[^\n]*\n?)+'}
      L201: {expect: true, expr: '(^|\n)([^\n]+(:201:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat _Fract\''")[^\n]*\n?)+'}
      L202: {expect: true, expr: '(^|\n)([^\n]+(:202:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat long
          _Fract\''")[^\n]*\n?)+'}
      L203: {expect: true, expr: '(^|\n)([^\n]+(:203:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat long
          long _Fract\''")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+(:204:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat unsigned
          short _Fract\''")[^\n]*\n?)+'}
      L205: {expect: true, expr: '(^|\n)([^\n]+(:205:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat unsigned
          _Fract\''")[^\n]*\n?)+'}
      L206: {expect: true, expr: '(^|\n)([^\n]+(:206:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat unsigned
          long _Fract\''")[^\n]*\n?)+'}
      L207: {expect: true, expr: '(^|\n)([^\n]+(:207:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat unsigned
          long long _Fract\''")[^\n]*\n?)+'}
      L208: {expect: true, expr: '(^|\n)([^\n]+(:208:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''short
          _Accum\''")[^\n]*\n?)+'}
      L209: {expect: true, expr: '(^|\n)([^\n]+(:209:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Accum\''")[^\n]*\n?)+'}
      L210: {expect: true, expr: '(^|\n)([^\n]+(:210:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''long _Accum\''")[^\n]*\n?)+'}
      L211: {expect: true, expr: '(^|\n)([^\n]+(:211:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''long long
          _Accum\''")[^\n]*\n?)+'}
      L212: {expect: true, expr: '(^|\n)([^\n]+(:212:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''unsigned
          short _Accum\''")[^\n]*\n?)+'}
      L213: {expect: true, expr: '(^|\n)([^\n]+(:213:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''unsigned
          _Accum\''")[^\n]*\n?)+'}
      L214: {expect: true, expr: '(^|\n)([^\n]+(:214:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''unsigned
          long _Accum\''")[^\n]*\n?)+'}
      L215: {expect: true, expr: '(^|\n)([^\n]+(:215:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''unsigned
          long long _Accum\''")[^\n]*\n?)+'}
      L216: {expect: true, expr: '(^|\n)([^\n]+(:216:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat short
          _Accum\''")[^\n]*\n?)+'}
      L217: {expect: true, expr: '(^|\n)([^\n]+(:217:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat _Accum\''")[^\n]*\n?)+'}
      L218: {expect: true, expr: '(^|\n)([^\n]+(:218:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat long
          _Accum\''")[^\n]*\n?)+'}
      L219: {expect: true, expr: '(^|\n)([^\n]+(:219:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat long
          long _Accum\''")[^\n]*\n?)+'}
      L220: {expect: true, expr: '(^|\n)([^\n]+(:220:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat unsigned
          short _Accum\''")[^\n]*\n?)+'}
      L221: {expect: true, expr: '(^|\n)([^\n]+(:221:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat unsigned
          _Accum\''")[^\n]*\n?)+'}
      L222: {expect: true, expr: '(^|\n)([^\n]+(:222:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat unsigned
          long _Accum\''")[^\n]*\n?)+'}
      L223: {expect: true, expr: '(^|\n)([^\n]+(:223:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat unsigned
          long long _Accum\''")[^\n]*\n?)+'}
      L225: {expect: true, expr: '(^|\n)([^\n]+(:225:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''short
          _Fract\''")[^\n]*\n?)+'}
      L226: {expect: true, expr: '(^|\n)([^\n]+(:226:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Fract\''")[^\n]*\n?)+'}
      L227: {expect: true, expr: '(^|\n)([^\n]+(:227:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''long
          _Fract\''")[^\n]*\n?)+'}
      L228: {expect: true, expr: '(^|\n)([^\n]+(:228:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''long
          long _Fract\''")[^\n]*\n?)+'}
      L229: {expect: true, expr: '(^|\n)([^\n]+(:229:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''unsigned
          short _Fract\''")[^\n]*\n?)+'}
      L230: {expect: true, expr: '(^|\n)([^\n]+(:230:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''unsigned
          _Fract\''")[^\n]*\n?)+'}
      L231: {expect: true, expr: '(^|\n)([^\n]+(:231:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''unsigned
          long _Fract\''")[^\n]*\n?)+'}
      L232: {expect: true, expr: '(^|\n)([^\n]+(:232:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''unsigned
          long long _Fract\''")[^\n]*\n?)+'}
      L233: {expect: true, expr: '(^|\n)([^\n]+(:233:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          short _Fract\''")[^\n]*\n?)+'}
      L234: {expect: true, expr: '(^|\n)([^\n]+(:234:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          _Fract\''")[^\n]*\n?)+'}
      L235: {expect: true, expr: '(^|\n)([^\n]+(:235:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          long _Fract\''")[^\n]*\n?)+'}
      L236: {expect: true, expr: '(^|\n)([^\n]+(:236:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          long long _Fract\''")[^\n]*\n?)+'}
      L237: {expect: true, expr: '(^|\n)([^\n]+(:237:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          unsigned short _Fract\''")[^\n]*\n?)+'}
      L238: {expect: true, expr: '(^|\n)([^\n]+(:238:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          unsigned _Fract\''")[^\n]*\n?)+'}
      L239: {expect: true, expr: '(^|\n)([^\n]+(:239:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          unsigned long _Fract\''")[^\n]*\n?)+'}
      L240: {expect: true, expr: '(^|\n)([^\n]+(:240:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          unsigned long long _Fract\''")[^\n]*\n?)+'}
      L241: {expect: true, expr: '(^|\n)([^\n]+(:241:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''short
          _Accum\''")[^\n]*\n?)+'}
      L242: {expect: true, expr: '(^|\n)([^\n]+(:242:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Accum\''")[^\n]*\n?)+'}
      L243: {expect: true, expr: '(^|\n)([^\n]+(:243:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''long
          _Accum\''")[^\n]*\n?)+'}
      L244: {expect: true, expr: '(^|\n)([^\n]+(:244:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''long
          long _Accum\''")[^\n]*\n?)+'}
      L245: {expect: true, expr: '(^|\n)([^\n]+(:245:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''unsigned
          short _Accum\''")[^\n]*\n?)+'}
      L246: {expect: true, expr: '(^|\n)([^\n]+(:246:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''unsigned
          _Accum\''")[^\n]*\n?)+'}
      L247: {expect: true, expr: '(^|\n)([^\n]+(:247:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''unsigned
          long _Accum\''")[^\n]*\n?)+'}
      L248: {expect: true, expr: '(^|\n)([^\n]+(:248:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''unsigned
          long long _Accum\''")[^\n]*\n?)+'}
      L249: {expect: true, expr: '(^|\n)([^\n]+(:249:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          short _Accum\''")[^\n]*\n?)+'}
      L250: {expect: true, expr: '(^|\n)([^\n]+(:250:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          _Accum\''")[^\n]*\n?)+'}
      L251: {expect: true, expr: '(^|\n)([^\n]+(:251:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          long _Accum\''")[^\n]*\n?)+'}
      L252: {expect: true, expr: '(^|\n)([^\n]+(:252:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          long long _Accum\''")[^\n]*\n?)+'}
      L253: {expect: true, expr: '(^|\n)([^\n]+(:253:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          unsigned short _Accum\''")[^\n]*\n?)+'}
      L254: {expect: true, expr: '(^|\n)([^\n]+(:254:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          unsigned _Accum\''")[^\n]*\n?)+'}
      L255: {expect: true, expr: '(^|\n)([^\n]+(:255:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          unsigned long _Accum\''")[^\n]*\n?)+'}
      L256: {expect: true, expr: '(^|\n)([^\n]+(:256:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          unsigned long long _Accum\''")[^\n]*\n?)+'}
      L258: {expect: true, expr: '(^|\n)([^\n]+(:258:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''short _Fract\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L259: {expect: true, expr: '(^|\n)([^\n]+(:259:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Fract\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L260: {expect: true, expr: '(^|\n)([^\n]+(:260:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long _Fract\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L261: {expect: true, expr: '(^|\n)([^\n]+(:261:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long long _Fract\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L262: {expect: true, expr: '(^|\n)([^\n]+(:262:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned short _Fract\'' to non-matching type
          \''int\''")[^\n]*\n?)+'}
      L263: {expect: true, expr: '(^|\n)([^\n]+(:263:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned _Fract\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L264: {expect: true, expr: '(^|\n)([^\n]+(:264:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned long _Fract\'' to non-matching type
          \''int\''")[^\n]*\n?)+'}
      L265: {expect: true, expr: '(^|\n)([^\n]+(:265:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned long long _Fract\'' to non-matching
          type \''int\''")[^\n]*\n?)+'}
      L266: {expect: true, expr: '(^|\n)([^\n]+(:266:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat short _Fract\'' to non-matching type
          \''int\''")[^\n]*\n?)+'}
      L267: {expect: true, expr: '(^|\n)([^\n]+(:267:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat _Fract\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L268: {expect: true, expr: '(^|\n)([^\n]+(:268:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat long _Fract\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L269: {expect: true, expr: '(^|\n)([^\n]+(:269:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat long long _Fract\'' to non-matching type
          \''int\''")[^\n]*\n?)+'}
      L270: {expect: true, expr: '(^|\n)([^\n]+(:270:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned short _Fract\'' to non-matching
          type \''int\''")[^\n]*\n?)+'}
      L271: {expect: true, expr: '(^|\n)([^\n]+(:271:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned _Fract\'' to non-matching type
          \''int\''")[^\n]*\n?)+'}
      L272: {expect: true, expr: '(^|\n)([^\n]+(:272:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned long _Fract\'' to non-matching
          type \''int\''")[^\n]*\n?)+'}
      L273: {expect: true, expr: '(^|\n)([^\n]+(:273:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned long long _Fract\'' to non-matching
          type \''int\''")[^\n]*\n?)+'}
      L274: {expect: true, expr: '(^|\n)([^\n]+(:274:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''short _Accum\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L275: {expect: true, expr: '(^|\n)([^\n]+(:275:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Accum\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L276: {expect: true, expr: '(^|\n)([^\n]+(:276:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long _Accum\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L277: {expect: true, expr: '(^|\n)([^\n]+(:277:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long long _Accum\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L278: {expect: true, expr: '(^|\n)([^\n]+(:278:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned short _Accum\'' to non-matching type
          \''int\''")[^\n]*\n?)+'}
      L279: {expect: true, expr: '(^|\n)([^\n]+(:279:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned _Accum\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L280: {expect: true, expr: '(^|\n)([^\n]+(:280:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned long _Accum\'' to non-matching type
          \''int\''")[^\n]*\n?)+'}
      L281: {expect: true, expr: '(^|\n)([^\n]+(:281:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned long long _Accum\'' to non-matching
          type \''int\''")[^\n]*\n?)+'}
      L282: {expect: true, expr: '(^|\n)([^\n]+(:282:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat short _Accum\'' to non-matching type
          \''int\''")[^\n]*\n?)+'}
      L283: {expect: true, expr: '(^|\n)([^\n]+(:283:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat _Accum\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L284: {expect: true, expr: '(^|\n)([^\n]+(:284:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat long _Accum\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L285: {expect: true, expr: '(^|\n)([^\n]+(:285:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat long long _Accum\'' to non-matching type
          \''int\''")[^\n]*\n?)+'}
      L286: {expect: true, expr: '(^|\n)([^\n]+(:286:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned short _Accum\'' to non-matching
          type \''int\''")[^\n]*\n?)+'}
      L287: {expect: true, expr: '(^|\n)([^\n]+(:287:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned _Accum\'' to non-matching type
          \''int\''")[^\n]*\n?)+'}
      L288: {expect: true, expr: '(^|\n)([^\n]+(:288:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned long _Accum\'' to non-matching
          type \''int\''")[^\n]*\n?)+'}
      L289: {expect: true, expr: '(^|\n)([^\n]+(:289:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned long long _Accum\'' to non-matching
          type \''int\''")[^\n]*\n?)+'}
      L291: {expect: true, expr: '(^|\n)([^\n]+(:291:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''short _Fract\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L292: {expect: true, expr: '(^|\n)([^\n]+(:292:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Fract\'' to non-matching type \''long int\''")[^\n]*\n?)+'}
      L293: {expect: true, expr: '(^|\n)([^\n]+(:293:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long _Fract\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L294: {expect: true, expr: '(^|\n)([^\n]+(:294:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long long _Fract\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L295: {expect: true, expr: '(^|\n)([^\n]+(:295:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned short _Fract\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L296: {expect: true, expr: '(^|\n)([^\n]+(:296:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned _Fract\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L297: {expect: true, expr: '(^|\n)([^\n]+(:297:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned long _Fract\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L298: {expect: true, expr: '(^|\n)([^\n]+(:298:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned long long _Fract\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L299: {expect: true, expr: '(^|\n)([^\n]+(:299:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat short _Fract\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L300: {expect: true, expr: '(^|\n)([^\n]+(:300:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat _Fract\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L301: {expect: true, expr: '(^|\n)([^\n]+(:301:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat long _Fract\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L302: {expect: true, expr: '(^|\n)([^\n]+(:302:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat long long _Fract\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L303: {expect: true, expr: '(^|\n)([^\n]+(:303:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned short _Fract\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L304: {expect: true, expr: '(^|\n)([^\n]+(:304:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned _Fract\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L305: {expect: true, expr: '(^|\n)([^\n]+(:305:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned long _Fract\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L306: {expect: true, expr: '(^|\n)([^\n]+(:306:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned long long _Fract\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L307: {expect: true, expr: '(^|\n)([^\n]+(:307:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''short _Accum\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L308: {expect: true, expr: '(^|\n)([^\n]+(:308:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Accum\'' to non-matching type \''long int\''")[^\n]*\n?)+'}
      L309: {expect: true, expr: '(^|\n)([^\n]+(:309:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long _Accum\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L310: {expect: true, expr: '(^|\n)([^\n]+(:310:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long long _Accum\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L311: {expect: true, expr: '(^|\n)([^\n]+(:311:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned short _Accum\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L312: {expect: true, expr: '(^|\n)([^\n]+(:312:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned _Accum\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L313: {expect: true, expr: '(^|\n)([^\n]+(:313:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned long _Accum\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L314: {expect: true, expr: '(^|\n)([^\n]+(:314:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned long long _Accum\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L315: {expect: true, expr: '(^|\n)([^\n]+(:315:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat short _Accum\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L316: {expect: true, expr: '(^|\n)([^\n]+(:316:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat _Accum\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L317: {expect: true, expr: '(^|\n)([^\n]+(:317:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat long _Accum\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L318: {expect: true, expr: '(^|\n)([^\n]+(:318:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat long long _Accum\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L319: {expect: true, expr: '(^|\n)([^\n]+(:319:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned short _Accum\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L320: {expect: true, expr: '(^|\n)([^\n]+(:320:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned _Accum\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L321: {expect: true, expr: '(^|\n)([^\n]+(:321:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned long _Accum\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L322: {expect: true, expr: '(^|\n)([^\n]+(:322:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned long long _Accum\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L324: {expect: true, expr: '(^|\n)([^\n]+(:324:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''short _Fract\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L325: {expect: true, expr: '(^|\n)([^\n]+(:325:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Fract\'' to non-matching type \''long int\''")[^\n]*\n?)+'}
      L326: {expect: true, expr: '(^|\n)([^\n]+(:326:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long _Fract\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L327: {expect: true, expr: '(^|\n)([^\n]+(:327:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long long _Fract\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L328: {expect: true, expr: '(^|\n)([^\n]+(:328:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned short _Fract\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L329: {expect: true, expr: '(^|\n)([^\n]+(:329:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned _Fract\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L330: {expect: true, expr: '(^|\n)([^\n]+(:330:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned long _Fract\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L331: {expect: true, expr: '(^|\n)([^\n]+(:331:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned long long _Fract\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L332: {expect: true, expr: '(^|\n)([^\n]+(:332:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat short _Fract\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L333: {expect: true, expr: '(^|\n)([^\n]+(:333:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat _Fract\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L334: {expect: true, expr: '(^|\n)([^\n]+(:334:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat long _Fract\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L335: {expect: true, expr: '(^|\n)([^\n]+(:335:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat long long _Fract\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L336: {expect: true, expr: '(^|\n)([^\n]+(:336:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned short _Fract\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L337: {expect: true, expr: '(^|\n)([^\n]+(:337:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned _Fract\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L338: {expect: true, expr: '(^|\n)([^\n]+(:338:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned long _Fract\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L339: {expect: true, expr: '(^|\n)([^\n]+(:339:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned long long _Fract\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L340: {expect: true, expr: '(^|\n)([^\n]+(:340:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''short _Accum\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L341: {expect: true, expr: '(^|\n)([^\n]+(:341:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Accum\'' to non-matching type \''long int\''")[^\n]*\n?)+'}
      L342: {expect: true, expr: '(^|\n)([^\n]+(:342:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long _Accum\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L343: {expect: true, expr: '(^|\n)([^\n]+(:343:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long long _Accum\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L344: {expect: true, expr: '(^|\n)([^\n]+(:344:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned short _Accum\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L345: {expect: true, expr: '(^|\n)([^\n]+(:345:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned _Accum\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L346: {expect: true, expr: '(^|\n)([^\n]+(:346:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned long _Accum\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L347: {expect: true, expr: '(^|\n)([^\n]+(:347:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned long long _Accum\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L348: {expect: true, expr: '(^|\n)([^\n]+(:348:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat short _Accum\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L349: {expect: true, expr: '(^|\n)([^\n]+(:349:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat _Accum\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L350: {expect: true, expr: '(^|\n)([^\n]+(:350:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat long _Accum\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L351: {expect: true, expr: '(^|\n)([^\n]+(:351:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat long long _Accum\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L352: {expect: true, expr: '(^|\n)([^\n]+(:352:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned short _Accum\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L353: {expect: true, expr: '(^|\n)([^\n]+(:353:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned _Accum\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L354: {expect: true, expr: '(^|\n)([^\n]+(:354:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned long _Accum\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L355: {expect: true, expr: '(^|\n)([^\n]+(:355:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned long long _Accum\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
test_Wbad-function-cast-1_115:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/Wbad-function-cast-1.c'
    sources: {binary: Wbad-function-cast-1.s, cflags: "-std=gnu99 -Wbad-function-cast\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L126: {expect: true, expr: '(^|\n)([^\n]+(:126:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''short _Fract\''")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Fract\''")[^\n]*\n?)+'}
      L128: {expect: true, expr: '(^|\n)([^\n]+(:128:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''long _Fract\''")[^\n]*\n?)+'}
      L129: {expect: true, expr: '(^|\n)([^\n]+(:129:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''long long _Fract\''")[^\n]*\n?)+'}
      L130: {expect: true, expr: '(^|\n)([^\n]+(:130:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''unsigned short
          _Fract\''")[^\n]*\n?)+'}
      L131: {expect: true, expr: '(^|\n)([^\n]+(:131:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''unsigned _Fract\''")[^\n]*\n?)+'}
      L132: {expect: true, expr: '(^|\n)([^\n]+(:132:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''unsigned long
          _Fract\''")[^\n]*\n?)+'}
      L133: {expect: true, expr: '(^|\n)([^\n]+(:133:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''unsigned long
          long _Fract\''")[^\n]*\n?)+'}
      L134: {expect: true, expr: '(^|\n)([^\n]+(:134:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat short
          _Fract\''")[^\n]*\n?)+'}
      L135: {expect: true, expr: '(^|\n)([^\n]+(:135:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat _Fract\''")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat long _Fract\''")[^\n]*\n?)+'}
      L137: {expect: true, expr: '(^|\n)([^\n]+(:137:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat long long
          _Fract\''")[^\n]*\n?)+'}
      L138: {expect: true, expr: '(^|\n)([^\n]+(:138:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat unsigned
          short _Fract\''")[^\n]*\n?)+'}
      L139: {expect: true, expr: '(^|\n)([^\n]+(:139:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat unsigned
          _Fract\''")[^\n]*\n?)+'}
      L140: {expect: true, expr: '(^|\n)([^\n]+(:140:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat unsigned
          long _Fract\''")[^\n]*\n?)+'}
      L141: {expect: true, expr: '(^|\n)([^\n]+(:141:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat unsigned
          long long _Fract\''")[^\n]*\n?)+'}
      L142: {expect: true, expr: '(^|\n)([^\n]+(:142:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''short _Accum\''")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Accum\''")[^\n]*\n?)+'}
      L144: {expect: true, expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''long _Accum\''")[^\n]*\n?)+'}
      L145: {expect: true, expr: '(^|\n)([^\n]+(:145:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''long long _Accum\''")[^\n]*\n?)+'}
      L146: {expect: true, expr: '(^|\n)([^\n]+(:146:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''unsigned short
          _Accum\''")[^\n]*\n?)+'}
      L147: {expect: true, expr: '(^|\n)([^\n]+(:147:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''unsigned _Accum\''")[^\n]*\n?)+'}
      L148: {expect: true, expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''unsigned long
          _Accum\''")[^\n]*\n?)+'}
      L149: {expect: true, expr: '(^|\n)([^\n]+(:149:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''unsigned long
          long _Accum\''")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat short
          _Accum\''")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat _Accum\''")[^\n]*\n?)+'}
      L152: {expect: true, expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat long _Accum\''")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat long long
          _Accum\''")[^\n]*\n?)+'}
      L154: {expect: true, expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat unsigned
          short _Accum\''")[^\n]*\n?)+'}
      L155: {expect: true, expr: '(^|\n)([^\n]+(:155:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat unsigned
          _Accum\''")[^\n]*\n?)+'}
      L156: {expect: true, expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat unsigned
          long _Accum\''")[^\n]*\n?)+'}
      L157: {expect: true, expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat unsigned
          long long _Accum\''")[^\n]*\n?)+'}
      L159: {expect: true, expr: '(^|\n)([^\n]+(:159:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''short _Fract\''")[^\n]*\n?)+'}
      L160: {expect: true, expr: '(^|\n)([^\n]+(:160:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Fract\''")[^\n]*\n?)+'}
      L161: {expect: true, expr: '(^|\n)([^\n]+(:161:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''long _Fract\''")[^\n]*\n?)+'}
      L162: {expect: true, expr: '(^|\n)([^\n]+(:162:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''long long
          _Fract\''")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+(:163:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''unsigned short
          _Fract\''")[^\n]*\n?)+'}
      L164: {expect: true, expr: '(^|\n)([^\n]+(:164:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''unsigned _Fract\''")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''unsigned long
          _Fract\''")[^\n]*\n?)+'}
      L166: {expect: true, expr: '(^|\n)([^\n]+(:166:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''unsigned long
          long _Fract\''")[^\n]*\n?)+'}
      L167: {expect: true, expr: '(^|\n)([^\n]+(:167:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat short
          _Fract\''")[^\n]*\n?)+'}
      L168: {expect: true, expr: '(^|\n)([^\n]+(:168:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat _Fract\''")[^\n]*\n?)+'}
      L169: {expect: true, expr: '(^|\n)([^\n]+(:169:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat long
          _Fract\''")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+(:170:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat long
          long _Fract\''")[^\n]*\n?)+'}
      L171: {expect: true, expr: '(^|\n)([^\n]+(:171:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat unsigned
          short _Fract\''")[^\n]*\n?)+'}
      L172: {expect: true, expr: '(^|\n)([^\n]+(:172:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat unsigned
          _Fract\''")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat unsigned
          long _Fract\''")[^\n]*\n?)+'}
      L174: {expect: true, expr: '(^|\n)([^\n]+(:174:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat unsigned
          long long _Fract\''")[^\n]*\n?)+'}
      L175: {expect: true, expr: '(^|\n)([^\n]+(:175:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''short _Accum\''")[^\n]*\n?)+'}
      L176: {expect: true, expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Accum\''")[^\n]*\n?)+'}
      L177: {expect: true, expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''long _Accum\''")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''long long
          _Accum\''")[^\n]*\n?)+'}
      L179: {expect: true, expr: '(^|\n)([^\n]+(:179:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''unsigned short
          _Accum\''")[^\n]*\n?)+'}
      L180: {expect: true, expr: '(^|\n)([^\n]+(:180:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''unsigned _Accum\''")[^\n]*\n?)+'}
      L181: {expect: true, expr: '(^|\n)([^\n]+(:181:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''unsigned long
          _Accum\''")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+(:182:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''unsigned long
          long _Accum\''")[^\n]*\n?)+'}
      L183: {expect: true, expr: '(^|\n)([^\n]+(:183:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat short
          _Accum\''")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+(:184:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat _Accum\''")[^\n]*\n?)+'}
      L185: {expect: true, expr: '(^|\n)([^\n]+(:185:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat long
          _Accum\''")[^\n]*\n?)+'}
      L186: {expect: true, expr: '(^|\n)([^\n]+(:186:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat long
          long _Accum\''")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat unsigned
          short _Accum\''")[^\n]*\n?)+'}
      L188: {expect: true, expr: '(^|\n)([^\n]+(:188:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat unsigned
          _Accum\''")[^\n]*\n?)+'}
      L189: {expect: true, expr: '(^|\n)([^\n]+(:189:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat unsigned
          long _Accum\''")[^\n]*\n?)+'}
      L190: {expect: true, expr: '(^|\n)([^\n]+(:190:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat unsigned
          long long _Accum\''")[^\n]*\n?)+'}
      L192: {expect: true, expr: '(^|\n)([^\n]+(:192:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''short
          _Fract\''")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+(:193:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Fract\''")[^\n]*\n?)+'}
      L194: {expect: true, expr: '(^|\n)([^\n]+(:194:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''long _Fract\''")[^\n]*\n?)+'}
      L195: {expect: true, expr: '(^|\n)([^\n]+(:195:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''long long
          _Fract\''")[^\n]*\n?)+'}
      L196: {expect: true, expr: '(^|\n)([^\n]+(:196:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''unsigned
          short _Fract\''")[^\n]*\n?)+'}
      L197: {expect: true, expr: '(^|\n)([^\n]+(:197:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''unsigned
          _Fract\''")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+(:198:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''unsigned
          long _Fract\''")[^\n]*\n?)+'}
      L199: {expect: true, expr: '(^|\n)([^\n]+(:199:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''unsigned
          long long _Fract\''")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+(:200:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat short
          _Fract\''")[^\n]*\n?)+'}
      L201: {expect: true, expr: '(^|\n)([^\n]+(:201:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat _Fract\''")[^\n]*\n?)+'}
      L202: {expect: true, expr: '(^|\n)([^\n]+(:202:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat long
          _Fract\''")[^\n]*\n?)+'}
      L203: {expect: true, expr: '(^|\n)([^\n]+(:203:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat long
          long _Fract\''")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+(:204:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat unsigned
          short _Fract\''")[^\n]*\n?)+'}
      L205: {expect: true, expr: '(^|\n)([^\n]+(:205:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat unsigned
          _Fract\''")[^\n]*\n?)+'}
      L206: {expect: true, expr: '(^|\n)([^\n]+(:206:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat unsigned
          long _Fract\''")[^\n]*\n?)+'}
      L207: {expect: true, expr: '(^|\n)([^\n]+(:207:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat unsigned
          long long _Fract\''")[^\n]*\n?)+'}
      L208: {expect: true, expr: '(^|\n)([^\n]+(:208:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''short
          _Accum\''")[^\n]*\n?)+'}
      L209: {expect: true, expr: '(^|\n)([^\n]+(:209:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Accum\''")[^\n]*\n?)+'}
      L210: {expect: true, expr: '(^|\n)([^\n]+(:210:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''long _Accum\''")[^\n]*\n?)+'}
      L211: {expect: true, expr: '(^|\n)([^\n]+(:211:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''long long
          _Accum\''")[^\n]*\n?)+'}
      L212: {expect: true, expr: '(^|\n)([^\n]+(:212:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''unsigned
          short _Accum\''")[^\n]*\n?)+'}
      L213: {expect: true, expr: '(^|\n)([^\n]+(:213:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''unsigned
          _Accum\''")[^\n]*\n?)+'}
      L214: {expect: true, expr: '(^|\n)([^\n]+(:214:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''unsigned
          long _Accum\''")[^\n]*\n?)+'}
      L215: {expect: true, expr: '(^|\n)([^\n]+(:215:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''unsigned
          long long _Accum\''")[^\n]*\n?)+'}
      L216: {expect: true, expr: '(^|\n)([^\n]+(:216:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat short
          _Accum\''")[^\n]*\n?)+'}
      L217: {expect: true, expr: '(^|\n)([^\n]+(:217:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat _Accum\''")[^\n]*\n?)+'}
      L218: {expect: true, expr: '(^|\n)([^\n]+(:218:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat long
          _Accum\''")[^\n]*\n?)+'}
      L219: {expect: true, expr: '(^|\n)([^\n]+(:219:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat long
          long _Accum\''")[^\n]*\n?)+'}
      L220: {expect: true, expr: '(^|\n)([^\n]+(:220:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat unsigned
          short _Accum\''")[^\n]*\n?)+'}
      L221: {expect: true, expr: '(^|\n)([^\n]+(:221:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat unsigned
          _Accum\''")[^\n]*\n?)+'}
      L222: {expect: true, expr: '(^|\n)([^\n]+(:222:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat unsigned
          long _Accum\''")[^\n]*\n?)+'}
      L223: {expect: true, expr: '(^|\n)([^\n]+(:223:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat unsigned
          long long _Accum\''")[^\n]*\n?)+'}
      L225: {expect: true, expr: '(^|\n)([^\n]+(:225:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''short
          _Fract\''")[^\n]*\n?)+'}
      L226: {expect: true, expr: '(^|\n)([^\n]+(:226:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Fract\''")[^\n]*\n?)+'}
      L227: {expect: true, expr: '(^|\n)([^\n]+(:227:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''long
          _Fract\''")[^\n]*\n?)+'}
      L228: {expect: true, expr: '(^|\n)([^\n]+(:228:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''long
          long _Fract\''")[^\n]*\n?)+'}
      L229: {expect: true, expr: '(^|\n)([^\n]+(:229:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''unsigned
          short _Fract\''")[^\n]*\n?)+'}
      L230: {expect: true, expr: '(^|\n)([^\n]+(:230:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''unsigned
          _Fract\''")[^\n]*\n?)+'}
      L231: {expect: true, expr: '(^|\n)([^\n]+(:231:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''unsigned
          long _Fract\''")[^\n]*\n?)+'}
      L232: {expect: true, expr: '(^|\n)([^\n]+(:232:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''unsigned
          long long _Fract\''")[^\n]*\n?)+'}
      L233: {expect: true, expr: '(^|\n)([^\n]+(:233:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          short _Fract\''")[^\n]*\n?)+'}
      L234: {expect: true, expr: '(^|\n)([^\n]+(:234:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          _Fract\''")[^\n]*\n?)+'}
      L235: {expect: true, expr: '(^|\n)([^\n]+(:235:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          long _Fract\''")[^\n]*\n?)+'}
      L236: {expect: true, expr: '(^|\n)([^\n]+(:236:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          long long _Fract\''")[^\n]*\n?)+'}
      L237: {expect: true, expr: '(^|\n)([^\n]+(:237:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          unsigned short _Fract\''")[^\n]*\n?)+'}
      L238: {expect: true, expr: '(^|\n)([^\n]+(:238:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          unsigned _Fract\''")[^\n]*\n?)+'}
      L239: {expect: true, expr: '(^|\n)([^\n]+(:239:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          unsigned long _Fract\''")[^\n]*\n?)+'}
      L240: {expect: true, expr: '(^|\n)([^\n]+(:240:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          unsigned long long _Fract\''")[^\n]*\n?)+'}
      L241: {expect: true, expr: '(^|\n)([^\n]+(:241:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''short
          _Accum\''")[^\n]*\n?)+'}
      L242: {expect: true, expr: '(^|\n)([^\n]+(:242:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Accum\''")[^\n]*\n?)+'}
      L243: {expect: true, expr: '(^|\n)([^\n]+(:243:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''long
          _Accum\''")[^\n]*\n?)+'}
      L244: {expect: true, expr: '(^|\n)([^\n]+(:244:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''long
          long _Accum\''")[^\n]*\n?)+'}
      L245: {expect: true, expr: '(^|\n)([^\n]+(:245:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''unsigned
          short _Accum\''")[^\n]*\n?)+'}
      L246: {expect: true, expr: '(^|\n)([^\n]+(:246:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''unsigned
          _Accum\''")[^\n]*\n?)+'}
      L247: {expect: true, expr: '(^|\n)([^\n]+(:247:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''unsigned
          long _Accum\''")[^\n]*\n?)+'}
      L248: {expect: true, expr: '(^|\n)([^\n]+(:248:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''unsigned
          long long _Accum\''")[^\n]*\n?)+'}
      L249: {expect: true, expr: '(^|\n)([^\n]+(:249:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          short _Accum\''")[^\n]*\n?)+'}
      L250: {expect: true, expr: '(^|\n)([^\n]+(:250:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          _Accum\''")[^\n]*\n?)+'}
      L251: {expect: true, expr: '(^|\n)([^\n]+(:251:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          long _Accum\''")[^\n]*\n?)+'}
      L252: {expect: true, expr: '(^|\n)([^\n]+(:252:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          long long _Accum\''")[^\n]*\n?)+'}
      L253: {expect: true, expr: '(^|\n)([^\n]+(:253:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          unsigned short _Accum\''")[^\n]*\n?)+'}
      L254: {expect: true, expr: '(^|\n)([^\n]+(:254:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          unsigned _Accum\''")[^\n]*\n?)+'}
      L255: {expect: true, expr: '(^|\n)([^\n]+(:255:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          unsigned long _Accum\''")[^\n]*\n?)+'}
      L256: {expect: true, expr: '(^|\n)([^\n]+(:256:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          unsigned long long _Accum\''")[^\n]*\n?)+'}
      L258: {expect: true, expr: '(^|\n)([^\n]+(:258:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''short _Fract\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L259: {expect: true, expr: '(^|\n)([^\n]+(:259:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Fract\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L260: {expect: true, expr: '(^|\n)([^\n]+(:260:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long _Fract\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L261: {expect: true, expr: '(^|\n)([^\n]+(:261:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long long _Fract\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L262: {expect: true, expr: '(^|\n)([^\n]+(:262:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned short _Fract\'' to non-matching type
          \''int\''")[^\n]*\n?)+'}
      L263: {expect: true, expr: '(^|\n)([^\n]+(:263:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned _Fract\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L264: {expect: true, expr: '(^|\n)([^\n]+(:264:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned long _Fract\'' to non-matching type
          \''int\''")[^\n]*\n?)+'}
      L265: {expect: true, expr: '(^|\n)([^\n]+(:265:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned long long _Fract\'' to non-matching
          type \''int\''")[^\n]*\n?)+'}
      L266: {expect: true, expr: '(^|\n)([^\n]+(:266:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat short _Fract\'' to non-matching type
          \''int\''")[^\n]*\n?)+'}
      L267: {expect: true, expr: '(^|\n)([^\n]+(:267:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat _Fract\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L268: {expect: true, expr: '(^|\n)([^\n]+(:268:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat long _Fract\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L269: {expect: true, expr: '(^|\n)([^\n]+(:269:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat long long _Fract\'' to non-matching type
          \''int\''")[^\n]*\n?)+'}
      L270: {expect: true, expr: '(^|\n)([^\n]+(:270:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned short _Fract\'' to non-matching
          type \''int\''")[^\n]*\n?)+'}
      L271: {expect: true, expr: '(^|\n)([^\n]+(:271:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned _Fract\'' to non-matching type
          \''int\''")[^\n]*\n?)+'}
      L272: {expect: true, expr: '(^|\n)([^\n]+(:272:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned long _Fract\'' to non-matching
          type \''int\''")[^\n]*\n?)+'}
      L273: {expect: true, expr: '(^|\n)([^\n]+(:273:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned long long _Fract\'' to non-matching
          type \''int\''")[^\n]*\n?)+'}
      L274: {expect: true, expr: '(^|\n)([^\n]+(:274:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''short _Accum\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L275: {expect: true, expr: '(^|\n)([^\n]+(:275:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Accum\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L276: {expect: true, expr: '(^|\n)([^\n]+(:276:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long _Accum\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L277: {expect: true, expr: '(^|\n)([^\n]+(:277:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long long _Accum\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L278: {expect: true, expr: '(^|\n)([^\n]+(:278:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned short _Accum\'' to non-matching type
          \''int\''")[^\n]*\n?)+'}
      L279: {expect: true, expr: '(^|\n)([^\n]+(:279:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned _Accum\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L280: {expect: true, expr: '(^|\n)([^\n]+(:280:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned long _Accum\'' to non-matching type
          \''int\''")[^\n]*\n?)+'}
      L281: {expect: true, expr: '(^|\n)([^\n]+(:281:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned long long _Accum\'' to non-matching
          type \''int\''")[^\n]*\n?)+'}
      L282: {expect: true, expr: '(^|\n)([^\n]+(:282:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat short _Accum\'' to non-matching type
          \''int\''")[^\n]*\n?)+'}
      L283: {expect: true, expr: '(^|\n)([^\n]+(:283:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat _Accum\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L284: {expect: true, expr: '(^|\n)([^\n]+(:284:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat long _Accum\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L285: {expect: true, expr: '(^|\n)([^\n]+(:285:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat long long _Accum\'' to non-matching type
          \''int\''")[^\n]*\n?)+'}
      L286: {expect: true, expr: '(^|\n)([^\n]+(:286:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned short _Accum\'' to non-matching
          type \''int\''")[^\n]*\n?)+'}
      L287: {expect: true, expr: '(^|\n)([^\n]+(:287:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned _Accum\'' to non-matching type
          \''int\''")[^\n]*\n?)+'}
      L288: {expect: true, expr: '(^|\n)([^\n]+(:288:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned long _Accum\'' to non-matching
          type \''int\''")[^\n]*\n?)+'}
      L289: {expect: true, expr: '(^|\n)([^\n]+(:289:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned long long _Accum\'' to non-matching
          type \''int\''")[^\n]*\n?)+'}
      L291: {expect: true, expr: '(^|\n)([^\n]+(:291:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''short _Fract\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L292: {expect: true, expr: '(^|\n)([^\n]+(:292:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Fract\'' to non-matching type \''long int\''")[^\n]*\n?)+'}
      L293: {expect: true, expr: '(^|\n)([^\n]+(:293:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long _Fract\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L294: {expect: true, expr: '(^|\n)([^\n]+(:294:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long long _Fract\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L295: {expect: true, expr: '(^|\n)([^\n]+(:295:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned short _Fract\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L296: {expect: true, expr: '(^|\n)([^\n]+(:296:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned _Fract\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L297: {expect: true, expr: '(^|\n)([^\n]+(:297:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned long _Fract\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L298: {expect: true, expr: '(^|\n)([^\n]+(:298:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned long long _Fract\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L299: {expect: true, expr: '(^|\n)([^\n]+(:299:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat short _Fract\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L300: {expect: true, expr: '(^|\n)([^\n]+(:300:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat _Fract\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L301: {expect: true, expr: '(^|\n)([^\n]+(:301:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat long _Fract\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L302: {expect: true, expr: '(^|\n)([^\n]+(:302:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat long long _Fract\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L303: {expect: true, expr: '(^|\n)([^\n]+(:303:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned short _Fract\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L304: {expect: true, expr: '(^|\n)([^\n]+(:304:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned _Fract\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L305: {expect: true, expr: '(^|\n)([^\n]+(:305:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned long _Fract\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L306: {expect: true, expr: '(^|\n)([^\n]+(:306:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned long long _Fract\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L307: {expect: true, expr: '(^|\n)([^\n]+(:307:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''short _Accum\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L308: {expect: true, expr: '(^|\n)([^\n]+(:308:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Accum\'' to non-matching type \''long int\''")[^\n]*\n?)+'}
      L309: {expect: true, expr: '(^|\n)([^\n]+(:309:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long _Accum\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L310: {expect: true, expr: '(^|\n)([^\n]+(:310:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long long _Accum\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L311: {expect: true, expr: '(^|\n)([^\n]+(:311:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned short _Accum\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L312: {expect: true, expr: '(^|\n)([^\n]+(:312:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned _Accum\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L313: {expect: true, expr: '(^|\n)([^\n]+(:313:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned long _Accum\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L314: {expect: true, expr: '(^|\n)([^\n]+(:314:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned long long _Accum\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L315: {expect: true, expr: '(^|\n)([^\n]+(:315:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat short _Accum\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L316: {expect: true, expr: '(^|\n)([^\n]+(:316:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat _Accum\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L317: {expect: true, expr: '(^|\n)([^\n]+(:317:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat long _Accum\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L318: {expect: true, expr: '(^|\n)([^\n]+(:318:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat long long _Accum\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L319: {expect: true, expr: '(^|\n)([^\n]+(:319:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned short _Accum\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L320: {expect: true, expr: '(^|\n)([^\n]+(:320:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned _Accum\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L321: {expect: true, expr: '(^|\n)([^\n]+(:321:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned long _Accum\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L322: {expect: true, expr: '(^|\n)([^\n]+(:322:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned long long _Accum\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L324: {expect: true, expr: '(^|\n)([^\n]+(:324:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''short _Fract\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L325: {expect: true, expr: '(^|\n)([^\n]+(:325:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Fract\'' to non-matching type \''long int\''")[^\n]*\n?)+'}
      L326: {expect: true, expr: '(^|\n)([^\n]+(:326:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long _Fract\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L327: {expect: true, expr: '(^|\n)([^\n]+(:327:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long long _Fract\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L328: {expect: true, expr: '(^|\n)([^\n]+(:328:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned short _Fract\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L329: {expect: true, expr: '(^|\n)([^\n]+(:329:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned _Fract\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L330: {expect: true, expr: '(^|\n)([^\n]+(:330:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned long _Fract\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L331: {expect: true, expr: '(^|\n)([^\n]+(:331:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned long long _Fract\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L332: {expect: true, expr: '(^|\n)([^\n]+(:332:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat short _Fract\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L333: {expect: true, expr: '(^|\n)([^\n]+(:333:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat _Fract\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L334: {expect: true, expr: '(^|\n)([^\n]+(:334:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat long _Fract\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L335: {expect: true, expr: '(^|\n)([^\n]+(:335:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat long long _Fract\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L336: {expect: true, expr: '(^|\n)([^\n]+(:336:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned short _Fract\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L337: {expect: true, expr: '(^|\n)([^\n]+(:337:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned _Fract\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L338: {expect: true, expr: '(^|\n)([^\n]+(:338:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned long _Fract\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L339: {expect: true, expr: '(^|\n)([^\n]+(:339:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned long long _Fract\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L340: {expect: true, expr: '(^|\n)([^\n]+(:340:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''short _Accum\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L341: {expect: true, expr: '(^|\n)([^\n]+(:341:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Accum\'' to non-matching type \''long int\''")[^\n]*\n?)+'}
      L342: {expect: true, expr: '(^|\n)([^\n]+(:342:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long _Accum\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L343: {expect: true, expr: '(^|\n)([^\n]+(:343:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long long _Accum\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L344: {expect: true, expr: '(^|\n)([^\n]+(:344:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned short _Accum\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L345: {expect: true, expr: '(^|\n)([^\n]+(:345:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned _Accum\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L346: {expect: true, expr: '(^|\n)([^\n]+(:346:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned long _Accum\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L347: {expect: true, expr: '(^|\n)([^\n]+(:347:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned long long _Accum\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L348: {expect: true, expr: '(^|\n)([^\n]+(:348:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat short _Accum\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L349: {expect: true, expr: '(^|\n)([^\n]+(:349:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat _Accum\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L350: {expect: true, expr: '(^|\n)([^\n]+(:350:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat long _Accum\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L351: {expect: true, expr: '(^|\n)([^\n]+(:351:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat long long _Accum\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L352: {expect: true, expr: '(^|\n)([^\n]+(:352:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned short _Accum\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L353: {expect: true, expr: '(^|\n)([^\n]+(:353:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned _Accum\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L354: {expect: true, expr: '(^|\n)([^\n]+(:354:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned long _Accum\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L355: {expect: true, expr: '(^|\n)([^\n]+(:355:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned long long _Accum\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
test_Wbad-function-cast-1_58:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/Wbad-function-cast-1.c'
    sources: {binary: Wbad-function-cast-1.s, cflags: "-std=gnu99 -Wbad-function-cast\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L126: {expect: true, expr: '(^|\n)([^\n]+(:126:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''short _Fract\''")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Fract\''")[^\n]*\n?)+'}
      L128: {expect: true, expr: '(^|\n)([^\n]+(:128:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''long _Fract\''")[^\n]*\n?)+'}
      L129: {expect: true, expr: '(^|\n)([^\n]+(:129:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''long long _Fract\''")[^\n]*\n?)+'}
      L130: {expect: true, expr: '(^|\n)([^\n]+(:130:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''unsigned short
          _Fract\''")[^\n]*\n?)+'}
      L131: {expect: true, expr: '(^|\n)([^\n]+(:131:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''unsigned _Fract\''")[^\n]*\n?)+'}
      L132: {expect: true, expr: '(^|\n)([^\n]+(:132:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''unsigned long
          _Fract\''")[^\n]*\n?)+'}
      L133: {expect: true, expr: '(^|\n)([^\n]+(:133:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''unsigned long
          long _Fract\''")[^\n]*\n?)+'}
      L134: {expect: true, expr: '(^|\n)([^\n]+(:134:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat short
          _Fract\''")[^\n]*\n?)+'}
      L135: {expect: true, expr: '(^|\n)([^\n]+(:135:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat _Fract\''")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat long _Fract\''")[^\n]*\n?)+'}
      L137: {expect: true, expr: '(^|\n)([^\n]+(:137:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat long long
          _Fract\''")[^\n]*\n?)+'}
      L138: {expect: true, expr: '(^|\n)([^\n]+(:138:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat unsigned
          short _Fract\''")[^\n]*\n?)+'}
      L139: {expect: true, expr: '(^|\n)([^\n]+(:139:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat unsigned
          _Fract\''")[^\n]*\n?)+'}
      L140: {expect: true, expr: '(^|\n)([^\n]+(:140:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat unsigned
          long _Fract\''")[^\n]*\n?)+'}
      L141: {expect: true, expr: '(^|\n)([^\n]+(:141:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat unsigned
          long long _Fract\''")[^\n]*\n?)+'}
      L142: {expect: true, expr: '(^|\n)([^\n]+(:142:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''short _Accum\''")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Accum\''")[^\n]*\n?)+'}
      L144: {expect: true, expr: '(^|\n)([^\n]+(:144:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''long _Accum\''")[^\n]*\n?)+'}
      L145: {expect: true, expr: '(^|\n)([^\n]+(:145:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''long long _Accum\''")[^\n]*\n?)+'}
      L146: {expect: true, expr: '(^|\n)([^\n]+(:146:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''unsigned short
          _Accum\''")[^\n]*\n?)+'}
      L147: {expect: true, expr: '(^|\n)([^\n]+(:147:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''unsigned _Accum\''")[^\n]*\n?)+'}
      L148: {expect: true, expr: '(^|\n)([^\n]+(:148:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''unsigned long
          _Accum\''")[^\n]*\n?)+'}
      L149: {expect: true, expr: '(^|\n)([^\n]+(:149:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''unsigned long
          long _Accum\''")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat short
          _Accum\''")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat _Accum\''")[^\n]*\n?)+'}
      L152: {expect: true, expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat long _Accum\''")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat long long
          _Accum\''")[^\n]*\n?)+'}
      L154: {expect: true, expr: '(^|\n)([^\n]+(:154:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat unsigned
          short _Accum\''")[^\n]*\n?)+'}
      L155: {expect: true, expr: '(^|\n)([^\n]+(:155:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat unsigned
          _Accum\''")[^\n]*\n?)+'}
      L156: {expect: true, expr: '(^|\n)([^\n]+(:156:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat unsigned
          long _Accum\''")[^\n]*\n?)+'}
      L157: {expect: true, expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''_Sat unsigned
          long long _Accum\''")[^\n]*\n?)+'}
      L159: {expect: true, expr: '(^|\n)([^\n]+(:159:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''short _Fract\''")[^\n]*\n?)+'}
      L160: {expect: true, expr: '(^|\n)([^\n]+(:160:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Fract\''")[^\n]*\n?)+'}
      L161: {expect: true, expr: '(^|\n)([^\n]+(:161:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''long _Fract\''")[^\n]*\n?)+'}
      L162: {expect: true, expr: '(^|\n)([^\n]+(:162:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''long long
          _Fract\''")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+(:163:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''unsigned short
          _Fract\''")[^\n]*\n?)+'}
      L164: {expect: true, expr: '(^|\n)([^\n]+(:164:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''unsigned _Fract\''")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''unsigned long
          _Fract\''")[^\n]*\n?)+'}
      L166: {expect: true, expr: '(^|\n)([^\n]+(:166:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''unsigned long
          long _Fract\''")[^\n]*\n?)+'}
      L167: {expect: true, expr: '(^|\n)([^\n]+(:167:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat short
          _Fract\''")[^\n]*\n?)+'}
      L168: {expect: true, expr: '(^|\n)([^\n]+(:168:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat _Fract\''")[^\n]*\n?)+'}
      L169: {expect: true, expr: '(^|\n)([^\n]+(:169:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat long
          _Fract\''")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+(:170:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat long
          long _Fract\''")[^\n]*\n?)+'}
      L171: {expect: true, expr: '(^|\n)([^\n]+(:171:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat unsigned
          short _Fract\''")[^\n]*\n?)+'}
      L172: {expect: true, expr: '(^|\n)([^\n]+(:172:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat unsigned
          _Fract\''")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat unsigned
          long _Fract\''")[^\n]*\n?)+'}
      L174: {expect: true, expr: '(^|\n)([^\n]+(:174:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat unsigned
          long long _Fract\''")[^\n]*\n?)+'}
      L175: {expect: true, expr: '(^|\n)([^\n]+(:175:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''short _Accum\''")[^\n]*\n?)+'}
      L176: {expect: true, expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Accum\''")[^\n]*\n?)+'}
      L177: {expect: true, expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''long _Accum\''")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''long long
          _Accum\''")[^\n]*\n?)+'}
      L179: {expect: true, expr: '(^|\n)([^\n]+(:179:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''unsigned short
          _Accum\''")[^\n]*\n?)+'}
      L180: {expect: true, expr: '(^|\n)([^\n]+(:180:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''unsigned _Accum\''")[^\n]*\n?)+'}
      L181: {expect: true, expr: '(^|\n)([^\n]+(:181:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''unsigned long
          _Accum\''")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+(:182:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''unsigned long
          long _Accum\''")[^\n]*\n?)+'}
      L183: {expect: true, expr: '(^|\n)([^\n]+(:183:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat short
          _Accum\''")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+(:184:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat _Accum\''")[^\n]*\n?)+'}
      L185: {expect: true, expr: '(^|\n)([^\n]+(:185:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat long
          _Accum\''")[^\n]*\n?)+'}
      L186: {expect: true, expr: '(^|\n)([^\n]+(:186:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat long
          long _Accum\''")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat unsigned
          short _Accum\''")[^\n]*\n?)+'}
      L188: {expect: true, expr: '(^|\n)([^\n]+(:188:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat unsigned
          _Accum\''")[^\n]*\n?)+'}
      L189: {expect: true, expr: '(^|\n)([^\n]+(:189:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat unsigned
          long _Accum\''")[^\n]*\n?)+'}
      L190: {expect: true, expr: '(^|\n)([^\n]+(:190:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''_Sat unsigned
          long long _Accum\''")[^\n]*\n?)+'}
      L192: {expect: true, expr: '(^|\n)([^\n]+(:192:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''short
          _Fract\''")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+(:193:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Fract\''")[^\n]*\n?)+'}
      L194: {expect: true, expr: '(^|\n)([^\n]+(:194:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''long _Fract\''")[^\n]*\n?)+'}
      L195: {expect: true, expr: '(^|\n)([^\n]+(:195:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''long long
          _Fract\''")[^\n]*\n?)+'}
      L196: {expect: true, expr: '(^|\n)([^\n]+(:196:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''unsigned
          short _Fract\''")[^\n]*\n?)+'}
      L197: {expect: true, expr: '(^|\n)([^\n]+(:197:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''unsigned
          _Fract\''")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+(:198:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''unsigned
          long _Fract\''")[^\n]*\n?)+'}
      L199: {expect: true, expr: '(^|\n)([^\n]+(:199:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''unsigned
          long long _Fract\''")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+(:200:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat short
          _Fract\''")[^\n]*\n?)+'}
      L201: {expect: true, expr: '(^|\n)([^\n]+(:201:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat _Fract\''")[^\n]*\n?)+'}
      L202: {expect: true, expr: '(^|\n)([^\n]+(:202:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat long
          _Fract\''")[^\n]*\n?)+'}
      L203: {expect: true, expr: '(^|\n)([^\n]+(:203:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat long
          long _Fract\''")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+(:204:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat unsigned
          short _Fract\''")[^\n]*\n?)+'}
      L205: {expect: true, expr: '(^|\n)([^\n]+(:205:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat unsigned
          _Fract\''")[^\n]*\n?)+'}
      L206: {expect: true, expr: '(^|\n)([^\n]+(:206:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat unsigned
          long _Fract\''")[^\n]*\n?)+'}
      L207: {expect: true, expr: '(^|\n)([^\n]+(:207:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat unsigned
          long long _Fract\''")[^\n]*\n?)+'}
      L208: {expect: true, expr: '(^|\n)([^\n]+(:208:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''short
          _Accum\''")[^\n]*\n?)+'}
      L209: {expect: true, expr: '(^|\n)([^\n]+(:209:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Accum\''")[^\n]*\n?)+'}
      L210: {expect: true, expr: '(^|\n)([^\n]+(:210:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''long _Accum\''")[^\n]*\n?)+'}
      L211: {expect: true, expr: '(^|\n)([^\n]+(:211:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''long long
          _Accum\''")[^\n]*\n?)+'}
      L212: {expect: true, expr: '(^|\n)([^\n]+(:212:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''unsigned
          short _Accum\''")[^\n]*\n?)+'}
      L213: {expect: true, expr: '(^|\n)([^\n]+(:213:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''unsigned
          _Accum\''")[^\n]*\n?)+'}
      L214: {expect: true, expr: '(^|\n)([^\n]+(:214:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''unsigned
          long _Accum\''")[^\n]*\n?)+'}
      L215: {expect: true, expr: '(^|\n)([^\n]+(:215:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''unsigned
          long long _Accum\''")[^\n]*\n?)+'}
      L216: {expect: true, expr: '(^|\n)([^\n]+(:216:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat short
          _Accum\''")[^\n]*\n?)+'}
      L217: {expect: true, expr: '(^|\n)([^\n]+(:217:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat _Accum\''")[^\n]*\n?)+'}
      L218: {expect: true, expr: '(^|\n)([^\n]+(:218:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat long
          _Accum\''")[^\n]*\n?)+'}
      L219: {expect: true, expr: '(^|\n)([^\n]+(:219:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat long
          long _Accum\''")[^\n]*\n?)+'}
      L220: {expect: true, expr: '(^|\n)([^\n]+(:220:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat unsigned
          short _Accum\''")[^\n]*\n?)+'}
      L221: {expect: true, expr: '(^|\n)([^\n]+(:221:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat unsigned
          _Accum\''")[^\n]*\n?)+'}
      L222: {expect: true, expr: '(^|\n)([^\n]+(:222:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat unsigned
          long _Accum\''")[^\n]*\n?)+'}
      L223: {expect: true, expr: '(^|\n)([^\n]+(:223:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Sat unsigned
          long long _Accum\''")[^\n]*\n?)+'}
      L225: {expect: true, expr: '(^|\n)([^\n]+(:225:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''short
          _Fract\''")[^\n]*\n?)+'}
      L226: {expect: true, expr: '(^|\n)([^\n]+(:226:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Fract\''")[^\n]*\n?)+'}
      L227: {expect: true, expr: '(^|\n)([^\n]+(:227:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''long
          _Fract\''")[^\n]*\n?)+'}
      L228: {expect: true, expr: '(^|\n)([^\n]+(:228:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''long
          long _Fract\''")[^\n]*\n?)+'}
      L229: {expect: true, expr: '(^|\n)([^\n]+(:229:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''unsigned
          short _Fract\''")[^\n]*\n?)+'}
      L230: {expect: true, expr: '(^|\n)([^\n]+(:230:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''unsigned
          _Fract\''")[^\n]*\n?)+'}
      L231: {expect: true, expr: '(^|\n)([^\n]+(:231:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''unsigned
          long _Fract\''")[^\n]*\n?)+'}
      L232: {expect: true, expr: '(^|\n)([^\n]+(:232:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''unsigned
          long long _Fract\''")[^\n]*\n?)+'}
      L233: {expect: true, expr: '(^|\n)([^\n]+(:233:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          short _Fract\''")[^\n]*\n?)+'}
      L234: {expect: true, expr: '(^|\n)([^\n]+(:234:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          _Fract\''")[^\n]*\n?)+'}
      L235: {expect: true, expr: '(^|\n)([^\n]+(:235:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          long _Fract\''")[^\n]*\n?)+'}
      L236: {expect: true, expr: '(^|\n)([^\n]+(:236:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          long long _Fract\''")[^\n]*\n?)+'}
      L237: {expect: true, expr: '(^|\n)([^\n]+(:237:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          unsigned short _Fract\''")[^\n]*\n?)+'}
      L238: {expect: true, expr: '(^|\n)([^\n]+(:238:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          unsigned _Fract\''")[^\n]*\n?)+'}
      L239: {expect: true, expr: '(^|\n)([^\n]+(:239:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          unsigned long _Fract\''")[^\n]*\n?)+'}
      L240: {expect: true, expr: '(^|\n)([^\n]+(:240:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          unsigned long long _Fract\''")[^\n]*\n?)+'}
      L241: {expect: true, expr: '(^|\n)([^\n]+(:241:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''short
          _Accum\''")[^\n]*\n?)+'}
      L242: {expect: true, expr: '(^|\n)([^\n]+(:242:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Accum\''")[^\n]*\n?)+'}
      L243: {expect: true, expr: '(^|\n)([^\n]+(:243:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''long
          _Accum\''")[^\n]*\n?)+'}
      L244: {expect: true, expr: '(^|\n)([^\n]+(:244:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''long
          long _Accum\''")[^\n]*\n?)+'}
      L245: {expect: true, expr: '(^|\n)([^\n]+(:245:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''unsigned
          short _Accum\''")[^\n]*\n?)+'}
      L246: {expect: true, expr: '(^|\n)([^\n]+(:246:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''unsigned
          _Accum\''")[^\n]*\n?)+'}
      L247: {expect: true, expr: '(^|\n)([^\n]+(:247:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''unsigned
          long _Accum\''")[^\n]*\n?)+'}
      L248: {expect: true, expr: '(^|\n)([^\n]+(:248:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''unsigned
          long long _Accum\''")[^\n]*\n?)+'}
      L249: {expect: true, expr: '(^|\n)([^\n]+(:249:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          short _Accum\''")[^\n]*\n?)+'}
      L250: {expect: true, expr: '(^|\n)([^\n]+(:250:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          _Accum\''")[^\n]*\n?)+'}
      L251: {expect: true, expr: '(^|\n)([^\n]+(:251:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          long _Accum\''")[^\n]*\n?)+'}
      L252: {expect: true, expr: '(^|\n)([^\n]+(:252:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          long long _Accum\''")[^\n]*\n?)+'}
      L253: {expect: true, expr: '(^|\n)([^\n]+(:253:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          unsigned short _Accum\''")[^\n]*\n?)+'}
      L254: {expect: true, expr: '(^|\n)([^\n]+(:254:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          unsigned _Accum\''")[^\n]*\n?)+'}
      L255: {expect: true, expr: '(^|\n)([^\n]+(:255:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          unsigned long _Accum\''")[^\n]*\n?)+'}
      L256: {expect: true, expr: '(^|\n)([^\n]+(:256:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''_Sat
          unsigned long long _Accum\''")[^\n]*\n?)+'}
      L258: {expect: true, expr: '(^|\n)([^\n]+(:258:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''short _Fract\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L259: {expect: true, expr: '(^|\n)([^\n]+(:259:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Fract\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L260: {expect: true, expr: '(^|\n)([^\n]+(:260:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long _Fract\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L261: {expect: true, expr: '(^|\n)([^\n]+(:261:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long long _Fract\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L262: {expect: true, expr: '(^|\n)([^\n]+(:262:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned short _Fract\'' to non-matching type
          \''int\''")[^\n]*\n?)+'}
      L263: {expect: true, expr: '(^|\n)([^\n]+(:263:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned _Fract\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L264: {expect: true, expr: '(^|\n)([^\n]+(:264:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned long _Fract\'' to non-matching type
          \''int\''")[^\n]*\n?)+'}
      L265: {expect: true, expr: '(^|\n)([^\n]+(:265:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned long long _Fract\'' to non-matching
          type \''int\''")[^\n]*\n?)+'}
      L266: {expect: true, expr: '(^|\n)([^\n]+(:266:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat short _Fract\'' to non-matching type
          \''int\''")[^\n]*\n?)+'}
      L267: {expect: true, expr: '(^|\n)([^\n]+(:267:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat _Fract\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L268: {expect: true, expr: '(^|\n)([^\n]+(:268:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat long _Fract\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L269: {expect: true, expr: '(^|\n)([^\n]+(:269:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat long long _Fract\'' to non-matching type
          \''int\''")[^\n]*\n?)+'}
      L270: {expect: true, expr: '(^|\n)([^\n]+(:270:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned short _Fract\'' to non-matching
          type \''int\''")[^\n]*\n?)+'}
      L271: {expect: true, expr: '(^|\n)([^\n]+(:271:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned _Fract\'' to non-matching type
          \''int\''")[^\n]*\n?)+'}
      L272: {expect: true, expr: '(^|\n)([^\n]+(:272:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned long _Fract\'' to non-matching
          type \''int\''")[^\n]*\n?)+'}
      L273: {expect: true, expr: '(^|\n)([^\n]+(:273:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned long long _Fract\'' to non-matching
          type \''int\''")[^\n]*\n?)+'}
      L274: {expect: true, expr: '(^|\n)([^\n]+(:274:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''short _Accum\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L275: {expect: true, expr: '(^|\n)([^\n]+(:275:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Accum\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L276: {expect: true, expr: '(^|\n)([^\n]+(:276:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long _Accum\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L277: {expect: true, expr: '(^|\n)([^\n]+(:277:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long long _Accum\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L278: {expect: true, expr: '(^|\n)([^\n]+(:278:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned short _Accum\'' to non-matching type
          \''int\''")[^\n]*\n?)+'}
      L279: {expect: true, expr: '(^|\n)([^\n]+(:279:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned _Accum\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L280: {expect: true, expr: '(^|\n)([^\n]+(:280:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned long _Accum\'' to non-matching type
          \''int\''")[^\n]*\n?)+'}
      L281: {expect: true, expr: '(^|\n)([^\n]+(:281:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned long long _Accum\'' to non-matching
          type \''int\''")[^\n]*\n?)+'}
      L282: {expect: true, expr: '(^|\n)([^\n]+(:282:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat short _Accum\'' to non-matching type
          \''int\''")[^\n]*\n?)+'}
      L283: {expect: true, expr: '(^|\n)([^\n]+(:283:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat _Accum\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L284: {expect: true, expr: '(^|\n)([^\n]+(:284:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat long _Accum\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L285: {expect: true, expr: '(^|\n)([^\n]+(:285:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat long long _Accum\'' to non-matching type
          \''int\''")[^\n]*\n?)+'}
      L286: {expect: true, expr: '(^|\n)([^\n]+(:286:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned short _Accum\'' to non-matching
          type \''int\''")[^\n]*\n?)+'}
      L287: {expect: true, expr: '(^|\n)([^\n]+(:287:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned _Accum\'' to non-matching type
          \''int\''")[^\n]*\n?)+'}
      L288: {expect: true, expr: '(^|\n)([^\n]+(:288:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned long _Accum\'' to non-matching
          type \''int\''")[^\n]*\n?)+'}
      L289: {expect: true, expr: '(^|\n)([^\n]+(:289:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned long long _Accum\'' to non-matching
          type \''int\''")[^\n]*\n?)+'}
      L291: {expect: true, expr: '(^|\n)([^\n]+(:291:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''short _Fract\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L292: {expect: true, expr: '(^|\n)([^\n]+(:292:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Fract\'' to non-matching type \''long int\''")[^\n]*\n?)+'}
      L293: {expect: true, expr: '(^|\n)([^\n]+(:293:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long _Fract\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L294: {expect: true, expr: '(^|\n)([^\n]+(:294:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long long _Fract\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L295: {expect: true, expr: '(^|\n)([^\n]+(:295:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned short _Fract\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L296: {expect: true, expr: '(^|\n)([^\n]+(:296:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned _Fract\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L297: {expect: true, expr: '(^|\n)([^\n]+(:297:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned long _Fract\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L298: {expect: true, expr: '(^|\n)([^\n]+(:298:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned long long _Fract\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L299: {expect: true, expr: '(^|\n)([^\n]+(:299:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat short _Fract\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L300: {expect: true, expr: '(^|\n)([^\n]+(:300:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat _Fract\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L301: {expect: true, expr: '(^|\n)([^\n]+(:301:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat long _Fract\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L302: {expect: true, expr: '(^|\n)([^\n]+(:302:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat long long _Fract\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L303: {expect: true, expr: '(^|\n)([^\n]+(:303:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned short _Fract\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L304: {expect: true, expr: '(^|\n)([^\n]+(:304:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned _Fract\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L305: {expect: true, expr: '(^|\n)([^\n]+(:305:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned long _Fract\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L306: {expect: true, expr: '(^|\n)([^\n]+(:306:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned long long _Fract\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L307: {expect: true, expr: '(^|\n)([^\n]+(:307:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''short _Accum\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L308: {expect: true, expr: '(^|\n)([^\n]+(:308:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Accum\'' to non-matching type \''long int\''")[^\n]*\n?)+'}
      L309: {expect: true, expr: '(^|\n)([^\n]+(:309:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long _Accum\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L310: {expect: true, expr: '(^|\n)([^\n]+(:310:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long long _Accum\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L311: {expect: true, expr: '(^|\n)([^\n]+(:311:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned short _Accum\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L312: {expect: true, expr: '(^|\n)([^\n]+(:312:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned _Accum\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L313: {expect: true, expr: '(^|\n)([^\n]+(:313:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned long _Accum\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L314: {expect: true, expr: '(^|\n)([^\n]+(:314:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned long long _Accum\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L315: {expect: true, expr: '(^|\n)([^\n]+(:315:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat short _Accum\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L316: {expect: true, expr: '(^|\n)([^\n]+(:316:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat _Accum\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L317: {expect: true, expr: '(^|\n)([^\n]+(:317:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat long _Accum\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L318: {expect: true, expr: '(^|\n)([^\n]+(:318:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat long long _Accum\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L319: {expect: true, expr: '(^|\n)([^\n]+(:319:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned short _Accum\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L320: {expect: true, expr: '(^|\n)([^\n]+(:320:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned _Accum\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L321: {expect: true, expr: '(^|\n)([^\n]+(:321:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned long _Accum\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L322: {expect: true, expr: '(^|\n)([^\n]+(:322:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned long long _Accum\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L324: {expect: true, expr: '(^|\n)([^\n]+(:324:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''short _Fract\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L325: {expect: true, expr: '(^|\n)([^\n]+(:325:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Fract\'' to non-matching type \''long int\''")[^\n]*\n?)+'}
      L326: {expect: true, expr: '(^|\n)([^\n]+(:326:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long _Fract\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L327: {expect: true, expr: '(^|\n)([^\n]+(:327:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long long _Fract\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L328: {expect: true, expr: '(^|\n)([^\n]+(:328:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned short _Fract\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L329: {expect: true, expr: '(^|\n)([^\n]+(:329:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned _Fract\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L330: {expect: true, expr: '(^|\n)([^\n]+(:330:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned long _Fract\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L331: {expect: true, expr: '(^|\n)([^\n]+(:331:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned long long _Fract\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L332: {expect: true, expr: '(^|\n)([^\n]+(:332:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat short _Fract\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L333: {expect: true, expr: '(^|\n)([^\n]+(:333:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat _Fract\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L334: {expect: true, expr: '(^|\n)([^\n]+(:334:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat long _Fract\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L335: {expect: true, expr: '(^|\n)([^\n]+(:335:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat long long _Fract\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L336: {expect: true, expr: '(^|\n)([^\n]+(:336:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned short _Fract\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L337: {expect: true, expr: '(^|\n)([^\n]+(:337:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned _Fract\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L338: {expect: true, expr: '(^|\n)([^\n]+(:338:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned long _Fract\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L339: {expect: true, expr: '(^|\n)([^\n]+(:339:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned long long _Fract\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L340: {expect: true, expr: '(^|\n)([^\n]+(:340:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''short _Accum\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L341: {expect: true, expr: '(^|\n)([^\n]+(:341:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Accum\'' to non-matching type \''long int\''")[^\n]*\n?)+'}
      L342: {expect: true, expr: '(^|\n)([^\n]+(:342:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long _Accum\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L343: {expect: true, expr: '(^|\n)([^\n]+(:343:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long long _Accum\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L344: {expect: true, expr: '(^|\n)([^\n]+(:344:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned short _Accum\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L345: {expect: true, expr: '(^|\n)([^\n]+(:345:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned _Accum\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L346: {expect: true, expr: '(^|\n)([^\n]+(:346:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned long _Accum\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L347: {expect: true, expr: '(^|\n)([^\n]+(:347:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''unsigned long long _Accum\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L348: {expect: true, expr: '(^|\n)([^\n]+(:348:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat short _Accum\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L349: {expect: true, expr: '(^|\n)([^\n]+(:349:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat _Accum\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L350: {expect: true, expr: '(^|\n)([^\n]+(:350:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat long _Accum\'' to non-matching type \''long
          int\''")[^\n]*\n?)+'}
      L351: {expect: true, expr: '(^|\n)([^\n]+(:351:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat long long _Accum\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L352: {expect: true, expr: '(^|\n)([^\n]+(:352:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned short _Accum\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L353: {expect: true, expr: '(^|\n)([^\n]+(:353:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned _Accum\'' to non-matching type
          \''long int\''")[^\n]*\n?)+'}
      L354: {expect: true, expr: '(^|\n)([^\n]+(:354:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned long _Accum\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
      L355: {expect: true, expr: '(^|\n)([^\n]+(:355:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Sat unsigned long long _Accum\'' to non-matching
          type \''long int\''")[^\n]*\n?)+'}
test_addsub_116:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/addsub.c'
    sources: {binary: addsub.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
test_addsub_2:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/addsub.c'
    sources: {binary: addsub.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
test_addsub_59:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/addsub.c'
    sources: {binary: addsub.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
test_allconv_117:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/allconv.c'
    sources: {binary: allconv.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
test_allconv_3:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/allconv.c'
    sources: {binary: allconv.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
test_allconv_60:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/allconv.c'
    sources: {binary: allconv.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
test_allop-const_118:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/allop-const.c'
    sources: {binary: allop-const.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
test_allop-const_4:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/allop-const.c'
    sources: {binary: allop-const.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
test_allop-const_61:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/allop-const.c'
    sources: {binary: allop-const.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
test_allop_119:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/allop.c'
    sources: {binary: allop.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
test_allop_5:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/allop.c'
    sources: {binary: allop.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
test_allop_62:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/allop.c'
    sources: {binary: allop.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
test_binary_120:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/binary.c'
    sources: {binary: ./binary.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_binary_6:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/binary.c'
    sources: {binary: ./binary.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_binary_63:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/binary.c'
    sources: {binary: ./binary.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_bit-complement_121:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/bit-complement.c'
    sources: {binary: bit-complement.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L69: {expect: true, expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
test_bit-complement_64:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/bit-complement.c'
    sources: {binary: bit-complement.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L69: {expect: true, expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
test_bit-complement_7:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/bit-complement.c'
    sources: {binary: bit-complement.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L69: {expect: true, expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to bit-complement")[^\n]*\n?)+'}
test_call-by-value_122:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/call-by-value.c'
    sources: {binary: ./call-by-value.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_call-by-value_65:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/call-by-value.c'
    sources: {binary: ./call-by-value.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_call-by-value_8:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/call-by-value.c'
    sources: {binary: ./call-by-value.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_cast-bad_123:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/cast-bad.c'
    sources: {binary: cast-bad.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L100: {expect: true, expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L101: {expect: true, expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L102: {expect: true, expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L103: {expect: true, expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L104: {expect: true, expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L105: {expect: true, expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L106: {expect: true, expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L107: {expect: true, expr: '(^|\n)([^\n]+:107:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L108: {expect: true, expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L109: {expect: true, expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L110: {expect: true, expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L111: {expect: true, expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L112: {expect: true, expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L113: {expect: true, expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L114: {expect: true, expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L116: {expect: true, expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L117: {expect: true, expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L120: {expect: true, expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L121: {expect: true, expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L122: {expect: true, expr: '(^|\n)([^\n]+:122:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L123: {expect: true, expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L124: {expect: true, expr: '(^|\n)([^\n]+:124:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L125: {expect: true, expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L126: {expect: true, expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L128: {expect: true, expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L129: {expect: true, expr: '(^|\n)([^\n]+:129:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L130: {expect: true, expr: '(^|\n)([^\n]+:130:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L131: {expect: true, expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L132: {expect: true, expr: '(^|\n)([^\n]+:132:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L133: {expect: true, expr: '(^|\n)([^\n]+:133:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L134: {expect: true, expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L135: {expect: true, expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+:136:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L137: {expect: true, expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L138: {expect: true, expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L139: {expect: true, expr: '(^|\n)([^\n]+:139:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L140: {expect: true, expr: '(^|\n)([^\n]+:140:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L141: {expect: true, expr: '(^|\n)([^\n]+:141:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L142: {expect: true, expr: '(^|\n)([^\n]+:142:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+:143:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L144: {expect: true, expr: '(^|\n)([^\n]+:144:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L145: {expect: true, expr: '(^|\n)([^\n]+:145:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L146: {expect: true, expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L147: {expect: true, expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L183: {expect: true, expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L185: {expect: true, expr: '(^|\n)([^\n]+:185:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L186: {expect: true, expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L188: {expect: true, expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L189: {expect: true, expr: '(^|\n)([^\n]+:189:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L190: {expect: true, expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L191: {expect: true, expr: '(^|\n)([^\n]+:191:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L192: {expect: true, expr: '(^|\n)([^\n]+:192:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L194: {expect: true, expr: '(^|\n)([^\n]+:194:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L195: {expect: true, expr: '(^|\n)([^\n]+:195:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L196: {expect: true, expr: '(^|\n)([^\n]+:196:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L197: {expect: true, expr: '(^|\n)([^\n]+:197:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L199: {expect: true, expr: '(^|\n)([^\n]+:199:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L201: {expect: true, expr: '(^|\n)([^\n]+:201:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L202: {expect: true, expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L203: {expect: true, expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L205: {expect: true, expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L206: {expect: true, expr: '(^|\n)([^\n]+:206:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L207: {expect: true, expr: '(^|\n)([^\n]+:207:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L208: {expect: true, expr: '(^|\n)([^\n]+:208:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L209: {expect: true, expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L210: {expect: true, expr: '(^|\n)([^\n]+:210:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L211: {expect: true, expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L212: {expect: true, expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L214: {expect: true, expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L215: {expect: true, expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L216: {expect: true, expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L217: {expect: true, expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L218: {expect: true, expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L219: {expect: true, expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L220: {expect: true, expr: '(^|\n)([^\n]+:220:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L221: {expect: true, expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L222: {expect: true, expr: '(^|\n)([^\n]+:222:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L223: {expect: true, expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L224: {expect: true, expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L225: {expect: true, expr: '(^|\n)([^\n]+:225:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L226: {expect: true, expr: '(^|\n)([^\n]+:226:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L227: {expect: true, expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L228: {expect: true, expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L229: {expect: true, expr: '(^|\n)([^\n]+:229:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L230: {expect: true, expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L231: {expect: true, expr: '(^|\n)([^\n]+:231:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L232: {expect: true, expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L233: {expect: true, expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L234: {expect: true, expr: '(^|\n)([^\n]+:234:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L235: {expect: true, expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L236: {expect: true, expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L237: {expect: true, expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L238: {expect: true, expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L239: {expect: true, expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L240: {expect: true, expr: '(^|\n)([^\n]+:240:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L241: {expect: true, expr: '(^|\n)([^\n]+:241:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L242: {expect: true, expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L243: {expect: true, expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L244: {expect: true, expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L245: {expect: true, expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L247: {expect: true, expr: '(^|\n)([^\n]+:247:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L248: {expect: true, expr: '(^|\n)([^\n]+:248:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L249: {expect: true, expr: '(^|\n)([^\n]+:249:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L250: {expect: true, expr: '(^|\n)([^\n]+:250:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L251: {expect: true, expr: '(^|\n)([^\n]+:251:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L252: {expect: true, expr: '(^|\n)([^\n]+:252:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L253: {expect: true, expr: '(^|\n)([^\n]+:253:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L254: {expect: true, expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L255: {expect: true, expr: '(^|\n)([^\n]+:255:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L256: {expect: true, expr: '(^|\n)([^\n]+:256:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L257: {expect: true, expr: '(^|\n)([^\n]+:257:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L258: {expect: true, expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L259: {expect: true, expr: '(^|\n)([^\n]+:259:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L260: {expect: true, expr: '(^|\n)([^\n]+:260:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L261: {expect: true, expr: '(^|\n)([^\n]+:261:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L262: {expect: true, expr: '(^|\n)([^\n]+:262:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L263: {expect: true, expr: '(^|\n)([^\n]+:263:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L264: {expect: true, expr: '(^|\n)([^\n]+:264:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L265: {expect: true, expr: '(^|\n)([^\n]+:265:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L266: {expect: true, expr: '(^|\n)([^\n]+:266:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L267: {expect: true, expr: '(^|\n)([^\n]+:267:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L268: {expect: true, expr: '(^|\n)([^\n]+:268:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L269: {expect: true, expr: '(^|\n)([^\n]+:269:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L270: {expect: true, expr: '(^|\n)([^\n]+:270:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L271: {expect: true, expr: '(^|\n)([^\n]+:271:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L272: {expect: true, expr: '(^|\n)([^\n]+:272:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L273: {expect: true, expr: '(^|\n)([^\n]+:273:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L274: {expect: true, expr: '(^|\n)([^\n]+:274:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L275: {expect: true, expr: '(^|\n)([^\n]+:275:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L276: {expect: true, expr: '(^|\n)([^\n]+:276:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L277: {expect: true, expr: '(^|\n)([^\n]+:277:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L278: {expect: true, expr: '(^|\n)([^\n]+:278:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L69: {expect: true, expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L75: {expect: true, expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L88: {expect: true, expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L98: {expect: true, expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
test_cast-bad_66:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/cast-bad.c'
    sources: {binary: cast-bad.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L100: {expect: true, expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L101: {expect: true, expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L102: {expect: true, expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L103: {expect: true, expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L104: {expect: true, expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L105: {expect: true, expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L106: {expect: true, expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L107: {expect: true, expr: '(^|\n)([^\n]+:107:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L108: {expect: true, expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L109: {expect: true, expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L110: {expect: true, expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L111: {expect: true, expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L112: {expect: true, expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L113: {expect: true, expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L114: {expect: true, expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L116: {expect: true, expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L117: {expect: true, expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L120: {expect: true, expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L121: {expect: true, expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L122: {expect: true, expr: '(^|\n)([^\n]+:122:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L123: {expect: true, expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L124: {expect: true, expr: '(^|\n)([^\n]+:124:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L125: {expect: true, expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L126: {expect: true, expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L128: {expect: true, expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L129: {expect: true, expr: '(^|\n)([^\n]+:129:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L130: {expect: true, expr: '(^|\n)([^\n]+:130:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L131: {expect: true, expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L132: {expect: true, expr: '(^|\n)([^\n]+:132:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L133: {expect: true, expr: '(^|\n)([^\n]+:133:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L134: {expect: true, expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L135: {expect: true, expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+:136:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L137: {expect: true, expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L138: {expect: true, expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L139: {expect: true, expr: '(^|\n)([^\n]+:139:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L140: {expect: true, expr: '(^|\n)([^\n]+:140:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L141: {expect: true, expr: '(^|\n)([^\n]+:141:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L142: {expect: true, expr: '(^|\n)([^\n]+:142:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+:143:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L144: {expect: true, expr: '(^|\n)([^\n]+:144:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L145: {expect: true, expr: '(^|\n)([^\n]+:145:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L146: {expect: true, expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L147: {expect: true, expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L183: {expect: true, expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L185: {expect: true, expr: '(^|\n)([^\n]+:185:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L186: {expect: true, expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L188: {expect: true, expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L189: {expect: true, expr: '(^|\n)([^\n]+:189:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L190: {expect: true, expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L191: {expect: true, expr: '(^|\n)([^\n]+:191:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L192: {expect: true, expr: '(^|\n)([^\n]+:192:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L194: {expect: true, expr: '(^|\n)([^\n]+:194:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L195: {expect: true, expr: '(^|\n)([^\n]+:195:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L196: {expect: true, expr: '(^|\n)([^\n]+:196:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L197: {expect: true, expr: '(^|\n)([^\n]+:197:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L199: {expect: true, expr: '(^|\n)([^\n]+:199:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L201: {expect: true, expr: '(^|\n)([^\n]+:201:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L202: {expect: true, expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L203: {expect: true, expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L205: {expect: true, expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L206: {expect: true, expr: '(^|\n)([^\n]+:206:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L207: {expect: true, expr: '(^|\n)([^\n]+:207:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L208: {expect: true, expr: '(^|\n)([^\n]+:208:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L209: {expect: true, expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L210: {expect: true, expr: '(^|\n)([^\n]+:210:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L211: {expect: true, expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L212: {expect: true, expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L214: {expect: true, expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L215: {expect: true, expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L216: {expect: true, expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L217: {expect: true, expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L218: {expect: true, expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L219: {expect: true, expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L220: {expect: true, expr: '(^|\n)([^\n]+:220:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L221: {expect: true, expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L222: {expect: true, expr: '(^|\n)([^\n]+:222:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L223: {expect: true, expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L224: {expect: true, expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L225: {expect: true, expr: '(^|\n)([^\n]+:225:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L226: {expect: true, expr: '(^|\n)([^\n]+:226:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L227: {expect: true, expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L228: {expect: true, expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L229: {expect: true, expr: '(^|\n)([^\n]+:229:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L230: {expect: true, expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L231: {expect: true, expr: '(^|\n)([^\n]+:231:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L232: {expect: true, expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L233: {expect: true, expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L234: {expect: true, expr: '(^|\n)([^\n]+:234:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L235: {expect: true, expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L236: {expect: true, expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L237: {expect: true, expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L238: {expect: true, expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L239: {expect: true, expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L240: {expect: true, expr: '(^|\n)([^\n]+:240:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L241: {expect: true, expr: '(^|\n)([^\n]+:241:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L242: {expect: true, expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L243: {expect: true, expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L244: {expect: true, expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L245: {expect: true, expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L247: {expect: true, expr: '(^|\n)([^\n]+:247:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L248: {expect: true, expr: '(^|\n)([^\n]+:248:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L249: {expect: true, expr: '(^|\n)([^\n]+:249:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L250: {expect: true, expr: '(^|\n)([^\n]+:250:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L251: {expect: true, expr: '(^|\n)([^\n]+:251:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L252: {expect: true, expr: '(^|\n)([^\n]+:252:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L253: {expect: true, expr: '(^|\n)([^\n]+:253:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L254: {expect: true, expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L255: {expect: true, expr: '(^|\n)([^\n]+:255:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L256: {expect: true, expr: '(^|\n)([^\n]+:256:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L257: {expect: true, expr: '(^|\n)([^\n]+:257:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L258: {expect: true, expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L259: {expect: true, expr: '(^|\n)([^\n]+:259:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L260: {expect: true, expr: '(^|\n)([^\n]+:260:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L261: {expect: true, expr: '(^|\n)([^\n]+:261:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L262: {expect: true, expr: '(^|\n)([^\n]+:262:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L263: {expect: true, expr: '(^|\n)([^\n]+:263:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L264: {expect: true, expr: '(^|\n)([^\n]+:264:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L265: {expect: true, expr: '(^|\n)([^\n]+:265:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L266: {expect: true, expr: '(^|\n)([^\n]+:266:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L267: {expect: true, expr: '(^|\n)([^\n]+:267:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L268: {expect: true, expr: '(^|\n)([^\n]+:268:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L269: {expect: true, expr: '(^|\n)([^\n]+:269:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L270: {expect: true, expr: '(^|\n)([^\n]+:270:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L271: {expect: true, expr: '(^|\n)([^\n]+:271:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L272: {expect: true, expr: '(^|\n)([^\n]+:272:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L273: {expect: true, expr: '(^|\n)([^\n]+:273:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L274: {expect: true, expr: '(^|\n)([^\n]+:274:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L275: {expect: true, expr: '(^|\n)([^\n]+:275:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L276: {expect: true, expr: '(^|\n)([^\n]+:276:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L277: {expect: true, expr: '(^|\n)([^\n]+:277:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L278: {expect: true, expr: '(^|\n)([^\n]+:278:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L69: {expect: true, expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L75: {expect: true, expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L88: {expect: true, expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L98: {expect: true, expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
test_cast-bad_9:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/cast-bad.c'
    sources: {binary: cast-bad.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L100: {expect: true, expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L101: {expect: true, expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L102: {expect: true, expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L103: {expect: true, expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L104: {expect: true, expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L105: {expect: true, expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L106: {expect: true, expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L107: {expect: true, expr: '(^|\n)([^\n]+:107:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L108: {expect: true, expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L109: {expect: true, expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L110: {expect: true, expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L111: {expect: true, expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L112: {expect: true, expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L113: {expect: true, expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L114: {expect: true, expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L116: {expect: true, expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L117: {expect: true, expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L120: {expect: true, expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L121: {expect: true, expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L122: {expect: true, expr: '(^|\n)([^\n]+:122:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L123: {expect: true, expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L124: {expect: true, expr: '(^|\n)([^\n]+:124:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L125: {expect: true, expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L126: {expect: true, expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L128: {expect: true, expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L129: {expect: true, expr: '(^|\n)([^\n]+:129:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L130: {expect: true, expr: '(^|\n)([^\n]+:130:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L131: {expect: true, expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L132: {expect: true, expr: '(^|\n)([^\n]+:132:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L133: {expect: true, expr: '(^|\n)([^\n]+:133:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L134: {expect: true, expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L135: {expect: true, expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+:136:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L137: {expect: true, expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L138: {expect: true, expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L139: {expect: true, expr: '(^|\n)([^\n]+:139:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L140: {expect: true, expr: '(^|\n)([^\n]+:140:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L141: {expect: true, expr: '(^|\n)([^\n]+:141:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L142: {expect: true, expr: '(^|\n)([^\n]+:142:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+:143:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L144: {expect: true, expr: '(^|\n)([^\n]+:144:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L145: {expect: true, expr: '(^|\n)([^\n]+:145:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L146: {expect: true, expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L147: {expect: true, expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conversion
          to non-scalar type requested")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L183: {expect: true, expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L185: {expect: true, expr: '(^|\n)([^\n]+:185:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L186: {expect: true, expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L188: {expect: true, expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L189: {expect: true, expr: '(^|\n)([^\n]+:189:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L190: {expect: true, expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L191: {expect: true, expr: '(^|\n)([^\n]+:191:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L192: {expect: true, expr: '(^|\n)([^\n]+:192:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L194: {expect: true, expr: '(^|\n)([^\n]+:194:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L195: {expect: true, expr: '(^|\n)([^\n]+:195:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L196: {expect: true, expr: '(^|\n)([^\n]+:196:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L197: {expect: true, expr: '(^|\n)([^\n]+:197:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L199: {expect: true, expr: '(^|\n)([^\n]+:199:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L201: {expect: true, expr: '(^|\n)([^\n]+:201:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L202: {expect: true, expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L203: {expect: true, expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+:204:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L205: {expect: true, expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L206: {expect: true, expr: '(^|\n)([^\n]+:206:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L207: {expect: true, expr: '(^|\n)([^\n]+:207:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L208: {expect: true, expr: '(^|\n)([^\n]+:208:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L209: {expect: true, expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L210: {expect: true, expr: '(^|\n)([^\n]+:210:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L211: {expect: true, expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L212: {expect: true, expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          to union type from type not present in union")[^\n]*\n?)+'}
      L214: {expect: true, expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L215: {expect: true, expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L216: {expect: true, expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L217: {expect: true, expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L218: {expect: true, expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L219: {expect: true, expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L220: {expect: true, expr: '(^|\n)([^\n]+:220:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L221: {expect: true, expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L222: {expect: true, expr: '(^|\n)([^\n]+:222:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L223: {expect: true, expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L224: {expect: true, expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L225: {expect: true, expr: '(^|\n)([^\n]+:225:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L226: {expect: true, expr: '(^|\n)([^\n]+:226:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L227: {expect: true, expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L228: {expect: true, expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L229: {expect: true, expr: '(^|\n)([^\n]+:229:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L230: {expect: true, expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L231: {expect: true, expr: '(^|\n)([^\n]+:231:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L232: {expect: true, expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L233: {expect: true, expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L234: {expect: true, expr: '(^|\n)([^\n]+:234:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L235: {expect: true, expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L236: {expect: true, expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L237: {expect: true, expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L238: {expect: true, expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L239: {expect: true, expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L240: {expect: true, expr: '(^|\n)([^\n]+:240:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L241: {expect: true, expr: '(^|\n)([^\n]+:241:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L242: {expect: true, expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L243: {expect: true, expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L244: {expect: true, expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L245: {expect: true, expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L247: {expect: true, expr: '(^|\n)([^\n]+:247:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L248: {expect: true, expr: '(^|\n)([^\n]+:248:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L249: {expect: true, expr: '(^|\n)([^\n]+:249:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L250: {expect: true, expr: '(^|\n)([^\n]+:250:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L251: {expect: true, expr: '(^|\n)([^\n]+:251:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L252: {expect: true, expr: '(^|\n)([^\n]+:252:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L253: {expect: true, expr: '(^|\n)([^\n]+:253:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L254: {expect: true, expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L255: {expect: true, expr: '(^|\n)([^\n]+:255:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L256: {expect: true, expr: '(^|\n)([^\n]+:256:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L257: {expect: true, expr: '(^|\n)([^\n]+:257:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L258: {expect: true, expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L259: {expect: true, expr: '(^|\n)([^\n]+:259:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L260: {expect: true, expr: '(^|\n)([^\n]+:260:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L261: {expect: true, expr: '(^|\n)([^\n]+:261:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L262: {expect: true, expr: '(^|\n)([^\n]+:262:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L263: {expect: true, expr: '(^|\n)([^\n]+:263:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L264: {expect: true, expr: '(^|\n)([^\n]+:264:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L265: {expect: true, expr: '(^|\n)([^\n]+:265:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L266: {expect: true, expr: '(^|\n)([^\n]+:266:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L267: {expect: true, expr: '(^|\n)([^\n]+:267:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L268: {expect: true, expr: '(^|\n)([^\n]+:268:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L269: {expect: true, expr: '(^|\n)([^\n]+:269:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L270: {expect: true, expr: '(^|\n)([^\n]+:270:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L271: {expect: true, expr: '(^|\n)([^\n]+:271:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L272: {expect: true, expr: '(^|\n)([^\n]+:272:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L273: {expect: true, expr: '(^|\n)([^\n]+:273:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L274: {expect: true, expr: '(^|\n)([^\n]+:274:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L275: {expect: true, expr: '(^|\n)([^\n]+:275:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L276: {expect: true, expr: '(^|\n)([^\n]+:276:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L277: {expect: true, expr: '(^|\n)([^\n]+:277:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L278: {expect: true, expr: '(^|\n)([^\n]+:278:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aggregate
          value used where a fixed-point was expected")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L69: {expect: true, expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L75: {expect: true, expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies array type")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L88: {expect: true, expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L98: {expect: true, expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cast
          specifies function type")[^\n]*\n?)+'}
test_composite-type_10:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/composite-type.c'
    sources: {binary: composite-type.s, cflags: "-std=gnu99 -O -Wall -Wno-unused -ftrack-macro-expansion=0\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L100: {expect: true, expr: '(^|\n)([^\n]+(:100:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L101: {expect: true, expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L102: {expect: true, expr: '(^|\n)([^\n]+(:102:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L103: {expect: true, expr: '(^|\n)([^\n]+(:103:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+(:73:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+(:74:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L75: {expect: true, expr: '(^|\n)([^\n]+(:75:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+(:77:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+(:83:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L88: {expect: true, expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L98: {expect: true, expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
test_composite-type_124:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/composite-type.c'
    sources: {binary: composite-type.s, cflags: "-std=gnu99 -O -Wall -Wno-unused -ftrack-macro-expansion=0\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L100: {expect: true, expr: '(^|\n)([^\n]+(:100:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L101: {expect: true, expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L102: {expect: true, expr: '(^|\n)([^\n]+(:102:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L103: {expect: true, expr: '(^|\n)([^\n]+(:103:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+(:73:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+(:74:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L75: {expect: true, expr: '(^|\n)([^\n]+(:75:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+(:77:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+(:83:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L88: {expect: true, expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L98: {expect: true, expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
test_composite-type_67:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/composite-type.c'
    sources: {binary: composite-type.s, cflags: "-std=gnu99 -O -Wall -Wno-unused -ftrack-macro-expansion=0\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L100: {expect: true, expr: '(^|\n)([^\n]+(:100:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L101: {expect: true, expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L102: {expect: true, expr: '(^|\n)([^\n]+(:102:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L103: {expect: true, expr: '(^|\n)([^\n]+(:103:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+(:73:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+(:74:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L75: {expect: true, expr: '(^|\n)([^\n]+(:75:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+(:77:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+(:83:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L88: {expect: true, expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L98: {expect: true, expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
test_const-1_11:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/const-1.c'
    sources: {binary: const-1.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L18: {expect: true, expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
test_const-1_125:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/const-1.c'
    sources: {binary: const-1.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L18: {expect: true, expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
test_const-1_68:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/const-1.c'
    sources: {binary: const-1.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L18: {expect: true, expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
test_constant_12:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/constant.c'
    sources: {binary: constant.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
test_constant_126:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/constant.c'
    sources: {binary: constant.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
test_constant_69:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/constant.c'
    sources: {binary: constant.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
test_constants-pedantic_127:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/constants-pedantic.c'
    sources: {binary: constants-pedantic.s, cflags: "-std=gnu99 -pedantic\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
test_constants-pedantic_13:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/constants-pedantic.c'
    sources: {binary: constants-pedantic.s, cflags: "-std=gnu99 -pedantic\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
test_constants-pedantic_70:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/constants-pedantic.c'
    sources: {binary: constants-pedantic.s, cflags: "-std=gnu99 -pedantic\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
test_convert-1_128:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/convert-1.c'
    sources: {binary: ./convert-1.exe, cflags: -std=gnu99 -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_convert-1_14:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/convert-1.c'
    sources: {binary: ./convert-1.exe, cflags: -std=gnu99 -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_convert-1_71:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/convert-1.c'
    sources: {binary: ./convert-1.exe, cflags: -std=gnu99 -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_convert-2_129:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/convert-2.c'
    sources: {binary: ./convert-2.exe, cflags: -std=gnu99 -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_convert-2_15:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/convert-2.c'
    sources: {binary: ./convert-2.exe, cflags: -std=gnu99 -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_convert-2_72:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/convert-2.c'
    sources: {binary: ./convert-2.exe, cflags: -std=gnu99 -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_convert-3_130:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/convert-3.c'
    sources: {binary: ./convert-3.exe, cflags: -std=gnu99 -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_convert-3_16:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/convert-3.c'
    sources: {binary: ./convert-3.exe, cflags: -std=gnu99 -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_convert-3_73:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/convert-3.c'
    sources: {binary: ./convert-3.exe, cflags: -std=gnu99 -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_convert-4_131:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/convert-4.c'
    sources: {binary: ./convert-4.exe, cflags: -std=gnu99 -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_convert-4_17:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/convert-4.c'
    sources: {binary: ./convert-4.exe, cflags: -std=gnu99 -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_convert-4_74:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/convert-4.c'
    sources: {binary: ./convert-4.exe, cflags: -std=gnu99 -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_convert-accum-neg_132:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/convert-accum-neg.c'
    sources: {binary: ./convert-accum-neg.exe, cflags: -std=gnu99 -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_convert-accum-neg_18:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/convert-accum-neg.c'
    sources: {binary: ./convert-accum-neg.exe, cflags: -std=gnu99 -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_convert-accum-neg_75:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/convert-accum-neg.c'
    sources: {binary: ./convert-accum-neg.exe, cflags: -std=gnu99 -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_convert-float-1_133:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/convert-float-1.c'
    sources: {binary: ./convert-float-1.exe, cflags: -std=gnu99 -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_convert-float-1_19:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/convert-float-1.c'
    sources: {binary: ./convert-float-1.exe, cflags: -std=gnu99 -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_convert-float-1_76:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/convert-float-1.c'
    sources: {binary: ./convert-float-1.exe, cflags: -std=gnu99 -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_convert-float-2_134:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/convert-float-2.c'
    sources: {binary: ./convert-float-2.exe, cflags: -std=gnu99 -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_convert-float-2_20:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/convert-float-2.c'
    sources: {binary: ./convert-float-2.exe, cflags: -std=gnu99 -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_convert-float-2_77:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/convert-float-2.c'
    sources: {binary: ./convert-float-2.exe, cflags: -std=gnu99 -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_convert-float-3_135:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/convert-float-3.c'
    sources: {binary: ./convert-float-3.exe, cflags: -std=gnu99 -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_convert-float-3_21:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/convert-float-3.c'
    sources: {binary: ./convert-float-3.exe, cflags: -std=gnu99 -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_convert-float-3_78:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/convert-float-3.c'
    sources: {binary: ./convert-float-3.exe, cflags: -std=gnu99 -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_convert-float-4_136:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/convert-float-4.c'
    sources: {binary: ./convert-float-4.exe, cflags: -std=gnu99 -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_convert-float-4_22:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/convert-float-4.c'
    sources: {binary: ./convert-float-4.exe, cflags: -std=gnu99 -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_convert-float-4_79:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/convert-float-4.c'
    sources: {binary: ./convert-float-4.exe, cflags: -std=gnu99 -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_convert-sat_137:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/convert-sat.c'
    sources: {binary: ./convert-sat.exe, cflags: -std=gnu99 -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_convert-sat_23:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/convert-sat.c'
    sources: {binary: ./convert-sat.exe, cflags: -std=gnu99 -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_convert-sat_80:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/convert-sat.c'
    sources: {binary: ./convert-sat.exe, cflags: -std=gnu99 -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_define_138:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/define.c'
    sources: {binary: define.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
test_define_24:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/define.c'
    sources: {binary: define.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
test_define_81:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/define.c'
    sources: {binary: define.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
test_func-array_139:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/func-array.c'
    sources: {binary: ./func-array.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_func-array_25:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/func-array.c'
    sources: {binary: ./func-array.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_func-array_82:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/func-array.c'
    sources: {binary: ./func-array.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_func-mixed_140:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/func-mixed.c'
    sources: {binary: ./func-mixed.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_func-mixed_26:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/func-mixed.c'
    sources: {binary: ./func-mixed.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_func-mixed_83:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/func-mixed.c'
    sources: {binary: ./func-mixed.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_func-scalar_141:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/func-scalar.c'
    sources: {binary: ./func-scalar.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_func-scalar_27:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/func-scalar.c'
    sources: {binary: ./func-scalar.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_func-scalar_84:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/func-scalar.c'
    sources: {binary: ./func-scalar.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_func-struct_142:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/func-struct.c'
    sources: {binary: ./func-struct.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_func-struct_28:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/func-struct.c'
    sources: {binary: ./func-struct.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_func-struct_85:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/func-struct.c'
    sources: {binary: ./func-struct.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_func-vararg-mixed_143:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/func-vararg-mixed.c'
    sources: {binary: ./func-vararg-mixed.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_func-vararg-mixed_29:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/func-vararg-mixed.c'
    sources: {binary: ./func-vararg-mixed.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_func-vararg-mixed_86:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/func-vararg-mixed.c'
    sources: {binary: ./func-vararg-mixed.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_func-vararg-size0_144:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/func-vararg-size0.c'
    sources: {binary: ./func-vararg-size0.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_func-vararg-size0_30:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/func-vararg-size0.c'
    sources: {binary: ./func-vararg-size0.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_func-vararg-size0_87:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/func-vararg-size0.c'
    sources: {binary: ./func-vararg-size0.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_func-vararg_145:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/func-vararg.c'
    sources: {binary: ./func-vararg.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_func-vararg_31:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/func-vararg.c'
    sources: {binary: ./func-vararg.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_func-vararg_88:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/func-vararg.c'
    sources: {binary: ./func-vararg.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_int-warning_146:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/int-warning.c'
    sources: {binary: int-warning.s, cflags: "-std=gnu99 -O2\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("overflow
          in implicit constant conversion")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("overflow
          in implicit constant conversion")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("overflow
          in implicit constant conversion")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("overflow
          in implicit constant conversion")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("overflow
          in implicit constant conversion")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("overflow
          in implicit constant conversion")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("overflow
          in implicit constant conversion")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("overflow
          in implicit constant conversion")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("overflow
          in implicit constant conversion")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("overflow
          in implicit constant conversion")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("overflow
          in implicit constant conversion")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("overflow
          in implicit constant conversion")[^\n]*\n?)+'}
test_int-warning_32:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/int-warning.c'
    sources: {binary: int-warning.s, cflags: "-std=gnu99 -O2\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("overflow
          in implicit constant conversion")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("overflow
          in implicit constant conversion")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("overflow
          in implicit constant conversion")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("overflow
          in implicit constant conversion")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("overflow
          in implicit constant conversion")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("overflow
          in implicit constant conversion")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("overflow
          in implicit constant conversion")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("overflow
          in implicit constant conversion")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("overflow
          in implicit constant conversion")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("overflow
          in implicit constant conversion")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("overflow
          in implicit constant conversion")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("overflow
          in implicit constant conversion")[^\n]*\n?)+'}
test_int-warning_89:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/int-warning.c'
    sources: {binary: int-warning.s, cflags: "-std=gnu99 -O2\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("overflow
          in implicit constant conversion")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("overflow
          in implicit constant conversion")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("overflow
          in implicit constant conversion")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("overflow
          in implicit constant conversion")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("overflow
          in implicit constant conversion")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("overflow
          in implicit constant conversion")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("overflow
          in implicit constant conversion")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("overflow
          in implicit constant conversion")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("overflow
          in implicit constant conversion")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("overflow
          in implicit constant conversion")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("overflow
          in implicit constant conversion")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("overflow
          in implicit constant conversion")[^\n]*\n?)+'}
test_keywords-c89_147:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/keywords-c89.c'
    sources: {binary: keywords-c89.s, cflags: "-std=c89\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_keywords-c89_33:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/keywords-c89.c'
    sources: {binary: keywords-c89.s, cflags: "-std=c89\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_keywords-c89_90:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/keywords-c89.c'
    sources: {binary: keywords-c89.s, cflags: "-std=c89\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_keywords-c99_148:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/keywords-c99.c'
    sources: {binary: keywords-c99.s, cflags: "-std=c99\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_keywords-c99_34:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/keywords-c99.c'
    sources: {binary: keywords-c99.s, cflags: "-std=c99\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_keywords-c99_91:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/keywords-c99.c'
    sources: {binary: keywords-c99.s, cflags: "-std=c99\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_keywords-ignored-c99_149:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/keywords-ignored-c99.c'
    sources: {binary: keywords-ignored-c99.s, cflags: "-std=c99\n -S"}
  group: GRPSERIAL
test_keywords-ignored-c99_35:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/keywords-ignored-c99.c'
    sources: {binary: keywords-ignored-c99.s, cflags: "-std=c99\n -S"}
  group: GRPSERIAL
test_keywords-ignored-c99_92:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/keywords-ignored-c99.c'
    sources: {binary: keywords-ignored-c99.s, cflags: "-std=c99\n -S"}
  group: GRPSERIAL
test_keywords-pedantic_150:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/keywords-pedantic.c'
    sources: {binary: keywords-pedantic.s, cflags: "-std=gnu99 -pedantic\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
test_keywords-pedantic_36:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/keywords-pedantic.c'
    sources: {binary: keywords-pedantic.s, cflags: "-std=gnu99 -pedantic\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
test_keywords-pedantic_93:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/keywords-pedantic.c'
    sources: {binary: keywords-pedantic.s, cflags: "-std=gnu99 -pedantic\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
test_keywords-reserved_151:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/keywords-reserved.c'
    sources: {binary: keywords-reserved.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_keywords-reserved_37:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/keywords-reserved.c'
    sources: {binary: keywords-reserved.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_keywords-reserved_94:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/keywords-reserved.c'
    sources: {binary: keywords-reserved.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_loop-index_152:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/loop-index.c'
    sources: {binary: ./loop-index.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_loop-index_38:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/loop-index.c'
    sources: {binary: ./loop-index.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_loop-index_95:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/loop-index.c'
    sources: {binary: ./loop-index.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_modes_153:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/modes.c'
    sources: {binary: modes.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
test_modes_39:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/modes.c'
    sources: {binary: modes.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
test_modes_96:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/modes.c'
    sources: {binary: modes.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
test_muldiv-warning_154:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/muldiv-warning.c'
    sources: {binary: muldiv-warning.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
test_muldiv-warning_40:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/muldiv-warning.c'
    sources: {binary: muldiv-warning.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
test_muldiv-warning_97:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/muldiv-warning.c'
    sources: {binary: muldiv-warning.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
test_noassoc_155:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/noassoc.c'
    sources: {binary: ./noassoc.exe, cflags: -std=gnu99 -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_noassoc_41:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/noassoc.c'
    sources: {binary: ./noassoc.exe, cflags: -std=gnu99 -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_noassoc_98:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/noassoc.c'
    sources: {binary: ./noassoc.exe, cflags: -std=gnu99 -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_operator-bitwise_156:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/operator-bitwise.c'
    sources: {binary: operator-bitwise.s, cflags: "-std=gnu99 -ftrack-macro-expansion=0\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L100: {expect: true, expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L101: {expect: true, expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L102: {expect: true, expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L103: {expect: true, expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L104: {expect: true, expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L105: {expect: true, expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L106: {expect: true, expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L107: {expect: true, expr: '(^|\n)([^\n]+:107:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L108: {expect: true, expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L109: {expect: true, expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L110: {expect: true, expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L111: {expect: true, expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L112: {expect: true, expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L113: {expect: true, expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L114: {expect: true, expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L116: {expect: true, expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L117: {expect: true, expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L120: {expect: true, expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L121: {expect: true, expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L122: {expect: true, expr: '(^|\n)([^\n]+:122:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L123: {expect: true, expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L124: {expect: true, expr: '(^|\n)([^\n]+:124:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L125: {expect: true, expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L126: {expect: true, expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L128: {expect: true, expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L129: {expect: true, expr: '(^|\n)([^\n]+:129:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L130: {expect: true, expr: '(^|\n)([^\n]+:130:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L131: {expect: true, expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L132: {expect: true, expr: '(^|\n)([^\n]+:132:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L133: {expect: true, expr: '(^|\n)([^\n]+:133:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L134: {expect: true, expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L135: {expect: true, expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+:136:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L137: {expect: true, expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L138: {expect: true, expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L139: {expect: true, expr: '(^|\n)([^\n]+:139:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L140: {expect: true, expr: '(^|\n)([^\n]+:140:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L141: {expect: true, expr: '(^|\n)([^\n]+:141:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L142: {expect: true, expr: '(^|\n)([^\n]+:142:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+:143:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L144: {expect: true, expr: '(^|\n)([^\n]+:144:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L145: {expect: true, expr: '(^|\n)([^\n]+:145:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L146: {expect: true, expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L147: {expect: true, expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L148: {expect: true, expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L149: {expect: true, expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L152: {expect: true, expr: '(^|\n)([^\n]+:152:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L154: {expect: true, expr: '(^|\n)([^\n]+:154:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L155: {expect: true, expr: '(^|\n)([^\n]+:155:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L156: {expect: true, expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L157: {expect: true, expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L159: {expect: true, expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L160: {expect: true, expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L161: {expect: true, expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L162: {expect: true, expr: '(^|\n)([^\n]+:162:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L164: {expect: true, expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L166: {expect: true, expr: '(^|\n)([^\n]+:166:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L75: {expect: true, expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L88: {expect: true, expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L98: {expect: true, expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
test_operator-bitwise_42:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/operator-bitwise.c'
    sources: {binary: operator-bitwise.s, cflags: "-std=gnu99 -ftrack-macro-expansion=0\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L100: {expect: true, expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L101: {expect: true, expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L102: {expect: true, expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L103: {expect: true, expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L104: {expect: true, expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L105: {expect: true, expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L106: {expect: true, expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L107: {expect: true, expr: '(^|\n)([^\n]+:107:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L108: {expect: true, expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L109: {expect: true, expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L110: {expect: true, expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L111: {expect: true, expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L112: {expect: true, expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L113: {expect: true, expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L114: {expect: true, expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L116: {expect: true, expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L117: {expect: true, expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L120: {expect: true, expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L121: {expect: true, expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L122: {expect: true, expr: '(^|\n)([^\n]+:122:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L123: {expect: true, expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L124: {expect: true, expr: '(^|\n)([^\n]+:124:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L125: {expect: true, expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L126: {expect: true, expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L128: {expect: true, expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L129: {expect: true, expr: '(^|\n)([^\n]+:129:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L130: {expect: true, expr: '(^|\n)([^\n]+:130:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L131: {expect: true, expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L132: {expect: true, expr: '(^|\n)([^\n]+:132:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L133: {expect: true, expr: '(^|\n)([^\n]+:133:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L134: {expect: true, expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L135: {expect: true, expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+:136:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L137: {expect: true, expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L138: {expect: true, expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L139: {expect: true, expr: '(^|\n)([^\n]+:139:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L140: {expect: true, expr: '(^|\n)([^\n]+:140:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L141: {expect: true, expr: '(^|\n)([^\n]+:141:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L142: {expect: true, expr: '(^|\n)([^\n]+:142:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+:143:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L144: {expect: true, expr: '(^|\n)([^\n]+:144:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L145: {expect: true, expr: '(^|\n)([^\n]+:145:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L146: {expect: true, expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L147: {expect: true, expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L148: {expect: true, expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L149: {expect: true, expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L152: {expect: true, expr: '(^|\n)([^\n]+:152:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L154: {expect: true, expr: '(^|\n)([^\n]+:154:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L155: {expect: true, expr: '(^|\n)([^\n]+:155:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L156: {expect: true, expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L157: {expect: true, expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L159: {expect: true, expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L160: {expect: true, expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L161: {expect: true, expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L162: {expect: true, expr: '(^|\n)([^\n]+:162:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L164: {expect: true, expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L166: {expect: true, expr: '(^|\n)([^\n]+:166:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L75: {expect: true, expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L88: {expect: true, expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L98: {expect: true, expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
test_operator-bitwise_99:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/operator-bitwise.c'
    sources: {binary: operator-bitwise.s, cflags: "-std=gnu99 -ftrack-macro-expansion=0\n
        -S"}
  group: GRPSERIAL
  validate:
    match:
      L100: {expect: true, expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L101: {expect: true, expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L102: {expect: true, expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L103: {expect: true, expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L104: {expect: true, expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L105: {expect: true, expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L106: {expect: true, expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L107: {expect: true, expr: '(^|\n)([^\n]+:107:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L108: {expect: true, expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L109: {expect: true, expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L110: {expect: true, expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L111: {expect: true, expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L112: {expect: true, expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L113: {expect: true, expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L114: {expect: true, expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L116: {expect: true, expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L117: {expect: true, expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L120: {expect: true, expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L121: {expect: true, expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L122: {expect: true, expr: '(^|\n)([^\n]+:122:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L123: {expect: true, expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L124: {expect: true, expr: '(^|\n)([^\n]+:124:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L125: {expect: true, expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L126: {expect: true, expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L128: {expect: true, expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L129: {expect: true, expr: '(^|\n)([^\n]+:129:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L130: {expect: true, expr: '(^|\n)([^\n]+:130:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L131: {expect: true, expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L132: {expect: true, expr: '(^|\n)([^\n]+:132:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L133: {expect: true, expr: '(^|\n)([^\n]+:133:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L134: {expect: true, expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L135: {expect: true, expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+:136:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L137: {expect: true, expr: '(^|\n)([^\n]+:137:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L138: {expect: true, expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L139: {expect: true, expr: '(^|\n)([^\n]+:139:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L140: {expect: true, expr: '(^|\n)([^\n]+:140:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L141: {expect: true, expr: '(^|\n)([^\n]+:141:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L142: {expect: true, expr: '(^|\n)([^\n]+:142:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+:143:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L144: {expect: true, expr: '(^|\n)([^\n]+:144:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L145: {expect: true, expr: '(^|\n)([^\n]+:145:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L146: {expect: true, expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L147: {expect: true, expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L148: {expect: true, expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L149: {expect: true, expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L152: {expect: true, expr: '(^|\n)([^\n]+:152:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L154: {expect: true, expr: '(^|\n)([^\n]+:154:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L155: {expect: true, expr: '(^|\n)([^\n]+:155:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L156: {expect: true, expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L157: {expect: true, expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L159: {expect: true, expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L160: {expect: true, expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L161: {expect: true, expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L162: {expect: true, expr: '(^|\n)([^\n]+:162:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L164: {expect: true, expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+:165:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L166: {expect: true, expr: '(^|\n)([^\n]+:166:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L75: {expect: true, expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L88: {expect: true, expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L98: {expect: true, expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
test_operator-comma_100:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/operator-comma.c'
    sources: {binary: ./operator-comma.exe, cflags: -std=gnu99 -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_operator-comma_157:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/operator-comma.c'
    sources: {binary: ./operator-comma.exe, cflags: -std=gnu99 -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_operator-comma_43:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/operator-comma.c'
    sources: {binary: ./operator-comma.exe, cflags: -std=gnu99 -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_operator-cond_101:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/operator-cond.c'
    sources: {binary: ./operator-cond.exe, cflags: -std=gnu99 -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_operator-cond_158:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/operator-cond.c'
    sources: {binary: ./operator-cond.exe, cflags: -std=gnu99 -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_operator-cond_44:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/operator-cond.c'
    sources: {binary: ./operator-cond.exe, cflags: -std=gnu99 -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_operator-logical_102:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/operator-logical.c'
    sources: {binary: ./operator-logical.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_operator-logical_159:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/operator-logical.c'
    sources: {binary: ./operator-logical.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_operator-logical_45:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/operator-logical.c'
    sources: {binary: ./operator-logical.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_operator-unary_103:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/operator-unary.c'
    sources: {binary: ./operator-unary.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_operator-unary_160:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/operator-unary.c'
    sources: {binary: ./operator-unary.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_operator-unary_46:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/operator-unary.c'
    sources: {binary: ./operator-unary.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_pr33466_104:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/pr33466.c'
    sources: {binary: pr33466.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
test_pr33466_161:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/pr33466.c'
    sources: {binary: pr33466.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
test_pr33466_47:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/pr33466.c'
    sources: {binary: pr33466.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          suffix")[^\n]*\n?)+'}
test_pr79971_105:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/pr79971.c'
    sources: {binary: pr79971.s, cflags: "-O3\n -S"}
  group: GRPSERIAL
test_pr79971_162:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/pr79971.c'
    sources: {binary: pr79971.s, cflags: "-O3\n -S"}
  group: GRPSERIAL
test_pr79971_48:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/pr79971.c'
    sources: {binary: pr79971.s, cflags: "-O3\n -S"}
  group: GRPSERIAL
test_pr81428_106:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/pr81428.c'
    sources: {binary: pr81428.s, cflags: "-O2\n -S"}
  group: GRPSERIAL
test_pr81428_163:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/pr81428.c'
    sources: {binary: pr81428.s, cflags: "-O2\n -S"}
  group: GRPSERIAL
test_pr81428_49:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/pr81428.c'
    sources: {binary: pr81428.s, cflags: "-O2\n -S"}
  group: GRPSERIAL
test_struct-layout-1_107:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/struct-layout-1.c'
    sources: {binary: ./struct-layout-1.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_struct-layout-1_164:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/struct-layout-1.c'
    sources: {binary: ./struct-layout-1.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_struct-layout-1_50:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/struct-layout-1.c'
    sources: {binary: ./struct-layout-1.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_struct-union_108:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/struct-union.c'
    sources: {binary: struct-union.s, cflags: "-O -Wall\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assignment
          of member \''f\'' in read-only object")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assignment
          of member \''lf\'' in read-only object")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assignment
          of read-only member")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assignment
          of read-only member")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assignment
          of member \''f\'' in read-only object")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assignment
          of member \''lf\'' in read-only object")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assignment
          of member \''f\'' in read-only object")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assignment
          of member \''lf\'' in read-only object")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assignment
          of member \''f\'' in read-only object")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assignment
          of member \''lf\'' in read-only object")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
test_struct-union_165:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/struct-union.c'
    sources: {binary: struct-union.s, cflags: "-O -Wall\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assignment
          of member \''f\'' in read-only object")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assignment
          of member \''lf\'' in read-only object")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assignment
          of read-only member")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assignment
          of read-only member")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assignment
          of member \''f\'' in read-only object")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assignment
          of member \''lf\'' in read-only object")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assignment
          of member \''f\'' in read-only object")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assignment
          of member \''lf\'' in read-only object")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assignment
          of member \''f\'' in read-only object")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assignment
          of member \''lf\'' in read-only object")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
test_struct-union_51:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/struct-union.c'
    sources: {binary: struct-union.s, cflags: "-O -Wall\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assignment
          of member \''f\'' in read-only object")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assignment
          of member \''lf\'' in read-only object")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assignment
          of read-only member")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assignment
          of read-only member")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assignment
          of member \''f\'' in read-only object")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assignment
          of member \''lf\'' in read-only object")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assignment
          of member \''f\'' in read-only object")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assignment
          of member \''lf\'' in read-only object")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assignment
          of member \''f\'' in read-only object")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assignment
          of member \''lf\'' in read-only object")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
test_types_109:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/types.c'
    sources: {binary: types.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
test_types_166:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/types.c'
    sources: {binary: types.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
test_types_52:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/types.c'
    sources: {binary: types.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
test_typespec_110:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/typespec.c'
    sources: {binary: typespec.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L100: {expect: true, expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L101: {expect: true, expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L102: {expect: true, expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L103: {expect: true, expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L107: {expect: true, expr: '(^|\n)([^\n]+:107:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L108: {expect: true, expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L110: {expect: true, expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L112: {expect: true, expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L113: {expect: true, expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L116: {expect: true, expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L117: {expect: true, expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L131: {expect: true, expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L132: {expect: true, expr: '(^|\n)([^\n]+:132:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L133: {expect: true, expr: '(^|\n)([^\n]+:133:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L135: {expect: true, expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L138: {expect: true, expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L139: {expect: true, expr: '(^|\n)([^\n]+:139:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L141: {expect: true, expr: '(^|\n)([^\n]+:141:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+:143:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L145: {expect: true, expr: '(^|\n)([^\n]+:145:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L147: {expect: true, expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L148: {expect: true, expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L149: {expect: true, expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L152: {expect: true, expr: '(^|\n)([^\n]+:152:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L154: {expect: true, expr: '(^|\n)([^\n]+:154:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L155: {expect: true, expr: '(^|\n)([^\n]+:155:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L156: {expect: true, expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L157: {expect: true, expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L159: {expect: true, expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L160: {expect: true, expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L161: {expect: true, expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L162: {expect: true, expr: '(^|\n)([^\n]+:162:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L166: {expect: true, expr: '(^|\n)([^\n]+:166:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L167: {expect: true, expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L169: {expect: true, expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L171: {expect: true, expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L172: {expect: true, expr: '(^|\n)([^\n]+:172:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L174: {expect: true, expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L175: {expect: true, expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L176: {expect: true, expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L177: {expect: true, expr: '(^|\n)([^\n]+:177:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L179: {expect: true, expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L180: {expect: true, expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L181: {expect: true, expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L183: {expect: true, expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L185: {expect: true, expr: '(^|\n)([^\n]+:185:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L186: {expect: true, expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L188: {expect: true, expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L189: {expect: true, expr: '(^|\n)([^\n]+:189:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L190: {expect: true, expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L191: {expect: true, expr: '(^|\n)([^\n]+:191:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L192: {expect: true, expr: '(^|\n)([^\n]+:192:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L194: {expect: true, expr: '(^|\n)([^\n]+:194:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L195: {expect: true, expr: '(^|\n)([^\n]+:195:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L196: {expect: true, expr: '(^|\n)([^\n]+:196:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L197: {expect: true, expr: '(^|\n)([^\n]+:197:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L199: {expect: true, expr: '(^|\n)([^\n]+:199:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L201: {expect: true, expr: '(^|\n)([^\n]+:201:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L202: {expect: true, expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L206: {expect: true, expr: '(^|\n)([^\n]+:206:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L207: {expect: true, expr: '(^|\n)([^\n]+:207:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L208: {expect: true, expr: '(^|\n)([^\n]+:208:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L209: {expect: true, expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L210: {expect: true, expr: '(^|\n)([^\n]+:210:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L211: {expect: true, expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L212: {expect: true, expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L213: {expect: true, expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L214: {expect: true, expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L215: {expect: true, expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L216: {expect: true, expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L217: {expect: true, expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L218: {expect: true, expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L219: {expect: true, expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L220: {expect: true, expr: '(^|\n)([^\n]+:220:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L221: {expect: true, expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L222: {expect: true, expr: '(^|\n)([^\n]+:222:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L223: {expect: true, expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L224: {expect: true, expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L225: {expect: true, expr: '(^|\n)([^\n]+:225:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L226: {expect: true, expr: '(^|\n)([^\n]+:226:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L227: {expect: true, expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L228: {expect: true, expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L229: {expect: true, expr: '(^|\n)([^\n]+:229:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L230: {expect: true, expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L231: {expect: true, expr: '(^|\n)([^\n]+:231:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L232: {expect: true, expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L233: {expect: true, expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L234: {expect: true, expr: '(^|\n)([^\n]+:234:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L235: {expect: true, expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L236: {expect: true, expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L237: {expect: true, expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L238: {expect: true, expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L239: {expect: true, expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L240: {expect: true, expr: '(^|\n)([^\n]+:240:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L241: {expect: true, expr: '(^|\n)([^\n]+:241:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L242: {expect: true, expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L243: {expect: true, expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L244: {expect: true, expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L245: {expect: true, expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L246: {expect: true, expr: '(^|\n)([^\n]+:246:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L247: {expect: true, expr: '(^|\n)([^\n]+:247:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L248: {expect: true, expr: '(^|\n)([^\n]+:248:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L249: {expect: true, expr: '(^|\n)([^\n]+:249:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L250: {expect: true, expr: '(^|\n)([^\n]+:250:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L251: {expect: true, expr: '(^|\n)([^\n]+:251:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L252: {expect: true, expr: '(^|\n)([^\n]+:252:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L253: {expect: true, expr: '(^|\n)([^\n]+:253:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L254: {expect: true, expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L255: {expect: true, expr: '(^|\n)([^\n]+:255:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L256: {expect: true, expr: '(^|\n)([^\n]+:256:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L257: {expect: true, expr: '(^|\n)([^\n]+:257:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L258: {expect: true, expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L259: {expect: true, expr: '(^|\n)([^\n]+:259:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L260: {expect: true, expr: '(^|\n)([^\n]+:260:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L261: {expect: true, expr: '(^|\n)([^\n]+:261:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L262: {expect: true, expr: '(^|\n)([^\n]+:262:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L263: {expect: true, expr: '(^|\n)([^\n]+:263:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L264: {expect: true, expr: '(^|\n)([^\n]+:264:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L265: {expect: true, expr: '(^|\n)([^\n]+:265:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L266: {expect: true, expr: '(^|\n)([^\n]+:266:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L267: {expect: true, expr: '(^|\n)([^\n]+:267:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L268: {expect: true, expr: '(^|\n)([^\n]+:268:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L269: {expect: true, expr: '(^|\n)([^\n]+:269:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L270: {expect: true, expr: '(^|\n)([^\n]+:270:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L271: {expect: true, expr: '(^|\n)([^\n]+:271:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L272: {expect: true, expr: '(^|\n)([^\n]+:272:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L273: {expect: true, expr: '(^|\n)([^\n]+:273:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L274: {expect: true, expr: '(^|\n)([^\n]+:274:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L275: {expect: true, expr: '(^|\n)([^\n]+:275:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L276: {expect: true, expr: '(^|\n)([^\n]+:276:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L277: {expect: true, expr: '(^|\n)([^\n]+:277:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L278: {expect: true, expr: '(^|\n)([^\n]+:278:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L279: {expect: true, expr: '(^|\n)([^\n]+:279:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L280: {expect: true, expr: '(^|\n)([^\n]+:280:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L281: {expect: true, expr: '(^|\n)([^\n]+:281:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L282: {expect: true, expr: '(^|\n)([^\n]+:282:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L283: {expect: true, expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L284: {expect: true, expr: '(^|\n)([^\n]+:284:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L285: {expect: true, expr: '(^|\n)([^\n]+:285:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L286: {expect: true, expr: '(^|\n)([^\n]+:286:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L287: {expect: true, expr: '(^|\n)([^\n]+:287:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L288: {expect: true, expr: '(^|\n)([^\n]+:288:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L289: {expect: true, expr: '(^|\n)([^\n]+:289:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L290: {expect: true, expr: '(^|\n)([^\n]+:290:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L291: {expect: true, expr: '(^|\n)([^\n]+:291:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L292: {expect: true, expr: '(^|\n)([^\n]+:292:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L293: {expect: true, expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L294: {expect: true, expr: '(^|\n)([^\n]+:294:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L295: {expect: true, expr: '(^|\n)([^\n]+:295:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L296: {expect: true, expr: '(^|\n)([^\n]+:296:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L297: {expect: true, expr: '(^|\n)([^\n]+:297:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L298: {expect: true, expr: '(^|\n)([^\n]+:298:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L299: {expect: true, expr: '(^|\n)([^\n]+:299:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L300: {expect: true, expr: '(^|\n)([^\n]+:300:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L301: {expect: true, expr: '(^|\n)([^\n]+:301:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L302: {expect: true, expr: '(^|\n)([^\n]+:302:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L303: {expect: true, expr: '(^|\n)([^\n]+:303:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L75: {expect: true, expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L88: {expect: true, expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L98: {expect: true, expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_typespec_167:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/typespec.c'
    sources: {binary: typespec.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L100: {expect: true, expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L101: {expect: true, expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L102: {expect: true, expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L103: {expect: true, expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L107: {expect: true, expr: '(^|\n)([^\n]+:107:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L108: {expect: true, expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L110: {expect: true, expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L112: {expect: true, expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L113: {expect: true, expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L116: {expect: true, expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L117: {expect: true, expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L131: {expect: true, expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L132: {expect: true, expr: '(^|\n)([^\n]+:132:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L133: {expect: true, expr: '(^|\n)([^\n]+:133:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L135: {expect: true, expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L138: {expect: true, expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L139: {expect: true, expr: '(^|\n)([^\n]+:139:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L141: {expect: true, expr: '(^|\n)([^\n]+:141:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+:143:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L145: {expect: true, expr: '(^|\n)([^\n]+:145:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L147: {expect: true, expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L148: {expect: true, expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L149: {expect: true, expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L152: {expect: true, expr: '(^|\n)([^\n]+:152:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L154: {expect: true, expr: '(^|\n)([^\n]+:154:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L155: {expect: true, expr: '(^|\n)([^\n]+:155:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L156: {expect: true, expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L157: {expect: true, expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L159: {expect: true, expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L160: {expect: true, expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L161: {expect: true, expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L162: {expect: true, expr: '(^|\n)([^\n]+:162:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L166: {expect: true, expr: '(^|\n)([^\n]+:166:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L167: {expect: true, expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L169: {expect: true, expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L171: {expect: true, expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L172: {expect: true, expr: '(^|\n)([^\n]+:172:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L174: {expect: true, expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L175: {expect: true, expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L176: {expect: true, expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L177: {expect: true, expr: '(^|\n)([^\n]+:177:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L179: {expect: true, expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L180: {expect: true, expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L181: {expect: true, expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L183: {expect: true, expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L185: {expect: true, expr: '(^|\n)([^\n]+:185:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L186: {expect: true, expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L188: {expect: true, expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L189: {expect: true, expr: '(^|\n)([^\n]+:189:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L190: {expect: true, expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L191: {expect: true, expr: '(^|\n)([^\n]+:191:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L192: {expect: true, expr: '(^|\n)([^\n]+:192:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L194: {expect: true, expr: '(^|\n)([^\n]+:194:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L195: {expect: true, expr: '(^|\n)([^\n]+:195:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L196: {expect: true, expr: '(^|\n)([^\n]+:196:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L197: {expect: true, expr: '(^|\n)([^\n]+:197:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L199: {expect: true, expr: '(^|\n)([^\n]+:199:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L201: {expect: true, expr: '(^|\n)([^\n]+:201:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L202: {expect: true, expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L206: {expect: true, expr: '(^|\n)([^\n]+:206:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L207: {expect: true, expr: '(^|\n)([^\n]+:207:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L208: {expect: true, expr: '(^|\n)([^\n]+:208:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L209: {expect: true, expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L210: {expect: true, expr: '(^|\n)([^\n]+:210:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L211: {expect: true, expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L212: {expect: true, expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L213: {expect: true, expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L214: {expect: true, expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L215: {expect: true, expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L216: {expect: true, expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L217: {expect: true, expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L218: {expect: true, expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L219: {expect: true, expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L220: {expect: true, expr: '(^|\n)([^\n]+:220:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L221: {expect: true, expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L222: {expect: true, expr: '(^|\n)([^\n]+:222:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L223: {expect: true, expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L224: {expect: true, expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L225: {expect: true, expr: '(^|\n)([^\n]+:225:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L226: {expect: true, expr: '(^|\n)([^\n]+:226:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L227: {expect: true, expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L228: {expect: true, expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L229: {expect: true, expr: '(^|\n)([^\n]+:229:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L230: {expect: true, expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L231: {expect: true, expr: '(^|\n)([^\n]+:231:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L232: {expect: true, expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L233: {expect: true, expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L234: {expect: true, expr: '(^|\n)([^\n]+:234:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L235: {expect: true, expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L236: {expect: true, expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L237: {expect: true, expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L238: {expect: true, expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L239: {expect: true, expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L240: {expect: true, expr: '(^|\n)([^\n]+:240:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L241: {expect: true, expr: '(^|\n)([^\n]+:241:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L242: {expect: true, expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L243: {expect: true, expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L244: {expect: true, expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L245: {expect: true, expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L246: {expect: true, expr: '(^|\n)([^\n]+:246:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L247: {expect: true, expr: '(^|\n)([^\n]+:247:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L248: {expect: true, expr: '(^|\n)([^\n]+:248:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L249: {expect: true, expr: '(^|\n)([^\n]+:249:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L250: {expect: true, expr: '(^|\n)([^\n]+:250:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L251: {expect: true, expr: '(^|\n)([^\n]+:251:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L252: {expect: true, expr: '(^|\n)([^\n]+:252:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L253: {expect: true, expr: '(^|\n)([^\n]+:253:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L254: {expect: true, expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L255: {expect: true, expr: '(^|\n)([^\n]+:255:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L256: {expect: true, expr: '(^|\n)([^\n]+:256:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L257: {expect: true, expr: '(^|\n)([^\n]+:257:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L258: {expect: true, expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L259: {expect: true, expr: '(^|\n)([^\n]+:259:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L260: {expect: true, expr: '(^|\n)([^\n]+:260:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L261: {expect: true, expr: '(^|\n)([^\n]+:261:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L262: {expect: true, expr: '(^|\n)([^\n]+:262:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L263: {expect: true, expr: '(^|\n)([^\n]+:263:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L264: {expect: true, expr: '(^|\n)([^\n]+:264:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L265: {expect: true, expr: '(^|\n)([^\n]+:265:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L266: {expect: true, expr: '(^|\n)([^\n]+:266:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L267: {expect: true, expr: '(^|\n)([^\n]+:267:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L268: {expect: true, expr: '(^|\n)([^\n]+:268:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L269: {expect: true, expr: '(^|\n)([^\n]+:269:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L270: {expect: true, expr: '(^|\n)([^\n]+:270:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L271: {expect: true, expr: '(^|\n)([^\n]+:271:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L272: {expect: true, expr: '(^|\n)([^\n]+:272:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L273: {expect: true, expr: '(^|\n)([^\n]+:273:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L274: {expect: true, expr: '(^|\n)([^\n]+:274:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L275: {expect: true, expr: '(^|\n)([^\n]+:275:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L276: {expect: true, expr: '(^|\n)([^\n]+:276:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L277: {expect: true, expr: '(^|\n)([^\n]+:277:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L278: {expect: true, expr: '(^|\n)([^\n]+:278:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L279: {expect: true, expr: '(^|\n)([^\n]+:279:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L280: {expect: true, expr: '(^|\n)([^\n]+:280:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L281: {expect: true, expr: '(^|\n)([^\n]+:281:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L282: {expect: true, expr: '(^|\n)([^\n]+:282:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L283: {expect: true, expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L284: {expect: true, expr: '(^|\n)([^\n]+:284:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L285: {expect: true, expr: '(^|\n)([^\n]+:285:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L286: {expect: true, expr: '(^|\n)([^\n]+:286:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L287: {expect: true, expr: '(^|\n)([^\n]+:287:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L288: {expect: true, expr: '(^|\n)([^\n]+:288:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L289: {expect: true, expr: '(^|\n)([^\n]+:289:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L290: {expect: true, expr: '(^|\n)([^\n]+:290:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L291: {expect: true, expr: '(^|\n)([^\n]+:291:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L292: {expect: true, expr: '(^|\n)([^\n]+:292:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L293: {expect: true, expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L294: {expect: true, expr: '(^|\n)([^\n]+:294:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L295: {expect: true, expr: '(^|\n)([^\n]+:295:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L296: {expect: true, expr: '(^|\n)([^\n]+:296:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L297: {expect: true, expr: '(^|\n)([^\n]+:297:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L298: {expect: true, expr: '(^|\n)([^\n]+:298:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L299: {expect: true, expr: '(^|\n)([^\n]+:299:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L300: {expect: true, expr: '(^|\n)([^\n]+:300:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L301: {expect: true, expr: '(^|\n)([^\n]+:301:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L302: {expect: true, expr: '(^|\n)([^\n]+:302:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L303: {expect: true, expr: '(^|\n)([^\n]+:303:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L75: {expect: true, expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L88: {expect: true, expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L98: {expect: true, expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_typespec_53:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/typespec.c'
    sources: {binary: typespec.s, cflags: "-std=gnu99\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L100: {expect: true, expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L101: {expect: true, expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L102: {expect: true, expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L103: {expect: true, expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L107: {expect: true, expr: '(^|\n)([^\n]+:107:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L108: {expect: true, expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L110: {expect: true, expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L112: {expect: true, expr: '(^|\n)([^\n]+:112:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L113: {expect: true, expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L116: {expect: true, expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L117: {expect: true, expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L131: {expect: true, expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L132: {expect: true, expr: '(^|\n)([^\n]+:132:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L133: {expect: true, expr: '(^|\n)([^\n]+:133:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L135: {expect: true, expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L138: {expect: true, expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L139: {expect: true, expr: '(^|\n)([^\n]+:139:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L141: {expect: true, expr: '(^|\n)([^\n]+:141:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+:143:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L145: {expect: true, expr: '(^|\n)([^\n]+:145:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L147: {expect: true, expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L148: {expect: true, expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L149: {expect: true, expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L152: {expect: true, expr: '(^|\n)([^\n]+:152:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L154: {expect: true, expr: '(^|\n)([^\n]+:154:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L155: {expect: true, expr: '(^|\n)([^\n]+:155:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L156: {expect: true, expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L157: {expect: true, expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L159: {expect: true, expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L160: {expect: true, expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L161: {expect: true, expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L162: {expect: true, expr: '(^|\n)([^\n]+:162:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L166: {expect: true, expr: '(^|\n)([^\n]+:166:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L167: {expect: true, expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L169: {expect: true, expr: '(^|\n)([^\n]+:169:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L171: {expect: true, expr: '(^|\n)([^\n]+:171:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L172: {expect: true, expr: '(^|\n)([^\n]+:172:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L174: {expect: true, expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L175: {expect: true, expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L176: {expect: true, expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L177: {expect: true, expr: '(^|\n)([^\n]+:177:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L179: {expect: true, expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L180: {expect: true, expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L181: {expect: true, expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L183: {expect: true, expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L185: {expect: true, expr: '(^|\n)([^\n]+:185:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L186: {expect: true, expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+:187:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L188: {expect: true, expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L189: {expect: true, expr: '(^|\n)([^\n]+:189:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L190: {expect: true, expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L191: {expect: true, expr: '(^|\n)([^\n]+:191:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L192: {expect: true, expr: '(^|\n)([^\n]+:192:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L194: {expect: true, expr: '(^|\n)([^\n]+:194:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L195: {expect: true, expr: '(^|\n)([^\n]+:195:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L196: {expect: true, expr: '(^|\n)([^\n]+:196:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L197: {expect: true, expr: '(^|\n)([^\n]+:197:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+:198:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L199: {expect: true, expr: '(^|\n)([^\n]+:199:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L201: {expect: true, expr: '(^|\n)([^\n]+:201:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L202: {expect: true, expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L206: {expect: true, expr: '(^|\n)([^\n]+:206:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L207: {expect: true, expr: '(^|\n)([^\n]+:207:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L208: {expect: true, expr: '(^|\n)([^\n]+:208:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L209: {expect: true, expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L210: {expect: true, expr: '(^|\n)([^\n]+:210:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L211: {expect: true, expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L212: {expect: true, expr: '(^|\n)([^\n]+:212:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L213: {expect: true, expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L214: {expect: true, expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L215: {expect: true, expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L216: {expect: true, expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L217: {expect: true, expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L218: {expect: true, expr: '(^|\n)([^\n]+:218:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L219: {expect: true, expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L220: {expect: true, expr: '(^|\n)([^\n]+:220:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L221: {expect: true, expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L222: {expect: true, expr: '(^|\n)([^\n]+:222:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L223: {expect: true, expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L224: {expect: true, expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L225: {expect: true, expr: '(^|\n)([^\n]+:225:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L226: {expect: true, expr: '(^|\n)([^\n]+:226:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L227: {expect: true, expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L228: {expect: true, expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L229: {expect: true, expr: '(^|\n)([^\n]+:229:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L230: {expect: true, expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L231: {expect: true, expr: '(^|\n)([^\n]+:231:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L232: {expect: true, expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L233: {expect: true, expr: '(^|\n)([^\n]+:233:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L234: {expect: true, expr: '(^|\n)([^\n]+:234:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L235: {expect: true, expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L236: {expect: true, expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L237: {expect: true, expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L238: {expect: true, expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L239: {expect: true, expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L240: {expect: true, expr: '(^|\n)([^\n]+:240:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L241: {expect: true, expr: '(^|\n)([^\n]+:241:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L242: {expect: true, expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L243: {expect: true, expr: '(^|\n)([^\n]+:243:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L244: {expect: true, expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L245: {expect: true, expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L246: {expect: true, expr: '(^|\n)([^\n]+:246:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L247: {expect: true, expr: '(^|\n)([^\n]+:247:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L248: {expect: true, expr: '(^|\n)([^\n]+:248:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L249: {expect: true, expr: '(^|\n)([^\n]+:249:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L250: {expect: true, expr: '(^|\n)([^\n]+:250:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L251: {expect: true, expr: '(^|\n)([^\n]+:251:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L252: {expect: true, expr: '(^|\n)([^\n]+:252:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L253: {expect: true, expr: '(^|\n)([^\n]+:253:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L254: {expect: true, expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L255: {expect: true, expr: '(^|\n)([^\n]+:255:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L256: {expect: true, expr: '(^|\n)([^\n]+:256:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L257: {expect: true, expr: '(^|\n)([^\n]+:257:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L258: {expect: true, expr: '(^|\n)([^\n]+:258:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L259: {expect: true, expr: '(^|\n)([^\n]+:259:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L260: {expect: true, expr: '(^|\n)([^\n]+:260:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L261: {expect: true, expr: '(^|\n)([^\n]+:261:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L262: {expect: true, expr: '(^|\n)([^\n]+:262:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L263: {expect: true, expr: '(^|\n)([^\n]+:263:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L264: {expect: true, expr: '(^|\n)([^\n]+:264:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L265: {expect: true, expr: '(^|\n)([^\n]+:265:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L266: {expect: true, expr: '(^|\n)([^\n]+:266:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L267: {expect: true, expr: '(^|\n)([^\n]+:267:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L268: {expect: true, expr: '(^|\n)([^\n]+:268:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L269: {expect: true, expr: '(^|\n)([^\n]+:269:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L270: {expect: true, expr: '(^|\n)([^\n]+:270:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L271: {expect: true, expr: '(^|\n)([^\n]+:271:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L272: {expect: true, expr: '(^|\n)([^\n]+:272:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L273: {expect: true, expr: '(^|\n)([^\n]+:273:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L274: {expect: true, expr: '(^|\n)([^\n]+:274:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L275: {expect: true, expr: '(^|\n)([^\n]+:275:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L276: {expect: true, expr: '(^|\n)([^\n]+:276:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L277: {expect: true, expr: '(^|\n)([^\n]+:277:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L278: {expect: true, expr: '(^|\n)([^\n]+:278:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L279: {expect: true, expr: '(^|\n)([^\n]+:279:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L280: {expect: true, expr: '(^|\n)([^\n]+:280:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L281: {expect: true, expr: '(^|\n)([^\n]+:281:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L282: {expect: true, expr: '(^|\n)([^\n]+:282:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L283: {expect: true, expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L284: {expect: true, expr: '(^|\n)([^\n]+:284:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L285: {expect: true, expr: '(^|\n)([^\n]+:285:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L286: {expect: true, expr: '(^|\n)([^\n]+:286:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L287: {expect: true, expr: '(^|\n)([^\n]+:287:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L288: {expect: true, expr: '(^|\n)([^\n]+:288:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L289: {expect: true, expr: '(^|\n)([^\n]+:289:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L290: {expect: true, expr: '(^|\n)([^\n]+:290:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L291: {expect: true, expr: '(^|\n)([^\n]+:291:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L292: {expect: true, expr: '(^|\n)([^\n]+:292:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L293: {expect: true, expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L294: {expect: true, expr: '(^|\n)([^\n]+:294:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L295: {expect: true, expr: '(^|\n)([^\n]+:295:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L296: {expect: true, expr: '(^|\n)([^\n]+:296:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L297: {expect: true, expr: '(^|\n)([^\n]+:297:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L298: {expect: true, expr: '(^|\n)([^\n]+:298:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L299: {expect: true, expr: '(^|\n)([^\n]+:299:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L300: {expect: true, expr: '(^|\n)([^\n]+:300:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L301: {expect: true, expr: '(^|\n)([^\n]+:301:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L302: {expect: true, expr: '(^|\n)([^\n]+:302:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L303: {expect: true, expr: '(^|\n)([^\n]+:303:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L75: {expect: true, expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L88: {expect: true, expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L98: {expect: true, expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_unary_111:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/unary.c'
    sources: {binary: ./unary.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_unary_168:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/unary.c'
    sources: {binary: ./unary.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_unary_54:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/unary.c'
    sources: {binary: ./unary.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_union-init_112:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/union-init.c'
    sources: {binary: ./union-init.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_union-init_169:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/union-init.c'
    sources: {binary: ./union-init.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_union-init_55:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/union-init.c'
    sources: {binary: ./union-init.exe, cflags: -std=gnu99}
  group: GRPSERIAL
  run: {cwd: .}
test_view-convert-2_113:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/view-convert-2.c'
    sources: {binary: ./view-convert-2.exe, cflags: -std=gnu99 -O2}
  group: GRPSERIAL
  run: {cwd: .}
test_view-convert-2_170:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/view-convert-2.c'
    sources: {binary: ./view-convert-2.exe, cflags: -std=gnu99 -O2}
  group: GRPSERIAL
  run: {cwd: .}
test_view-convert-2_56:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/view-convert-2.c'
    sources: {binary: ./view-convert-2.exe, cflags: -std=gnu99 -O2}
  group: GRPSERIAL
  run: {cwd: .}
test_view-convert_114:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/view-convert.c'
    sources: {binary: ./view-convert.exe, cflags: -std=gnu99 -O2 -fno-builtin-memcpy}
  group: GRPSERIAL
  run: {cwd: .}
test_view-convert_171:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/view-convert.c'
    sources: {binary: ./view-convert.exe, cflags: -std=gnu99 -O2 -fno-builtin-memcpy}
  group: GRPSERIAL
  run: {cwd: .}
test_view-convert_57:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/fixed-point/view-convert.c'
    sources: {binary: ./view-convert.exe, cflags: -std=gnu99 -O2 -fno-builtin-memcpy}
  group: GRPSERIAL
  run: {cwd: .}
