test__Atomic-1_1:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/_Atomic-1.c'
    sources: {binary: _Atomic-1.s, cflags: "-fopenmp -Wno-hsa -std=c11\n -S"}
  group: GRPSERIAL
test__Atomic-1_192:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/_Atomic-1.c'
    sources: {binary: _Atomic-1.s, cflags: "-fopenmp -Wno-hsa -std=c11\n -S"}
  group: GRPSERIAL
test__Atomic-1_383:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/_Atomic-1.c'
    sources: {binary: _Atomic-1.s, cflags: "-fopenmp -Wno-hsa -std=c11\n -S"}
  group: GRPSERIAL
test__Atomic-2_193:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/_Atomic-2.c'
    sources: {binary: _Atomic-2.s, cflags: "-fopenmp -Wno-hsa -std=c11\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''i\''")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''i\''")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''i\''")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''i\''")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''j\''")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''j\''")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''j\''")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''j\''")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''j\''")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''i\''")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''i\''")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''i\''")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''j\''")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''j\''")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''j\''")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''j\'' in \''linear\'' clause")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''j\'' in \''linear\'' clause")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''i\''")[^\n]*\n?)+'}
test__Atomic-2_2:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/_Atomic-2.c'
    sources: {binary: _Atomic-2.s, cflags: "-fopenmp -Wno-hsa -std=c11\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''i\''")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''i\''")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''i\''")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''i\''")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''j\''")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''j\''")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''j\''")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''j\''")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''j\''")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''i\''")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''i\''")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''i\''")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''j\''")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''j\''")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''j\''")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''j\'' in \''linear\'' clause")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''j\'' in \''linear\'' clause")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''i\''")[^\n]*\n?)+'}
test__Atomic-2_384:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/_Atomic-2.c'
    sources: {binary: _Atomic-2.s, cflags: "-fopenmp -Wno-hsa -std=c11\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''i\''")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''i\''")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''i\''")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''i\''")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''j\''")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''j\''")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''j\''")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''j\''")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''j\''")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''i\''")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''i\''")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''i\''")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''j\''")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''j\''")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''j\''")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''j\'' in \''linear\'' clause")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''j\'' in \''linear\'' clause")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          iteration variable \''i\''")[^\n]*\n?)+'}
test__Atomic-3_194:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/_Atomic-3.c'
    sources: {binary: _Atomic-3.s, cflags: "-fopenmp -Wno-hsa -std=c11\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''i\'' in \''reduction\'' clause")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          qualified type in \''#pragma omp declare reduction\''")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''i\'' in \''reduction\'' clause")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''k\'' in \''reduction\'' clause")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \\[^\\n\\r]* in \''reduction\'' clause")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''p\'' in \''aligned\'' clause")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          expression in \''#pragma omp atomic\''")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          expression in \''#pragma omp atomic\''")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          expression in \''#pragma omp atomic\''")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          expression in \''#pragma omp atomic\''")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          expression in \''#pragma omp atomic\''")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          expression in \''#pragma omp atomic\''")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          expression in \''#pragma omp atomic\''")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          expression in \''#pragma omp atomic\''")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''x\'' in \''linear\'' clause")[^\n]*\n?)+'}
test__Atomic-3_3:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/_Atomic-3.c'
    sources: {binary: _Atomic-3.s, cflags: "-fopenmp -Wno-hsa -std=c11\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''i\'' in \''reduction\'' clause")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          qualified type in \''#pragma omp declare reduction\''")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''i\'' in \''reduction\'' clause")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''k\'' in \''reduction\'' clause")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \\[^\\n\\r]* in \''reduction\'' clause")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''p\'' in \''aligned\'' clause")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          expression in \''#pragma omp atomic\''")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          expression in \''#pragma omp atomic\''")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          expression in \''#pragma omp atomic\''")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          expression in \''#pragma omp atomic\''")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          expression in \''#pragma omp atomic\''")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          expression in \''#pragma omp atomic\''")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          expression in \''#pragma omp atomic\''")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          expression in \''#pragma omp atomic\''")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''x\'' in \''linear\'' clause")[^\n]*\n?)+'}
test__Atomic-3_385:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/_Atomic-3.c'
    sources: {binary: _Atomic-3.s, cflags: "-fopenmp -Wno-hsa -std=c11\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''i\'' in \''reduction\'' clause")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          qualified type in \''#pragma omp declare reduction\''")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''i\'' in \''reduction\'' clause")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''k\'' in \''reduction\'' clause")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \\[^\\n\\r]* in \''reduction\'' clause")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''p\'' in \''aligned\'' clause")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          expression in \''#pragma omp atomic\''")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          expression in \''#pragma omp atomic\''")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          expression in \''#pragma omp atomic\''")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          expression in \''#pragma omp atomic\''")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          expression in \''#pragma omp atomic\''")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          expression in \''#pragma omp atomic\''")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          expression in \''#pragma omp atomic\''")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          expression in \''#pragma omp atomic\''")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''x\'' in \''linear\'' clause")[^\n]*\n?)+'}
test__Atomic-4_195:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/_Atomic-4.c'
    sources: {binary: _Atomic-4.s, cflags: "-fopenmp -Wno-hsa -std=c11\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("ignoring
          \''#pragma omp declare simd\'' on function with \''_Atomic\'' qualified
          non-\''uniform\'' argument")[^\n]*\n?)+'}
test__Atomic-4_386:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/_Atomic-4.c'
    sources: {binary: _Atomic-4.s, cflags: "-fopenmp -Wno-hsa -std=c11\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("ignoring
          \''#pragma omp declare simd\'' on function with \''_Atomic\'' qualified
          non-\''uniform\'' argument")[^\n]*\n?)+'}
test__Atomic-4_4:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/_Atomic-4.c'
    sources: {binary: _Atomic-4.s, cflags: "-fopenmp -Wno-hsa -std=c11\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("ignoring
          \''#pragma omp declare simd\'' on function with \''_Atomic\'' qualified
          non-\''uniform\'' argument")[^\n]*\n?)+'}
test__Atomic-5_196:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/_Atomic-5.c'
    sources: {binary: _Atomic-5.s, cflags: "-fopenmp -Wno-hsa -std=c11\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''a\'' in \''map\'' clause")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''b\'' in \''map\'' clause")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''b\'' in \''map\'' clause")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''c.a\'' in \''map\'' clause")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("accessing
          a member \''a\'' of an atomic structure \''c\''")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''c.b\'' in \''map\'' clause")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("accessing
          a member \''b\'' of an atomic structure \''c\''")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''c\'' in \''map\'' clause")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          contain at least one")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''c.a\'' in \''to\'' clause")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          contain at least one")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("accessing
          a member \''a\'' of an atomic structure \''c\''")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''c.b\'' in \''from\'' clause")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          contain at least one")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("accessing
          a member \''b\'' of an atomic structure \''c\''")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''c\'' in \''to\'' clause")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          contain at least one")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''c.c\'' in \''map\'' clause")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("accessing
          a member \''c\'' of an atomic structure \''c\''")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''p\'' in \''map\'' clause")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''\\[^\\n\\r]*\'' in \''map\'' clause")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''a\'' in implicit \''map\'' clause")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''b\'' in implicit \''map\'' clause")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''a\'' in implicit \''firstprivate\'' clause on \''target\'' construct")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''a\'' in \''firstprivate\'' clause on \''target\'' construct")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''b\'' in \''firstprivate\'' clause on \''target\'' construct")[^\n]*\n?)+'}
test__Atomic-5_387:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/_Atomic-5.c'
    sources: {binary: _Atomic-5.s, cflags: "-fopenmp -Wno-hsa -std=c11\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''a\'' in \''map\'' clause")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''b\'' in \''map\'' clause")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''b\'' in \''map\'' clause")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''c.a\'' in \''map\'' clause")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("accessing
          a member \''a\'' of an atomic structure \''c\''")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''c.b\'' in \''map\'' clause")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("accessing
          a member \''b\'' of an atomic structure \''c\''")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''c\'' in \''map\'' clause")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          contain at least one")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''c.a\'' in \''to\'' clause")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          contain at least one")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("accessing
          a member \''a\'' of an atomic structure \''c\''")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''c.b\'' in \''from\'' clause")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          contain at least one")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("accessing
          a member \''b\'' of an atomic structure \''c\''")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''c\'' in \''to\'' clause")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          contain at least one")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''c.c\'' in \''map\'' clause")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("accessing
          a member \''c\'' of an atomic structure \''c\''")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''p\'' in \''map\'' clause")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''\\[^\\n\\r]*\'' in \''map\'' clause")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''a\'' in implicit \''map\'' clause")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''b\'' in implicit \''map\'' clause")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''a\'' in implicit \''firstprivate\'' clause on \''target\'' construct")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''a\'' in \''firstprivate\'' clause on \''target\'' construct")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''b\'' in \''firstprivate\'' clause on \''target\'' construct")[^\n]*\n?)+'}
test__Atomic-5_5:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/_Atomic-5.c'
    sources: {binary: _Atomic-5.s, cflags: "-fopenmp -Wno-hsa -std=c11\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''a\'' in \''map\'' clause")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''b\'' in \''map\'' clause")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''b\'' in \''map\'' clause")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''c.a\'' in \''map\'' clause")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("accessing
          a member \''a\'' of an atomic structure \''c\''")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''c.b\'' in \''map\'' clause")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("accessing
          a member \''b\'' of an atomic structure \''c\''")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''c\'' in \''map\'' clause")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          contain at least one")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''c.a\'' in \''to\'' clause")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          contain at least one")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("accessing
          a member \''a\'' of an atomic structure \''c\''")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''c.b\'' in \''from\'' clause")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          contain at least one")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("accessing
          a member \''b\'' of an atomic structure \''c\''")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''c\'' in \''to\'' clause")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          contain at least one")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''c.c\'' in \''map\'' clause")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("accessing
          a member \''c\'' of an atomic structure \''c\''")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''p\'' in \''map\'' clause")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''\\[^\\n\\r]*\'' in \''map\'' clause")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''a\'' in implicit \''map\'' clause")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''b\'' in implicit \''map\'' clause")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''a\'' in implicit \''firstprivate\'' clause on \''target\'' construct")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''a\'' in \''firstprivate\'' clause on \''target\'' construct")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''_Atomic\''
          \''b\'' in \''firstprivate\'' clause on \''target\'' construct")[^\n]*\n?)+'}
test_asm-1_197:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/asm-1.c'
    sources: {binary: asm-1.s, cflags: "-O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_asm-1_388:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/asm-1.c'
    sources: {binary: asm-1.s, cflags: "-O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_asm-1_6:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/asm-1.c'
    sources: {binary: asm-1.s, cflags: "-O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_atomic-5_198:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/atomic-5.c'
    sources: {binary: atomic-5.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operator")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          form")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("read-only
          variable")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("read-only
          variable")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("read-only
          variable")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("register
          variable")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operator")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          expression")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          expression")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_atomic-5_389:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/atomic-5.c'
    sources: {binary: atomic-5.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operator")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          form")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("read-only
          variable")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("read-only
          variable")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("read-only
          variable")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("register
          variable")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operator")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          expression")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          expression")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_atomic-5_7:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/atomic-5.c'
    sources: {binary: atomic-5.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operator")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          form")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("read-only
          variable")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("read-only
          variable")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("read-only
          variable")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("register
          variable")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operator")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          expression")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          expression")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_atomic-6_199:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/atomic-6.c'
    sources: {binary: atomic-6.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-6_390:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/atomic-6.c'
    sources: {binary: atomic-6.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_atomic-6_8:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/atomic-6.c'
    sources: {binary: atomic-6.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_barrier-1_200:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/barrier-1.c'
    sources: {binary: barrier-1.s, cflags: "-fopenmp -fdump-tree-gimple\n -S"}
  group: GRPSERIAL
test_barrier-1_391:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/barrier-1.c'
    sources: {binary: barrier-1.s, cflags: "-fopenmp -fdump-tree-gimple\n -S"}
  group: GRPSERIAL
test_barrier-1_9:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/barrier-1.c'
    sources: {binary: barrier-1.s, cflags: "-fopenmp -fdump-tree-gimple\n -S"}
  group: GRPSERIAL
test_barrier-2_10:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/barrier-2.c'
    sources: {binary: barrier-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("label
          at end of compound statement")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("compound
          statements")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line")[^\n]*\n?)+'}
test_barrier-2_201:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/barrier-2.c'
    sources: {binary: barrier-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("label
          at end of compound statement")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("compound
          statements")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line")[^\n]*\n?)+'}
test_barrier-2_392:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/barrier-2.c'
    sources: {binary: barrier-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("label
          at end of compound statement")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in compound statements")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("compound
          statements")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          end of line")[^\n]*\n?)+'}
test_block-10_12:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-10.c'
    sources: {binary: block-10.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
test_block-10_203:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-10.c'
    sources: {binary: block-10.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
test_block-10_394:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-10.c'
    sources: {binary: block-10.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
test_block-11_13:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-11.c'
    sources: {binary: block-11.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_block-11_204:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-11.c'
    sources: {binary: block-11.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_block-11_395:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-11.c'
    sources: {binary: block-11.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_block-1_11:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-1.c'
    sources: {binary: block-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
test_block-1_202:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-1.c'
    sources: {binary: block-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
test_block-1_393:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-1.c'
    sources: {binary: block-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
test_block-2_14:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-2.c'
    sources: {binary: block-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break")[^\n]*\n?)+'}
test_block-2_205:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-2.c'
    sources: {binary: block-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break")[^\n]*\n?)+'}
test_block-2_396:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-2.c'
    sources: {binary: block-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break")[^\n]*\n?)+'}
test_block-3_15:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-3.c'
    sources: {binary: block-3.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
test_block-3_206:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-3.c'
    sources: {binary: block-3.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
test_block-3_397:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-3.c'
    sources: {binary: block-3.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
test_block-4_16:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-4.c'
    sources: {binary: block-4.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
test_block-4_207:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-4.c'
    sources: {binary: block-4.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
test_block-4_398:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-4.c'
    sources: {binary: block-4.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
test_block-5_17:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-5.c'
    sources: {binary: block-5.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
test_block-5_208:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-5.c'
    sources: {binary: block-5.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
test_block-5_399:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-5.c'
    sources: {binary: block-5.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
test_block-6_18:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-6.c'
    sources: {binary: block-6.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
test_block-6_209:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-6.c'
    sources: {binary: block-6.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
test_block-6_400:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-6.c'
    sources: {binary: block-6.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
test_block-7_19:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-7.c'
    sources: {binary: block-7.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
test_block-7_210:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-7.c'
    sources: {binary: block-7.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
test_block-7_401:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-7.c'
    sources: {binary: block-7.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
test_block-8_20:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-8.c'
    sources: {binary: block-8.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
test_block-8_211:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-8.c'
    sources: {binary: block-8.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
test_block-8_402:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-8.c'
    sources: {binary: block-8.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
test_block-9_21:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-9.c'
    sources: {binary: block-9.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
test_block-9_212:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-9.c'
    sources: {binary: block-9.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
test_block-9_403:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-9.c'
    sources: {binary: block-9.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
test_clause-1_213:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/clause-1.c'
    sources: {binary: clause-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L100: {expect: true, expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a variable")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a variable")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a variable")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user
          defined reduction not found for")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user
          defined reduction not found for")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be \''threadprivate\''")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be \''threadprivate\''")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete
          type")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete
          type")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete
          type")[^\n]*\n?)+'}
      L75: {expect: true, expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate\''")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate\''")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadpriv")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadpr")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'}
      L98: {expect: true, expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'}
test_clause-1_22:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/clause-1.c'
    sources: {binary: clause-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L100: {expect: true, expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a variable")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a variable")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a variable")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user
          defined reduction not found for")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user
          defined reduction not found for")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be \''threadprivate\''")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be \''threadprivate\''")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete
          type")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete
          type")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete
          type")[^\n]*\n?)+'}
      L75: {expect: true, expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate\''")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate\''")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadpriv")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadpr")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'}
      L98: {expect: true, expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'}
test_clause-1_404:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/clause-1.c'
    sources: {binary: clause-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L100: {expect: true, expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than once")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("more
          than")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a variable")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a variable")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a variable")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user
          defined reduction not found for")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("user
          defined reduction not found for")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          invalid type for")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be \''threadprivate\''")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be \''threadprivate\''")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete
          type")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete
          type")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete
          type")[^\n]*\n?)+'}
      L75: {expect: true, expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate\''")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate\''")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadpriv")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadpr")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''threadprivate")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'}
      L98: {expect: true, expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predetermined
          \''shared\''")[^\n]*\n?)+'}
test_clause-2_214:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/clause-2.c'
    sources: {binary: clause-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          before")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          before")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          before")[^\n]*\n?)+'}
test_clause-2_23:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/clause-2.c'
    sources: {binary: clause-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          before")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          before")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          before")[^\n]*\n?)+'}
test_clause-2_405:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/clause-2.c'
    sources: {binary: clause-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          before")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          before")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          before")[^\n]*\n?)+'}
test_collapse-1_215:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/collapse-1.c'
    sources: {binary: collapse-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          enough perfectly nested")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          enough perfectly nested")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("collapsed
          loops not perfectly nested before")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("collapsed
          loops not perfectly nested before")[^\n]*\n?)+'}
test_collapse-1_24:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/collapse-1.c'
    sources: {binary: collapse-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          enough perfectly nested")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          enough perfectly nested")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("collapsed
          loops not perfectly nested before")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("collapsed
          loops not perfectly nested before")[^\n]*\n?)+'}
test_collapse-1_406:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/collapse-1.c'
    sources: {binary: collapse-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          enough perfectly nested")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          enough perfectly nested")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("collapsed
          loops not perfectly nested before")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("collapsed
          loops not perfectly nested before")[^\n]*\n?)+'}
test_combined-1_216:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/combined-1.c'
    sources: {binary: combined-1.s, cflags: "-O1 -fopenmp -fdump-tree-optimized\n
        -S"}
  group: GRPSERIAL
test_combined-1_25:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/combined-1.c'
    sources: {binary: combined-1.s, cflags: "-O1 -fopenmp -fdump-tree-optimized\n
        -S"}
  group: GRPSERIAL
test_combined-1_407:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/combined-1.c'
    sources: {binary: combined-1.s, cflags: "-O1 -fopenmp -fdump-tree-optimized\n
        -S"}
  group: GRPSERIAL
test_complex-1_217:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/complex-1.c'
    sources: {binary: complex-1.s, cflags: "-fopenmp -O1\n -S"}
  group: GRPSERIAL
test_complex-1_26:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/complex-1.c'
    sources: {binary: complex-1.s, cflags: "-fopenmp -O1\n -S"}
  group: GRPSERIAL
test_complex-1_408:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/complex-1.c'
    sources: {binary: complex-1.s, cflags: "-fopenmp -O1\n -S"}
  group: GRPSERIAL
test_copyin-1_218:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/copyin-1.c'
    sources: {binary: copyin-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("threadprivate")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("threadprivate")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("threadprivate")[^\n]*\n?)+'}
test_copyin-1_27:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/copyin-1.c'
    sources: {binary: copyin-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("threadprivate")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("threadprivate")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("threadprivate")[^\n]*\n?)+'}
test_copyin-1_409:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/copyin-1.c'
    sources: {binary: copyin-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("threadprivate")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("threadprivate")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("threadprivate")[^\n]*\n?)+'}
test_critical-1_219:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/critical-1.c'
    sources: {binary: critical-1.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_critical-1_28:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/critical-1.c'
    sources: {binary: critical-1.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_critical-1_410:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/critical-1.c'
    sources: {binary: critical-1.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_critical-2_220:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/critical-2.c'
    sources: {binary: critical-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\).")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          expression")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          identifier")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\).")[^\n]*\n?)+'}
test_critical-2_29:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/critical-2.c'
    sources: {binary: critical-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\).")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          expression")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          identifier")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\).")[^\n]*\n?)+'}
test_critical-2_411:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/critical-2.c'
    sources: {binary: critical-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\).")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          expression")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          identifier")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          .\\\\).")[^\n]*\n?)+'}
test_critical-3_221:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/critical-3.c'
    sources: {binary: critical-3.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_critical-3_30:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/critical-3.c'
    sources: {binary: critical-3.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_critical-3_412:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/critical-3.c'
    sources: {binary: critical-3.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_critical-4_222:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/critical-4.c'
    sources: {binary: critical-4.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with
          the same name")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with
          the same name")[^\n]*\n?)+'}
test_critical-4_31:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/critical-4.c'
    sources: {binary: critical-4.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with
          the same name")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with
          the same name")[^\n]*\n?)+'}
test_critical-4_413:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/critical-4.c'
    sources: {binary: critical-4.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with
          the same name")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("with
          the same name")[^\n]*\n?)+'}
test_declare-simd-1_223:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/declare-simd-1.c'
    sources: {binary: declare-simd-1.s, cflags: "-fopenmp -Wno-hsa -ffat-lto-objects\n
        -S"}
  group: GRPSERIAL
test_declare-simd-1_32:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/declare-simd-1.c'
    sources: {binary: declare-simd-1.s, cflags: "-fopenmp -Wno-hsa -ffat-lto-objects\n
        -S"}
  group: GRPSERIAL
test_declare-simd-1_414:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/declare-simd-1.c'
    sources: {binary: declare-simd-1.s, cflags: "-fopenmp -Wno-hsa -ffat-lto-objects\n
        -S"}
  group: GRPSERIAL
test_declare-simd-2_224:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/declare-simd-2.c'
    sources: {binary: declare-simd-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          immediately followed by a function declaration or definition")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          immediately followed by a function declaration or definition")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be followed by function declaration or definition or another")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          is incompatible with")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither
          a pointer nor an array")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither
          a pointer nor an array")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither
          a pointer nor an array")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither
          a pointer nor an array")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          immediately followed by a function declaration or definition")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          immediately followed by a single function declaration or definition")[^\n]*\n?)+'}
test_declare-simd-2_33:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/declare-simd-2.c'
    sources: {binary: declare-simd-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          immediately followed by a function declaration or definition")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          immediately followed by a function declaration or definition")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be followed by function declaration or definition or another")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          is incompatible with")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither
          a pointer nor an array")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither
          a pointer nor an array")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither
          a pointer nor an array")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither
          a pointer nor an array")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          immediately followed by a function declaration or definition")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          immediately followed by a single function declaration or definition")[^\n]*\n?)+'}
test_declare-simd-2_415:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/declare-simd-2.c'
    sources: {binary: declare-simd-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          immediately followed by a function declaration or definition")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          immediately followed by a function declaration or definition")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be followed by function declaration or definition or another")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          is incompatible with")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither
          a pointer nor an array")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither
          a pointer nor an array")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither
          a pointer nor an array")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither
          a pointer nor an array")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          immediately followed by a function declaration or definition")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("appears
          more than once")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          immediately followed by a single function declaration or definition")[^\n]*\n?)+'}
test_declare-simd-3_225:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/declare-simd-3.c'
    sources: {binary: declare-simd-3.s, cflags: "-fopenmp -Wno-hsa -ffat-lto-objects\n
        -S"}
  group: GRPSERIAL
test_declare-simd-3_34:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/declare-simd-3.c'
    sources: {binary: declare-simd-3.s, cflags: "-fopenmp -Wno-hsa -ffat-lto-objects\n
        -S"}
  group: GRPSERIAL
test_declare-simd-3_416:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/declare-simd-3.c'
    sources: {binary: declare-simd-3.s, cflags: "-fopenmp -Wno-hsa -ffat-lto-objects\n
        -S"}
  group: GRPSERIAL
test_declare-simd-4_226:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/declare-simd-4.c'
    sources: {binary: declare-simd-4.s, cflags: "-fopenmp-simd\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause step is a parameter .b. not specified in .uniform. clause")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause step is a parameter .b. not specified in .uniform. clause")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause step .c. is neither constant nor a parameter")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause step .\\[^\\n\\r]*. is neither constant nor a parameter")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause step expression must be integral")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause step .b \\\\+ 1. is neither constant nor a parameter")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause step .b \\\\+ 1. is neither constant nor a parameter")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause step .b \\\\* 2. is neither constant nor a parameter")[^\n]*\n?)+'}
test_declare-simd-4_35:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/declare-simd-4.c'
    sources: {binary: declare-simd-4.s, cflags: "-fopenmp-simd\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause step is a parameter .b. not specified in .uniform. clause")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause step is a parameter .b. not specified in .uniform. clause")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause step .c. is neither constant nor a parameter")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause step .\\[^\\n\\r]*. is neither constant nor a parameter")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause step expression must be integral")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause step .b \\\\+ 1. is neither constant nor a parameter")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause step .b \\\\+ 1. is neither constant nor a parameter")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause step .b \\\\* 2. is neither constant nor a parameter")[^\n]*\n?)+'}
test_declare-simd-4_417:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/declare-simd-4.c'
    sources: {binary: declare-simd-4.s, cflags: "-fopenmp-simd\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause step is a parameter .b. not specified in .uniform. clause")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause step is a parameter .b. not specified in .uniform. clause")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause step .c. is neither constant nor a parameter")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause step .\\[^\\n\\r]*. is neither constant nor a parameter")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause step expression must be integral")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause step .b \\\\+ 1. is neither constant nor a parameter")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause step .b \\\\+ 1. is neither constant nor a parameter")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          clause step .b \\\\* 2. is neither constant nor a parameter")[^\n]*\n?)+'}
test_dump-new-function-2_227:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/dump-new-function-2.c'
    sources: {binary: dump-new-function-2.s, cflags: "-O2 -fopenmp -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_dump-new-function-2_36:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/dump-new-function-2.c'
    sources: {binary: dump-new-function-2.s, cflags: "-O2 -fopenmp -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_dump-new-function-2_418:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/dump-new-function-2.c'
    sources: {binary: dump-new-function-2.s, cflags: "-O2 -fopenmp -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_dump-new-function-3_228:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/dump-new-function-3.c'
    sources: {binary: dump-new-function-3.s, cflags: "-O2 -ftree-parallelize-loops=2
        -fdump-tree-gimple\n -S"}
  group: GRPSERIAL
test_dump-new-function-3_37:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/dump-new-function-3.c'
    sources: {binary: dump-new-function-3.s, cflags: "-O2 -ftree-parallelize-loops=2
        -fdump-tree-gimple\n -S"}
  group: GRPSERIAL
test_dump-new-function-3_419:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/dump-new-function-3.c'
    sources: {binary: dump-new-function-3.s, cflags: "-O2 -ftree-parallelize-loops=2
        -fdump-tree-gimple\n -S"}
  group: GRPSERIAL
test_dump-new-function_229:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/dump-new-function.c'
    sources: {binary: dump-new-function.s, cflags: "-O2 -fopenmp -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_dump-new-function_38:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/dump-new-function.c'
    sources: {binary: dump-new-function.s, cflags: "-O2 -fopenmp -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_dump-new-function_420:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/dump-new-function.c'
    sources: {binary: dump-new-function.s, cflags: "-O2 -fopenmp -fdump-tree-gimple\n
        -S"}
  group: GRPSERIAL
test_empty_230:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/empty.c'
    sources: {binary: empty.s, cflags: "-O -fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_empty_39:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/empty.c'
    sources: {binary: empty.s, cflags: "-O -fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_empty_421:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/empty.c'
    sources: {binary: empty.s, cflags: "-O -fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_flush-1_231:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/flush-1.c'
    sources: {binary: flush-1.s, cflags: "-fopenmp -fdump-tree-gimple\n -S"}
  group: GRPSERIAL
test_flush-1_40:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/flush-1.c'
    sources: {binary: flush-1.s, cflags: "-fopenmp -fdump-tree-gimple\n -S"}
  group: GRPSERIAL
test_flush-1_422:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/flush-1.c'
    sources: {binary: flush-1.s, cflags: "-fopenmp -fdump-tree-gimple\n -S"}
  group: GRPSERIAL
test_flush-2_232:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/flush-2.c'
    sources: {binary: flush-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          identifier")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|expected|for
          each")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|expected")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared")[^\n]*\n?)+'}
test_flush-2_41:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/flush-2.c'
    sources: {binary: flush-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          identifier")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|expected|for
          each")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|expected")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared")[^\n]*\n?)+'}
test_flush-2_423:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/flush-2.c'
    sources: {binary: flush-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          identifier")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|expected|for
          each")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|expected")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared")[^\n]*\n?)+'}
test_for-10_234:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-10.c'
    sources: {binary: for-10.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_for-10_425:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-10.c'
    sources: {binary: for-10.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_for-10_43:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-10.c'
    sources: {binary: for-10.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_for-11_235:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-11.c'
    sources: {binary: for-11.s, cflags: "-std=c99 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          statement expected")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing
          controlling predicate")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          controlling predicate")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          increment expression")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          controlling predicate|invalid increment expression")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          increment expression")[^\n]*\n?)+'}
test_for-11_426:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-11.c'
    sources: {binary: for-11.s, cflags: "-std=c99 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          statement expected")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing
          controlling predicate")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          controlling predicate")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          increment expression")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          controlling predicate|invalid increment expression")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          increment expression")[^\n]*\n?)+'}
test_for-11_44:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-11.c'
    sources: {binary: for-11.s, cflags: "-std=c99 -fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("for
          statement expected")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing
          controlling predicate")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          controlling predicate")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          increment expression")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          controlling predicate|invalid increment expression")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          increment expression")[^\n]*\n?)+'}
test_for-12_236:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-12.c'
    sources: {binary: for-12.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_for-12_427:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-12.c'
    sources: {binary: for-12.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_for-12_45:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-12.c'
    sources: {binary: for-12.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_for-13_237:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-13.c'
    sources: {binary: for-13.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_for-13_428:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-13.c'
    sources: {binary: for-13.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_for-13_46:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-13.c'
    sources: {binary: for-13.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_for-14_238:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-14.c'
    sources: {binary: for-14.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_for-14_429:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-14.c'
    sources: {binary: for-14.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_for-14_47:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-14.c'
    sources: {binary: for-14.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_for-15_239:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-15.c'
    sources: {binary: for-15.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_for-15_430:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-15.c'
    sources: {binary: for-15.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_for-15_48:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-15.c'
    sources: {binary: for-15.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_for-16_240:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-16.c'
    sources: {binary: for-16.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_for-16_431:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-16.c'
    sources: {binary: for-16.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_for-16_49:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-16.c'
    sources: {binary: for-16.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_for-17_241:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-17.c'
    sources: {binary: for-17.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_for-17_432:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-17.c'
    sources: {binary: for-17.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_for-17_50:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-17.c'
    sources: {binary: for-17.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_for-18_242:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-18.c'
    sources: {binary: for-18.s, cflags: "-O -fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_for-18_433:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-18.c'
    sources: {binary: for-18.s, cflags: "-O -fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_for-18_51:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-18.c'
    sources: {binary: for-18.s, cflags: "-O -fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_for-19_243:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-19.c'
    sources: {binary: for-19.s, cflags: "-O -fopenmp -fdump-tree-gimple\n -S"}
  group: GRPSERIAL
test_for-19_434:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-19.c'
    sources: {binary: for-19.s, cflags: "-O -fopenmp -fdump-tree-gimple\n -S"}
  group: GRPSERIAL
test_for-19_52:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-19.c'
    sources: {binary: for-19.s, cflags: "-O -fopenmp -fdump-tree-gimple\n -S"}
  group: GRPSERIAL
test_for-1_233:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-1.c'
    sources: {binary: for-1.s, cflags: "-fopenmp -fshow-column\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("3:for
          statement expected")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing
          controlling predicate")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("15:invalid
          controlling predicate")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("27:invalid
          increment expression")[^\n]*\n?)+'}
test_for-1_42:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-1.c'
    sources: {binary: for-1.s, cflags: "-fopenmp -fshow-column\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("3:for
          statement expected")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing
          controlling predicate")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("15:invalid
          controlling predicate")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("27:invalid
          increment expression")[^\n]*\n?)+'}
test_for-1_424:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-1.c'
    sources: {binary: for-1.s, cflags: "-fopenmp -fshow-column\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("3:for
          statement expected")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("missing
          controlling predicate")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("15:invalid
          controlling predicate")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("27:invalid
          increment expression")[^\n]*\n?)+'}
test_for-20_245:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-20.c'
    sources: {binary: for-20.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_for-20_436:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-20.c'
    sources: {binary: for-20.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_for-20_54:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-20.c'
    sources: {binary: for-20.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_for-21_246:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-21.c'
    sources: {binary: for-21.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_for-21_437:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-21.c'
    sources: {binary: for-21.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_for-21_55:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-21.c'
    sources: {binary: for-21.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_for-22_247:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-22.c'
    sources: {binary: for-22.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_for-22_438:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-22.c'
    sources: {binary: for-22.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_for-22_56:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-22.c'
    sources: {binary: for-22.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_for-23_248:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-23.c'
    sources: {binary: for-23.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_for-23_439:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-23.c'
    sources: {binary: for-23.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_for-23_57:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-23.c'
    sources: {binary: for-23.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_for-24_249:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-24.c'
    sources: {binary: for-24.s, cflags: "-O2 -fopenmp -fdump-tree-ssa\n -S"}
  group: GRPSERIAL
test_for-24_440:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-24.c'
    sources: {binary: for-24.s, cflags: "-O2 -fopenmp -fdump-tree-ssa\n -S"}
  group: GRPSERIAL
test_for-24_58:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-24.c'
    sources: {binary: for-24.s, cflags: "-O2 -fopenmp -fdump-tree-ssa\n -S"}
  group: GRPSERIAL
test_for-2_244:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-2.c'
    sources: {binary: for-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many")[^\n]*\n?)+'}
test_for-2_435:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-2.c'
    sources: {binary: for-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many")[^\n]*\n?)+'}
test_for-2_53:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-2.c'
    sources: {binary: for-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many")[^\n]*\n?)+'}
test_for-3_250:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-3.c'
    sources: {binary: for-3.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\(\''")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          schedule kind")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          schedule kind")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\''")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not take")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\(\''")[^\n]*\n?)+'}
test_for-3_441:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-3.c'
    sources: {binary: for-3.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\(\''")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          schedule kind")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          schedule kind")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\''")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not take")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\(\''")[^\n]*\n?)+'}
test_for-3_59:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-3.c'
    sources: {binary: for-3.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\(\''")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          schedule kind")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          schedule kind")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\)\''")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          integer expression")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("does
          not take")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          \''\\\\(\''")[^\n]*\n?)+'}
test_for-4_251:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-4.c'
    sources: {binary: for-4.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_for-4_442:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-4.c'
    sources: {binary: for-4.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_for-4_60:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-4.c'
    sources: {binary: for-4.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_for-5_252:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-5.c'
    sources: {binary: for-5.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_for-5_443:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-5.c'
    sources: {binary: for-5.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_for-5_61:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-5.c'
    sources: {binary: for-5.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_for-6_253:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-6.c'
    sources: {binary: for-6.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_for-6_444:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-6.c'
    sources: {binary: for-6.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_for-6_62:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-6.c'
    sources: {binary: for-6.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_for-7_254:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-7.c'
    sources: {binary: for-7.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_for-7_445:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-7.c'
    sources: {binary: for-7.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_for-7_63:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-7.c'
    sources: {binary: for-7.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_for-8_255:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-8.c'
    sources: {binary: for-8.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_for-8_446:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-8.c'
    sources: {binary: for-8.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_for-8_64:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-8.c'
    sources: {binary: for-8.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_for-9_256:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-9.c'
    sources: {binary: for-9.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_for-9_447:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-9.c'
    sources: {binary: for-9.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_for-9_65:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-9.c'
    sources: {binary: for-9.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_linear-1_257:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/linear-1.c'
    sources: {binary: linear-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          is not valid for .#pragma omp distribute parallel for.")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration
          variable .i. should not be linear")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration
          variable .i. should not be linear")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration
          variable .j. should not be linear")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          is not valid for .#pragma omp target teams distribute parallel for.")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration
          variable .i. should not be linear")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration
          variable .j. should not be linear")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration
          variable .i. should not be linear")[^\n]*\n?)+'}
test_linear-1_448:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/linear-1.c'
    sources: {binary: linear-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          is not valid for .#pragma omp distribute parallel for.")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration
          variable .i. should not be linear")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration
          variable .i. should not be linear")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration
          variable .j. should not be linear")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          is not valid for .#pragma omp target teams distribute parallel for.")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration
          variable .i. should not be linear")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration
          variable .j. should not be linear")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration
          variable .i. should not be linear")[^\n]*\n?)+'}
test_linear-1_66:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/linear-1.c'
    sources: {binary: linear-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          is not valid for .#pragma omp distribute parallel for.")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration
          variable .i. should not be linear")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration
          variable .i. should not be linear")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration
          variable .j. should not be linear")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".linear.
          is not valid for .#pragma omp target teams distribute parallel for.")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration
          variable .i. should not be linear")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration
          variable .j. should not be linear")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("iteration
          variable .i. should not be linear")[^\n]*\n?)+'}
test_loop-1_258:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/loop-1.c'
    sources: {binary: loop-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L101: {expect: true, expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L105: {expect: true, expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L109: {expect: true, expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L114: {expect: true, expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L116: {expect: true, expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L120: {expect: true, expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L124: {expect: true, expr: '(^|\n)([^\n]+:124:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L128: {expect: true, expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L133: {expect: true, expr: '(^|\n)([^\n]+:133:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L138: {expect: true, expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L157: {expect: true, expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L161: {expect: true, expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L164: {expect: true, expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L167: {expect: true, expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L176: {expect: true, expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L179: {expect: true, expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          controlling predicate|condition expression refers to iteration variable")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L188: {expect: true, expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          increment expression|increment expression refers to iteration variable")[^\n]*\n?)+'}
      L190: {expect: true, expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L194: {expect: true, expr: '(^|\n)([^\n]+:194:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L197: {expect: true, expr: '(^|\n)([^\n]+:197:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L203: {expect: true, expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L209: {expect: true, expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L215: {expect: true, expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L219: {expect: true, expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L223: {expect: true, expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L227: {expect: true, expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L231: {expect: true, expr: '(^|\n)([^\n]+:231:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L235: {expect: true, expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L237: {expect: true, expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L241: {expect: true, expr: '(^|\n)([^\n]+:241:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L247: {expect: true, expr: '(^|\n)([^\n]+:247:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          controlling predicate|condition expression refers to iteration variable")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          increment expression|increment expression refers to iteration variable")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L98: {expect: true, expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
test_loop-1_449:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/loop-1.c'
    sources: {binary: loop-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L101: {expect: true, expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L105: {expect: true, expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L109: {expect: true, expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L114: {expect: true, expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L116: {expect: true, expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L120: {expect: true, expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L124: {expect: true, expr: '(^|\n)([^\n]+:124:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L128: {expect: true, expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L133: {expect: true, expr: '(^|\n)([^\n]+:133:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L138: {expect: true, expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L157: {expect: true, expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L161: {expect: true, expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L164: {expect: true, expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L167: {expect: true, expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L176: {expect: true, expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L179: {expect: true, expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          controlling predicate|condition expression refers to iteration variable")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L188: {expect: true, expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          increment expression|increment expression refers to iteration variable")[^\n]*\n?)+'}
      L190: {expect: true, expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L194: {expect: true, expr: '(^|\n)([^\n]+:194:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L197: {expect: true, expr: '(^|\n)([^\n]+:197:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L203: {expect: true, expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L209: {expect: true, expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L215: {expect: true, expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L219: {expect: true, expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L223: {expect: true, expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L227: {expect: true, expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L231: {expect: true, expr: '(^|\n)([^\n]+:231:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L235: {expect: true, expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L237: {expect: true, expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L241: {expect: true, expr: '(^|\n)([^\n]+:241:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L247: {expect: true, expr: '(^|\n)([^\n]+:247:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          controlling predicate|condition expression refers to iteration variable")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          increment expression|increment expression refers to iteration variable")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L98: {expect: true, expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
test_loop-1_67:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/loop-1.c'
    sources: {binary: loop-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L101: {expect: true, expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L105: {expect: true, expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L109: {expect: true, expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L114: {expect: true, expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L116: {expect: true, expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L120: {expect: true, expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L124: {expect: true, expr: '(^|\n)([^\n]+:124:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L128: {expect: true, expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L133: {expect: true, expr: '(^|\n)([^\n]+:133:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L138: {expect: true, expr: '(^|\n)([^\n]+:138:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L157: {expect: true, expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L161: {expect: true, expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L164: {expect: true, expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L167: {expect: true, expr: '(^|\n)([^\n]+:167:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+:173:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L176: {expect: true, expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L179: {expect: true, expr: '(^|\n)([^\n]+:179:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          controlling predicate|condition expression refers to iteration variable")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L188: {expect: true, expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          increment expression|increment expression refers to iteration variable")[^\n]*\n?)+'}
      L190: {expect: true, expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L194: {expect: true, expr: '(^|\n)([^\n]+:194:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L197: {expect: true, expr: '(^|\n)([^\n]+:197:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+:200:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L203: {expect: true, expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L209: {expect: true, expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L215: {expect: true, expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L219: {expect: true, expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L223: {expect: true, expr: '(^|\n)([^\n]+:223:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L227: {expect: true, expr: '(^|\n)([^\n]+:227:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L231: {expect: true, expr: '(^|\n)([^\n]+:231:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L235: {expect: true, expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L237: {expect: true, expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L241: {expect: true, expr: '(^|\n)([^\n]+:241:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L247: {expect: true, expr: '(^|\n)([^\n]+:247:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          controlling predicate|condition expression refers to iteration variable")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          increment expression|increment expression refers to iteration variable")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("increment
          expression refers to iteration variable")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          expression refers to iteration variable")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
      L98: {expect: true, expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("condition
          expression refers to iteration variable")[^\n]*\n?)+'}
test_macro-1_259:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/macro-1.c'
    sources: {binary: macro-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_macro-1_450:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/macro-1.c'
    sources: {binary: macro-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_macro-1_68:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/macro-1.c'
    sources: {binary: macro-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_macro-2_260:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/macro-2.c'
    sources: {binary: macro-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_macro-2_451:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/macro-2.c'
    sources: {binary: macro-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_macro-2_69:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/macro-2.c'
    sources: {binary: macro-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_macro-3_261:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/macro-3.c'
    sources: {binary: macro-3.s, cflags: "-fopenmp -fdump-tree-omplower\n -S"}
  group: GRPSERIAL
test_macro-3_452:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/macro-3.c'
    sources: {binary: macro-3.s, cflags: "-fopenmp -fdump-tree-omplower\n -S"}
  group: GRPSERIAL
test_macro-3_70:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/macro-3.c'
    sources: {binary: macro-3.s, cflags: "-fopenmp -fdump-tree-omplower\n -S"}
  group: GRPSERIAL
test_macro-4_262:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/macro-4.c'
    sources: {binary: macro-4.s, cflags: "-fopenmp -Wunknown-pragmas\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ignoring
          #pragma omp _Pragma")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("ignoring
          #pragma omp _Pragma")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("ignoring
          #pragma omp serial")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("ignoring
          #pragma omp serial")[^\n]*\n?)+'}
test_macro-4_453:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/macro-4.c'
    sources: {binary: macro-4.s, cflags: "-fopenmp -Wunknown-pragmas\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ignoring
          #pragma omp _Pragma")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("ignoring
          #pragma omp _Pragma")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("ignoring
          #pragma omp serial")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("ignoring
          #pragma omp serial")[^\n]*\n?)+'}
test_macro-4_71:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/macro-4.c'
    sources: {binary: macro-4.s, cflags: "-fopenmp -Wunknown-pragmas\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ignoring
          #pragma omp _Pragma")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("ignoring
          #pragma omp _Pragma")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("ignoring
          #pragma omp serial")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("ignoring
          #pragma omp serial")[^\n]*\n?)+'}
test_master-1_263:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/master-1.c'
    sources: {binary: master-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_master-1_454:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/master-1.c'
    sources: {binary: master-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_master-1_72:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/master-1.c'
    sources: {binary: master-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_master-2_264:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/master-2.c'
    sources: {binary: master-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          expression")[^\n]*\n?)+'}
test_master-2_455:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/master-2.c'
    sources: {binary: master-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          expression")[^\n]*\n?)+'}
test_master-2_73:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/master-2.c'
    sources: {binary: master-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          expression")[^\n]*\n?)+'}
test_master-3_265:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/master-3.c'
    sources: {binary: master-3.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_master-3_456:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/master-3.c'
    sources: {binary: master-3.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_master-3_74:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/master-3.c'
    sources: {binary: master-3.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_nestedfn-1_266:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/nestedfn-1.c'
    sources: {binary: nestedfn-1.s, cflags: "-O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_nestedfn-1_457:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/nestedfn-1.c'
    sources: {binary: nestedfn-1.s, cflags: "-O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_nestedfn-1_75:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/nestedfn-1.c'
    sources: {binary: nestedfn-1.s, cflags: "-O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_nesting-1_267:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/nesting-1.c'
    sources: {binary: nesting-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L100: {expect: true, expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L104: {expect: true, expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L107: {expect: true, expr: '(^|\n)([^\n]+:107:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L113: {expect: true, expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L117: {expect: true, expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L121: {expect: true, expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L124: {expect: true, expr: '(^|\n)([^\n]+:124:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L130: {expect: true, expr: '(^|\n)([^\n]+:130:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L132: {expect: true, expr: '(^|\n)([^\n]+:132:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L134: {expect: true, expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L161: {expect: true, expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L164: {expect: true, expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L174: {expect: true, expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L183: {expect: true, expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L205: {expect: true, expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be closely nested")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L234: {expect: true, expr: '(^|\n)([^\n]+:234:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be nested")[^\n]*\n?)+'}
      L237: {expect: true, expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be nested")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L98: {expect: true, expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
test_nesting-1_458:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/nesting-1.c'
    sources: {binary: nesting-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L100: {expect: true, expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L104: {expect: true, expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L107: {expect: true, expr: '(^|\n)([^\n]+:107:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L113: {expect: true, expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L117: {expect: true, expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L121: {expect: true, expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L124: {expect: true, expr: '(^|\n)([^\n]+:124:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L130: {expect: true, expr: '(^|\n)([^\n]+:130:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L132: {expect: true, expr: '(^|\n)([^\n]+:132:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L134: {expect: true, expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L161: {expect: true, expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L164: {expect: true, expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L174: {expect: true, expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L183: {expect: true, expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L205: {expect: true, expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be closely nested")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L234: {expect: true, expr: '(^|\n)([^\n]+:234:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be nested")[^\n]*\n?)+'}
      L237: {expect: true, expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be nested")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L98: {expect: true, expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
test_nesting-1_76:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/nesting-1.c'
    sources: {binary: nesting-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L100: {expect: true, expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L104: {expect: true, expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L107: {expect: true, expr: '(^|\n)([^\n]+:107:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L113: {expect: true, expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L117: {expect: true, expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L121: {expect: true, expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L124: {expect: true, expr: '(^|\n)([^\n]+:124:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L130: {expect: true, expr: '(^|\n)([^\n]+:130:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L132: {expect: true, expr: '(^|\n)([^\n]+:132:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L134: {expect: true, expr: '(^|\n)([^\n]+:134:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L161: {expect: true, expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L164: {expect: true, expr: '(^|\n)([^\n]+:164:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+:170:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L174: {expect: true, expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L183: {expect: true, expr: '(^|\n)([^\n]+:183:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L205: {expect: true, expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be closely nested")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L234: {expect: true, expr: '(^|\n)([^\n]+:234:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be nested")[^\n]*\n?)+'}
      L237: {expect: true, expr: '(^|\n)([^\n]+:237:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be nested")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
      L98: {expect: true, expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          not be closely nested")[^\n]*\n?)+'}
test_notify-new-function-2_268:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/notify-new-function-2.c'
    sources: {binary: notify-new-function-2.s, cflags: "-O2 -fopenmp -fdump-tree-omplower\n
        -S"}
  group: GRPSERIAL
test_notify-new-function-2_459:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/notify-new-function-2.c'
    sources: {binary: notify-new-function-2.s, cflags: "-O2 -fopenmp -fdump-tree-omplower\n
        -S"}
  group: GRPSERIAL
test_notify-new-function-2_77:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/notify-new-function-2.c'
    sources: {binary: notify-new-function-2.s, cflags: "-O2 -fopenmp -fdump-tree-omplower\n
        -S"}
  group: GRPSERIAL
test_notify-new-function-3_269:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/notify-new-function-3.c'
    sources: {binary: notify-new-function-3.s, cflags: "-O2 -ftree-parallelize-loops=2
        -fdump-tree-ompexpssa\n -S"}
  group: GRPSERIAL
test_notify-new-function-3_460:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/notify-new-function-3.c'
    sources: {binary: notify-new-function-3.s, cflags: "-O2 -ftree-parallelize-loops=2
        -fdump-tree-ompexpssa\n -S"}
  group: GRPSERIAL
test_notify-new-function-3_78:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/notify-new-function-3.c'
    sources: {binary: notify-new-function-3.s, cflags: "-O2 -ftree-parallelize-loops=2
        -fdump-tree-ompexpssa\n -S"}
  group: GRPSERIAL
test_notify-new-function_270:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/notify-new-function.c'
    sources: {binary: notify-new-function.s, cflags: "-O2 -fopenmp -fdump-tree-ompexp\n
        -S"}
  group: GRPSERIAL
test_notify-new-function_461:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/notify-new-function.c'
    sources: {binary: notify-new-function.s, cflags: "-O2 -fopenmp -fdump-tree-ompexp\n
        -S"}
  group: GRPSERIAL
test_notify-new-function_79:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/notify-new-function.c'
    sources: {binary: notify-new-function.s, cflags: "-O2 -fopenmp -fdump-tree-ompexp\n
        -S"}
  group: GRPSERIAL
test_num-threads-1_271:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/num-threads-1.c'
    sources: {binary: num-threads-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("must
          be positive")[^\n]*\n?)+'}
test_num-threads-1_462:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/num-threads-1.c'
    sources: {binary: num-threads-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("must
          be positive")[^\n]*\n?)+'}
test_num-threads-1_80:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/num-threads-1.c'
    sources: {binary: num-threads-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("must
          be positive")[^\n]*\n?)+'}
test_omp-parallel-if_272:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/omp-parallel-if.c'
    sources: {binary: omp-parallel-if.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many")[^\n]*\n?)+'}
test_omp-parallel-if_463:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/omp-parallel-if.c'
    sources: {binary: omp-parallel-if.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many")[^\n]*\n?)+'}
test_omp-parallel-if_81:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/omp-parallel-if.c'
    sources: {binary: omp-parallel-if.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many")[^\n]*\n?)+'}
test_openmp-simd-1_273:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/openmp-simd-1.c'
    sources: {binary: openmp-simd-1.s, cflags: "-fopenmp-simd -fdump-tree-original\n
        -S"}
  group: GRPSERIAL
test_openmp-simd-1_464:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/openmp-simd-1.c'
    sources: {binary: openmp-simd-1.s, cflags: "-fopenmp-simd -fdump-tree-original\n
        -S"}
  group: GRPSERIAL
test_openmp-simd-1_82:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/openmp-simd-1.c'
    sources: {binary: openmp-simd-1.s, cflags: "-fopenmp-simd -fdump-tree-original\n
        -S"}
  group: GRPSERIAL
test_openmp-simd-2_274:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/openmp-simd-2.c'
    sources: {binary: openmp-simd-2.s, cflags: "-fopenmp-simd -fdump-tree-original\n
        -S"}
  group: GRPSERIAL
test_openmp-simd-2_465:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/openmp-simd-2.c'
    sources: {binary: openmp-simd-2.s, cflags: "-fopenmp-simd -fdump-tree-original\n
        -S"}
  group: GRPSERIAL
test_openmp-simd-2_83:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/openmp-simd-2.c'
    sources: {binary: openmp-simd-2.s, cflags: "-fopenmp-simd -fdump-tree-original\n
        -S"}
  group: GRPSERIAL
test_openmp-simd-3_275:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/openmp-simd-3.c'
    sources: {binary: openmp-simd-3.s, cflags: "-fopenmp-simd -fdump-tree-original\n
        -S"}
  group: GRPSERIAL
test_openmp-simd-3_466:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/openmp-simd-3.c'
    sources: {binary: openmp-simd-3.s, cflags: "-fopenmp-simd -fdump-tree-original\n
        -S"}
  group: GRPSERIAL
test_openmp-simd-3_84:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/openmp-simd-3.c'
    sources: {binary: openmp-simd-3.s, cflags: "-fopenmp-simd -fdump-tree-original\n
        -S"}
  group: GRPSERIAL
test_ordered-1_276:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/ordered-1.c'
    sources: {binary: ordered-1.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_ordered-1_467:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/ordered-1.c'
    sources: {binary: ordered-1.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_ordered-1_85:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/ordered-1.c'
    sources: {binary: ordered-1.s, cflags: "-fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_ordered-2_277:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/ordered-2.c'
    sources: {binary: ordered-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          expression")[^\n]*\n?)+'}
test_ordered-2_468:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/ordered-2.c'
    sources: {binary: ordered-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          expression")[^\n]*\n?)+'}
test_ordered-2_86:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/ordered-2.c'
    sources: {binary: ordered-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("region
          may not be closely nested inside of")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          expression")[^\n]*\n?)+'}
test_parallel-1_278:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/parallel-1.c'
    sources: {binary: parallel-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_parallel-1_469:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/parallel-1.c'
    sources: {binary: parallel-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_parallel-1_87:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/parallel-1.c'
    sources: {binary: parallel-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_parallel-2_279:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/parallel-2.c'
    sources: {binary: parallel-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing")[^\n]*\n?)+'}
test_parallel-2_470:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/parallel-2.c'
    sources: {binary: parallel-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing")[^\n]*\n?)+'}
test_parallel-2_88:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/parallel-2.c'
    sources: {binary: parallel-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing")[^\n]*\n?)+'}
test_parallel-3_280:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/parallel-3.c'
    sources: {binary: parallel-3.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_parallel-3_471:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/parallel-3.c'
    sources: {binary: parallel-3.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_parallel-3_89:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/parallel-3.c'
    sources: {binary: parallel-3.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_parallel-4_281:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/parallel-4.c'
    sources: {binary: parallel-4.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''nowait\''")[^\n]*\n?)+'}
test_parallel-4_472:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/parallel-4.c'
    sources: {binary: parallel-4.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''nowait\''")[^\n]*\n?)+'}
test_parallel-4_90:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/parallel-4.c'
    sources: {binary: parallel-4.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''nowait\''")[^\n]*\n?)+'}
test_pr25874_282:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr25874.c'
    sources: {binary: pr25874.s, cflags: "-O -fopenmp\n -S"}
  group: GRPSERIAL
test_pr25874_473:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr25874.c'
    sources: {binary: pr25874.s, cflags: "-O -fopenmp\n -S"}
  group: GRPSERIAL
test_pr25874_91:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr25874.c'
    sources: {binary: pr25874.s, cflags: "-O -fopenmp\n -S"}
  group: GRPSERIAL
test_pr25989_283:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr25989.c'
    sources: {binary: pr25989.s, cflags: "-O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr25989_474:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr25989.c'
    sources: {binary: pr25989.s, cflags: "-O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr25989_92:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr25989.c'
    sources: {binary: pr25989.s, cflags: "-O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr25990_284:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr25990.c'
    sources: {binary: pr25990.s, cflags: "-fopenmp -O2 -std=c99\n -S"}
  group: GRPSERIAL
test_pr25990_475:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr25990.c'
    sources: {binary: pr25990.s, cflags: "-fopenmp -O2 -std=c99\n -S"}
  group: GRPSERIAL
test_pr25990_93:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr25990.c'
    sources: {binary: pr25990.s, cflags: "-fopenmp -O2 -std=c99\n -S"}
  group: GRPSERIAL
test_pr25996_285:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr25996.c'
    sources: {binary: pr25996.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|invalid
          controlling predicate")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|invalid
          increment expression")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|for
          each function")[^\n]*\n?)+'}
test_pr25996_476:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr25996.c'
    sources: {binary: pr25996.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|invalid
          controlling predicate")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|invalid
          increment expression")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|for
          each function")[^\n]*\n?)+'}
test_pr25996_94:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr25996.c'
    sources: {binary: pr25996.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|invalid
          controlling predicate")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|invalid
          increment expression")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared|for
          each function")[^\n]*\n?)+'}
test_pr26412_286:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr26412.c'
    sources: {binary: pr26412.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr26412_477:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr26412.c'
    sources: {binary: pr26412.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr26412_95:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr26412.c'
    sources: {binary: pr26412.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr27328_287:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr27328.c'
    sources: {binary: pr27328.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr27328_478:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr27328.c'
    sources: {binary: pr27328.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr27328_96:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr27328.c'
    sources: {binary: pr27328.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr27358_288:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr27358.c'
    sources: {binary: pr27358.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_pr27358_479:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr27358.c'
    sources: {binary: pr27358.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_pr27358_97:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr27358.c'
    sources: {binary: pr27358.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_pr27388-1_289:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr27388-1.c'
    sources: {binary: pr27388-1.s, cflags: "-fopenmp -fdump-tree-omplower\n -S"}
  group: GRPSERIAL
test_pr27388-1_480:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr27388-1.c'
    sources: {binary: pr27388-1.s, cflags: "-fopenmp -fdump-tree-omplower\n -S"}
  group: GRPSERIAL
test_pr27388-1_98:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr27388-1.c'
    sources: {binary: pr27388-1.s, cflags: "-fopenmp -fdump-tree-omplower\n -S"}
  group: GRPSERIAL
test_pr27388-2_290:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr27388-2.c'
    sources: {binary: pr27388-2.s, cflags: "-fopenmp -fdump-tree-omplower\n -S"}
  group: GRPSERIAL
test_pr27388-2_481:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr27388-2.c'
    sources: {binary: pr27388-2.s, cflags: "-fopenmp -fdump-tree-omplower\n -S"}
  group: GRPSERIAL
test_pr27388-2_99:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr27388-2.c'
    sources: {binary: pr27388-2.s, cflags: "-fopenmp -fdump-tree-omplower\n -S"}
  group: GRPSERIAL
test_pr27388-3_100:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr27388-3.c'
    sources: {binary: pr27388-3.s, cflags: "-fopenmp -fdump-tree-omplower\n -S"}
  group: GRPSERIAL
test_pr27388-3_291:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr27388-3.c'
    sources: {binary: pr27388-3.s, cflags: "-fopenmp -fdump-tree-omplower\n -S"}
  group: GRPSERIAL
test_pr27388-3_482:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr27388-3.c'
    sources: {binary: pr27388-3.s, cflags: "-fopenmp -fdump-tree-omplower\n -S"}
  group: GRPSERIAL
test_pr27415_101:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr27415.c'
    sources: {binary: pr27415.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("should
          not be firstprivate")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("should
          not be reduction")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("should
          not be reduction")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("should
          not be firstprivate")[^\n]*\n?)+'}
test_pr27415_292:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr27415.c'
    sources: {binary: pr27415.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("should
          not be firstprivate")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("should
          not be reduction")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("should
          not be reduction")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("should
          not be firstprivate")[^\n]*\n?)+'}
test_pr27415_483:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr27415.c'
    sources: {binary: pr27415.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("should
          not be firstprivate")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("should
          not be reduction")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("should
          not be reduction")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("should
          not be firstprivate")[^\n]*\n?)+'}
test_pr27416_102:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr27416.c'
    sources: {binary: pr27416.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          private in outer context")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          private in outer context")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          private in outer context")[^\n]*\n?)+'}
test_pr27416_293:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr27416.c'
    sources: {binary: pr27416.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          private in outer context")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          private in outer context")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          private in outer context")[^\n]*\n?)+'}
test_pr27416_484:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr27416.c'
    sources: {binary: pr27416.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          private in outer context")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          private in outer context")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          private in outer context")[^\n]*\n?)+'}
test_pr27499_103:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr27499.c'
    sources: {binary: pr27499.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr27499_294:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr27499.c'
    sources: {binary: pr27499.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr27499_485:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr27499.c'
    sources: {binary: pr27499.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr29955_104:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr29955.c'
    sources: {binary: pr29955.s, cflags: "-O2 -fopenmp -fexceptions\n -S"}
  group: GRPSERIAL
test_pr29955_295:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr29955.c'
    sources: {binary: pr29955.s, cflags: "-O2 -fopenmp -fexceptions\n -S"}
  group: GRPSERIAL
test_pr29955_486:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr29955.c'
    sources: {binary: pr29955.s, cflags: "-O2 -fopenmp -fexceptions\n -S"}
  group: GRPSERIAL
test_pr29965-1_105:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr29965-1.c'
    sources: {binary: pr29965-1.s, cflags: "-O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr29965-1_296:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr29965-1.c'
    sources: {binary: pr29965-1.s, cflags: "-O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr29965-1_487:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr29965-1.c'
    sources: {binary: pr29965-1.s, cflags: "-O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr29965-2_106:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr29965-2.c'
    sources: {binary: pr29965-2.s, cflags: "-O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr29965-2_297:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr29965-2.c'
    sources: {binary: pr29965-2.s, cflags: "-O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr29965-2_488:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr29965-2.c'
    sources: {binary: pr29965-2.s, cflags: "-O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr29965-3_107:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr29965-3.c'
    sources: {binary: pr29965-3.s, cflags: "-O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr29965-3_298:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr29965-3.c'
    sources: {binary: pr29965-3.s, cflags: "-O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr29965-3_489:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr29965-3.c'
    sources: {binary: pr29965-3.s, cflags: "-O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr29965-4_108:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr29965-4.c'
    sources: {binary: pr29965-4.s, cflags: "-O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr29965-4_299:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr29965-4.c'
    sources: {binary: pr29965-4.s, cflags: "-O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr29965-4_490:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr29965-4.c'
    sources: {binary: pr29965-4.s, cflags: "-O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr29965-5_109:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr29965-5.c'
    sources: {binary: pr29965-5.s, cflags: "-O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr29965-5_300:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr29965-5.c'
    sources: {binary: pr29965-5.s, cflags: "-O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr29965-5_491:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr29965-5.c'
    sources: {binary: pr29965-5.s, cflags: "-O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr29965-6_110:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr29965-6.c'
    sources: {binary: pr29965-6.s, cflags: "-O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr29965-6_301:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr29965-6.c'
    sources: {binary: pr29965-6.s, cflags: "-O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr29965-6_492:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr29965-6.c'
    sources: {binary: pr29965-6.s, cflags: "-O2 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr30421_111:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr30421.c'
    sources: {binary: pr30421.s, cflags: "-O2 -fopenmp -Wall\n -S"}
  group: GRPSERIAL
test_pr30421_302:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr30421.c'
    sources: {binary: pr30421.s, cflags: "-O2 -fopenmp -Wall\n -S"}
  group: GRPSERIAL
test_pr30421_493:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr30421.c'
    sources: {binary: pr30421.s, cflags: "-O2 -fopenmp -Wall\n -S"}
  group: GRPSERIAL
test_pr30494_112:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr30494.c'
    sources: {binary: pr30494.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr30494_303:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr30494.c'
    sources: {binary: pr30494.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr30494_494:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr30494.c'
    sources: {binary: pr30494.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr32468-1_113:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr32468-1.c'
    sources: {binary: pr32468-1.s, cflags: "-O2 -fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_pr32468-1_304:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr32468-1.c'
    sources: {binary: pr32468-1.s, cflags: "-O2 -fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_pr32468-1_495:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr32468-1.c'
    sources: {binary: pr32468-1.s, cflags: "-O2 -fopenmp -fdump-tree-ompexp\n -S"}
  group: GRPSERIAL
test_pr34607_114:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr34607.c'
    sources: {binary: pr34607.s, cflags: "-fopenmp -std=gnu99\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unknown
          type name")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unknown
          type name")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          expression before")[^\n]*\n?)+'}
test_pr34607_305:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr34607.c'
    sources: {binary: pr34607.s, cflags: "-fopenmp -std=gnu99\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unknown
          type name")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unknown
          type name")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          expression before")[^\n]*\n?)+'}
test_pr34607_496:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr34607.c'
    sources: {binary: pr34607.s, cflags: "-fopenmp -std=gnu99\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unknown
          type name")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("unknown
          type name")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          expression before")[^\n]*\n?)+'}
test_pr34692_115:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr34692.c'
    sources: {binary: pr34692.s, cflags: "-fopenmp -fdump-tree-gimple\n -S"}
  group: GRPSERIAL
test_pr34692_306:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr34692.c'
    sources: {binary: pr34692.s, cflags: "-fopenmp -fdump-tree-gimple\n -S"}
  group: GRPSERIAL
test_pr34692_497:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr34692.c'
    sources: {binary: pr34692.s, cflags: "-fopenmp -fdump-tree-gimple\n -S"}
  group: GRPSERIAL
test_pr34694_116:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr34694.c'
    sources: {binary: pr34694.s, cflags: "-O -fopenmp -Wall\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized")[^\n]*\n?)+'}
test_pr34694_307:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr34694.c'
    sources: {binary: pr34694.s, cflags: "-O -fopenmp -Wall\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized")[^\n]*\n?)+'}
test_pr34694_498:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr34694.c'
    sources: {binary: pr34694.s, cflags: "-O -fopenmp -Wall\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("is
          used uninitialized")[^\n]*\n?)+'}
test_pr34964_117:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr34964.c'
    sources: {binary: pr34964.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          initializer")[^\n]*\n?)+'}
test_pr34964_308:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr34964.c'
    sources: {binary: pr34964.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          initializer")[^\n]*\n?)+'}
test_pr34964_499:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr34964.c'
    sources: {binary: pr34964.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          initializer")[^\n]*\n?)+'}
test_pr35244_118:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr35244.c'
    sources: {binary: pr35244.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          identifier before")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          identifier before")[^\n]*\n?)+'}
test_pr35244_309:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr35244.c'
    sources: {binary: pr35244.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          identifier before")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          identifier before")[^\n]*\n?)+'}
test_pr35244_500:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr35244.c'
    sources: {binary: pr35244.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          identifier before")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          identifier before")[^\n]*\n?)+'}
test_pr35438_119:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr35438.c'
    sources: {binary: pr35438.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a variable")[^\n]*\n?)+'}
test_pr35438_310:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr35438.c'
    sources: {binary: pr35438.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a variable")[^\n]*\n?)+'}
test_pr35438_501:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr35438.c'
    sources: {binary: pr35438.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          not a variable")[^\n]*\n?)+'}
test_pr35439_120:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr35439.c'
    sources: {binary: pr35439.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          of voids")[^\n]*\n?)+'}
test_pr35439_311:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr35439.c'
    sources: {binary: pr35439.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          of voids")[^\n]*\n?)+'}
test_pr35439_502:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr35439.c'
    sources: {binary: pr35439.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          of voids")[^\n]*\n?)+'}
test_pr35738_121:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr35738.c'
    sources: {binary: pr35738.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("makes
          integer from pointer without a cast")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("makes
          integer from pointer without a cast")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("makes
          integer from pointer without a cast")[^\n]*\n?)+'}
test_pr35738_312:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr35738.c'
    sources: {binary: pr35738.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("makes
          integer from pointer without a cast")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("makes
          integer from pointer without a cast")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("makes
          integer from pointer without a cast")[^\n]*\n?)+'}
test_pr35738_503:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr35738.c'
    sources: {binary: pr35738.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("makes
          integer from pointer without a cast")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("makes
          integer from pointer without a cast")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("makes
          integer from pointer without a cast")[^\n]*\n?)+'}
test_pr35751_122:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr35751.c'
    sources: {binary: pr35751.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          have no linkage|storage size of")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("storage
          size of")[^\n]*\n?)+'}
test_pr35751_313:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr35751.c'
    sources: {binary: pr35751.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          have no linkage|storage size of")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("storage
          size of")[^\n]*\n?)+'}
test_pr35751_504:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr35751.c'
    sources: {binary: pr35751.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          have no linkage|storage size of")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("storage
          size of")[^\n]*\n?)+'}
test_pr35818_123:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr35818.c'
    sources: {binary: pr35818.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr35818_314:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr35818.c'
    sources: {binary: pr35818.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr35818_505:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr35818.c'
    sources: {binary: pr35818.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr36790_124:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr36790.c'
    sources: {binary: pr36790.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr36790_315:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr36790.c'
    sources: {binary: pr36790.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr36790_506:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr36790.c'
    sources: {binary: pr36790.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr38633_125:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr38633.c'
    sources: {binary: pr38633.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr38633_316:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr38633.c'
    sources: {binary: pr38633.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr38633_507:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr38633.c'
    sources: {binary: pr38633.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr38676_126:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr38676.c'
    sources: {binary: pr38676.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr38676_317:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr38676.c'
    sources: {binary: pr38676.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr38676_508:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr38676.c'
    sources: {binary: pr38676.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr39495-1_127:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr39495-1.c'
    sources: {binary: pr39495-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr39495-1_318:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr39495-1.c'
    sources: {binary: pr39495-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr39495-1_509:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr39495-1.c'
    sources: {binary: pr39495-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr39495-2_128:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr39495-2.c'
    sources: {binary: pr39495-2.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          controlling predicate")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          controlling predicate")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          controlling predicate")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          controlling predicate")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          controlling predicate")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          controlling predicate")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          controlling predicate")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          controlling predicate")[^\n]*\n?)+'}
test_pr39495-2_319:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr39495-2.c'
    sources: {binary: pr39495-2.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          controlling predicate")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          controlling predicate")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          controlling predicate")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          controlling predicate")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          controlling predicate")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          controlling predicate")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          controlling predicate")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          controlling predicate")[^\n]*\n?)+'}
test_pr39495-2_510:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr39495-2.c'
    sources: {binary: pr39495-2.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          controlling predicate")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          controlling predicate")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          controlling predicate")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          controlling predicate")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          controlling predicate")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          controlling predicate")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          controlling predicate")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          controlling predicate")[^\n]*\n?)+'}
test_pr46032-2_129:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr46032-2.c'
    sources: {binary: pr46032-2.s, cflags: "-O2 -fopenmp -std=c99 -fipa-pta -fdump-tree-optimized\n
        -S"}
  group: GRPSERIAL
test_pr46032-2_320:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr46032-2.c'
    sources: {binary: pr46032-2.s, cflags: "-O2 -fopenmp -std=c99 -fipa-pta -fdump-tree-optimized\n
        -S"}
  group: GRPSERIAL
test_pr46032-2_511:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr46032-2.c'
    sources: {binary: pr46032-2.s, cflags: "-O2 -fopenmp -std=c99 -fipa-pta -fdump-tree-optimized\n
        -S"}
  group: GRPSERIAL
test_pr46032-3_130:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr46032-3.c'
    sources: {binary: pr46032-3.s, cflags: "-O2 -fopenmp -std=c99 -fipa-pta -fdump-tree-optimized\n
        -S"}
  group: GRPSERIAL
test_pr46032-3_321:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr46032-3.c'
    sources: {binary: pr46032-3.s, cflags: "-O2 -fopenmp -std=c99 -fipa-pta -fdump-tree-optimized\n
        -S"}
  group: GRPSERIAL
test_pr46032-3_512:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr46032-3.c'
    sources: {binary: pr46032-3.s, cflags: "-O2 -fopenmp -std=c99 -fipa-pta -fdump-tree-optimized\n
        -S"}
  group: GRPSERIAL
test_pr47963_131:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr47963.c'
    sources: {binary: pr47963.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          non-integer type")[^\n]*\n?)+'}
test_pr47963_322:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr47963.c'
    sources: {binary: pr47963.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          non-integer type")[^\n]*\n?)+'}
test_pr47963_513:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr47963.c'
    sources: {binary: pr47963.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          non-integer type")[^\n]*\n?)+'}
test_pr48591_132:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr48591.c'
    sources: {binary: pr48591.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr48591_323:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr48591.c'
    sources: {binary: pr48591.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr48591_514:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr48591.c'
    sources: {binary: pr48591.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr48716_133:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr48716.c'
    sources: {binary: pr48716.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr48716_324:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr48716.c'
    sources: {binary: pr48716.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr48716_515:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr48716.c'
    sources: {binary: pr48716.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr49640_134:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr49640.c'
    sources: {binary: pr49640.s, cflags: "-O2 -std=gnu99 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr49640_325:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr49640.c'
    sources: {binary: pr49640.s, cflags: "-O2 -std=gnu99 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr49640_516:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr49640.c'
    sources: {binary: pr49640.s, cflags: "-O2 -std=gnu99 -fopenmp\n -S"}
  group: GRPSERIAL
test_pr51339_135:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr51339.c'
    sources: {binary: pr51339.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr51339_326:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr51339.c'
    sources: {binary: pr51339.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr51339_517:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr51339.c'
    sources: {binary: pr51339.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr53992_136:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr53992.c'
    sources: {binary: pr53992.s, cflags: "-fgnu-tm -fopenmp\n -S"}
  group: GRPSERIAL
test_pr53992_327:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr53992.c'
    sources: {binary: pr53992.s, cflags: "-fgnu-tm -fopenmp\n -S"}
  group: GRPSERIAL
test_pr53992_518:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr53992.c'
    sources: {binary: pr53992.s, cflags: "-fgnu-tm -fopenmp\n -S"}
  group: GRPSERIAL
test_pr57412_137:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr57412.c'
    sources: {binary: pr57412.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr57412_328:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr57412.c'
    sources: {binary: pr57412.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr57412_519:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr57412.c'
    sources: {binary: pr57412.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr58809_138:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr58809.c'
    sources: {binary: pr58809.s, cflags: "-fopenmp -O\n -S"}
  group: GRPSERIAL
test_pr58809_329:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr58809.c'
    sources: {binary: pr58809.s, cflags: "-fopenmp -O\n -S"}
  group: GRPSERIAL
test_pr58809_520:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr58809.c'
    sources: {binary: pr58809.s, cflags: "-fopenmp -O\n -S"}
  group: GRPSERIAL
test_pr59669-1_139:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr59669-1.c'
    sources: {binary: pr59669-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr59669-1_330:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr59669-1.c'
    sources: {binary: pr59669-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr59669-1_521:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr59669-1.c'
    sources: {binary: pr59669-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr59669-2_140:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr59669-2.c'
    sources: {binary: pr59669-2.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr59669-2_331:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr59669-2.c'
    sources: {binary: pr59669-2.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr59669-2_522:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr59669-2.c'
    sources: {binary: pr59669-2.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr60534_141:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr60534.c'
    sources: {binary: pr60534.s, cflags: "-fopenmp -O -fno-tree-loop-optimize\n -S"}
  group: GRPSERIAL
test_pr60534_332:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr60534.c'
    sources: {binary: pr60534.s, cflags: "-fopenmp -O -fno-tree-loop-optimize\n -S"}
  group: GRPSERIAL
test_pr60534_523:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr60534.c'
    sources: {binary: pr60534.s, cflags: "-fopenmp -O -fno-tree-loop-optimize\n -S"}
  group: GRPSERIAL
test_pr66633-1_142:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr66633-1.c'
    sources: {binary: pr66633-1.s, cflags: "-fopenmp -O1\n -S"}
  group: GRPSERIAL
test_pr66633-1_333:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr66633-1.c'
    sources: {binary: pr66633-1.s, cflags: "-fopenmp -O1\n -S"}
  group: GRPSERIAL
test_pr66633-1_524:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr66633-1.c'
    sources: {binary: pr66633-1.s, cflags: "-fopenmp -O1\n -S"}
  group: GRPSERIAL
test_pr66633-2_143:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr66633-2.c'
    sources: {binary: pr66633-2.s, cflags: "-fopenmp -O0\n -S"}
  group: GRPSERIAL
test_pr66633-2_334:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr66633-2.c'
    sources: {binary: pr66633-2.s, cflags: "-fopenmp -O0\n -S"}
  group: GRPSERIAL
test_pr66633-2_525:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr66633-2.c'
    sources: {binary: pr66633-2.s, cflags: "-fopenmp -O0\n -S"}
  group: GRPSERIAL
test_pr66633-3_144:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr66633-3.c'
    sources: {binary: pr66633-3.s, cflags: "-fopenmp -O1\n -S"}
  group: GRPSERIAL
test_pr66633-3_335:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr66633-3.c'
    sources: {binary: pr66633-3.s, cflags: "-fopenmp -O1\n -S"}
  group: GRPSERIAL
test_pr66633-3_526:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr66633-3.c'
    sources: {binary: pr66633-3.s, cflags: "-fopenmp -O1\n -S"}
  group: GRPSERIAL
test_pr66633-4_145:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr66633-4.c'
    sources: {binary: pr66633-4.s, cflags: "-fopenmp -O0\n -S"}
  group: GRPSERIAL
test_pr66633-4_336:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr66633-4.c'
    sources: {binary: pr66633-4.s, cflags: "-fopenmp -O0\n -S"}
  group: GRPSERIAL
test_pr66633-4_527:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr66633-4.c'
    sources: {binary: pr66633-4.s, cflags: "-fopenmp -O0\n -S"}
  group: GRPSERIAL
test_pr66820_146:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr66820.c'
    sources: {binary: pr66820.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr66820_337:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr66820.c'
    sources: {binary: pr66820.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr66820_528:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr66820.c'
    sources: {binary: pr66820.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_pr67495_147:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr67495.c'
    sources: {binary: pr67495.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operator")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("uses
          two different expressions for memory")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operator")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
test_pr67495_338:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr67495.c'
    sources: {binary: pr67495.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operator")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("uses
          two different expressions for memory")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operator")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
test_pr67495_529:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr67495.c'
    sources: {binary: pr67495.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operator")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("uses
          two different expressions for memory")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operator")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue
          required")[^\n]*\n?)+'}
test_pr67500_148:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr67500.c'
    sources: {binary: pr67500.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          expression must be positive constant integer expression")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be positive constant integer expression")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be positive constant integer expression")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be positive constant integer expression")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be positive constant integer expression")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be positive constant integer expression")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be positive constant integer expression")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be positive constant integer expression")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be positive constant integer expression")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          expression must be positive constant integer expression")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared
          here")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          expression must be positive constant integer expression")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          expression must be positive constant integer expression")[^\n]*\n?)+'}
test_pr67500_339:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr67500.c'
    sources: {binary: pr67500.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          expression must be positive constant integer expression")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be positive constant integer expression")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be positive constant integer expression")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be positive constant integer expression")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be positive constant integer expression")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be positive constant integer expression")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be positive constant integer expression")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be positive constant integer expression")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be positive constant integer expression")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          expression must be positive constant integer expression")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared
          here")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          expression must be positive constant integer expression")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          expression must be positive constant integer expression")[^\n]*\n?)+'}
test_pr67500_530:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr67500.c'
    sources: {binary: pr67500.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          expression must be positive constant integer expression")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be positive constant integer expression")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be positive constant integer expression")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be positive constant integer expression")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be positive constant integer expression")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be positive constant integer expression")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be positive constant integer expression")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be positive constant integer expression")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be positive constant integer expression")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          expression must be positive constant integer expression")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared
          here")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          expression must be positive constant integer expression")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("clause
          expression must be positive constant integer expression")[^\n]*\n?)+'}
test_pr68128-1_149:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr68128-1.c'
    sources: {binary: pr68128-1.s, cflags: "-Ofast -fopenmp -fdump-tree-vect-details
        -mavx\n -S"}
  group: GRPSERIAL
test_pr68128-1_340:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr68128-1.c'
    sources: {binary: pr68128-1.s, cflags: "-Ofast -fopenmp -fdump-tree-vect-details
        -mavx\n -S"}
  group: GRPSERIAL
test_pr68128-1_531:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr68128-1.c'
    sources: {binary: pr68128-1.s, cflags: "-Ofast -fopenmp -fdump-tree-vect-details
        -mavx\n -S"}
  group: GRPSERIAL
test_pr68128-2_150:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr68128-2.c'
    sources: {binary: pr68128-2.s, cflags: "-fopenmp -Wno-hsa -O2 -fdump-tree-omplower\n
        -S"}
  group: GRPSERIAL
test_pr68128-2_341:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr68128-2.c'
    sources: {binary: pr68128-2.s, cflags: "-fopenmp -Wno-hsa -O2 -fdump-tree-omplower\n
        -S"}
  group: GRPSERIAL
test_pr68128-2_532:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr68128-2.c'
    sources: {binary: pr68128-2.s, cflags: "-fopenmp -Wno-hsa -O2 -fdump-tree-omplower\n
        -S"}
  group: GRPSERIAL
test_pr68640_151:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr68640.c'
    sources: {binary: pr68640.s, cflags: "-O2 -fopenmp -fdump-tree-ealias-all\n -S"}
  group: GRPSERIAL
test_pr68640_342:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr68640.c'
    sources: {binary: pr68640.s, cflags: "-O2 -fopenmp -fdump-tree-ealias-all\n -S"}
  group: GRPSERIAL
test_pr68640_533:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr68640.c'
    sources: {binary: pr68640.s, cflags: "-O2 -fopenmp -fdump-tree-ealias-all\n -S"}
  group: GRPSERIAL
test_pr72781_152:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr72781.c'
    sources: {binary: pr72781.s, cflags: "-fopenmp -Wno-hsa -O2 -Wuninitialized\n
        -S"}
  group: GRPSERIAL
test_pr72781_343:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr72781.c'
    sources: {binary: pr72781.s, cflags: "-fopenmp -Wno-hsa -O2 -Wuninitialized\n
        -S"}
  group: GRPSERIAL
test_pr72781_534:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr72781.c'
    sources: {binary: pr72781.s, cflags: "-fopenmp -Wno-hsa -O2 -Wuninitialized\n
        -S"}
  group: GRPSERIAL
test_pr81768-1_153:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr81768-1.c'
    sources: {binary: pr81768-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr81768-1_344:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr81768-1.c'
    sources: {binary: pr81768-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr81768-1_535:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr81768-1.c'
    sources: {binary: pr81768-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr81768-2_154:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr81768-2.c'
    sources: {binary: pr81768-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr81768-2_345:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr81768-2.c'
    sources: {binary: pr81768-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_pr81768-2_536:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr81768-2.c'
    sources: {binary: pr81768-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_preprocess-1_155:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/preprocess-1.c'
    sources: {binary: preprocess-1.i, cflags: "-fopenmp -Wno-hsa\n -E"}
  group: GRPSERIAL
test_preprocess-1_346:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/preprocess-1.c'
    sources: {binary: preprocess-1.i, cflags: "-fopenmp -Wno-hsa\n -E"}
  group: GRPSERIAL
test_preprocess-1_537:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/preprocess-1.c'
    sources: {binary: preprocess-1.i, cflags: "-fopenmp -Wno-hsa\n -E"}
  group: GRPSERIAL
test_reduction-1_156:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/reduction-1.c'
    sources: {binary: reduction-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          a zero size array")[^\n]*\n?)+'}
test_reduction-1_347:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/reduction-1.c'
    sources: {binary: reduction-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          a zero size array")[^\n]*\n?)+'}
test_reduction-1_538:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/reduction-1.c'
    sources: {binary: reduction-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          length array section")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is
          a zero size array")[^\n]*\n?)+'}
test_sections-1_157:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sections-1.c'
    sources: {binary: sections-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_sections-1_348:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sections-1.c'
    sources: {binary: sections-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_sections-1_539:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sections-1.c'
    sources: {binary: sections-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_sections-2_158:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sections-2.c'
    sources: {binary: sections-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
test_sections-2_349:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sections-2.c'
    sources: {binary: sections-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
test_sections-2_540:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sections-2.c'
    sources: {binary: sections-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
test_sections-3_159:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sections-3.c'
    sources: {binary: sections-3.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''nowait\''")[^\n]*\n?)+'}
test_sections-3_350:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sections-3.c'
    sources: {binary: sections-3.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''nowait\''")[^\n]*\n?)+'}
test_sections-3_541:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sections-3.c'
    sources: {binary: sections-3.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''nowait\''")[^\n]*\n?)+'}
test_sections-4_160:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sections-4.c'
    sources: {binary: sections-4.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in")[^\n]*\n?)+'}
test_sections-4_351:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sections-4.c'
    sources: {binary: sections-4.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in")[^\n]*\n?)+'}
test_sections-4_542:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sections-4.c'
    sources: {binary: sections-4.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may
          only be used in")[^\n]*\n?)+'}
test_sharing-1_161:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sharing-1.c'
    sources: {binary: sharing-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing
          \''parallel\''")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in")[^\n]*\n?)+'}
test_sharing-1_352:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sharing-1.c'
    sources: {binary: sharing-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing
          \''parallel\''")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in")[^\n]*\n?)+'}
test_sharing-1_543:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sharing-1.c'
    sources: {binary: sharing-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing
          \''parallel\''")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          specified in")[^\n]*\n?)+'}
test_sharing-2_162:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sharing-2.c'
    sources: {binary: sharing-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_sharing-2_353:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sharing-2.c'
    sources: {binary: sharing-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_sharing-2_544:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sharing-2.c'
    sources: {binary: sharing-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_sharing-3_163:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sharing-3.c'
    sources: {binary: sharing-3.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_sharing-3_354:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sharing-3.c'
    sources: {binary: sharing-3.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_sharing-3_545:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sharing-3.c'
    sources: {binary: sharing-3.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_simd-clones-1_164:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/simd-clones-1.c'
    sources: {binary: simd-clones-1.s, cflags: "-fopenmp -fdump-tree-optimized -O3\n
        -S"}
  group: GRPSERIAL
test_simd-clones-1_355:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/simd-clones-1.c'
    sources: {binary: simd-clones-1.s, cflags: "-fopenmp -fdump-tree-optimized -O3\n
        -S"}
  group: GRPSERIAL
test_simd-clones-1_546:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/simd-clones-1.c'
    sources: {binary: simd-clones-1.s, cflags: "-fopenmp -fdump-tree-optimized -O3\n
        -S"}
  group: GRPSERIAL
test_simd-clones-2_165:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/simd-clones-2.c'
    sources: {binary: simd-clones-2.s, cflags: "-fopenmp -fdump-tree-optimized -O\n
        -S"}
  group: GRPSERIAL
test_simd-clones-2_356:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/simd-clones-2.c'
    sources: {binary: simd-clones-2.s, cflags: "-fopenmp -fdump-tree-optimized -O\n
        -S"}
  group: GRPSERIAL
test_simd-clones-2_547:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/simd-clones-2.c'
    sources: {binary: simd-clones-2.s, cflags: "-fopenmp -fdump-tree-optimized -O\n
        -S"}
  group: GRPSERIAL
test_simd-clones-3_166:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/simd-clones-3.c'
    sources: {binary: simd-clones-3.s, cflags: "-fopenmp -fdump-tree-optimized -O2\n
        -S"}
  group: GRPSERIAL
test_simd-clones-3_357:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/simd-clones-3.c'
    sources: {binary: simd-clones-3.s, cflags: "-fopenmp -fdump-tree-optimized -O2\n
        -S"}
  group: GRPSERIAL
test_simd-clones-3_548:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/simd-clones-3.c'
    sources: {binary: simd-clones-3.s, cflags: "-fopenmp -fdump-tree-optimized -O2\n
        -S"}
  group: GRPSERIAL
test_simd-clones-4_167:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/simd-clones-4.c'
    sources: {binary: simd-clones-4.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_simd-clones-4_358:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/simd-clones-4.c'
    sources: {binary: simd-clones-4.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_simd-clones-4_549:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/simd-clones-4.c'
    sources: {binary: simd-clones-4.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_simd-clones-5_168:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/simd-clones-5.c'
    sources: {binary: simd-clones-5.s, cflags: "-fopenmp -w\n -S"}
  group: GRPSERIAL
test_simd-clones-5_359:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/simd-clones-5.c'
    sources: {binary: simd-clones-5.s, cflags: "-fopenmp -w\n -S"}
  group: GRPSERIAL
test_simd-clones-5_550:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/simd-clones-5.c'
    sources: {binary: simd-clones-5.s, cflags: "-fopenmp -w\n -S"}
  group: GRPSERIAL
test_simd-clones-6_169:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/simd-clones-6.c'
    sources: {binary: simd-clones-6.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_simd-clones-6_360:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/simd-clones-6.c'
    sources: {binary: simd-clones-6.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_simd-clones-6_551:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/simd-clones-6.c'
    sources: {binary: simd-clones-6.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
test_simd-clones-7_170:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/simd-clones-7.c'
    sources: {binary: simd-clones-7.s, cflags: "-fopenmp -w\n -S"}
  group: GRPSERIAL
test_simd-clones-7_361:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/simd-clones-7.c'
    sources: {binary: simd-clones-7.s, cflags: "-fopenmp -w\n -S"}
  group: GRPSERIAL
test_simd-clones-7_552:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/simd-clones-7.c'
    sources: {binary: simd-clones-7.s, cflags: "-fopenmp -w\n -S"}
  group: GRPSERIAL
test_sink-fold-1_171:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sink-fold-1.c'
    sources: {binary: sink-fold-1.s, cflags: "-fopenmp -fdump-tree-omplower\n -S"}
  group: GRPSERIAL
test_sink-fold-1_362:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sink-fold-1.c'
    sources: {binary: sink-fold-1.s, cflags: "-fopenmp -fdump-tree-omplower\n -S"}
  group: GRPSERIAL
test_sink-fold-1_553:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sink-fold-1.c'
    sources: {binary: sink-fold-1.s, cflags: "-fopenmp -fdump-tree-omplower\n -S"}
  group: GRPSERIAL
test_sink-fold-2_172:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sink-fold-2.c'
    sources: {binary: sink-fold-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("refers
          to iteration never in the iteration space")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("waiting
          for lexically later iteration")[^\n]*\n?)+'}
test_sink-fold-2_363:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sink-fold-2.c'
    sources: {binary: sink-fold-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("refers
          to iteration never in the iteration space")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("waiting
          for lexically later iteration")[^\n]*\n?)+'}
test_sink-fold-2_554:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sink-fold-2.c'
    sources: {binary: sink-fold-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("refers
          to iteration never in the iteration space")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("waiting
          for lexically later iteration")[^\n]*\n?)+'}
test_sink-fold-3_173:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sink-fold-3.c'
    sources: {binary: sink-fold-3.s, cflags: "-fopenmp -fdump-tree-omplower\n -S"}
  group: GRPSERIAL
test_sink-fold-3_364:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sink-fold-3.c'
    sources: {binary: sink-fold-3.s, cflags: "-fopenmp -fdump-tree-omplower\n -S"}
  group: GRPSERIAL
test_sink-fold-3_555:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sink-fold-3.c'
    sources: {binary: sink-fold-3.s, cflags: "-fopenmp -fdump-tree-omplower\n -S"}
  group: GRPSERIAL
test_static-chunk-size-one_174:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/static-chunk-size-one.c'
    sources: {binary: static-chunk-size-one.s, cflags: "-fopenmp -O2 -fdump-tree-optimized
        -fno-tree-pre\n -S"}
  group: GRPSERIAL
test_static-chunk-size-one_365:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/static-chunk-size-one.c'
    sources: {binary: static-chunk-size-one.s, cflags: "-fopenmp -O2 -fdump-tree-optimized
        -fno-tree-pre\n -S"}
  group: GRPSERIAL
test_static-chunk-size-one_556:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/static-chunk-size-one.c'
    sources: {binary: static-chunk-size-one.s, cflags: "-fopenmp -O2 -fdump-tree-optimized
        -fno-tree-pre\n -S"}
  group: GRPSERIAL
test_static_175:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/static.c'
    sources: {binary: static.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_static_366:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/static.c'
    sources: {binary: static.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_static_557:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/static.c'
    sources: {binary: static.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_target-1_176:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/target-1.c'
    sources: {binary: target-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
test_target-1_367:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/target-1.c'
    sources: {binary: target-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
test_target-1_558:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/target-1.c'
    sources: {binary: target-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
test_target-2_177:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/target-2.c'
    sources: {binary: target-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
test_target-2_368:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/target-2.c'
    sources: {binary: target-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
test_target-2_559:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/target-2.c'
    sources: {binary: target-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
test_taskgroup-1_178:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/taskgroup-1.c'
    sources: {binary: taskgroup-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
test_taskgroup-1_369:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/taskgroup-1.c'
    sources: {binary: taskgroup-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
test_taskgroup-1_560:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/taskgroup-1.c'
    sources: {binary: taskgroup-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
test_teams-1_179:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/teams-1.c'
    sources: {binary: teams-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
test_teams-1_370:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/teams-1.c'
    sources: {binary: teams-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
test_teams-1_561:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/teams-1.c'
    sources: {binary: teams-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          entry to OpenMP structured block")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          branch to/from OpenMP structured block")[^\n]*\n?)+'}
test_tls-1_180:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/tls-1.c'
    sources: {binary: tls-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("after
          first use")[^\n]*\n?)+'}
test_tls-1_371:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/tls-1.c'
    sources: {binary: tls-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("after
          first use")[^\n]*\n?)+'}
test_tls-1_562:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/tls-1.c'
    sources: {binary: tls-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("after
          first use")[^\n]*\n?)+'}
test_tls-2_181:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/tls-2.c'
    sources: {binary: tls-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("automatic
          variable")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          incomplete type")[^\n]*\n?)+'}
test_tls-2_372:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/tls-2.c'
    sources: {binary: tls-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("automatic
          variable")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          incomplete type")[^\n]*\n?)+'}
test_tls-2_563:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/tls-2.c'
    sources: {binary: tls-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("automatic
          variable")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          incomplete type")[^\n]*\n?)+'}
test_udr-1_182:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/udr-1.c'
    sources: {binary: udr-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared
          arithmetic type")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared
          arithmetic type")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared
          arithmetic type")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared
          arithmetic type")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function
          or array")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function
          or array")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function
          or array")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function
          or array")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function
          or array")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function
          or array")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const,
          volatile or restrict")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const,
          volatile or restrict")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const,
          volatile or restrict")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const,
          volatile or restrict")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared
          arithmetic type")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const,
          volatile or restrict")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const,
          volatile or restrict")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const,
          volatile or restrict")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const,
          volatile or restrict")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared
          arithmetic type")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared
          arithmetic type")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared
          arithmetic type")[^\n]*\n?)+'}
test_udr-1_373:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/udr-1.c'
    sources: {binary: udr-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared
          arithmetic type")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared
          arithmetic type")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared
          arithmetic type")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared
          arithmetic type")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function
          or array")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function
          or array")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function
          or array")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function
          or array")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function
          or array")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function
          or array")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const,
          volatile or restrict")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const,
          volatile or restrict")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const,
          volatile or restrict")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const,
          volatile or restrict")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared
          arithmetic type")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const,
          volatile or restrict")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const,
          volatile or restrict")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const,
          volatile or restrict")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const,
          volatile or restrict")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared
          arithmetic type")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared
          arithmetic type")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared
          arithmetic type")[^\n]*\n?)+'}
test_udr-1_564:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/udr-1.c'
    sources: {binary: udr-1.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared
          arithmetic type")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared
          arithmetic type")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared
          arithmetic type")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared
          arithmetic type")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function
          or array")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function
          or array")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function
          or array")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function
          or array")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function
          or array")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("function
          or array")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const,
          volatile or restrict")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const,
          volatile or restrict")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const,
          volatile or restrict")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const,
          volatile or restrict")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared
          arithmetic type")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const,
          volatile or restrict")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const,
          volatile or restrict")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const,
          volatile or restrict")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("const,
          volatile or restrict")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared
          arithmetic type")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared
          arithmetic type")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("predeclared
          arithmetic type")[^\n]*\n?)+'}
test_udr-2_183:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/udr-2.c'
    sources: {binary: udr-2.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner
          refers to variable")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner
          refers to variable")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner
          refers to variable")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner
          refers to variable")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner
          refers to variable")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner
          refers to variable")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner
          refers to variable")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner
          refers to variable")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner
          refers to variable")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner
          refers to variable")[^\n]*\n?)+'}
test_udr-2_374:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/udr-2.c'
    sources: {binary: udr-2.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner
          refers to variable")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner
          refers to variable")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner
          refers to variable")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner
          refers to variable")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner
          refers to variable")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner
          refers to variable")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner
          refers to variable")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner
          refers to variable")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner
          refers to variable")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner
          refers to variable")[^\n]*\n?)+'}
test_udr-2_565:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/udr-2.c'
    sources: {binary: udr-2.s, cflags: "-fopenmp\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner
          refers to variable")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner
          refers to variable")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner
          refers to variable")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner
          refers to variable")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner
          refers to variable")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner
          refers to variable")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner
          refers to variable")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner
          refers to variable")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          refers to variable")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner
          refers to variable")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("combiner
          refers to variable")[^\n]*\n?)+'}
test_udr-3_184:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/udr-3.c'
    sources: {binary: udr-3.s, cflags: "-fopenmp -std=gnu89\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("one
          of the initializer call arguments should be")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("previous")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("previous")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          at file or block scope")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          at file or block scope")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("previous")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("previous")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before")[^\n]*\n?)+'}
test_udr-3_375:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/udr-3.c'
    sources: {binary: udr-3.s, cflags: "-fopenmp -std=gnu89\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("one
          of the initializer call arguments should be")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("previous")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("previous")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          at file or block scope")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          at file or block scope")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("previous")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("previous")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before")[^\n]*\n?)+'}
test_udr-3_566:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/udr-3.c'
    sources: {binary: udr-3.s, cflags: "-fopenmp -std=gnu89\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("one
          of the initializer call arguments should be")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("previous")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("previous")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          at file or block scope")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          at file or block scope")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("previous")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("previous")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclaration
          of")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("expected
          declaration specifiers before")[^\n]*\n?)+'}
test_udr-4_185:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/udr-4.c'
    sources: {binary: udr-4.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of undefined type")[^\n]*\n?)+'}
test_udr-4_376:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/udr-4.c'
    sources: {binary: udr-4.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of undefined type")[^\n]*\n?)+'}
test_udr-4_567:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/udr-4.c'
    sources: {binary: udr-4.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of undefined type")[^\n]*\n?)+'}
test_uninit-1_186:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/uninit-1.c'
    sources: {binary: uninit-1.s, cflags: "-O -Wuninitialized -fopenmp\n -S"}
  group: GRPSERIAL
test_uninit-1_377:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/uninit-1.c'
    sources: {binary: uninit-1.s, cflags: "-O -Wuninitialized -fopenmp\n -S"}
  group: GRPSERIAL
test_uninit-1_568:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/uninit-1.c'
    sources: {binary: uninit-1.s, cflags: "-O -Wuninitialized -fopenmp\n -S"}
  group: GRPSERIAL
test_vla-1_187:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/vla-1.c'
    sources: {binary: vla-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''A\''
          not specified")[^\n]*\n?)+'}
test_vla-1_378:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/vla-1.c'
    sources: {binary: vla-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''A\''
          not specified")[^\n]*\n?)+'}
test_vla-1_569:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/vla-1.c'
    sources: {binary: vla-1.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enclosing")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''A\''
          not specified")[^\n]*\n?)+'}
test_vla-2_188:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/vla-2.c'
    sources: {binary: vla-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_vla-2_379:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/vla-2.c'
    sources: {binary: vla-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_vla-2_570:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/vla-2.c'
    sources: {binary: vla-2.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_vla-3_189:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/vla-3.c'
    sources: {binary: vla-3.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_vla-3_380:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/vla-3.c'
    sources: {binary: vla-3.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_vla-3_571:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/vla-3.c'
    sources: {binary: vla-3.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_vla-4_190:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/vla-4.c'
    sources: {binary: vla-4.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_vla-4_381:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/vla-4.c'
    sources: {binary: vla-4.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_vla-4_572:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/vla-4.c'
    sources: {binary: vla-4.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_vla-5_191:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/vla-5.c'
    sources: {binary: vla-5.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_vla-5_382:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/vla-5.c'
    sources: {binary: vla-5.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
test_vla-5_573:
  build:
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/vla-5.c'
    sources: {binary: vla-5.s, cflags: "-fopenmp -Wno-hsa\n -S"}
  group: GRPSERIAL
