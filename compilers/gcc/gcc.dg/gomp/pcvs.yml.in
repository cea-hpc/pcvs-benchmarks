---
test__Atomic-1_1:
  build:
    cflags: ' -fopenmp -Wno-hsa -std=c11 -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/_Atomic-1.c'
    sources:
      binary: _Atomic-1.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test__Atomic-2_2:
  build:
    cflags: ' -fopenmp -Wno-hsa -std=c11 -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/_Atomic-2.c'
    sources:
      binary: _Atomic-2.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:9:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' iteration variable 'i'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:12:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' iteration variable 'i'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:15:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' iteration variable 'i'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:18:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' iteration variable 'i'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:21:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' iteration variable 'i'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:24:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' iteration variable 'j'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:27:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' iteration variable 'j'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:30:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' iteration variable 'j'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:33:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' iteration variable 'j'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:36:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' iteration variable 'j'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:45:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' iteration variable 'i'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:48:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' iteration variable 'i'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:51:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' iteration variable 'i'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:54:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' iteration variable 'j'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:57:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' iteration variable 'j'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:60:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' iteration variable 'j'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:70:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' 'j' in 'linear' clause))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:73:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' 'j' in 'linear' clause))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test__Atomic-3_3:
  build:
    cflags: ' -fopenmp -Wno-hsa -std=c11 -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/_Atomic-3.c'
    sources:
      binary: _Atomic-3.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:14:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' 'i' in 'reduction' clause))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:16:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' qualified type in '#pragma omp declare reduction'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:20:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' 'i' in 'reduction' clause))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:22:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' 'k' in 'reduction' clause))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:24:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' \[^\n\r]* in 'reduction' clause))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:31:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' 'p' in 'aligned' clause))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:43:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' expression in '#pragma omp atomic'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:45:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' expression in '#pragma omp atomic'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:47:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' expression in '#pragma omp atomic'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:49:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' expression in '#pragma omp atomic'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:51:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' expression in '#pragma omp atomic'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:53:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' expression in '#pragma omp atomic'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:55:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' expression in '#pragma omp atomic'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:57:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' expression in '#pragma omp atomic'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:60:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' 'x' in 'linear' clause))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test__Atomic-4_4:
  build:
    cflags: ' -fopenmp -Wno-hsa -std=c11 -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/_Atomic-4.c'
    sources:
      binary: _Atomic-4.s
  group: GRPSERIAL
  info:
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:8:)[^
        ]*([0-9]+: warning:[^
        ]*(ignoring '#pragma omp declare simd' on function with '_Atomic' qualified non-'uniform' argument))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test__Atomic-5_5:
  build:
    cflags: ' -fopenmp -Wno-hsa -std=c11 -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/_Atomic-5.c'
    sources:
      binary: _Atomic-5.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:21:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' 'a' in 'map' clause))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:23:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' 'b' in 'map' clause))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:25:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' 'b' in 'map' clause))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:27:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' 'c.a' in 'map' clause))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:30:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' 'c.b' in 'map' clause))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:33:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' 'c' in 'map' clause))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:34:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(must contain at least one" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:36:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' 'c.a' in 'to' clause))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:37:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(must contain at least one" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:39:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' 'c.b' in 'from' clause))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:40:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(must contain at least one" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:42:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' 'c' in 'to' clause))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:43:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(must contain at least one" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:45:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' 'c.c' in 'map' clause))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:48:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' 'p' in 'map' clause))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:50:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' '\[^\n\r]*' in 'map' clause))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:58:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' 'a' in implicit 'map' clause))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:60:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' 'b' in implicit 'map' clause))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:68:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' 'a' in implicit 'firstprivate' clause on 'target' construct))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:70:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' 'a' in 'firstprivate' clause on 'target' construct))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:72:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('_Atomic' 'b' in 'firstprivate' clause on 'target' construct))[^
        ]*
        ?)+
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:28:)[^
        ]*([0-9]+: warning:[^
        ]*(accessing a member 'a' of an atomic structure 'c'" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:31:)[^
        ]*([0-9]+: warning:[^
        ]*(accessing a member 'b' of an atomic structure 'c'" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:38:)[^
        ]*([0-9]+: warning:[^
        ]*(accessing a member 'a' of an atomic structure 'c'" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:41:)[^
        ]*([0-9]+: warning:[^
        ]*(accessing a member 'b' of an atomic structure 'c'" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:46:)[^
        ]*([0-9]+: warning:[^
        ]*(accessing a member 'c' of an atomic structure 'c'" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_asm-1_6:
  build:
    cflags: ' -O2 -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/asm-1.c'
    sources:
      binary: asm-1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-O2 -fopenmp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_atomic-5_7:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/atomic-5.c'
    sources:
      binary: atomic-5.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:12:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid operator))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:16:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid form))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:18:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(read-only variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:20:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(read-only variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:22:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(read-only variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:24:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(register variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:26:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid operator))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:28:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(lvalue required))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:29:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected end of line))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:32:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected expression))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:34:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected expression))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:37:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_atomic-6_8:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/atomic-6.c'
    sources:
      binary: atomic-6.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_barrier-1_9:
  build:
    cflags: ' -fopenmp -fdump-tree-gimple -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/barrier-1.c'
    sources:
      binary: barrier-1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -fdump-tree-gimple"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_barrier-2_10:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/barrier-2.c'
    sources:
      binary: barrier-2.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:5:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected end of line))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:18:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(label at end of compound statement))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:19:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(may only be used in compound statements))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:25:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(compound statements))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_block-10_12:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-10.c'
    sources:
      binary: block-10.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:6:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid entry to OpenMP structured block))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid entry to OpenMP structured block))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:17:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid entry to OpenMP structured block))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:22:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid entry to OpenMP structured block))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:27:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid entry to OpenMP structured block))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:35:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid entry to OpenMP structured block))[^
        ]*
        ?)+
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:8:)[^
        ]*([0-9]+: warning:[^
        ]*(statement will never be executed))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:13:)[^
        ]*([0-9]+: warning:[^
        ]*(statement will never be executed))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:19:)[^
        ]*([0-9]+: warning:[^
        ]*(statement will never be executed))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:24:)[^
        ]*([0-9]+: warning:[^
        ]*(statement will never be executed))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:29:)[^
        ]*([0-9]+: warning:[^
        ]*(statement will never be executed))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:37:)[^
        ]*([0-9]+: warning:[^
        ]*(statement will never be executed))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_block-11_13:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-11.c'
    sources:
      binary: block-11.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_block-1_11:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-1.c'
    sources:
      binary: block-1.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:7:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid branch to/from OpenMP structured block))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:9:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid entry to OpenMP structured block))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_block-2_14:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-2.c'
    sources:
      binary: block-2.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:9:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(break))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:14:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid branch to/from OpenMP structured block))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:16:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid entry to OpenMP structured block))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_block-3_15:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-3.c'
    sources:
      binary: block-3.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:12:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid branch to/from OpenMP structured block))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:21:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid branch to/from OpenMP structured block))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:26:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid branch to/from OpenMP structured block))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:30:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid entry to OpenMP structured block))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_block-4_16:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-4.c'
    sources:
      binary: block-4.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:7:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid branch to/from OpenMP structured block))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_block-5_17:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-5.c'
    sources:
      binary: block-5.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:7:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid branch to/from OpenMP structured block))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:13:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid branch to/from OpenMP structured block))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_block-6_18:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-6.c'
    sources:
      binary: block-6.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:7:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid branch to/from OpenMP structured block))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_block-7_19:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-7.c'
    sources:
      binary: block-7.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:9:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid branch to/from OpenMP structured block))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid branch to/from OpenMP structured block))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid branch to/from OpenMP structured block))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:15:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid branch to/from OpenMP structured block))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:16:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid branch to/from OpenMP structured block))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:17:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid branch to/from OpenMP structured block))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:18:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(break))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_block-8_20:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-8.c'
    sources:
      binary: block-8.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid branch to/from OpenMP structured block))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_block-9_21:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/block-9.c'
    sources:
      binary: block-9.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:6:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid entry to OpenMP structured block))[^
        ]*
        ?)+
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:8:)[^
        ]*([0-9]+: warning:[^
        ]*(statement will never be executed))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_clause-1_22:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/clause-1.c'
    sources:
      binary: clause-1.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:20:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(more than once))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:22:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(more than once))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:24:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(more than once))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:26:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(more than once))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:28:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(more than))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:31:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(more than))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:34:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(more than once))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:37:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(more than once))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:40:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(more than))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:42:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(is not a variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:44:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(is not a variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:46:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(is not a variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:48:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(user defined reduction not found for))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:50:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(user defined reduction not found for))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:57:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(has invalid type for))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:59:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(has invalid type for))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:61:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(must be 'threadprivate'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:63:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(must be 'threadprivate'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:68:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(incomplete type))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:70:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(incomplete type))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:72:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(incomplete type))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:75:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(predetermined 'threadprivate'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:77:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(predetermined 'threadprivate'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:79:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(predetermined 'threadpriv))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:81:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(predetermined 'threadpr))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:84:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(predetermined 'threadprivate))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:86:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(predetermined 'threadprivate))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:89:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(predetermined 'shared'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:91:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(predetermined 'shared'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:95:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(predetermined 'shared'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:98:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(predetermined 'shared'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:100:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(predetermined 'shared'))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_clause-2_23:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/clause-2.c'
    sources:
      binary: clause-2.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:17:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(clause before))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:19:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(clause before))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:21:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(clause before))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_collapse-1_24:
  build:
    cflags: ' -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/collapse-1.c'
    sources:
      binary: collapse-1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:12:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(not enough perfectly nested))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:41:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(not enough perfectly nested))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:61:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(collapsed loops not perfectly nested before))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:76:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(collapsed loops not perfectly nested before))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_combined-1_25:
  build:
    cflags: ' -O1 -fopenmp -fdump-tree-optimized -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/combined-1.c'
    sources:
      binary: combined-1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-O1 -fopenmp -fdump-tree-optimized"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_complex-1_26:
  build:
    cflags: ' -fopenmp -O1 -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/complex-1.c'
    sources:
      binary: complex-1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -O1"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_copyin-1_27:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/copyin-1.c'
    sources:
      binary: copyin-1.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:19:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(threadprivate))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:21:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(threadprivate))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:23:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(threadprivate))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_critical-1_28:
  build:
    cflags: ' -fopenmp -fdump-tree-ompexp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/critical-1.c'
    sources:
      binary: critical-1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -fdump-tree-ompexp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_critical-2_29:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/critical-2.c'
    sources:
      binary: critical-2.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:5:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:7:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected identifier))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:9:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected .\\).))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected .\\).))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:12:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected expression))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_critical-3_30:
  build:
    cflags: ' -fopenmp -fdump-tree-ompexp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/critical-3.c'
    sources:
      binary: critical-3.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -fdump-tree-ompexp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_critical-4_31:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/critical-4.c'
    sources:
      binary: critical-4.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:18:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(with the same name))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:26:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(with the same name))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_declare-simd-1_32:
  build:
    cflags: -fopenmp -Wno-hsa -ffat-lto-objects -S
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/declare-simd-1.c'
    sources:
      binary: declare-simd-1.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_declare-simd-2_33:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/declare-simd-2.c'
    sources:
      binary: declare-simd-2.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:5:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(not immediately followed by a function declaration or definition))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:8:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(not immediately followed by a single function declaration or definition))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(not immediately followed by a function declaration or definition))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:14:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(not immediately followed by a function declaration or definition))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:20:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(must be followed by function declaration or definition or another))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:23:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(clause is incompatible with))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:29:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(neither a pointer nor an array))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:32:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(neither a pointer nor an array))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:35:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(neither a pointer nor an array))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:40:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(neither a pointer nor an array))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:43:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(appears more than once))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:45:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(appears more than once))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:47:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(appears more than once))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:49:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(appears more than once))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:51:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(appears more than once))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_declare-simd-3_34:
  build:
    cflags: -fopenmp -Wno-hsa -ffat-lto-objects -S
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/declare-simd-3.c'
    sources:
      binary: declare-simd-3.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_declare-simd-4_35:
  build:
    cflags: ' -fopenmp-simd -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/declare-simd-4.c'
    sources:
      binary: declare-simd-4.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp-simd"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:4:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(.linear. clause step .b \\+ 1. is neither constant nor a parameter))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:6:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(.linear. clause step .b \\+ 1. is neither constant nor a parameter))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:8:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(.linear. clause step .b \\* 2. is neither constant nor a parameter))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(.linear. clause step is a parameter .b. not specified in .uniform. clause))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:12:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(.linear. clause step is a parameter .b. not specified in .uniform. clause))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:17:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(.linear. clause step .c. is neither constant nor a parameter))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:19:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(.linear. clause step .\[^\n\r]*. is neither constant nor a parameter))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:21:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(.linear. clause step expression must be integral))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_dump-new-function-2_36:
  build:
    cflags: ' -O2 -fopenmp -fdump-tree-gimple -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/dump-new-function-2.c'
    sources:
      binary: dump-new-function-2.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-O2 -fopenmp -fdump-tree-gimple"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_dump-new-function-3_37:
  build:
    cflags: ' -O2 -ftree-parallelize-loops=2 -fdump-tree-gimple -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/dump-new-function-3.c'
    sources:
      binary: dump-new-function-3.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-O2 -ftree-parallelize-loops=2 -fdump-tree-gimple"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_dump-new-function_38:
  build:
    cflags: ' -O2 -fopenmp -fdump-tree-gimple -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/dump-new-function.c'
    sources:
      binary: dump-new-function.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-O2 -fopenmp -fdump-tree-gimple"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_empty_39:
  build:
    cflags: ' -O -fopenmp -fdump-tree-ompexp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/empty.c'
    sources:
      binary: empty.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-O -fopenmp -fdump-tree-ompexp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_flush-1_40:
  build:
    cflags: ' -fopenmp -fdump-tree-gimple -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/flush-1.c'
    sources:
      binary: flush-1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -fdump-tree-gimple"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_flush-2_41:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/flush-2.c'
    sources:
      binary: flush-2.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:5:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:6:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected identifier))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:7:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(undeclared|expected|for each))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:8:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(undeclared|expected))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:9:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(undeclared))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_for-10_43:
  build:
    cflags: ' -fopenmp -fdump-tree-ompexp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-10.c'
    sources:
      binary: for-10.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -fdump-tree-ompexp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_for-11_44:
  build:
    cflags: ' -std=c99 -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-11.c'
    sources:
      binary: for-11.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-std=c99 -fopenmp"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:33:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(for statement expected))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:41:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(missing controlling predicate))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:44:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(break))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:50:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid controlling predicate))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:57:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid increment expression))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:62:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:67:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid controlling predicate|invalid increment expression))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:71:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid increment expression))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_for-12_45:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-12.c'
    sources:
      binary: for-12.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_for-13_46:
  build:
    cflags: ' -fopenmp -fdump-tree-ompexp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-13.c'
    sources:
      binary: for-13.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -fdump-tree-ompexp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_for-14_47:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-14.c'
    sources:
      binary: for-14.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_for-15_48:
  build:
    cflags: ' -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-15.c'
    sources:
      binary: for-15.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_for-16_49:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-16.c'
    sources:
      binary: for-16.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_for-17_50:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-17.c'
    sources:
      binary: for-17.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_for-18_51:
  build:
    cflags: ' -O -fopenmp -fdump-tree-ompexp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-18.c'
    sources:
      binary: for-18.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-O -fopenmp -fdump-tree-ompexp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_for-19_52:
  build:
    cflags: ' -O -fopenmp -fdump-tree-gimple -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-19.c'
    sources:
      binary: for-19.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-O -fopenmp -fdump-tree-gimple"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_for-1_42:
  build:
    cflags: ' -fopenmp -fshow-column -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-1.c'
    sources:
      binary: for-1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -fshow-column"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:29:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(3:for statement expected))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:37:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(missing controlling predicate))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:40:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(break))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:45:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(15:invalid controlling predicate))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:49:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(27:invalid increment expression))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_for-20_54:
  build:
    cflags: ' -fopenmp -fdump-tree-ompexp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-20.c'
    sources:
      binary: for-20.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -fdump-tree-ompexp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_for-21_55:
  build:
    cflags: ' -fopenmp -fdump-tree-ompexp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-21.c'
    sources:
      binary: for-21.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -fdump-tree-ompexp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_for-22_56:
  build:
    cflags: ' -fopenmp -fdump-tree-ompexp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-22.c'
    sources:
      binary: for-22.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -fdump-tree-ompexp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_for-23_57:
  build:
    cflags: ' -fopenmp -fdump-tree-ompexp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-23.c'
    sources:
      binary: for-23.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -fdump-tree-ompexp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_for-24_58:
  build:
    cflags: ' -O2 -fopenmp -fdump-tree-ssa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-24.c'
    sources:
      binary: for-24.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-O2 -fopenmp -fdump-tree-ssa"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_for-2_53:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-2.c'
    sources:
      binary: for-2.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(too many))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:16:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(too many))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_for-3_59:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-3.c'
    sources:
      binary: for-3.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:9:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected '\\('))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:12:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected '\\('))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:15:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid schedule kind))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:18:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:24:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid schedule kind))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:27:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:30:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:36:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected '\\)'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:42:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected integer expression))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:60:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(does not take))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_for-4_60:
  build:
    cflags: ' -fopenmp -fdump-tree-ompexp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-4.c'
    sources:
      binary: for-4.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -fdump-tree-ompexp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_for-5_61:
  build:
    cflags: ' -fopenmp -fdump-tree-ompexp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-5.c'
    sources:
      binary: for-5.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -fdump-tree-ompexp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_for-6_62:
  build:
    cflags: ' -fopenmp -fdump-tree-ompexp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-6.c'
    sources:
      binary: for-6.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -fdump-tree-ompexp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_for-7_63:
  build:
    cflags: ' -fopenmp -fdump-tree-ompexp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-7.c'
    sources:
      binary: for-7.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -fdump-tree-ompexp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_for-8_64:
  build:
    cflags: ' -fopenmp -fdump-tree-ompexp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-8.c'
    sources:
      binary: for-8.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -fdump-tree-ompexp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_for-9_65:
  build:
    cflags: ' -fopenmp -fdump-tree-ompexp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/for-9.c'
    sources:
      binary: for-9.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -fdump-tree-ompexp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_linear-1_66:
  build:
    cflags: ' -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/linear-1.c'
    sources:
      binary: linear-1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:9:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(iteration variable .i. should not be linear))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:17:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(.linear. is not valid for .#pragma omp distribute parallel for.))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:25:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(iteration variable .i. should not be linear))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:33:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(iteration variable .i. should not be linear))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:34:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(iteration variable .j. should not be linear" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:42:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(.linear. is not valid for .#pragma omp target teams distribute parallel for.))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:51:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(iteration variable .i. should not be linear))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:52:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(iteration variable .j. should not be linear" "))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_loop-1_67:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/loop-1.c'
    sources:
      binary: loop-1.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:20:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(initializer expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:24:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(initializer expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:27:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(initializer expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:30:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(initializer expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:33:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(condition expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:36:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(condition expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:39:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(condition expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:42:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(condition expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:45:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid controlling predicate|condition expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:47:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(increment expression refers to iteration variable" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:51:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid increment expression|increment expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:53:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(increment expression refers to iteration variable" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:57:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(increment expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:60:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(increment expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:63:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(increment expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:66:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(increment expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:72:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(initializer expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:76:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(initializer expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:82:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(initializer expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:86:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(initializer expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:90:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(condition expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:94:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(condition expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:98:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(condition expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:101:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(condition expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:105:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(condition expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:109:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(condition expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:114:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(condition expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:116:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(increment expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:120:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(increment expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:124:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(increment expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:128:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(increment expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:133:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(increment expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:138:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(increment expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:157:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(initializer expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:161:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(initializer expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:164:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(initializer expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:167:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(initializer expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:170:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(condition expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:173:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(condition expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:176:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(condition expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:179:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(condition expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:182:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid controlling predicate|condition expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:184:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(increment expression refers to iteration variable" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:188:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid increment expression|increment expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:190:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(increment expression refers to iteration variable" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:194:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(increment expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:197:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(increment expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:200:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(increment expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:203:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(increment expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:209:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(initializer expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:215:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(initializer expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:219:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(initializer expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:223:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(condition expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:227:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(condition expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:231:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(condition expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:235:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(condition expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:237:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(increment expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:241:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(increment expression refers to iteration variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:247:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(increment expression refers to iteration variable))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_macro-1_68:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/macro-1.c'
    sources:
      binary: macro-1.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_macro-2_69:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/macro-2.c'
    sources:
      binary: macro-2.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_macro-3_70:
  build:
    cflags: ' -fopenmp -fdump-tree-omplower -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/macro-3.c'
    sources:
      binary: macro-3.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -fdump-tree-omplower"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_macro-4_71:
  build:
    cflags: ' -fopenmp -Wunknown-pragmas -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/macro-4.c'
    sources:
      binary: macro-4.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -Wunknown-pragmas"'
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:13:)[^
        ]*([0-9]+: warning:[^
        ]*(ignoring #pragma omp _Pragma))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:15:)[^
        ]*([0-9]+: warning:[^
        ]*(ignoring #pragma omp _Pragma))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:25:)[^
        ]*([0-9]+: warning:[^
        ]*(ignoring #pragma omp serial))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:27:)[^
        ]*([0-9]+: warning:[^
        ]*(ignoring #pragma omp serial))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_master-1_72:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/master-1.c'
    sources:
      binary: master-1.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_master-2_73:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/master-2.c'
    sources:
      binary: master-2.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:5:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:7:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected expression))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_master-3_74:
  build:
    cflags: ' -fopenmp -fdump-tree-ompexp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/master-3.c'
    sources:
      binary: master-3.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -fdump-tree-ompexp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_nestedfn-1_75:
  build:
    cflags: ' -O2 -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/nestedfn-1.c'
    sources:
      binary: nestedfn-1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-O2 -fopenmp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_nesting-1_76:
  build:
    cflags: ' -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/nesting-1.c'
    sources:
      binary: nesting-1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(may not be closely nested))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:14:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(may not be closely nested))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:20:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(may not be closely nested))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:22:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(may not be closely nested))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:24:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(may not be closely nested))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:28:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(may not be closely nested))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:34:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(may not be closely nested))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:43:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(may not be closely nested))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:48:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(may not be closely nested))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:59:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(may not be closely nested))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:66:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(may not be closely nested))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:76:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(may not be closely nested))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:82:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(may not be closely nested))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:87:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(may not be closely nested))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:90:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(may not be closely nested))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:96:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(may not be closely nested))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:98:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(may not be closely nested))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:100:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(may not be closely nested))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:104:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(may not be closely nested))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:107:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(may not be closely nested))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:113:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(may not be closely nested))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:117:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(may not be closely nested))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:121:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(may not be closely nested))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:124:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(may not be closely nested))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:130:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(may not be closely nested))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:132:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(may not be closely nested))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:134:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(may not be closely nested))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:161:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(may not be closely nested))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:164:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(may not be closely nested))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:170:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(may not be closely nested))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:174:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(may not be closely nested))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:183:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(may not be closely nested))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:193:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(may not be closely nested))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:205:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(must be closely nested))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:234:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(may not be nested))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:237:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(may not be nested))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_notify-new-function-2_77:
  build:
    cflags: ' -O2 -fopenmp -fdump-tree-omplower -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/notify-new-function-2.c'
    sources:
      binary: notify-new-function-2.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-O2 -fopenmp -fdump-tree-omplower"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_notify-new-function-3_78:
  build:
    cflags: ' -O2 -ftree-parallelize-loops=2 -fdump-tree-ompexpssa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/notify-new-function-3.c'
    sources:
      binary: notify-new-function-3.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-O2 -ftree-parallelize-loops=2 -fdump-tree-ompexpssa"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_notify-new-function_79:
  build:
    cflags: ' -O2 -fopenmp -fdump-tree-ompexp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/notify-new-function.c'
    sources:
      binary: notify-new-function.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-O2 -fopenmp -fdump-tree-ompexp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_num-threads-1_80:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/num-threads-1.c'
    sources:
      binary: num-threads-1.s
  group: GRPSERIAL
  info:
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:6:)[^
        ]*([0-9]+: warning:[^
        ]*(must be positive))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_omp-parallel-if_81:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/omp-parallel-if.c'
    sources:
      binary: omp-parallel-if.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:9:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(too many))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:14:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(too many))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_openmp-simd-1_82:
  build:
    cflags: ' -fopenmp-simd -fdump-tree-original -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/openmp-simd-1.c'
    sources:
      binary: openmp-simd-1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp-simd -fdump-tree-original"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_openmp-simd-2_83:
  build:
    cflags: ' -fopenmp-simd -fdump-tree-original -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/openmp-simd-2.c'
    sources:
      binary: openmp-simd-2.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp-simd -fdump-tree-original"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_openmp-simd-3_84:
  build:
    cflags: ' -fopenmp-simd -fdump-tree-original -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/openmp-simd-3.c'
    sources:
      binary: openmp-simd-3.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp-simd -fdump-tree-original"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_ordered-1_85:
  build:
    cflags: ' -fopenmp -fdump-tree-ompexp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/ordered-1.c'
    sources:
      binary: ordered-1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -fdump-tree-ompexp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_ordered-2_86:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/ordered-2.c'
    sources:
      binary: ordered-2.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:5:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:6:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(region may not be closely nested inside of))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:7:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected expression))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_parallel-1_87:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/parallel-1.c'
    sources:
      binary: parallel-1.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_parallel-2_88:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/parallel-2.c'
    sources:
      binary: parallel-2.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:7:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(enclosing))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(enclosing))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:13:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(not specified))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_parallel-3_89:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/parallel-3.c'
    sources:
      binary: parallel-3.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_parallel-4_90:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/parallel-4.c'
    sources:
      binary: parallel-4.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:8:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('nowait'))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr25874_91:
  build:
    cflags: ' -O -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr25874.c'
    sources:
      binary: pr25874.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-O -fopenmp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr25989_92:
  build:
    cflags: ' -O2 -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr25989.c'
    sources:
      binary: pr25989.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-O2 -fopenmp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr25990_93:
  build:
    cflags: ' -fopenmp -O2 -std=c99 -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr25990.c'
    sources:
      binary: pr25990.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -O2 -std=c99"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr25996_94:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr25996.c'
    sources:
      binary: pr25996.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:7:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(undeclared|for each function))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:15:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(undeclared))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:23:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(undeclared|invalid controlling predicate))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:31:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(undeclared|invalid increment expression))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr26412_95:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr26412.c'
    sources:
      binary: pr26412.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr27328_96:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr27328.c'
    sources:
      binary: pr27328.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr27358_97:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr27358.c'
    sources:
      binary: pr27358.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:4:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*())[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr27388-1_98:
  build:
    cflags: ' -fopenmp -fdump-tree-omplower -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr27388-1.c'
    sources:
      binary: pr27388-1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -fdump-tree-omplower"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr27388-2_99:
  build:
    cflags: ' -fopenmp -fdump-tree-omplower -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr27388-2.c'
    sources:
      binary: pr27388-2.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -fdump-tree-omplower"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr27388-3_100:
  build:
    cflags: ' -fopenmp -fdump-tree-omplower -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr27388-3.c'
    sources:
      binary: pr27388-3.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -fdump-tree-omplower"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr27415_101:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr27415.c'
    sources:
      binary: pr27415.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:9:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(should not be firstprivate))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:18:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(should not be firstprivate))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:28:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(should not be reduction))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:37:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(should not be reduction))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr27416_102:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr27416.c'
    sources:
      binary: pr27416.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:8:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(is private in outer context))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:17:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(is private in outer context))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:27:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(is private in outer context))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr27499_103:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr27499.c'
    sources:
      binary: pr27499.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr29955_104:
  build:
    cflags: ' -O2 -fopenmp -fexceptions -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr29955.c'
    sources:
      binary: pr29955.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-O2 -fopenmp -fexceptions"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr29965-1_105:
  build:
    cflags: ' -O2 -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr29965-1.c'
    sources:
      binary: pr29965-1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-O2 -fopenmp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr29965-2_106:
  build:
    cflags: ' -O2 -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr29965-2.c'
    sources:
      binary: pr29965-2.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-O2 -fopenmp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr29965-3_107:
  build:
    cflags: ' -O2 -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr29965-3.c'
    sources:
      binary: pr29965-3.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-O2 -fopenmp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr29965-4_108:
  build:
    cflags: ' -O2 -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr29965-4.c'
    sources:
      binary: pr29965-4.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-O2 -fopenmp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr29965-5_109:
  build:
    cflags: ' -O2 -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr29965-5.c'
    sources:
      binary: pr29965-5.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-O2 -fopenmp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr29965-6_110:
  build:
    cflags: ' -O2 -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr29965-6.c'
    sources:
      binary: pr29965-6.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-O2 -fopenmp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr30421_111:
  build:
    cflags: ' -O2 -fopenmp -Wall -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr30421.c'
    sources:
      binary: pr30421.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-O2 -fopenmp -Wall"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr30494_112:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr30494.c'
    sources:
      binary: pr30494.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr32468-1_113:
  build:
    cflags: ' -O2 -fopenmp -fdump-tree-ompexp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr32468-1.c'
    sources:
      binary: pr32468-1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-O2 -fopenmp -fdump-tree-ompexp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr34607_114:
  build:
    cflags: ' -fopenmp -std=gnu99 -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr34607.c'
    sources:
      binary: pr34607.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -std=gnu99"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:8:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected expression before))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(unknown type name))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:13:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(unknown type name))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr34692_115:
  build:
    cflags: ' -fopenmp -fdump-tree-gimple -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr34692.c'
    sources:
      binary: pr34692.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -fdump-tree-gimple"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr34694_116:
  build:
    cflags: ' -O -fopenmp -Wall -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr34694.c'
    sources:
      binary: pr34694.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-O -fopenmp -Wall"'
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:13:)[^
        ]*([0-9]+: warning:[^
        ]*(is used uninitialized))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr34964_117:
  build:
    cflags: ' -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr34964.c'
    sources:
      binary: pr34964.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:5:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid initializer))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr35244_118:
  build:
    cflags: ' -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr35244.c'
    sources:
      binary: pr35244.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:9:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected identifier before))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected identifier before))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr35438_119:
  build:
    cflags: ' -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr35438.c'
    sources:
      binary: pr35438.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:6:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(is not a variable))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr35439_120:
  build:
    cflags: ' -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr35439.c'
    sources:
      binary: pr35439.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:5:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(array of voids))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr35738_121:
  build:
    cflags: ' -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr35738.c'
    sources:
      binary: pr35738.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp"'
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:13:)[^
        ]*([0-9]+: warning:[^
        ]*(makes integer from pointer without a cast))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:15:)[^
        ]*([0-9]+: warning:[^
        ]*(makes integer from pointer without a cast))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:17:)[^
        ]*([0-9]+: warning:[^
        ]*(makes integer from pointer without a cast))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr35751_122:
  build:
    cflags: ' -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr35751.c'
    sources:
      binary: pr35751.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:8:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(must have no linkage|storage size of))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:9:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(storage size of))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr35818_123:
  build:
    cflags: ' -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr35818.c'
    sources:
      binary: pr35818.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr36790_124:
  build:
    cflags: ' -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr36790.c'
    sources:
      binary: pr36790.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr38633_125:
  build:
    cflags: ' -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr38633.c'
    sources:
      binary: pr38633.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr38676_126:
  build:
    cflags: ' -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr38676.c'
    sources:
      binary: pr38676.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr39495-1_127:
  build:
    cflags: ' -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr39495-1.c'
    sources:
      binary: pr39495-1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr39495-2_128:
  build:
    cflags: ' -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr39495-2.c'
    sources:
      binary: pr39495-2.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:16:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid controlling predicate))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:19:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid controlling predicate))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:22:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid controlling predicate))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:25:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid controlling predicate))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:28:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid controlling predicate))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:31:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid controlling predicate))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:34:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid controlling predicate))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:37:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid controlling predicate))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr46032-2_129:
  build:
    cflags: ' -O2 -fopenmp -std=c99 -fipa-pta -fdump-tree-optimized -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr46032-2.c'
    sources:
      binary: pr46032-2.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-O2 -fopenmp -std=c99 -fipa-pta -fdump-tree-optimized"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr46032-3_130:
  build:
    cflags: ' -O2 -fopenmp -std=c99 -fipa-pta -fdump-tree-optimized -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr46032-3.c'
    sources:
      binary: pr46032-3.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-O2 -fopenmp -std=c99 -fipa-pta -fdump-tree-optimized"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr47963_131:
  build:
    cflags: ' -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr47963.c'
    sources:
      binary: pr47963.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:8:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(has non-integer type))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr48591_132:
  build:
    cflags: ' -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr48591.c'
    sources:
      binary: pr48591.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr48716_133:
  build:
    cflags: ' -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr48716.c'
    sources:
      binary: pr48716.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr49640_134:
  build:
    cflags: ' -O2 -std=gnu99 -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr49640.c'
    sources:
      binary: pr49640.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-O2 -std=gnu99 -fopenmp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr51339_135:
  build:
    cflags: ' -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr51339.c'
    sources:
      binary: pr51339.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr53992_136:
  build:
    cflags: ' -fgnu-tm -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr53992.c'
    sources:
      binary: pr53992.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fgnu-tm -fopenmp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr57412_137:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr57412.c'
    sources:
      binary: pr57412.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr58809_138:
  build:
    cflags: ' -fopenmp -O -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr58809.c'
    sources:
      binary: pr58809.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -O"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr59669-1_139:
  build:
    cflags: ' -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr59669-1.c'
    sources:
      binary: pr59669-1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr59669-2_140:
  build:
    cflags: ' -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr59669-2.c'
    sources:
      binary: pr59669-2.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr60534_141:
  build:
    cflags: ' -fopenmp -O -fno-tree-loop-optimize -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr60534.c'
    sources:
      binary: pr60534.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -O -fno-tree-loop-optimize"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr66633-1_142:
  build:
    cflags: ' -fopenmp -O1 -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr66633-1.c'
    sources:
      binary: pr66633-1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -O1"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr66633-2_143:
  build:
    cflags: ' -fopenmp -O0 -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr66633-2.c'
    sources:
      binary: pr66633-2.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -O0"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr66633-3_144:
  build:
    cflags: ' -fopenmp -O1 -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr66633-3.c'
    sources:
      binary: pr66633-3.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -O1"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr66633-4_145:
  build:
    cflags: ' -fopenmp -O0 -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr66633-4.c'
    sources:
      binary: pr66633-4.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -O0"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr66820_146:
  build:
    cflags: ' -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr66820.c'
    sources:
      binary: pr66820.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr67495_147:
  build:
    cflags: ' -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr67495.c'
    sources:
      binary: pr67495.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid operator))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:13:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(lvalue required))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:15:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(lvalue required))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:17:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(lvalue required))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:19:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(lvalue required))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:21:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(lvalue required))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:23:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(uses two different expressions for memory))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:25:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid operator))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:27:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(lvalue required))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:29:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(lvalue required))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:31:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(lvalue required))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:33:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(lvalue required))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:35:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(lvalue required))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:37:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(lvalue required))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr67500_148:
  build:
    cflags: ' -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr67500.c'
    sources:
      binary: pr67500.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:5:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(clause expression must be positive constant integer expression))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:6:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(undeclared here" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:7:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(clause expression must be positive constant integer expression))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:9:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(clause expression must be positive constant integer expression))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(clause expression must be positive constant integer expression))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:18:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(must be positive constant integer expression))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:19:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(undeclared" "))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:21:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(must be positive constant integer expression))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:24:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(must be positive constant integer expression))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:27:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(must be positive constant integer expression))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:30:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(must be positive constant integer expression))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:33:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(must be positive constant integer expression))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:36:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(must be positive constant integer expression))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:39:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(must be positive constant integer expression))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr68128-1_149:
  build:
    cflags: ' -Ofast -fopenmp -fdump-tree-vect-details -mavx -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr68128-1.c'
    sources:
      binary: pr68128-1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-Ofast -fopenmp -fdump-tree-vect-details"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr68128-2_150:
  build:
    cflags: ' -fopenmp -Wno-hsa -O2 -fdump-tree-omplower -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr68128-2.c'
    sources:
      binary: pr68128-2.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr68640_151:
  build:
    cflags: ' -O2 -fopenmp -fdump-tree-ealias-all -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr68640.c'
    sources:
      binary: pr68640.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-O2 -fopenmp -fdump-tree-ealias-all"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr72781_152:
  build:
    cflags: ' -fopenmp -Wno-hsa -O2 -Wuninitialized -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr72781.c'
    sources:
      binary: pr72781.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr81768-1_153:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr81768-1.c'
    sources:
      binary: pr81768-1.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_pr81768-2_154:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/pr81768-2.c'
    sources:
      binary: pr81768-2.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_preprocess-1_155:
  build:
    cflags: ' -fopenmp -Wno-hsa -E'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/preprocess-1.c'
    sources:
      binary: preprocess-1.i
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_reduction-1_156:
  build:
    cflags: ' -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/reduction-1.c'
    sources:
      binary: reduction-1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:14:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(zero length array section))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:16:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(zero length array section))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:18:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(is a zero size array))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_sections-1_157:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sections-1.c'
    sources:
      binary: sections-1.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_sections-2_158:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sections-2.c'
    sources:
      binary: sections-2.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:7:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:22:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:26:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_sections-3_159:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sections-3.c'
    sources:
      binary: sections-3.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:8:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('nowait'))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_sections-4_160:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sections-4.c'
    sources:
      binary: sections-4.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:4:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(may only be used in))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(may only be used in))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_sharing-1_161:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sharing-1.c'
    sources:
      binary: sharing-1.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:38:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(enclosing 'parallel'))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:52:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(not specified in))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:53:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(not specified in))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:54:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(not specified in))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:55:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(not specified in))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_sharing-2_162:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sharing-2.c'
    sources:
      binary: sharing-2.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_sharing-3_163:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sharing-3.c'
    sources:
      binary: sharing-3.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_simd-clones-1_164:
  build:
    cflags: ' -fopenmp -fdump-tree-optimized -O3 -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/simd-clones-1.c'
    sources:
      binary: simd-clones-1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -fdump-tree-optimized -O3"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_simd-clones-2_165:
  build:
    cflags: ' -fopenmp -fdump-tree-optimized -O -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/simd-clones-2.c'
    sources:
      binary: simd-clones-2.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -fdump-tree-optimized -O"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_simd-clones-3_166:
  build:
    cflags: ' -fopenmp -fdump-tree-optimized -O2 -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/simd-clones-3.c'
    sources:
      binary: simd-clones-3.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -fdump-tree-optimized -O2"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_simd-clones-4_167:
  build:
    cflags: ' -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/simd-clones-4.c'
    sources:
      binary: simd-clones-4.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_simd-clones-5_168:
  build:
    cflags: ' -fopenmp -w -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/simd-clones-5.c'
    sources:
      binary: simd-clones-5.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -w"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_simd-clones-6_169:
  build:
    cflags: ' -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/simd-clones-6.c'
    sources:
      binary: simd-clones-6.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_simd-clones-7_170:
  build:
    cflags: ' -fopenmp -w -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/simd-clones-7.c'
    sources:
      binary: simd-clones-7.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -w"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_sink-fold-1_171:
  build:
    cflags: ' -fopenmp -fdump-tree-omplower -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sink-fold-1.c'
    sources:
      binary: sink-fold-1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -fdump-tree-omplower"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_sink-fold-2_172:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sink-fold-2.c'
    sources:
      binary: sink-fold-2.s
  group: GRPSERIAL
  info:
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:14:)[^
        ]*([0-9]+: warning:[^
        ]*(refers to iteration never in the iteration space))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:15:)[^
        ]*([0-9]+: warning:[^
        ]*(waiting for lexically later iteration))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_sink-fold-3_173:
  build:
    cflags: ' -fopenmp -fdump-tree-omplower -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/sink-fold-3.c'
    sources:
      binary: sink-fold-3.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -fdump-tree-omplower"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_static-chunk-size-one_174:
  build:
    cflags: ' -fopenmp -O2 -fdump-tree-optimized -fno-tree-pre -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/static-chunk-size-one.c'
    sources:
      binary: static-chunk-size-one.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -O2 -fdump-tree-optimized -fno-tree-pre"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_static_175:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/static.c'
    sources:
      binary: static.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_target-1_176:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/target-1.c'
    sources:
      binary: target-1.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:8:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid branch to/from OpenMP structured block))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid entry to OpenMP structured block))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:24:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid entry to OpenMP structured block))[^
        ]*
        ?)+
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:26:)[^
        ]*([0-9]+: warning:[^
        ]*(statement will never be executed))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_target-2_177:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/target-2.c'
    sources:
      binary: target-2.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:8:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid branch to/from OpenMP structured block))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid entry to OpenMP structured block))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:24:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid entry to OpenMP structured block))[^
        ]*
        ?)+
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:26:)[^
        ]*([0-9]+: warning:[^
        ]*(statement will never be executed))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_taskgroup-1_178:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/taskgroup-1.c'
    sources:
      binary: taskgroup-1.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:8:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid branch to/from OpenMP structured block))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid entry to OpenMP structured block))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:24:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid entry to OpenMP structured block))[^
        ]*
        ?)+
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:26:)[^
        ]*([0-9]+: warning:[^
        ]*(statement will never be executed))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_teams-1_179:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/teams-1.c'
    sources:
      binary: teams-1.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:8:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid branch to/from OpenMP structured block))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid entry to OpenMP structured block))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:24:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid entry to OpenMP structured block))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:37:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid branch to/from OpenMP structured block))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:39:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid entry to OpenMP structured block))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:55:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid entry to OpenMP structured block))[^
        ]*
        ?)+
    regex-warn:
      - |-
        (^|
        )([^
        ]+(:27:)[^
        ]*([0-9]+: warning:[^
        ]*(statement will never be executed))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:57:)[^
        ]*([0-9]+: warning:[^
        ]*(statement will never be executed))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_tls-1_180:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/tls-1.c'
    sources:
      binary: tls-1.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:13:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(undeclared))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:18:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(after first use))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_tls-2_181:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/tls-2.c'
    sources:
      binary: tls-2.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:5:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(has incomplete type))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(automatic variable))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_udr-1_182:
  build:
    cflags: ' -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/udr-1.c'
    sources:
      binary: udr-1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:4:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(predeclared arithmetic type))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:5:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(predeclared arithmetic type))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:7:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(predeclared arithmetic type))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:8:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(predeclared arithmetic type))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:13:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(predeclared arithmetic type))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:14:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(predeclared arithmetic type))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:15:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(predeclared arithmetic type))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:16:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(predeclared arithmetic type))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:19:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(function or array))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:20:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(function or array))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:21:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(function or array))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:26:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(function or array))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:27:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(function or array))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:28:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(function or array))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:32:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(const, volatile or restrict))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:33:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(const, volatile or restrict))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:35:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(const, volatile or restrict))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:36:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(const, volatile or restrict))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:41:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(const, volatile or restrict))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:42:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(const, volatile or restrict))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:44:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(const, volatile or restrict))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:45:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(const, volatile or restrict))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_udr-2_183:
  build:
    cflags: ' -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/udr-2.c'
    sources:
      binary: udr-2.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:7:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(combiner refers to variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:8:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(combiner refers to variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:10:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(combiner refers to variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:11:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(combiner refers to variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:12:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(combiner refers to variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:17:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(combiner refers to variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:18:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(combiner refers to variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:19:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(combiner refers to variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:20:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(combiner refers to variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:21:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(combiner refers to variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:24:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(initializer refers to variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:25:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(initializer refers to variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:26:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(initializer refers to variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:27:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(initializer refers to variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:28:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(initializer refers to variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:29:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(initializer refers to variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:30:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(initializer refers to variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:35:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(initializer refers to variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:36:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(initializer refers to variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:37:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(initializer refers to variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:38:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(initializer refers to variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:39:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(initializer refers to variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:40:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(initializer refers to variable))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:41:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(initializer refers to variable))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_udr-3_184:
  build:
    cflags: ' -fopenmp -std=gnu89 -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/udr-3.c'
    sources:
      binary: udr-3.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-fopenmp -std=gnu89"'
    regex-err:
      - |-
        (^|
        )([^
        ]+(:31:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(one of the initializer call arguments should be))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:34:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(previous))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:35:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(redeclaration of))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:40:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(previous))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:41:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(redeclaration of))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:46:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(not at file or block scope))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:47:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(not at file or block scope))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:50:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(previous))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:51:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(redeclaration of))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:58:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(previous))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:59:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(redeclaration of))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:67:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:68:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:73:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(expected declaration specifiers before))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_udr-4_185:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/udr-4.c'
    sources:
      binary: udr-4.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:4:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(invalid use of undefined type))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_uninit-1_186:
  build:
    cflags: ' -O -Wuninitialized -fopenmp -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/uninit-1.c'
    sources:
      binary: uninit-1.s
  group: GRPSERIAL
  info:
    extraopts:
      - '"-O -Wuninitialized -fopenmp"'
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_vla-1_187:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/vla-1.c'
    sources:
      binary: vla-1.s
  group: GRPSERIAL
  info:
    regex-err:
      - |-
        (^|
        )([^
        ]+(:7:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*(enclosing))[^
        ]*
        ?)+
      - |-
        (^|
        )([^
        ]+(:9:)[^
        ]*([0-9]+: (fatal )?error:[^
        ]*('A' not specified))[^
        ]*
        ?)+
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_vla-2_188:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/vla-2.c'
    sources:
      binary: vla-2.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_vla-3_189:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/vla-3.c'
    sources:
      binary: vla-3.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_vla-4_190:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/vla-4.c'
    sources:
      binary: vla-4.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
test_vla-5_191:
  build:
    cflags: ' -fopenmp -Wno-hsa -S'
    files: '@ROOTPATH@/compilers/gcc/./gcc.dg/gomp/vla-5.c'
    sources:
      binary: vla-5.s
  group: GRPSERIAL
  info: {}
  validate:
    script:
      path: '@ROOTPATH@/compilers/gcc/tools/gcc-valscript.pl'
