test_20000108-1_1:
  build:
    files: compilers/gcc/./gcc.dg/20000108-1.c
    sources: {binary: ./20000108-1.exe, cflags: -O3}
  group: GRPSERIAL
  run: {cwd: .}
test_20000111-1_2:
  build:
    files: compilers/gcc/./gcc.dg/20000111-1.c
    sources: {binary: 20000111-1.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
test_20000623-1_3:
  build:
    files: compilers/gcc/./gcc.dg/20000623-1.c
    sources: {binary: ./20000623-1.exe, cflags: -O3 -fno-strict-aliasing}
  group: GRPSERIAL
  run: {cwd: .}
test_20000629-1_4:
  build:
    files: compilers/gcc/./gcc.dg/20000629-1.c
    sources: {binary: 20000629-1.s, cflags: -O2 -g -S}
  group: GRPSERIAL
test_20000707-1_5:
  build:
    files: compilers/gcc/./gcc.dg/20000707-1.c
    sources: {binary: 20000707-1.s, cflags: -O2 -Wall -S}
  group: GRPSERIAL
test_20000906-1_6:
  build:
    files: compilers/gcc/./gcc.dg/20000906-1.c
    sources: {binary: ./20000906-1.exe, cflags: -ansi -pedantic-errors}
  group: GRPSERIAL
  run: {cwd: .}
test_20000926-1_7:
  build:
    files: compilers/gcc/./gcc.dg/20000926-1.c
    sources: {binary: 20000926-1.s, cflags: ' -S'}
  group: GRPSERIAL
  validate:
    match:
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("(excess
          elements)|(near initialization)")[^\n]*\n?)+'}
test_20001009-1_8:
  build:
    files: compilers/gcc/./gcc.dg/20001009-1.c
    sources: {binary: 20001009-1.s, cflags: -O2 -fpic -S}
  group: GRPSERIAL
test_20001012-1_9:
  build:
    files: compilers/gcc/./gcc.dg/20001012-1.c
    sources: {binary: ./20001012-1.exe, cflags: -O2 -fpic}
  group: GRPSERIAL
  run: {cwd: .}
test_20001012-2_10:
  build:
    files: compilers/gcc/./gcc.dg/20001012-2.c
    sources: {binary: ./20001012-2.exe, cflags: -O2 -fpic}
  group: GRPSERIAL
  run: {cwd: .}
test_20001023-1_11:
  build:
    files: compilers/gcc/./gcc.dg/20001023-1.c
    sources: {binary: ./20001023-1.exe, cflags: -O2 -fomit-frame-pointer}
  group: GRPSERIAL
  run: {cwd: .}
test_20001108-1_12:
  build:
    files: compilers/gcc/./gcc.dg/20001108-1.c
    sources: {binary: ./20001108-1.exe, cflags: -O2 -fomit-frame-pointer}
  group: GRPSERIAL
  run: {cwd: .}
test_20001116-1_13:
  build:
    files: compilers/gcc/./gcc.dg/20001116-1.c
    sources: {binary: 20001116-1.s, cflags: -Wempty-body -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("empty
          body in an")[^\n]*\n?)+'}
test_20001117-1_14:
  build:
    files: compilers/gcc/./gcc.dg/20001117-1.c
    sources: {binary: ./20001117-1.exe, cflags: -O2 -finstrument-functions}
  group: GRPSERIAL
  run: {cwd: .}
test_20001201-1_15:
  build:
    files: compilers/gcc/./gcc.dg/20001201-1.c
    sources: {binary: 20001201-1.s, cflags: -pedantic -S}
  group: GRPSERIAL
test_20001228-1_16:
  build:
    files: compilers/gcc/./gcc.dg/20001228-1.c
    sources: {binary: 20001228-1.s, cflags: -ffast-math -O2 -S}
  group: GRPSERIAL
test_20010202-1_17:
  build:
    files: compilers/gcc/./gcc.dg/20010202-1.c
    sources: {binary: 20010202-1.s, cflags: -O2 -S}
  group: GRPSERIAL
test_20010405-1_18:
  build:
    files: compilers/gcc/./gcc.dg/20010405-1.c
    sources: {binary: 20010405-1.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
test_20010516-1_19:
  build:
    files: compilers/gcc/./gcc.dg/20010516-1.c
    sources: {binary: 20010516-1.s, cflags: -fshow-column -S}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("34:")[^\n]*\n?)+'}
test_20010622-1_20:
  build:
    files: compilers/gcc/./gcc.dg/20010622-1.c
    sources: {binary: 20010622-1.s, cflags: -Wall -S}
  group: GRPSERIAL
test_20010822-1_21:
  build:
    files: compilers/gcc/./gcc.dg/20010822-1.c
    sources: {binary: ./20010822-1.exe, cflags: -Os}
  group: GRPSERIAL
  run: {cwd: .}
test_20010912-1_22:
  build:
    files: compilers/gcc/./gcc.dg/20010912-1.c
    sources: {binary: ./20010912-1.exe, cflags: -O2 -fpic}
  group: GRPSERIAL
  run: {cwd: .}
test_20011008-1_23:
  build:
    files: compilers/gcc/./gcc.dg/20011008-1.c
    sources: {binary: 20011008-1.s, cflags: -O0 -fshow-column -S}
  group: GRPSERIAL
  validate:
    match:
      L4: {expect: true, expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("13:does
          not declare anything")[^\n]*\n?)+'}
test_20011008-2_24:
  build:
    files: compilers/gcc/./gcc.dg/20011008-2.c
    sources: {binary: ./20011008-2.exe, cflags: -O0}
  group: GRPSERIAL
  run: {cwd: .}
test_20011015-1_25:
  build:
    files: compilers/gcc/./gcc.dg/20011015-1.c
    sources: {binary: 20011015-1.s, cflags: -O3 -std=gnu99 -S}
  group: GRPSERIAL
test_20011021-1_26:
  build:
    files: compilers/gcc/./gcc.dg/20011021-1.c
    sources: {binary: 20011021-1.s, cflags: -std=c99 -W -Wall -Wtraditional -S}
  group: GRPSERIAL
  validate:
    match:
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("missing
          init")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("initialization
          of union")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("initialization
          of union")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("missing
          init")[^\n]*\n?)+'}
test_20011130-1_27:
  build:
    files: compilers/gcc/./gcc.dg/20011130-1.c
    sources: {binary: 20011130-1.s, cflags: -O3 -g -finline-limit=100 -S}
  group: GRPSERIAL
test_20011214-1_28:
  build:
    files: compilers/gcc/./gcc.dg/20011214-1.c
    sources: {binary: ./20011214-1.exe, cflags: -ansi -pedantic-errors}
  group: GRPSERIAL
  run: {cwd: .}
test_20020103-1_29:
  build:
    files: compilers/gcc/./gcc.dg/20020103-1.c
    sources: {binary: 20020103-1.s, cflags: -O2 -fpic -fno-omit-frame-pointer -fno-asynchronous-unwind-tables
        -ffat-lto-objects -S}
  group: GRPSERIAL
test_20020104-1_30:
  build:
    files: compilers/gcc/./gcc.dg/20020104-1.c
    sources: {binary: 20020104-1.s, cflags: -O -Wall -S}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("no
          effect")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("no
          effect")[^\n]*\n?)+'}
test_20020108-1_31:
  build:
    files: compilers/gcc/./gcc.dg/20020108-1.c
    sources: {binary: 20020108-1.s, cflags: -O2 -mtune=i686 -S}
  group: GRPSERIAL
test_20020115-1_32:
  build:
    files: compilers/gcc/./gcc.dg/20020115-1.c
    sources: {binary: 20020115-1.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
test_20020116-1_33:
  build:
    files: compilers/gcc/./gcc.dg/20020116-1.c
    sources: {binary: 20020116-1.s, cflags: -O2 -S}
  group: GRPSERIAL
test_20020122-1_34:
  build:
    files: compilers/gcc/./gcc.dg/20020122-1.c
    sources: {binary: 20020122-1.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
  validate:
    match:
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary")[^\n]*\n?)+'}
test_20020122-2_35:
  build:
    files: compilers/gcc/./gcc.dg/20020122-2.c
    sources: {binary: 20020122-2.s, cflags: -O2 -fprefetch-loop-arrays -w -march=athlon
        -S}
  group: GRPSERIAL
test_20020122-3_36:
  build:
    files: compilers/gcc/./gcc.dg/20020122-3.c
    sources: {binary: 20020122-3.s, cflags: -Os -fprefetch-loop-arrays -mtune=pentium3
        -w -S}
  group: GRPSERIAL
test_20020122-4_37:
  build:
    files: compilers/gcc/./gcc.dg/20020122-4.c
    sources: {binary: 20020122-4.s, cflags: -O2 -fpic -S}
  group: GRPSERIAL
test_20020201-1_38:
  build:
    files: compilers/gcc/./gcc.dg/20020201-1.c
    sources: {binary: ./20020201-1.exe, cflags: -fprofile-arcs}
  group: GRPSERIAL
  run: {cwd: .}
test_20020206-1_39:
  build:
    files: compilers/gcc/./gcc.dg/20020206-1.c
    sources: {binary: ./20020206-1.exe, cflags: -O2 -fprefetch-loop-arrays -mtune=pentium3
        -w}
  group: GRPSERIAL
  run: {cwd: .}
test_20020210-1_40:
  build:
    files: compilers/gcc/./gcc.dg/20020210-1.c
    sources: {binary: ./20020210-1.exe, cflags: -O2}
  group: GRPSERIAL
  run: {cwd: .}
test_20020220-1_41:
  build:
    files: compilers/gcc/./gcc.dg/20020220-1.c
    sources: {binary: 20020220-1.s, cflags: -w -S}
  group: GRPSERIAL
test_20020220-2_42:
  build:
    files: compilers/gcc/./gcc.dg/20020220-2.c
    sources: {binary: 20020220-2.s, cflags: -O2 -Wunused -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("right-hand
          operand of comma expression has no effect")[^\n]*\n?)+'}
test_20020222-1_43:
  build:
    files: compilers/gcc/./gcc.dg/20020222-1.c
    sources: {binary: 20020222-1.s, cflags: -O2 -fPIC -S}
  group: GRPSERIAL
test_20020310-1_44:
  build:
    files: compilers/gcc/./gcc.dg/20020310-1.c
    sources: {binary: ./20020310-1.exe, cflags: -O2 -mtune=i586}
  group: GRPSERIAL
  run: {cwd: .}
test_20020312-1_45:
  build:
    files: compilers/gcc/./gcc.dg/20020312-1.c
    sources: {binary: 20020312-1.s, cflags: -O -ffast-math -S}
  group: GRPSERIAL
test_20020312-2_46:
  build:
    files: compilers/gcc/./gcc.dg/20020312-2.c
    sources: {binary: ./20020312-2.exe, cflags: -O -fno-pic}
  group: GRPSERIAL
  run: {cwd: .}
test_20020319-1_47:
  build:
    files: compilers/gcc/./gcc.dg/20020319-1.c
    sources: {binary: 20020319-1.s, cflags: -O2 -ffast-math -S}
  group: GRPSERIAL
test_20020411-1_48:
  build:
    files: compilers/gcc/./gcc.dg/20020411-1.c
    sources: {binary: 20020411-1.s, cflags: -O2 -march=i686 -S}
  group: GRPSERIAL
test_20020415-1_49:
  build:
    files: compilers/gcc/./gcc.dg/20020415-1.c
    sources: {binary: 20020415-1.s, cflags: -O2 -fpic -g -S}
  group: GRPSERIAL
test_20020418-1_50:
  build:
    files: compilers/gcc/./gcc.dg/20020418-1.c
    sources: {binary: 20020418-1.s, cflags: -O2 -msse -ffast-math -S}
  group: GRPSERIAL
test_20020418-2_51:
  build:
    files: compilers/gcc/./gcc.dg/20020418-2.c
    sources: {binary: 20020418-2.s, cflags: -O2 -funroll-all-loops -march=pentium3
        -S}
  group: GRPSERIAL
test_20020425-1_52:
  build:
    files: compilers/gcc/./gcc.dg/20020425-1.c
    sources: {binary: 20020425-1.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
test_20020426-2_53:
  build:
    files: compilers/gcc/./gcc.dg/20020426-2.c
    sources: {binary: ./20020426-2.exe, cflags: -O2 -frename-registers -fomit-frame-pointer
        -fPIC -mtune=i686}
  group: GRPSERIAL
  run: {cwd: .}
test_20020430-1_54:
  build:
    files: compilers/gcc/./gcc.dg/20020430-1.c
    sources: {binary: 20020430-1.s, cflags: -O2 -frename-registers -fpic -S}
  group: GRPSERIAL
test_20020503-1_55:
  build:
    files: compilers/gcc/./gcc.dg/20020503-1.c
    sources: {binary: 20020503-1.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
test_20020517-1_56:
  build:
    files: compilers/gcc/./gcc.dg/20020517-1.c
    sources: {binary: ./20020517-1.exe, cflags: -O2 -mtune=i686}
  group: GRPSERIAL
  run: {cwd: .}
test_20020525-1_57:
  build:
    files: compilers/gcc/./gcc.dg/20020525-1.c
    sources: {binary: ./20020525-1.exe, cflags: -O2}
  group: GRPSERIAL
  run: {cwd: .}
test_20020527-1_58:
  build:
    files: compilers/gcc/./gcc.dg/20020527-1.c
    sources: {binary: 20020527-1.s, cflags: -fms-extensions -S}
  group: GRPSERIAL
test_20020530-1_59:
  build:
    files: compilers/gcc/./gcc.dg/20020530-1.c
    sources: {binary: 20020530-1.s, cflags: -fverbose-asm -S}
  group: GRPSERIAL
test_20020607-1_60:
  build:
    files: compilers/gcc/./gcc.dg/20020607-1.c
    sources: {binary: ./20020607-1.exe, cflags: -ansi -pedantic-errors}
  group: GRPSERIAL
  run: {cwd: .}
test_20020607-2_61:
  build:
    files: compilers/gcc/./gcc.dg/20020607-2.c
    sources: {binary: ./20020607-2.exe, cflags: -O2 -ffast-math}
  group: GRPSERIAL
  run: {cwd: .}
test_20020919-1_62:
  build:
    files: compilers/gcc/./gcc.dg/20020919-1.c
    sources: {binary: 20020919-1.s, cflags: -O2 -S}
  group: GRPSERIAL
  validate:
    match:
      L109: {expect: true, expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+:136:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict")[^\n]*\n?)+'}
      L145: {expect: true, expr: '(^|\n)([^\n]+:145:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict")[^\n]*\n?)+'}
      L181: {expect: true, expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict")[^\n]*\n?)+'}
      L199: {expect: true, expr: '(^|\n)([^\n]+:199:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict")[^\n]*\n?)+'}
      L226: {expect: true, expr: '(^|\n)([^\n]+:226:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict")[^\n]*\n?)+'}
      L235: {expect: true, expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict")[^\n]*\n?)+'}
      L254: {expect: true, expr: '(^|\n)([^\n]+:254:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflict")[^\n]*\n?)+'}
test_20021006-1_63:
  build:
    files: compilers/gcc/./gcc.dg/20021006-1.c
    sources: {binary: 20021006-1.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
test_20021018-1_64:
  build:
    files: compilers/gcc/./gcc.dg/20021018-1.c
    sources: {binary: ./20021018-1.exe, cflags: -O2 -fpic}
  group: GRPSERIAL
  run: {cwd: .}
test_20021023-1_65:
  build:
    files: compilers/gcc/./gcc.dg/20021023-1.c
    sources: {binary: 20021023-1.s, cflags: -O2 -fpic -S}
  group: GRPSERIAL
test_20021029-1_66:
  build:
    files: compilers/gcc/./gcc.dg/20021029-1.c
    sources: {binary: 20021029-1.s, cflags: -O2 -fpic -ffat-lto-objects -S}
  group: GRPSERIAL
test_20021029-2_67:
  build:
    files: compilers/gcc/./gcc.dg/20021029-2.c
    sources: {binary: 20021029-2.s, cflags: -O2 -fmerge-all-constants -ffat-lto-objects
        -S}
  group: GRPSERIAL
test_20021116-1_68:
  build:
    files: compilers/gcc/./gcc.dg/20021116-1.c
    sources: {binary: 20021116-1.s, cflags: -O2 -fpic -S}
  group: GRPSERIAL
test_20030120-1_69:
  build:
    files: compilers/gcc/./gcc.dg/20030120-1.c
    sources: {binary: 20030120-1.s, cflags: -O -fpic -S}
  group: GRPSERIAL
test_20030204-1_70:
  build:
    files: compilers/gcc/./gcc.dg/20030204-1.c
    sources: {binary: 20030204-1.s, cflags: -march=pentium3 -O -ffast-math -funroll-loops
        -S}
  group: GRPSERIAL
test_20030213-1_71:
  build:
    files: compilers/gcc/./gcc.dg/20030213-1.c
    sources: {binary: 20030213-1.exe, cflags: -O -fpic}
  group: GRPSERIAL
  run: {cwd: .}
test_20030225-1_72:
  build:
    files: compilers/gcc/./gcc.dg/20030225-1.c
    sources: {binary: ./20030225-1.exe, cflags: -O2 -fPIC}
  group: GRPSERIAL
  run: {cwd: .}
test_20030309-1_73:
  build:
    files: compilers/gcc/./gcc.dg/20030309-1.c
    sources: {binary: 20030309-1.exe, cflags: -O2}
  group: GRPSERIAL
  run: {cwd: .}
test_20030321-1_74:
  build:
    files: compilers/gcc/./gcc.dg/20030321-1.c
    sources: {binary: 20030321-1.s, cflags: ' -S'}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("attribute
          ignored")[^\n]*\n?)+'}
test_20030323-1_75:
  build:
    files: compilers/gcc/./gcc.dg/20030323-1.c
    sources: {binary: ./20030323-1.exe, cflags: -ansi -pedantic-errors}
  group: GRPSERIAL
  run: {cwd: .}
test_20030324-1_76:
  build:
    files: compilers/gcc/./gcc.dg/20030324-1.c
    sources: {binary: ./20030324-1.exe, cflags: -O -fstrict-aliasing -fgcse}
  group: GRPSERIAL
  run: {cwd: .}
test_20030331-2_77:
  build:
    files: compilers/gcc/./gcc.dg/20030331-2.c
    sources: {binary: 20030331-2.s, cflags: ' -S'}
  group: GRPSERIAL
test_20030414-1_78:
  build:
    files: compilers/gcc/./gcc.dg/20030414-1.c
    sources: {binary: 20030414-1.o, cflags: -O2 -fPIC -c}
  group: GRPSERIAL
test_20030414-2_79:
  build:
    files: compilers/gcc/./gcc.dg/20030414-2.c
    sources: {binary: ./20030414-2.exe, cflags: -O2 -ffast-math}
  group: GRPSERIAL
  run: {cwd: .}
test_20030612-1_80:
  build:
    files: compilers/gcc/./gcc.dg/20030612-1.c
    sources: {binary: ./20030612-1.exe, cflags: -O2}
  group: GRPSERIAL
  run: {cwd: .}
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("statement-expressions
          should end with a non-void expression")[^\n]*\n?)+'}
test_20030625-1_81:
  build:
    files: compilers/gcc/./gcc.dg/20030625-1.c
    sources: {binary: 20030625-1.s, cflags: -g -S}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("moo")[^\n]*\n?)+'}
test_20030626-1_82:
  build:
    files: compilers/gcc/./gcc.dg/20030626-1.c
    sources: {binary: 20030626-1.s, cflags: -O -S}
  group: GRPSERIAL
test_20030627-1_83:
  build:
    files: compilers/gcc/./gcc.dg/20030627-1.c
    sources: {binary: 20030627-1.s, cflags: -std=gnu89 -S}
  group: GRPSERIAL
test_20030707-1_84:
  build:
    files: compilers/gcc/./gcc.dg/20030707-1.c
    sources: {binary: 20030707-1.s, cflags: -O2 -ffast-math -S}
  group: GRPSERIAL
test_20030708-1_85:
  build:
    files: compilers/gcc/./gcc.dg/20030708-1.c
    sources: {binary: 20030708-1.exe, cflags: -O2 -fpic}
  group: GRPSERIAL
  run: {cwd: .}
test_20030711-1_86:
  build:
    files: compilers/gcc/./gcc.dg/20030711-1.c
    sources: {binary: ./20030711-1.exe, cflags: -O2}
  group: GRPSERIAL
  run: {cwd: .}
test_20030717-1_87:
  build:
    files: compilers/gcc/./gcc.dg/20030717-1.c
    sources: {binary: ./20030717-1.exe, cflags: -O2}
  group: GRPSERIAL
  run: {cwd: .}
test_20030721-1_88:
  build:
    files: compilers/gcc/./gcc.dg/20030721-1.c
    sources: {binary: 20030721-1.s, cflags: -O2 -S}
  group: GRPSERIAL
test_20030804-1_89:
  build:
    files: compilers/gcc/./gcc.dg/20030804-1.c
    sources: {binary: 20030804-1.exe, cflags: -O2 -ffast-math}
  group: GRPSERIAL
  run: {cwd: .}
test_20030805-1_90:
  build:
    files: compilers/gcc/./gcc.dg/20030805-1.c
    sources: {binary: ./20030805-1.exe, cflags: -O2 -fgnu89-inline}
  group: GRPSERIAL
  run: {cwd: .}
test_20030815-1_91:
  build:
    files: compilers/gcc/./gcc.dg/20030815-1.c
    sources: {binary: 20030815-1.s, cflags: ' -S'}
  group: GRPSERIAL
test_20030820-1_92:
  build:
    files: compilers/gcc/./gcc.dg/20030820-1.c
    sources: {binary: 20030820-1.s, cflags: -O2 -ffast-math -S}
  group: GRPSERIAL
test_20030826-1_93:
  build:
    files: compilers/gcc/./gcc.dg/20030826-1.c
    sources: {binary: ./20030826-1.exe, cflags: -O2 -ffast-math}
  group: GRPSERIAL
  run: {cwd: .}
test_20030826-2_94:
  build:
    files: compilers/gcc/./gcc.dg/20030826-2.c
    sources: {binary: ./20030826-2.exe, cflags: -O2 -fomit-frame-pointer -march=i386}
  group: GRPSERIAL
  run: {cwd: .}
test_20030906-1_95:
  build:
    files: compilers/gcc/./gcc.dg/20030906-1.c
    sources: {binary: 20030906-1.s, cflags: -O -finline-functions -Wreturn-type -S}
  group: GRPSERIAL
  validate:
    match:
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("\''return\''
          with no value, in function returning non-void")[^\n]*\n?)+'}
test_20030906-2_96:
  build:
    files: compilers/gcc/./gcc.dg/20030906-2.c
    sources: {binary: 20030906-2.s, cflags: -O -finline-functions -Wreturn-type -S}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("\''return\''
          with no value, in function returning non-void")[^\n]*\n?)+'}
test_20031002-1_97:
  build:
    files: compilers/gcc/./gcc.dg/20031002-1.c
    sources: {binary: 20031002-1.s, cflags: -O3 -S}
  group: GRPSERIAL
test_20031012-1_98:
  build:
    files: compilers/gcc/./gcc.dg/20031012-1.c
    sources: {binary: 20031012-1.s, cflags: -Waddress -S}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("")[^\n]*\n?)+'}
test_20031102-1_99:
  build:
    files: compilers/gcc/./gcc.dg/20031102-1.c
    sources: {binary: ./20031102-1.exe, cflags: -O2 -march=i686}
  group: GRPSERIAL
  run: {cwd: .}
test_20031111-1_100:
  build:
    files: compilers/gcc/./gcc.dg/20031111-1.c
    sources: {binary: 20031111-1.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_20031201-1_101:
  build:
    files: compilers/gcc/./gcc.dg/20031201-1.c
    sources: {binary: 20031201-1.s, cflags: -O2 -fno-expensive-optimizations -S}
  group: GRPSERIAL
test_20031202-1_102:
  build:
    files: compilers/gcc/./gcc.dg/20031202-1.c
    sources: {binary: ./20031202-1.exe, cflags: -O2 -mtune=i686}
  group: GRPSERIAL
  run: {cwd: .}
test_20031216-1_103:
  build:
    files: compilers/gcc/./gcc.dg/20031216-1.c
    sources: {binary: ./20031216-1.exe, cflags: -O2}
  group: GRPSERIAL
  run: {cwd: .}
test_20031218-1_104:
  build:
    files: compilers/gcc/./gcc.dg/20031218-1.c
    sources: {binary: 20031218-1.s, cflags: -O -g -S}
  group: GRPSERIAL
test_20031218-2_105:
  build:
    files: compilers/gcc/./gcc.dg/20031218-2.c
    sources: {binary: 20031218-2.s, cflags: -O2 -g -S}
  group: GRPSERIAL
test_20031218-3_106:
  build:
    files: compilers/gcc/./gcc.dg/20031218-3.c
    sources: {binary: 20031218-3.s, cflags: -O2 -g -S}
  group: GRPSERIAL
test_20031222-1_107:
  build:
    files: compilers/gcc/./gcc.dg/20031222-1.c
    sources: {binary: 20031222-1.s, cflags: -std=c99 -S}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_20031223-1_108:
  build:
    files: compilers/gcc/./gcc.dg/20031223-1.c
    sources: {binary: 20031223-1.s, cflags: ' -S'}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("a
          label can only be part of a statement and a declaration is not a statement")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("useless
          type name in empty declaration")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("label
          at end of compound statement")[^\n]*\n?)+'}
test_20040123-1_109:
  build:
    files: compilers/gcc/./gcc.dg/20040123-1.c
    sources: {binary: 20040123-1.s, cflags: -O2 -ffat-lto-objects -S}
  group: GRPSERIAL
test_20040127-1_110:
  build:
    files: compilers/gcc/./gcc.dg/20040127-1.c
    sources: {binary: 20040127-1.o, cflags: -O2 -c}
  group: GRPSERIAL
test_20040127-2_111:
  build:
    files: compilers/gcc/./gcc.dg/20040127-2.c
    sources: {binary: 20040127-2.s, cflags: -O -S}
  group: GRPSERIAL
test_20040202-1_112:
  build:
    files: compilers/gcc/./gcc.dg/20040202-1.c
    sources: {binary: 20040202-1.s, cflags: -Wall -S}
  group: GRPSERIAL
test_20040203-1_113:
  build:
    files: compilers/gcc/./gcc.dg/20040203-1.c
    sources: {binary: 20040203-1.s, cflags: -std=gnu89 -S}
  group: GRPSERIAL
test_20040206-1_114:
  build:
    files: compilers/gcc/./gcc.dg/20040206-1.c
    sources: {binary: 20040206-1.s, cflags: -O2 -W -Wall -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("no
          return statement")[^\n]*\n?)+'}
test_20040217-1_115:
  build:
    files: compilers/gcc/./gcc.dg/20040217-1.c
    sources: {binary: 20040217-1.s, cflags: -O2 -S}
  group: GRPSERIAL
test_20040219-1_116:
  build:
    files: compilers/gcc/./gcc.dg/20040219-1.c
    sources: {binary: ./20040219-1.exe, cflags: -O2}
  group: GRPSERIAL
  run: {cwd: .}
test_20040223-1_117:
  build:
    files: compilers/gcc/./gcc.dg/20040223-1.c
    sources: {binary: 20040223-1.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("address")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("address")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("address")[^\n]*\n?)+'}
test_20040305-2_118:
  build:
    files: compilers/gcc/./gcc.dg/20040305-2.c
    sources: {binary: ./20040305-2.exe, cflags: -ansi -pedantic-errors}
  group: GRPSERIAL
  run: {cwd: .}
test_20040306-1_119:
  build:
    files: compilers/gcc/./gcc.dg/20040306-1.c
    sources: {binary: 20040306-1.s, cflags: -O2 -S}
  group: GRPSERIAL
test_20040309-1_120:
  build:
    files: compilers/gcc/./gcc.dg/20040309-1.c
    sources: {binary: ./20040309-1.exe, cflags: -ansi -pedantic-errors}
  group: GRPSERIAL
  run: {cwd: .}
test_20040310-1_121:
  build:
    files: compilers/gcc/./gcc.dg/20040310-1.c
    sources: {binary: 20040310-1.s, cflags: -O1 -S}
  group: GRPSERIAL
test_20040311-2_122:
  build:
    files: compilers/gcc/./gcc.dg/20040311-2.c
    sources: {binary: 20040311-2.s, cflags: -O2 -fpic -S}
  group: GRPSERIAL
test_20040322-1_123:
  build:
    files: compilers/gcc/./gcc.dg/20040322-1.c
    sources: {binary: 20040322-1.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
  validate:
    match:
      L3: {expect: true, expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_20040331-1_124:
  build:
    files: compilers/gcc/./gcc.dg/20040331-1.c
    sources: {binary: ./20040331-1.exe, cflags: -O2 -fwrapv}
  group: GRPSERIAL
  run: {cwd: .}
test_20040409-1_125:
  build:
    files: compilers/gcc/./gcc.dg/20040409-1.c
    sources: {binary: 20040409-1.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
test_20040609-1_126:
  build:
    files: compilers/gcc/./gcc.dg/20040609-1.c
    sources: {binary: 20040609-1.s, cflags: -Os -frename-registers -S}
  group: GRPSERIAL
test_20040622-2_127:
  build:
    files: compilers/gcc/./gcc.dg/20040622-2.c
    sources: {binary: 20040622-2.exe, cflags: -ansi -pedantic-errors}
  group: GRPSERIAL
  run: {cwd: .}
test_20040625-1_128:
  build:
    files: compilers/gcc/./gcc.dg/20040625-1.c
    sources: {binary: ./20040625-1.exe, cflags: -O2}
  group: GRPSERIAL
  run: {cwd: .}
test_20040627-1_129:
  build:
    files: compilers/gcc/./gcc.dg/20040627-1.c
    sources: {binary: 20040627-1.exe, cflags: -O2}
  group: GRPSERIAL
  run: {cwd: .}
test_20040813-1_130:
  build:
    files: compilers/gcc/./gcc.dg/20040813-1.c
    sources: {binary: 20040813-1.s, cflags: -gstabs -ffat-lto-objects -S}
  group: GRPSERIAL
test_20040910-1_131:
  build:
    files: compilers/gcc/./gcc.dg/20040910-1.c
    sources: {binary: 20040910-1.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
  validate:
    match:
      L2: {expect: true, expr: '(^|\n)([^\n]+:2:[^\n]*[0-9]+: (fatal )?error:[^\n]*("(parse
          error|syntax error|expected \''\\\\)\'') before \''int\''")[^\n]*\n?)+'}
test_20040916-1_132:
  build:
    files: compilers/gcc/./gcc.dg/20040916-1.c
    sources: {binary: 20040916-1.s, cflags: -O2 -S}
  group: GRPSERIAL
test_20040920-1_133:
  build:
    files: compilers/gcc/./gcc.dg/20040920-1.c
    sources: {binary: 20040920-1.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("called
          object \''bob\'' is not a function")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("called
          object \''bar.foo\'' is not a function")[^\n]*\n?)+'}
test_20041014-1_134:
  build:
    files: compilers/gcc/./gcc.dg/20041014-1.c
    sources: {binary: 20041014-1.s, cflags: ' -S'}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("braced-group")[^\n]*\n?)+'}
test_20041104-1_135:
  build:
    files: compilers/gcc/./gcc.dg/20041104-1.c
    sources: {binary: 20041104-1.s, cflags: -O2 -frename-registers -fno-schedule-insns
        -S}
  group: GRPSERIAL
test_20041106-1_136:
  build:
    files: compilers/gcc/./gcc.dg/20041106-1.c
    sources: {binary: ./20041106-1.exe, cflags: -O2}
  group: GRPSERIAL
  run: {cwd: .}
  validate:
    match:
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("attribute
          ignored")[^\n]*\n?)+'}
test_20041122-1_137:
  build:
    files: compilers/gcc/./gcc.dg/20041122-1.c
    sources: {binary: 20041122-1.s, cflags: -O1 -fmove-loop-invariants -S}
  group: GRPSERIAL
test_20041213-1_138:
  build:
    files: compilers/gcc/./gcc.dg/20041213-1.c
    sources: {binary: 20041213-1.s, cflags: -fshow-column -std=gnu89 -S}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("8:conflicting
          types")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("6:conflicting
          types")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("1:conflicting
          types")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("13:conflicting
          types")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("6:conflicting
          types")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("1:conflicting
          types")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("13:conflicting
          types")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("6:conflicting
          types")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("13:conflicting
          types")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("8:conflicting
          types")[^\n]*\n?)+'}
test_20041219-1_139:
  build:
    files: compilers/gcc/./gcc.dg/20041219-1.c
    sources: {binary: ./20041219-1.exe, cflags: -ansi -pedantic-errors}
  group: GRPSERIAL
  run: {cwd: .}
test_20050105-1_140:
  build:
    files: compilers/gcc/./gcc.dg/20050105-1.c
    sources: {binary: 20050105-1.s, cflags: -O2 -S}
  group: GRPSERIAL
test_20050105-2_141:
  build:
    files: compilers/gcc/./gcc.dg/20050105-2.c
    sources: {binary: 20050105-2.s, cflags: -O2 -S}
  group: GRPSERIAL
test_20050111-1_142:
  build:
    files: compilers/gcc/./gcc.dg/20050111-1.c
    sources: {binary: 20050111-1.s, cflags: -O2 -march=i686 -S}
  group: GRPSERIAL
test_20050111-2_143:
  build:
    files: compilers/gcc/./gcc.dg/20050111-2.c
    sources: {binary: 20050111-2.s, cflags: -O2 -funroll-loops -S}
  group: GRPSERIAL
test_20050121-1_144:
  build:
    files: compilers/gcc/./gcc.dg/20050121-1.c
    sources: {binary: 20050121-1.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("break
          statement not within")[^\n]*\n?)+'}
test_20050121-2_145:
  build:
    files: compilers/gcc/./gcc.dg/20050121-2.c
    sources: {binary: 20050121-2.exe, cflags: -O2}
  group: GRPSERIAL
  run: {cwd: .}
test_20050209-1_146:
  build:
    files: compilers/gcc/./gcc.dg/20050209-1.c
    sources: {binary: 20050209-1.s, cflags: ' -S'}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("parse|syntax|expected")[^\n]*\n?)+'}
test_20050307-1_147:
  build:
    files: compilers/gcc/./gcc.dg/20050307-1.c
    sources: {binary: 20050307-1.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
test_20050321-1_148:
  build:
    files: compilers/gcc/./gcc.dg/20050321-1.c
    sources: {binary: 20050321-1.s, cflags: -O2 -fmodulo-sched -S}
  group: GRPSERIAL
test_20050321-2_149:
  build:
    files: compilers/gcc/./gcc.dg/20050321-2.c
    sources: {binary: 20050321-2.exe, cflags: -g1 -fpic}
  group: GRPSERIAL
  run: {cwd: .}
test_20050330-1_150:
  build:
    files: compilers/gcc/./gcc.dg/20050330-1.c
    sources: {binary: 20050330-1.s, cflags: -O2 -fmodulo-sched -S}
  group: GRPSERIAL
test_20050503-1_151:
  build:
    files: compilers/gcc/./gcc.dg/20050503-1.c
    sources: {binary: 20050503-1.s, cflags: -O2 -ffat-lto-objects -S}
  group: GRPSERIAL
test_20050517-1_152:
  build:
    files: compilers/gcc/./gcc.dg/20050517-1.c
    sources: {binary: 20050517-1.s, cflags: -O2 -ffast-math -S}
  group: GRPSERIAL
test_20050527-1_153:
  build:
    files: compilers/gcc/./gcc.dg/20050527-1.c
    sources: {binary: ./20050527-1.exe, cflags: -O2 -Wuninitialized}
  group: GRPSERIAL
  run: {cwd: .}
test_20050603-2_154:
  build:
    files: compilers/gcc/./gcc.dg/20050603-2.c
    sources: {binary: ./20050603-2.exe, cflags: -O2}
  group: GRPSERIAL
  run: {cwd: .}
test_20050607-1_155:
  build:
    files: compilers/gcc/./gcc.dg/20050607-1.c
    sources: {binary: 20050607-1.s, cflags: -Wpadded -S}
  group: GRPSERIAL
test_20050620-1_156:
  build:
    files: compilers/gcc/./gcc.dg/20050620-1.c
    sources: {binary: 20050620-1.s, cflags: ' -S'}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("has
          incomplete type")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("flexible
          array member")[^\n]*\n?)+'}
test_20050629-1_157:
  build:
    files: compilers/gcc/./gcc.dg/20050629-1.c
    sources: {binary: 20050629-1.s, cflags: -O2 -w -S}
  group: GRPSERIAL
test_20050702-1_158:
  build:
    files: compilers/gcc/./gcc.dg/20050702-1.c
    sources: {binary: 20050702-1.s, cflags: -O2 -S}
  group: GRPSERIAL
test_20050811-1_159:
  build:
    files: compilers/gcc/./gcc.dg/20050811-1.c
    sources: {binary: 20050811-1.s, cflags: -O2 -fdump-rtl-all-graph -S}
  group: GRPSERIAL
test_20050811-2_160:
  build:
    files: compilers/gcc/./gcc.dg/20050811-2.c
    sources: {binary: 20050811-2.s, cflags: -O2 -fdump-rtl-postreload-graph -S}
  group: GRPSERIAL
test_20050826-1_161:
  build:
    files: compilers/gcc/./gcc.dg/20050826-1.c
    sources: {binary: ./20050826-1.exe, cflags: -O2}
  group: GRPSERIAL
  run: {cwd: .}
test_20050922-1_162:
  build:
    files: compilers/gcc/./gcc.dg/20050922-1.c
    sources: {binary: ./20050922-1.exe, cflags: -O1 -std=c99}
  group: GRPSERIAL
  run: {cwd: .}
test_20050922-2_163:
  build:
    files: compilers/gcc/./gcc.dg/20050922-2.c
    sources: {binary: ./20050922-2.exe, cflags: -O1 -std=c99}
  group: GRPSERIAL
  run: {cwd: .}
test_20051207-1_164:
  build:
    files: compilers/gcc/./gcc.dg/20051207-1.c
    sources: {binary: 20051207-1.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
test_20051207-2_165:
  build:
    files: compilers/gcc/./gcc.dg/20051207-2.c
    sources: {binary: 20051207-2.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
test_20051207-3_166:
  build:
    files: compilers/gcc/./gcc.dg/20051207-3.c
    sources: {binary: 20051207-3.s, cflags: -fno-unit-at-a-time -S}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("section
          type conflict")[^\n]*\n?)+'}
test_20060410_167:
  build:
    files: compilers/gcc/./gcc.dg/20060410.c
    sources: {binary: 20060410.s, cflags: -g -ffat-lto-objects -S}
  group: GRPSERIAL
test_20060419-1_168:
  build:
    files: compilers/gcc/./gcc.dg/20060419-1.c
    sources: {binary: 20060419-1.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
  validate:
    match:
      L2: {expect: true, expr: '(^|\n)([^\n]+(:2:)[^\n]*[0-9]+: warning:[^\n]*("ignored
          for field of type.*unsigned char\\\\\\[1\\\\\\]")[^\n]*\n?)+'}
      L3: {expect: true, expr: '(^|\n)([^\n]+(:3:)[^\n]*[0-9]+: warning:[^\n]*("ignored
          for field of type.*unsigned char\\\\\\[14\\\\\\]")[^\n]*\n?)+'}
test_20060425-1_169:
  build:
    files: compilers/gcc/./gcc.dg/20060425-1.c
    sources: {binary: ./20060425-1.exe, cflags: -O1}
  group: GRPSERIAL
  run: {cwd: .}
test_20060425-2_170:
  build:
    files: compilers/gcc/./gcc.dg/20060425-2.c
    sources: {binary: 20060425-2.s, cflags: -O2 -S}
  group: GRPSERIAL
test_20060801-1_171:
  build:
    files: compilers/gcc/./gcc.dg/20060801-1.c
    sources: {binary: 20060801-1.s, cflags: -fPIC -S}
  group: GRPSERIAL
test_20061026_172:
  build:
    files: compilers/gcc/./gcc.dg/20061026.c
    sources: {binary: 20061026.s, cflags: -O1 -S}
  group: GRPSERIAL
test_20061109-1_173:
  build:
    files: compilers/gcc/./gcc.dg/20061109-1.c
    sources: {binary: 20061109-1.s, cflags: -O1 -S}
  group: GRPSERIAL
test_20061109-2_174:
  build:
    files: compilers/gcc/./gcc.dg/20061109-2.c
    sources: {binary: 20061109-2.s, cflags: -O1 -S}
  group: GRPSERIAL
test_20061124-1_175:
  build:
    files: compilers/gcc/./gcc.dg/20061124-1.c
    sources: {binary: ./20061124-1.exe, cflags: -ansi -pedantic-errors}
  group: GRPSERIAL
  run: {cwd: .}
test_20061127-1_176:
  build:
    files: compilers/gcc/./gcc.dg/20061127-1.c
    sources: {binary: 20061127-1.s, cflags: -O1 -fPIC -S}
  group: GRPSERIAL
test_20070112-1_177:
  build:
    files: compilers/gcc/./gcc.dg/20070112-1.c
    sources: {binary: 20070112-1.s, cflags: -O1 -S}
  group: GRPSERIAL
test_20070507-1_178:
  build:
    files: compilers/gcc/./gcc.dg/20070507-1.c
    sources: {binary: ./20070507-1.exe, cflags: -O3 -fPIC}
  group: GRPSERIAL
  run: {cwd: .}
test_20070725-1_179:
  build:
    files: compilers/gcc/./gcc.dg/20070725-1.c
    sources: {binary: ./20070725-1.exe, cflags: -O1}
  group: GRPSERIAL
  run: {cwd: .}
test_20080615-1_180:
  build:
    files: compilers/gcc/./gcc.dg/20080615-1.c
    sources: {binary: 20080615-1.s, cflags: -w -O2 -S}
  group: GRPSERIAL
test_20080820_181:
  build:
    files: compilers/gcc/./gcc.dg/20080820.c
    sources: {binary: 20080820.s, cflags: -fshow-column -fms-extensions -pedantic
        -std=gnu89 -S}
  group: GRPSERIAL
  validate:
    match:
      L4: {expect: true, expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("29:ISO
          C90 doesn\''t support unnamed")[^\n]*\n?)+'}
test_20081223-1_182:
  build:
    files: compilers/gcc/./gcc.dg/20081223-1.c
    sources: {binary: 20081223-1.s, cflags: -flto -ffat-lto-objects -S}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("storage
          size of \''bar\'' isn\''t known")[^\n]*\n?)+'}
test_20090902-1_183:
  build:
    files: compilers/gcc/./gcc.dg/20090902-1.c
    sources: {binary: 20090902-1.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
test_20090922-1_184:
  build:
    files: compilers/gcc/./gcc.dg/20090922-1.c
    sources: {binary: 20090922-1.s, cflags: -O2 -g -funroll-loops -std=gnu99 -S}
  group: GRPSERIAL
test_20100906-1_185:
  build:
    files: compilers/gcc/./gcc.dg/20100906-1.c
    sources: {binary: ./20100906-1.exe, cflags: '-O2 -fno-short-enums -Wl,--no-enum-size-warning'}
  group: GRPSERIAL
  run: {cwd: .}
test_20101010-1_186:
  build:
    files: compilers/gcc/./gcc.dg/20101010-1.c
    sources: {binary: 20101010-1.s, cflags: -O2 -fno-crossjumping -S}
  group: GRPSERIAL
test_20101013-1_187:
  build:
    files: compilers/gcc/./gcc.dg/20101013-1.c
    sources: {binary: 20101013-1.s, cflags: -O2 -fdump-tree-optimized -S}
  group: GRPSERIAL
test_20111216-1_188:
  build:
    files: compilers/gcc/./gcc.dg/20111216-1.c
    sources: {binary: 20111216-1.s, cflags: -O -fexceptions -fnon-call-exceptions
        -S}
  group: GRPSERIAL
test_20111227-2_189:
  build:
    files: compilers/gcc/./gcc.dg/20111227-2.c
    sources: {binary: 20111227-2.s, cflags: -fdump-rtl-ree -O -free -ffat-lto-objects
        -S}
  group: GRPSERIAL
test_20111227-3_190:
  build:
    files: compilers/gcc/./gcc.dg/20111227-3.c
    sources: {binary: 20111227-3.s, cflags: -fdump-rtl-ree -O -free -ffat-lto-objects
        -S}
  group: GRPSERIAL
test_20141029-1_191:
  build:
    files: compilers/gcc/./gcc.dg/20141029-1.c
    sources: {binary: 20141029-1.s, cflags: -fstrict-volatile-bitfields -fdump-rtl-final
        -ffat-lto-objects -S}
  group: GRPSERIAL
test_20150120-1_192:
  build:
    files: compilers/gcc/./gcc.dg/20150120-1.c
    sources: {binary: 20150120-1.s, cflags: -O2 -fdump-tree-original -S}
  group: GRPSERIAL
test_20150120-2_193:
  build:
    files: compilers/gcc/./gcc.dg/20150120-2.c
    sources: {binary: 20150120-2.s, cflags: -O2 -fdump-tree-original -S}
  group: GRPSERIAL
test_20150120-3_194:
  build:
    files: compilers/gcc/./gcc.dg/20150120-3.c
    sources: {binary: 20150120-3.s, cflags: -O2 -fdump-tree-original -S}
  group: GRPSERIAL
test_20150306-1_195:
  build:
    files: compilers/gcc/./gcc.dg/20150306-1.c
    sources: {binary: ./20150306-1.exe, cflags: -fstrict-volatile-bitfields}
  group: GRPSERIAL
  run: {cwd: .}
test_20161219_196:
  build:
    files: compilers/gcc/./gcc.dg/20161219.c
    sources: {binary: 20161219.o, cflags: -O1 -w -c}
  group: GRPSERIAL
test_54455_197:
  build:
    files: compilers/gcc/./gcc.dg/54455.c
    sources: {binary: 54455.s, cflags: -O1 -fschedule-insns -fselective-scheduling
        --param max-sched-extend-regions-iters=2 -S}
  group: GRPSERIAL
test_920413-1_198:
  build:
    files: compilers/gcc/./gcc.dg/920413-1.c
    sources: {binary: 920413-1.s, cflags: -Wtraditional -std=gnu89 -S}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("width
          of integer|traditional C rejects")[^\n]*\n?)+'}
test_940409-1_199:
  build:
    files: compilers/gcc/./gcc.dg/940409-1.c
    sources: {binary: 940409-1.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
test_940510-1_200:
  build:
    files: compilers/gcc/./gcc.dg/940510-1.c
    sources: {binary: 940510-1.s, cflags: -std=c89 -pedantic -S}
  group: GRPSERIAL
  validate:
    match:
      L3: {expect: true, expr: '(^|\n)([^\n]+(:3:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 does not support flexible array members")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("flexible
          array member in a struct with no named members")[^\n]*\n?)+'}
test_951130-1_201:
  build:
    files: compilers/gcc/./gcc.dg/951130-1.c
    sources: {binary: 951130-1.s, cflags: -Werror -S}
  group: GRPSERIAL
test_980502-1_202:
  build:
    files: compilers/gcc/./gcc.dg/980502-1.c
    sources: {binary: 980502-1.s, cflags: -O2 -S}
  group: GRPSERIAL
test_980523-1_203:
  build:
    files: compilers/gcc/./gcc.dg/980523-1.c
    sources: {binary: ./980523-1.exe, cflags: -O2 -fpic}
  group: GRPSERIAL
  run: {cwd: .}
test_980526-1_204:
  build:
    files: compilers/gcc/./gcc.dg/980526-1.c
    sources: {binary: 980526-1.s, cflags: -O2 -fpic -S}
  group: GRPSERIAL
test_980816-1_205:
  build:
    files: compilers/gcc/./gcc.dg/980816-1.c
    sources: {binary: 980816-1.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
test_990213-1_206:
  build:
    files: compilers/gcc/./gcc.dg/990213-1.c
    sources: {binary: 990213-1.s, cflags: -W -Wall -Werror -S}
  group: GRPSERIAL
test_990506-0_207:
  build:
    files: compilers/gcc/./gcc.dg/990506-0.c
    sources: {binary: 990506-0.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared")[^\n]*\n?)+'}
test_O16384_208:
  build:
    files: compilers/gcc/./gcc.dg/O16384.c
    sources: {binary: O16384.s, cflags: -O16384 -S}
  group: GRPSERIAL
test_PR68002_209:
  build:
    files: compilers/gcc/./gcc.dg/PR68002.c
    sources: {binary: PR68002.s, cflags: -O1 -fkeep-static-functions -ffat-lto-objects
        -S}
  group: GRPSERIAL
test_Waddress-2_210:
  build:
    files: compilers/gcc/./gcc.dg/Waddress-2.c
    sources: {binary: Waddress-2.s, cflags: -Waddress -S}
  group: GRPSERIAL
test_Waddress_211:
  build:
    files: compilers/gcc/./gcc.dg/Waddress.c
    sources: {binary: Waddress.s, cflags: -Waddress -S}
  group: GRPSERIAL
test_Wall_212:
  build:
    files: compilers/gcc/./gcc.dg/Wall.c
    sources: {binary: Wall.s, cflags: -Wall -S}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("no
          effect")[^\n]*\n?)+'}
test_Walloca-10_214:
  build:
    files: compilers/gcc/./gcc.dg/Walloca-10.c
    sources: {binary: Walloca-10.s, cflags: -Walloca-larger-than=2000 -O2 -S}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("argument
          to .alloca. may be too large")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("argument
          to .alloca. may be too large")[^\n]*\n?)+'}
test_Walloca-11_215:
  build:
    files: compilers/gcc/./gcc.dg/Walloca-11.c
    sources: {binary: Walloca-11.s, cflags: -Walloca -O2 -S}
  group: GRPSERIAL
test_Walloca-12_216:
  build:
    files: compilers/gcc/./gcc.dg/Walloca-12.c
    sources: {binary: Walloca-12.s, cflags: -Walloca-larger-than=128 -O2 -S}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("unbounded
          use of \''alloca\''")[^\n]*\n?)+'}
test_Walloca-13_217:
  build:
    files: compilers/gcc/./gcc.dg/Walloca-13.c
    sources: {binary: Walloca-13.s, cflags: -Walloca-larger-than=100 -O2 -S}
  group: GRPSERIAL
test_Walloca-14_218:
  build:
    files: compilers/gcc/./gcc.dg/Walloca-14.c
    sources: {binary: Walloca-14.s, cflags: -O2 -Walloca-larger-than=126812070 -S}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("passing
          argument 1")[^\n]*\n?)+'}
test_Walloca-1_213:
  build:
    files: compilers/gcc/./gcc.dg/Walloca-1.c
    sources: {binary: Walloca-1.s, cflags: -Walloca-larger-than=2000 -O2 -S}
  group: GRPSERIAL
  validate:
    match:
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("\''alloca\''
          within a loop")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("large
          due to conversion")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("unbounded
          use of \''alloca\''")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("is
          too large")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("may
          be too large")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("unbounded
          use of \''alloca\''")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("argument
          to \''alloca\'' is zero")[^\n]*\n?)+'}
test_Walloca-2_219:
  build:
    files: compilers/gcc/./gcc.dg/Walloca-2.c
    sources: {binary: Walloca-2.s, cflags: -Walloca-larger-than=2000 -O2 -S}
  group: GRPSERIAL
  validate:
    match:
      L27: {expect: true, expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("large
          due to conversion")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("\''alloca\''
          may be too large")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("unbounded
          use of \''alloca\''")[^\n]*\n?)+'}
test_Walloca-3_220:
  build:
    files: compilers/gcc/./gcc.dg/Walloca-3.c
    sources: {binary: Walloca-3.s, cflags: -Walloca-larger-than=2000 -O2 -S}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("\''alloca\''
          bound is unknown")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("\''alloca\''
          bound is unknown")[^\n]*\n?)+'}
test_Walloca-4_221:
  build:
    files: compilers/gcc/./gcc.dg/Walloca-4.c
    sources: {binary: Walloca-4.s, cflags: -Walloca-larger-than=5000 -O2 -S}
  group: GRPSERIAL
test_Walloca-5_222:
  build:
    files: compilers/gcc/./gcc.dg/Walloca-5.c
    sources: {binary: Walloca-5.s, cflags: -Walloca-larger-than=123 -O2 -S}
  group: GRPSERIAL
  validate:
    match:
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("unbounded
          use of alloca")[^\n]*\n?)+'}
test_Walloca-6_223:
  build:
    files: compilers/gcc/./gcc.dg/Walloca-6.c
    sources: {binary: Walloca-6.s, cflags: -Walloca-larger-than=256 -O2 -S}
  group: GRPSERIAL
test_Walloca-7_224:
  build:
    files: compilers/gcc/./gcc.dg/Walloca-7.c
    sources: {binary: Walloca-7.s, cflags: -Walloca -O0 -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("use
          of \''alloca\''")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("use
          of \''alloca\''")[^\n]*\n?)+'}
test_Walloca-8_225:
  build:
    files: compilers/gcc/./gcc.dg/Walloca-8.c
    sources: {binary: Walloca-8.s, cflags: -Walloca-larger-than=2000 -O2 -S}
  group: GRPSERIAL
test_Walloca-9_226:
  build:
    files: compilers/gcc/./gcc.dg/Walloca-9.c
    sources: {binary: Walloca-9.s, cflags: -Walloca-larger-than=5000 -O2 -S}
  group: GRPSERIAL
test_Walways-true-1_227:
  build:
    files: compilers/gcc/./gcc.dg/Walways-true-1.c
    sources: {binary: Walways-true-1.s, cflags: -Waddress -fshow-column -S}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("7:always
          evaluate as")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("7:always
          evaluate as")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("7:always
          evaluate as")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("7:always
          evaluate as")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("11:the
          comparison will always evaluate as \''false\''")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("10:the
          comparison will always evaluate as \''false\''")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("10:the
          comparison will always evaluate as \''false\''")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("13:the
          comparison will always evaluate as \''false\''")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("9:the
          comparison will always evaluate as \''false\''")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("9:the
          comparison will always evaluate as \''false\''")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("9:the
          comparison will always evaluate as \''false\''")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("9:the
          comparison will always evaluate as \''false\''")[^\n]*\n?)+'}
test_Warray-bounds-10_228:
  build:
    files: compilers/gcc/./gcc.dg/Warray-bounds-10.c
    sources: {binary: Warray-bounds-10.s, cflags: -O3 -Warray-bounds -S}
  group: GRPSERIAL
test_Warray-bounds-11_229:
  build:
    files: compilers/gcc/./gcc.dg/Warray-bounds-11.c
    sources: {binary: Warray-bounds-11.s, cflags: -O3 -Warray-bounds=2 -S}
  group: GRPSERIAL
  validate:
    match:
      L60: {expect: true, expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("subscript
          is above array bound")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("subscript
          is above array bound")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("subscript
          is above array bound")[^\n]*\n?)+'}
      L69: {expect: true, expr: '(^|\n)([^\n]+(:69:)[^\n]*[0-9]+: warning:[^\n]*("subscript
          is above array bound")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("subscript
          is above array bound")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("subscript
          is above array bound")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("subscript
          is above array bound")[^\n]*\n?)+'}
      L88: {expect: true, expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("subscript
          is above array bound")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("subscript
          is above array bound")[^\n]*\n?)+'}
test_Warray-bounds-12_230:
  build:
    files: compilers/gcc/./gcc.dg/Warray-bounds-12.c
    sources: {binary: Warray-bounds-12.s, cflags: -O3 -Warray-bounds -mssse3 -S}
  group: GRPSERIAL
test_Warray-bounds-13_231:
  build:
    files: compilers/gcc/./gcc.dg/Warray-bounds-13.c
    sources: {binary: Warray-bounds-13.s, cflags: -O3 -Warray-bounds -S}
  group: GRPSERIAL
test_Warray-bounds-14_232:
  build:
    files: compilers/gcc/./gcc.dg/Warray-bounds-14.c
    sources: {binary: Warray-bounds-14.s, cflags: -O2 -Warray-bounds -S}
  group: GRPSERIAL
  validate:
    match:
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("outside
          array bounds")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("outside
          array bounds")[^\n]*\n?)+'}
test_Warray-bounds-15_233:
  build:
    files: compilers/gcc/./gcc.dg/Warray-bounds-15.c
    sources: {binary: Warray-bounds-15.s, cflags: -O2 -Warray-bounds -S}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("above
          array bounds")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("above
          array bounds")[^\n]*\n?)+'}
test_Warray-bounds-16_234:
  build:
    files: compilers/gcc/./gcc.dg/Warray-bounds-16.c
    sources: {binary: Warray-bounds-16.s, cflags: -O3 -Warray-bounds -S}
  group: GRPSERIAL
test_Warray-bounds-17_235:
  build:
    files: compilers/gcc/./gcc.dg/Warray-bounds-17.c
    sources: {binary: Warray-bounds-17.s, cflags: -O2 -Warray-bounds -S}
  group: GRPSERIAL
test_Warray-bounds-18_236:
  build:
    files: compilers/gcc/./gcc.dg/Warray-bounds-18.c
    sources: {binary: Warray-bounds-18.s, cflags: -O2 -Warray-bounds -S}
  group: GRPSERIAL
test_Warray-bounds-19_237:
  build:
    files: compilers/gcc/./gcc.dg/Warray-bounds-19.c
    sources: {binary: Warray-bounds-19.s, cflags: -O3 -Warray-bounds -S}
  group: GRPSERIAL
test_Warray-bounds-20_239:
  build:
    files: compilers/gcc/./gcc.dg/Warray-bounds-20.c
    sources: {binary: Warray-bounds-20.s, cflags: -O2 -Warray-bounds -S}
  group: GRPSERIAL
test_Warray-bounds-21_240:
  build:
    files: compilers/gcc/./gcc.dg/Warray-bounds-21.c
    sources: {binary: Warray-bounds-21.s, cflags: -O2 -Warray-bounds -S}
  group: GRPSERIAL
test_Warray-bounds-2_238:
  build:
    files: compilers/gcc/./gcc.dg/Warray-bounds-2.c
    sources: {binary: Warray-bounds-2.s, cflags: -O2 -Wall -S}
  group: GRPSERIAL
  validate:
    match:
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("array
          subscript")[^\n]*\n?)+'}
test_Warray-bounds-3_241:
  build:
    files: compilers/gcc/./gcc.dg/Warray-bounds-3.c
    sources: {binary: Warray-bounds-3.s, cflags: -O2 -Warray-bounds -S}
  group: GRPSERIAL
test_Warray-bounds-4_242:
  build:
    files: compilers/gcc/./gcc.dg/Warray-bounds-4.c
    sources: {binary: Warray-bounds-4.s, cflags: -O2 -Wall -S}
  group: GRPSERIAL
test_Warray-bounds-5_243:
  build:
    files: compilers/gcc/./gcc.dg/Warray-bounds-5.c
    sources: {binary: Warray-bounds-5.s, cflags: -O3 -Wall -S}
  group: GRPSERIAL
test_Warray-bounds-6_244:
  build:
    files: compilers/gcc/./gcc.dg/Warray-bounds-6.c
    sources: {binary: Warray-bounds-6.s, cflags: -O3 -Wall -S}
  group: GRPSERIAL
test_Warray-bounds-7_245:
  build:
    files: compilers/gcc/./gcc.dg/Warray-bounds-7.c
    sources: {binary: Warray-bounds-7.s, cflags: -O2 -Warray-bounds -S}
  group: GRPSERIAL
test_Warray-bounds-8_246:
  build:
    files: compilers/gcc/./gcc.dg/Warray-bounds-8.c
    sources: {binary: Warray-bounds-8.s, cflags: -O3 -Wall -S}
  group: GRPSERIAL
test_Warray-bounds-9_247:
  build:
    files: compilers/gcc/./gcc.dg/Warray-bounds-9.c
    sources: {binary: Warray-bounds-9.s, cflags: -O3 -Warray-bounds -S}
  group: GRPSERIAL
test_Warray-bounds_248:
  build:
    files: compilers/gcc/./gcc.dg/Warray-bounds.c
    sources: {binary: Warray-bounds.s, cflags: -O2 -Warray-bounds -S}
  group: GRPSERIAL
  validate:
    match:
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("6:array
          subscript")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("6:array
          subscript")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("6:array
          subscript")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("6:array
          subscript")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("6:array
          subscript")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("6:array
          subscript")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("6:array
          subscript")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("6:array
          subscript")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("6:array
          subscript")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("array
          subscript")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("8:array
          subscript")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("8:array
          subscript")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("8:array
          subscript")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("8:array
          subscript")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("8:array
          subscript")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("array
          subscript")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("array
          subscript")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("array
          subscript")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("array
          subscript")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("array
          subscript")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("array
          subscript")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("15:array
          subscript")[^\n]*\n?)+'}
test_Wattributes-1_249:
  build:
    files: compilers/gcc/./gcc.dg/Wattributes-1.c
    sources: {binary: Wattributes-1.s, cflags: -Wattributes -S}
  group: GRPSERIAL
  validate:
    match:
      L4: {expect: true, expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("attribute
          directive ignored")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("attribute
          directive ignored")[^\n]*\n?)+'}
test_Wattributes-2_250:
  build:
    files: compilers/gcc/./gcc.dg/Wattributes-2.c
    sources: {binary: Wattributes-2.s, cflags: -Wno-attributes -S}
  group: GRPSERIAL
test_Wattributes-3_251:
  build:
    files: compilers/gcc/./gcc.dg/Wattributes-3.c
    sources: {binary: Wattributes-3.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
  validate:
    match:
      L3: {expect: true, expr: '(^|\n)([^\n]+(:3:)[^\n]*[0-9]+: warning:[^\n]*("attribute
          directive ignored")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("attribute
          directive ignored")[^\n]*\n?)+'}
test_Wattributes-4_252:
  build:
    files: compilers/gcc/./gcc.dg/Wattributes-4.c
    sources: {binary: Wattributes-4.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
  validate:
    match:
      L3: {expect: true, expr: '(^|\n)([^\n]+(:3:)[^\n]*[0-9]+: warning:[^\n]*("bad
          option")[^\n]*\n?)+'}
test_Wbad-function-cast-1_253:
  build:
    files: compilers/gcc/./gcc.dg/Wbad-function-cast-1.c
    sources: {binary: Wbad-function-cast-1.s, cflags: -Wbad-function-cast -S}
  group: GRPSERIAL
  validate:
    match:
      L41: {expect: true, expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int\'' to non-matching type \''float\''")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char\'' to non-matching type \''double\''")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''long int\'' to non-matching type \''_Bool\''")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''float\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''double\'' to non-matching type \''long int\''")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''complex double\'' to non-matching type \''double\''")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''enum e\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''_Bool\'' to non-matching type \''int\''")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''char \\\\*\'' to non-matching type \''\\[^\\\\n\\]*\''")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from function call of type \''int \\\\*\'' to non-matching type \''\\[^\\\\n\\]*\''")[^\n]*\n?)+'}
test_Wbool-operation-1_254:
  build:
    files: compilers/gcc/./gcc.dg/Wbool-operation-1.c
    sources: {binary: Wbool-operation-1.s, cflags: -Wall -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("increment
          of a boolean expression")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("increment
          of a boolean expression")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("decrement
          of a boolean expression")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("decrement
          of a boolean expression")[^\n]*\n?)+'}
test_Wc++-compat_255:
  build:
    files: compilers/gcc/./gcc.dg/Wc++-compat.c
    sources: {binary: Wc++-compat.s, cflags: -Wc++-compat -S}
  group: GRPSERIAL
test_Wc90-c99-compat-1_256:
  build:
    files: compilers/gcc/./gcc.dg/Wc90-c99-compat-1.c
    sources: {binary: Wc90-c99-compat-1.s, cflags: -std=gnu90 -Wpedantic -Wc90-c99-compat
        -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("duplicate
          .volatile.")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("anonymous
          variadic macros were introduced in C99")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("comma
          at end of enumerator list")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 does not support .\\\\\\[\\\\\\*\\\\\\]. array declarators")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 does not support .static. or type qualifiers")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 forbids compound literals")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 forbids specifying subobject to initialize")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 forbids mixed declarations and code")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 forbids mixed declarations and code")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 does not support boolean types")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 forbids subscripting non-lvalue array")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 does not support complex types")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("invoking
          macro F argument")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 forbids variable length array .a.")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 does not support .long long.")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 does not support flexible array members")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("type
          of bit-field .b. is a GCC extension")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("duplicate
          .const.")[^\n]*\n?)+'}
test_Wc90-c99-compat-2_257:
  build:
    files: compilers/gcc/./gcc.dg/Wc90-c99-compat-2.c
    sources: {binary: Wc90-c99-compat-2.s, cflags: -std=gnu99 -Wc90-c99-compat -pedantic-errors
        -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("duplicate
          .volatile.")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("anonymous
          variadic macros were introduced in C99")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("comma
          at end of enumerator list")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 does not support .\\\\\\[\\\\\\*\\\\\\]. array declarators")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 does not support .static. or type qualifiers")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 forbids compound literals")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 forbids specifying subobject to initialize")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 forbids mixed declarations and code")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 forbids mixed declarations and code")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 does not support boolean types")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 forbids subscripting non-lvalue array")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 does not support complex types")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("invoking
          macro F argument")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 forbids variable length array .a.")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 does not support .long long.")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 does not support flexible array members")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("type
          of bit-field .b. is a GCC extension")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("duplicate
          .const.")[^\n]*\n?)+'}
test_Wc90-c99-compat-3_258:
  build:
    files: compilers/gcc/./gcc.dg/Wc90-c99-compat-3.c
    sources: {binary: Wc90-c99-compat-3.s, cflags: -std=gnu11 -Wc90-c99-compat -pedantic-errors
        -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("duplicate
          .volatile.")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("anonymous
          variadic macros were introduced in C99")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("comma
          at end of enumerator list")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 does not support .\\\\\\[\\\\\\*\\\\\\]. array declarators")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 does not support .static. or type qualifiers")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 forbids compound literals")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 forbids specifying subobject to initialize")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 forbids mixed declarations and code")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 forbids mixed declarations and code")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 does not support boolean types")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 forbids subscripting non-lvalue array")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 does not support complex types")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("invoking
          macro F argument")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 forbids variable length array .a.")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 does not support .long long.")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 does not support flexible array members")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("type
          of bit-field .b. is a GCC extension")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("duplicate
          .const.")[^\n]*\n?)+'}
test_Wc90-c99-compat-4_259:
  build:
    files: compilers/gcc/./gcc.dg/Wc90-c99-compat-4.c
    sources: {binary: Wc90-c99-compat-4.s, cflags: -std=gnu90 -Wpedantic -Wno-c90-c99-compat
        -S}
  group: GRPSERIAL
test_Wc90-c99-compat-5_260:
  build:
    files: compilers/gcc/./gcc.dg/Wc90-c99-compat-5.c
    sources: {binary: Wc90-c99-compat-5.s, cflags: -std=gnu90 -pedantic-errors -Wno-c90-c99-compat
        -S}
  group: GRPSERIAL
test_Wc90-c99-compat-6_261:
  build:
    files: compilers/gcc/./gcc.dg/Wc90-c99-compat-6.c
    sources: {binary: Wc90-c99-compat-6.s, cflags: -std=gnu90 -Wc90-c99-compat -S}
  group: GRPSERIAL
test_Wc90-c99-compat-7_262:
  build:
    files: compilers/gcc/./gcc.dg/Wc90-c99-compat-7.c
    sources: {binary: Wc90-c99-compat-7.s, cflags: -std=gnu90 -Wpedantic -Wc90-c99-compat
        -Wno-long-long -Wno-declaration-after-statement -Wno-vla -S}
  group: GRPSERIAL
test_Wc90-c99-compat-8_263:
  build:
    files: compilers/gcc/./gcc.dg/Wc90-c99-compat-8.c
    sources: {binary: Wc90-c99-compat-8.s, cflags: -std=gnu90 -pedantic-errors -Wc90-c99-compat
        -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate
          .volatile.")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("anonymous
          variadic macros were introduced in C99")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("comma
          at end of enumerator list")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C90 does not support .\\\\\\[\\\\\\*\\\\\\]. array declarators")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C90 does not support .static. or type qualifiers")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C90 forbids compound literals")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C90 forbids specifying subobject to initialize")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C90 forbids mixed declarations and code")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C90 forbids mixed declarations and code")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C90 does not support boolean types")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C90 forbids subscripting non-lvalue array")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C90 does not support complex types")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invoking
          macro F argument")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C90 forbids variable length array .a.")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C90 does not support .long long.")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C90 does not support flexible array members")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("type
          of bit-field .b. is a GCC extension")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate
          .const.")[^\n]*\n?)+'}
test_Wc99-c11-compat-1_264:
  build:
    files: compilers/gcc/./gcc.dg/Wc99-c11-compat-1.c
    sources: {binary: Wc99-c11-compat-1.s, cflags: -std=gnu90 -pedantic -Wc99-c11-compat
        -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 does not support the ._Atomic. qualifier")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 does not support ._Alignas.")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 does not support ._Alignof.")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 does not support ._Generic.")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 doesn.t support unnamed structs/unions")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 does not support ._Noreturn.")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("redefinition
          of typedef .A.")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 does not support ._Thread_local.")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 does not support ._Static_assert.")[^\n]*\n?)+'}
test_Wc99-c11-compat-2_265:
  build:
    files: compilers/gcc/./gcc.dg/Wc99-c11-compat-2.c
    sources: {binary: Wc99-c11-compat-2.s, cflags: -std=gnu99 -pedantic -Wc99-c11-compat
        -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C99 does not support the ._Atomic. qualifier")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C99 does not support ._Alignas.")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C99 does not support ._Alignof.")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C99 does not support ._Generic.")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C99 doesn.t support unnamed structs/unions")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C99 does not support ._Noreturn.")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("redefinition
          of typedef .A.")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C99 does not support ._Thread_local.")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C99 does not support ._Static_assert.")[^\n]*\n?)+'}
test_Wc99-c11-compat-3_266:
  build:
    files: compilers/gcc/./gcc.dg/Wc99-c11-compat-3.c
    sources: {binary: Wc99-c11-compat-3.s, cflags: -std=gnu11 -pedantic-errors -Wc99-c11-compat
        -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C99 does not support the ._Atomic. qualifier")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C99 does not support ._Alignas.")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C99 does not support ._Alignof.")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C99 does not support ._Generic.")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C99 doesn.t support unnamed structs/unions")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C99 does not support ._Noreturn.")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("redefinition
          of typedef .A.")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C99 does not support ._Thread_local.")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C99 does not support ._Static_assert.")[^\n]*\n?)+'}
test_Wc99-c11-compat-4_267:
  build:
    files: compilers/gcc/./gcc.dg/Wc99-c11-compat-4.c
    sources: {binary: Wc99-c11-compat-4.s, cflags: -std=gnu99 -pedantic-errors -Wno-c99-c11-compat
        -S}
  group: GRPSERIAL
test_Wc99-c11-compat-5_268:
  build:
    files: compilers/gcc/./gcc.dg/Wc99-c11-compat-5.c
    sources: {binary: Wc99-c11-compat-5.s, cflags: -std=gnu11 -Wc99-c11-compat -S}
  group: GRPSERIAL
test_Wc99-c11-compat-6_269:
  build:
    files: compilers/gcc/./gcc.dg/Wc99-c11-compat-6.c
    sources: {binary: Wc99-c11-compat-6.s, cflags: -std=gnu90 -pedantic-errors -Wc99-c11-compat
        -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C90 does not support the ._Atomic. qualifier")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C90 does not support ._Alignas.")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C90 does not support ._Alignof.")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C90 does not support ._Generic.")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C90 doesn.t support unnamed structs/unions")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C90 does not support ._Noreturn.")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of typedef .A.")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C90 does not support ._Thread_local.")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C90 does not support ._Static_assert.")[^\n]*\n?)+'}
test_Wc99-c11-compat-7_270:
  build:
    files: compilers/gcc/./gcc.dg/Wc99-c11-compat-7.c
    sources: {binary: Wc99-c11-compat-7.s, cflags: -std=gnu99 -pedantic-errors -Wc99-c11-compat
        -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C99 does not support the ._Atomic. qualifier")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C99 does not support ._Alignas.")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C99 does not support ._Alignof.")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C99 does not support ._Generic.")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C99 doesn.t support unnamed structs/unions")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C99 does not support ._Noreturn.")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition
          of typedef .A.")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C99 does not support ._Thread_local.")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C99 does not support ._Static_assert.")[^\n]*\n?)+'}
test_Wchar-subscripts-1_271:
  build:
    files: compilers/gcc/./gcc.dg/Wchar-subscripts-1.c
    sources: {binary: Wchar-subscripts-1.s, cflags: -Wchar-subscripts -S}
  group: GRPSERIAL
  validate:
    match:
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("array
          subscript has type \''char\''")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("array
          subscript has type \''char\''")[^\n]*\n?)+'}
test_Wchar-subscripts_272:
  build:
    files: compilers/gcc/./gcc.dg/Wchar-subscripts.c
    sources: {binary: Wchar-subscripts.s, cflags: -Wchar-subscripts -S}
  group: GRPSERIAL
test_Wconversion-3_273:
  build:
    files: compilers/gcc/./gcc.dg/Wconversion-3.c
    sources: {binary: Wconversion-3.s, cflags: -O2 -Wconversion -S}
  group: GRPSERIAL
  validate:
    match:
      L4: {expect: true, expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("negative")[^\n]*\n?)+'}
test_Wconversion-4_274:
  build:
    files: compilers/gcc/./gcc.dg/Wconversion-4.c
    sources: {binary: Wconversion-4.s, cflags: -O2 -S}
  group: GRPSERIAL
test_Wconversion-5_275:
  build:
    files: compilers/gcc/./gcc.dg/Wconversion-5.c
    sources: {binary: Wconversion-5.s, cflags: -O2 -Wconversion -S}
  group: GRPSERIAL
  validate:
    match:
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("may
          alter its value")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("may
          alter its value")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("may
          alter its value")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("may
          change the sign")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("may
          change the sign")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("may
          change the sign")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("may
          change the sign")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("may
          change the sign")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("may
          change the sign")[^\n]*\n?)+'}
test_Wconversion-complex-c99_276:
  build:
    files: compilers/gcc/./gcc.dg/Wconversion-complex-c99.c
    sources: {binary: Wconversion-complex-c99.s, cflags: -std=c99 -pedantic -Wconversion
        -S}
  group: GRPSERIAL
  validate:
    match:
      L105: {expect: true, expr: '(^|\n)([^\n]+(:105:)[^\n]*[0-9]+: warning:[^\n]*("float-conversion")[^\n]*\n?)+'}
      L106: {expect: true, expr: '(^|\n)([^\n]+(:106:)[^\n]*[0-9]+: warning:[^\n]*("float-conversion")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+(:118:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+(:119:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L121: {expect: true, expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("float-conversion")[^\n]*\n?)+'}
      L122: {expect: true, expr: '(^|\n)([^\n]+(:122:)[^\n]*[0-9]+: warning:[^\n]*("float-conversion")[^\n]*\n?)+'}
      L124: {expect: true, expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("float-conversion")[^\n]*\n?)+'}
      L125: {expect: true, expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("float-conversion")[^\n]*\n?)+'}
      L134: {expect: true, expr: '(^|\n)([^\n]+(:134:)[^\n]*[0-9]+: warning:[^\n]*("float-conversion")[^\n]*\n?)+'}
      L135: {expect: true, expr: '(^|\n)([^\n]+(:135:)[^\n]*[0-9]+: warning:[^\n]*("float-conversion")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("float-conversion")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("float-conversion")[^\n]*\n?)+'}
      L69: {expect: true, expr: '(^|\n)([^\n]+(:69:)[^\n]*[0-9]+: warning:[^\n]*("float-conversion")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L98: {expect: true, expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
test_Wconversion-complex-gnu_277:
  build:
    files: compilers/gcc/./gcc.dg/Wconversion-complex-gnu.c
    sources: {binary: Wconversion-complex-gnu.s, cflags: -std=gnu99 -Wconversion -S}
  group: GRPSERIAL
  validate:
    match:
      L100: {expect: true, expr: '(^|\n)([^\n]+(:100:)[^\n]*[0-9]+: warning:[^\n]*("float-conversion")[^\n]*\n?)+'}
      L111: {expect: true, expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L112: {expect: true, expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L113: {expect: true, expr: '(^|\n)([^\n]+(:113:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+(:115:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L116: {expect: true, expr: '(^|\n)([^\n]+(:116:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L117: {expect: true, expr: '(^|\n)([^\n]+(:117:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+(:119:)[^\n]*[0-9]+: warning:[^\n]*("float-conversion")[^\n]*\n?)+'}
      L120: {expect: true, expr: '(^|\n)([^\n]+(:120:)[^\n]*[0-9]+: warning:[^\n]*("float-conversion")[^\n]*\n?)+'}
      L121: {expect: true, expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("float-conversion")[^\n]*\n?)+'}
      L123: {expect: true, expr: '(^|\n)([^\n]+(:123:)[^\n]*[0-9]+: warning:[^\n]*("float-conversion")[^\n]*\n?)+'}
      L124: {expect: true, expr: '(^|\n)([^\n]+(:124:)[^\n]*[0-9]+: warning:[^\n]*("float-conversion")[^\n]*\n?)+'}
      L125: {expect: true, expr: '(^|\n)([^\n]+(:125:)[^\n]*[0-9]+: warning:[^\n]*("float-conversion")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("float-conversion")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("float-conversion")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("float-conversion")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("float-conversion")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("float-conversion")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("float-conversion")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+(:80:)[^\n]*[0-9]+: warning:[^\n]*("float-conversion")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("float-conversion")[^\n]*\n?)+'}
test_Wconversion-integer-no-sign_278:
  build:
    files: compilers/gcc/./gcc.dg/Wconversion-integer-no-sign.c
    sources: {binary: Wconversion-integer-no-sign.s, cflags: -std=c99 -fsigned-char
        -Wconversion -Wno-sign-conversion -S}
  group: GRPSERIAL
  validate:
    match:
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
test_Wconversion-integer_279:
  build:
    files: compilers/gcc/./gcc.dg/Wconversion-integer.c
    sources: {binary: Wconversion-integer.s, cflags: -std=c99 -fsigned-char -Wconversion
        -S}
  group: GRPSERIAL
  validate:
    match:
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("
          conversion")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("
          conversion")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L69: {expect: true, expr: '(^|\n)([^\n]+(:69:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+(:70:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L88: {expect: true, expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
test_Wconversion-pr34389_280:
  build:
    files: compilers/gcc/./gcc.dg/Wconversion-pr34389.c
    sources: {binary: Wconversion-pr34389.s, cflags: -Wconversion -Wsign-conversion
        -S}
  group: GRPSERIAL
  validate:
    match:
      L29: {expect: true, expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
test_Wconversion-real-integer_281:
  build:
    files: compilers/gcc/./gcc.dg/Wconversion-real-integer.c
    sources: {binary: Wconversion-real-integer.s, cflags: -std=c99 -Wconversion -S}
  group: GRPSERIAL
  validate:
    match:
      L100: {expect: true, expr: '(^|\n)([^\n]+(:100:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L101: {expect: true, expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L102: {expect: true, expr: '(^|\n)([^\n]+(:102:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L103: {expect: true, expr: '(^|\n)([^\n]+(:103:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L111: {expect: true, expr: '(^|\n)([^\n]+(:111:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L112: {expect: true, expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("overflow")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L88: {expect: true, expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L98: {expect: true, expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
test_Wcxx-compat-10_283:
  build:
    files: compilers/gcc/./gcc.dg/Wcxx-compat-10.c
    sources: {binary: Wcxx-compat-10.s, cflags: -Wc++-compat -S}
  group: GRPSERIAL
  validate:
    match:
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
test_Wcxx-compat-11_284:
  build:
    files: compilers/gcc/./gcc.dg/Wcxx-compat-11.c
    sources: {binary: Wcxx-compat-11.s, cflags: -Wc++-compat -S}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("promoted")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("promoted")[^\n]*\n?)+'}
test_Wcxx-compat-12_285:
  build:
    files: compilers/gcc/./gcc.dg/Wcxx-compat-12.c
    sources: {binary: Wcxx-compat-12.s, cflags: -fno-short-enums -Wc++-compat -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
test_Wcxx-compat-13_286:
  build:
    files: compilers/gcc/./gcc.dg/Wcxx-compat-13.c
    sources: {binary: Wcxx-compat-13.s, cflags: -Wc++-compat -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("operator")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("operator")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("operator")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("operator")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("operator")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("operator")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("operator")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("operator")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("operator")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("operator")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("operator")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("operator")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("operator")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("operator")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("operator")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("operator")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("operator")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("operator")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("operator")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("operator")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("operator")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("operator")[^\n]*\n?)+'}
test_Wcxx-compat-14_287:
  build:
    files: compilers/gcc/./gcc.dg/Wcxx-compat-14.c
    sources: {binary: Wcxx-compat-14.s, cflags: -Wc++-compat -S}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
test_Wcxx-compat-15_288:
  build:
    files: compilers/gcc/./gcc.dg/Wcxx-compat-15.c
    sources: {binary: Wcxx-compat-15.s, cflags: -Wc++-compat -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
test_Wcxx-compat-16_289:
  build:
    files: compilers/gcc/./gcc.dg/Wcxx-compat-16.c
    sources: {binary: Wcxx-compat-16.s, cflags: -Wc++-compat -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
test_Wcxx-compat-17_290:
  build:
    files: compilers/gcc/./gcc.dg/Wcxx-compat-17.c
    sources: {binary: Wcxx-compat-17.s, cflags: -Wc++-compat -S}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L3: {expect: true, expr: '(^|\n)([^\n]+(:3:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
test_Wcxx-compat-18_291:
  build:
    files: compilers/gcc/./gcc.dg/Wcxx-compat-18.c
    sources: {binary: Wcxx-compat-18.s, cflags: -Wc++-compat -S}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
test_Wcxx-compat-19_292:
  build:
    files: compilers/gcc/./gcc.dg/Wcxx-compat-19.c
    sources: {binary: Wcxx-compat-19.s, cflags: -Wc++-compat -S}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
test_Wcxx-compat-1_282:
  build:
    files: compilers/gcc/./gcc.dg/Wcxx-compat-1.c
    sources: {binary: Wcxx-compat-1.s, cflags: -Wc++-compat -S}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("not
          permitted")[^\n]*\n?)+'}
test_Wcxx-compat-20_294:
  build:
    files: compilers/gcc/./gcc.dg/Wcxx-compat-20.c
    sources: {binary: Wcxx-compat-20.s, cflags: -Wc++-compat -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("uninitialized
          const member in")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("uninitialized
          const member in")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("uninitialized
          const member in")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("uninitialized
          const member in")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("uninitialized
          const member in")[^\n]*\n?)+'}
test_Wcxx-compat-21_295:
  build:
    files: compilers/gcc/./gcc.dg/Wcxx-compat-21.c
    sources: {binary: Wcxx-compat-21.s, cflags: -Wc++-compat -S}
  group: GRPSERIAL
test_Wcxx-compat-22_296:
  build:
    files: compilers/gcc/./gcc.dg/Wcxx-compat-22.c
    sources: {binary: Wcxx-compat-22.s, cflags: -Wc++-compat -S}
  group: GRPSERIAL
  validate:
    match:
      L3: {expect: true, expr: '(^|\n)([^\n]+(:3:)[^\n]*[0-9]+: warning:[^\n]*("empty
          struct has size 0 in C")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("empty
          union has size 0 in C")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("empty
          struct has size 0 in C|declaration does not declare anything")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("empty
          union has size 0 in C|declaration does not declare anything")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("empty
          union has size 0 in C|declaration does not declare anything")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("empty
          struct has size 0 in C|declaration does not declare anything")[^\n]*\n?)+'}
test_Wcxx-compat-2_293:
  build:
    files: compilers/gcc/./gcc.dg/Wcxx-compat-2.c
    sources: {binary: Wcxx-compat-2.s, cflags: -Wc++-compat -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("5:keyword")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("5:keyword")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("5:keyword")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("5:keyword")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("5:keyword")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("5:keyword")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("5:keyword")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("5:keyword")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("5:keyword")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("5:keyword")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("5:keyword")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("5:keyword")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("5:keyword")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("5:keyword")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("5:keyword")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("5:keyword")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("5:keyword")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("5:keyword")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("5:keyword")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("5:keyword")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("5:keyword")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("5:keyword")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("5:keyword")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("5:keyword")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("5:keyword")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("5:keyword")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("5:keyword")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("5:keyword")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("5:keyword")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("5:keyword")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("5:keyword")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("5:keyword")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("5:keyword")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("5:keyword")[^\n]*\n?)+'}
test_Wcxx-compat-3_297:
  build:
    files: compilers/gcc/./gcc.dg/Wcxx-compat-3.c
    sources: {binary: Wcxx-compat-3.s, cflags: -Wc++-compat -S}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
test_Wcxx-compat-4_298:
  build:
    files: compilers/gcc/./gcc.dg/Wcxx-compat-4.c
    sources: {binary: Wcxx-compat-4.s, cflags: -Wc++-compat -S}
  group: GRPSERIAL
  validate:
    match:
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
test_Wcxx-compat-5_299:
  build:
    files: compilers/gcc/./gcc.dg/Wcxx-compat-5.c
    sources: {binary: Wcxx-compat-5.s, cflags: -Wc++-compat -S}
  group: GRPSERIAL
  validate:
    match:
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
test_Wcxx-compat-6_300:
  build:
    files: compilers/gcc/./gcc.dg/Wcxx-compat-6.c
    sources: {binary: Wcxx-compat-6.s, cflags: -Wc++-compat -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L101: {expect: true, expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L103: {expect: true, expr: '(^|\n)([^\n]+(:103:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+(:70:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
test_Wcxx-compat-7_301:
  build:
    files: compilers/gcc/./gcc.dg/Wcxx-compat-7.c
    sources: {binary: Wcxx-compat-7.s, cflags: -Wc++-compat -S}
  group: GRPSERIAL
  validate:
    match:
      L31: {expect: true, expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("not
          visible in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("not
          visible in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("not
          visible in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("not
          visible in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("not
          visible in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
test_Wcxx-compat-8_302:
  build:
    files: compilers/gcc/./gcc.dg/Wcxx-compat-8.c
    sources: {binary: Wcxx-compat-8.s, cflags: -Wc++-compat -S}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("not
          visible in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          application of \''sizeof\''")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          application of \''__alignof__\''")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("storage
          size of \''w5\'' isn\''t known")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of undefined type")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
test_Wcxx-compat-9_303:
  build:
    files: compilers/gcc/./gcc.dg/Wcxx-compat-9.c
    sources: {binary: Wcxx-compat-9.s, cflags: -Wc++-compat -S}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          in C\\[+\\]\\[+\\]")[^\n]*\n?)+'}
test_Wdeclaration-after-statement-1_304:
  build:
    files: compilers/gcc/./gcc.dg/Wdeclaration-after-statement-1.c
    sources: {binary: ./Wdeclaration-after-statement-1.exe, cflags: -Wdeclaration-after-statement}
  group: GRPSERIAL
  run: {cwd: .}
  validate:
    match:
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("")[^\n]*\n?)+'}
test_Wdeclaration-after-statement-2_305:
  build:
    files: compilers/gcc/./gcc.dg/Wdeclaration-after-statement-2.c
    sources: {binary: ./Wdeclaration-after-statement-2.exe, cflags: -std=c99 -pedantic-errors
        -Wdeclaration-after-statement}
  group: GRPSERIAL
  run: {cwd: .}
  validate:
    match:
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("")[^\n]*\n?)+'}
test_Wdeclaration-after-statement-3_306:
  build:
    files: compilers/gcc/./gcc.dg/Wdeclaration-after-statement-3.c
    sources: {binary: Wdeclaration-after-statement-3.s, cflags: -std=c99 -pedantic
        -Werror=declaration-after-statement -S}
  group: GRPSERIAL
  validate:
    match:
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_Wdeclaration-after-statement-4_307:
  build:
    files: compilers/gcc/./gcc.dg/Wdeclaration-after-statement-4.c
    sources: {binary: Wdeclaration-after-statement-4.s, cflags: -std=c90 -pedantic
        -Wno-declaration-after-statement -S}
  group: GRPSERIAL
test_Wdesignated-init-2_308:
  build:
    files: compilers/gcc/./gcc.dg/Wdesignated-init-2.c
    sources: {binary: Wdesignated-init-2.s, cflags: -std=gnu11 -S}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("(positional|near
          initialization)")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("(positional|near
          initialization)")[^\n]*\n?)+'}
test_Wdesignated-init_309:
  build:
    files: compilers/gcc/./gcc.dg/Wdesignated-init.c
    sources: {binary: Wdesignated-init.s, cflags: -std=gnu99 -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          valid")[^\n]*\n?)+'}
      L106: {expect: true, expr: '(^|\n)([^\n]+(:106:)[^\n]*[0-9]+: warning:[^\n]*("(positional|near
          initialization)")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          valid")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("(positional|near
          initialization)")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("(positional|near
          initialization)")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("(positional|near
          initialization)")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("(positional|near
          initialization)")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("(positional|near
          initialization)")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("(positional|near
          initialization)")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("only
          valid")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("(positional|near
          initialization)")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("(positional|near
          initialization)")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("(positional|near
          initialization)")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("(positional|near
          initialization)")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("(positional|near
          initialization)")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("(positional|near
          initialization)")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("(positional|near
          initialization)")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("(positional|near
          initialization)")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("(positional|near
          initialization)")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("(positional|near
          initialization)")[^\n]*\n?)+'}
test_Wdouble-promotion_310:
  build:
    files: compilers/gcc/./gcc.dg/Wdouble-promotion.c
    sources: {binary: Wdouble-promotion.s, cflags: -Wdouble-promotion -S}
  group: GRPSERIAL
  validate:
    match:
      L33: {expect: true, expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("implicit")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("implicit")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("implicit")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("implicit")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("implicit")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("implicit")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("implicit")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("implicit")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("implicit")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("implicit")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("implicit")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("implicit")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("implicit")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("implicit")[^\n]*\n?)+'}
test_Wduplicate-decl-specifier-c11_311:
  build:
    files: compilers/gcc/./gcc.dg/Wduplicate-decl-specifier-c11.c
    sources: {binary: Wduplicate-decl-specifier-c11.s, cflags: -std=c11 -Wduplicate-decl-specifier
        -S}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("duplicate
          ._Atomic.")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("duplicate
          ._Atomic.")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("duplicate
          ._Atomic.")[^\n]*\n?)+'}
test_Wduplicate-decl-specifier_312:
  build:
    files: compilers/gcc/./gcc.dg/Wduplicate-decl-specifier.c
    sources: {binary: Wduplicate-decl-specifier.s, cflags: -Wduplicate-decl-specifier
        -S}
  group: GRPSERIAL
  validate:
    match:
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("duplicate
          .const.")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("duplicate
          .volatile.")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("duplicate
          .restrict.")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("duplicate
          .const.")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("duplicate
          .volatile.")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("duplicate
          .restrict.")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("duplicate
          .const.")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("duplicate
          .volatile.")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("duplicate
          .restrict.")[^\n]*\n?)+'}
test_Wenum-compare-1_313:
  build:
    files: compilers/gcc/./gcc.dg/Wenum-compare-1.c
    sources: {binary: Wenum-compare-1.s, cflags: -Wenum-compare -S}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          between .enum E1. and .enum E2.")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          between .enum E1. and .enum E2.")[^\n]*\n?)+'}
test_Werror-10_315:
  build:
    files: compilers/gcc/./gcc.dg/Werror-10.c
    sources: {binary: Werror-10.s, cflags: -Wattributes -Werror -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".*
          attribute directive ignored")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".*
          will always evaluate as \''true\''")[^\n]*\n?)+'}
test_Werror-11_316:
  build:
    files: compilers/gcc/./gcc.dg/Werror-11.c
    sources: {binary: Werror-11.s, cflags: -Wattributes -Werror -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".*
          attribute directive ignored")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*(".*
          will always evaluate as \''true\''")[^\n]*\n?)+'}
test_Werror-12_317:
  build:
    files: compilers/gcc/./gcc.dg/Werror-12.c
    sources: {binary: Werror-12.s, cflags: -Wattributes -Waddress -S}
  group: GRPSERIAL
  validate:
    match:
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("attribute
          directive ignored")[^\n]*\n?)+'}
test_Werror-13_318:
  build:
    files: compilers/gcc/./gcc.dg/Werror-13.c
    sources: {binary: Werror-13.s, cflags: '-Werror=error -Werror=p, -Werror=l, -Werror=fatal-errors
        -S'}
  group: GRPSERIAL
  validate:
    match:
      L3: {expect: true, expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("-Wp,
          is not an option that controls warnings")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("-Wl,
          is not an option that controls warnings")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("-Werror
          is not an option that controls warnings")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("-Wfatal-errors
          is not an option that controls warnings")[^\n]*\n?)+'}
test_Werror-1_314:
  build:
    files: compilers/gcc/./gcc.dg/Werror-1.c
    sources: {binary: Werror-1.s, cflags: -Waddress -Wattributes -Werror -fshow-column
        -S}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".*
          attribute directive ignored")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("7:.*
          will always evaluate as \''true\''")[^\n]*\n?)+'}
test_Werror-2_319:
  build:
    files: compilers/gcc/./gcc.dg/Werror-2.c
    sources: {binary: Werror-2.s, cflags: ' -S'}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*(".*
          attribute directive ignored")[^\n]*\n?)+'}
test_Werror-3_320:
  build:
    files: compilers/gcc/./gcc.dg/Werror-3.c
    sources: {binary: Werror-3.s, cflags: -Waddress -Wattributes -S}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*(".*
          will always evaluate as \''true\''")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*(".*
          attribute directive ignored")[^\n]*\n?)+'}
test_Werror-4_321:
  build:
    files: compilers/gcc/./gcc.dg/Werror-4.c
    sources: {binary: Werror-4.s, cflags: -Wattributes -S}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("will
          always evaluate as \''true\''")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("attribute
          directive ignored")[^\n]*\n?)+'}
test_Werror-5_322:
  build:
    files: compilers/gcc/./gcc.dg/Werror-5.c
    sources: {binary: Werror-5.s, cflags: -Waddress -Wattributes -Werror -S}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".*
          will always evaluate as \''true\''")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".*
          attribute directive ignored")[^\n]*\n?)+'}
test_Werror-6_323:
  build:
    files: compilers/gcc/./gcc.dg/Werror-6.c
    sources: {binary: Werror-6.s, cflags: -Wattributes -Werror=address -S}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".*
          will always evaluate as \''true\''")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*(".*
          attribute directive ignored")[^\n]*\n?)+'}
test_Werror-7_324:
  build:
    files: compilers/gcc/./gcc.dg/Werror-7.c
    sources: {binary: Werror-7.s, cflags: -Waddress -Werror -Wno-error=address -Wattributes
        -S}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*(".*
          will always evaluate as \''true\''")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".*
          attribute directive ignored")[^\n]*\n?)+'}
test_Werror-8_325:
  build:
    files: compilers/gcc/./gcc.dg/Werror-8.c
    sources: {binary: Werror-8.s, cflags: -Wattributes -S}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*(".*
          will always evaluate as \''true\''")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*(".*
          attribute directive ignored")[^\n]*\n?)+'}
test_Werror-implicit-function-declaration_326:
  build:
    files: compilers/gcc/./gcc.dg/Werror-implicit-function-declaration.c
    sources: {binary: Werror-implicit-function-declaration.s, cflags: -std=c89 -Werror-implicit-function-declaration
        -S}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("implicit
          declaration of function")[^\n]*\n?)+'}
test_Wfatal-2_327:
  build:
    files: compilers/gcc/./gcc.dg/Wfatal-2.c
    sources: {binary: Wfatal-2.s, cflags: -Woverflow -Wdiv-by-zero -Werror -Wfatal-errors
        -S}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("integer
          overflow in expression")[^\n]*\n?)+'}
test_Wfatal_328:
  build:
    files: compilers/gcc/./gcc.dg/Wfatal.c
    sources: {binary: Wfatal.s, cflags: -Woverflow -Werror=div-by-zero -Wfatal-errors
        -S}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("integer
          overflow in expression")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("division
          by zero")[^\n]*\n?)+'}
test_Wfloat-equal-1_329:
  build:
    files: compilers/gcc/./gcc.dg/Wfloat-equal-1.c
    sources: {binary: Wfloat-equal-1.s, cflags: -Wfloat-equal -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("comparing
          floating point")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("comparing
          floating point")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("comparing
          floating point")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("comparing
          floating point")[^\n]*\n?)+'}
test_Wframe-address-in-Wall_330:
  build:
    files: compilers/gcc/./gcc.dg/Wframe-address-in-Wall.c
    sources: {binary: Wframe-address-in-Wall.s, cflags: -Wall -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("builtin_return_address")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("builtin_frame_address")[^\n]*\n?)+'}
test_Wframe-address_331:
  build:
    files: compilers/gcc/./gcc.dg/Wframe-address.c
    sources: {binary: Wframe-address.s, cflags: -Wframe-address -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("builtin_frame_address")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("builtin_frame_address")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("builtin_frame_address")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("builtin_frame_address")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("builtin_return_address")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("builtin_return_address")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("builtin_return_address")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("builtin_return_address")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("builtin_frame_address")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("builtin_frame_address")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("builtin_frame_address")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("builtin_frame_address")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("builtin_return_address")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("builtin_return_address")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("builtin_return_address")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("builtin_return_address")[^\n]*\n?)+'}
test_Wframe-larger-than_332:
  build:
    files: compilers/gcc/./gcc.dg/Wframe-larger-than.c
    sources: {binary: Wframe-larger-than.s, cflags: -Wframe-larger-than=2048 -S}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("the
          frame size of .* bytes is larger than 2048 bytes")[^\n]*\n?)+'}
test_Wimplicit-fallthrough-1_333:
  build:
    files: compilers/gcc/./gcc.dg/Wimplicit-fallthrough-1.c
    sources: {binary: Wimplicit-fallthrough-1.s, cflags: -Wimplicit-fallthrough -Wdeclaration-after-statement
        -S}
  group: GRPSERIAL
  validate:
    match:
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("mixed
          declarations and code")[^\n]*\n?)+'}
test_Wimplicit-function-declaration-c89-default_334:
  build:
    files: compilers/gcc/./gcc.dg/Wimplicit-function-declaration-c89-default.c
    sources: {binary: Wimplicit-function-declaration-c89-default.s, cflags: -std=c89
        -S}
  group: GRPSERIAL
test_Wimplicit-function-declaration-c89-pedantic_335:
  build:
    files: compilers/gcc/./gcc.dg/Wimplicit-function-declaration-c89-pedantic.c
    sources: {binary: Wimplicit-function-declaration-c89-pedantic.s, cflags: -std=c89
        -pedantic-errors -Wimplicit-function-declaration -S}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("implicit
          declaration of function")[^\n]*\n?)+'}
test_Wimplicit-function-declaration-c89_336:
  build:
    files: compilers/gcc/./gcc.dg/Wimplicit-function-declaration-c89.c
    sources: {binary: Wimplicit-function-declaration-c89.s, cflags: -std=c89 -Wimplicit-function-declaration
        -S}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("implicit
          declaration of function")[^\n]*\n?)+'}
test_Wimplicit-function-declaration-c99-pedantic_337:
  build:
    files: compilers/gcc/./gcc.dg/Wimplicit-function-declaration-c99-pedantic.c
    sources: {binary: Wimplicit-function-declaration-c99-pedantic.s, cflags: -std=c99
        -pedantic-errors -Wall -S}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("implicit
          declaration of function")[^\n]*\n?)+'}
test_Wimplicit-function-declaration-c99_338:
  build:
    files: compilers/gcc/./gcc.dg/Wimplicit-function-declaration-c99.c
    sources: {binary: Wimplicit-function-declaration-c99.s, cflags: -std=c99 -S}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("implicit
          declaration of function")[^\n]*\n?)+'}
test_Wimplicit-int-1_339:
  build:
    files: compilers/gcc/./gcc.dg/Wimplicit-int-1.c
    sources: {binary: Wimplicit-int-1.s, cflags: ' -S'}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("type
          defaults to")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("type
          defaults to")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("return
          type defaults to")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("type
          of .a. defaults to .int.")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("type
          defaults to")[^\n]*\n?)+'}
test_Wimplicit-int-2_340:
  build:
    files: compilers/gcc/./gcc.dg/Wimplicit-int-2.c
    sources: {binary: Wimplicit-int-2.s, cflags: -pedantic-errors -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("type
          defaults to")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("type
          defaults to")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("return
          type defaults to")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("type
          of .a. defaults to .int.")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("type
          defaults to")[^\n]*\n?)+'}
test_Wimplicit-int-3_341:
  build:
    files: compilers/gcc/./gcc.dg/Wimplicit-int-3.c
    sources: {binary: Wimplicit-int-3.s, cflags: -pedantic-errors -Wno-implicit-int
        -S}
  group: GRPSERIAL
test_Wimplicit-int-4_342:
  build:
    files: compilers/gcc/./gcc.dg/Wimplicit-int-4.c
    sources: {binary: Wimplicit-int-4.s, cflags: -Wno-implicit -Wimplicit-int -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("type
          defaults to")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("type
          defaults to")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("return
          type defaults to")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("type
          of .a. defaults to .int.")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("type
          defaults to")[^\n]*\n?)+'}
test_Wincompatible-pointer-types_343:
  build:
    files: compilers/gcc/./gcc.dg/Wincompatible-pointer-types.c
    sources: {binary: Wincompatible-pointer-types.s, cflags: -Wno-incompatible-pointer-types
        -S}
  group: GRPSERIAL
test_Wint-conversion_344:
  build:
    files: compilers/gcc/./gcc.dg/Wint-conversion.c
    sources: {binary: Wint-conversion.s, cflags: -Wno-int-conversion -S}
  group: GRPSERIAL
test_Wjump-misses-init-1_345:
  build:
    files: compilers/gcc/./gcc.dg/Wjump-misses-init-1.c
    sources: {binary: Wjump-misses-init-1.s, cflags: -Wjump-misses-init -Wno-switch-unreachable
        -S}
  group: GRPSERIAL
  validate:
    match:
      L106: {expect: true, expr: '(^|\n)([^\n]+(:106:)[^\n]*[0-9]+: warning:[^\n]*("jump")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+(:118:)[^\n]*[0-9]+: warning:[^\n]*("jump")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("jump")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("jump")[^\n]*\n?)+'}
test_Wjump-misses-init-2_346:
  build:
    files: compilers/gcc/./gcc.dg/Wjump-misses-init-2.c
    sources: {binary: Wjump-misses-init-2.s, cflags: -Wjump-misses-init -std=c99 -S}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("jump")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("jump")[^\n]*\n?)+'}
test_Wlarger-than2_348:
  build:
    files: compilers/gcc/./gcc.dg/Wlarger-than2.c
    sources: {binary: Wlarger-than2.s, cflags: -Wlarger-than=8 -S}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("size
          of.*9 bytes")[^\n]*\n?)+'}
test_Wlarger-than_347:
  build:
    files: compilers/gcc/./gcc.dg/Wlarger-than.c
    sources: {binary: Wlarger-than.s, cflags: -Wlarger-than-32768 -S}
  group: GRPSERIAL
test_Wlogical-op-1_349:
  build:
    files: compilers/gcc/./gcc.dg/Wlogical-op-1.c
    sources: {binary: Wlogical-op-1.s, cflags: -Wlogical-op -S}
  group: GRPSERIAL
  validate:
    match:
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("logical")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("logical")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("logical")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("logical")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("logical")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("logical")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("logical")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("logical")[^\n]*\n?)+'}
test_Wmissing-braces-fixits_350:
  build:
    files: compilers/gcc/./gcc.dg/Wmissing-braces-fixits.c
    sources: {binary: Wmissing-braces-fixits.s, cflags: -Wmissing-braces -fdiagnostics-show-caret
        -S}
  group: GRPSERIAL
  validate:
    match:
      L104: {expect: true, expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("missing
          braces around initializer")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+(:115:)[^\n]*[0-9]+: warning:[^\n]*("missing
          braces around initializer")[^\n]*\n?)+'}
      L126: {expect: true, expr: '(^|\n)([^\n]+(:126:)[^\n]*[0-9]+: warning:[^\n]*("missing
          braces around initializer")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("missing
          braces around initializer")[^\n]*\n?)+'}
      L141: {expect: true, expr: '(^|\n)([^\n]+(:141:)[^\n]*[0-9]+: warning:[^\n]*("missing
          braces around initializer")[^\n]*\n?)+'}
      L152: {expect: true, expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("missing
          braces around initializer")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+(:163:)[^\n]*[0-9]+: warning:[^\n]*("missing
          braces around initializer")[^\n]*\n?)+'}
      L186: {expect: true, expr: '(^|\n)([^\n]+(:186:)[^\n]*[0-9]+: warning:[^\n]*("missing
          braces around initializer")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("missing
          braces around initializer")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("missing
          braces around initializer")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("missing
          braces around initializer")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("missing
          braces around initializer")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("missing
          braces around initializer")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("missing
          braces around initializer")[^\n]*\n?)+'}
test_Wmissing-parameter-type-Wextra_351:
  build:
    files: compilers/gcc/./gcc.dg/Wmissing-parameter-type-Wextra.c
    sources: {binary: Wmissing-parameter-type-Wextra.s, cflags: -Wextra -S}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("type
          of \''bar\'' defaults to \''int\''")[^\n]*\n?)+'}
test_Wmissing-parameter-type-no_352:
  build:
    files: compilers/gcc/./gcc.dg/Wmissing-parameter-type-no.c
    sources: {binary: Wmissing-parameter-type-no.s, cflags: -Wall -Wextra -Wno-missing-parameter-type
        -std=gnu89 -S}
  group: GRPSERIAL
test_Wmissing-parameter-type_353:
  build:
    files: compilers/gcc/./gcc.dg/Wmissing-parameter-type.c
    sources: {binary: Wmissing-parameter-type.s, cflags: -Wmissing-parameter-type
        -S}
  group: GRPSERIAL
  validate:
    match:
      L4: {expect: true, expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("type
          of \''bar\'' defaults to \''int\''")[^\n]*\n?)+'}
test_Wnested-externs-1_354:
  build:
    files: compilers/gcc/./gcc.dg/Wnested-externs-1.c
    sources: {binary: Wnested-externs-1.s, cflags: -Wnested-externs -S}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("nested
          extern declaration of \''a\''")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("nested
          extern declaration of \''b\''")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("nested
          extern declaration of \''c\''")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("nested
          extern declaration of \''d\''")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("nested
          extern declaration of \''f0\''")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("nested
          extern declaration of \''f1\''")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("nested
          extern declaration of \''f2\''")[^\n]*\n?)+'}
test_Wnested-externs-2_355:
  build:
    files: compilers/gcc/./gcc.dg/Wnested-externs-2.c
    sources: {binary: Wnested-externs-2.s, cflags: -Wnested-externs -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("20:nested
          extern declaration of \''s\''")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("14:nested
          extern declaration of \''i\''")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("16:nested
          extern declaration of \''foo\''")[^\n]*\n?)+'}
test_Wno-all_356:
  build:
    files: compilers/gcc/./gcc.dg/Wno-all.c
    sources: {binary: Wno-all.s, cflags: -Wall -Wno-all -S}
  group: GRPSERIAL
test_Wno-c++-compat_357:
  build:
    files: compilers/gcc/./gcc.dg/Wno-c++-compat.c
    sources: {binary: Wno-c++-compat.s, cflags: -Wno-c++-compat -S}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("initialized
          and declared")[^\n]*\n?)+'}
test_Wno-frame-address_358:
  build:
    files: compilers/gcc/./gcc.dg/Wno-frame-address.c
    sources: {binary: Wno-frame-address.s, cflags: -Werror -S}
  group: GRPSERIAL
test_Wno-pointer-sign_359:
  build:
    files: compilers/gcc/./gcc.dg/Wno-pointer-sign.c
    sources: {binary: Wno-pointer-sign.s, cflags: -Wno-pointer-sign -S}
  group: GRPSERIAL
test_Wobjsize-1_360:
  build:
    files: compilers/gcc/./gcc.dg/Wobjsize-1.c
    sources: {binary: Wobjsize-1.s, cflags: -O2 -Wall -S}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("writing")[^\n]*\n?)+'}
test_Wold-style-definition-1_361:
  build:
    files: compilers/gcc/./gcc.dg/Wold-style-definition-1.c
    sources: {binary: Wold-style-definition-1.s, cflags: -Wold-style-definition -std=gnu89
        -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("old-style
          function definition")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("old-style
          function definition")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("old-style
          function definition")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("old-style
          function definition")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("old-style
          function definition")[^\n]*\n?)+'}
test_Wold-style-definition-2_362:
  build:
    files: compilers/gcc/./gcc.dg/Wold-style-definition-2.c
    sources: {binary: Wold-style-definition-2.s, cflags: -Wold-style-definition -S}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C requires a named argument")[^\n]*\n?)+'}
test_Woverflow-1_363:
  build:
    files: compilers/gcc/./gcc.dg/Woverflow-1.c
    sources: {binary: Woverflow-1.s, cflags: -O2 -S}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("integer
          overflow")[^\n]*\n?)+'}
test_Woverflow-2_364:
  build:
    files: compilers/gcc/./gcc.dg/Woverflow-2.c
    sources: {binary: Woverflow-2.s, cflags: -O2 -Woverflow -S}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("integer
          overflow")[^\n]*\n?)+'}
test_Woverflow-3_365:
  build:
    files: compilers/gcc/./gcc.dg/Woverflow-3.c
    sources: {binary: Woverflow-3.s, cflags: -O2 -Wno-overflow -S}
  group: GRPSERIAL
test_Woverlength-strings-pedantic-c89-asm_366:
  build:
    files: compilers/gcc/./gcc.dg/Woverlength-strings-pedantic-c89-asm.c
    sources: {binary: Woverlength-strings-pedantic-c89-asm.s, cflags: -std=c89 -pedantic
        -S}
  group: GRPSERIAL
test_Woverlength-strings-pedantic-c89-ext_367:
  build:
    files: compilers/gcc/./gcc.dg/Woverlength-strings-pedantic-c89-ext.c
    sources: {binary: Woverlength-strings-pedantic-c89-ext.s, cflags: -std=c89 -pedantic
        -S}
  group: GRPSERIAL
test_Woverlength-strings-pedantic-c89-no_368:
  build:
    files: compilers/gcc/./gcc.dg/Woverlength-strings-pedantic-c89-no.c
    sources: {binary: Woverlength-strings-pedantic-c89-no.s, cflags: -std=c89 -pedantic
        -Wno-overlength-strings -S}
  group: GRPSERIAL
test_Woverlength-strings-pedantic-c89_369:
  build:
    files: compilers/gcc/./gcc.dg/Woverlength-strings-pedantic-c89.c
    sources: {binary: Woverlength-strings-pedantic-c89.s, cflags: -std=c89 -pedantic
        -S}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("greater
          than")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("greater
          than")[^\n]*\n?)+'}
test_Woverlength-strings-pedantic-c90-asm_370:
  build:
    files: compilers/gcc/./gcc.dg/Woverlength-strings-pedantic-c90-asm.c
    sources: {binary: Woverlength-strings-pedantic-c90-asm.s, cflags: -std=c90 -pedantic
        -S}
  group: GRPSERIAL
test_Woverlength-strings-pedantic-c90-ext_371:
  build:
    files: compilers/gcc/./gcc.dg/Woverlength-strings-pedantic-c90-ext.c
    sources: {binary: Woverlength-strings-pedantic-c90-ext.s, cflags: -std=c90 -pedantic
        -S}
  group: GRPSERIAL
test_Woverlength-strings-pedantic-c90_372:
  build:
    files: compilers/gcc/./gcc.dg/Woverlength-strings-pedantic-c90.c
    sources: {binary: Woverlength-strings-pedantic-c90.s, cflags: -std=c90 -pedantic
        -S}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("greater
          than")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("greater
          than")[^\n]*\n?)+'}
test_Woverlength-strings-pedantic-c99-asm_373:
  build:
    files: compilers/gcc/./gcc.dg/Woverlength-strings-pedantic-c99-asm.c
    sources: {binary: Woverlength-strings-pedantic-c99-asm.s, cflags: -std=c99 -pedantic
        -S}
  group: GRPSERIAL
test_Woverlength-strings-pedantic-c99-ext_374:
  build:
    files: compilers/gcc/./gcc.dg/Woverlength-strings-pedantic-c99-ext.c
    sources: {binary: Woverlength-strings-pedantic-c99-ext.s, cflags: -std=c99 -pedantic
        -S}
  group: GRPSERIAL
test_Woverlength-strings-pedantic-c99-no_375:
  build:
    files: compilers/gcc/./gcc.dg/Woverlength-strings-pedantic-c99-no.c
    sources: {binary: Woverlength-strings-pedantic-c99-no.s, cflags: -std=c99 -pedantic
        -Wno-overlength-strings -S}
  group: GRPSERIAL
test_Woverlength-strings-pedantic-c99_376:
  build:
    files: compilers/gcc/./gcc.dg/Woverlength-strings-pedantic-c99.c
    sources: {binary: Woverlength-strings-pedantic-c99.s, cflags: -std=c99 -pedantic
        -S}
  group: GRPSERIAL
  validate:
    match:
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("greater
          than")[^\n]*\n?)+'}
test_Woverlength-strings_377:
  build:
    files: compilers/gcc/./gcc.dg/Woverlength-strings.c
    sources: {binary: Woverlength-strings.s, cflags: ' -S'}
  group: GRPSERIAL
test_Woverride-init-1_378:
  build:
    files: compilers/gcc/./gcc.dg/Woverride-init-1.c
    sources: {binary: Woverride-init-1.s, cflags: -Woverride-init -S}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("initialized
          field overwritten")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("initialized
          field overwritten")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("initialized
          field overwritten")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("initialized
          field overwritten")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("initialized
          field overwritten")[^\n]*\n?)+'}
test_Woverride-init-2_379:
  build:
    files: compilers/gcc/./gcc.dg/Woverride-init-2.c
    sources: {binary: Woverride-init-2.s, cflags: -Wextra -S}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("initialized
          field overwritten")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("initialized
          field overwritten")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("initialized
          field overwritten")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("initialized
          field overwritten")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("initialized
          field overwritten")[^\n]*\n?)+'}
test_Woverride-init-3_380:
  build:
    files: compilers/gcc/./gcc.dg/Woverride-init-3.c
    sources: {binary: Woverride-init-3.s, cflags: -Wextra -Wno-override-init -S}
  group: GRPSERIAL
test_Woverride-init-side-effects-1_381:
  build:
    files: compilers/gcc/./gcc.dg/Woverride-init-side-effects-1.c
    sources: {binary: Woverride-init-side-effects-1.s, cflags: ' -S'}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("initialized
          field with side-effects overwritten")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("initialized
          field with side-effects overwritten")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("initialized
          field with side-effects overwritten")[^\n]*\n?)+'}
test_Woverride-init-side-effects-2_382:
  build:
    files: compilers/gcc/./gcc.dg/Woverride-init-side-effects-2.c
    sources: {binary: Woverride-init-side-effects-2.s, cflags: -Wno-override-init-side-effects
        -S}
  group: GRPSERIAL
test_Wpadded_383:
  build:
    files: compilers/gcc/./gcc.dg/Wpadded.c
    sources: {binary: Wpadded.s, cflags: -Wpadded -fpack-struct=8 -S}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("padding
          struct to align")[^\n]*\n?)+'}
test_Wparentheses-10_385:
  build:
    files: compilers/gcc/./gcc.dg/Wparentheses-10.c
    sources: {binary: Wparentheses-10.s, cflags: -Wparentheses -std=gnu99 -S}
  group: GRPSERIAL
test_Wparentheses-11_386:
  build:
    files: compilers/gcc/./gcc.dg/Wparentheses-11.c
    sources: {binary: Wparentheses-11.s, cflags: -Wparentheses -S}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L161: {expect: true, expr: '(^|\n)([^\n]+(:161:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L162: {expect: true, expr: '(^|\n)([^\n]+(:162:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L163: {expect: true, expr: '(^|\n)([^\n]+(:163:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L164: {expect: true, expr: '(^|\n)([^\n]+(:164:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L166: {expect: true, expr: '(^|\n)([^\n]+(:166:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L167: {expect: true, expr: '(^|\n)([^\n]+(:167:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L168: {expect: true, expr: '(^|\n)([^\n]+(:168:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L169: {expect: true, expr: '(^|\n)([^\n]+(:169:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L170: {expect: true, expr: '(^|\n)([^\n]+(:170:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L171: {expect: true, expr: '(^|\n)([^\n]+(:171:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L172: {expect: true, expr: '(^|\n)([^\n]+(:172:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L174: {expect: true, expr: '(^|\n)([^\n]+(:174:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L175: {expect: true, expr: '(^|\n)([^\n]+(:175:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L176: {expect: true, expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L177: {expect: true, expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L179: {expect: true, expr: '(^|\n)([^\n]+(:179:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L180: {expect: true, expr: '(^|\n)([^\n]+(:180:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L181: {expect: true, expr: '(^|\n)([^\n]+(:181:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+(:182:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L183: {expect: true, expr: '(^|\n)([^\n]+(:183:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+(:184:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L185: {expect: true, expr: '(^|\n)([^\n]+(:185:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L186: {expect: true, expr: '(^|\n)([^\n]+(:186:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L188: {expect: true, expr: '(^|\n)([^\n]+(:188:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L189: {expect: true, expr: '(^|\n)([^\n]+(:189:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L190: {expect: true, expr: '(^|\n)([^\n]+(:190:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L191: {expect: true, expr: '(^|\n)([^\n]+(:191:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L192: {expect: true, expr: '(^|\n)([^\n]+(:192:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+(:193:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L194: {expect: true, expr: '(^|\n)([^\n]+(:194:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L195: {expect: true, expr: '(^|\n)([^\n]+(:195:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L196: {expect: true, expr: '(^|\n)([^\n]+(:196:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L197: {expect: true, expr: '(^|\n)([^\n]+(:197:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+(:198:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L199: {expect: true, expr: '(^|\n)([^\n]+(:199:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+(:200:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L201: {expect: true, expr: '(^|\n)([^\n]+(:201:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L202: {expect: true, expr: '(^|\n)([^\n]+(:202:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L203: {expect: true, expr: '(^|\n)([^\n]+(:203:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+(:204:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L205: {expect: true, expr: '(^|\n)([^\n]+(:205:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L206: {expect: true, expr: '(^|\n)([^\n]+(:206:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L207: {expect: true, expr: '(^|\n)([^\n]+(:207:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L208: {expect: true, expr: '(^|\n)([^\n]+(:208:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L209: {expect: true, expr: '(^|\n)([^\n]+(:209:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
test_Wparentheses-12_387:
  build:
    files: compilers/gcc/./gcc.dg/Wparentheses-12.c
    sources: {binary: Wparentheses-12.s, cflags: -Wparentheses -S}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-13_388:
  build:
    files: compilers/gcc/./gcc.dg/Wparentheses-13.c
    sources: {binary: Wparentheses-13.s, cflags: -Wparentheses -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wparentheses-14_389:
  build:
    files: compilers/gcc/./gcc.dg/Wparentheses-14.c
    sources: {binary: Wparentheses-14.s, cflags: -Wparentheses -S}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("7:suggest
          parentheses")[^\n]*\n?)+'}
test_Wparentheses-1_384:
  build:
    files: compilers/gcc/./gcc.dg/Wparentheses-1.c
    sources: {binary: Wparentheses-1.s, cflags: -Wparentheses -S}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("suggest
          parentheses")[^\n]*\n?)+'}
test_Wparentheses-2_390:
  build:
    files: compilers/gcc/./gcc.dg/Wparentheses-2.c
    sources: {binary: Wparentheses-2.s, cflags: -Wparentheses -S}
  group: GRPSERIAL
  validate:
    match:
      L100: {expect: true, expr: '(^|\n)([^\n]+(:100:)[^\n]*[0-9]+: warning:[^\n]*("suggest
          parentheses around comparison")[^\n]*\n?)+'}
      L103: {expect: true, expr: '(^|\n)([^\n]+(:103:)[^\n]*[0-9]+: warning:[^\n]*("suggest
          parentheses around comparison")[^\n]*\n?)+'}
      L106: {expect: true, expr: '(^|\n)([^\n]+(:106:)[^\n]*[0-9]+: warning:[^\n]*("suggest
          parentheses around comparison")[^\n]*\n?)+'}
      L109: {expect: true, expr: '(^|\n)([^\n]+(:109:)[^\n]*[0-9]+: warning:[^\n]*("suggest
          parentheses around comparison")[^\n]*\n?)+'}
      L112: {expect: true, expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("suggest
          parentheses around comparison")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+(:115:)[^\n]*[0-9]+: warning:[^\n]*("suggest
          parentheses around comparison")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+(:118:)[^\n]*[0-9]+: warning:[^\n]*("suggest
          parentheses around comparison")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("mathematical
          meaning")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("mathematical
          meaning")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("mathematical
          meaning")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("mathematical
          meaning")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("mathematical
          meaning")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("mathematical
          meaning")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("mathematical
          meaning")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("mathematical
          meaning")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("mathematical
          meaning")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("mathematical
          meaning")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("mathematical
          meaning")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("mathematical
          meaning")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("suggest
          parentheses around comparison")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("suggest
          parentheses around comparison")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("suggest
          parentheses around comparison")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("suggest
          parentheses around comparison")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("suggest
          parentheses around comparison")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("suggest
          parentheses around comparison")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("suggest
          parentheses around comparison")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+(:70:)[^\n]*[0-9]+: warning:[^\n]*("suggest
          parentheses around comparison")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+(:73:)[^\n]*[0-9]+: warning:[^\n]*("suggest
          parentheses around comparison")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("suggest
          parentheses around comparison")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("suggest
          parentheses around comparison")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("suggest
          parentheses around comparison")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("suggest
          parentheses around comparison")[^\n]*\n?)+'}
      L88: {expect: true, expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("suggest
          parentheses around comparison")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("suggest
          parentheses around comparison")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("suggest
          parentheses around comparison")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("suggest
          parentheses around comparison")[^\n]*\n?)+'}
test_Wparentheses-3_391:
  build:
    files: compilers/gcc/./gcc.dg/Wparentheses-3.c
    sources: {binary: Wparentheses-3.s, cflags: -Wparentheses -std=gnu99 -S}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("assignment")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("assignment")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("assignment")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("assignment")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("assignment")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("assignment")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("assignment")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("assignment")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("assignment")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("assignment")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("assignment")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("assignment")[^\n]*\n?)+'}
test_Wparentheses-4_392:
  build:
    files: compilers/gcc/./gcc.dg/Wparentheses-4.c
    sources: {binary: Wparentheses-4.s, cflags: -Wparentheses -S}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+(:70:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+(:73:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
test_Wparentheses-5_393:
  build:
    files: compilers/gcc/./gcc.dg/Wparentheses-5.c
    sources: {binary: Wparentheses-5.s, cflags: -Wparentheses -S}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
test_Wparentheses-6_394:
  build:
    files: compilers/gcc/./gcc.dg/Wparentheses-6.c
    sources: {binary: Wparentheses-6.s, cflags: -Wparentheses -S}
  group: GRPSERIAL
  validate:
    match:
      L100: {expect: true, expr: '(^|\n)([^\n]+(:100:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L103: {expect: true, expr: '(^|\n)([^\n]+(:103:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L106: {expect: true, expr: '(^|\n)([^\n]+(:106:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L109: {expect: true, expr: '(^|\n)([^\n]+(:109:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L112: {expect: true, expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+(:115:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+(:118:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+(:70:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+(:73:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L88: {expect: true, expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
test_Wparentheses-7_395:
  build:
    files: compilers/gcc/./gcc.dg/Wparentheses-7.c
    sources: {binary: Wparentheses-7.s, cflags: -Wparentheses -S}
  group: GRPSERIAL
  validate:
    match:
      L100: {expect: true, expr: '(^|\n)([^\n]+(:100:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L103: {expect: true, expr: '(^|\n)([^\n]+(:103:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L106: {expect: true, expr: '(^|\n)([^\n]+(:106:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L109: {expect: true, expr: '(^|\n)([^\n]+(:109:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L112: {expect: true, expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+(:115:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+(:118:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+(:70:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+(:73:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L88: {expect: true, expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
test_Wparentheses-8_396:
  build:
    files: compilers/gcc/./gcc.dg/Wparentheses-8.c
    sources: {binary: Wparentheses-8.s, cflags: -Wparentheses -S}
  group: GRPSERIAL
  validate:
    match:
      L100: {expect: true, expr: '(^|\n)([^\n]+(:100:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+(:70:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+(:73:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L88: {expect: true, expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("parentheses")[^\n]*\n?)+'}
test_Wparentheses-9_397:
  build:
    files: compilers/gcc/./gcc.dg/Wparentheses-9.c
    sources: {binary: Wparentheses-9.s, cflags: -Wparentheses -S}
  group: GRPSERIAL
  validate:
    match:
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("ambiguous")[^\n]*\n?)+'}
test_Wpointer-arith_398:
  build:
    files: compilers/gcc/./gcc.dg/Wpointer-arith.c
    sources: {binary: Wpointer-arith.s, cflags: -Werror=pointer-arith -S}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          type argument to increment")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pointer
          of type")[^\n]*\n?)+'}
test_Wpointer-sign-Wall-no_399:
  build:
    files: compilers/gcc/./gcc.dg/Wpointer-sign-Wall-no.c
    sources: {binary: Wpointer-sign-Wall-no.s, cflags: -Wno-pointer-sign -Wall -S}
  group: GRPSERIAL
test_Wpointer-sign-Wall_400:
  build:
    files: compilers/gcc/./gcc.dg/Wpointer-sign-Wall.c
    sources: {binary: Wpointer-sign-Wall.s, cflags: -Wall -S}
  group: GRPSERIAL
  validate:
    match:
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("differ
          in signedness")[^\n]*\n?)+'}
test_Wpointer-sign-pedantic-no_401:
  build:
    files: compilers/gcc/./gcc.dg/Wpointer-sign-pedantic-no.c
    sources: {binary: Wpointer-sign-pedantic-no.s, cflags: -Wno-pointer-sign -pedantic
        -S}
  group: GRPSERIAL
test_Wpointer-sign-pedantic_402:
  build:
    files: compilers/gcc/./gcc.dg/Wpointer-sign-pedantic.c
    sources: {binary: Wpointer-sign-pedantic.s, cflags: -pedantic -S}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("differ
          in signedness")[^\n]*\n?)+'}
test_Wpointer-sign_403:
  build:
    files: compilers/gcc/./gcc.dg/Wpointer-sign.c
    sources: {binary: Wpointer-sign.s, cflags: ' -S'}
  group: GRPSERIAL
test_Wpointer-to-int-cast-1_404:
  build:
    files: compilers/gcc/./gcc.dg/Wpointer-to-int-cast-1.c
    sources: {binary: Wpointer-to-int-cast-1.s, cflags: ' -S'}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from pointer to integer of different size")[^\n]*\n?)+'}
test_Wpointer-to-int-cast-2_405:
  build:
    files: compilers/gcc/./gcc.dg/Wpointer-to-int-cast-2.c
    sources: {binary: Wpointer-to-int-cast-2.s, cflags: -Wpointer-to-int-cast -S}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("cast
          from pointer to integer of different size")[^\n]*\n?)+'}
test_Wpointer-to-int-cast-3_406:
  build:
    files: compilers/gcc/./gcc.dg/Wpointer-to-int-cast-3.c
    sources: {binary: Wpointer-to-int-cast-3.s, cflags: -Wno-pointer-to-int-cast -S}
  group: GRPSERIAL
  validate:
    match:
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("cast
          to pointer from integer of different size")[^\n]*\n?)+'}
test_Wpragmas-1_407:
  build:
    files: compilers/gcc/./gcc.dg/Wpragmas-1.c
    sources: {binary: Wpragmas-1.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
  validate:
    match:
      L4: {expect: true, expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("bad
          option")[^\n]*\n?)+'}
test_Wredundant-decls-1_408:
  build:
    files: compilers/gcc/./gcc.dg/Wredundant-decls-1.c
    sources: {binary: Wredundant-decls-1.s, cflags: -Wredundant-decls -S}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("redundant")[^\n]*\n?)+'}
test_Wredundant-decls-2_409:
  build:
    files: compilers/gcc/./gcc.dg/Wredundant-decls-2.c
    sources: {binary: Wredundant-decls-2.s, cflags: -Wredundant-decls -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("12:redundant")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("12:redundant")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("12:redundant")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("5:redundant")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("5:redundant")[^\n]*\n?)+'}
test_Wreturn-local-addr_410:
  build:
    files: compilers/gcc/./gcc.dg/Wreturn-local-addr.c
    sources: {binary: Wreturn-local-addr.o, cflags: -Werror=return-local-addr -c}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("address
          of local variable")[^\n]*\n?)+'}
test_Wreturn-type2_412:
  build:
    files: compilers/gcc/./gcc.dg/Wreturn-type2.c
    sources: {binary: Wreturn-type2.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
test_Wreturn-type_411:
  build:
    files: compilers/gcc/./gcc.dg/Wreturn-type.c
    sources: {binary: Wreturn-type.s, cflags: -Wreturn-type -S}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("return")[^\n]*\n?)+'}
test_Wsequence-point-pr18050_413:
  build:
    files: compilers/gcc/./gcc.dg/Wsequence-point-pr18050.c
    sources: {binary: Wsequence-point-pr18050.s, cflags: -Wsequence-point -S}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("operation
          on \''y\'' may be undefined")[^\n]*\n?)+'}
test_Wshadow-1_414:
  build:
    files: compilers/gcc/./gcc.dg/Wshadow-1.c
    sources: {binary: Wshadow-1.s, cflags: -Wshadow -pedantic-errors -S}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redeclared
          as different")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("shadows
          a parameter")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("shadows
          a previous local")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("shadows
          a global decl")[^\n]*\n?)+'}
test_Wshadow-2_415:
  build:
    files: compilers/gcc/./gcc.dg/Wshadow-2.c
    sources: {binary: Wshadow-2.s, cflags: -Wshadow -S}
  group: GRPSERIAL
test_Wshadow-3_416:
  build:
    files: compilers/gcc/./gcc.dg/Wshadow-3.c
    sources: {binary: Wshadow-3.s, cflags: -std=gnu89 -Wshadow -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("declaration
          of \''v\'' shadows a global declaration")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("declaration
          of \''v\'' shadows a global declaration")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("declaration
          of \''v\'' shadows a global declaration")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("declaration
          of \''v\'' shadows a global declaration")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("declaration
          of \''v\'' shadows a global declaration")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("declaration
          of \''v\'' shadows a global declaration")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("declaration
          of \''v\'' shadows a global declaration")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("declaration
          of \''a\'' shadows a parameter")[^\n]*\n?)+'}
test_Wshadow-4_417:
  build:
    files: compilers/gcc/./gcc.dg/Wshadow-4.c
    sources: {binary: Wshadow-4.s, cflags: -Wshadow -Wsystem-headers -S}
  group: GRPSERIAL
  validate:
    match:
      L28: {expect: true, expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("shadows")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("shadows")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("shadows")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("shadows")[^\n]*\n?)+'}
test_Wshadow-compatible-local-1_418:
  build:
    files: compilers/gcc/./gcc.dg/Wshadow-compatible-local-1.c
    sources: {binary: Wshadow-compatible-local-1.s, cflags: -Wshadow=compatible-local
        -S}
  group: GRPSERIAL
  validate:
    match:
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("shadows
          a previous local")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("shadows
          a previous local")[^\n]*\n?)+'}
test_Wshadow-local-1_419:
  build:
    files: compilers/gcc/./gcc.dg/Wshadow-local-1.c
    sources: {binary: Wshadow-local-1.s, cflags: -Wshadow=local -S}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("shadows
          a parameter")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("shadows
          a previous local")[^\n]*\n?)+'}
test_Wshadow-local-2_420:
  build:
    files: compilers/gcc/./gcc.dg/Wshadow-local-2.c
    sources: {binary: Wshadow-local-2.s, cflags: -Wshadow=local -S}
  group: GRPSERIAL
  validate:
    match:
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("shadows
          a previous local")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("shadows
          a previous local")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("shadows
          a previous local")[^\n]*\n?)+'}
test_Wshadow-local-3_421:
  build:
    files: compilers/gcc/./gcc.dg/Wshadow-local-3.c
    sources: {binary: Wshadow-local-3.s, cflags: -Wno-shadow -S}
  group: GRPSERIAL
test_Wsign-conversion_422:
  build:
    files: compilers/gcc/./gcc.dg/Wsign-conversion.c
    sources: {binary: Wsign-conversion.s, cflags: -std=c99 -fsigned-char -Wsign-conversion
        -S}
  group: GRPSERIAL
  validate:
    match:
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L69: {expect: true, expr: '(^|\n)([^\n]+(:69:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+(:70:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+(:83:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L88: {expect: true, expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("conversion")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("negative
          integer implicitly converted to unsigned type")[^\n]*\n?)+'}
test_Wsizeof-pointer-memaccess1_423:
  build:
    files: compilers/gcc/./gcc.dg/Wsizeof-pointer-memaccess1.c
    sources: {binary: Wsizeof-pointer-memaccess1.s, cflags: -Wall -Wno-sizeof-array-argument
        -S}
  group: GRPSERIAL
  validate:
    match:
      L176: {expect: true, expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'}
      L177: {expect: true, expr: '(^|\n)([^\n]+(:177:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the destination; did you mean to dereference it")[^\n]*\n?)+'}
      L178: {expect: true, expr: '(^|\n)([^\n]+(:178:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the destination; did you mean to dereference it")[^\n]*\n?)+'}
      L179: {expect: true, expr: '(^|\n)([^\n]+(:179:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the destination; did you mean to dereference it")[^\n]*\n?)+'}
      L180: {expect: true, expr: '(^|\n)([^\n]+(:180:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the destination; did you mean to dereference it")[^\n]*\n?)+'}
      L181: {expect: true, expr: '(^|\n)([^\n]+(:181:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+(:182:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'}
      L183: {expect: true, expr: '(^|\n)([^\n]+(:183:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+(:184:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'}
      L186: {expect: true, expr: '(^|\n)([^\n]+(:186:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the destination; did you mean to dereference it")[^\n]*\n?)+'}
      L188: {expect: true, expr: '(^|\n)([^\n]+(:188:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the destination; did you mean to dereference it")[^\n]*\n?)+'}
      L189: {expect: true, expr: '(^|\n)([^\n]+(:189:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the destination; did you mean to dereference it")[^\n]*\n?)+'}
      L190: {expect: true, expr: '(^|\n)([^\n]+(:190:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the destination; did you mean to dereference it")[^\n]*\n?)+'}
      L191: {expect: true, expr: '(^|\n)([^\n]+(:191:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'}
      L192: {expect: true, expr: '(^|\n)([^\n]+(:192:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'}
      L193: {expect: true, expr: '(^|\n)([^\n]+(:193:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'}
      L194: {expect: true, expr: '(^|\n)([^\n]+(:194:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'}
      L196: {expect: true, expr: '(^|\n)([^\n]+(:196:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'}
      L197: {expect: true, expr: '(^|\n)([^\n]+(:197:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the source; did you mean to dereference it")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+(:198:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the source; did you mean to dereference it")[^\n]*\n?)+'}
      L199: {expect: true, expr: '(^|\n)([^\n]+(:199:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the source; did you mean to dereference it")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+(:200:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the source; did you mean to dereference it")[^\n]*\n?)+'}
      L201: {expect: true, expr: '(^|\n)([^\n]+(:201:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'}
      L202: {expect: true, expr: '(^|\n)([^\n]+(:202:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'}
      L203: {expect: true, expr: '(^|\n)([^\n]+(:203:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'}
      L204: {expect: true, expr: '(^|\n)([^\n]+(:204:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'}
      L206: {expect: true, expr: '(^|\n)([^\n]+(:206:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the first source; did you mean to remove the addressof")[^\n]*\n?)+'}
      L207: {expect: true, expr: '(^|\n)([^\n]+(:207:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the first source; did you mean to dereference
          it")[^\n]*\n?)+'}
      L208: {expect: true, expr: '(^|\n)([^\n]+(:208:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the first source; did you mean to dereference
          it")[^\n]*\n?)+'}
      L209: {expect: true, expr: '(^|\n)([^\n]+(:209:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the first source; did you mean to dereference
          it")[^\n]*\n?)+'}
      L210: {expect: true, expr: '(^|\n)([^\n]+(:210:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the first source; did you mean to dereference
          it")[^\n]*\n?)+'}
      L211: {expect: true, expr: '(^|\n)([^\n]+(:211:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same pointer type \\[^\\n\\r\\]* as the first source; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'}
      L212: {expect: true, expr: '(^|\n)([^\n]+(:212:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same pointer type \\[^\\n\\r\\]* as the first source; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'}
      L213: {expect: true, expr: '(^|\n)([^\n]+(:213:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same pointer type \\[^\\n\\r\\]* as the first source; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'}
      L215: {expect: true, expr: '(^|\n)([^\n]+(:215:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the second source; did you mean to remove the
          addressof")[^\n]*\n?)+'}
      L216: {expect: true, expr: '(^|\n)([^\n]+(:216:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the second source; did you mean to dereference
          it")[^\n]*\n?)+'}
      L217: {expect: true, expr: '(^|\n)([^\n]+(:217:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the second source; did you mean to dereference
          it")[^\n]*\n?)+'}
      L218: {expect: true, expr: '(^|\n)([^\n]+(:218:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the second source; did you mean to dereference
          it")[^\n]*\n?)+'}
      L219: {expect: true, expr: '(^|\n)([^\n]+(:219:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the second source; did you mean to dereference
          it")[^\n]*\n?)+'}
      L220: {expect: true, expr: '(^|\n)([^\n]+(:220:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same pointer type \\[^\\n\\r\\]* as the second source; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'}
      L221: {expect: true, expr: '(^|\n)([^\n]+(:221:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same pointer type \\[^\\n\\r\\]* as the second source; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'}
      L222: {expect: true, expr: '(^|\n)([^\n]+(:222:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same pointer type \\[^\\n\\r\\]* as the second source; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the destination; did you mean to dereference it")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the destination; did you mean to dereference it")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the destination; did you mean to dereference it")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the destination; did you mean to dereference it")[^\n]*\n?)+'}
      L328: {expect: true, expr: '(^|\n)([^\n]+(:328:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the destination; did you mean to provide an explicit
          length")[^\n]*\n?)+'}
      L329: {expect: true, expr: '(^|\n)([^\n]+(:329:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the destination; did you mean to provide an explicit
          length")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'}
      L330: {expect: true, expr: '(^|\n)([^\n]+(:330:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the destination; did you mean to provide an explicit
          length")[^\n]*\n?)+'}
      L331: {expect: true, expr: '(^|\n)([^\n]+(:331:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'}
      L332: {expect: true, expr: '(^|\n)([^\n]+(:332:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the destination; did you mean to dereference it")[^\n]*\n?)+'}
      L334: {expect: true, expr: '(^|\n)([^\n]+(:334:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the destination; did you mean to provide an explicit
          length")[^\n]*\n?)+'}
      L335: {expect: true, expr: '(^|\n)([^\n]+(:335:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the destination; did you mean to provide an explicit
          length")[^\n]*\n?)+'}
      L336: {expect: true, expr: '(^|\n)([^\n]+(:336:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the destination; did you mean to provide an explicit
          length")[^\n]*\n?)+'}
      L337: {expect: true, expr: '(^|\n)([^\n]+(:337:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'}
      L338: {expect: true, expr: '(^|\n)([^\n]+(:338:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the destination; did you mean to dereference it")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'}
      L340: {expect: true, expr: '(^|\n)([^\n]+(:340:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the source; did you mean to provide an explicit
          length")[^\n]*\n?)+'}
      L341: {expect: true, expr: '(^|\n)([^\n]+(:341:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the source; did you mean to provide an explicit
          length")[^\n]*\n?)+'}
      L342: {expect: true, expr: '(^|\n)([^\n]+(:342:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the source; did you mean to provide an explicit
          length")[^\n]*\n?)+'}
      L343: {expect: true, expr: '(^|\n)([^\n]+(:343:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'}
      L344: {expect: true, expr: '(^|\n)([^\n]+(:344:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the source; did you mean to dereference it")[^\n]*\n?)+'}
      L346: {expect: true, expr: '(^|\n)([^\n]+(:346:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the first source; did you mean to provide an explicit
          length")[^\n]*\n?)+'}
      L347: {expect: true, expr: '(^|\n)([^\n]+(:347:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the first source; did you mean to provide an explicit
          length")[^\n]*\n?)+'}
      L348: {expect: true, expr: '(^|\n)([^\n]+(:348:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the first source; did you mean to provide an explicit
          length")[^\n]*\n?)+'}
      L349: {expect: true, expr: '(^|\n)([^\n]+(:349:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the first source; did you mean to remove the addressof")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'}
      L350: {expect: true, expr: '(^|\n)([^\n]+(:350:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the first source; did you mean to dereference
          it")[^\n]*\n?)+'}
      L352: {expect: true, expr: '(^|\n)([^\n]+(:352:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the second source; did you mean to provide an
          explicit length")[^\n]*\n?)+'}
      L353: {expect: true, expr: '(^|\n)([^\n]+(:353:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the second source; did you mean to provide an
          explicit length")[^\n]*\n?)+'}
      L354: {expect: true, expr: '(^|\n)([^\n]+(:354:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the second source; did you mean to provide an
          explicit length")[^\n]*\n?)+'}
      L355: {expect: true, expr: '(^|\n)([^\n]+(:355:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the second source; did you mean to remove the
          addressof")[^\n]*\n?)+'}
      L356: {expect: true, expr: '(^|\n)([^\n]+(:356:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the second source; did you mean to dereference
          it")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the destination; did you mean to remove the addressof")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the destination; did you mean to dereference it")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the destination; did you mean to dereference it")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the destination; did you mean to dereference it")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the destination; did you mean to dereference it")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same pointer type \\[^\\n\\r\\]* as the destination; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the source; did you mean to remove the addressof")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the source; did you mean to dereference it")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the source; did you mean to dereference it")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the source; did you mean to dereference it")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the source; did you mean to dereference it")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same pointer type \\[^\\n\\r\\]* as the source; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the first source; did you mean to remove the addressof")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the first source; did you mean to dereference
          it")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the first source; did you mean to dereference
          it")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the first source; did you mean to dereference
          it")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the first source; did you mean to dereference
          it")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same pointer type \\[^\\n\\r\\]* as the first source; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same pointer type \\[^\\n\\r\\]* as the first source; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same pointer type \\[^\\n\\r\\]* as the first source; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the second source; did you mean to remove the
          addressof")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the second source; did you mean to dereference
          it")[^\n]*\n?)+'}
      L69: {expect: true, expr: '(^|\n)([^\n]+(:69:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the second source; did you mean to dereference
          it")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+(:70:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the second source; did you mean to dereference
          it")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same expression as the second source; did you mean to dereference
          it")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same pointer type \\[^\\n\\r\\]* as the second source; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+(:73:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same pointer type \\[^\\n\\r\\]* as the second source; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+(:74:)[^\n]*[0-9]+: warning:[^\n]*("call
          is the same pointer type \\[^\\n\\r\\]* as the second source; expected \\[^\\n\\r\\]*
          or an explicit length")[^\n]*\n?)+'}
test_Wstrict-aliasing-bogus-const-ptr-nonconst-ptr_424:
  build:
    files: compilers/gcc/./gcc.dg/Wstrict-aliasing-bogus-const-ptr-nonconst-ptr.c
    sources: {binary: Wstrict-aliasing-bogus-const-ptr-nonconst-ptr.s, cflags: -O2
        -Wstrict-aliasing -fstrict-aliasing -S}
  group: GRPSERIAL
test_Wstrict-aliasing-bogus-never-dereferenced_425:
  build:
    files: compilers/gcc/./gcc.dg/Wstrict-aliasing-bogus-never-dereferenced.c
    sources: {binary: Wstrict-aliasing-bogus-never-dereferenced.s, cflags: -O2 -Wstrict-aliasing
        -fstrict-aliasing -S}
  group: GRPSERIAL
test_Wstrict-aliasing-bogus-pta-1_426:
  build:
    files: compilers/gcc/./gcc.dg/Wstrict-aliasing-bogus-pta-1.c
    sources: {binary: Wstrict-aliasing-bogus-pta-1.s, cflags: -O2 -Wall -S}
  group: GRPSERIAL
test_Wstrict-aliasing-bogus-ref-all-2_427:
  build:
    files: compilers/gcc/./gcc.dg/Wstrict-aliasing-bogus-ref-all-2.c
    sources: {binary: Wstrict-aliasing-bogus-ref-all-2.s, cflags: -O2 -Wall -msse2
        -S}
  group: GRPSERIAL
test_Wstrict-aliasing-bogus-ref-all_428:
  build:
    files: compilers/gcc/./gcc.dg/Wstrict-aliasing-bogus-ref-all.c
    sources: {binary: Wstrict-aliasing-bogus-ref-all.s, cflags: -O2 -Wall -S}
  group: GRPSERIAL
  validate:
    match:
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("will
          break")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("will
          break")[^\n]*\n?)+'}
test_Wstrict-aliasing-bogus-struct-included_429:
  build:
    files: compilers/gcc/./gcc.dg/Wstrict-aliasing-bogus-struct-included.c
    sources: {binary: Wstrict-aliasing-bogus-struct-included.s, cflags: -O2 -Wstrict-aliasing
        -fstrict-aliasing -S}
  group: GRPSERIAL
test_Wstrict-aliasing-bogus-upcast_430:
  build:
    files: compilers/gcc/./gcc.dg/Wstrict-aliasing-bogus-upcast.c
    sources: {binary: Wstrict-aliasing-bogus-upcast.s, cflags: -O2 -Wall -S}
  group: GRPSERIAL
test_Wstrict-aliasing-bogus-vla-1_431:
  build:
    files: compilers/gcc/./gcc.dg/Wstrict-aliasing-bogus-vla-1.c
    sources: {binary: Wstrict-aliasing-bogus-vla-1.s, cflags: -std=gnu99 -O2 -Wall
        -S}
  group: GRPSERIAL
test_Wstrict-aliasing-converted-assigned_432:
  build:
    files: compilers/gcc/./gcc.dg/Wstrict-aliasing-converted-assigned.c
    sources: {binary: Wstrict-aliasing-converted-assigned.s, cflags: -O2 -Wstrict-aliasing
        -fstrict-aliasing -S}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("type-punn")[^\n]*\n?)+'}
test_Wstrict-aliasing-float-ptr-int-obj_433:
  build:
    files: compilers/gcc/./gcc.dg/Wstrict-aliasing-float-ptr-int-obj.c
    sources: {binary: Wstrict-aliasing-float-ptr-int-obj.s, cflags: -O -Wstrict-aliasing
        -fstrict-aliasing -S}
  group: GRPSERIAL
  validate:
    match:
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("does
          break strict-aliasing")[^\n]*\n?)+'}
test_Wstrict-aliasing-struct-with-char-member_434:
  build:
    files: compilers/gcc/./gcc.dg/Wstrict-aliasing-struct-with-char-member.c
    sources: {binary: Wstrict-aliasing-struct-with-char-member.s, cflags: -O2 -Wall
        -S}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("will
          break strict-aliasing")[^\n]*\n?)+'}
test_Wstrict-overflow-10_436:
  build:
    files: compilers/gcc/./gcc.dg/Wstrict-overflow-10.c
    sources: {binary: Wstrict-overflow-10.s, cflags: -fstrict-overflow -O2 -Wstrict-overflow=1
        -S}
  group: GRPSERIAL
test_Wstrict-overflow-11_437:
  build:
    files: compilers/gcc/./gcc.dg/Wstrict-overflow-11.c
    sources: {binary: Wstrict-overflow-11.s, cflags: -fstrict-overflow -O2 -Wstrict-overflow=1
        -S}
  group: GRPSERIAL
test_Wstrict-overflow-12_438:
  build:
    files: compilers/gcc/./gcc.dg/Wstrict-overflow-12.c
    sources: {binary: Wstrict-overflow-12.s, cflags: -fstrict-overflow -O2 -Wstrict-overflow=2
        -S}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("assuming
          signed overflow does not occur")[^\n]*\n?)+'}
test_Wstrict-overflow-13_439:
  build:
    files: compilers/gcc/./gcc.dg/Wstrict-overflow-13.c
    sources: {binary: Wstrict-overflow-13.s, cflags: -fstrict-overflow -O2 -Wstrict-overflow=2
        -S}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("assuming
          signed overflow does not occur")[^\n]*\n?)+'}
test_Wstrict-overflow-14_440:
  build:
    files: compilers/gcc/./gcc.dg/Wstrict-overflow-14.c
    sources: {binary: Wstrict-overflow-14.s, cflags: -fstrict-overflow -O2 -Wstrict-overflow=4
        -S}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("assuming
          signed overflow does not occur")[^\n]*\n?)+'}
test_Wstrict-overflow-15_441:
  build:
    files: compilers/gcc/./gcc.dg/Wstrict-overflow-15.c
    sources: {binary: Wstrict-overflow-15.s, cflags: -fstrict-overflow -O2 -Wstrict-overflow=4
        -S}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("assuming
          signed overflow does not occur")[^\n]*\n?)+'}
test_Wstrict-overflow-16_442:
  build:
    files: compilers/gcc/./gcc.dg/Wstrict-overflow-16.c
    sources: {binary: Wstrict-overflow-16.s, cflags: -fstrict-overflow -O2 -Wstrict-overflow
        -S}
  group: GRPSERIAL
test_Wstrict-overflow-17_443:
  build:
    files: compilers/gcc/./gcc.dg/Wstrict-overflow-17.c
    sources: {binary: Wstrict-overflow-17.s, cflags: -fstrict-overflow -O2 -Wstrict-overflow
        -S}
  group: GRPSERIAL
test_Wstrict-overflow-18_444:
  build:
    files: compilers/gcc/./gcc.dg/Wstrict-overflow-18.c
    sources: {binary: Wstrict-overflow-18.s, cflags: -fstrict-overflow -O2 -Wstrict-overflow
        -S}
  group: GRPSERIAL
  validate:
    match:
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("signed
          overflow")[^\n]*\n?)+'}
test_Wstrict-overflow-19_445:
  build:
    files: compilers/gcc/./gcc.dg/Wstrict-overflow-19.c
    sources: {binary: Wstrict-overflow-19.s, cflags: -fstrict-overflow -O2 -Wstrict-overflow
        -S}
  group: GRPSERIAL
test_Wstrict-overflow-1_435:
  build:
    files: compilers/gcc/./gcc.dg/Wstrict-overflow-1.c
    sources: {binary: Wstrict-overflow-1.s, cflags: -fstrict-overflow -O2 -Wstrict-overflow=3
        -S}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("assuming
          signed overflow does not occur")[^\n]*\n?)+'}
test_Wstrict-overflow-20_447:
  build:
    files: compilers/gcc/./gcc.dg/Wstrict-overflow-20.c
    sources: {binary: Wstrict-overflow-20.s, cflags: -fstrict-overflow -O2 -Wstrict-overflow
        -S}
  group: GRPSERIAL
test_Wstrict-overflow-21_448:
  build:
    files: compilers/gcc/./gcc.dg/Wstrict-overflow-21.c
    sources: {binary: Wstrict-overflow-21.s, cflags: -fstrict-overflow -O2 -Wstrict-overflow=2
        -Wall -S}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("assuming
          signed overflow does not occur")[^\n]*\n?)+'}
test_Wstrict-overflow-22_449:
  build:
    files: compilers/gcc/./gcc.dg/Wstrict-overflow-22.c
    sources: {binary: Wstrict-overflow-22.s, cflags: -fstrict-overflow -O2 -Wstrict-overflow=3
        -S}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("assuming
          pointer wraparound does not occur")[^\n]*\n?)+'}
test_Wstrict-overflow-23_450:
  build:
    files: compilers/gcc/./gcc.dg/Wstrict-overflow-23.c
    sources: {binary: Wstrict-overflow-23.s, cflags: -O2 -Wstrict-overflow -S}
  group: GRPSERIAL
test_Wstrict-overflow-24_451:
  build:
    files: compilers/gcc/./gcc.dg/Wstrict-overflow-24.c
    sources: {binary: Wstrict-overflow-24.s, cflags: -fstrict-overflow -O2 -S}
  group: GRPSERIAL
  validate:
    match:
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assuming
          signed overflow does not occur")[^\n]*\n?)+'}
test_Wstrict-overflow-25_452:
  build:
    files: compilers/gcc/./gcc.dg/Wstrict-overflow-25.c
    sources: {binary: Wstrict-overflow-25.s, cflags: -fstrict-overflow -O2 -Wstrict-overflow=3
        -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("assuming
          signed overflow does not occur")[^\n]*\n?)+'}
test_Wstrict-overflow-26_453:
  build:
    files: compilers/gcc/./gcc.dg/Wstrict-overflow-26.c
    sources: {binary: Wstrict-overflow-26.s, cflags: -O2 -Wstrict-overflow -S}
  group: GRPSERIAL
test_Wstrict-overflow-2_446:
  build:
    files: compilers/gcc/./gcc.dg/Wstrict-overflow-2.c
    sources: {binary: Wstrict-overflow-2.s, cflags: -fstrict-overflow -O2 -Wstrict-overflow=2
        -S}
  group: GRPSERIAL
test_Wstrict-overflow-3_454:
  build:
    files: compilers/gcc/./gcc.dg/Wstrict-overflow-3.c
    sources: {binary: Wstrict-overflow-3.s, cflags: -fstrict-overflow -O2 -Wstrict-overflow=4
        -S}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("assuming
          signed overflow does not occur")[^\n]*\n?)+'}
test_Wstrict-overflow-4_455:
  build:
    files: compilers/gcc/./gcc.dg/Wstrict-overflow-4.c
    sources: {binary: Wstrict-overflow-4.s, cflags: -fstrict-overflow -O2 -Wstrict-overflow=3
        -S}
  group: GRPSERIAL
test_Wstrict-overflow-5_456:
  build:
    files: compilers/gcc/./gcc.dg/Wstrict-overflow-5.c
    sources: {binary: Wstrict-overflow-5.s, cflags: -fstrict-overflow -O2 -Wstrict-overflow=3
        -S}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("assuming
          signed overflow does not occur")[^\n]*\n?)+'}
test_Wstrict-overflow-6_457:
  build:
    files: compilers/gcc/./gcc.dg/Wstrict-overflow-6.c
    sources: {binary: Wstrict-overflow-6.s, cflags: -fstrict-overflow -O2 -Wstrict-overflow=2
        -S}
  group: GRPSERIAL
test_Wstrict-overflow-7_458:
  build:
    files: compilers/gcc/./gcc.dg/Wstrict-overflow-7.c
    sources: {binary: Wstrict-overflow-7.s, cflags: -fstrict-overflow -O2 -Wstrict-overflow
        -S}
  group: GRPSERIAL
  validate:
    match:
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("assuming
          signed overflow does not occur")[^\n]*\n?)+'}
test_Wstrict-overflow-8_459:
  build:
    files: compilers/gcc/./gcc.dg/Wstrict-overflow-8.c
    sources: {binary: Wstrict-overflow-8.s, cflags: -fstrict-overflow -O2 -Wall -Wno-strict-overflow
        -S}
  group: GRPSERIAL
test_Wstrict-overflow-9_460:
  build:
    files: compilers/gcc/./gcc.dg/Wstrict-overflow-9.c
    sources: {binary: Wstrict-overflow-9.s, cflags: -fstrict-overflow -O2 -Wstrict-overflow=2
        -S}
  group: GRPSERIAL
  validate:
    match:
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("assuming
          signed overflow does not occur")[^\n]*\n?)+'}
test_Wstring-literal-comparison-1_461:
  build:
    files: compilers/gcc/./gcc.dg/Wstring-literal-comparison-1.c
    sources: {binary: Wstring-literal-comparison-1.s, cflags: -Waddress -S}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          with string")[^\n]*\n?)+'}
test_Wstring-literal-comparison-2_462:
  build:
    files: compilers/gcc/./gcc.dg/Wstring-literal-comparison-2.c
    sources: {binary: Wstring-literal-comparison-2.s, cflags: -Wall -S}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          with string")[^\n]*\n?)+'}
test_Wstring-literal-comparison-3_463:
  build:
    files: compilers/gcc/./gcc.dg/Wstring-literal-comparison-3.c
    sources: {binary: Wstring-literal-comparison-3.s, cflags: ' -S'}
  group: GRPSERIAL
test_Wstring-literal-comparison-4_464:
  build:
    files: compilers/gcc/./gcc.dg/Wstring-literal-comparison-4.c
    sources: {binary: Wstring-literal-comparison-4.s, cflags: -Wall -Wno-address -S}
  group: GRPSERIAL
test_Wswitch-2_465:
  build:
    files: compilers/gcc/./gcc.dg/Wswitch-2.c
    sources: {binary: Wswitch-2.s, cflags: -Wswitch -S}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("enumeration
          value \''e4\'' not handled in switch")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("enumeration
          value \''e1\'' not handled in switch")[^\n]*\n?)+'}
test_Wswitch-default_466:
  build:
    files: compilers/gcc/./gcc.dg/Wswitch-default.c
    sources: {binary: Wswitch-default.s, cflags: -Wswitch-default -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("switch
          missing default case")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("switch
          missing default case")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("switch
          missing default case")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("switch
          missing default case")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("switch
          missing default case")[^\n]*\n?)+'}
test_Wswitch-enum-2_467:
  build:
    files: compilers/gcc/./gcc.dg/Wswitch-enum-2.c
    sources: {binary: Wswitch-enum-2.s, cflags: -O2 -Wswitch-enum -S}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("case
          value \''3\'' not in enumerated")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("case
          value \''1\'' not in enumerated")[^\n]*\n?)+'}
test_Wswitch-enum-3_468:
  build:
    files: compilers/gcc/./gcc.dg/Wswitch-enum-3.c
    sources: {binary: Wswitch-enum-3.s, cflags: -O2 -Wswitch-enum -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("case
          value \''1\'' not in enumerated")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("enumeration
          value \''a\'' not handled")[^\n]*\n?)+'}
test_Wswitch-enum-error_469:
  build:
    files: compilers/gcc/./gcc.dg/Wswitch-enum-error.c
    sources: {binary: Wswitch-enum-error.s, cflags: -Werror=switch-enum -Wswitch -S}
  group: GRPSERIAL
  validate:
    match:
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("enumeration
          value \''e1\'' not handled in switch")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("enumeration
          value \''e2\'' not handled in switch")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enumeration
          value \''e1\'' not handled in switch")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enumeration
          value \''e2\'' not handled in switch")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("enumeration
          value \''e2\'' not handled in switch")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enumeration
          value \''e2\'' not handled in switch")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("case
          value \''3\'' not in enumerated type \''enum e\''")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("case
          value \''3\'' not in enumerated type \''enum e\''")[^\n]*\n?)+'}
test_Wswitch-enum_470:
  build:
    files: compilers/gcc/./gcc.dg/Wswitch-enum.c
    sources: {binary: Wswitch-enum.s, cflags: -Wswitch-enum -S}
  group: GRPSERIAL
  validate:
    match:
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("enumeration
          value \''e1\'' not handled in switch")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("enumeration
          value \''e2\'' not handled in switch")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("enumeration
          value \''e1\'' not handled in switch")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("enumeration
          value \''e2\'' not handled in switch")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("enumeration
          value \''e2\'' not handled in switch")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("enumeration
          value \''e2\'' not handled in switch")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("case
          value \''3\'' not in enumerated type \''enum e\''")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("case
          value \''3\'' not in enumerated type \''enum e\''")[^\n]*\n?)+'}
test_Wswitch-error_471:
  build:
    files: compilers/gcc/./gcc.dg/Wswitch-error.c
    sources: {binary: Wswitch-error.s, cflags: -Werror=switch -Wswitch-enum -S}
  group: GRPSERIAL
  validate:
    match:
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enumeration
          value \''e1\'' not handled in switch")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enumeration
          value \''e2\'' not handled in switch")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("enumeration
          value \''e1\'' not handled in switch")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("enumeration
          value \''e2\'' not handled in switch")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("enumeration
          value \''e2\'' not handled in switch")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("enumeration
          value \''e2\'' not handled in switch")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("case
          value \''3\'' not in enumerated type \''enum e\''")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("case
          value \''3\'' not in enumerated type \''enum e\''")[^\n]*\n?)+'}
test_Wswitch-unreachable-1_472:
  build:
    files: compilers/gcc/./gcc.dg/Wswitch-unreachable-1.c
    sources: {binary: Wswitch-unreachable-1.s, cflags: -Wswitch-unreachable -S}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("statement
          will never be executed")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("switch
          jumps into scope")[^\n]*\n?)+'}
test_Wswitch-unreachable-2_473:
  build:
    files: compilers/gcc/./gcc.dg/Wswitch-unreachable-2.c
    sources: {binary: Wswitch-unreachable-2.s, cflags: -Wswitch-unreachable -S}
  group: GRPSERIAL
test_Wswitch_474:
  build:
    files: compilers/gcc/./gcc.dg/Wswitch.c
    sources: {binary: Wswitch.s, cflags: -Wswitch -S}
  group: GRPSERIAL
  validate:
    match:
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("enumeration
          value \''e1\'' not handled in switch")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("enumeration
          value \''e2\'' not handled in switch")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("enumeration
          value \''e2\'' not handled in switch")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("case
          value \''3\'' not in enumerated type \''enum e\''")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("case
          value \''3\'' not in enumerated type \''enum e\''")[^\n]*\n?)+'}
test_Wtraditional-conversion-2_475:
  build:
    files: compilers/gcc/./gcc.dg/Wtraditional-conversion-2.c
    sources: {binary: Wtraditional-conversion-2.s, cflags: -std=c99 -pedantic-errors
        -Wtraditional-conversion -S}
  group: GRPSERIAL
  validate:
    match:
      L42: {expect: true, expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("passing
          argument 1 of \''fsi\'' as integer rather than floating due to prototype")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("passing
          argument 1 of \''x.fsi\'' as integer rather than floating due to prototype")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("passing
          argument 1 of \''fsi\'' as integer rather than complex due to prototype")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("passing
          argument 1 of \''x.fsi\'' as integer rather than complex due to prototype")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("passing
          argument 1 of \''fcf\'' as complex rather than floating due to prototype")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("passing
          argument 1 of \''x.fcf\'' as complex rather than floating due to prototype")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("passing
          argument 1 of \''fcf\'' as complex rather than integer due to prototype")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("passing
          argument 1 of \''x.fcf\'' as complex rather than integer due to prototype")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("passing
          argument 1 of \''ff\'' as floating rather than integer due to prototype")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("passing
          argument 1 of \''x.ff\'' as floating rather than integer due to prototype")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("passing
          argument 1 of \''ff\'' as floating rather than complex due to prototype")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("passing
          argument 1 of \''x.ff\'' as floating rather than complex due to prototype")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("passing
          argument 1 of \''ff\'' as \''float\'' rather than \''double\'' due to prototype")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("passing
          argument 1 of \''x.ff\'' as \''float\'' rather than \''double\'' due to
          prototype")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("passing
          argument 1 of \''fsll\'' with different width due to prototype")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("passing
          argument 1 of \''x.fsll\'' with different width due to prototype")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("passing
          argument 1 of \''fsc\'' with different width due to prototype")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("passing
          argument 1 of \''x.fsc\'' with different width due to prototype")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("passing
          argument 1 of \''fsi\'' as signed due to prototype")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("passing
          argument 1 of \''x.fsi\'' as signed due to prototype")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("passing
          argument 1 of \''full\'' as unsigned due to prototype")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("passing
          argument 1 of \''x.full\'' as unsigned due to prototype")[^\n]*\n?)+'}
test_Wtraditional-conversion_476:
  build:
    files: compilers/gcc/./gcc.dg/Wtraditional-conversion.c
    sources: {binary: Wtraditional-conversion.s, cflags: -Wtraditional-conversion
        -S}
  group: GRPSERIAL
test_Wtrampolines_477:
  build:
    files: compilers/gcc/./gcc.dg/Wtrampolines.c
    sources: {binary: Wtrampolines.s, cflags: -O2 -Wtrampolines -S}
  group: GRPSERIAL
  validate:
    match:
      L31: {expect: true, expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("trampoline
          generated for nested function \''b\''")[^\n]*\n?)+'}
test_Wtype-limits-Wextra_478:
  build:
    files: compilers/gcc/./gcc.dg/Wtype-limits-Wextra.c
    sources: {binary: Wtype-limits-Wextra.s, cflags: -Wextra -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          is always false due to limited range of data type")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          is always true due to limited range of data type")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          is always true due to limited range of data type")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          is always true due to limited range of data type")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          of unsigned expression < 0 is always false")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          is always false due to limited range of data type")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          of unsigned expression >= 0 is always true")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          is always true due to limited range of data type")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          of unsigned expression < 0 is always false")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          is always false due to limited range of data type")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          of unsigned expression >= 0 is always true")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          is always true due to limited range of data type")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          of unsigned expression < 0 is always false")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          of unsigned expression >= 0 is always true")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          of unsigned expression < 0 is always false")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          of unsigned expression >= 0 is always true")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          of unsigned expression < 0 is always false")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          of unsigned expression >= 0 is always true")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          of unsigned expression < 0 is always false")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          of unsigned expression >= 0 is always true")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          of unsigned expression < 0 is always false")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          of unsigned expression >= 0 is always true")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          of unsigned expression < 0 is always false")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          of unsigned expression >= 0 is always true")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          is always false due to limited range of data type")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          is always true due to limited range of data type")[^\n]*\n?)+'}
test_Wtype-limits-no_479:
  build:
    files: compilers/gcc/./gcc.dg/Wtype-limits-no.c
    sources: {binary: Wtype-limits-no.s, cflags: -Wextra -Wno-type-limits -S}
  group: GRPSERIAL
test_Wtype-limits2_481:
  build:
    files: compilers/gcc/./gcc.dg/Wtype-limits2.c
    sources: {binary: Wtype-limits2.s, cflags: -Wtype-limits -S}
  group: GRPSERIAL
  validate:
    match:
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          is always false due to limited range of data type")[^\n]*\n?)+'}
test_Wtype-limits_480:
  build:
    files: compilers/gcc/./gcc.dg/Wtype-limits.c
    sources: {binary: Wtype-limits.s, cflags: -Wtype-limits -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          is always false due to limited range of data type")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          is always true due to limited range of data type")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          is always true due to limited range of data type")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          is always true due to limited range of data type")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          of unsigned expression < 0 is always false")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          is always false due to limited range of data type")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          of unsigned expression >= 0 is always true")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          is always true due to limited range of data type")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          of unsigned expression < 0 is always false")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          is always false due to limited range of data type")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          of unsigned expression >= 0 is always true")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          is always true due to limited range of data type")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          of unsigned expression < 0 is always false")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          of unsigned expression >= 0 is always true")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          of unsigned expression < 0 is always false")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          of unsigned expression >= 0 is always true")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          of unsigned expression < 0 is always false")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          of unsigned expression >= 0 is always true")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          of unsigned expression < 0 is always false")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          of unsigned expression >= 0 is always true")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          of unsigned expression < 0 is always false")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          of unsigned expression >= 0 is always true")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          of unsigned expression < 0 is always false")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          of unsigned expression >= 0 is always true")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          is always false due to limited range of data type")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("comparison
          is always true due to limited range of data type")[^\n]*\n?)+'}
test_Wunknownprag_482:
  build:
    files: compilers/gcc/./gcc.dg/Wunknownprag.c
    sources: {binary: Wunknownprag.s, cflags: -Wunknown-pragmas -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("ignoring
          #pragma")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("ignoring
          #pragma")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("ignoring
          #pragma")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("ignoring
          #pragma")[^\n]*\n?)+'}
test_Wunsuffixed-float-constants-1_483:
  build:
    files: compilers/gcc/./gcc.dg/Wunsuffixed-float-constants-1.c
    sources: {binary: Wunsuffixed-float-constants-1.s, cflags: -std=gnu99 -Wunsuffixed-float-constants
        -S}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("unsuffixed
          float constant")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("unsuffixed
          float constant")[^\n]*\n?)+'}
test_Wunused-function_484:
  build:
    files: compilers/gcc/./gcc.dg/Wunused-function.c
    sources: {binary: Wunused-function.s, cflags: -Wunused-function -S}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("\''foo\''
          defined but not used")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("\''bar\''
          defined but not used")[^\n]*\n?)+'}
test_Wunused-label-1_485:
  build:
    files: compilers/gcc/./gcc.dg/Wunused-label-1.c
    sources: {binary: Wunused-label-1.s, cflags: -Wunused-label -S}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("not
          used")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("not
          used")[^\n]*\n?)+'}
test_Wunused-local-typedefs_486:
  build:
    files: compilers/gcc/./gcc.dg/Wunused-local-typedefs.c
    sources: {binary: Wunused-local-typedefs.s, cflags: -Wunused-local-typedefs -S}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("locally
          defined but not used")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("locally
          defined but not used")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("locally
          defined but not used")[^\n]*\n?)+'}
test_Wunused-parm-1_487:
  build:
    files: compilers/gcc/./gcc.dg/Wunused-parm-1.c
    sources: {binary: Wunused-parm-1.s, cflags: -Wunused -W -S}
  group: GRPSERIAL
  validate:
    match:
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("unused
          parameter")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("set
          but not used")[^\n]*\n?)+'}
test_Wunused-value-1_488:
  build:
    files: compilers/gcc/./gcc.dg/Wunused-value-1.c
    sources: {binary: Wunused-value-1.s, cflags: -Wunused-value -S}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("value
          computed is not used")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("value
          computed is not used")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("value
          computed is not used")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("value
          computed is not used")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("value
          computed is not used")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("value
          computed is not used")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("value
          computed is not used")[^\n]*\n?)+'}
test_Wunused-value-2_489:
  build:
    files: compilers/gcc/./gcc.dg/Wunused-value-2.c
    sources: {binary: Wunused-value-2.s, cflags: -Wunused-value -S}
  group: GRPSERIAL
test_Wunused-value-3_490:
  build:
    files: compilers/gcc/./gcc.dg/Wunused-value-3.c
    sources: {binary: Wunused-value-3.s, cflags: -Wunused-value -S}
  group: GRPSERIAL
test_Wunused-var-1_491:
  build:
    files: compilers/gcc/./gcc.dg/Wunused-var-1.c
    sources: {binary: Wunused-var-1.s, cflags: -Wunused -S}
  group: GRPSERIAL
  validate:
    match:
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("set
          but not used")[^\n]*\n?)+'}
test_Wunused-var-2_492:
  build:
    files: compilers/gcc/./gcc.dg/Wunused-var-2.c
    sources: {binary: Wunused-var-2.s, cflags: -Wunused -S}
  group: GRPSERIAL
test_Wunused-var-3_493:
  build:
    files: compilers/gcc/./gcc.dg/Wunused-var-3.c
    sources: {binary: Wunused-var-3.s, cflags: -Wunused -S}
  group: GRPSERIAL
test_Wvla-1_494:
  build:
    files: compilers/gcc/./gcc.dg/Wvla-1.c
    sources: {binary: Wvla-1.s, cflags: -std=c89 -Wvla -S}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 forbids variable length array \''array\''")[^\n]*\n?)+'}
test_Wvla-2_495:
  build:
    files: compilers/gcc/./gcc.dg/Wvla-2.c
    sources: {binary: Wvla-2.s, cflags: -std=c99 -Wvla -S}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 forbids variable length array \''array\''")[^\n]*\n?)+'}
test_Wvla-3_496:
  build:
    files: compilers/gcc/./gcc.dg/Wvla-3.c
    sources: {binary: Wvla-3.s, cflags: -pedantic-errors -std=c89 -Wvla -S}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C90 forbids variable.* array \''array\''")[^\n]*\n?)+'}
test_Wvla-4_497:
  build:
    files: compilers/gcc/./gcc.dg/Wvla-4.c
    sources: {binary: Wvla-4.s, cflags: -pedantic-errors -std=c99 -Wvla -S}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 forbids variable length array \''array\''")[^\n]*\n?)+'}
test_Wvla-5_498:
  build:
    files: compilers/gcc/./gcc.dg/Wvla-5.c
    sources: {binary: Wvla-5.s, cflags: -pedantic-errors -std=c89 -Wno-vla -S}
  group: GRPSERIAL
test_Wvla-6_499:
  build:
    files: compilers/gcc/./gcc.dg/Wvla-6.c
    sources: {binary: Wvla-6.s, cflags: -std=c89 -Wvla -S}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+(:5:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C90 forbids variable length array")[^\n]*\n?)+'}
test_Wvla-7_500:
  build:
    files: compilers/gcc/./gcc.dg/Wvla-7.c
    sources: {binary: Wvla-7.s, cflags: -pedantic-errors -std=c89 -Wvla -S}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C90 forbids variable")[^\n]*\n?)+'}
test_Wvla-larger-than-1_501:
  build:
    files: compilers/gcc/./gcc.dg/Wvla-larger-than-1.c
    sources: {binary: Wvla-larger-than-1.s, cflags: -Wvla-larger-than=100 -O2 -S}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("unbounded
          use")[^\n]*\n?)+'}
test_Wvla-larger-than-2_502:
  build:
    files: compilers/gcc/./gcc.dg/Wvla-larger-than-2.c
    sources: {binary: Wvla-larger-than-2.s, cflags: -O2 -Wvla-larger-than=40 -S}
  group: GRPSERIAL
  validate:
    match:
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("array
          may be too large")[^\n]*\n?)+'}
      L38: {expect: true, expr: '(^|\n)([^\n]+(:38:)[^\n]*[0-9]+: warning:[^\n]*("array
          may be too large")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("variable-length
          array is too large")[^\n]*\n?)+'}
test_Wwrite-strings-1_503:
  build:
    files: compilers/gcc/./gcc.dg/Wwrite-strings-1.c
    sources: {binary: Wwrite-strings-1.s, cflags: -Wwrite-strings -S}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("initialization
          discards \''const\'' qualifier from pointer target type")[^\n]*\n?)+'}
test_addr_builtin-1_504:
  build:
    files: compilers/gcc/./gcc.dg/addr_builtin-1.c
    sources: {binary: addr_builtin-1.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
  validate:
    match:
      L102: {expect: true, expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("built-in
          function")[^\n]*\n?)+'}
      L104: {expect: true, expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("built-in
          function")[^\n]*\n?)+'}
      L105: {expect: true, expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("built-in
          function")[^\n]*\n?)+'}
      L108: {expect: true, expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("built-in
          function")[^\n]*\n?)+'}
      L111: {expect: true, expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("built-in
          function")[^\n]*\n?)+'}
      L114: {expect: true, expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("built-in
          function")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("built-in
          function")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("built-in
          function")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("built-in
          function")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("built-in
          function")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("built-in
          function")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("built-in
          function")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("built-in
          function")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("built-in
          function")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("built-in
          function")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("built-in
          function")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("built-in
          function")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("built-in
          function")[^\n]*\n?)+'}
      L69: {expect: true, expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("built-in
          function")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("built-in
          function")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("built-in
          function")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("built-in
          function")[^\n]*\n?)+'}
      L75: {expect: true, expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("built-in
          function")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("built-in
          function")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("built-in
          function")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("built-in
          function")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("built-in
          function")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("built-in
          function")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("built-in
          function")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("built-in
          function")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("built-in
          function")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("built-in
          function")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("built-in
          function")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("built-in
          function")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("built-in
          function")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*("built-in
          function")[^\n]*\n?)+'}
      L98: {expect: true, expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("built-in
          function")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("built-in
          function")[^\n]*\n?)+'}
test_alias-10_506:
  build:
    files: compilers/gcc/./gcc.dg/alias-10.c
    sources: {binary: alias-10.s, cflags: -O2 -funswitch-loops -fdump-tree-unswitch-details
        -S}
  group: GRPSERIAL
test_alias-11_507:
  build:
    files: compilers/gcc/./gcc.dg/alias-11.c
    sources: {binary: ./alias-11.exe, cflags: -O2}
  group: GRPSERIAL
  run: {cwd: .}
test_alias-12_508:
  build:
    files: compilers/gcc/./gcc.dg/alias-12.c
    sources: {binary: alias-12.s, cflags: -O2 -S}
  group: GRPSERIAL
  validate:
    match:
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("part
          of alias cycle")[^\n]*\n?)+'}
test_alias-13_509:
  build:
    files: compilers/gcc/./gcc.dg/alias-13.c
    sources: {binary: alias-13.s, cflags: -O2 -S}
  group: GRPSERIAL
  validate:
    match:
      L4: {expect: true, expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("part
          of alias cycle")[^\n]*\n?)+'}
test_alias-14_510:
  build:
    files: compilers/gcc/./gcc.dg/alias-14.c
    sources: {binary: alias-14.s, cflags: -O2 -S}
  group: GRPSERIAL
test_alias-15_511:
  build:
    files: compilers/gcc/./gcc.dg/alias-15.c
    sources: {binary: alias-15.s, cflags: -ansi -pedantic-errors -O2 -fdump-ipa-cgraph
        -S}
  group: GRPSERIAL
test_alias-1_505:
  build:
    files: compilers/gcc/./gcc.dg/alias-1.c
    sources: {binary: alias-1.s, cflags: -Wstrict-aliasing=2 -fstrict-aliasing -S}
  group: GRPSERIAL
  validate:
    match:
      L22: {expect: true, expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("type-punned
          pointer will")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("type-punning
          to incomplete")[^\n]*\n?)+'}
test_alias-2_512:
  build:
    files: compilers/gcc/./gcc.dg/alias-2.c
    sources: {binary: alias-2.s, cflags: -Wstrict-aliasing=2 -fstrict-aliasing -S}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("type-punned
          pointer will")[^\n]*\n?)+'}
test_alias-3_513:
  build:
    files: compilers/gcc/./gcc.dg/alias-3.c
    sources: {binary: alias-3.s, cflags: ' -S'}
  group: GRPSERIAL
  validate:
    match:
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aliased
          to")[^\n]*\n?)+'}
test_alias-4_514:
  build:
    files: compilers/gcc/./gcc.dg/alias-4.c
    sources: {binary: alias-4.s, cflags: -O2 -funit-at-a-time -S}
  group: GRPSERIAL
  validate:
    match:
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("aliased
          to")[^\n]*\n?)+'}
test_alias-5_515:
  build:
    files: compilers/gcc/./gcc.dg/alias-5.c
    sources: {binary: alias-5.exe, cflags: ''}
  group: GRPSERIAL
  run: {cwd: .}
test_alias-6_516:
  build:
    files: compilers/gcc/./gcc.dg/alias-6.c
    sources: {binary: alias-6.exe, cflags: -O2 -funit-at-a-time}
  group: GRPSERIAL
  run: {cwd: .}
test_alias-7_517:
  build:
    files: compilers/gcc/./gcc.dg/alias-7.c
    sources: {binary: ./alias-7.exe, cflags: -O2}
  group: GRPSERIAL
  run: {cwd: .}
test_alias-8_518:
  build:
    files: compilers/gcc/./gcc.dg/alias-8.c
    sources: {binary: alias-8.s, cflags: -Wstrict-aliasing=2 -fstrict-aliasing -S}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("type-punned
          pointer")[^\n]*\n?)+'}
test_alias-9_519:
  build:
    files: compilers/gcc/./gcc.dg/alias-9.c
    sources: {binary: alias-9.s, cflags: -Wstrict-aliasing=2 -O2 -S}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("strict-aliasing")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("strict-aliasing")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("strict-aliasing")[^\n]*\n?)+'}
test_align-1_520:
  build:
    files: compilers/gcc/./gcc.dg/align-1.c
    sources: {binary: ./align-1.exe, cflags: ''}
  group: GRPSERIAL
  run: {cwd: .}
test_align-3_521:
  build:
    files: compilers/gcc/./gcc.dg/align-3.c
    sources: {binary: align-3.s, cflags: -O2 -fdump-rtl-expand -ffat-lto-objects -S}
  group: GRPSERIAL
test_alignof_522:
  build:
    files: compilers/gcc/./gcc.dg/alignof.c
    sources: {binary: alignof.s, cflags: -std=c11 -Wno-error -Wpedantic -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C does not allow ._Alignof \\\\(expression\\\\).")[^\n]*\n?)+'}
test_always_inline2_524:
  build:
    files: compilers/gcc/./gcc.dg/always_inline2.c
    sources: {binary: always_inline2.s, cflags: -O2 -fgnu89-inline -S}
  group: GRPSERIAL
  validate:
    match:
      L3: {expect: true, expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("body
          not available")[^\n]*\n?)+'}
test_always_inline3_525:
  build:
    files: compilers/gcc/./gcc.dg/always_inline3.c
    sources: {binary: always_inline3.s, cflags: -O2 -fgnu89-inline -S}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("recursive
          inlining")[^\n]*\n?)+'}
test_always_inline_523:
  build:
    files: compilers/gcc/./gcc.dg/always_inline.c
    sources: {binary: always_inline.s, cflags: -O2 -fgnu89-inline -S}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("variable
          argument lists")[^\n]*\n?)+'}
test_and-1_526:
  build:
    files: compilers/gcc/./gcc.dg/and-1.c
    sources: {binary: and-1.s, cflags: -O2 -ffat-lto-objects -S}
  group: GRPSERIAL
test_anon-struct-10_528:
  build:
    files: compilers/gcc/./gcc.dg/anon-struct-10.c
    sources: {binary: ./anon-struct-10.exe, cflags: ''}
  group: GRPSERIAL
  run: {cwd: .}
test_anon-struct-11_529:
  build:
    files: compilers/gcc/./gcc.dg/anon-struct-11.c
    sources: {binary: anon-struct-11.s, cflags: ' -S'}
  group: GRPSERIAL
  validate:
    match:
      L100: {expect: true, expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          member")[^\n]*\n?)+'}
      L101: {expect: true, expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          member")[^\n]*\n?)+'}
      L102: {expect: true, expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          member")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("does
          not declare anything")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          member")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("does
          not declare anything")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("does
          not declare anything")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L88: {expect: true, expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          member")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          member")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
test_anon-struct-12_530:
  build:
    files: compilers/gcc/./gcc.dg/anon-struct-12.c
    sources: {binary: ./anon-struct-12.exe, cflags: -fplan9-extensions}
  group: GRPSERIAL
  run: {cwd: .}
test_anon-struct-13_531:
  build:
    files: compilers/gcc/./gcc.dg/anon-struct-13.c
    sources: {binary: anon-struct-13.s, cflags: -fplan9-extensions -S}
  group: GRPSERIAL
  validate:
    match:
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          member")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate
          member")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          member")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("incompatible
          pointer type")[^\n]*\n?)+'}
      L69: {expect: true, expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          member")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate
          member")[^\n]*\n?)+'}
      L75: {expect: true, expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("no
          member")[^\n]*\n?)+'}
test_anon-struct-14_532:
  build:
    files: compilers/gcc/./gcc.dg/anon-struct-14.c
    sources: {binary: anon-struct-14.s, cflags: -fplan9-extensions -S}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible")[^\n]*\n?)+'}
test_anon-struct-15_533:
  build:
    files: compilers/gcc/./gcc.dg/anon-struct-15.c
    sources: {binary: anon-struct-15.s, cflags: ' -S'}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate
          member")[^\n]*\n?)+'}
test_anon-struct-1_527:
  build:
    files: compilers/gcc/./gcc.dg/anon-struct-1.c
    sources: {binary: anon-struct-1.s, cflags: '-std=iso9899:1990 -pedantic -S'}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("does
          not declare anything")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("unnamed
          structs")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("does
          not declare anything")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("unnamed
          structs")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("does
          not declare anything")[^\n]*\n?)+'}
test_anon-struct-2_534:
  build:
    files: compilers/gcc/./gcc.dg/anon-struct-2.c
    sources: {binary: anon-struct-2.s, cflags: -std=gnu89 -S}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("does
          not declare anything")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("does
          not declare anything")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("does
          not declare anything")[^\n]*\n?)+'}
test_anon-struct-3_535:
  build:
    files: compilers/gcc/./gcc.dg/anon-struct-3.c
    sources: {binary: anon-struct-3.s, cflags: -std=gnu89 -fms-extensions -S}
  group: GRPSERIAL
test_anon-struct-4_536:
  build:
    files: compilers/gcc/./gcc.dg/anon-struct-4.c
    sources: {binary: anon-struct-4.s, cflags: -std=gnu89 -S}
  group: GRPSERIAL
test_anon-struct-5_537:
  build:
    files: compilers/gcc/./gcc.dg/anon-struct-5.c
    sources: {binary: anon-struct-5.s, cflags: -std=c99 -pedantic-errors -S}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("declaration
          does not declare anything")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("struct
          has no members")[^\n]*\n?)+'}
test_anon-struct-6_538:
  build:
    files: compilers/gcc/./gcc.dg/anon-struct-6.c
    sources: {binary: anon-struct-6.s, cflags: ' -S'}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("useless
          type qualifier in empty declaration")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("empty
          declaration")[^\n]*\n?)+'}
test_anon-struct-7_539:
  build:
    files: compilers/gcc/./gcc.dg/anon-struct-7.c
    sources: {binary: anon-struct-7.s, cflags: -pedantic -S}
  group: GRPSERIAL
  validate:
    match:
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C forbids member declarations with no members")[^\n]*\n?)+'}
test_anon-struct-8_540:
  build:
    files: compilers/gcc/./gcc.dg/anon-struct-8.c
    sources: {binary: anon-struct-8.s, cflags: -pedantic-errors -S}
  group: GRPSERIAL
  validate:
    match:
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C forbids member declarations with no members")[^\n]*\n?)+'}
test_anon-struct-9_541:
  build:
    files: compilers/gcc/./gcc.dg/anon-struct-9.c
    sources: {binary: anon-struct-9.s, cflags: ' -S'}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate
          member")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate
          member")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate
          member")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate
          member")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate
          member")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate
          member")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate
          member")[^\n]*\n?)+'}
test_array-10_543:
  build:
    files: compilers/gcc/./gcc.dg/array-10.c
    sources: {binary: array-10.s, cflags: ' -S'}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("7:at
          file scope")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("17:at
          file scope")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("19:at
          file scope")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("at
          file scope|outside of any function")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("5:at
          file scope")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("7:at
          file scope")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("7:at
          file scope")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("17:at
          file scope")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("19:at
          file scope")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("37:at
          file scope")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("5:at
          file scope")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("9:division
          by zero")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("7:at
          file scope")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("12:division
          by zero")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("7:at
          file scope")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("14:division
          by zero")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("17:at
          file scope")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("20:division
          by zero")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("19:at
          file scope")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("23:division
          by zero")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("20:at
          file scope")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("5:at
          file scope")[^\n]*\n?)+'}
test_array-11_544:
  build:
    files: compilers/gcc/./gcc.dg/array-11.c
    sources: {binary: array-11.s, cflags: ' -S'}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nested
          context")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("excess
          elements")[^\n]*\n?)+'}
test_array-12_545:
  build:
    files: compilers/gcc/./gcc.dg/array-12.c
    sources: {binary: array-12.s, cflags: ' -S'}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete
          type")[^\n]*\n?)+'}
test_array-13_546:
  build:
    files: compilers/gcc/./gcc.dg/array-13.c
    sources: {binary: ./array-13.exe, cflags: ''}
  group: GRPSERIAL
  run: {cwd: .}
  validate:
    match:
      L18: {expect: true, expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("(excess
          elements)|(near initialization)")[^\n]*\n?)+'}
test_array-14_547:
  build:
    files: compilers/gcc/./gcc.dg/array-14.c
    sources: {binary: array-14.s, cflags: ' -S'}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("(non-static)|(near
          initialization)")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("(non-static)|(near
          initialization)")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("(non-static)|(initialization)")[^\n]*\n?)+'}
test_array-15_548:
  build:
    files: compilers/gcc/./gcc.dg/array-15.c
    sources: {binary: array-15.s, cflags: -std=c11 -pedantic-errors -S}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type has incomplete element type")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type has incomplete element type")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type has incomplete element type")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type has incomplete element type")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type has incomplete element type")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type has incomplete element type")[^\n]*\n?)+'}
      L37: {expect: true, expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type has incomplete element type")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type has incomplete element type")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type has incomplete element type")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type has incomplete element type")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type has incomplete element type")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type has incomplete element type")[^\n]*\n?)+'}
test_array-1_542:
  build:
    files: compilers/gcc/./gcc.dg/array-1.c
    sources: {binary: array-1.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
test_array-2_549:
  build:
    files: compilers/gcc/./gcc.dg/array-2.c
    sources: {binary: array-2.s, cflags: ' -S'}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("nested
          context")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("excess
          elements")[^\n]*\n?)+'}
test_array-3_550:
  build:
    files: compilers/gcc/./gcc.dg/array-3.c
    sources: {binary: array-3.s, cflags: ' -S'}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incomplete
          type")[^\n]*\n?)+'}
test_array-4_551:
  build:
    files: compilers/gcc/./gcc.dg/array-4.c
    sources: {binary: ./array-4.exe, cflags: ''}
  group: GRPSERIAL
  run: {cwd: .}
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("(excess
          elements)|(near initialization)")[^\n]*\n?)+'}
test_array-5_552:
  build:
    files: compilers/gcc/./gcc.dg/array-5.c
    sources: {binary: array-5.s, cflags: ' -S'}
  group: GRPSERIAL
  validate:
    match:
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicting
          types")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("incompatible")[^\n]*\n?)+'}
test_array-6_553:
  build:
    files: compilers/gcc/./gcc.dg/array-6.c
    sources: {binary: array-6.s, cflags: ' -S'}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("(non-static)|(near
          initialization)")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("(non-static)|(near
          initialization)")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("(non-static)|(initialization)")[^\n]*\n?)+'}
test_array-7_554:
  build:
    files: compilers/gcc/./gcc.dg/array-7.c
    sources: {binary: array-7.s, cflags: ' -S'}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          type has incomplete element type")[^\n]*\n?)+'}
test_array-8_555:
  build:
    files: compilers/gcc/./gcc.dg/array-8.c
    sources: {binary: array-8.s, cflags: -std=gnu89 -S}
  group: GRPSERIAL
  validate:
    match:
      L38: {expect: true, expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("subscripted
          value is neither array nor pointer nor vector")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          subscript is not an integer")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          subscript is not an integer")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("subscripted
          value is pointer to function")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("subscripted
          value is pointer to function")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("dereferencing
          \''void \\\\*\'' pointer")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("dereferencing
          \''void \\\\*\'' pointer")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of undefined type \''struct si\''")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("dereferencing
          pointer to incomplete type")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          use of undefined type \''struct si\''")[^\n]*\n?)+'}
test_array-9_556:
  build:
    files: compilers/gcc/./gcc.dg/array-9.c
    sources: {binary: array-9.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
  validate:
    match:
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          of voids")[^\n]*\n?)+'}
test_array-const-1_557:
  build:
    files: compilers/gcc/./gcc.dg/array-const-1.c
    sources: {binary: array-const-1.s, cflags: -std=gnu99 -S}
  group: GRPSERIAL
test_array-const-2_558:
  build:
    files: compilers/gcc/./gcc.dg/array-const-2.c
    sources: {binary: array-const-2.s, cflags: -std=gnu99 -pedantic -S}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("array
          index in initializer is not an integer constant expression")[^\n]*\n?)+'}
test_array-const-3_559:
  build:
    files: compilers/gcc/./gcc.dg/array-const-3.c
    sources: {binary: array-const-3.s, cflags: -std=gnu99 -pedantic-errors -S}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          index in initializer is not an integer constant expression")[^\n]*\n?)+'}
test_array-init-1_560:
  build:
    files: compilers/gcc/./gcc.dg/array-init-1.c
    sources: {binary: array-init-1.s, cflags: -O2 -mtune=i686 -ffat-lto-objects -S}
  group: GRPSERIAL
test_array-init-2_561:
  build:
    files: compilers/gcc/./gcc.dg/array-init-2.c
    sources: {binary: ./array-init-2.exe, cflags: -O2}
  group: GRPSERIAL
  run: {cwd: .}
test_array-quals-1_562:
  build:
    files: compilers/gcc/./gcc.dg/array-quals-1.c
    sources: {binary: array-quals-1.s, cflags: -Wno-discarded-array-qualifiers -ffat-lto-objects
        -S}
  group: GRPSERIAL
test_array-quals-2_563:
  build:
    files: compilers/gcc/./gcc.dg/array-quals-2.c
    sources: {binary: array-quals-2.s, cflags: -pedantic -Wno-discarded-array-qualifiers
        -S}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+(:13:)[^\n]*[0-9]+: warning:[^\n]*("pointers
          to arrays with different qualifiers")[^\n]*\n?)+'}
test_asm-10_565:
  build:
    files: compilers/gcc/./gcc.dg/asm-10.c
    sources: {binary: asm-10.s, cflags: ' -S'}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          directly addressable")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          directly addressable")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          directly addressable")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not
          directly addressable")[^\n]*\n?)+'}
test_asm-1_564:
  build:
    files: compilers/gcc/./gcc.dg/asm-1.c
    sources: {binary: asm-1.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("lvalue")[^\n]*\n?)+'}
test_asm-2_566:
  build:
    files: compilers/gcc/./gcc.dg/asm-2.c
    sources: {binary: asm-2.s, cflags: -ffat-lto-objects -S}
  group: GRPSERIAL
test_asm-3_567:
  build:
    files: compilers/gcc/./gcc.dg/asm-3.c
    sources: {binary: asm-3.s, cflags: -ffat-lto-objects -S}
  group: GRPSERIAL
test_asm-4_568:
  build:
    files: compilers/gcc/./gcc.dg/asm-4.c
    sources: {binary: asm-4.s, cflags: -ffat-lto-objects -S}
  group: GRPSERIAL
test_asm-6_569:
  build:
    files: compilers/gcc/./gcc.dg/asm-6.c
    sources: {binary: asm-6.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
  validate:
    match:
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("duplicate
          asm operand")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undefined
          named operand")[^\n]*\n?)+'}
test_asm-7_570:
  build:
    files: compilers/gcc/./gcc.dg/asm-7.c
    sources: {binary: asm-7.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'}
test_asm-8_571:
  build:
    files: compilers/gcc/./gcc.dg/asm-8.c
    sources: {binary: asm-8.s, cflags: -O -Wall -S}
  group: GRPSERIAL
test_asm-9_572:
  build:
    files: compilers/gcc/./gcc.dg/asm-9.c
    sources: {binary: asm-9.s, cflags: -O -S}
  group: GRPSERIAL
test_asm-a_573:
  build:
    files: compilers/gcc/./gcc.dg/asm-a.c
    sources: {binary: asm-a.s, cflags: -O2 -S}
  group: GRPSERIAL
test_asm-b_574:
  build:
    files: compilers/gcc/./gcc.dg/asm-b.c
    sources: {binary: ./asm-b.exe, cflags: -O1}
  group: GRPSERIAL
  run: {cwd: .}
test_asm-fs-1_575:
  build:
    files: compilers/gcc/./gcc.dg/asm-fs-1.c
    sources: {binary: asm-fs-1.s, cflags: -w -ffunction-sections -fdata-sections -ffat-lto-objects
        -S}
  group: GRPSERIAL
test_asm-names_576:
  build:
    files: compilers/gcc/./gcc.dg/asm-names.c
    sources: {binary: asm-names.s, cflags: -fleading-underscore -ffat-lto-objects
        -S}
  group: GRPSERIAL
test_asm-pr24146_577:
  build:
    files: compilers/gcc/./gcc.dg/asm-pr24146.c
    sources: {binary: asm-pr24146.s, cflags: -ansi -pedantic-errors -ffat-lto-objects
        -S}
  group: GRPSERIAL
test_asm-qual-1_578:
  build:
    files: compilers/gcc/./gcc.dg/asm-qual-1.c
    sources: {binary: asm-qual-1.s, cflags: -std=gnu99 -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("const
          qualifier ignored on asm")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("restrict
          qualifier ignored on asm")[^\n]*\n?)+'}
test_asm-wide-1_579:
  build:
    files: compilers/gcc/./gcc.dg/asm-wide-1.c
    sources: {binary: asm-wide-1.s, cflags: ' -S'}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("8:wide
          string literal in \''asm\''")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("8:wide
          string literal in \''asm\''")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("8:wide
          string literal in \''asm\''")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("8:wide
          string literal in \''asm\''")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("8:wide
          string literal in \''asm\''")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("8:wide
          string literal in \''asm\''")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("8:wide
          string literal in \''asm\''")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("output")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("output")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("output")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("14:wide
          string literal in \''asm\''")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("6:wide
          string literal in \''asm\''")[^\n]*\n?)+'}
test_asr_div1_580:
  build:
    files: compilers/gcc/./gcc.dg/asr_div1.c
    sources: {binary: ./asr_div1.exe, cflags: -O2 -fdump-rtl-combine-all -ffat-lto-objects}
  group: GRPSERIAL
  run: {cwd: .}
test_assign-warn-1_581:
  build:
    files: compilers/gcc/./gcc.dg/assign-warn-1.c
    sources: {binary: assign-warn-1.s, cflags: -pedantic -ftrack-macro-expansion=0
        -S}
  group: GRPSERIAL
  validate:
    match:
      L100: {expect: true, expr: '(^|\n)([^\n]+(:100:)[^\n]*[0-9]+: warning:[^\n]*("passing
          argument 1 of \''ciibFp.x\'' makes pointer from integer without a cast")[^\n]*\n?)+'}
      L101: {expect: true, expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("assignment
          makes pointer from integer without a cast")[^\n]*\n?)+'}
      L102: {expect: true, expr: '(^|\n)([^\n]+(:102:)[^\n]*[0-9]+: warning:[^\n]*("initialization
          makes pointer from integer without a cast")[^\n]*\n?)+'}
      L103: {expect: true, expr: '(^|\n)([^\n]+(:103:)[^\n]*[0-9]+: warning:[^\n]*("return
          makes pointer from integer without a cast")[^\n]*\n?)+'}
      L105: {expect: true, expr: '(^|\n)([^\n]+(:105:)[^\n]*[0-9]+: warning:[^\n]*("passing
          argument 1 of \''iicaF\'' makes integer from pointer without a cast")[^\n]*\n?)+'}
      L106: {expect: true, expr: '(^|\n)([^\n]+(:106:)[^\n]*[0-9]+: warning:[^\n]*("passing
          argument 1 of \''iicbFp.x\'' makes integer from pointer without a cast")[^\n]*\n?)+'}
      L107: {expect: true, expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("assignment
          makes integer from pointer without a cast")[^\n]*\n?)+'}
      L108: {expect: true, expr: '(^|\n)([^\n]+(:108:)[^\n]*[0-9]+: warning:[^\n]*("initialization
          makes integer from pointer without a cast")[^\n]*\n?)+'}
      L109: {expect: true, expr: '(^|\n)([^\n]+(:109:)[^\n]*[0-9]+: warning:[^\n]*("return
          makes integer from pointer without a cast")[^\n]*\n?)+'}
      L113: {expect: true, expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          type for argument 1 of \''striaF\''")[^\n]*\n?)+'}
      L114: {expect: true, expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          type for argument 1 of \''stribFp.x\''")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning to type \''struct s\'' from type \''int\''")[^\n]*\n?)+'}
      L116: {expect: true, expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          initializer")[^\n]*\n?)+'}
      L117: {expect: true, expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when returning type \''int\'' but \''struct s\'' was expected")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          type for argument 1 of \''istraF\''")[^\n]*\n?)+'}
      L121: {expect: true, expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          type for argument 1 of \''istrbFp.x\''")[^\n]*\n?)+'}
      L123: {expect: true, expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning to type \''int\'' from type \''struct s\''")[^\n]*\n?)+'}
      L124: {expect: true, expr: '(^|\n)([^\n]+:124:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when initializing type \''int\'' using type \''struct s\''")[^\n]*\n?)+'}
      L125: {expect: true, expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when returning type \''struct s\'' but \''int\'' was expected")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("passing
          argument 1 of \''fqaF\'' makes \''__attribute__..noreturn..\'' qualified
          function pointer from unqualified")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("passing
          argument 1 of \''fqbFp.x\'' makes \''__attribute__..noreturn..\'' qualified
          function pointer from unqualified")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("assignment
          makes \''__attribute__..noreturn..\'' qualified function pointer from unqualified")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("initialization
          makes \''__attribute__..noreturn..\'' qualified function pointer from unqualified")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+(:19:)[^\n]*[0-9]+: warning:[^\n]*("return
          makes \''__attribute__..noreturn..\'' qualified function pointer from unqualified")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("passing
          argument 1 of \''qaF\'' discards \''const\'' qualifier from pointer target
          type")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("passing
          argument 1 of \''qbFp.x\'' discards \''const\'' qualifier from pointer target
          type")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("assignment
          discards \''const\'' qualifier from pointer target type")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("initialization
          discards \''const\'' qualifier from pointer target type")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("return
          discards \''const\'' qualifier from pointer target type")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C forbids passing argument 1 of \''fdaF\'' between function pointer and
          \''void \\\\*\''")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C forbids passing argument 1 of \''fdbFp.x\'' between function pointer and
          \''void \\\\*\''")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C forbids assignment between function pointer and \''void \\\\*\''")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C forbids initialization between function pointer and \''void \\\\*\''")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C forbids return between function pointer and \''void \\\\*\''")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C forbids passing argument 1 of \''dfaF\'' between function pointer and
          \''void \\\\*\''")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C forbids passing argument 1 of \''dfbFp.x\'' between function pointer and
          \''void \\\\*\''")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C forbids assignment between function pointer and \''void \\\\*\''")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+(:48:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C forbids initialization between function pointer and \''void \\\\*\''")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+(:49:)[^\n]*[0-9]+: warning:[^\n]*("ISO
          C forbids return between function pointer and \''void \\\\*\''")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("pointer
          targets in passing argument 1 of \''suaF\'' differ in signedness")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("pointer
          targets in passing argument 1 of \''subFp.x\'' differ in signedness")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("pointer
          targets in assignment differ in signedness")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("pointer
          targets in initialization differ in signedness")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("pointer
          targets in return differ in signedness")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("pointer
          targets in passing argument 1 of \''usaF\'' differ in signedness")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("pointer
          targets in passing argument 1 of \''usbFp.x\'' differ in signedness")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+(:59:)[^\n]*[0-9]+: warning:[^\n]*("pointer
          targets in assignment differ in signedness")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("pointer
          targets in initialization differ in signedness")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("pointer
          targets in return differ in signedness")[^\n]*\n?)+'}
      L63: {expect: true, expr: '(^|\n)([^\n]+(:63:)[^\n]*[0-9]+: warning:[^\n]*("pointer
          targets in passing argument 1 of \''cuaF\'' differ in signedness")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("pointer
          targets in passing argument 1 of \''cubFp.x\'' differ in signedness")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("pointer
          targets in assignment differ in signedness")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("pointer
          targets in initialization differ in signedness")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("pointer
          targets in return differ in signedness")[^\n]*\n?)+'}
      L69: {expect: true, expr: '(^|\n)([^\n]+(:69:)[^\n]*[0-9]+: warning:[^\n]*("pointer
          targets in passing argument 1 of \''ucaF\'' differ in signedness")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+(:70:)[^\n]*[0-9]+: warning:[^\n]*("pointer
          targets in passing argument 1 of \''ucbFp.x\'' differ in signedness")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("pointer
          targets in assignment differ in signedness")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("pointer
          targets in initialization differ in signedness")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+(:73:)[^\n]*[0-9]+: warning:[^\n]*("pointer
          targets in return differ in signedness")[^\n]*\n?)+'}
      L75: {expect: true, expr: '(^|\n)([^\n]+(:75:)[^\n]*[0-9]+: warning:[^\n]*("pointer
          targets in passing argument 1 of \''csaF\'' differ in signedness")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("pointer
          targets in passing argument 1 of \''csbFp.x\'' differ in signedness")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+(:77:)[^\n]*[0-9]+: warning:[^\n]*("pointer
          targets in assignment differ in signedness")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("pointer
          targets in initialization differ in signedness")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+(:79:)[^\n]*[0-9]+: warning:[^\n]*("pointer
          targets in return differ in signedness")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("pointer
          targets in passing argument 1 of \''scaF\'' differ in signedness")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("pointer
          targets in passing argument 1 of \''scbFp.x\'' differ in signedness")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+(:83:)[^\n]*[0-9]+: warning:[^\n]*("pointer
          targets in assignment differ in signedness")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("pointer
          targets in initialization differ in signedness")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("pointer
          targets in return differ in signedness")[^\n]*\n?)+'}
      L87: {expect: true, expr: '(^|\n)([^\n]+(:87:)[^\n]*[0-9]+: warning:[^\n]*("passing
          argument 1 of \''ciaF\'' from incompatible pointer type")[^\n]*\n?)+'}
      L88: {expect: true, expr: '(^|\n)([^\n]+(:88:)[^\n]*[0-9]+: warning:[^\n]*("passing
          argument 1 of \''cibFp.x\'' from incompatible pointer type")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("assignment
          from incompatible pointer type")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("initialization
          from incompatible pointer type")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("return
          from incompatible pointer type")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("passing
          argument 1 of \''icaF\'' from incompatible pointer type")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("passing
          argument 1 of \''icbFp.x\'' from incompatible pointer type")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("assignment
          from incompatible pointer type")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("initialization
          from incompatible pointer type")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("return
          from incompatible pointer type")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("passing
          argument 1 of \''ciiaF\'' makes pointer from integer without a cast")[^\n]*\n?)+'}
test_assign-warn-2_582:
  build:
    files: compilers/gcc/./gcc.dg/assign-warn-2.c
    sources: {binary: assign-warn-2.s, cflags: -pedantic-errors -ftrack-macro-expansion=0
        -S}
  group: GRPSERIAL
  validate:
    match:
      L100: {expect: true, expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("passing
          argument 1 of \''ciiaF\'' makes pointer from integer without a cast")[^\n]*\n?)+'}
      L101: {expect: true, expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("passing
          argument 1 of \''ciibFp.x\'' makes pointer from integer without a cast")[^\n]*\n?)+'}
      L102: {expect: true, expr: '(^|\n)([^\n]+:102:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assignment
          makes pointer from integer without a cast")[^\n]*\n?)+'}
      L103: {expect: true, expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initialization
          makes pointer from integer without a cast")[^\n]*\n?)+'}
      L104: {expect: true, expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("return
          makes pointer from integer without a cast")[^\n]*\n?)+'}
      L106: {expect: true, expr: '(^|\n)([^\n]+:106:[^\n]*[0-9]+: (fatal )?error:[^\n]*("passing
          argument 1 of \''iicaF\'' makes integer from pointer without a cast")[^\n]*\n?)+'}
      L107: {expect: true, expr: '(^|\n)([^\n]+:107:[^\n]*[0-9]+: (fatal )?error:[^\n]*("passing
          argument 1 of \''iicbFp.x\'' makes integer from pointer without a cast")[^\n]*\n?)+'}
      L108: {expect: true, expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assignment
          makes integer from pointer without a cast")[^\n]*\n?)+'}
      L109: {expect: true, expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initialization
          makes integer from pointer without a cast")[^\n]*\n?)+'}
      L110: {expect: true, expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("return
          makes integer from pointer without a cast")[^\n]*\n?)+'}
      L114: {expect: true, expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          type for argument 1 of \''striaF\''")[^\n]*\n?)+'}
      L115: {expect: true, expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          type for argument 1 of \''stribFp.x\''")[^\n]*\n?)+'}
      L116: {expect: true, expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning to type \''struct s\'' from type \''int\''")[^\n]*\n?)+'}
      L117: {expect: true, expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          initializer")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when returning type \''int\'' but \''struct s\'' was expected")[^\n]*\n?)+'}
      L120: {expect: true, expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          type for argument 1 of \''istraF\''")[^\n]*\n?)+'}
      L121: {expect: true, expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          type for argument 1 of \''istrbFp.x\''")[^\n]*\n?)+'}
      L122: {expect: true, expr: '(^|\n)([^\n]+:122:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when assigning to type \''int\'' from type \''struct s\''")[^\n]*\n?)+'}
      L123: {expect: true, expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when initializing type \''int\'' using type \''struct s\''")[^\n]*\n?)+'}
      L124: {expect: true, expr: '(^|\n)([^\n]+:124:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incompatible
          types when returning type \''struct s\'' but \''int\'' was expected")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("passing
          argument 1 of \''fqaF\'' makes \''__attribute__..noreturn..\'' qualified
          function pointer from unqualified")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("passing
          argument 1 of \''fqbFp.x\'' makes \''__attribute__..noreturn..\'' qualified
          function pointer from unqualified")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assignment
          makes \''__attribute__..noreturn..\'' qualified function pointer from unqualified")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initialization
          makes \''__attribute__..noreturn..\'' qualified function pointer from unqualified")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("return
          makes \''__attribute__..noreturn..\'' qualified function pointer from unqualified")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("passing
          argument 1 of \''qaF\'' discards \''const\'' qualifier from pointer target
          type")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("passing
          argument 1 of \''qbFp.x\'' discards \''const\'' qualifier from pointer target
          type")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assignment
          discards \''const\'' qualifier from pointer target type")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initialization
          discards \''const\'' qualifier from pointer target type")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("return
          discards \''const\'' qualifier from pointer target type")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C forbids passing argument 1 of \''fdaF\'' between function pointer and
          \''void \\\\*\''")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C forbids passing argument 1 of \''fdbFp.x\'' between function pointer and
          \''void \\\\*\''")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C forbids assignment between function pointer and \''void \\\\*\''")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C forbids initialization between function pointer and \''void \\\\*\''")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C forbids return between function pointer and \''void \\\\*\''")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C forbids passing argument 1 of \''dfaF\'' between function pointer and
          \''void \\\\*\''")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C forbids passing argument 1 of \''dfbFp.x\'' between function pointer and
          \''void \\\\*\''")[^\n]*\n?)+'}
      L48: {expect: true, expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C forbids assignment between function pointer and \''void \\\\*\''")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C forbids initialization between function pointer and \''void \\\\*\''")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ISO
          C forbids return between function pointer and \''void \\\\*\''")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pointer
          targets in passing argument 1 of \''suaF\'' differ in signedness")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pointer
          targets in passing argument 1 of \''subFp.x\'' differ in signedness")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pointer
          targets in assignment differ in signedness")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pointer
          targets in initialization differ in signedness")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pointer
          targets in return differ in signedness")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pointer
          targets in passing argument 1 of \''usaF\'' differ in signedness")[^\n]*\n?)+'}
      L59: {expect: true, expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pointer
          targets in passing argument 1 of \''usbFp.x\'' differ in signedness")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pointer
          targets in assignment differ in signedness")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pointer
          targets in initialization differ in signedness")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pointer
          targets in return differ in signedness")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pointer
          targets in passing argument 1 of \''cuaF\'' differ in signedness")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pointer
          targets in passing argument 1 of \''cubFp.x\'' differ in signedness")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pointer
          targets in assignment differ in signedness")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pointer
          targets in initialization differ in signedness")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pointer
          targets in return differ in signedness")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pointer
          targets in passing argument 1 of \''ucaF\'' differ in signedness")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pointer
          targets in passing argument 1 of \''ucbFp.x\'' differ in signedness")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pointer
          targets in assignment differ in signedness")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pointer
          targets in initialization differ in signedness")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pointer
          targets in return differ in signedness")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pointer
          targets in passing argument 1 of \''csaF\'' differ in signedness")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pointer
          targets in passing argument 1 of \''csbFp.x\'' differ in signedness")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pointer
          targets in assignment differ in signedness")[^\n]*\n?)+'}
      L79: {expect: true, expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pointer
          targets in initialization differ in signedness")[^\n]*\n?)+'}
      L80: {expect: true, expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pointer
          targets in return differ in signedness")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pointer
          targets in passing argument 1 of \''scaF\'' differ in signedness")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pointer
          targets in passing argument 1 of \''scbFp.x\'' differ in signedness")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pointer
          targets in assignment differ in signedness")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pointer
          targets in initialization differ in signedness")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("pointer
          targets in return differ in signedness")[^\n]*\n?)+'}
      L88: {expect: true, expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("passing
          argument 1 of \''ciaF\'' from incompatible pointer type")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("passing
          argument 1 of \''cibFp.x\'' from incompatible pointer type")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assignment
          from incompatible pointer type")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initialization
          from incompatible pointer type")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("return
          from incompatible pointer type")[^\n]*\n?)+'}
      L94: {expect: true, expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("passing
          argument 1 of \''icaF\'' from incompatible pointer type")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("passing
          argument 1 of \''icbFp.x\'' from incompatible pointer type")[^\n]*\n?)+'}
      L96: {expect: true, expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("assignment
          from incompatible pointer type")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initialization
          from incompatible pointer type")[^\n]*\n?)+'}
      L98: {expect: true, expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("return
          from incompatible pointer type")[^\n]*\n?)+'}
test_assign-warn-3_583:
  build:
    files: compilers/gcc/./gcc.dg/assign-warn-3.c
    sources: {binary: assign-warn-3.s, cflags: -O3 -std=c99 -pedantic-errors -S}
  group: GRPSERIAL
test_atomic-compare-exchange-1_584:
  build:
    files: compilers/gcc/./gcc.dg/atomic-compare-exchange-1.c
    sources: {binary: ./atomic-compare-exchange-1.exe, cflags: -ansi -pedantic-errors}
  group: GRPSERIAL
  run: {cwd: .}
test_atomic-compare-exchange-2_585:
  build:
    files: compilers/gcc/./gcc.dg/atomic-compare-exchange-2.c
    sources: {binary: ./atomic-compare-exchange-2.exe, cflags: -ansi -pedantic-errors}
  group: GRPSERIAL
  run: {cwd: .}
test_atomic-compare-exchange-3_586:
  build:
    files: compilers/gcc/./gcc.dg/atomic-compare-exchange-3.c
    sources: {binary: ./atomic-compare-exchange-3.exe, cflags: -ansi -pedantic-errors}
  group: GRPSERIAL
  run: {cwd: .}
test_atomic-exchange-1_587:
  build:
    files: compilers/gcc/./gcc.dg/atomic-exchange-1.c
    sources: {binary: ./atomic-exchange-1.exe, cflags: -ansi -pedantic-errors}
  group: GRPSERIAL
  run: {cwd: .}
test_atomic-exchange-2_588:
  build:
    files: compilers/gcc/./gcc.dg/atomic-exchange-2.c
    sources: {binary: ./atomic-exchange-2.exe, cflags: -ansi -pedantic-errors}
  group: GRPSERIAL
  run: {cwd: .}
test_atomic-exchange-3_589:
  build:
    files: compilers/gcc/./gcc.dg/atomic-exchange-3.c
    sources: {binary: ./atomic-exchange-3.exe, cflags: -ansi -pedantic-errors}
  group: GRPSERIAL
  run: {cwd: .}
test_atomic-fence_590:
  build:
    files: compilers/gcc/./gcc.dg/atomic-fence.c
    sources: {binary: ./atomic-fence.exe, cflags: -ansi -pedantic-errors}
  group: GRPSERIAL
  run: {cwd: .}
test_atomic-fetch-bool_591:
  build:
    files: compilers/gcc/./gcc.dg/atomic-fetch-bool.c
    sources: {binary: atomic-fetch-bool.s, cflags: -pedantic-errors -std=c11 -S}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("operand
          type ._Atomic _Bool \\\\*. is incompatible with argument 1 of .__atomic_fetch_add.")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("operand
          type ._Atomic _Bool \\\\*. is incompatible with argument 1 of .__atomic_fetch_sub.")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("operand
          type ._Atomic _Bool \\\\*. is incompatible with argument 1 of .__atomic_fetch_and.")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("operand
          type ._Atomic _Bool \\\\*. is incompatible with argument 1 of .__atomic_fetch_xor.")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("operand
          type ._Atomic _Bool \\\\*. is incompatible with argument 1 of .__atomic_fetch_or.")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("operand
          type ._Atomic _Bool \\\\*. is incompatible with argument 1 of .__atomic_fetch_nand.")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("operand
          type ._Atomic _Bool \\\\*. is incompatible with argument 1 of .__atomic_add_fetch.")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("operand
          type ._Atomic _Bool \\\\*. is incompatible with argument 1 of .__atomic_sub_fetch.")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("operand
          type ._Atomic _Bool \\\\*. is incompatible with argument 1 of .__atomic_and_fetch.")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("operand
          type ._Atomic _Bool \\\\*. is incompatible with argument 1 of .__atomic_xor_fetch.")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("operand
          type ._Atomic _Bool \\\\*. is incompatible with argument 1 of .__atomic_or_fetch.")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("operand
          type ._Atomic _Bool \\\\*. is incompatible with argument 1 of .__atomic_nand_fetch.")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("operand
          type ._Bool \\\\*. is incompatible with argument 1 of .__atomic_fetch_add.")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("operand
          type ._Bool \\\\*. is incompatible with argument 1 of .__atomic_fetch_sub.")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("operand
          type ._Bool \\\\*. is incompatible with argument 1 of .__atomic_fetch_and.")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("operand
          type ._Bool \\\\*. is incompatible with argument 1 of .__atomic_fetch_xor.")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("operand
          type ._Bool \\\\*. is incompatible with argument 1 of .__atomic_fetch_or.")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("operand
          type ._Bool \\\\*. is incompatible with argument 1 of .__atomic_fetch_nand.")[^\n]*\n?)+'}
      L49: {expect: true, expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("operand
          type ._Bool \\\\*. is incompatible with argument 1 of .__atomic_add_fetch.")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("operand
          type ._Bool \\\\*. is incompatible with argument 1 of .__atomic_sub_fetch.")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("operand
          type ._Bool \\\\*. is incompatible with argument 1 of .__atomic_and_fetch.")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("operand
          type ._Bool \\\\*. is incompatible with argument 1 of .__atomic_xor_fetch.")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("operand
          type ._Bool \\\\*. is incompatible with argument 1 of .__atomic_or_fetch.")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("operand
          type ._Bool \\\\*. is incompatible with argument 1 of .__atomic_nand_fetch.")[^\n]*\n?)+'}
test_atomic-flag_592:
  build:
    files: compilers/gcc/./gcc.dg/atomic-flag.c
    sources: {binary: ./atomic-flag.exe, cflags: -ansi -pedantic-errors}
  group: GRPSERIAL
  run: {cwd: .}
test_atomic-generic-aux_593:
  build:
    files: compilers/gcc/./gcc.dg/atomic-generic-aux.c
    sources: {binary: atomic-generic-aux.s, cflags: -w -S}
  group: GRPSERIAL
test_atomic-generic_594:
  build:
    files: compilers/gcc/./gcc.dg/atomic-generic.c
    sources: {binary: ./atomic-generic.exe, cflags: -w}
  group: GRPSERIAL
  run: {cwd: .}
test_atomic-invalid-2_595:
  build:
    files: compilers/gcc/./gcc.dg/atomic-invalid-2.c
    sources: {binary: atomic-invalid-2.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
  validate:
    match:
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          memory model")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          memory model")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          memory model")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          memory model")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          memory model")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          failure memory")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          failure memory")[^\n]*\n?)+'}
      L43: {expect: true, expr: '(^|\n)([^\n]+(:43:)[^\n]*[0-9]+: warning:[^\n]*("failure
          memory model cannot be stronger")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          failure memory")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          failure memory")[^\n]*\n?)+'}
      L47: {expect: true, expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("failure
          memory model cannot be stronger")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          memory model")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          memory model")[^\n]*\n?)+'}
test_atomic-invalid_596:
  build:
    files: compilers/gcc/./gcc.dg/atomic-invalid.c
    sources: {binary: atomic-invalid.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("failure
          memory model cannot be stronger")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          failure memory")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          failure memory")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          memory model")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          memory model")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          memory model")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          memory model")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          memory model")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non-constant
          argument")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          memory model")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          memory model")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          memory model")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          memory model")[^\n]*\n?)+'}
test_atomic-load-1_597:
  build:
    files: compilers/gcc/./gcc.dg/atomic-load-1.c
    sources: {binary: ./atomic-load-1.exe, cflags: -ansi -pedantic-errors}
  group: GRPSERIAL
  run: {cwd: .}
test_atomic-load-2_598:
  build:
    files: compilers/gcc/./gcc.dg/atomic-load-2.c
    sources: {binary: ./atomic-load-2.exe, cflags: -ansi -pedantic-errors}
  group: GRPSERIAL
  run: {cwd: .}
test_atomic-load-3_599:
  build:
    files: compilers/gcc/./gcc.dg/atomic-load-3.c
    sources: {binary: ./atomic-load-3.exe, cflags: -ansi -pedantic-errors}
  group: GRPSERIAL
  run: {cwd: .}
test_atomic-lockfree-aux_600:
  build:
    files: compilers/gcc/./gcc.dg/atomic-lockfree-aux.c
    sources: {binary: atomic-lockfree-aux.s, cflags: -w -S}
  group: GRPSERIAL
test_atomic-lockfree_601:
  build:
    files: compilers/gcc/./gcc.dg/atomic-lockfree.c
    sources: {binary: ./atomic-lockfree.exe, cflags: -w}
  group: GRPSERIAL
  run: {cwd: .}
test_atomic-noinline-aux_602:
  build:
    files: compilers/gcc/./gcc.dg/atomic-noinline-aux.c
    sources: {binary: atomic-noinline-aux.s, cflags: -w -S}
  group: GRPSERIAL
test_atomic-noinline_603:
  build:
    files: compilers/gcc/./gcc.dg/atomic-noinline.c
    sources: {binary: ./atomic-noinline.exe, cflags: -w -fno-inline-atomics}
  group: GRPSERIAL
  run: {cwd: .}
test_atomic-op-1_604:
  build:
    files: compilers/gcc/./gcc.dg/atomic-op-1.c
    sources: {binary: ./atomic-op-1.exe, cflags: -ansi -pedantic-errors}
  group: GRPSERIAL
  run: {cwd: .}
test_atomic-op-2_605:
  build:
    files: compilers/gcc/./gcc.dg/atomic-op-2.c
    sources: {binary: ./atomic-op-2.exe, cflags: -ansi -pedantic-errors}
  group: GRPSERIAL
  run: {cwd: .}
test_atomic-op-3_606:
  build:
    files: compilers/gcc/./gcc.dg/atomic-op-3.c
    sources: {binary: ./atomic-op-3.exe, cflags: -ansi -pedantic-errors}
  group: GRPSERIAL
  run: {cwd: .}
test_atomic-op-6_607:
  build:
    files: compilers/gcc/./gcc.dg/atomic-op-6.c
    sources: {binary: atomic-op-6.s, cflags: -Wall -Wextra -S}
  group: GRPSERIAL
test_atomic-op-optimize_608:
  build:
    files: compilers/gcc/./gcc.dg/atomic-op-optimize.c
    sources: {binary: atomic-op-optimize.s, cflags: -ansi -pedantic-errors -ffat-lto-objects
        -S}
  group: GRPSERIAL
test_atomic-param_609:
  build:
    files: compilers/gcc/./gcc.dg/atomic-param.c
    sources: {binary: atomic-param.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          few arguments")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("too
          many arguments")[^\n]*\n?)+'}
test_atomic-pr51256_610:
  build:
    files: compilers/gcc/./gcc.dg/atomic-pr51256.c
    sources: {binary: atomic-pr51256.s, cflags: -ansi -S}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be a pointer to a constant size")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be a pointer to a nonzero size")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("incorrect
          number of arguments")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be a pointer type")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("size
          mismatch in argument")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+(:41:)[^\n]*[0-9]+: warning:[^\n]*("invalid
          memory model argument")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("non-integer
          memory model argument")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must
          be a non-void pointer type")[^\n]*\n?)+'}
test_atomic-store-1_611:
  build:
    files: compilers/gcc/./gcc.dg/atomic-store-1.c
    sources: {binary: ./atomic-store-1.exe, cflags: -ansi -pedantic-errors}
  group: GRPSERIAL
  run: {cwd: .}
test_atomic-store-2_612:
  build:
    files: compilers/gcc/./gcc.dg/atomic-store-2.c
    sources: {binary: ./atomic-store-2.exe, cflags: -ansi -pedantic-errors}
  group: GRPSERIAL
  run: {cwd: .}
test_atomic-store-3_613:
  build:
    files: compilers/gcc/./gcc.dg/atomic-store-3.c
    sources: {binary: ./atomic-store-3.exe, cflags: -ansi -pedantic-errors}
  group: GRPSERIAL
  run: {cwd: .}
test_attr-alias-1_614:
  build:
    files: compilers/gcc/./gcc.dg/attr-alias-1.c
    sources: {binary: attr-alias-1.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'}
test_attr-alias-2_615:
  build:
    files: compilers/gcc/./gcc.dg/attr-alias-2.c
    sources: {binary: attr-alias-2.exe, cflags: -funit-at-a-time}
  group: GRPSERIAL
  run: {cwd: .}
test_attr-alias-3_616:
  build:
    files: compilers/gcc/./gcc.dg/attr-alias-3.c
    sources: {binary: attr-alias-3.exe, cflags: -O2 -fno-common}
  group: GRPSERIAL
  run: {cwd: .}
test_attr-alias-4_617:
  build:
    files: compilers/gcc/./gcc.dg/attr-alias-4.c
    sources: {binary: attr-alias-4.s, cflags: ' -S'}
  group: GRPSERIAL
  validate:
    match:
      L4: {expect: true, expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("ignored")[^\n]*\n?)+'}
test_attr-alias-5_618:
  build:
    files: compilers/gcc/./gcc.dg/attr-alias-5.c
    sources: {binary: attr-alias-5.s, cflags: -std=gnu99 -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undefined
          symbol \''\\\\\\\\U000000e9\''")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undefined
          symbol \''\\\\\\\\U0000ffff\''")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undefined
          symbol \''\\\\\\\\U000fffff\''")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undefined
          symbol \''\\\\\\\\U00ffffff\''")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undefined
          symbol \''\\\\\\\\U0fffffff\''")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undefined
          symbol \''\\\\\\\\241\''")[^\n]*\n?)+'}
test_attr-alloc_align-1_619:
  build:
    files: compilers/gcc/./gcc.dg/attr-alloc_align-1.c
    sources: {binary: attr-alloc_align-1.s, cflags: -O3 -S}
  group: GRPSERIAL
test_attr-alloc_align-2_620:
  build:
    files: compilers/gcc/./gcc.dg/attr-alloc_align-2.c
    sources: {binary: attr-alloc_align-2.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+(:10:)[^\n]*[0-9]+: warning:[^\n]*("outside
          range")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          number of arguments specified")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          number of arguments specified")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("outside
          range")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("outside
          range")[^\n]*\n?)+'}
test_attr-alloc_align-3_621:
  build:
    files: compilers/gcc/./gcc.dg/attr-alloc_align-3.c
    sources: {binary: attr-alloc_align-3.s, cflags: -O2 -fdump-tree-optimized -S}
  group: GRPSERIAL
test_attr-alloc_size-10_622:
  build:
    files: compilers/gcc/./gcc.dg/attr-alloc_size-10.c
    sources: {binary: attr-alloc_size-10.s, cflags: -O2 -Walloc-size-larger-than=12
        -S}
  group: GRPSERIAL
test_attr-alloc_size-11_623:
  build:
    files: compilers/gcc/./gcc.dg/attr-alloc_size-11.c
    sources: {binary: attr-alloc_size-11.s, cflags: -O2 -Walloc-size-larger-than=12
        -ftrack-macro-expansion=0 -S}
  group: GRPSERIAL
  validate:
    match:
      L50: {expect: true, expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[13, \\[0-9\\]+\\\\\\] exceeds maximum object size 12")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[13, \\[0-9\\]+\\\\\\] exceeds maximum object size 12")[^\n]*\n?)+'}
      L52: {expect: true, expr: '(^|\n)([^\n]+(:52:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[13, \\[0-9\\]+\\\\\\] exceeds maximum object size 12")[^\n]*\n?)+'}
      L53: {expect: true, expr: '(^|\n)([^\n]+(:53:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[13, \\[0-9\\]+\\\\\\] exceeds maximum object size 12")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[13, \\[0-9\\]+\\\\\\] exceeds maximum object size 12")[^\n]*\n?)+'}
      L55: {expect: true, expr: '(^|\n)([^\n]+(:55:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[13, \\[0-9\\]+\\\\\\] exceeds maximum object size 12")[^\n]*\n?)+'}
      L56: {expect: true, expr: '(^|\n)([^\n]+(:56:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[13, \\[0-9\\]+\\\\\\] exceeds maximum object size 12")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[13, \\[0-9\\]+\\\\\\] exceeds maximum object size 12")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[\\[0-9\\]+, \\[0-9\\]+\\\\\\] exceeds maximum object size
          12")[^\n]*\n?)+'}
      L61: {expect: true, expr: '(^|\n)([^\n]+(:61:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[-\\[0-9\\]+, 0\\\\\\] is negative")[^\n]*\n?)+'}
      L62: {expect: true, expr: '(^|\n)([^\n]+(:62:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[-\\[0-9\\]+, -1\\\\\\] is negative")[^\n]*\n?)+'}
      L64: {expect: true, expr: '(^|\n)([^\n]+(:64:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[13, \\[0-9\\]+\\\\\\] exceeds maximum object size 12")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[13, \\[0-9\\]+\\\\\\] exceeds maximum object size 12")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[13, \\[0-9\\]+\\\\\\] exceeds maximum object size 12")[^\n]*\n?)+'}
      L68: {expect: true, expr: '(^|\n)([^\n]+(:68:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[13, \\[0-9\\]+\\\\\\] exceeds maximum object size 12")[^\n]*\n?)+'}
      L69: {expect: true, expr: '(^|\n)([^\n]+(:69:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[13, \\[0-9\\]+\\\\\\] exceeds maximum object size 12")[^\n]*\n?)+'}
test_attr-alloc_size-2_624:
  build:
    files: compilers/gcc/./gcc.dg/attr-alloc_size-2.c
    sources: {binary: attr-alloc_size-2.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
  validate:
    match:
      L3: {expect: true, expr: '(^|\n)([^\n]+(:3:)[^\n]*[0-9]+: warning:[^\n]*("outside
          range")[^\n]*\n?)+'}
test_attr-alloc_size-3_625:
  build:
    files: compilers/gcc/./gcc.dg/attr-alloc_size-3.c
    sources: {binary: attr-alloc_size-3.s, cflags: -O2 -Wall -S}
  group: GRPSERIAL
  validate:
    match:
      L175: {expect: true, expr: '(^|\n)([^\n]+(:175:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value .-\\[0-9\\]+. is negative")[^\n]*\n?)+'}
      L176: {expect: true, expr: '(^|\n)([^\n]+(:176:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value .-1. is negative")[^\n]*\n?)+'}
      L181: {expect: true, expr: '(^|\n)([^\n]+(:181:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value .-\\[0-9\\]+. is negative")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+(:182:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value .-\\[0-9\\]+. is negative")[^\n]*\n?)+'}
      L183: {expect: true, expr: '(^|\n)([^\n]+(:183:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value .-1. is negative")[^\n]*\n?)+'}
      L184: {expect: true, expr: '(^|\n)([^\n]+(:184:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value .-1. is negative")[^\n]*\n?)+'}
      L196: {expect: true, expr: '(^|\n)([^\n]+(:196:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[-\\[0-9\\]+, -\\[0-9\\]+\\\\\\] is negative")[^\n]*\n?)+'}
      L197: {expect: true, expr: '(^|\n)([^\n]+(:197:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[-\\[0-9\\]+, 0\\\\\\] is negative")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+(:198:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[-1, 0\\\\\\] is negative")[^\n]*\n?)+'}
      L207: {expect: true, expr: '(^|\n)([^\n]+(:207:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[-\\[0-9\\]+, -\\[0-9\\]+\\\\\\] is negative")[^\n]*\n?)+'}
      L208: {expect: true, expr: '(^|\n)([^\n]+(:208:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 range \\\\\\[-\\[0-9\\]+, -\\[0-9\\]+\\\\\\] is negative")[^\n]*\n?)+'}
      L209: {expect: true, expr: '(^|\n)([^\n]+(:209:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[-\\[0-9\\]+, -\\[0-9\\]+\\\\\\] is negative")[^\n]*\n?)+'}
      L210: {expect: true, expr: '(^|\n)([^\n]+(:210:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 range \\\\\\[-\\[0-9\\]+, -\\[0-9\\]+\\\\\\] is negative")[^\n]*\n?)+'}
      L211: {expect: true, expr: '(^|\n)([^\n]+(:211:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[-\\[0-9\\]+, -\\[0-9\\]+\\\\\\] is negative")[^\n]*\n?)+'}
      L212: {expect: true, expr: '(^|\n)([^\n]+(:212:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value .-\\[0-9\\]+. is negative")[^\n]*\n?)+'}
      L213: {expect: true, expr: '(^|\n)([^\n]+(:213:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 range \\\\\\[-\\[0-9\\]+, -\\[0-9\\]+\\\\\\] is negative")[^\n]*\n?)+'}
      L214: {expect: true, expr: '(^|\n)([^\n]+(:214:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value .-\\[0-9\\]+. is negative")[^\n]*\n?)+'}
      L216: {expect: true, expr: '(^|\n)([^\n]+(:216:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[-\\[0-9\\]+, 0\\\\\\] is negative")[^\n]*\n?)+'}
      L217: {expect: true, expr: '(^|\n)([^\n]+(:217:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 range \\\\\\[-\\[0-9\\]+, 0\\\\\\] is negative")[^\n]*\n?)+'}
      L218: {expect: true, expr: '(^|\n)([^\n]+(:218:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[-\\[0-9\\]+, 0\\\\\\] is negative")[^\n]*\n?)+'}
      L219: {expect: true, expr: '(^|\n)([^\n]+(:219:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 range \\\\\\[-\\[0-9\\]+, 0\\\\\\] is negative")[^\n]*\n?)+'}
      L220: {expect: true, expr: '(^|\n)([^\n]+(:220:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[-\\[0-9\\]+, 0\\\\\\] is negative")[^\n]*\n?)+'}
      L221: {expect: true, expr: '(^|\n)([^\n]+(:221:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 range \\\\\\[-\\[0-9\\]+, 0\\\\\\] is negative")[^\n]*\n?)+'}
      L265: {expect: true, expr: '(^|\n)([^\n]+(:265:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value .-\\[0-9\\]+. is negative")[^\n]*\n?)+'}
      L266: {expect: true, expr: '(^|\n)([^\n]+(:266:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value .-1. is negative")[^\n]*\n?)+'}
      L280: {expect: true, expr: '(^|\n)([^\n]+(:280:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[-\\[0-9\\]+, -\\[0-9\\]+\\\\\\] is negative")[^\n]*\n?)+'}
      L281: {expect: true, expr: '(^|\n)([^\n]+(:281:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[-\\[0-9\\]+, 0\\\\\\] is negative")[^\n]*\n?)+'}
      L282: {expect: true, expr: '(^|\n)([^\n]+(:282:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[-1, 0\\\\\\] is negative")[^\n]*\n?)+'}
      L323: {expect: true, expr: '(^|\n)([^\n]+(:323:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value .-\\[0-9\\]+. is negative")[^\n]*\n?)+'}
      L324: {expect: true, expr: '(^|\n)([^\n]+(:324:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value .-1. is negative")[^\n]*\n?)+'}
      L338: {expect: true, expr: '(^|\n)([^\n]+(:338:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[-\\[0-9\\]+, -\\[0-9\\]+\\\\\\] is negative")[^\n]*\n?)+'}
      L339: {expect: true, expr: '(^|\n)([^\n]+(:339:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[-\\[0-9\\]+, 0\\\\\\] is negative")[^\n]*\n?)+'}
      L340: {expect: true, expr: '(^|\n)([^\n]+(:340:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[-1, 0\\\\\\] is negative")[^\n]*\n?)+'}
      L381: {expect: true, expr: '(^|\n)([^\n]+(:381:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value .-\\[0-9\\]+l*. is negative")[^\n]*\n?)+'}
      L382: {expect: true, expr: '(^|\n)([^\n]+(:382:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value .-1l*. is negative")[^\n]*\n?)+'}
      L396: {expect: true, expr: '(^|\n)([^\n]+(:396:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[-\\[0-9\\]+l*, -\\[0-9\\]+l*\\\\\\] is negative")[^\n]*\n?)+'}
      L397: {expect: true, expr: '(^|\n)([^\n]+(:397:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[-\\[0-9\\]+l*, 0l*\\\\\\] is negative")[^\n]*\n?)+'}
      L398: {expect: true, expr: '(^|\n)([^\n]+(:398:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[-1l*, 0l*\\\\\\] is negative")[^\n]*\n?)+'}
      L413: {expect: true, expr: '(^|\n)([^\n]+(:413:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value .\\[0-9\\]+. exceeds maximum object size \\[0-9\\]+")[^\n]*\n?)+'}
      L414: {expect: true, expr: '(^|\n)([^\n]+(:414:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value .\\[0-9\\]+. exceeds maximum object size \\[0-9\\]+")[^\n]*\n?)+'}
      L416: {expect: true, expr: '(^|\n)([^\n]+(:416:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value .\\[0-9\\]+. exceeds maximum object size \\[0-9\\]+")[^\n]*\n?)+'}
      L417: {expect: true, expr: '(^|\n)([^\n]+(:417:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value .\\[0-9\\]+. exceeds maximum object size \\[0-9\\]+")[^\n]*\n?)+'}
      L418: {expect: true, expr: '(^|\n)([^\n]+(:418:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value .\\[0-9\\]+. exceeds maximum object size \\[0-9\\]+")[^\n]*\n?)+'}
      L419: {expect: true, expr: '(^|\n)([^\n]+(:419:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value .\\[0-9\\]+. exceeds maximum object size \\[0-9\\]+")[^\n]*\n?)+'}
      L420: {expect: true, expr: '(^|\n)([^\n]+(:420:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value .\\[0-9\\]+. exceeds maximum object size \\[0-9\\]+")[^\n]*\n?)+'}
      L421: {expect: true, expr: '(^|\n)([^\n]+(:421:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value .\\[0-9\\]+. exceeds maximum object size \\[0-9\\]+")[^\n]*\n?)+'}
      L423: {expect: true, expr: '(^|\n)([^\n]+(:423:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value .\\[0-9\\]+. exceeds maximum object size \\[0-9\\]+")[^\n]*\n?)+'}
      L424: {expect: true, expr: '(^|\n)([^\n]+(:424:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value .\\[0-9\\]+. exceeds maximum object size \\[0-9\\]+")[^\n]*\n?)+'}
      L426: {expect: true, expr: '(^|\n)([^\n]+(:426:)[^\n]*[0-9]+: warning:[^\n]*("product
          .\\[0-9\\]+ \\\\* \\[0-9\\]+. of arguments 1 and 2 exceeds maximum object
          size \\[0-9\\]+")[^\n]*\n?)+'}
      L427: {expect: true, expr: '(^|\n)([^\n]+(:427:)[^\n]*[0-9]+: warning:[^\n]*("product
          .\\[0-9\\]+ \\\\* \\[0-9\\]+. of arguments 1 and 2 exceeds .SIZE_MAX.")[^\n]*\n?)+'}
      L448: {expect: true, expr: '(^|\n)([^\n]+(:448:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[\\[0-9\\]+, \\[0-9\\]+\\\\\\] exceeds maximum object size
          ")[^\n]*\n?)+'}
      L459: {expect: true, expr: '(^|\n)([^\n]+(:459:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value .\\[0-9\\]+. exceeds maximum object size ")[^\n]*\n?)+'}
      L463: {expect: true, expr: '(^|\n)([^\n]+(:463:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[\\[0-9\\]+, \\[0-9\\]+\\\\\\] exceeds maximum object size
          ")[^\n]*\n?)+'}
      L464: {expect: true, expr: '(^|\n)([^\n]+(:464:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 range \\\\\\[\\[0-9\\]+, \\[0-9\\]+\\\\\\] exceeds maximum object size
          ")[^\n]*\n?)+'}
      L465: {expect: true, expr: '(^|\n)([^\n]+(:465:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[\\[0-9\\]+, \\[0-9\\]+\\\\\\] exceeds maximum object size
          ")[^\n]*\n?)+'}
      L466: {expect: true, expr: '(^|\n)([^\n]+(:466:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 range \\\\\\[\\[0-9\\]+, \\[0-9\\]+\\\\\\] exceeds maximum object size
          ")[^\n]*\n?)+'}
test_attr-alloc_size-4_626:
  build:
    files: compilers/gcc/./gcc.dg/attr-alloc_size-4.c
    sources: {binary: attr-alloc_size-4.s, cflags: -O2 -Wall -Walloc-size-larger-than=1234
        -S}
  group: GRPSERIAL
  validate:
    match:
      L101: {expect: true, expr: '(^|\n)([^\n]+(:101:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[\\[0-9\\]+u?, \\[0-9\\]+u?\\\\\\] exceeds maximum object
          size 1234")[^\n]*\n?)+'}
      L112: {expect: true, expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value .-\\[0-9\\]+. is negative")[^\n]*\n?)+'}
      L113: {expect: true, expr: '(^|\n)([^\n]+(:113:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value .-1. is negative")[^\n]*\n?)+'}
      L118: {expect: true, expr: '(^|\n)([^\n]+(:118:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value .\\[0-9\\]+u?. exceeds maximum object size 1234")[^\n]*\n?)+'}
      L130: {expect: true, expr: '(^|\n)([^\n]+(:130:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[-2, -1\\\\\\] is negative")[^\n]*\n?)+'}
      L132: {expect: true, expr: '(^|\n)([^\n]+(:132:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[1235, 2345\\\\\\] exceeds maximum object size 1234")[^\n]*\n?)+'}
      L133: {expect: true, expr: '(^|\n)([^\n]+(:133:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[\\[0-9\\]+, \\[0-9\\]+\\\\\\] exceeds maximum object size
          1234")[^\n]*\n?)+'}
      L138: {expect: true, expr: '(^|\n)([^\n]+(:138:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[1235, \\[0-9\\]+\\\\\\] exceeds maximum object size 1234")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[1236, \\[0-9\\]+\\\\\\] exceeds maximum object size 1234")[^\n]*\n?)+'}
      L146: {expect: true, expr: '(^|\n)([^\n]+(:146:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[-\\[0-9\\]*, -1\\\\\\] is negative")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[-\\[0-9\\]*, 0\\\\\\] is negative")[^\n]*\n?)+'}
      L164: {expect: true, expr: '(^|\n)([^\n]+(:164:)[^\n]*[0-9]+: warning:[^\n]*("product
          .2 \\\\* 1234. of arguments 1 and 2 exceeds maximum object size \\[0-9\\]+")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("product
          .1234 \\\\* 1234. of arguments 1 and 2 exceeds maximum object size 1234")[^\n]*\n?)+'}
      L166: {expect: true, expr: '(^|\n)([^\n]+(:166:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value .1235. exceeds maximum object size 1234")[^\n]*\n?)+'}
      L167: {expect: true, expr: '(^|\n)([^\n]+(:167:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value .1235. exceeds maximum object size 1234")[^\n]*\n?)+'}
      L168: {expect: true, expr: '(^|\n)([^\n]+(:168:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value .\\[0-9\\]+. exceeds maximum object size 1234")[^\n]*\n?)+'}
      L169: {expect: true, expr: '(^|\n)([^\n]+(:169:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value .\\[0-9\\]+. exceeds maximum object size 1234")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[\\[0-9\\]+, \\[0-9\\]+\\\\\\] exceeds maximum object size
          ")[^\n]*\n?)+'}
      L196: {expect: true, expr: '(^|\n)([^\n]+(:196:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value .1235. exceeds maximum object size 1234")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+(:198:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[1235, 1236\\\\\\] exceeds maximum object size 1234")[^\n]*\n?)+'}
      L200: {expect: true, expr: '(^|\n)([^\n]+(:200:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[\\[0-9\\]+, \\[0-9\\]+\\\\\\] exceeds maximum object size
          ")[^\n]*\n?)+'}
      L201: {expect: true, expr: '(^|\n)([^\n]+(:201:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 range \\\\\\[\\[0-9\\]+, \\[0-9\\]+\\\\\\] exceeds maximum object size
          ")[^\n]*\n?)+'}
      L84: {expect: true, expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value .1235u?. exceeds maximum object size 1234")[^\n]*\n?)+'}
      L85: {expect: true, expr: '(^|\n)([^\n]+(:85:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value .\\[0-9\\]+u?. exceeds maximum object size 1234")[^\n]*\n?)+'}
      L86: {expect: true, expr: '(^|\n)([^\n]+(:86:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value .\\[0-9\\]+u?. exceeds maximum object size 1234")[^\n]*\n?)+'}
test_attr-alloc_size-5_627:
  build:
    files: compilers/gcc/./gcc.dg/attr-alloc_size-5.c
    sources: {binary: attr-alloc_size-5.s, cflags: -O2 -Wall -Walloc-zero -S}
  group: GRPSERIAL
  validate:
    match:
      L104: {expect: true, expr: '(^|\n)([^\n]+(:104:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value is zero")[^\n]*\n?)+'}
      L105: {expect: true, expr: '(^|\n)([^\n]+(:105:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value is zero")[^\n]*\n?)+'}
      L106: {expect: true, expr: '(^|\n)([^\n]+(:106:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value is zero")[^\n]*\n?)+'}
      L107: {expect: true, expr: '(^|\n)([^\n]+(:107:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value is zero")[^\n]*\n?)+'}
      L108: {expect: true, expr: '(^|\n)([^\n]+(:108:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value is zero")[^\n]*\n?)+'}
      L112: {expect: true, expr: '(^|\n)([^\n]+(:112:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value is zero")[^\n]*\n?)+'}
      L113: {expect: true, expr: '(^|\n)([^\n]+(:113:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value is zero")[^\n]*\n?)+'}
      L119: {expect: true, expr: '(^|\n)([^\n]+(:119:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value is zero")[^\n]*\n?)+'}
      L120: {expect: true, expr: '(^|\n)([^\n]+(:120:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value is zero")[^\n]*\n?)+'}
      L121: {expect: true, expr: '(^|\n)([^\n]+(:121:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value is zero")[^\n]*\n?)+'}
      L122: {expect: true, expr: '(^|\n)([^\n]+(:122:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value is zero")[^\n]*\n?)+'}
      L123: {expect: true, expr: '(^|\n)([^\n]+(:123:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value is zero")[^\n]*\n?)+'}
      L127: {expect: true, expr: '(^|\n)([^\n]+(:127:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value is zero")[^\n]*\n?)+'}
      L128: {expect: true, expr: '(^|\n)([^\n]+(:128:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value is zero")[^\n]*\n?)+'}
      L134: {expect: true, expr: '(^|\n)([^\n]+(:134:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value is zero")[^\n]*\n?)+'}
      L135: {expect: true, expr: '(^|\n)([^\n]+(:135:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value is zero")[^\n]*\n?)+'}
      L136: {expect: true, expr: '(^|\n)([^\n]+(:136:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value is zero")[^\n]*\n?)+'}
      L137: {expect: true, expr: '(^|\n)([^\n]+(:137:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value is zero")[^\n]*\n?)+'}
      L138: {expect: true, expr: '(^|\n)([^\n]+(:138:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value is zero")[^\n]*\n?)+'}
      L142: {expect: true, expr: '(^|\n)([^\n]+(:142:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value is zero")[^\n]*\n?)+'}
      L143: {expect: true, expr: '(^|\n)([^\n]+(:143:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value is zero")[^\n]*\n?)+'}
      L149: {expect: true, expr: '(^|\n)([^\n]+(:149:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value is zero")[^\n]*\n?)+'}
      L150: {expect: true, expr: '(^|\n)([^\n]+(:150:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value is zero")[^\n]*\n?)+'}
      L151: {expect: true, expr: '(^|\n)([^\n]+(:151:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value is zero")[^\n]*\n?)+'}
      L152: {expect: true, expr: '(^|\n)([^\n]+(:152:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value is zero")[^\n]*\n?)+'}
      L153: {expect: true, expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value is zero")[^\n]*\n?)+'}
      L157: {expect: true, expr: '(^|\n)([^\n]+(:157:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value is zero")[^\n]*\n?)+'}
      L158: {expect: true, expr: '(^|\n)([^\n]+(:158:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value is zero")[^\n]*\n?)+'}
      L164: {expect: true, expr: '(^|\n)([^\n]+(:164:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value is zero")[^\n]*\n?)+'}
      L165: {expect: true, expr: '(^|\n)([^\n]+(:165:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value is zero")[^\n]*\n?)+'}
      L166: {expect: true, expr: '(^|\n)([^\n]+(:166:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value is zero")[^\n]*\n?)+'}
      L167: {expect: true, expr: '(^|\n)([^\n]+(:167:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value is zero")[^\n]*\n?)+'}
      L168: {expect: true, expr: '(^|\n)([^\n]+(:168:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value is zero")[^\n]*\n?)+'}
      L172: {expect: true, expr: '(^|\n)([^\n]+(:172:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value is zero")[^\n]*\n?)+'}
      L173: {expect: true, expr: '(^|\n)([^\n]+(:173:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value is zero")[^\n]*\n?)+'}
      L179: {expect: true, expr: '(^|\n)([^\n]+(:179:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value is zero")[^\n]*\n?)+'}
      L180: {expect: true, expr: '(^|\n)([^\n]+(:180:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value is zero")[^\n]*\n?)+'}
      L181: {expect: true, expr: '(^|\n)([^\n]+(:181:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value is zero")[^\n]*\n?)+'}
      L182: {expect: true, expr: '(^|\n)([^\n]+(:182:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value is zero")[^\n]*\n?)+'}
      L183: {expect: true, expr: '(^|\n)([^\n]+(:183:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value is zero")[^\n]*\n?)+'}
      L187: {expect: true, expr: '(^|\n)([^\n]+(:187:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value is zero")[^\n]*\n?)+'}
      L188: {expect: true, expr: '(^|\n)([^\n]+(:188:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value is zero")[^\n]*\n?)+'}
      L194: {expect: true, expr: '(^|\n)([^\n]+(:194:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value is zero")[^\n]*\n?)+'}
      L195: {expect: true, expr: '(^|\n)([^\n]+(:195:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value is zero")[^\n]*\n?)+'}
      L196: {expect: true, expr: '(^|\n)([^\n]+(:196:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value is zero")[^\n]*\n?)+'}
      L197: {expect: true, expr: '(^|\n)([^\n]+(:197:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value is zero")[^\n]*\n?)+'}
      L198: {expect: true, expr: '(^|\n)([^\n]+(:198:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value is zero")[^\n]*\n?)+'}
      L202: {expect: true, expr: '(^|\n)([^\n]+(:202:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value is zero")[^\n]*\n?)+'}
      L203: {expect: true, expr: '(^|\n)([^\n]+(:203:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value is zero")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+(:74:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value is zero")[^\n]*\n?)+'}
      L75: {expect: true, expr: '(^|\n)([^\n]+(:75:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value is zero")[^\n]*\n?)+'}
      L76: {expect: true, expr: '(^|\n)([^\n]+(:76:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value is zero")[^\n]*\n?)+'}
      L77: {expect: true, expr: '(^|\n)([^\n]+(:77:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value is zero")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value is zero")[^\n]*\n?)+'}
      L82: {expect: true, expr: '(^|\n)([^\n]+(:82:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value is zero")[^\n]*\n?)+'}
      L83: {expect: true, expr: '(^|\n)([^\n]+(:83:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value is zero")[^\n]*\n?)+'}
      L89: {expect: true, expr: '(^|\n)([^\n]+(:89:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value is zero")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value is zero")[^\n]*\n?)+'}
      L91: {expect: true, expr: '(^|\n)([^\n]+(:91:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value is zero")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value is zero")[^\n]*\n?)+'}
      L93: {expect: true, expr: '(^|\n)([^\n]+(:93:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value is zero")[^\n]*\n?)+'}
      L97: {expect: true, expr: '(^|\n)([^\n]+(:97:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value is zero")[^\n]*\n?)+'}
      L98: {expect: true, expr: '(^|\n)([^\n]+(:98:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value is zero")[^\n]*\n?)+'}
test_attr-alloc_size-6_628:
  build:
    files: compilers/gcc/./gcc.dg/attr-alloc_size-6.c
    sources: {binary: attr-alloc_size-6.s, cflags: -O0 -Wall -Walloc-size-larger-than=12345
        -S}
  group: GRPSERIAL
  validate:
    match:
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value .12346\\[lu\\]*. exceeds maximum object size 12345")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value .12347\\[lu\\]*. exceeds maximum object size 12345")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("product
          .6172\\[lu\\]* \\\\* 3\\[lu\\]*. of arguments 1 and 2 exceeds maximum object
          size 12345")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("product
          .4\\[lu\\]* \\\\* 4115\\[lu\\]*. of arguments 1 and 2 exceeds maximum object
          size 12345")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value .12348\\[lu\\]*. exceeds maximum object size 12345")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value .12349\\[lu\\]*. exceeds maximum object size 12345")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value .12346\\[lu\\]*. exceeds maximum object size 12345")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value .12347\\[lu\\]*. exceeds maximum object size 12345")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("product
          .6172\\[lu\\]* \\\\* 3\\[lu\\]*. of arguments 1 and 2 exceeds maximum object
          size 12345")[^\n]*\n?)+'}
      L67: {expect: true, expr: '(^|\n)([^\n]+(:67:)[^\n]*[0-9]+: warning:[^\n]*("product
          .4\\[lu\\]* \\\\* 4115\\[lu\\]*. of arguments 1 and 2 exceeds maximum object
          size 12345")[^\n]*\n?)+'}
      L70: {expect: true, expr: '(^|\n)([^\n]+(:70:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value .12348\\[lu\\]*. exceeds maximum object size 12345")[^\n]*\n?)+'}
      L73: {expect: true, expr: '(^|\n)([^\n]+(:73:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value .12349\\[lu\\]*. exceeds maximum object size 12345")[^\n]*\n?)+'}
test_attr-alloc_size-7_629:
  build:
    files: compilers/gcc/./gcc.dg/attr-alloc_size-7.c
    sources: {binary: attr-alloc_size-7.s, cflags: -O2 -Wall -Walloc-size-larger-than=12345
        -S}
  group: GRPSERIAL
  validate:
    match:
      L27: {expect: true, expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value .12346\\[lu\\]*. exceeds maximum object size 12345")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value .12347\\[lu\\]*. exceeds maximum object size 12345")[^\n]*\n?)+'}
      L35: {expect: true, expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("product
          .6172\\[lu\\]* \\\\* 3\\[lu\\]*. of arguments 1 and 2 exceeds maximum object
          size 12345")[^\n]*\n?)+'}
      L36: {expect: true, expr: '(^|\n)([^\n]+(:36:)[^\n]*[0-9]+: warning:[^\n]*("product
          .4\\[lu\\]* \\\\* 4115\\[lu\\]*. of arguments 1 and 2 exceeds maximum object
          size 12345")[^\n]*\n?)+'}
      L39: {expect: true, expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value .12348\\[lu\\]*. exceeds maximum object size 12345")[^\n]*\n?)+'}
      L42: {expect: true, expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 value .12349\\[lu\\]*. exceeds maximum object size 12345")[^\n]*\n?)+'}
      L57: {expect: true, expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 range \\\\\\[12346\\[lu\\]*, \\[0-9\\]+\\[lu\\]*\\\\\\] exceeds maximum
          object size 12345")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[12347\\[lu\\]*, \\[0-9\\]+\\[lu\\]*\\\\\\] exceeds maximum
          object size 12345")[^\n]*\n?)+'}
      L65: {expect: true, expr: '(^|\n)([^\n]+(:65:)[^\n]*[0-9]+: warning:[^\n]*("product
          .6172\\[lu\\]* \\\\* 3\\[lu\\]*. of arguments 1 and 2 exceeds maximum object
          size 12345")[^\n]*\n?)+'}
      L66: {expect: true, expr: '(^|\n)([^\n]+(:66:)[^\n]*[0-9]+: warning:[^\n]*("product
          .4\\[lu\\]* \\\\* 4115\\[lu\\]*. of arguments 1 and 2 exceeds maximum object
          size 12345")[^\n]*\n?)+'}
      L69: {expect: true, expr: '(^|\n)([^\n]+(:69:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 range \\\\\\[12348\\[lu\\]*, 24692\\[lu\\]*\\\\\\] exceeds maximum object
          size 12345")[^\n]*\n?)+'}
      L72: {expect: true, expr: '(^|\n)([^\n]+(:72:)[^\n]*[0-9]+: warning:[^\n]*("argument
          2 range \\\\\\[12349\\[lu\\]*, 24693\\[lu\\]*\\\\\\] exceeds maximum object
          size 12345")[^\n]*\n?)+'}
test_attr-alloc_size-8_630:
  build:
    files: compilers/gcc/./gcc.dg/attr-alloc_size-8.c
    sources: {binary: attr-alloc_size-8.s, cflags: -O2 -Walloc-size-larger-than=123
        -Walloca-larger-than=234 -Wvla-larger-than=345 -S}
  group: GRPSERIAL
  validate:
    match:
      L39: {expect: true, expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("argument
          to .alloca. is too large")[^\n]*\n?)+'}
      L50: {expect: true, expr: '(^|\n)([^\n]+(:50:)[^\n]*[0-9]+: warning:[^\n]*("argument
          to variable-length array is too large")[^\n]*\n?)+'}
      L60: {expect: true, expr: '(^|\n)([^\n]+(:60:)[^\n]*[0-9]+: warning:[^\n]*("argument
          1 value .124\\[lu\\]*. exceeds maximum object size 123")[^\n]*\n?)+'}
test_attr-alloc_size-9_631:
  build:
    files: compilers/gcc/./gcc.dg/attr-alloc_size-9.c
    sources: {binary: attr-alloc_size-9.s, cflags: -O2 -fdump-tree-optimized -S}
  group: GRPSERIAL
test_attr-alloc_size_632:
  build:
    files: compilers/gcc/./gcc.dg/attr-alloc_size.c
    sources: {binary: attr-alloc_size.s, cflags: -O2 -Wall -ftrack-macro-expansion=0
        -S}
  group: GRPSERIAL
  validate:
    match:
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("writing")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("writing")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("writing")[^\n]*\n?)+'}
      L34: {expect: true, expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("writing")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("parameter
          outside range")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("parameter
          outside range")[^\n]*\n?)+'}
test_attr-alwaysinline_633:
  build:
    files: compilers/gcc/./gcc.dg/attr-alwaysinline.c
    sources: {binary: attr-alwaysinline.s, cflags: -O0 -ffat-lto-objects -S}
  group: GRPSERIAL
test_attr-assume_aligned-1_634:
  build:
    files: compilers/gcc/./gcc.dg/attr-assume_aligned-1.c
    sources: {binary: attr-assume_aligned-1.s, cflags: -O3 -S}
  group: GRPSERIAL
test_attr-assume_aligned-2_635:
  build:
    files: compilers/gcc/./gcc.dg/attr-assume_aligned-2.c
    sources: {binary: attr-assume_aligned-2.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
  validate:
    match:
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          number of arguments specified")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("wrong
          number of arguments specified")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("integer
          constant")[^\n]*\n?)+'}
test_attr-assume_aligned-3_636:
  build:
    files: compilers/gcc/./gcc.dg/attr-assume_aligned-3.c
    sources: {binary: attr-assume_aligned-3.s, cflags: -O2 -fdump-tree-optimized -S}
  group: GRPSERIAL
test_attr-error-1_637:
  build:
    files: compilers/gcc/./gcc.dg/attr-error-1.c
    sources: {binary: attr-error-1.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
  validate:
    match:
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          of voids")[^\n]*\n?)+'}
      L3: {expect: true, expr: '(^|\n)([^\n]+:3:[^\n]*[0-9]+: (fatal )?error:[^\n]*("undeclared")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          of voids")[^\n]*\n?)+'}
      L7: {expect: true, expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("array
          of voids")[^\n]*\n?)+'}
test_attr-externally-visible-1_638:
  build:
    files: compilers/gcc/./gcc.dg/attr-externally-visible-1.c
    sources: {binary: attr-externally-visible-1.s, cflags: -O3 -fwhole-program -ffat-lto-objects
        -S}
  group: GRPSERIAL
test_attr-externally-visible-2_639:
  build:
    files: compilers/gcc/./gcc.dg/attr-externally-visible-2.c
    sources: {binary: attr-externally-visible-2.s, cflags: -O -fwhole-program -S}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("have
          effect only on public")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("have
          effect only on public")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("have
          effect only on public")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+(:21:)[^\n]*[0-9]+: warning:[^\n]*("have
          effect only on public")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("have
          effect only on public")[^\n]*\n?)+'}
      L31: {expect: true, expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("does
          not apply to types")[^\n]*\n?)+'}
      L33: {expect: true, expr: '(^|\n)([^\n]+(:33:)[^\n]*[0-9]+: warning:[^\n]*("attribute
          ignored")[^\n]*\n?)+'}
      L4: {expect: true, expr: '(^|\n)([^\n]+(:4:)[^\n]*[0-9]+: warning:[^\n]*("have
          effect only on public")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("have
          effect only on public")[^\n]*\n?)+'}
test_attr-hotcold-1_640:
  build:
    files: compilers/gcc/./gcc.dg/attr-hotcold-1.c
    sources: {binary: attr-hotcold-1.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
test_attr-ifunc-1_641:
  build:
    files: compilers/gcc/./gcc.dg/attr-ifunc-1.c
    sources: {binary: ./attr-ifunc-1.exe, cflags: ''}
  group: GRPSERIAL
  run: {cwd: .}
test_attr-ifunc-2_642:
  build:
    files: compilers/gcc/./gcc.dg/attr-ifunc-2.c
    sources: {binary: attr-ifunc-2.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("redefinition")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("weak
          .* cannot be defined")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("indirect
          function .* cannot be declared weak")[^\n]*\n?)+'}
test_attr-ifunc-3_643:
  build:
    files: compilers/gcc/./gcc.dg/attr-ifunc-3.c
    sources: {binary: ./attr-ifunc-3.exe, cflags: ''}
  group: GRPSERIAL
  run: {cwd: .}
test_attr-ifunc-4_644:
  build:
    files: compilers/gcc/./gcc.dg/attr-ifunc-4.c
    sources: {binary: ./attr-ifunc-4.exe, cflags: ''}
  group: GRPSERIAL
  run: {cwd: .}
test_attr-ifunc-5_645:
  build:
    files: compilers/gcc/./gcc.dg/attr-ifunc-5.c
    sources: {binary: ./attr-ifunc-5.exe, cflags: ''}
  group: GRPSERIAL
  run: {cwd: .}
test_attr-invalid_646:
  build:
    files: compilers/gcc/./gcc.dg/attr-invalid.c
    sources: {binary: attr-invalid.s, cflags: ' -S'}
  group: GRPSERIAL
  validate:
    match:
      L102: {expect: true, expr: '(^|\n)([^\n]+(:102:)[^\n]*[0-9]+: warning:[^\n]*("attribute
          |directive ignored")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("attribute
          ignored")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("attribute
          ignored")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("attribute
          ignored")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("does
          not apply to types")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("attribute
          ignored")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+(:23:)[^\n]*[0-9]+: warning:[^\n]*("attribute
          ignored")[^\n]*\n?)+'}
      L26: {expect: true, expr: '(^|\n)([^\n]+(:26:)[^\n]*[0-9]+: warning:[^\n]*("attribute
          ignored")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("attribute
          ignored")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+(:30:)[^\n]*[0-9]+: warning:[^\n]*("attribute
          ignored")[^\n]*\n?)+'}
      L45: {expect: true, expr: '(^|\n)([^\n]+(:45:)[^\n]*[0-9]+: warning:[^\n]*("attribute
          ignored")[^\n]*\n?)+'}
      L46: {expect: true, expr: '(^|\n)([^\n]+(:46:)[^\n]*[0-9]+: warning:[^\n]*("does
          not apply to types")[^\n]*\n?)+'}
      L51: {expect: true, expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("attribute
          ignored")[^\n]*\n?)+'}
      L54: {expect: true, expr: '(^|\n)([^\n]+(:54:)[^\n]*[0-9]+: warning:[^\n]*("attribute
          ignored")[^\n]*\n?)+'}
      L58: {expect: true, expr: '(^|\n)([^\n]+(:58:)[^\n]*[0-9]+: warning:[^\n]*("attribute
          ignored")[^\n]*\n?)+'}
      L69: {expect: true, expr: '(^|\n)([^\n]+(:69:)[^\n]*[0-9]+: warning:[^\n]*("attribute
          ignored")[^\n]*\n?)+'}
      L71: {expect: true, expr: '(^|\n)([^\n]+(:71:)[^\n]*[0-9]+: warning:[^\n]*("attribute
          ignored")[^\n]*\n?)+'}
      L74: {expect: true, expr: '(^|\n)([^\n]+(:74:)[^\n]*[0-9]+: warning:[^\n]*("attribute
          ignored")[^\n]*\n?)+'}
      L78: {expect: true, expr: '(^|\n)([^\n]+(:78:)[^\n]*[0-9]+: warning:[^\n]*("attribute
          ignored")[^\n]*\n?)+'}
      L81: {expect: true, expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("attribute
          ignored")[^\n]*\n?)+'}
      L90: {expect: true, expr: '(^|\n)([^\n]+(:90:)[^\n]*[0-9]+: warning:[^\n]*("attribute
          |directive ignored")[^\n]*\n?)+'}
      L92: {expect: true, expr: '(^|\n)([^\n]+(:92:)[^\n]*[0-9]+: warning:[^\n]*("attribute
          |directive ignored")[^\n]*\n?)+'}
      L95: {expect: true, expr: '(^|\n)([^\n]+(:95:)[^\n]*[0-9]+: warning:[^\n]*("attribute
          |directive ignored")[^\n]*\n?)+'}
      L99: {expect: true, expr: '(^|\n)([^\n]+(:99:)[^\n]*[0-9]+: warning:[^\n]*("attribute
          |directive ignored")[^\n]*\n?)+'}
test_attr-may-alias-1_647:
  build:
    files: compilers/gcc/./gcc.dg/attr-may-alias-1.c
    sources: {binary: attr-may-alias-1.s, cflags: -O2 -ffat-lto-objects -S}
  group: GRPSERIAL
test_attr-mode-1_648:
  build:
    files: compilers/gcc/./gcc.dg/attr-mode-1.c
    sources: {binary: attr-mode-1.s, cflags: ' -S'}
  group: GRPSERIAL
  validate:
    match:
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("inappropriate
          type")[^\n]*\n?)+'}
test_attr-mode-2_649:
  build:
    files: compilers/gcc/./gcc.dg/attr-mode-2.c
    sources: {binary: attr-mode-2.s, cflags: ' -S'}
  group: GRPSERIAL
test_attr-nest_650:
  build:
    files: compilers/gcc/./gcc.dg/attr-nest.c
    sources: {binary: attr-nest.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
  validate:
    match:
      L16: {expect: true, expr: '(^|\n)([^\n]+(:16:)[^\n]*[0-9]+: warning:[^\n]*("attribute
          ignored")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+(:17:)[^\n]*[0-9]+: warning:[^\n]*("attribute
          ignored")[^\n]*\n?)+'}
test_attr-noinline_651:
  build:
    files: compilers/gcc/./gcc.dg/attr-noinline.c
    sources: {binary: attr-noinline.s, cflags: -O2 -finline-functions -fno-ipa-icf
        -ffat-lto-objects -S}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("(inline
          function \\[^\\n\\]* given attribute noinline|declared inline after its
          definition)")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("follows
          declaration with attribute noinline")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+(:24:)[^\n]*[0-9]+: warning:[^\n]*("follows
          inline declaration")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("follows
          inline declaration")[^\n]*\n?)+'}
      L32: {expect: true, expr: '(^|\n)([^\n]+(:32:)[^\n]*[0-9]+: warning:[^\n]*("follows
          inline declaration")[^\n]*\n?)+'}
      L40: {expect: true, expr: '(^|\n)([^\n]+(:40:)[^\n]*[0-9]+: warning:[^\n]*("follows
          inline declaration")[^\n]*\n?)+'}
      L44: {expect: true, expr: '(^|\n)([^\n]+(:44:)[^\n]*[0-9]+: warning:[^\n]*("follows
          declaration with attribute noinline")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+(:6:)[^\n]*[0-9]+: warning:[^\n]*("inline
          function \\[^\\n\\]* given attribute noinline")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("inline
          function \\[^\\n\\]* given attribute noinline")[^\n]*\n?)+'}
test_attr-weak-1_652:
  build:
    files: compilers/gcc/./gcc.dg/attr-weak-1.c
    sources: {binary: attr-weak-1.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
  validate:
    match:
      L3: {expect: true, expr: '(^|\n)([^\n]+(:3:)[^\n]*[0-9]+: warning:[^\n]*("inline.*weak")[^\n]*\n?)+'}
test_attr-weakref-1a_653:
  build:
    files: compilers/gcc/./gcc.dg/attr-weakref-1a.c
    sources: {binary: attr-weakref-1a.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
test_attr-weakref-1b_654:
  build:
    files: compilers/gcc/./gcc.dg/attr-weakref-1b.c
    sources: {binary: attr-weakref-1b.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
test_auto-type-1_655:
  build:
    files: compilers/gcc/./gcc.dg/auto-type-1.c
    sources: {binary: ./auto-type-1.exe, cflags: ''}
  group: GRPSERIAL
  run: {cwd: .}
test_auto-type-2_656:
  build:
    files: compilers/gcc/./gcc.dg/auto-type-2.c
    sources: {binary: auto-type-2.s, cflags: ' -S'}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initialized
          data declaration")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("single
          declarator")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("__auto_type")[^\n]*\n?)+'}
      L13: {expect: true, expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("__auto_type")[^\n]*\n?)+'}
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("__auto_type")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("__auto_type")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("__auto_type")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("__auto_type")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("__auto_type")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("__auto_type")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("__auto_type")[^\n]*\n?)+'}
      L21: {expect: true, expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("__auto_type")[^\n]*\n?)+'}
      L22: {expect: true, expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("two
          or more data types")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("two
          or more data types")[^\n]*\n?)+'}
      L5: {expect: true, expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("empty
          declaration")[^\n]*\n?)+'}
      L6: {expect: true, expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("plain
          identifier")[^\n]*\n?)+'}
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          initializer")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initialized
          data declaration")[^\n]*\n?)+'}
test_bad-binary-ops_657:
  build:
    files: compilers/gcc/./gcc.dg/bad-binary-ops.c
    sources: {binary: bad-binary-ops.s, cflags: -fdiagnostics-show-caret -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary /")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary \\+")[^\n]*\n?)+'}
      L41: {expect: true, expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          operands to binary \\+")[^\n]*\n?)+'}
test_bad-dereference_658:
  build:
    files: compilers/gcc/./gcc.dg/bad-dereference.c
    sources: {binary: bad-dereference.s, cflags: -fdiagnostics-show-caret -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          type argument of unary ... .have .int..")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          type argument of unary ... .have .struct foo..")[^\n]*\n?)+'}
test_bconstp-1_659:
  build:
    files: compilers/gcc/./gcc.dg/bconstp-1.c
    sources: {binary: bconstp-1.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
test_bconstp-2_660:
  build:
    files: compilers/gcc/./gcc.dg/bconstp-2.c
    sources: {binary: bconstp-2.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
test_bconstp-3_661:
  build:
    files: compilers/gcc/./gcc.dg/bconstp-3.c
    sources: {binary: bconstp-3.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
test_bconstp-4_662:
  build:
    files: compilers/gcc/./gcc.dg/bconstp-4.c
    sources: {binary: bconstp-4.s, cflags: -ansi -pedantic-errors -S}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("initializer
          element is not a constant expression")[^\n]*\n?)+'}
test_bf-ms-layout-3_663:
  build:
    files: compilers/gcc/./gcc.dg/bf-ms-layout-3.c
    sources: {binary: ./bf-ms-layout-3.exe, cflags: -ansi -pedantic-errors}
  group: GRPSERIAL
  run: {cwd: .}
test_binary-constants-1_664:
  build:
    files: compilers/gcc/./gcc.dg/binary-constants-1.c
    sources: {binary: binary-constants-1.s, cflags: -std=gnu99 -S}
  group: GRPSERIAL
test_binary-constants-2_665:
  build:
    files: compilers/gcc/./gcc.dg/binary-constants-2.c
    sources: {binary: binary-constants-2.s, cflags: '-std=iso9899:1999 -pedantic -ftrack-macro-expansion=0
        -S'}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("binary
          constants are a GCC extension")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("binary
          constants are a GCC extension")[^\n]*\n?)+'}
test_binary-constants-3_666:
  build:
    files: compilers/gcc/./gcc.dg/binary-constants-3.c
    sources: {binary: binary-constants-3.s, cflags: '-std=iso9899:1999 -pedantic-errors
        -ftrack-macro-expansion=0 -S'}
  group: GRPSERIAL
  validate:
    match:
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("binary
          constants are a GCC extension")[^\n]*\n?)+'}
      L15: {expect: true, expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("binary
          constants are a GCC extension")[^\n]*\n?)+'}
test_binary-constants-4_667:
  build:
    files: compilers/gcc/./gcc.dg/binary-constants-4.c
    sources: {binary: binary-constants-4.s, cflags: -std=gnu99 -S}
  group: GRPSERIAL
  validate:
    match:
      L14: {expect: true, expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("
          on integer constant")[^\n]*\n?)+'}
      L16: {expect: true, expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("
          on integer constant")[^\n]*\n?)+'}
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("
          in binary constant")[^\n]*\n?)+'}
test_binop-notand1_668:
  build:
    files: compilers/gcc/./gcc.dg/binop-notand1.c
    sources: {binary: binop-notand1.s, cflags: -O2 -fdump-tree-optimized -S}
  group: GRPSERIAL
test_binop-notand1a_669:
  build:
    files: compilers/gcc/./gcc.dg/binop-notand1a.c
    sources: {binary: binop-notand1a.s, cflags: -O2 -fdump-tree-optimized -S}
  group: GRPSERIAL
test_binop-notand2_670:
  build:
    files: compilers/gcc/./gcc.dg/binop-notand2.c
    sources: {binary: binop-notand2.s, cflags: -O2 -fdump-tree-optimized -S}
  group: GRPSERIAL
test_binop-notand2a_671:
  build:
    files: compilers/gcc/./gcc.dg/binop-notand2a.c
    sources: {binary: binop-notand2a.s, cflags: -O2 -fdump-tree-optimized -S}
  group: GRPSERIAL
test_binop-notand3_672:
  build:
    files: compilers/gcc/./gcc.dg/binop-notand3.c
    sources: {binary: binop-notand3.s, cflags: -O2 -fdump-tree-optimized -S}
  group: GRPSERIAL
test_binop-notand3a_673:
  build:
    files: compilers/gcc/./gcc.dg/binop-notand3a.c
    sources: {binary: binop-notand3a.s, cflags: -O2 -fdump-tree-optimized -S}
  group: GRPSERIAL
test_binop-notand4_674:
  build:
    files: compilers/gcc/./gcc.dg/binop-notand4.c
    sources: {binary: binop-notand4.s, cflags: -O2 -fdump-tree-optimized -S}
  group: GRPSERIAL
test_binop-notand4a_675:
  build:
    files: compilers/gcc/./gcc.dg/binop-notand4a.c
    sources: {binary: binop-notand4a.s, cflags: -O2 -fdump-tree-optimized -S}
  group: GRPSERIAL
test_binop-notand5_676:
  build:
    files: compilers/gcc/./gcc.dg/binop-notand5.c
    sources: {binary: binop-notand5.s, cflags: -O2 -fdump-tree-optimized -S}
  group: GRPSERIAL
test_binop-notand5a_677:
  build:
    files: compilers/gcc/./gcc.dg/binop-notand5a.c
    sources: {binary: binop-notand5a.s, cflags: -O2 -fdump-tree-optimized -S}
  group: GRPSERIAL
test_binop-notand6_678:
  build:
    files: compilers/gcc/./gcc.dg/binop-notand6.c
    sources: {binary: binop-notand6.s, cflags: -O2 -fdump-tree-optimized -S}
  group: GRPSERIAL
test_binop-notand6a_679:
  build:
    files: compilers/gcc/./gcc.dg/binop-notand6a.c
    sources: {binary: binop-notand6a.s, cflags: -O2 -fdump-tree-optimized -S}
  group: GRPSERIAL
test_binop-notor1_680:
  build:
    files: compilers/gcc/./gcc.dg/binop-notor1.c
    sources: {binary: binop-notor1.s, cflags: -O2 -fdump-tree-optimized -S}
  group: GRPSERIAL
test_binop-notor2_681:
  build:
    files: compilers/gcc/./gcc.dg/binop-notor2.c
    sources: {binary: binop-notor2.s, cflags: -O2 -fdump-tree-optimized -S}
  group: GRPSERIAL
test_binop-notxor1_682:
  build:
    files: compilers/gcc/./gcc.dg/binop-notxor1.c
    sources: {binary: binop-notxor1.s, cflags: -O2 -fdump-tree-optimized -S}
  group: GRPSERIAL
test_binop-notxor2_683:
  build:
    files: compilers/gcc/./gcc.dg/binop-notxor2.c
    sources: {binary: binop-notxor2.s, cflags: -O2 -fdump-tree-optimized -S}
  group: GRPSERIAL
test_binop-xor1_684:
  build:
    files: compilers/gcc/./gcc.dg/binop-xor1.c
    sources: {binary: binop-xor1.s, cflags: -O2 -fdump-tree-optimized -S}
  group: GRPSERIAL
test_binop-xor2_685:
  build:
    files: compilers/gcc/./gcc.dg/binop-xor2.c
    sources: {binary: binop-xor2.s, cflags: -O2 -fdump-tree-optimized -S}
  group: GRPSERIAL
test_binop-xor3_686:
  build:
    files: compilers/gcc/./gcc.dg/binop-xor3.c
    sources: {binary: binop-xor3.s, cflags: -O2 -fdump-tree-optimized -S}
  group: GRPSERIAL
test_binop-xor4_687:
  build:
    files: compilers/gcc/./gcc.dg/binop-xor4.c
    sources: {binary: binop-xor4.s, cflags: -O2 -fdump-tree-optimized -S}
  group: GRPSERIAL
test_binop-xor5_688:
  build:
    files: compilers/gcc/./gcc.dg/binop-xor5.c
    sources: {binary: binop-xor5.s, cflags: -O2 -fdump-tree-optimized -S}
  group: GRPSERIAL
test_bitfld-10_690:
  build:
    files: compilers/gcc/./gcc.dg/bitfld-10.c
    sources: {binary: bitfld-10.s, cflags: ' -S'}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''sizeof\''
          applied to a bit-field")[^\n]*\n?)+'}
test_bitfld-11_691:
  build:
    files: compilers/gcc/./gcc.dg/bitfld-11.c
    sources: {binary: bitfld-11.s, cflags: ' -S'}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''__alignof\''
          applied to a bit-field")[^\n]*\n?)+'}
test_bitfld-12_692:
  build:
    files: compilers/gcc/./gcc.dg/bitfld-12.c
    sources: {binary: bitfld-12.s, cflags: ' -S'}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("attempt
          to take address of bit-field structure member \''a\''")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          take address of bit-field \''a\''")[^\n]*\n?)+'}
      L12: {expect: true, expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot
          take address of bit-field \''a\''")[^\n]*\n?)+'}
test_bitfld-13_693:
  build:
    files: compilers/gcc/./gcc.dg/bitfld-13.c
    sources: {binary: bitfld-13.s, cflags: ' -S'}
  group: GRPSERIAL
  validate:
    match:
      L10: {expect: true, expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          \''p\'' has invalid type")[^\n]*\n?)+'}
      L11: {expect: true, expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          \''f\'' has invalid type")[^\n]*\n?)+'}
      L9: {expect: true, expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          \''s\'' has invalid type")[^\n]*\n?)+'}
test_bitfld-14_694:
  build:
    files: compilers/gcc/./gcc.dg/bitfld-14.c
    sources: {binary: bitfld-14.s, cflags: ' -S'}
  group: GRPSERIAL
  validate:
    match:
      L8: {expect: true, expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("bit-field
          \''a\'' width not an integer constant")[^\n]*\n?)+'}
test_bitfld-15_695:
  build:
    files: compilers/gcc/./gcc.dg/bitfld-15.c
    sources: {binary: bitfld-15.s, cflags: ' -S'}
  group: GRPSERIAL
test_bitfld-16_696:
  build:
    files: compilers/gcc/./gcc.dg/bitfld-16.c
    sources: {binary: bitfld-16.s, cflags: -Wno-packed-bitfield-compat -S}
  group: GRPSERIAL
test_bitfld-1_689:
  build:
    files: compilers/gcc/./gcc.dg/bitfld-1.c
    sources: {binary: bitfld-1.s, cflags: -pedantic -std=gnu89 -S}
  group: GRPSERIAL
  validate:
    match:
      L17: {expect: true, expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("integer
          constant")[^\n]*\n?)+'}
      L18: {expect: true, expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("integer
          constant")[^\n]*\n?)+'}
      L19: {expect: true, expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("negative
          width")[^\n]*\n?)+'}
      L20: {expect: true, expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("zero
          width")[^\n]*\n?)+'}
      L23: {expect: true, expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          type")[^\n]*\n?)+'}
      L24: {expect: true, expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid
          type")[^\n]*\n?)+'}
      L25: {expect: true, expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L27: {expect: true, expr: '(^|\n)([^\n]+(:27:)[^\n]*[0-9]+: warning:[^\n]*("narrower")[^\n]*\n?)+'}
      L28: {expect: true, expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L29: {expect: true, expr: '(^|\n)([^\n]+(:29:)[^\n]*[0-9]+: warning:[^\n]*("GCC
          extension|ISO C")[^\n]*\n?)+'}
      L30: {expect: true, expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("exceeds
          its type")[^\n]*\n?)+'}
