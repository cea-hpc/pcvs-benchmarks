test_acc_on_device-1_1:
  build:
    cflags: "-O -fopenacc -O -fdump-rtl-expand -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/acc_on_device-1.f95'
    sources:
      binary: acc_on_device-1.s
  group: GRPSERIAL
test_acc_on_device-1_102:
  build:
    cflags: "-O -fopenacc -O -fdump-rtl-expand -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/acc_on_device-1.f95'
    sources:
      binary: acc_on_device-1.s
  group: GRPSERIAL
test_acc_on_device-2-off_103:
  build:
    cflags: "-O -fopenacc -O -fdump-rtl-expand -fno-openacc -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/acc_on_device-2-off.f95'
    sources:
      binary: acc_on_device-2-off.s
  group: GRPSERIAL
test_acc_on_device-2-off_2:
  build:
    cflags: "-O -fopenacc -O -fdump-rtl-expand -fno-openacc -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/acc_on_device-2-off.f95'
    sources:
      binary: acc_on_device-2-off.s
  group: GRPSERIAL
test_acc_on_device-2_104:
  build:
    cflags: "-O -fopenacc -O -fdump-rtl-expand -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/acc_on_device-2.f95'
    sources:
      binary: acc_on_device-2.s
  group: GRPSERIAL
test_acc_on_device-2_3:
  build:
    cflags: "-O -fopenacc -O -fdump-rtl-expand -ffat-lto-objects\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/acc_on_device-2.f95'
    sources:
      binary: acc_on_device-2.s
  group: GRPSERIAL
test_array-reduction_105:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/array-reduction.f90'
    sources:
      binary: array-reduction.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''a\''
          is not permitted in reduction")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''a\''
          is not permitted in reduction")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''a\''
          is not permitted in reduction")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''a\''
          is not permitted in reduction")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''a\''
          is not permitted in reduction")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''a\''
          is not permitted in reduction")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''a\''
          is not permitted in reduction")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''a\''
          is not permitted in reduction")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''a\''
          is not permitted in reduction")[^\n]*\n?)+'
test_array-reduction_4:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/array-reduction.f90'
    sources:
      binary: array-reduction.s
  group: GRPSERIAL
  validate:
    match:
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''a\''
          is not permitted in reduction")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''a\''
          is not permitted in reduction")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''a\''
          is not permitted in reduction")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''a\''
          is not permitted in reduction")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''a\''
          is not permitted in reduction")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''a\''
          is not permitted in reduction")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''a\''
          is not permitted in reduction")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''a\''
          is not permitted in reduction")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''a\''
          is not permitted in reduction")[^\n]*\n?)+'
test_assumed_106:
  build:
    cflags: "-O  -fopenacc -fmax-errors=100\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/assumed.f95'
    sources:
      binary: assumed.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed size")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed size")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed size")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed size")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed size")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed size")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed size")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed size")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed rank")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed rank")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed rank")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed rank")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed rank")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed rank")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed rank")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed rank")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed rank")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''a\''
          is not permitted in reduction")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''a\''
          is not permitted in reduction")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed size")[^\n]*\n?)+'
test_assumed_5:
  build:
    cflags: "-O  -fopenacc -fmax-errors=100\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/assumed.f95'
    sources:
      binary: assumed.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed size")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed size")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed size")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed size")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed size")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed size")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed size")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed size")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed rank")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed rank")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed rank")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed rank")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed rank")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed rank")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed rank")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed rank")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed rank")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''a\''
          is not permitted in reduction")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''a\''
          is not permitted in reduction")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed size")[^\n]*\n?)+'
test_asyncwait-1_107:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/asyncwait-1.f95'
    sources:
      binary: asyncwait-1.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character
          in name")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character
          in name at")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ASYNC clause
          at \\\\\\(1\\\\\\) requires a scalar INTEGER expression")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ASYNC clause
          at \\\\\\(1\\\\\\) requires a scalar INTEGER expression")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character
          in name at ")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
test_asyncwait-1_6:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/asyncwait-1.f95'
    sources:
      binary: asyncwait-1.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character
          in name")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character
          in name at")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ASYNC clause
          at \\\\\\(1\\\\\\) requires a scalar INTEGER expression")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ASYNC clause
          at \\\\\\(1\\\\\\) requires a scalar INTEGER expression")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character
          in name at ")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
test_asyncwait-2_108:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/asyncwait-2.f95'
    sources:
      binary: asyncwait-2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error
          in OpenACC expression list")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error
          in OpenACC expression list")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error
          in OpenACC expression list")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error
          in OpenACC expression list")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error
          in OpenACC expression list")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error
          in OpenACC expression list")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error
          in OpenACC expression list")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error
          in OpenACC expression list")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("WAIT clause at
          \\\\\\(1\\\\\\) requires a scalar INTEGER expression")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("WAIT clause at
          \\\\\\(1\\\\\\) requires a scalar INTEGER expression")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error
          in OpenACC expression list")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
test_asyncwait-2_7:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/asyncwait-2.f95'
    sources:
      binary: asyncwait-2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error
          in OpenACC expression list")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error
          in OpenACC expression list")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error
          in OpenACC expression list")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error
          in OpenACC expression list")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error
          in OpenACC expression list")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error
          in OpenACC expression list")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error
          in OpenACC expression list")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error
          in OpenACC expression list")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("WAIT clause at
          \\\\\\(1\\\\\\) requires a scalar INTEGER expression")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("WAIT clause at
          \\\\\\(1\\\\\\) requires a scalar INTEGER expression")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error
          in OpenACC expression list")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          END PARALLEL")[^\n]*\n?)+'
test_asyncwait-3_109:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/asyncwait-3.f95'
    sources:
      binary: asyncwait-3.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error
          in OpenACC expression list at")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error
          in OpenACC expression list at")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error
          in OpenACC expression list at")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error
          in OpenACC expression list at")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error
          in OpenACC expression list at")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error
          in OpenACC expression list at")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid argument
          to \\\\\\!\\\\\\$ACC WAIT")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("WAIT clause at
          \\\\\\(1\\\\\\) requires a scalar INTEGER expression")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("WAIT clause at
          \\\\\\(1\\\\\\) requires a scalar INTEGER expression")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("WAIT clause at
          \\\\\\(1\\\\\\) requires a scalar INTEGER expression")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
test_asyncwait-3_8:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/asyncwait-3.f95'
    sources:
      binary: asyncwait-3.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error
          in OpenACC expression list at")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error
          in OpenACC expression list at")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error
          in OpenACC expression list at")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error
          in OpenACC expression list at")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error
          in OpenACC expression list at")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error
          in OpenACC expression list at")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid argument
          to \\\\\\!\\\\\\$ACC WAIT")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("WAIT clause at
          \\\\\\(1\\\\\\) requires a scalar INTEGER expression")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("WAIT clause at
          \\\\\\(1\\\\\\) requires a scalar INTEGER expression")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("WAIT clause at
          \\\\\\(1\\\\\\) requires a scalar INTEGER expression")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
test_asyncwait-4_110:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/asyncwait-4.f95'
    sources:
      binary: asyncwait-4.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character
          in name")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ASYNC clause
          at \\\\\\(1\\\\\\) requires a scalar INTEGER expression")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ASYNC clause
          at \\\\\\(1\\\\\\) requires a scalar INTEGER expression")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
test_asyncwait-4_9:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/asyncwait-4.f95'
    sources:
      binary: asyncwait-4.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character
          in name")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ASYNC clause
          at \\\\\\(1\\\\\\) requires a scalar INTEGER expression")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ASYNC clause
          at \\\\\\(1\\\\\\) requires a scalar INTEGER expression")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
test_branch_10:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/branch.f95'
    sources:
      binary: branch.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
test_branch_111:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/branch.f95'
    sources:
      binary: branch.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
test_cache-1_11:
  build:
    cflags: "-O  -fopenacc -std=f2008\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/cache-1.f95'
    sources:
      binary: cache-1.s
  group: GRPSERIAL
test_cache-1_112:
  build:
    cflags: "-O  -fopenacc -std=f2008\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/cache-1.f95'
    sources:
      binary: cache-1.s
  group: GRPSERIAL
test_cache-2_113:
  build:
    cflags: "-O  -fopenacc -std=f2008\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/cache-2.f95'
    sources:
      binary: cache-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_cache-2_12:
  build:
    cflags: "-O  -fopenacc -std=f2008\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/cache-2.f95'
    sources:
      binary: cache-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_coarray_114:
  build:
    cflags: "-O  -fopenacc -fcoarray=single\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/coarray.f95'
    sources:
      binary: coarray.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''a\''
          is not permitted in reduction")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_coarray_13:
  build:
    cflags: "-O  -fopenacc -fcoarray=single\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/coarray.f95'
    sources:
      binary: coarray.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''a\''
          is not permitted in reduction")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_coarray_2_115:
  build:
    cflags: "-O  -fopenacc -fcoarray=lib\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/coarray_2.f90'
    sources:
      binary: coarray_2.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''a\''
          is not permitted in reduction")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''a\''
          is not permitted in reduction")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''a\''
          is not permitted in reduction")[^\n]*\n?)+'
test_coarray_2_14:
  build:
    cflags: "-O  -fopenacc -fcoarray=lib\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/coarray_2.f90'
    sources:
      binary: coarray_2.s
  group: GRPSERIAL
  validate:
    match:
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''a\''
          is not permitted in reduction")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''a\''
          is not permitted in reduction")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''a\''
          is not permitted in reduction")[^\n]*\n?)+'
test_combined-directives_116:
  build:
    cflags: "-O  -fopenacc -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/combined-directives.f90'
    sources:
      binary: combined-directives.s
  group: GRPSERIAL
test_combined-directives_15:
  build:
    cflags: "-O  -fopenacc -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/combined-directives.f90'
    sources:
      binary: combined-directives.s
  group: GRPSERIAL
test_combined_loop_117:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/combined_loop.f90'
    sources:
      binary: combined_loop.s
  group: GRPSERIAL
test_combined_loop_16:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/combined_loop.f90'
    sources:
      binary: combined_loop.s
  group: GRPSERIAL
test_continuation-free-form_118:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/continuation-free-form.f95'
    sources:
      binary: continuation-free-form.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
test_continuation-free-form_17:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/continuation-free-form.f95'
    sources:
      binary: continuation-free-form.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
test_cray-2_119:
  build:
    cflags: "-O  -fopenacc -fcray-pointer\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/cray-2.f95'
    sources:
      binary: cray-2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointee")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointee")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointee")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointee")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointee")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointee")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointee")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointee")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointee")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointer")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointer")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointer")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_cray-2_18:
  build:
    cflags: "-O  -fopenacc -fcray-pointer\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/cray-2.f95'
    sources:
      binary: cray-2.s
  group: GRPSERIAL
  validate:
    match:
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointee")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointee")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointee")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointee")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointee")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointee")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointee")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointee")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointee")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointer")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointer")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointer")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_cray_120:
  build:
    cflags: "-O  -fopenacc -fcray-pointer\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/cray.f95'
    sources:
      binary: cray.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointee")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointee")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointee")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointee")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointee")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointee")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointee")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointee")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointee")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointer")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointer")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointer")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_cray_19:
  build:
    cflags: "-O  -fopenacc -fcray-pointer\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/cray.f95'
    sources:
      binary: cray.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointee")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointee")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointee")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointee")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointee")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointee")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointee")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointee")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointee")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointer")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointer")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Cray pointer")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
test_critical_121:
  build:
    cflags: "-O  -fopenacc -fcoarray=single\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/critical.f95'
    sources:
      binary: critical.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("CRITICAL block
          inside of")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OpenACC directive
          inside of")[^\n]*\n?)+'
test_critical_20:
  build:
    cflags: "-O  -fopenacc -fcoarray=single\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/critical.f95'
    sources:
      binary: critical.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("CRITICAL block
          inside of")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OpenACC directive
          inside of")[^\n]*\n?)+'
test_data-clauses_122:
  build:
    cflags: "-O  -fopenacc -fmax-errors=100\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/data-clauses.f95'
    sources:
      binary: data-clauses.s
  group: GRPSERIAL
  validate:
    match:
      L101:
        expect: true
        expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("POINTER")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ALLOCATABLE")[^\n]*\n?)+'
      L118:
        expect: true
        expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L122:
        expect: true
        expr: '(^|\n)([^\n]+:122:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+:124:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L126:
        expect: true
        expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("POINTER")[^\n]*\n?)+'
      L149:
        expect: true
        expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ALLOCATABLE")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+:155:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L161:
        expect: true
        expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+:172:[^\n]*[0-9]+: (fatal )?error:[^\n]*("POINTER")[^\n]*\n?)+'
      L174:
        expect: true
        expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ALLOCATABLE")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L182:
        expect: true
        expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L188:
        expect: true
        expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L199:
        expect: true
        expr: '(^|\n)([^\n]+:199:[^\n]*[0-9]+: (fatal )?error:[^\n]*("POINTER")[^\n]*\n?)+'
      L201:
        expect: true
        expr: '(^|\n)([^\n]+:201:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ALLOCATABLE")[^\n]*\n?)+'
      L203:
        expect: true
        expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L205:
        expect: true
        expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L207:
        expect: true
        expr: '(^|\n)([^\n]+:207:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L209:
        expect: true
        expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L211:
        expect: true
        expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L213:
        expect: true
        expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L217:
        expect: true
        expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L228:
        expect: true
        expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("POINTER")[^\n]*\n?)+'
      L230:
        expect: true
        expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ALLOCATABLE")[^\n]*\n?)+'
      L232:
        expect: true
        expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L234:
        expect: true
        expr: '(^|\n)([^\n]+:234:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L236:
        expect: true
        expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L238:
        expect: true
        expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L240:
        expect: true
        expr: '(^|\n)([^\n]+:240:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L242:
        expect: true
        expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L244:
        expect: true
        expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L246:
        expect: true
        expr: '(^|\n)([^\n]+:246:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L248:
        expect: true
        expr: '(^|\n)([^\n]+:248:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("POINTER")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("VALUE")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ALLOCATABLE")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("POINTER")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ALLOCATABLE")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("POINTER")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ALLOCATABLE")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("POINTER")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ALLOCATABLE")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("POINTER")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ALLOCATABLE")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
test_data-clauses_21:
  build:
    cflags: "-O  -fopenacc -fmax-errors=100\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/data-clauses.f95'
    sources:
      binary: data-clauses.s
  group: GRPSERIAL
  validate:
    match:
      L101:
        expect: true
        expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L114:
        expect: true
        expr: '(^|\n)([^\n]+:114:[^\n]*[0-9]+: (fatal )?error:[^\n]*("POINTER")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ALLOCATABLE")[^\n]*\n?)+'
      L118:
        expect: true
        expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L122:
        expect: true
        expr: '(^|\n)([^\n]+:122:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+:124:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L126:
        expect: true
        expr: '(^|\n)([^\n]+:126:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("POINTER")[^\n]*\n?)+'
      L149:
        expect: true
        expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ALLOCATABLE")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+:155:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L161:
        expect: true
        expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+:172:[^\n]*[0-9]+: (fatal )?error:[^\n]*("POINTER")[^\n]*\n?)+'
      L174:
        expect: true
        expr: '(^|\n)([^\n]+:174:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ALLOCATABLE")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L182:
        expect: true
        expr: '(^|\n)([^\n]+:182:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L186:
        expect: true
        expr: '(^|\n)([^\n]+:186:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L188:
        expect: true
        expr: '(^|\n)([^\n]+:188:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L199:
        expect: true
        expr: '(^|\n)([^\n]+:199:[^\n]*[0-9]+: (fatal )?error:[^\n]*("POINTER")[^\n]*\n?)+'
      L201:
        expect: true
        expr: '(^|\n)([^\n]+:201:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ALLOCATABLE")[^\n]*\n?)+'
      L203:
        expect: true
        expr: '(^|\n)([^\n]+:203:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L205:
        expect: true
        expr: '(^|\n)([^\n]+:205:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L207:
        expect: true
        expr: '(^|\n)([^\n]+:207:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L209:
        expect: true
        expr: '(^|\n)([^\n]+:209:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L211:
        expect: true
        expr: '(^|\n)([^\n]+:211:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L213:
        expect: true
        expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L215:
        expect: true
        expr: '(^|\n)([^\n]+:215:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L217:
        expect: true
        expr: '(^|\n)([^\n]+:217:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L228:
        expect: true
        expr: '(^|\n)([^\n]+:228:[^\n]*[0-9]+: (fatal )?error:[^\n]*("POINTER")[^\n]*\n?)+'
      L230:
        expect: true
        expr: '(^|\n)([^\n]+:230:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ALLOCATABLE")[^\n]*\n?)+'
      L232:
        expect: true
        expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L234:
        expect: true
        expr: '(^|\n)([^\n]+:234:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L236:
        expect: true
        expr: '(^|\n)([^\n]+:236:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L238:
        expect: true
        expr: '(^|\n)([^\n]+:238:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L240:
        expect: true
        expr: '(^|\n)([^\n]+:240:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L242:
        expect: true
        expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L244:
        expect: true
        expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L246:
        expect: true
        expr: '(^|\n)([^\n]+:246:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L248:
        expect: true
        expr: '(^|\n)([^\n]+:248:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("POINTER")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("VALUE")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ALLOCATABLE")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("POINTER")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ALLOCATABLE")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("POINTER")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ALLOCATABLE")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L74:
        expect: true
        expr: '(^|\n)([^\n]+:74:[^\n]*[0-9]+: (fatal )?error:[^\n]*("POINTER")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ALLOCATABLE")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("POINTER")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ALLOCATABLE")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
test_data-tree_123:
  build:
    cflags: "-O  -fopenacc -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/data-tree.f95'
    sources:
      binary: data-tree.s
  group: GRPSERIAL
test_data-tree_22:
  build:
    cflags: "-O  -fopenacc -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/data-tree.f95'
    sources:
      binary: data-tree.s
  group: GRPSERIAL
test_declare-1_124:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/declare-1.f95'
    sources:
      binary: declare-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not allowed")[^\n]*\n?)+'
test_declare-1_23:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/declare-1.f95'
    sources:
      binary: declare-1.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("is not allowed")[^\n]*\n?)+'
test_declare-2_125:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/declare-2.f95'
    sources:
      binary: declare-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid clause
          in module")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid clause
          in module")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid clause
          in module")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid clause
          in module")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid clause
          in module")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid clause
          in module")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid clause
          in module")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid clause
          in module")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("present on multiple
          clauses")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("element of a
          COMMON")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("element of a
          COMMON")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not found")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("present on multiple
          clauses")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed-size
          dummy array")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed-size
          dummy array")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("present on multiple
          clauses")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array sections:
          \''c\'' not allowed")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("present on multiple
          clauses")[^\n]*\n?)+'
test_declare-2_24:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/declare-2.f95'
    sources:
      binary: declare-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid clause
          in module")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid clause
          in module")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid clause
          in module")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid clause
          in module")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid clause
          in module")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid clause
          in module")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid clause
          in module")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid clause
          in module")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("present on multiple
          clauses")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("element of a
          COMMON")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("element of a
          COMMON")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not found")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("present on multiple
          clauses")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed-size
          dummy array")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed-size
          dummy array")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("present on multiple
          clauses")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array sections:
          \''c\'' not allowed")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("present on multiple
          clauses")[^\n]*\n?)+'
test_default_126:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/default.f95'
    sources:
      binary: default.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
test_default_25:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/default.f95'
    sources:
      binary: default.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
test_default_none_127:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/default_none.f95'
    sources:
      binary: default_none.s
  group: GRPSERIAL
test_default_none_26:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/default_none.f95'
    sources:
      binary: default_none.s
  group: GRPSERIAL
test_enter-exit-data_128:
  build:
    cflags: "-O  -fopenacc -fmax-errors=100\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/enter-exit-data.f95'
    sources:
      binary: enter-exit-data.s
  group: GRPSERIAL
  validate:
    match:
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("LOGICAL")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("LOGICAL")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("LOGICAL")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("LOGICAL")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("POINTER")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ALLOCATABLE")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("POINTER")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ALLOCATABLE")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("POINTER")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ALLOCATABLE")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("POINTER")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ALLOCATABLE")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("LOGICAL")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("LOGICAL")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("LOGICAL")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("LOGICAL")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("POINTER")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ALLOCATABLE")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("POINTER")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ALLOCATABLE")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
test_enter-exit-data_27:
  build:
    cflags: "-O  -fopenacc -fmax-errors=100\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/enter-exit-data.f95'
    sources:
      binary: enter-exit-data.s
  group: GRPSERIAL
  validate:
    match:
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L32:
        expect: true
        expr: '(^|\n)([^\n]+:32:[^\n]*[0-9]+: (fatal )?error:[^\n]*("LOGICAL")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("LOGICAL")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("LOGICAL")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("LOGICAL")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+:42:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("POINTER")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ALLOCATABLE")[^\n]*\n?)+'
      L49:
        expect: true
        expr: '(^|\n)([^\n]+:49:[^\n]*[0-9]+: (fatal )?error:[^\n]*("POINTER")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ALLOCATABLE")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("POINTER")[^\n]*\n?)+'
      L52:
        expect: true
        expr: '(^|\n)([^\n]+:52:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ALLOCATABLE")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("POINTER")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ALLOCATABLE")[^\n]*\n?)+'
      L55:
        expect: true
        expr: '(^|\n)([^\n]+:55:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L56:
        expect: true
        expr: '(^|\n)([^\n]+:56:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+:57:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("LOGICAL")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("LOGICAL")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("LOGICAL")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("LOGICAL")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L78:
        expect: true
        expr: '(^|\n)([^\n]+:78:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L80:
        expect: true
        expr: '(^|\n)([^\n]+:80:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("POINTER")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ALLOCATABLE")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("POINTER")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ALLOCATABLE")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("multiple clauses")[^\n]*\n?)+'
test_firstprivate-1_129:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/firstprivate-1.f95'
    sources:
      binary: firstprivate-1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected !\\\\\\$ACC
          END PARALLEL statement")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error in
          OpenMP variable list")[^\n]*\n?)+'
test_firstprivate-1_28:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/firstprivate-1.f95'
    sources:
      binary: firstprivate-1.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected !\\\\\\$ACC
          END PARALLEL statement")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error in
          OpenMP variable list")[^\n]*\n?)+'
test_fixed-1_130:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/fixed-1.f'
    sources:
      binary: fixed-1.s
  group: GRPSERIAL
test_fixed-1_29:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/fixed-1.f'
    sources:
      binary: fixed-1.s
  group: GRPSERIAL
test_fixed-2_131:
  build:
    cflags: "-O  -fopenacc -fmax-errors=100\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/fixed-2.f'
    sources:
      binary: fixed-2.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
test_fixed-2_30:
  build:
    cflags: "-O  -fopenacc -fmax-errors=100\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/fixed-2.f'
    sources:
      binary: fixed-2.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
test_fixed-3_132:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/fixed-3.f'
    sources:
      binary: fixed-3.s
  group: GRPSERIAL
test_fixed-3_31:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/fixed-3.f'
    sources:
      binary: fixed-3.s
  group: GRPSERIAL
test_fixed-4_133:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/fixed-4.f'
    sources:
      binary: fixed-4.s
  group: GRPSERIAL
test_fixed-4_32:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/fixed-4.f'
    sources:
      binary: fixed-4.s
  group: GRPSERIAL
test_gang-static_134:
  build:
    cflags: "-O  -fopenacc -fdump-tree-omplower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/gang-static.f95'
    sources:
      binary: gang-static.s
  group: GRPSERIAL
test_gang-static_33:
  build:
    cflags: "-O  -fopenacc -fdump-tree-omplower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/gang-static.f95'
    sources:
      binary: gang-static.s
  group: GRPSERIAL
test_host_data-tree_135:
  build:
    cflags: "-O  -fopenacc -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/host_data-tree.f95'
    sources:
      binary: host_data-tree.s
  group: GRPSERIAL
test_host_data-tree_34:
  build:
    cflags: "-O  -fopenacc -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/host_data-tree.f95'
    sources:
      binary: host_data-tree.s
  group: GRPSERIAL
test_if_136:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/if.f95'
    sources:
      binary: if.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar LOGICAL
          expression")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar LOGICAL
          expression")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar LOGICAL
          expression")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar LOGICAL
          expression")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar LOGICAL
          expression")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar LOGICAL
          expression")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
test_if_35:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/if.f95'
    sources:
      binary: if.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar LOGICAL
          expression")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar LOGICAL
          expression")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar LOGICAL
          expression")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar LOGICAL
          expression")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar LOGICAL
          expression")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar LOGICAL
          expression")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
test_kernels-alias-2_137:
  build:
    cflags: "-O  -fopenacc -O2 -fdump-tree-ealias-all\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/kernels-alias-2.f95'
    sources:
      binary: kernels-alias-2.s
  group: GRPSERIAL
test_kernels-alias-2_36:
  build:
    cflags: "-O  -fopenacc -O2 -fdump-tree-ealias-all\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/kernels-alias-2.f95'
    sources:
      binary: kernels-alias-2.s
  group: GRPSERIAL
test_kernels-alias-3_138:
  build:
    cflags: "-O  -fopenacc -O2 -fdump-tree-ealias-all\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/kernels-alias-3.f95'
    sources:
      binary: kernels-alias-3.s
  group: GRPSERIAL
test_kernels-alias-3_37:
  build:
    cflags: "-O  -fopenacc -O2 -fdump-tree-ealias-all\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/kernels-alias-3.f95'
    sources:
      binary: kernels-alias-3.s
  group: GRPSERIAL
test_kernels-alias-4_139:
  build:
    cflags: "-O  -fopenacc -O2 -fdump-tree-ealias-all\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/kernels-alias-4.f95'
    sources:
      binary: kernels-alias-4.s
  group: GRPSERIAL
test_kernels-alias-4_38:
  build:
    cflags: "-O  -fopenacc -O2 -fdump-tree-ealias-all\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/kernels-alias-4.f95'
    sources:
      binary: kernels-alias-4.s
  group: GRPSERIAL
test_kernels-alias_140:
  build:
    cflags: "-O  -fopenacc -O2 -fdump-tree-ealias-all\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/kernels-alias.f95'
    sources:
      binary: kernels-alias.s
  group: GRPSERIAL
test_kernels-alias_39:
  build:
    cflags: "-O  -fopenacc -O2 -fdump-tree-ealias-all\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/kernels-alias.f95'
    sources:
      binary: kernels-alias.s
  group: GRPSERIAL
test_kernels-loop-2_141:
  build:
    cflags: "-O  -fopenacc -O2 -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/kernels-loop-2.f95'
    sources:
      binary: kernels-loop-2.s
  group: GRPSERIAL
test_kernels-loop-2_40:
  build:
    cflags: "-O  -fopenacc -O2 -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/kernels-loop-2.f95'
    sources:
      binary: kernels-loop-2.s
  group: GRPSERIAL
test_kernels-loop-data-2_142:
  build:
    cflags: "-O  -fopenacc -O2 -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/kernels-loop-data-2.f95'
    sources:
      binary: kernels-loop-data-2.s
  group: GRPSERIAL
test_kernels-loop-data-2_41:
  build:
    cflags: "-O  -fopenacc -O2 -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/kernels-loop-data-2.f95'
    sources:
      binary: kernels-loop-data-2.s
  group: GRPSERIAL
test_kernels-loop-data-enter-exit-2_143:
  build:
    cflags: "-O  -fopenacc -O2 -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/kernels-loop-data-enter-exit-2.f95'
    sources:
      binary: kernels-loop-data-enter-exit-2.s
  group: GRPSERIAL
test_kernels-loop-data-enter-exit-2_42:
  build:
    cflags: "-O  -fopenacc -O2 -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/kernels-loop-data-enter-exit-2.f95'
    sources:
      binary: kernels-loop-data-enter-exit-2.s
  group: GRPSERIAL
test_kernels-loop-data-enter-exit_144:
  build:
    cflags: "-O  -fopenacc -O2 -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/kernels-loop-data-enter-exit.f95'
    sources:
      binary: kernels-loop-data-enter-exit.s
  group: GRPSERIAL
test_kernels-loop-data-enter-exit_43:
  build:
    cflags: "-O  -fopenacc -O2 -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/kernels-loop-data-enter-exit.f95'
    sources:
      binary: kernels-loop-data-enter-exit.s
  group: GRPSERIAL
test_kernels-loop-data-update_145:
  build:
    cflags: "-O  -fopenacc -O2 -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/kernels-loop-data-update.f95'
    sources:
      binary: kernels-loop-data-update.s
  group: GRPSERIAL
test_kernels-loop-data-update_44:
  build:
    cflags: "-O  -fopenacc -O2 -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/kernels-loop-data-update.f95'
    sources:
      binary: kernels-loop-data-update.s
  group: GRPSERIAL
test_kernels-loop-data_146:
  build:
    cflags: "-O  -fopenacc -O2 -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/kernels-loop-data.f95'
    sources:
      binary: kernels-loop-data.s
  group: GRPSERIAL
test_kernels-loop-data_45:
  build:
    cflags: "-O  -fopenacc -O2 -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/kernels-loop-data.f95'
    sources:
      binary: kernels-loop-data.s
  group: GRPSERIAL
test_kernels-loop-inner_147:
  build:
    cflags: "-O  -fopenacc -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/kernels-loop-inner.f95'
    sources:
      binary: kernels-loop-inner.s
  group: GRPSERIAL
test_kernels-loop-inner_46:
  build:
    cflags: "-O  -fopenacc -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/kernels-loop-inner.f95'
    sources:
      binary: kernels-loop-inner.s
  group: GRPSERIAL
test_kernels-loop-n_148:
  build:
    cflags: "-O  -fopenacc -O2 -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/kernels-loop-n.f95'
    sources:
      binary: kernels-loop-n.s
  group: GRPSERIAL
test_kernels-loop-n_47:
  build:
    cflags: "-O  -fopenacc -O2 -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/kernels-loop-n.f95'
    sources:
      binary: kernels-loop-n.s
  group: GRPSERIAL
test_kernels-loop_149:
  build:
    cflags: "-O  -fopenacc -O2 -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/kernels-loop.f95'
    sources:
      binary: kernels-loop.s
  group: GRPSERIAL
test_kernels-loop_48:
  build:
    cflags: "-O  -fopenacc -O2 -fdump-tree-parloops1-all -fdump-tree-optimized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/kernels-loop.f95'
    sources:
      binary: kernels-loop.s
  group: GRPSERIAL
test_kernels-loops-adjacent_150:
  build:
    cflags: "-O  -fopenacc -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/kernels-loops-adjacent.f95'
    sources:
      binary: kernels-loops-adjacent.s
  group: GRPSERIAL
test_kernels-loops-adjacent_49:
  build:
    cflags: "-O  -fopenacc -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/kernels-loops-adjacent.f95'
    sources:
      binary: kernels-loops-adjacent.s
  group: GRPSERIAL
test_kernels-tree_151:
  build:
    cflags: "-O  -fopenacc -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/kernels-tree.f95'
    sources:
      binary: kernels-tree.s
  group: GRPSERIAL
test_kernels-tree_50:
  build:
    cflags: "-O  -fopenacc -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/kernels-tree.f95'
    sources:
      binary: kernels-tree.s
  group: GRPSERIAL
test_list_152:
  build:
    cflags: "-O  -fopenacc -fmax-errors=100\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/list.f95'
    sources:
      binary: list.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a POINTER
          nor an array")[^\n]*\n?)+'
      L105:
        expect: true
        expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("present on multiple
          clauses")[^\n]*\n?)+'
      L109:
        expect: true
        expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a POINTER
          nor an array")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("present on multiple
          clauses")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("present on multiple
          clauses")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("present on multiple
          clauses")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("present on multiple
          clauses")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("present on multiple
          clauses")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("present on multiple
          clauses")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a POINTER
          nor an array")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a POINTER
          nor an array")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a POINTER
          nor an array")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a POINTER
          nor an array")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
test_list_51:
  build:
    cflags: "-O  -fopenacc -fmax-errors=100\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/list.f95'
    sources:
      binary: list.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a POINTER
          nor an array")[^\n]*\n?)+'
      L105:
        expect: true
        expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("present on multiple
          clauses")[^\n]*\n?)+'
      L109:
        expect: true
        expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a POINTER
          nor an array")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("present on multiple
          clauses")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("present on multiple
          clauses")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("present on multiple
          clauses")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("present on multiple
          clauses")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("present on multiple
          clauses")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("present on multiple
          clauses")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a POINTER
          nor an array")[^\n]*\n?)+'
      L82:
        expect: true
        expr: '(^|\n)([^\n]+:82:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a POINTER
          nor an array")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a POINTER
          nor an array")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("neither a POINTER
          nor an array")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
test_literal_153:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/literal.f95'
    sources:
      binary: literal.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
test_literal_52:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/literal.f95'
    sources:
      binary: literal.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
      L23:
        expect: true
        expr: '(^|\n)([^\n]+:23:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
test_loop-1-2_154:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/loop-1-2.f95'
    sources:
      binary: loop-1-2.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constant positive
          integer")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Constant expression
          required")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not enough DO
          loops for collapsed")[^\n]*\n?)+'
      L118:
        expect: true
        expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("collapsed loops
          don.t form rectangular iteration space")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be a DO
          WHILE or DO without loop control")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be a
          DO WHILE or DO without loop control")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("EXIT statement")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("Deleted feature:
          Loop variable at .1. must be integer")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+:154:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ACC LOOP iteration
          variable must be of type integer")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("SEQ conflicts
          with INDEPENDENT")[^\n]*\n?)+'
      L163:
        expect: true
        expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ACC CACHE directive
          must be inside of loop")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be a DO
          WHILE or DO without loop control")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("EXIT statement")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be a DO
          WHILE or DO without loop control")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be a DO
          WHILE or DO without loop control")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("Deleted feature: Loop
          variable at .1. must be integer")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ACC LOOP iteration
          variable must be of type integer")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("Deleted feature: Loop
          variable at .1. must be integer")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ACC LOOP iteration
          variable must be of type integer")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("EXIT statement")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("EXIT statement")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Expected DO loop")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constant positive
          integer")[^\n]*\n?)+'
test_loop-1-2_53:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/loop-1-2.f95'
    sources:
      binary: loop-1-2.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constant positive
          integer")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Constant expression
          required")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not enough DO
          loops for collapsed")[^\n]*\n?)+'
      L118:
        expect: true
        expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("collapsed loops
          don.t form rectangular iteration space")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be a DO
          WHILE or DO without loop control")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be a
          DO WHILE or DO without loop control")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("EXIT statement")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("Deleted feature:
          Loop variable at .1. must be integer")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+:154:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ACC LOOP iteration
          variable must be of type integer")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("SEQ conflicts
          with INDEPENDENT")[^\n]*\n?)+'
      L163:
        expect: true
        expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ACC CACHE directive
          must be inside of loop")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be a DO
          WHILE or DO without loop control")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("EXIT statement")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be a DO
          WHILE or DO without loop control")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be a DO
          WHILE or DO without loop control")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("Deleted feature: Loop
          variable at .1. must be integer")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ACC LOOP iteration
          variable must be of type integer")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("Deleted feature: Loop
          variable at .1. must be integer")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ACC LOOP iteration
          variable must be of type integer")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("EXIT statement")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("EXIT statement")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Expected DO loop")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constant positive
          integer")[^\n]*\n?)+'
test_loop-1_155:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/loop-1.f95'
    sources:
      binary: loop-1.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constant positive
          integer")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Constant expression
          required")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not enough DO
          loops for collapsed")[^\n]*\n?)+'
      L118:
        expect: true
        expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("collapsed loops
          don.t form rectangular iteration space")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be a DO
          WHILE or DO without loop control")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be a
          DO WHILE or DO without loop control")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("EXIT statement")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("Deleted feature:
          Loop variable at .1. must be integer")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+:154:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ACC LOOP iteration
          variable must be of type integer")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("SEQ conflicts
          with INDEPENDENT")[^\n]*\n?)+'
      L163:
        expect: true
        expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ACC CACHE directive
          must be inside of loop")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be a DO
          WHILE or DO without loop control")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("EXIT statement")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be a DO
          WHILE or DO without loop control")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be a DO
          WHILE or DO without loop control")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("Deleted feature: Loop
          variable at .1. must be integer")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ACC LOOP iteration
          variable must be of type integer")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("Deleted feature: Loop
          variable at .1. must be integer")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ACC LOOP iteration
          variable must be of type integer")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("EXIT statement")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("EXIT statement")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Expected DO loop")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constant positive
          integer")[^\n]*\n?)+'
test_loop-1_54:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/loop-1.f95'
    sources:
      binary: loop-1.s
  group: GRPSERIAL
  validate:
    match:
      L100:
        expect: true
        expr: '(^|\n)([^\n]+:100:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constant positive
          integer")[^\n]*\n?)+'
      L104:
        expect: true
        expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Constant expression
          required")[^\n]*\n?)+'
      L108:
        expect: true
        expr: '(^|\n)([^\n]+:108:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not enough DO
          loops for collapsed")[^\n]*\n?)+'
      L118:
        expect: true
        expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("collapsed loops
          don.t form rectangular iteration space")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be a DO
          WHILE or DO without loop control")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be a
          DO WHILE or DO without loop control")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+:15:[^\n]*[0-9]+: (fatal )?error:[^\n]*("EXIT statement")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+(:153:)[^\n]*[0-9]+: warning:[^\n]*("Deleted feature:
          Loop variable at .1. must be integer")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+:154:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ACC LOOP iteration
          variable must be of type integer")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("SEQ conflicts
          with INDEPENDENT")[^\n]*\n?)+'
      L163:
        expect: true
        expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ACC CACHE directive
          must be inside of loop")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be a DO
          WHILE or DO without loop control")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("EXIT statement")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be a DO
          WHILE or DO without loop control")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be a DO
          WHILE or DO without loop control")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+(:35:)[^\n]*[0-9]+: warning:[^\n]*("Deleted feature: Loop
          variable at .1. must be integer")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ACC LOOP iteration
          variable must be of type integer")[^\n]*\n?)+'
      L42:
        expect: true
        expr: '(^|\n)([^\n]+(:42:)[^\n]*[0-9]+: warning:[^\n]*("Deleted feature: Loop
          variable at .1. must be integer")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("ACC LOOP iteration
          variable must be of type integer")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("EXIT statement")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("EXIT statement")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Expected DO loop")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+:96:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constant positive
          integer")[^\n]*\n?)+'
test_loop-2_156:
  build:
    cflags: "-O  -fopenacc -fmax-errors=100\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/loop-2.f95'
    sources:
      binary: loop-2.s
  group: GRPSERIAL
  validate:
    match:
      L107:
        expect: true
        expr: '(^|\n)([^\n]+:107:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L123:
        expect: true
        expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+(:146:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L149:
        expect: true
        expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constant expression")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+:152:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not enough DO
          loops for tiled")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("tiled loops
          don.t form rectangular iteration space")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("num arguments")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("num arguments")[^\n]*\n?)+'
      L210:
        expect: true
        expr: '(^|\n)([^\n]+:210:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not allowed")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L221:
        expect: true
        expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("num arguments")[^\n]*\n?)+'
      L224:
        expect: true
        expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("num arguments")[^\n]*\n?)+'
      L232:
        expect: true
        expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not allowed")[^\n]*\n?)+'
      L235:
        expect: true
        expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not allowed")[^\n]*\n?)+'
      L239:
        expect: true
        expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L249:
        expect: true
        expr: '(^|\n)([^\n]+:249:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length arguments")[^\n]*\n?)+'
      L252:
        expect: true
        expr: '(^|\n)([^\n]+:252:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length arguments")[^\n]*\n?)+'
      L257:
        expect: true
        expr: '(^|\n)([^\n]+:257:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not allowed")[^\n]*\n?)+'
      L260:
        expect: true
        expr: '(^|\n)([^\n]+:260:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not allowed")[^\n]*\n?)+'
      L263:
        expect: true
        expr: '(^|\n)([^\n]+:263:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not allowed")[^\n]*\n?)+'
      L267:
        expect: true
        expr: '(^|\n)([^\n]+:267:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L280:
        expect: true
        expr: '(^|\n)([^\n]+:280:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L283:
        expect: true
        expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L286:
        expect: true
        expr: '(^|\n)([^\n]+:286:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L289:
        expect: true
        expr: '(^|\n)([^\n]+:289:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L293:
        expect: true
        expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L296:
        expect: true
        expr: '(^|\n)([^\n]+:296:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L310:
        expect: true
        expr: '(^|\n)([^\n]+(:310:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L313:
        expect: true
        expr: '(^|\n)([^\n]+:313:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constant expression")[^\n]*\n?)+'
      L316:
        expect: true
        expr: '(^|\n)([^\n]+:316:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not enough DO
          loops for tiled")[^\n]*\n?)+'
      L323:
        expect: true
        expr: '(^|\n)([^\n]+:323:[^\n]*[0-9]+: (fatal )?error:[^\n]*("tiled loops
          don.t form rectangular iteration space")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not allowed")[^\n]*\n?)+'
      L370:
        expect: true
        expr: '(^|\n)([^\n]+:370:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L392:
        expect: true
        expr: '(^|\n)([^\n]+:392:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L420:
        expect: true
        expr: '(^|\n)([^\n]+:420:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L433:
        expect: true
        expr: '(^|\n)([^\n]+:433:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L436:
        expect: true
        expr: '(^|\n)([^\n]+:436:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L439:
        expect: true
        expr: '(^|\n)([^\n]+:439:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L442:
        expect: true
        expr: '(^|\n)([^\n]+:442:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L446:
        expect: true
        expr: '(^|\n)([^\n]+:446:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L449:
        expect: true
        expr: '(^|\n)([^\n]+:449:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L463:
        expect: true
        expr: '(^|\n)([^\n]+(:463:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L466:
        expect: true
        expr: '(^|\n)([^\n]+:466:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constant expression")[^\n]*\n?)+'
      L469:
        expect: true
        expr: '(^|\n)([^\n]+:469:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not enough DO
          loops for tiled")[^\n]*\n?)+'
      L476:
        expect: true
        expr: '(^|\n)([^\n]+:476:[^\n]*[0-9]+: (fatal )?error:[^\n]*("tiled loops
          don.t form rectangular iteration space")[^\n]*\n?)+'
      L504:
        expect: true
        expr: '(^|\n)([^\n]+:504:[^\n]*[0-9]+: (fatal )?error:[^\n]*("num arguments")[^\n]*\n?)+'
      L507:
        expect: true
        expr: '(^|\n)([^\n]+:507:[^\n]*[0-9]+: (fatal )?error:[^\n]*("num arguments")[^\n]*\n?)+'
      L522:
        expect: true
        expr: '(^|\n)([^\n]+:522:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L529:
        expect: true
        expr: '(^|\n)([^\n]+:529:[^\n]*[0-9]+: (fatal )?error:[^\n]*("num arguments")[^\n]*\n?)+'
      L532:
        expect: true
        expr: '(^|\n)([^\n]+:532:[^\n]*[0-9]+: (fatal )?error:[^\n]*("num arguments")[^\n]*\n?)+'
      L544:
        expect: true
        expr: '(^|\n)([^\n]+:544:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L554:
        expect: true
        expr: '(^|\n)([^\n]+:554:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length arguments")[^\n]*\n?)+'
      L557:
        expect: true
        expr: '(^|\n)([^\n]+:557:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length arguments")[^\n]*\n?)+'
      L572:
        expect: true
        expr: '(^|\n)([^\n]+:572:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L585:
        expect: true
        expr: '(^|\n)([^\n]+:585:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L588:
        expect: true
        expr: '(^|\n)([^\n]+:588:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not allowed")[^\n]*\n?)+'
      L591:
        expect: true
        expr: '(^|\n)([^\n]+:591:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L594:
        expect: true
        expr: '(^|\n)([^\n]+:594:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L598:
        expect: true
        expr: '(^|\n)([^\n]+:598:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L601:
        expect: true
        expr: '(^|\n)([^\n]+:601:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L615:
        expect: true
        expr: '(^|\n)([^\n]+(:615:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L618:
        expect: true
        expr: '(^|\n)([^\n]+:618:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constant expression")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not allowed")[^\n]*\n?)+'
      L621:
        expect: true
        expr: '(^|\n)([^\n]+:621:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not enough DO
          loops for tiled")[^\n]*\n?)+'
      L628:
        expect: true
        expr: '(^|\n)([^\n]+:628:[^\n]*[0-9]+: (fatal )?error:[^\n]*("tiled loops
          don.t form rectangular iteration space")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not allowed")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not allowed")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not allowed")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
test_loop-2_55:
  build:
    cflags: "-O  -fopenacc -fmax-errors=100\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/loop-2.f95'
    sources:
      binary: loop-2.s
  group: GRPSERIAL
  validate:
    match:
      L107:
        expect: true
        expr: '(^|\n)([^\n]+:107:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L120:
        expect: true
        expr: '(^|\n)([^\n]+:120:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L123:
        expect: true
        expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+(:146:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L149:
        expect: true
        expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constant expression")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+:152:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not enough DO
          loops for tiled")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("tiled loops
          don.t form rectangular iteration space")[^\n]*\n?)+'
      L190:
        expect: true
        expr: '(^|\n)([^\n]+:190:[^\n]*[0-9]+: (fatal )?error:[^\n]*("num arguments")[^\n]*\n?)+'
      L193:
        expect: true
        expr: '(^|\n)([^\n]+:193:[^\n]*[0-9]+: (fatal )?error:[^\n]*("num arguments")[^\n]*\n?)+'
      L210:
        expect: true
        expr: '(^|\n)([^\n]+:210:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not allowed")[^\n]*\n?)+'
      L214:
        expect: true
        expr: '(^|\n)([^\n]+:214:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L221:
        expect: true
        expr: '(^|\n)([^\n]+:221:[^\n]*[0-9]+: (fatal )?error:[^\n]*("num arguments")[^\n]*\n?)+'
      L224:
        expect: true
        expr: '(^|\n)([^\n]+:224:[^\n]*[0-9]+: (fatal )?error:[^\n]*("num arguments")[^\n]*\n?)+'
      L232:
        expect: true
        expr: '(^|\n)([^\n]+:232:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not allowed")[^\n]*\n?)+'
      L235:
        expect: true
        expr: '(^|\n)([^\n]+:235:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not allowed")[^\n]*\n?)+'
      L239:
        expect: true
        expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L249:
        expect: true
        expr: '(^|\n)([^\n]+:249:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length arguments")[^\n]*\n?)+'
      L252:
        expect: true
        expr: '(^|\n)([^\n]+:252:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length arguments")[^\n]*\n?)+'
      L257:
        expect: true
        expr: '(^|\n)([^\n]+:257:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not allowed")[^\n]*\n?)+'
      L260:
        expect: true
        expr: '(^|\n)([^\n]+:260:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not allowed")[^\n]*\n?)+'
      L263:
        expect: true
        expr: '(^|\n)([^\n]+:263:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not allowed")[^\n]*\n?)+'
      L267:
        expect: true
        expr: '(^|\n)([^\n]+:267:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L280:
        expect: true
        expr: '(^|\n)([^\n]+:280:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L283:
        expect: true
        expr: '(^|\n)([^\n]+:283:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L286:
        expect: true
        expr: '(^|\n)([^\n]+:286:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L289:
        expect: true
        expr: '(^|\n)([^\n]+:289:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L293:
        expect: true
        expr: '(^|\n)([^\n]+:293:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L296:
        expect: true
        expr: '(^|\n)([^\n]+:296:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L310:
        expect: true
        expr: '(^|\n)([^\n]+(:310:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L313:
        expect: true
        expr: '(^|\n)([^\n]+:313:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constant expression")[^\n]*\n?)+'
      L316:
        expect: true
        expr: '(^|\n)([^\n]+:316:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not enough DO
          loops for tiled")[^\n]*\n?)+'
      L323:
        expect: true
        expr: '(^|\n)([^\n]+:323:[^\n]*[0-9]+: (fatal )?error:[^\n]*("tiled loops
          don.t form rectangular iteration space")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not allowed")[^\n]*\n?)+'
      L370:
        expect: true
        expr: '(^|\n)([^\n]+:370:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L392:
        expect: true
        expr: '(^|\n)([^\n]+:392:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L420:
        expect: true
        expr: '(^|\n)([^\n]+:420:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L433:
        expect: true
        expr: '(^|\n)([^\n]+:433:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L436:
        expect: true
        expr: '(^|\n)([^\n]+:436:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L439:
        expect: true
        expr: '(^|\n)([^\n]+:439:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L442:
        expect: true
        expr: '(^|\n)([^\n]+:442:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L446:
        expect: true
        expr: '(^|\n)([^\n]+:446:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L449:
        expect: true
        expr: '(^|\n)([^\n]+:449:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L463:
        expect: true
        expr: '(^|\n)([^\n]+(:463:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L466:
        expect: true
        expr: '(^|\n)([^\n]+:466:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constant expression")[^\n]*\n?)+'
      L469:
        expect: true
        expr: '(^|\n)([^\n]+:469:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not enough DO
          loops for tiled")[^\n]*\n?)+'
      L476:
        expect: true
        expr: '(^|\n)([^\n]+:476:[^\n]*[0-9]+: (fatal )?error:[^\n]*("tiled loops
          don.t form rectangular iteration space")[^\n]*\n?)+'
      L504:
        expect: true
        expr: '(^|\n)([^\n]+:504:[^\n]*[0-9]+: (fatal )?error:[^\n]*("num arguments")[^\n]*\n?)+'
      L507:
        expect: true
        expr: '(^|\n)([^\n]+:507:[^\n]*[0-9]+: (fatal )?error:[^\n]*("num arguments")[^\n]*\n?)+'
      L522:
        expect: true
        expr: '(^|\n)([^\n]+:522:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L529:
        expect: true
        expr: '(^|\n)([^\n]+:529:[^\n]*[0-9]+: (fatal )?error:[^\n]*("num arguments")[^\n]*\n?)+'
      L532:
        expect: true
        expr: '(^|\n)([^\n]+:532:[^\n]*[0-9]+: (fatal )?error:[^\n]*("num arguments")[^\n]*\n?)+'
      L544:
        expect: true
        expr: '(^|\n)([^\n]+:544:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L554:
        expect: true
        expr: '(^|\n)([^\n]+:554:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length arguments")[^\n]*\n?)+'
      L557:
        expect: true
        expr: '(^|\n)([^\n]+:557:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length arguments")[^\n]*\n?)+'
      L572:
        expect: true
        expr: '(^|\n)([^\n]+:572:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L585:
        expect: true
        expr: '(^|\n)([^\n]+:585:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L588:
        expect: true
        expr: '(^|\n)([^\n]+:588:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not allowed")[^\n]*\n?)+'
      L591:
        expect: true
        expr: '(^|\n)([^\n]+:591:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L594:
        expect: true
        expr: '(^|\n)([^\n]+:594:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L598:
        expect: true
        expr: '(^|\n)([^\n]+:598:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L601:
        expect: true
        expr: '(^|\n)([^\n]+:601:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L615:
        expect: true
        expr: '(^|\n)([^\n]+(:615:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L618:
        expect: true
        expr: '(^|\n)([^\n]+:618:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constant expression")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not allowed")[^\n]*\n?)+'
      L621:
        expect: true
        expr: '(^|\n)([^\n]+:621:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not enough DO
          loops for tiled")[^\n]*\n?)+'
      L628:
        expect: true
        expr: '(^|\n)([^\n]+:628:[^\n]*[0-9]+: (fatal )?error:[^\n]*("tiled loops
          don.t form rectangular iteration space")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+:84:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not allowed")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not allowed")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not allowed")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("conflicts with")[^\n]*\n?)+'
test_loop-3-2_157:
  build:
    cflags: "-O  -fopenacc -std=f2008\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/loop-3-2.f95'
    sources:
      binary: loop-3-2.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("Redundant")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("EXIT statement")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("CYCLE statement")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("CYCLE statement")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("EXIT statement")[^\n]*\n?)+'
test_loop-3-2_56:
  build:
    cflags: "-O  -fopenacc -std=f2008\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/loop-3-2.f95'
    sources:
      binary: loop-3-2.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("Redundant")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("EXIT statement")[^\n]*\n?)+'
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*("CYCLE statement")[^\n]*\n?)+'
      L53:
        expect: true
        expr: '(^|\n)([^\n]+:53:[^\n]*[0-9]+: (fatal )?error:[^\n]*("CYCLE statement")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("EXIT statement")[^\n]*\n?)+'
test_loop-3_158:
  build:
    cflags: "-O  -fopenacc -std=f2008\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/loop-3.f95'
    sources:
      binary: loop-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("Redundant")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("EXIT statement")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("CYCLE statement")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("CYCLE statement")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("EXIT statement")[^\n]*\n?)+'
test_loop-3_57:
  build:
    cflags: "-O  -fopenacc -std=f2008\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/loop-3.f95'
    sources:
      binary: loop-3.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("Redundant")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+:25:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("EXIT statement")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("CYCLE statement")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("CYCLE statement")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*("EXIT statement")[^\n]*\n?)+'
test_loop-4_159:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/loop-4.f95'
    sources:
      binary: loop-4.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop directive
          must be associated with an OpenACC compute region")[^\n]*\n?)+'
test_loop-4_58:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/loop-4.f95'
    sources:
      binary: loop-4.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("loop directive
          must be associated with an OpenACC compute region")[^\n]*\n?)+'
test_loop-5_160:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/loop-5.f95'
    sources:
      binary: loop-5.s
  group: GRPSERIAL
  validate:
    match:
      L132:
        expect: true
        expr: '(^|\n)([^\n]+(:132:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OpenACC construct
          inside of non-OpenACC region")[^\n]*\n?)+'
      L191:
        expect: true
        expr: '(^|\n)([^\n]+:191:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OpenACC construct
          inside of non-OpenACC region")[^\n]*\n?)+'
      L194:
        expect: true
        expr: '(^|\n)([^\n]+:194:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OpenACC construct
          inside of non-OpenACC region")[^\n]*\n?)+'
      L213:
        expect: true
        expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OpenACC construct
          inside of non-OpenACC region")[^\n]*\n?)+'
      L216:
        expect: true
        expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OpenACC construct
          inside of non-OpenACC region")[^\n]*\n?)+'
      L219:
        expect: true
        expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OpenACC construct
          inside of non-OpenACC region")[^\n]*\n?)+'
      L245:
        expect: true
        expr: '(^|\n)([^\n]+(:245:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L281:
        expect: true
        expr: '(^|\n)([^\n]+:281:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OpenACC construct
          inside of non-OpenACC region")[^\n]*\n?)+'
      L291:
        expect: true
        expr: '(^|\n)([^\n]+:291:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OpenACC construct
          inside of non-OpenACC region")[^\n]*\n?)+'
      L294:
        expect: true
        expr: '(^|\n)([^\n]+:294:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OpenACC construct
          inside of non-OpenACC region")[^\n]*\n?)+'
      L304:
        expect: true
        expr: '(^|\n)([^\n]+:304:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OpenACC construct
          inside of non-OpenACC region")[^\n]*\n?)+'
      L307:
        expect: true
        expr: '(^|\n)([^\n]+:307:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OpenACC construct
          inside of non-OpenACC region")[^\n]*\n?)+'
      L310:
        expect: true
        expr: '(^|\n)([^\n]+:310:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OpenACC construct
          inside of non-OpenACC region")[^\n]*\n?)+'
      L336:
        expect: true
        expr: '(^|\n)([^\n]+(:336:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
test_loop-5_59:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/loop-5.f95'
    sources:
      binary: loop-5.s
  group: GRPSERIAL
  validate:
    match:
      L132:
        expect: true
        expr: '(^|\n)([^\n]+(:132:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OpenACC construct
          inside of non-OpenACC region")[^\n]*\n?)+'
      L191:
        expect: true
        expr: '(^|\n)([^\n]+:191:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OpenACC construct
          inside of non-OpenACC region")[^\n]*\n?)+'
      L194:
        expect: true
        expr: '(^|\n)([^\n]+:194:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OpenACC construct
          inside of non-OpenACC region")[^\n]*\n?)+'
      L213:
        expect: true
        expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OpenACC construct
          inside of non-OpenACC region")[^\n]*\n?)+'
      L216:
        expect: true
        expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OpenACC construct
          inside of non-OpenACC region")[^\n]*\n?)+'
      L219:
        expect: true
        expr: '(^|\n)([^\n]+:219:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OpenACC construct
          inside of non-OpenACC region")[^\n]*\n?)+'
      L245:
        expect: true
        expr: '(^|\n)([^\n]+(:245:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L281:
        expect: true
        expr: '(^|\n)([^\n]+:281:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OpenACC construct
          inside of non-OpenACC region")[^\n]*\n?)+'
      L291:
        expect: true
        expr: '(^|\n)([^\n]+:291:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OpenACC construct
          inside of non-OpenACC region")[^\n]*\n?)+'
      L294:
        expect: true
        expr: '(^|\n)([^\n]+:294:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OpenACC construct
          inside of non-OpenACC region")[^\n]*\n?)+'
      L304:
        expect: true
        expr: '(^|\n)([^\n]+:304:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OpenACC construct
          inside of non-OpenACC region")[^\n]*\n?)+'
      L307:
        expect: true
        expr: '(^|\n)([^\n]+:307:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OpenACC construct
          inside of non-OpenACC region")[^\n]*\n?)+'
      L310:
        expect: true
        expr: '(^|\n)([^\n]+:310:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OpenACC construct
          inside of non-OpenACC region")[^\n]*\n?)+'
      L336:
        expect: true
        expr: '(^|\n)([^\n]+(:336:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L96:
        expect: true
        expr: '(^|\n)([^\n]+(:96:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
test_loop-6_161:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/loop-6.f95'
    sources:
      binary: loop-6.s
  group: GRPSERIAL
  validate:
    match:
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length arguments")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length arguments")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length arguments")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length arguments")[^\n]*\n?)+'
test_loop-6_60:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/loop-6.f95'
    sources:
      binary: loop-6.s
  group: GRPSERIAL
  validate:
    match:
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length arguments")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+:47:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length arguments")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length arguments")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("length arguments")[^\n]*\n?)+'
test_loop-7_162:
  build:
    cflags: "-O  -fopenacc -fmax-errors=100\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/loop-7.f95'
    sources:
      binary: loop-7.s
  group: GRPSERIAL
  validate:
    match:
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
test_loop-7_61:
  build:
    cflags: "-O  -fopenacc -fmax-errors=100\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/loop-7.f95'
    sources:
      binary: loop-7.s
  group: GRPSERIAL
  validate:
    match:
      L110:
        expect: true
        expr: '(^|\n)([^\n]+:110:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character")[^\n]*\n?)+'
      L21:
        expect: true
        expr: '(^|\n)([^\n]+:21:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L36:
        expect: true
        expr: '(^|\n)([^\n]+:36:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L48:
        expect: true
        expr: '(^|\n)([^\n]+:48:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L76:
        expect: true
        expr: '(^|\n)([^\n]+:76:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character")[^\n]*\n?)+'
      L98:
        expect: true
        expr: '(^|\n)([^\n]+:98:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
test_loop-tree-1_163:
  build:
    cflags: "-O  -fopenacc -fdump-tree-original -fdump-tree-gimple -std=f2008\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/loop-tree-1.f90'
    sources:
      binary: loop-tree-1.s
  group: GRPSERIAL
test_loop-tree-1_62:
  build:
    cflags: "-O  -fopenacc -fdump-tree-original -fdump-tree-gimple -std=f2008\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/loop-tree-1.f90'
    sources:
      binary: loop-tree-1.s
  group: GRPSERIAL
test_multi-clause_164:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/multi-clause.f90'
    sources:
      binary: multi-clause.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Symbol \''j\''
          present on multiple clauses")[^\n]*\n?)+'
test_multi-clause_63:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/multi-clause.f90'
    sources:
      binary: multi-clause.s
  group: GRPSERIAL
  validate:
    match:
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Symbol \''j\''
          present on multiple clauses")[^\n]*\n?)+'
test_nested-function-1_165:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/nested-function-1.f90'
    sources:
      binary: nested-function-1.s
  group: GRPSERIAL
test_nested-function-1_64:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/nested-function-1.f90'
    sources:
      binary: nested-function-1.s
  group: GRPSERIAL
test_omp-fixed_166:
  build:
    cflags: "-O  -fopenacc -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/omp-fixed.f'
    sources:
      binary: omp-fixed.s
  group: GRPSERIAL
  validate:
    match:
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Wrong OpenACC
          continuation")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Wrong OpenMP
          continuation")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive cannot
          be specified within")[^\n]*\n?)+'
test_omp-fixed_65:
  build:
    cflags: "-O  -fopenacc -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/omp-fixed.f'
    sources:
      binary: omp-fixed.s
  group: GRPSERIAL
  validate:
    match:
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Wrong OpenACC
          continuation")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Wrong OpenMP
          continuation")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("directive cannot
          be specified within")[^\n]*\n?)+'
test_omp_167:
  build:
    cflags: "-O  -fopenacc -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/omp.f95'
    sources:
      binary: omp.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be specified")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be specified")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Expected DO loop")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be specified")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be specified")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Wrong OpenACC
          continuation")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Wrong OpenMP
          continuation")[^\n]*\n?)+'
test_omp_66:
  build:
    cflags: "-O  -fopenacc -fopenmp\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/omp.f95'
    sources:
      binary: omp.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be specified")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be specified")[^\n]*\n?)+'
      L30:
        expect: true
        expr: '(^|\n)([^\n]+:30:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Expected DO loop")[^\n]*\n?)+'
      L50:
        expect: true
        expr: '(^|\n)([^\n]+:50:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be specified")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("cannot be specified")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Wrong OpenACC
          continuation")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Wrong OpenMP
          continuation")[^\n]*\n?)+'
test_parallel-kernels-clauses_168:
  build:
    cflags: "-O  -fopenacc -fmax-errors=100\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/parallel-kernels-clauses.f95'
    sources:
      binary: parallel-kernels-clauses.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
test_parallel-kernels-clauses_67:
  build:
    cflags: "-O  -fopenacc -fmax-errors=100\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/parallel-kernels-clauses.f95'
    sources:
      binary: parallel-kernels-clauses.s
  group: GRPSERIAL
  validate:
    match:
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+:20:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character")[^\n]*\n?)+'
      L38:
        expect: true
        expr: '(^|\n)([^\n]+:38:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character")[^\n]*\n?)+'
      L40:
        expect: true
        expr: '(^|\n)([^\n]+:40:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L41:
        expect: true
        expr: '(^|\n)([^\n]+:41:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L44:
        expect: true
        expr: '(^|\n)([^\n]+:44:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L68:
        expect: true
        expr: '(^|\n)([^\n]+:68:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L86:
        expect: true
        expr: '(^|\n)([^\n]+:86:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L88:
        expect: true
        expr: '(^|\n)([^\n]+:88:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+:94:[^\n]*[0-9]+: (fatal )?error:[^\n]*("INTEGER")[^\n]*\n?)+'
test_parallel-kernels-regions_169:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/parallel-kernels-regions.f95'
    sources:
      binary: parallel-kernels-regions.s
  group: GRPSERIAL
  validate:
    match:
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".data. construct
          inside of .parallel. region")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".data. construct
          inside of .kernels. region")[^\n]*\n?)+'
test_parallel-kernels-regions_68:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/parallel-kernels-regions.f95'
    sources:
      binary: parallel-kernels-regions.s
  group: GRPSERIAL
  validate:
    match:
      L46:
        expect: true
        expr: '(^|\n)([^\n]+:46:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".data. construct
          inside of .parallel. region")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+:51:[^\n]*[0-9]+: (fatal )?error:[^\n]*(".data. construct
          inside of .kernels. region")[^\n]*\n?)+'
test_parallel-tree_170:
  build:
    cflags: "-O  -fopenacc -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/parallel-tree.f95'
    sources:
      binary: parallel-tree.s
  group: GRPSERIAL
test_parallel-tree_69:
  build:
    cflags: "-O  -fopenacc -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/parallel-tree.f95'
    sources:
      binary: parallel-tree.s
  group: GRPSERIAL
test_parameter_171:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/parameter.f95'
    sources:
      binary: parameter.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not a variable")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not a variable")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not a variable")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not a variable")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not a variable")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not a variable")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not a variable")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not a variable")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not a variable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("PARAMETER")[^\n]*\n?)+'
test_parameter_70:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/parameter.f95'
    sources:
      binary: parameter.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not a variable")[^\n]*\n?)+'
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not a variable")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+:14:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not a variable")[^\n]*\n?)+'
      L16:
        expect: true
        expr: '(^|\n)([^\n]+:16:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not a variable")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not a variable")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not a variable")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not a variable")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+:28:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not a variable")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not a variable")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+:9:[^\n]*[0-9]+: (fatal )?error:[^\n]*("PARAMETER")[^\n]*\n?)+'
test_pr71704_172:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/pr71704.f90'
    sources:
      binary: pr71704.s
  group: GRPSERIAL
test_pr71704_71:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/pr71704.f90'
    sources:
      binary: pr71704.s
  group: GRPSERIAL
test_pr72743_173:
  build:
    cflags: "-O  -fopenacc -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/pr72743.f90'
    sources:
      binary: pr72743.s
  group: GRPSERIAL
test_pr72743_72:
  build:
    cflags: "-O  -fopenacc -O2\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/pr72743.f90'
    sources:
      binary: pr72743.s
  group: GRPSERIAL
test_pr78027_174:
  build:
    cflags: "-O  -fopenacc -fopenmp -O2 -fdump-ipa-icf\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/pr78027.f90'
    sources:
      binary: pr78027.s
  group: GRPSERIAL
test_pr78027_73:
  build:
    cflags: "-O  -fopenacc -fopenmp -O2 -fdump-ipa-icf\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/pr78027.f90'
    sources:
      binary: pr78027.s
  group: GRPSERIAL
test_private-1_175:
  build:
    cflags: "-O  -fopenacc -fdump-tree-omplower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/private-1.f95'
    sources:
      binary: private-1.s
  group: GRPSERIAL
test_private-1_74:
  build:
    cflags: "-O  -fopenacc -fdump-tree-omplower\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/private-1.f95'
    sources:
      binary: private-1.s
  group: GRPSERIAL
test_private-2_176:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/private-2.f95'
    sources:
      binary: private-2.s
  group: GRPSERIAL
test_private-2_75:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/private-2.f95'
    sources:
      binary: private-2.s
  group: GRPSERIAL
test_private-3_177:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/private-3.f95'
    sources:
      binary: private-3.s
  group: GRPSERIAL
test_private-3_76:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/private-3.f95'
    sources:
      binary: private-3.s
  group: GRPSERIAL
test_pure-elemental-procedures_178:
  build:
    cflags: "-O  -fopenacc -std=f2008 -fcoarray=single\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/pure-elemental-procedures.f95'
    sources:
      binary: pure-elemental-procedures.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may not appear
          in PURE procedures")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may not appear
          in PURE procedures")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may not appear
          in PURE procedures")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("CRITICAL block
          inside of")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may not appear
          in PURE procedures")[^\n]*\n?)+'
test_pure-elemental-procedures_77:
  build:
    cflags: "-O  -fopenacc -std=f2008 -fcoarray=single\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/pure-elemental-procedures.f95'
    sources:
      binary: pure-elemental-procedures.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+:12:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may not appear
          in PURE procedures")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may not appear
          in PURE procedures")[^\n]*\n?)+'
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may not appear
          in PURE procedures")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("CRITICAL block
          inside of")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("may not appear
          in PURE procedures")[^\n]*\n?)+'
test_reduction-2_179:
  build:
    cflags: "-O  -fopenacc -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/reduction-2.f95'
    sources:
      binary: reduction-2.s
  group: GRPSERIAL
test_reduction-2_78:
  build:
    cflags: "-O  -fopenacc -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/reduction-2.f95'
    sources:
      binary: reduction-2.s
  group: GRPSERIAL
test_reduction-3_180:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/reduction-3.f95'
    sources:
      binary: reduction-3.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid private
          reduction on .i1.")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid private
          reduction on .i2.")[^\n]*\n?)+'
test_reduction-3_79:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/reduction-3.f95'
    sources:
      binary: reduction-3.s
  group: GRPSERIAL
  validate:
    match:
      L6:
        expect: true
        expr: '(^|\n)([^\n]+:6:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid private
          reduction on .i1.")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid private
          reduction on .i2.")[^\n]*\n?)+'
test_reduction-promotions_181:
  build:
    cflags: "-O  -fopenacc -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/reduction-promotions.f90'
    sources:
      binary: reduction-promotions.s
  group: GRPSERIAL
  validate:
    match:
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("incompatible data
          clause")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("incompatible data
          clause")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("incompatible data
          clause")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("incompatible data
          clause")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("incompatible data
          clause")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("incompatible data
          clause")[^\n]*\n?)+'
test_reduction-promotions_80:
  build:
    cflags: "-O  -fopenacc -fdump-tree-gimple\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/reduction-promotions.f90'
    sources:
      binary: reduction-promotions.s
  group: GRPSERIAL
  validate:
    match:
      L22:
        expect: true
        expr: '(^|\n)([^\n]+(:22:)[^\n]*[0-9]+: warning:[^\n]*("incompatible data
          clause")[^\n]*\n?)+'
      L25:
        expect: true
        expr: '(^|\n)([^\n]+(:25:)[^\n]*[0-9]+: warning:[^\n]*("incompatible data
          clause")[^\n]*\n?)+'
      L28:
        expect: true
        expr: '(^|\n)([^\n]+(:28:)[^\n]*[0-9]+: warning:[^\n]*("incompatible data
          clause")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+(:31:)[^\n]*[0-9]+: warning:[^\n]*("incompatible data
          clause")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+(:34:)[^\n]*[0-9]+: warning:[^\n]*("incompatible data
          clause")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+(:37:)[^\n]*[0-9]+: warning:[^\n]*("incompatible data
          clause")[^\n]*\n?)+'
test_reduction_182:
  build:
    cflags: "-O  -fopenacc -fmax-errors=100\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/reduction.f95'
    sources:
      binary: reduction.s
  group: GRPSERIAL
  validate:
    match:
      L101:
        expect: true
        expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE
          REDUCTION min not found for type COMPLEX")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE
          REDUCTION max not found for type COMPLEX")[^\n]*\n?)+'
      L105:
        expect: true
        expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE
          REDUCTION max not found for type LOGICAL")[^\n]*\n?)+'
      L107:
        expect: true
        expr: '(^|\n)([^\n]+:107:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE
          REDUCTION min not found for type LOGICAL")[^\n]*\n?)+'
      L109:
        expect: true
        expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE
          REDUCTION max not found for type CHARACTER")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE
          REDUCTION min not found for type TYPE")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE
          REDUCTION max not found for type TYPE")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE
          REDUCTION iand not found for type REAL")[^\n]*\n?)+'
      L117:
        expect: true
        expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE
          REDUCTION ior not found for type REAL")[^\n]*\n?)+'
      L119:
        expect: true
        expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE
          REDUCTION ieor not found for type REAL")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE
          REDUCTION ior not found for type REAL")[^\n]*\n?)+'
      L123:
        expect: true
        expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE
          REDUCTION iand not found for type COMPLEX")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE
          REDUCTION ior not found for type COMPLEX")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE
          REDUCTION ieor not found for type LOGICAL")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+:129:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE
          REDUCTION iand not found for type LOGICAL")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE
          REDUCTION ior not found for type CHARACTER")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+:133:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE
          REDUCTION ieor not found for type TYPE")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE
          REDUCTION iand not found for type TYPE")[^\n]*\n?)+'
      L140:
        expect: true
        expr: '(^|\n)([^\n]+:140:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''ia2\''
          is not permitted in reduction")[^\n]*\n?)+'
      L141:
        expect: true
        expr: '(^|\n)([^\n]+:141:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''ra1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+:142:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''ca1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L143:
        expect: true
        expr: '(^|\n)([^\n]+:143:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''da1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+:144:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''la1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L145:
        expect: true
        expr: '(^|\n)([^\n]+:145:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''aa1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''ia1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''la1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''ta1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L149:
        expect: true
        expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''ia2\''
          is not permitted in reduction")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''ra1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''da1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+:152:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''ca1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''ta1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+:154:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''ca1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+:155:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''la1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''ta1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''ra1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''da1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''ca1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L160:
        expect: true
        expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''la1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L161:
        expect: true
        expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''ta1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("POINTER object")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed size")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE REDUCTION
          \\\\+ not found for type LOGICAL")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE REDUCTION
          \\\\* not found for type LOGICAL")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE REDUCTION
          - not found for type CHARACTER")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE REDUCTION
          \\\\+ not found for type TYPE")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE REDUCTION
          \\\\* not found for type TYPE")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE REDUCTION
          \\\\.and\\\\. not found for type INTEGER")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE REDUCTION
          \\\\.or\\\\. not found for type INTEGER")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE REDUCTION
          \\\\.eqv\\\\. not found for type REAL")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE REDUCTION
          \\\\.neqv\\\\. not found for type REAL")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE REDUCTION
          \\\\.and\\\\. not found for type REAL")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE REDUCTION
          \\\\.or\\\\. not found for type REAL")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE REDUCTION
          \\\\.eqv\\\\. not found for type COMPLEX")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE REDUCTION
          \\\\.neqv\\\\. not found for type COMPLEX")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE REDUCTION
          \\\\.and\\\\. not found for type CHARACTER")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE REDUCTION
          \\\\.or\\\\. not found for type TYPE")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE REDUCTION
          \\\\.eqv\\\\. not found for type TYPE")[^\n]*\n?)+'
test_reduction_81:
  build:
    cflags: "-O  -fopenacc -fmax-errors=100\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/reduction.f95'
    sources:
      binary: reduction.s
  group: GRPSERIAL
  validate:
    match:
      L101:
        expect: true
        expr: '(^|\n)([^\n]+:101:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE
          REDUCTION min not found for type COMPLEX")[^\n]*\n?)+'
      L103:
        expect: true
        expr: '(^|\n)([^\n]+:103:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE
          REDUCTION max not found for type COMPLEX")[^\n]*\n?)+'
      L105:
        expect: true
        expr: '(^|\n)([^\n]+:105:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE
          REDUCTION max not found for type LOGICAL")[^\n]*\n?)+'
      L107:
        expect: true
        expr: '(^|\n)([^\n]+:107:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE
          REDUCTION min not found for type LOGICAL")[^\n]*\n?)+'
      L109:
        expect: true
        expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE
          REDUCTION max not found for type CHARACTER")[^\n]*\n?)+'
      L111:
        expect: true
        expr: '(^|\n)([^\n]+:111:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE
          REDUCTION min not found for type TYPE")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+:113:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE
          REDUCTION max not found for type TYPE")[^\n]*\n?)+'
      L115:
        expect: true
        expr: '(^|\n)([^\n]+:115:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE
          REDUCTION iand not found for type REAL")[^\n]*\n?)+'
      L117:
        expect: true
        expr: '(^|\n)([^\n]+:117:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE
          REDUCTION ior not found for type REAL")[^\n]*\n?)+'
      L119:
        expect: true
        expr: '(^|\n)([^\n]+:119:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE
          REDUCTION ieor not found for type REAL")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE
          REDUCTION ior not found for type REAL")[^\n]*\n?)+'
      L123:
        expect: true
        expr: '(^|\n)([^\n]+:123:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE
          REDUCTION iand not found for type COMPLEX")[^\n]*\n?)+'
      L125:
        expect: true
        expr: '(^|\n)([^\n]+:125:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE
          REDUCTION ior not found for type COMPLEX")[^\n]*\n?)+'
      L127:
        expect: true
        expr: '(^|\n)([^\n]+:127:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE
          REDUCTION ieor not found for type LOGICAL")[^\n]*\n?)+'
      L129:
        expect: true
        expr: '(^|\n)([^\n]+:129:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE
          REDUCTION iand not found for type LOGICAL")[^\n]*\n?)+'
      L131:
        expect: true
        expr: '(^|\n)([^\n]+:131:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE
          REDUCTION ior not found for type CHARACTER")[^\n]*\n?)+'
      L133:
        expect: true
        expr: '(^|\n)([^\n]+:133:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE
          REDUCTION ieor not found for type TYPE")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE
          REDUCTION iand not found for type TYPE")[^\n]*\n?)+'
      L140:
        expect: true
        expr: '(^|\n)([^\n]+:140:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''ia2\''
          is not permitted in reduction")[^\n]*\n?)+'
      L141:
        expect: true
        expr: '(^|\n)([^\n]+:141:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''ra1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+:142:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''ca1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L143:
        expect: true
        expr: '(^|\n)([^\n]+:143:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''da1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L144:
        expect: true
        expr: '(^|\n)([^\n]+:144:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''la1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L145:
        expect: true
        expr: '(^|\n)([^\n]+:145:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''aa1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L146:
        expect: true
        expr: '(^|\n)([^\n]+:146:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''ia1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''la1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L148:
        expect: true
        expr: '(^|\n)([^\n]+:148:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''ta1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L149:
        expect: true
        expr: '(^|\n)([^\n]+:149:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''ia2\''
          is not permitted in reduction")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''ra1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L151:
        expect: true
        expr: '(^|\n)([^\n]+:151:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''da1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L152:
        expect: true
        expr: '(^|\n)([^\n]+:152:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''ca1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''ta1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L154:
        expect: true
        expr: '(^|\n)([^\n]+:154:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''ca1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L155:
        expect: true
        expr: '(^|\n)([^\n]+:155:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''la1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L156:
        expect: true
        expr: '(^|\n)([^\n]+:156:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''ta1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L157:
        expect: true
        expr: '(^|\n)([^\n]+:157:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''ra1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L158:
        expect: true
        expr: '(^|\n)([^\n]+:158:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''da1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L159:
        expect: true
        expr: '(^|\n)([^\n]+:159:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''ca1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L160:
        expect: true
        expr: '(^|\n)([^\n]+:160:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''la1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L161:
        expect: true
        expr: '(^|\n)([^\n]+:161:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array \''ta1\''
          is not permitted in reduction")[^\n]*\n?)+'
      L61:
        expect: true
        expr: '(^|\n)([^\n]+:61:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L62:
        expect: true
        expr: '(^|\n)([^\n]+:62:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("POINTER object")[^\n]*\n?)+'
      L67:
        expect: true
        expr: '(^|\n)([^\n]+:67:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Assumed size")[^\n]*\n?)+'
      L69:
        expect: true
        expr: '(^|\n)([^\n]+:69:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE REDUCTION
          \\\\+ not found for type LOGICAL")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE REDUCTION
          \\\\* not found for type LOGICAL")[^\n]*\n?)+'
      L73:
        expect: true
        expr: '(^|\n)([^\n]+:73:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE REDUCTION
          - not found for type CHARACTER")[^\n]*\n?)+'
      L75:
        expect: true
        expr: '(^|\n)([^\n]+:75:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE REDUCTION
          \\\\+ not found for type TYPE")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE REDUCTION
          \\\\* not found for type TYPE")[^\n]*\n?)+'
      L79:
        expect: true
        expr: '(^|\n)([^\n]+:79:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE REDUCTION
          \\\\.and\\\\. not found for type INTEGER")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+:81:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE REDUCTION
          \\\\.or\\\\. not found for type INTEGER")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE REDUCTION
          \\\\.eqv\\\\. not found for type REAL")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE REDUCTION
          \\\\.neqv\\\\. not found for type REAL")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE REDUCTION
          \\\\.and\\\\. not found for type REAL")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE REDUCTION
          \\\\.or\\\\. not found for type REAL")[^\n]*\n?)+'
      L91:
        expect: true
        expr: '(^|\n)([^\n]+:91:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE REDUCTION
          \\\\.eqv\\\\. not found for type COMPLEX")[^\n]*\n?)+'
      L93:
        expect: true
        expr: '(^|\n)([^\n]+:93:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE REDUCTION
          \\\\.neqv\\\\. not found for type COMPLEX")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE REDUCTION
          \\\\.and\\\\. not found for type CHARACTER")[^\n]*\n?)+'
      L97:
        expect: true
        expr: '(^|\n)([^\n]+:97:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE REDUCTION
          \\\\.or\\\\. not found for type TYPE")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("OMP DECLARE REDUCTION
          \\\\.eqv\\\\. not found for type TYPE")[^\n]*\n?)+'
test_routine-1_183:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/routine-1.f90'
    sources:
      binary: routine-1.s
  group: GRPSERIAL
  validate:
    match:
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          ROUTINE")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          ROUTINE")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          ROUTINE")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error in
          \\\\\\!\\\\\\$ACC ROUTINE \\\\\\( NAME \\\\\\)")[^\n]*\n?)+'
test_routine-1_82:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/routine-1.f90'
    sources:
      binary: routine-1.s
  group: GRPSERIAL
  validate:
    match:
      L24:
        expect: true
        expr: '(^|\n)([^\n]+:24:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          ROUTINE")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          ROUTINE")[^\n]*\n?)+'
      L7:
        expect: true
        expr: '(^|\n)([^\n]+:7:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          ROUTINE")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error in
          \\\\\\!\\\\\\$ACC ROUTINE \\\\\\( NAME \\\\\\)")[^\n]*\n?)+'
test_routine-2_184:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/routine-2.f90'
    sources:
      binary: routine-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          ROUTINE")[^\n]*\n?)+'
test_routine-2_83:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/routine-2.f90'
    sources:
      binary: routine-2.s
  group: GRPSERIAL
  validate:
    match:
      L10:
        expect: true
        expr: '(^|\n)([^\n]+:10:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected \\\\\\!\\\\\\$ACC
          ROUTINE")[^\n]*\n?)+'
test_routine-3_185:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/routine-3.f90'
    sources:
      binary: routine-3.s
  group: GRPSERIAL
test_routine-3_84:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/routine-3.f90'
    sources:
      binary: routine-3.s
  group: GRPSERIAL
test_routine-4_186:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/routine-4.f90'
    sources:
      binary: routine-4.s
  group: GRPSERIAL
  validate:
    match:
      L116:
        expect: true
        expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine call
          uses same")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("insufficient partitioning")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine call
          uses same")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine call
          uses same")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine call
          uses same")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine call
          uses same")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine call
          uses same")[^\n]*\n?)+'
test_routine-4_85:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/routine-4.f90'
    sources:
      binary: routine-4.s
  group: GRPSERIAL
  validate:
    match:
      L116:
        expect: true
        expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine call
          uses same")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("insufficient partitioning")[^\n]*\n?)+'
      L54:
        expect: true
        expr: '(^|\n)([^\n]+:54:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine call
          uses same")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine call
          uses same")[^\n]*\n?)+'
      L64:
        expect: true
        expr: '(^|\n)([^\n]+:64:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine call
          uses same")[^\n]*\n?)+'
      L85:
        expect: true
        expr: '(^|\n)([^\n]+:85:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine call
          uses same")[^\n]*\n?)+'
      L90:
        expect: true
        expr: '(^|\n)([^\n]+:90:[^\n]*[0-9]+: (fatal )?error:[^\n]*("routine call
          uses same")[^\n]*\n?)+'
test_routine-5_187:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/routine-5.f90'
    sources:
      binary: routine-5.s
  group: GRPSERIAL
  validate:
    match:
      L104:
        expect: true
        expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed by
          containing routine")[^\n]*\n?)+'
      L109:
        expect: true
        expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed by
          containing routine")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed by
          containing routine")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed by
          containing routine")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed by
          containing routine")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("insufficient partitioning")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed by
          containing routine")[^\n]*\n?)+'
test_routine-5_86:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/routine-5.f90'
    sources:
      binary: routine-5.s
  group: GRPSERIAL
  validate:
    match:
      L104:
        expect: true
        expr: '(^|\n)([^\n]+:104:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed by
          containing routine")[^\n]*\n?)+'
      L109:
        expect: true
        expr: '(^|\n)([^\n]+:109:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed by
          containing routine")[^\n]*\n?)+'
      L45:
        expect: true
        expr: '(^|\n)([^\n]+:45:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed by
          containing routine")[^\n]*\n?)+'
      L72:
        expect: true
        expr: '(^|\n)([^\n]+:72:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed by
          containing routine")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed by
          containing routine")[^\n]*\n?)+'
      L94:
        expect: true
        expr: '(^|\n)([^\n]+(:94:)[^\n]*[0-9]+: warning:[^\n]*("insufficient partitioning")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("disallowed by
          containing routine")[^\n]*\n?)+'
test_routine-6_188:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/routine-6.f90'
    sources:
      binary: routine-6.s
  group: GRPSERIAL
  validate:
    match:
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("without list
          is allowed in interface")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid function
          name")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error
          in \\\\!\\\\\\$ACC ROUTINE \\\\( NAME \\\\) at \\\\(1\\\\), expecting .\\\\).
          after NAME")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error
          in \\\\!\\\\\\$ACC ROUTINE \\\\( NAME \\\\) at \\\\(1\\\\), expecting .\\\\).
          after NAME")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid function
          name")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid function
          name")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
test_routine-6_87:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/routine-6.f90'
    sources:
      binary: routine-6.s
  group: GRPSERIAL
  validate:
    match:
      L22:
        expect: true
        expr: '(^|\n)([^\n]+:22:[^\n]*[0-9]+: (fatal )?error:[^\n]*("without list
          is allowed in interface")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid function
          name")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error
          in \\\\!\\\\\\$ACC ROUTINE \\\\( NAME \\\\) at \\\\(1\\\\), expecting .\\\\).
          after NAME")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error
          in \\\\!\\\\\\$ACC ROUTINE \\\\( NAME \\\\) at \\\\(1\\\\), expecting .\\\\).
          after NAME")[^\n]*\n?)+'
      L59:
        expect: true
        expr: '(^|\n)([^\n]+:59:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid function
          name")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+:8:[^\n]*[0-9]+: (fatal )?error:[^\n]*("invalid function
          name")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
test_sentinel-free-form_189:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/sentinel-free-form.f95'
    sources:
      binary: sentinel-free-form.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          statement")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("followed by a space")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
test_sentinel-free-form_88:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/sentinel-free-form.f95'
    sources:
      binary: sentinel-free-form.s
  group: GRPSERIAL
  validate:
    match:
      L13:
        expect: true
        expr: '(^|\n)([^\n]+:13:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          statement")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("followed by a space")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unexpected")[^\n]*\n?)+'
test_several-directives_190:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/several-directives.f95'
    sources:
      binary: several-directives.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
test_several-directives_89:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/several-directives.f95'
    sources:
      binary: several-directives.s
  group: GRPSERIAL
  validate:
    match:
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
test_sie_191:
  build:
    cflags: "-O  -fopenacc -fmax-errors=100\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/sie.f95'
    sources:
      binary: sie.s
  group: GRPSERIAL
  validate:
    match:
      L110:
        expect: true
        expr: '(^|\n)([^\n]+(:110:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+(:113:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character
          in name")[^\n]*\n?)+'
      L118:
        expect: true
        expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+:124:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L139:
        expect: true
        expr: '(^|\n)([^\n]+(:139:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+(:142:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L145:
        expect: true
        expr: '(^|\n)([^\n]+:145:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character
          in name")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L169:
        expect: true
        expr: '(^|\n)([^\n]+(:169:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+(:172:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character
          in name")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L181:
        expect: true
        expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L201:
        expect: true
        expr: '(^|\n)([^\n]+(:201:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L204:
        expect: true
        expr: '(^|\n)([^\n]+(:204:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L207:
        expect: true
        expr: '(^|\n)([^\n]+:207:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character
          in name")[^\n]*\n?)+'
      L210:
        expect: true
        expr: '(^|\n)([^\n]+:210:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L213:
        expect: true
        expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L216:
        expect: true
        expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L233:
        expect: true
        expr: '(^|\n)([^\n]+(:233:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L236:
        expect: true
        expr: '(^|\n)([^\n]+(:236:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L239:
        expect: true
        expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character
          in name")[^\n]*\n?)+'
      L242:
        expect: true
        expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L245:
        expect: true
        expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L248:
        expect: true
        expr: '(^|\n)([^\n]+:248:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character
          in name")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character
          in name")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character
          in name")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
test_sie_90:
  build:
    cflags: "-O  -fopenacc -fmax-errors=100\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/sie.f95'
    sources:
      binary: sie.s
  group: GRPSERIAL
  validate:
    match:
      L110:
        expect: true
        expr: '(^|\n)([^\n]+(:110:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L113:
        expect: true
        expr: '(^|\n)([^\n]+(:113:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L116:
        expect: true
        expr: '(^|\n)([^\n]+:116:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character
          in name")[^\n]*\n?)+'
      L118:
        expect: true
        expr: '(^|\n)([^\n]+:118:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L124:
        expect: true
        expr: '(^|\n)([^\n]+:124:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L128:
        expect: true
        expr: '(^|\n)([^\n]+:128:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L139:
        expect: true
        expr: '(^|\n)([^\n]+(:139:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L142:
        expect: true
        expr: '(^|\n)([^\n]+(:142:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L145:
        expect: true
        expr: '(^|\n)([^\n]+:145:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character
          in name")[^\n]*\n?)+'
      L147:
        expect: true
        expr: '(^|\n)([^\n]+:147:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L150:
        expect: true
        expr: '(^|\n)([^\n]+:150:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L153:
        expect: true
        expr: '(^|\n)([^\n]+:153:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L169:
        expect: true
        expr: '(^|\n)([^\n]+(:169:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L172:
        expect: true
        expr: '(^|\n)([^\n]+(:172:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L175:
        expect: true
        expr: '(^|\n)([^\n]+:175:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character
          in name")[^\n]*\n?)+'
      L178:
        expect: true
        expr: '(^|\n)([^\n]+:178:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L181:
        expect: true
        expr: '(^|\n)([^\n]+:181:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L184:
        expect: true
        expr: '(^|\n)([^\n]+:184:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L201:
        expect: true
        expr: '(^|\n)([^\n]+(:201:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L204:
        expect: true
        expr: '(^|\n)([^\n]+(:204:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L207:
        expect: true
        expr: '(^|\n)([^\n]+:207:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character
          in name")[^\n]*\n?)+'
      L210:
        expect: true
        expr: '(^|\n)([^\n]+:210:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L213:
        expect: true
        expr: '(^|\n)([^\n]+:213:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L216:
        expect: true
        expr: '(^|\n)([^\n]+:216:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L233:
        expect: true
        expr: '(^|\n)([^\n]+(:233:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L236:
        expect: true
        expr: '(^|\n)([^\n]+(:236:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L239:
        expect: true
        expr: '(^|\n)([^\n]+:239:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character
          in name")[^\n]*\n?)+'
      L242:
        expect: true
        expr: '(^|\n)([^\n]+:242:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L245:
        expect: true
        expr: '(^|\n)([^\n]+:245:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L248:
        expect: true
        expr: '(^|\n)([^\n]+:248:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L29:
        expect: true
        expr: '(^|\n)([^\n]+:29:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character
          in name")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L37:
        expect: true
        expr: '(^|\n)([^\n]+:37:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L58:
        expect: true
        expr: '(^|\n)([^\n]+:58:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character
          in name")[^\n]*\n?)+'
      L60:
        expect: true
        expr: '(^|\n)([^\n]+:60:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L63:
        expect: true
        expr: '(^|\n)([^\n]+:63:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L66:
        expect: true
        expr: '(^|\n)([^\n]+:66:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L70:
        expect: true
        expr: '(^|\n)([^\n]+:70:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
      L81:
        expect: true
        expr: '(^|\n)([^\n]+(:81:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L84:
        expect: true
        expr: '(^|\n)([^\n]+(:84:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L87:
        expect: true
        expr: '(^|\n)([^\n]+:87:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Invalid character
          in name")[^\n]*\n?)+'
      L89:
        expect: true
        expr: '(^|\n)([^\n]+:89:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L92:
        expect: true
        expr: '(^|\n)([^\n]+:92:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("scalar INTEGER
          expression")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable
          OpenACC directive")[^\n]*\n?)+'
test_subarrays_192:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/subarrays.f95'
    sources:
      binary: subarrays.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Rank mismatch")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''a\'' in MAP
          clause")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("Upper array reference")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array index")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''a\'' in MAP
          clause")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Rank mismatch")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''b\'' in MAP
          clause")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("Lower array reference")[^\n]*\n?)+'
test_subarrays_91:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/subarrays.f95'
    sources:
      binary: subarrays.s
  group: GRPSERIAL
  validate:
    match:
      L17:
        expect: true
        expr: '(^|\n)([^\n]+:17:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Rank mismatch")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+:18:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''a\'' in MAP
          clause")[^\n]*\n?)+'
      L20:
        expect: true
        expr: '(^|\n)([^\n]+(:20:)[^\n]*[0-9]+: warning:[^\n]*("Upper array reference")[^\n]*\n?)+'
      L26:
        expect: true
        expr: '(^|\n)([^\n]+:26:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Array index")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''a\'' in MAP
          clause")[^\n]*\n?)+'
      L33:
        expect: true
        expr: '(^|\n)([^\n]+:33:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Rank mismatch")[^\n]*\n?)+'
      L34:
        expect: true
        expr: '(^|\n)([^\n]+:34:[^\n]*[0-9]+: (fatal )?error:[^\n]*("\''b\'' in MAP
          clause")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+(:39:)[^\n]*[0-9]+: warning:[^\n]*("Lower array reference")[^\n]*\n?)+'
test_tile-1_193:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/tile-1.f90'
    sources:
      binary: tile-1.s
  group: GRPSERIAL
  validate:
    match:
      L117:
        expect: true
        expr: '(^|\n)([^\n]+(:117:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constant expression")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("rectangular
          iteration space")[^\n]*\n?)+'
      L163:
        expect: true
        expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Incompatible
          use")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L198:
        expect: true
        expr: '(^|\n)([^\n]+(:198:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L202:
        expect: true
        expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constant expression")[^\n]*\n?)+'
      L244:
        expect: true
        expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Incompatible
          use")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L270:
        expect: true
        expr: '(^|\n)([^\n]+:270:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L278:
        expect: true
        expr: '(^|\n)([^\n]+:278:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L282:
        expect: true
        expr: '(^|\n)([^\n]+:282:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L286:
        expect: true
        expr: '(^|\n)([^\n]+:286:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L290:
        expect: true
        expr: '(^|\n)([^\n]+:290:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L294:
        expect: true
        expr: '(^|\n)([^\n]+:294:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires a scalar
          INTEGER")[^\n]*\n?)+'
      L298:
        expect: true
        expr: '(^|\n)([^\n]+(:298:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L302:
        expect: true
        expr: '(^|\n)([^\n]+(:302:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L308:
        expect: true
        expr: '(^|\n)([^\n]+(:308:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L316:
        expect: true
        expr: '(^|\n)([^\n]+:316:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires a scalar")[^\n]*\n?)+'
      L322:
        expect: true
        expr: '(^|\n)([^\n]+:322:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constant expression")[^\n]*\n?)+'
      L328:
        expect: true
        expr: '(^|\n)([^\n]+:328:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constant expression")[^\n]*\n?)+'
      L334:
        expect: true
        expr: '(^|\n)([^\n]+:334:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Incompatible
          use")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires a scalar
          INTEGER")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires a scalar")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constant expression")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constant expression")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Incompatible
          use")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
test_tile-1_92:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/tile-1.f90'
    sources:
      binary: tile-1.s
  group: GRPSERIAL
  validate:
    match:
      L117:
        expect: true
        expr: '(^|\n)([^\n]+(:117:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L121:
        expect: true
        expr: '(^|\n)([^\n]+:121:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constant expression")[^\n]*\n?)+'
      L135:
        expect: true
        expr: '(^|\n)([^\n]+:135:[^\n]*[0-9]+: (fatal )?error:[^\n]*("rectangular
          iteration space")[^\n]*\n?)+'
      L163:
        expect: true
        expr: '(^|\n)([^\n]+:163:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Incompatible
          use")[^\n]*\n?)+'
      L176:
        expect: true
        expr: '(^|\n)([^\n]+:176:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L180:
        expect: true
        expr: '(^|\n)([^\n]+:180:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L19:
        expect: true
        expr: '(^|\n)([^\n]+:19:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L198:
        expect: true
        expr: '(^|\n)([^\n]+(:198:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L202:
        expect: true
        expr: '(^|\n)([^\n]+:202:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constant expression")[^\n]*\n?)+'
      L244:
        expect: true
        expr: '(^|\n)([^\n]+:244:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Incompatible
          use")[^\n]*\n?)+'
      L27:
        expect: true
        expr: '(^|\n)([^\n]+:27:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L270:
        expect: true
        expr: '(^|\n)([^\n]+:270:[^\n]*[0-9]+: (fatal )?error:[^\n]*("")[^\n]*\n?)+'
      L278:
        expect: true
        expr: '(^|\n)([^\n]+:278:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L282:
        expect: true
        expr: '(^|\n)([^\n]+:282:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L286:
        expect: true
        expr: '(^|\n)([^\n]+:286:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L290:
        expect: true
        expr: '(^|\n)([^\n]+:290:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L294:
        expect: true
        expr: '(^|\n)([^\n]+:294:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires a scalar
          INTEGER")[^\n]*\n?)+'
      L298:
        expect: true
        expr: '(^|\n)([^\n]+(:298:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L302:
        expect: true
        expr: '(^|\n)([^\n]+(:302:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L308:
        expect: true
        expr: '(^|\n)([^\n]+(:308:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L31:
        expect: true
        expr: '(^|\n)([^\n]+:31:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L316:
        expect: true
        expr: '(^|\n)([^\n]+:316:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires a scalar")[^\n]*\n?)+'
      L322:
        expect: true
        expr: '(^|\n)([^\n]+:322:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constant expression")[^\n]*\n?)+'
      L328:
        expect: true
        expr: '(^|\n)([^\n]+:328:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constant expression")[^\n]*\n?)+'
      L334:
        expect: true
        expr: '(^|\n)([^\n]+:334:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Incompatible
          use")[^\n]*\n?)+'
      L35:
        expect: true
        expr: '(^|\n)([^\n]+:35:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L39:
        expect: true
        expr: '(^|\n)([^\n]+:39:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
      L43:
        expect: true
        expr: '(^|\n)([^\n]+:43:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires a scalar
          INTEGER")[^\n]*\n?)+'
      L47:
        expect: true
        expr: '(^|\n)([^\n]+(:47:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L51:
        expect: true
        expr: '(^|\n)([^\n]+(:51:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L57:
        expect: true
        expr: '(^|\n)([^\n]+(:57:)[^\n]*[0-9]+: warning:[^\n]*("must be positive")[^\n]*\n?)+'
      L65:
        expect: true
        expr: '(^|\n)([^\n]+:65:[^\n]*[0-9]+: (fatal )?error:[^\n]*("requires a scalar")[^\n]*\n?)+'
      L71:
        expect: true
        expr: '(^|\n)([^\n]+:71:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constant expression")[^\n]*\n?)+'
      L77:
        expect: true
        expr: '(^|\n)([^\n]+:77:[^\n]*[0-9]+: (fatal )?error:[^\n]*("constant expression")[^\n]*\n?)+'
      L83:
        expect: true
        expr: '(^|\n)([^\n]+:83:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Incompatible
          use")[^\n]*\n?)+'
      L95:
        expect: true
        expr: '(^|\n)([^\n]+:95:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Unclassifiable")[^\n]*\n?)+'
      L99:
        expect: true
        expr: '(^|\n)([^\n]+:99:[^\n]*[0-9]+: (fatal )?error:[^\n]*("Syntax error")[^\n]*\n?)+'
test_tile-2_194:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/tile-2.f90'
    sources:
      binary: tile-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("tiled loops don.t
          form rectangular")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not enough DO
          loops for tiled")[^\n]*\n?)+'
test_tile-2_93:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/tile-2.f90'
    sources:
      binary: tile-2.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+:11:[^\n]*[0-9]+: (fatal )?error:[^\n]*("tiled loops don.t
          form rectangular")[^\n]*\n?)+'
      L5:
        expect: true
        expr: '(^|\n)([^\n]+:5:[^\n]*[0-9]+: (fatal )?error:[^\n]*("not enough DO
          loops for tiled")[^\n]*\n?)+'
test_tile-lowering_195:
  build:
    cflags: "-O  -fopenacc -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/tile-lowering.f95'
    sources:
      binary: tile-lowering.s
  group: GRPSERIAL
test_tile-lowering_94:
  build:
    cflags: "-O  -fopenacc -fdump-tree-original\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/tile-lowering.f95'
    sources:
      binary: tile-lowering.s
  group: GRPSERIAL
test_uninit-copy-clause_196:
  build:
    cflags: "-O  -fopenacc -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/uninit-copy-clause.f95'
    sources:
      binary: uninit-copy-clause.s
  group: GRPSERIAL
test_uninit-copy-clause_95:
  build:
    cflags: "-O  -fopenacc -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/uninit-copy-clause.f95'
    sources:
      binary: uninit-copy-clause.s
  group: GRPSERIAL
test_uninit-dim-clause_197:
  build:
    cflags: "-O  -fopenacc -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/uninit-dim-clause.f95'
    sources:
      binary: uninit-dim-clause.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("is used uninitialized
          in this function")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("is used uninitialized
          in this function")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("is used uninitialized
          in this function")[^\n]*\n?)+'
test_uninit-dim-clause_96:
  build:
    cflags: "-O  -fopenacc -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/uninit-dim-clause.f95'
    sources:
      binary: uninit-dim-clause.s
  group: GRPSERIAL
  validate:
    match:
      L11:
        expect: true
        expr: '(^|\n)([^\n]+(:11:)[^\n]*[0-9]+: warning:[^\n]*("is used uninitialized
          in this function")[^\n]*\n?)+'
      L14:
        expect: true
        expr: '(^|\n)([^\n]+(:14:)[^\n]*[0-9]+: warning:[^\n]*("is used uninitialized
          in this function")[^\n]*\n?)+'
      L8:
        expect: true
        expr: '(^|\n)([^\n]+(:8:)[^\n]*[0-9]+: warning:[^\n]*("is used uninitialized
          in this function")[^\n]*\n?)+'
test_uninit-firstprivate-clause_198:
  build:
    cflags: "-O  -fopenacc -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/uninit-firstprivate-clause.f95'
    sources:
      binary: uninit-firstprivate-clause.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("is used uninitialized
          in this function")[^\n]*\n?)+'
test_uninit-firstprivate-clause_97:
  build:
    cflags: "-O  -fopenacc -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/uninit-firstprivate-clause.f95'
    sources:
      binary: uninit-firstprivate-clause.s
  group: GRPSERIAL
  validate:
    match:
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("is used uninitialized
          in this function")[^\n]*\n?)+'
test_uninit-if-clause_199:
  build:
    cflags: "-O  -fopenacc -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/uninit-if-clause.f95'
    sources:
      binary: uninit-if-clause.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("is used uninitialized
          in this function")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("is used uninitialized
          in this function")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("is used uninitialized
          in this function")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("is used uninitialized
          in this function")[^\n]*\n?)+'
test_uninit-if-clause_98:
  build:
    cflags: "-O  -fopenacc -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/uninit-if-clause.f95'
    sources:
      binary: uninit-if-clause.s
  group: GRPSERIAL
  validate:
    match:
      L12:
        expect: true
        expr: '(^|\n)([^\n]+(:12:)[^\n]*[0-9]+: warning:[^\n]*("is used uninitialized
          in this function")[^\n]*\n?)+'
      L15:
        expect: true
        expr: '(^|\n)([^\n]+(:15:)[^\n]*[0-9]+: warning:[^\n]*("is used uninitialized
          in this function")[^\n]*\n?)+'
      L18:
        expect: true
        expr: '(^|\n)([^\n]+(:18:)[^\n]*[0-9]+: warning:[^\n]*("is used uninitialized
          in this function")[^\n]*\n?)+'
      L9:
        expect: true
        expr: '(^|\n)([^\n]+(:9:)[^\n]*[0-9]+: warning:[^\n]*("is used uninitialized
          in this function")[^\n]*\n?)+'
test_uninit-use-device-clause_200:
  build:
    cflags: "-O  -fopenacc -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/uninit-use-device-clause.f95'
    sources:
      binary: uninit-use-device-clause.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("is used uninitialized
          in this function")[^\n]*\n?)+'
test_uninit-use-device-clause_99:
  build:
    cflags: "-O  -fopenacc -Wuninitialized\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/uninit-use-device-clause.f95'
    sources:
      binary: uninit-use-device-clause.s
  group: GRPSERIAL
  validate:
    match:
      L7:
        expect: true
        expr: '(^|\n)([^\n]+(:7:)[^\n]*[0-9]+: warning:[^\n]*("is used uninitialized
          in this function")[^\n]*\n?)+'
test_update_100:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/update.f95'
    sources:
      binary: update.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must contain at
          least one \''device\'' or \''host\'' or \''self\'' clause")[^\n]*\n?)+'
test_update_201:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/update.f95'
    sources:
      binary: update.s
  group: GRPSERIAL
  validate:
    match:
      L4:
        expect: true
        expr: '(^|\n)([^\n]+:4:[^\n]*[0-9]+: (fatal )?error:[^\n]*("must contain at
          least one \''device\'' or \''host\'' or \''self\'' clause")[^\n]*\n?)+'
test_vector_length_101:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/vector_length.f90'
    sources:
      binary: vector_length.s
  group: GRPSERIAL
test_vector_length_202:
  build:
    cflags: "-O  -fopenacc\n -S"
    files: '@ROOTPATH@/compilers/gcc/./gfortran.dg/goacc/vector_length.f90'
    sources:
      binary: vector_length.s
  group: GRPSERIAL
