#!/usr/bin/env perl
#   Parallel Computing -- Validation Suite (PCVS)
#
#   Copyright (C) 2017 
#   Commissariat à l'Énergie Atomique et aux Énergies Alternatives (CEA)
#   
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

#should not remote this :)
use strict;
use warnings;

use 5.010;
use English qw( -no_match_vars );
use Pod::Usage;

###########################################################################
#### main vars
###########################################################################
my %gconf;
my $srcdir;
my $internaldir;
my $buildir;

###########################################################################
#### COMPILATION TIME
###########################################################################
BEGIN {
	# this is used to dynamically set Perl module path.
	$srcdir = `readlink -e \`dirname $0\``; chomp $srcdir;
	$internaldir = $srcdir."/build_scripts";
}

#third-party libs loading
use lib "$srcdir/build_scripts/modules";

# dep inclusions
use PCVS::Helper;                                      # PCVS Helper (path cleaning...)
use PCVS::Configuration;                               # PCVS Configuration handler (loading...)
use PCVS::TEngine;                                     # PCVS TE engine
use PCVS::SpackConnect;     # Glue w/ spack
use File::Tee "tee";                                   # get the output sync'd w/ a file
use File::chdir;                                       # Change directory (to build JCHRONOSS)
use File::Path qw(mkpath);                             # Path modifiers
use File::Copy::Recursive qw(fcopy dircopy pathempty); # Copy routines
use Getopt::Long qw(:config no_ignore_case);           # Parsing options
use Sys::Hostname;                                     # Hostname getter
use Data::Dumper;                                      # Help printing data structures (could be removed)

###########################################################################
#### FUNCTIONS
###########################################################################
# Just print PVS header at validation start
# Args: No Args
sub print_summary
{
	my $config_target = "\'default\'";
	$config_target .= " & \'$gconf{'config-target'}\'" if(exists $gconf{'config-target'});
	print "\n$gconf{colorcode}{y} >>>>>>>>>>>>>>>>>>>>> GLOBAL INFOS (see \$buildir/config.yml) <<<<<<<<<<<<<<<<<<$gconf{colorcode}{d}\n";
	print "      - Run Start date   : ".localtime()."\n";
	print "      - Host name        : ".hostname."\n";
	print "      - Source directory : $gconf{'src'}\n";
	print "      - Build directory  : $gconf{'build'}\n";
	print "$gconf{colorcode}{g}      - Loaded Config.   : $config_target\n";
	print "      - Loaded Compiler  : \'$gconf{'compiler'}{'target'}\'\n";
	print "      - Loaded Runtime   : \'$gconf{'runtime'}{'target'}\'$gconf{colorcode}{d}\n";
	print "      - Loaded Group File: \'$gconf{'group-target'}\'\n";
	print "$gconf{colorcode}{r}      - Test directories : ".join(", ", @{ $gconf{'select'} } )."$gconf{colorcode}{d}\n";
}

###########################################################################
# Dump data from current environment and log it to $buildir/env.log
# You can add here anything you want to be included
# Args: No Args
sub env_logging
{
	open(my $fh, ">", "$buildir/env.log");
	print $fh "\n#####################\n# GENERAL INFOS \n#####################\n";
	print $fh "Uptime: ".`uptime`;
	print $fh "\n#####################\n# LOADED MODULES \n#####################\n";
	print $fh `module list 2> /dev/null`;
	print $fh "\n#####################\n# ENVIRONMENT VARS \n#####################\n";
	print $fh `env`;
	print $fh "\n#####################\n# COMPILERS \n#####################\n";
	foreach(('c', 'cxx', 'f77', 'f90', 'f95', 'f03', 'f08'))
	{
		my $cur = $gconf{compiler}{$_};
		if(defined $cur)
		{
			print $fh "$_ found at ".`which $cur`;
		}
	}
	print $fh "Extra flags: '$gconf{compiler}{cflags}'\n";
	print $fh "OpenMP support: '$gconf{compiler}{openmp}'\n";
	print $fh "TBB support: '$gconf{compiler}{tbb}'\n";

	print $fh "\n#####################\n# RUNTIME \n#####################\n";
	if(exists $gconf{runtime}{cmd} and $gconf{runtime}{cmd} ne '')
	{
		print $fh "Runtime launcher found at ".`which $gconf{runtime}{cmd}`;
	}
	print $fh "Perl module to validate: $gconf{runtime}{module}\n";
	close($fh);
}

###########################################################################
# Catch Ctrl-C and transmit it to child processes
# Args: No Args
sub trap_signal
{
	print "Stopped by receiving a signal.\n";
	#my @process_list = grep(/[0-9]*/, `ps -o ppid=$$ | sort | uniq`);
	#if(scalar @process_list)
	#{
	#kill('KILL', @process_list);
	#}
	exit(127);
}

###########################################################################
# create the list of patterns which can be used in a TE to refer pre-defined paths
#
sub build_global_patterns
{
	open(my $fh, '>', "$buildir/global_patterns.sed") or die "Unable to create the SED pattern file in $buildir !";
	print $fh "
s,\@ROOTPATH\@,$srcdir,g;
s,\@BROOTPATH\@,$buildir,g;
	";
}



###########################################################################
# clean up sensible paths contained in an path. This is done just before
# creating the tarball. This function replaces : 
# - $srcdir    -> $PCVS_SOURCE_DIR
# - $buildir   -> $PCVS_BUILD_DIR
# - $HOME      -> $PCVS_USER_HOME
# - $USER      -> $PCVS_USER_LOGIN
# - $HOSTNAME  -> $PCVS_HOST_NAME
# Args:
#    - $path : the path to clean up
sub anonymize_archive
{
	my ($path) = @_;

	my %bad_patterns = ( 
		$srcdir         => "\\\$PCVS_SOURCE_DIR", 
		$buildir        => "\\\$PCVS_BUILD_DIR", 
		$ENV{'HOME'}    => "\\\$PCVS_USER_HOME", 
		$ENV{'LOGNAME'} => "\\\$PCVS_USER_LOGIN",
		(hostname)      => "\\\$PCVS_HOST_NAME"
	);

	foreach my $pat(keys %bad_patterns)
	{
		my $old = $pat;
		my $new = $bad_patterns{$pat};

		# 1. EGREP finds files matching pattern and returns the list of matching files (-l option)
		# 2. perl -pie makes in-place replacement.
		# (Could be replace by a while() loop instead of calling a extern process
		my @matching_list = `egrep -ril \"$old\" $path`; chomp @matching_list;
		if(@matching_list ne 0)
		{
			system("perl -p -i -e 's,$old,$new,g' ".join(" ", @matching_list));
		}
	}

}


###########################################################################
# Prepare the validation to be processed. Main point here is to compile JCHRONOSS
# Args: No Args
sub run_prepare
{
	print "\n$gconf{colorcode}{y} >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> PRE-RUN STEP <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<$gconf{colorcode}{d}\n";
	#copy the webview in target dir
	print ' * Building the Webview (reachable at $buildir/webview//index.html)'."\n";
	dircopy("$internaldir/generation/jchronoss/tools/webview/*", "$buildir/") or helper_error("Unable to copy the webview: $!");
	my $var = `$buildir/webview_gen_all.sh --skeleton`;
	#copy jsloc
	print " * Saving JsLoc into build directory.\n";
	dircopy("$internaldir/generation/jchronoss/tools/jsLoc/*", "$buildir/") or helper_error("Unable to copy JsLoc: $!");

	#build JCHRONOSS
	print " * Building JCHRONOSS\n";
	#create jchronoss build directory (but not clean it to save time)
	helper_clean_path("$buildir/tmp/jchronoss_build", 0);
	#create jchronoss exec-build directory (*.in* files) and clean it !)
	helper_clean_path("$buildir/tmp/exec_build", 1);
	{
		local $CWD = "$buildir/tmp/jchronoss_build"; # equivalent to chdir()
		my ($color,$omp) = ();
		($color = "-DENABLE_COLOR=".($gconf{"color"} == 1 ? "ON" : "OFF")) if (exists $gconf{"color"});
		$omp = "-DENABLE_OPENMP=".((exists $gconf{"speed"} and $gconf{"speed"} == 1) ? "ON" : "OFF");
		system("cmake $internaldir/generation/jchronoss -DCMAKE_INSTALL_PREFIX=$buildir/tmp $color $omp && make install");
		helper_error("JCHRONOSS does not want to compile.") if(($? >> 8) != 0);


	}
	helper_clean_path("$buildir/tmp/traces", 1);
	build_global_patterns();
}

###########################################################################
# After the validation, prepare the tarball by copying needed data from build_scripts to $buildir
# Args: No Args
sub run_finalize
{

	print "\n$gconf{colorcode}{y} >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> POST-RUN STEP <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<$gconf{colorcode}{d}\n";
	#remove colors sequences
	#copy banners
	dircopy("$internaldir/resources/banners", "$buildir/banners");

	#generate tarball
	unlink("$buildir/last_results.tar.gz");

	#copy needed data into the future archive
	helper_clean_path("$buildir/last_results", 1);
	helper_clean_path("$buildir/webview/generated", 1);

	dircopy("$internaldir/resources/banners", "$buildir/last_results/banners");
	dircopy("$buildir/webview", "$buildir/last_results/webview") or helper_error("Unable to save the webview in the archive.");
	fcopy("$buildir/webview_gen_all.sh", "$buildir/last_results/") or helper_error("Unable to copy webview_gen_all.sh.");
	#dircopy("$buildir/jsLoc", "$buildir/last_results/jsLoc") or helper_error("Unable to save JsLoc in the archive.");
	#fcopy("$buildir/jsLoc_gen_all.sh", "$buildir/last_results/jsLoc_gen_all.sh") or helper_error("Unable to save JsLoc_gen_all.sh in the archive.");
	fcopy("$buildir/config.yml", "$buildir/last_results/") or helper_error("Unable to save the configuration file.");
	fcopy("$buildir/config.env", "$buildir/last_results/") or helper_error("Unable to save the environment file.");
	dircopy("$buildir/tmp/traces", "$buildir/last_results/") or helper_error("Unable to copy trace files.");

	# find XML output files
	helper_clean_path("$buildir/last_results/test_suite", 1);
	{
		local $CWD = "$buildir/last_results/test_suite/";
		my @list_files = `find $buildir/test_suite/ -iname 'output*.xml' 2> /dev/null`; chomp @list_files;
		foreach my $res_file(@list_files)
		{
			(my $new_path = $res_file) =~ s,$buildir,$buildir/last_results,;
			my $path = `dirname $new_path`; chomp $path;

			mkpath($path) if (! -d $path);
			fcopy($res_file, $path);
		}
	}

	print " * End Date : ".localtime()."\n";
	fcopy("$buildir/output.log", "$buildir/last_results/") if(!exists $gconf{'log'} || $gconf{'log'});
	fcopy("$buildir/env.log", "$buildir/last_results/") or helper_error("Unable to save the environment log file.");

	anonymize_archive("$buildir/last_results");

	print " * Creating the archive (located at $buildir/last_results.tar.gz)\n";
	{
		local $CWD = $buildir;
		`tar -czf $buildir/last_results.tar.gz last_results`;
	}
}

sub run_env
{
	print "\n$gconf{colorcode}{y} >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ENV/SPACK STEP <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<$gconf{colorcode}{d}\n";
	spack_init(\%gconf);

	print " * Detection for compiler setup through Spack\n";
	spack_env_load($gconf{'spack-compiler'}, %{$gconf{compiler}});
	print " * Detection for runtime setup through Spack\n";
	spack_env_load($gconf{'spack-runtime'}, %{$gconf{runtime}});
	# check if the HASH is valid (not complete)
	configuration_validate();
	env_logging();
}

###########################################################################
# Load test configurations and build associated XML files
# Args: No Args
sub run_configure
{
	print "\n$gconf{colorcode}{y} >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> BUILD STEP <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<$gconf{colorcode}{d}\n";
	engine_init(\%gconf);

	#we put this here, because engine_init unrolls system iterator values.
	#we can't move engine_init() earlier, beacuse of --noregen option
	configuration_save();

	helper_clean_path("$buildir/test_suite", 1);
	
	# Loads group info into a string, lately printed in each pcvs.yml.in
	my $grp_stream;
	{
		local $/ = undef;
		open (my $f, "<", "$internaldir/configuration/groups/$gconf{'group-target'}.yml") or helper_error("Unable to open group file: $gconf{'group-target'}.");
		$grp_stream = <$f>;
		close $f;
	}

	print " * Building the list of tests:\n";
	my $istart=time();
	my $ret = 0;
	my @errs = ();
	
	#for each desired subdirectory
	foreach my $directory (@{ $gconf{'select'}})
	{
		my $current_path = "$srcdir/$directory";
		#Clean the complete directory (the simplest..)
		helper_clean_path("$buildir/test_suite/$directory", 1);
		my @current_list = `find -L $current_path -name "pcvs.setup"`; chomp @current_list;

		# Iterates over each pcvs.setup file
		foreach my $setup_elem(@current_list)
		{
			#find the associated subtree
			$setup_elem =~ s/\/pcvs.setup$//;
			(my $name = $setup_elem) =~ s/$srcdir\///g;
			my $current_bpath = "$buildir/test_suite/$name";

			# create the tree if it does not exist yet (no cleanups)
			helper_clean_path("$current_bpath", 0);
			
			$name =~ s/^\.\///g; #remove trailing './' if any...
			print "    - Setup $name";
			my $override_file = `. $buildir/config.env && $setup_elem/pcvs.setup $name`;
			if (($? >> 8) != 0)
			{
				print " (Returned an error !)";
				push @errs, "$name (Setup)";
				$ret++;
			}
			print "\n";

			# if pcvs.setup produces a content, echo it to build pcvs.yml.in and prepends it 'group' content
			if($override_file ne "")
			{
				open(my $ofh, ">", "$current_bpath/pcvs.yml.in") or helper_error("Opening $current_bpath/pcvs.yml.in: $!");
				print $ofh $grp_stream;
				print $ofh  $override_file;
				close($ofh);
			}

		}

		# as pcvs.setup can create some YAML file in work dir, we look for these files in both source and work directories
		@current_list = `find -L $current_path $buildir/test_suite/$directory -name "pcvs.yml.in" 2>/dev/null`; chomp @current_list;
		foreach my $yaml_elem(@current_list)
		{
			# find the test subtree
			$yaml_elem =~ s/\/pcvs.yml.in$//;
			(my $name = $yaml_elem) =~ s/($buildir\/test_suite|$srcdir)\///g;
			my $current_bpath = "$buildir/test_suite/$name";
			my $current_path = "$srcdir/$name";
			my $ret2 = 0;

			# create the tree if it does not exist yet (no cleanups)
			helper_clean_path("$current_bpath", 0);
		
			# if pcvs.setup does not already create a file, copy the .in file 
			if(! -f "$current_bpath/pcvs.yml.in")
			{
				open (my $w, ">", "$current_bpath/pcvs.yml.in") or helper_error("Opening $current_bpath/pcvs.yml.in: $!");
				print $w $grp_stream; # we have to append this
				print $w `cat $yaml_elem/pcvs.yml.in`;
				close $w;
			}
			
			# Replace @...@ by real paths (files are in $buildir). Lazy macro processing. Maybe we could do it before copying it
			system("cat $current_bpath/pcvs.yml.in | sed -f $buildir/global_patterns.sed -e 's,\@SRCPATH\@,$current_path,g' -e 's,\@BUILDPATH\@,$current_bpath,g' > $current_bpath/pcvs.yml");

			#Where things are going to be done (TE un-rolling)
			$name =~ s/^\.\///g; #remove trailing './' if any...
			print "    - Generate $name";
			$ret2 = engine_unfold_file($current_bpath, $name, "$current_bpath/pcvs.yml");
			if($ret2 > 0)
			{
				print " ($ret2 error(s) !)";
				push @errs, $name;
			}
			print "\n"; 

			$ret+=$ret2;

		}
	}
	print " * Validation tree built in ".(time()-$istart)." second(s)\n";
	if($ret > 0)
	{
		helper_error("Aborting the validation due to $ret error(s) found during configuration.",
			     "Found in the following directory:",
			     @errs,
			     "Please see the output log and associated pcvs.yml.log files to fix it/them.");
	}
	engine_fini();
}

###########################################################################
# Run JCHRONOSS with the list of registered XML files
# Args: No Args
sub run_exec
{	
	print "\n$gconf{colorcode}{y} >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> RUN STEP <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<$gconf{colorcode}{d}\n";
	my ($nb_resources, $nb_workers, $compil_w, $run_w, $autokill, $wlist, $blist, $verbosity, $policy, $maxjobt, $max_workert, $min_workert, $rc_on_fail, $test_files, $fake_switch, $logging, $log_sz, $formats) = ();

	$nb_resources = $gconf{'cluster'}{'max_nodes'} || 1;
	$nb_workers = $gconf{'validation'}{'workers'}  || 1;

	$autokill    = helper_prefix_if_exists("--autokill=", $gconf{'validation'}{'autokill'});
	$run_w       = helper_prefix_if_exists("--launcher=$internaldir/launchers/", $gconf{'validation'}{'run_wrapper'});
	$compil_w    = helper_prefix_if_exists("--compil-launcher=$internaldir/launchers/", $gconf{'validation'}{'compil_wrapper'});
	$verbosity   = helper_prefix_if_exists("--verbosity=", $gconf{'validation'}{'verbose'});
	$policy      = helper_prefix_if_exists("--policy=", $gconf{'validation'}{'sched_policy'});
	$maxjobt     = helper_prefix_if_exists("--maxt-job=", $gconf{'validation'}{'job_meantime'});
	$max_workert = helper_prefix_if_exists("--maxt-slave=", $gconf{'validation'}{'worker_maxtime'});
	$min_workert = helper_prefix_if_exists("--mint-slave=", $gconf{'validation'}{'worker_mintime'});
	$logging     = helper_prefix_if_exists("--keep=", $gconf{'validation'}{'logging'});
	$log_sz      = helper_prefix_if_exists("--size-flow=", $gconf{'validation'}{'log_size'});
	$rc_on_fail  = ($gconf{'validation'}{'expect-success'}) ? "--expect-success" : "";
	$fake_switch = ($gconf{'engine-sim'}) ? "--fake" : "";

	$formats = "";
	if(exists $gconf{validation}{formats})
	{
		$formats = "--output-format=".join(",", @{$gconf{'validation'}{'formats'}});
	}

	my @list = `find $buildir/test_suite/ -name 'list_of_tests.xml'`; chomp @list;
	$test_files = join(" ", @list);

	my $command = "$buildir/tmp/bin/jchronoss $fake_switch --long-names --nb-resources=$nb_resources --nb-slaves=$nb_workers --build=$buildir/tmp/exec_build $run_w $compil_w $autokill $verbosity $log_sz $policy $max_workert $min_workert $logging $rc_on_fail $maxjobt $formats $test_files";

	#print($command."\n");
	system($command);
	my $ret = $? >> 8;
	if($ret != 0 and $rc_on_fail)
	{
		print "Aborting Validation due to failed results (expect-success requirement)\n";
		exit $ret;
	}
}


###########################################################################
#### MAIN
###########################################################################
$SIG{INT} = \&trap_signal;

##### DEFAULT VALUES
$gconf{'generate'} = 1;
$gconf{'exec'} = 1;
$gconf{'color'} = 0;
$gconf{'verbose'} = undef;
$gconf{'logging'} = undef;
$gconf{'src'} = $srcdir;
$gconf{'build'} = $srcdir."/build";
$gconf{'version_value'} = `. $internaldir/resources/current_version && pcvs_version`;
$gconf{'spack-root'} = undef;

# Read the command-line configuration
GetOptions (
	\%gconf,
	"config-target|env-target|environment=s",
	"build|output=s",
	"select=s@",
	"compiler-target|compiler=s",
	"runtime-target|runtime=s",
	"spack-compiler=s",
	"group-target|group=s",
	"spack-runtime=s",
	"spack-install!",
	"spack-root=s",
	"target=s",
	"log!",
	"list-directories",
	"list-runtimes",
	"list-compilers",
	"list-groups",
	"list-vars|list-variables",
	"list-configs|list-environments|list-envs",
	"list-all",
	"generate|regen!",
	"exec!",
	"color|c!",
	"expect-success",
	"verbose:i",
	"logging:i",
	"speed!",
	"engine-debug",
	"engine-sim",
	"h",
	"man",
	"help",
	"Version"

)  or helper_error(" Issue(s) while parsing arguments (see --help|--man).\n");
$gconf{'select'} = ["."] if(! defined $gconf{'select'});

# set $buildir depending on environment
$gconf{'build'} = helper_convert_absolute($gconf{'build'}, $CWD);
$gconf{testbuild} = "$gconf{build}/test_suite";
$buildir = $gconf{'build'};

pod2usage({-exitval => 0, -verbose => 0}) if($gconf{h});
pod2usage({-exitval => 0, -verbose => 1}) if($gconf{help});
pod2usage({-exitval => 0, -verbose => 2}) if($gconf{'man'});
print "PCVS version $gconf{'version_value'}\n" and exit(0) if ($gconf{'Version'});

# init the helper
helper_init(\%gconf);

my $validation_start = time();

# Parse configuration files (default and user)
configuration_init(%gconf);
%gconf = configuration_build();

$gconf{'validation'}{'verbose'} = $gconf{'verbose'} if(defined $gconf{'verbose'});
$gconf{'validation'}{'logging'} = $gconf{'logging'} if(defined $gconf{'logging'});

# If just listing available vars, do it and stop (cannot be done earlier
# because the configuration needs to be loaded for it
# if options just ask for listing, do it and stop
exit(0) if helper_do_not_run_validation();
if(exists $gconf{'list-vars'}) { configuration_display_vars();  exit(0); }

# create $buildir tree if not exist (without cleaning it)
# not moving before, to avoid empty dirs when --list-* are used
helper_clean_path($buildir, 0);

# if user wants to log the output (by default)
tee(STDOUT, '>', "$buildir/output.log") if (!exists $gconf{'log'} || $gconf{'log'});

print `cat $internaldir/resources/banners/test_suite_banner`;
print_summary();

# ready to go !
run_prepare();
run_env();
run_configure() if($gconf{'generate'}); # this can be skipped to avoid overhead with slow FS
run_exec() if($gconf{'exec'});
run_finalize();

my ($d, $h, $m, $s) = helper_convert_time(time()-$validation_start);
print "\n==> Validation completed in $d day(s), $h hour(s), $m minute(s) and $s second(s))\n";


=pod #Documentation start

=encoding utf-8

=head1 NAME

run_validation - Parallel Computing Validation Suite launcher

=head1 SYNOPSIS

run_validation [ --help ] [options] [--select=<directory>] 

Main Options (see --help or --man for further details):

    --select            Pick directories to build
    --output            Define output directory to store results
    --runtime           Select runtime file to load.
    --compiler          Select compiler file to load.
    --env[ironment]     Select environment file to load.
    --h[elp]            Print argument-oriented help.
    --V[ersion]         Print current version of the tool.
    --m[an]             Print complete script documentation.

=head1 DESCRIPTION

=head1 OPTIONS

The exotic approach of PCVS about tests leaded to give a name to new semantics, ensuring
coherency for both new and advertised users when manipulating these concepts.
Some of these concets evolved and their initial "name" does not match with the behavior 
an user could except based on its name. PCVS developers are aware of this potential struggle
and attempt to address incrementally these ambiguities.

Nonetheless, to ensure backward compatibility, these old "names" have to remain valid and 
should have their place in the current documentation. To make it clear to the reader of 
deprecated option name, these are put between brackets and should not be introduced in new scripts.

Please note also that option parsing is made following a "lazy matching" approach, an option is identified
as soon as the number of characters provided allows the script to uniquely identify a single one. 
For instance, providing C<--env> is equivalent to the long option name C<--environment>. Following the
Getopt option identification, both "space" and "=" can be used to separate the option key and its potential value
(not all options reuire a value).

Please contact the PCVS team (see AUTHORS, section MAINTAINERS) if some confusing options persist,
they will be happy to strip them away for you.


=head2 Selection Arguments

=over 4

=item --compiler (--compiler-target) B<name>

Specify which compiler has to be used for the validation. The target defines C, C++ and Fortran compilers as well as third-party flag support like OpenMP, TBB or Accelerators, for the current compiler. The targeted environment has to be previously loaded before running PCVS. The given B<name> is the name of compiler file, without path nor extension. You can visualize current list of available compilers with I<--list-compilers>.

To add you own custom compiler file to make it available with PCVS, please add your file in build_scripts/configuration/compilers/*name*.yml.

=item --spack-compiler=<Spack-formatted package>

Override any Spack configuration set in build_scripts/configuration/compilers. The argument has to be a correct Spack package (including one or multiple dependencies/variants/compilers). The associated module is then loaded into the Perl environment to make the compiler configuration reachable (CC, CXX...).

=item --runtime (--runtime-target) B<name>

Specify which runtime has to be used for the validation. The targeted runtime has to be previously loaded into the environment before running PCVS. The runtime defines which PCVS parameters can be forwarded (nproc, nmpi, networks...) or not. From this configuration file, you can directly alter the validation process. The given B<name> is the name of runtime file, without path nor extension. You can visualize current list of available runtimes with I<--list-runtimes>.

To add you own custom runtime file to make it available with PCVS, please add your file in build_scripts/configuration/runtimes/*name*.yml.

=item --spack-runtime=<Spack-formatted package>

Override any Spack configuration set in build_scripts/configuration/runtimes. The argument has to be a correct Spack package (including one or multiple dependencies/variants/runtimes). The associated module is then loaded into the Perl environment to make the runtime configuration reachable (Launch command).

=item --target B<name>

This option overrides I<--compiler> and I<--runtime> with B<name>. This option shortcuts command line if both compiler and runtime uses same configuration file names.

=item --select B<dir[,dir[,dir...]]>

Specify which subdirectories will be built. B<dir> is directory name is given without any path prefix. For example, to build MPI subdirectory, you should provide:

	--select MPI

This option is cumulative other repetitions. It means that each occurrence is added to previous ones. Then, your don't have to retrieve the I<--select> option for adding a directory. You can directly add a new token. The following will launches the validation over MPI, OpenMP and Hybrid:

	--select MPI,OpenMP --select Hybrid

=item --environment (--config-target | --env-target)  B<name>

Specify which configuration file (ie. environment) the validation has to rely to run. Configuration file depicts information at machine-level, by specifying which iterators will be used depending on availables resources, parallelism level for scheduling jobs as fast as possible, etc... The B<name> argument is the file name, without the path nor extension. You can list available configuration files (and valid names) with I<--list-configs> option.

To add you own custom configuration file to make it available for us, please add your file in build_scripts/environment/*name*.yml

=item --group (--group-target) B<name>

Specify how test groups will be analyzed by the PCVS parser. Groups are templates gathering global properties, then herited by jobs. These groups can gather at one place homogenous configuration for a specific axis of validation. For example, most used groups are GRPMPI and GRPOMP. GRPMPI defines OpenMP property to null, meaning that OpenMP configuration is not relevant for tests belonging to MPI group. This drastically reduces number of tests. The argument B<name> is the file name, without the path nor exension. You can list available group configuration files with I<--list-groups> option.

To add you own custom group file, please add your file in build_scripts/configuration/groups/*name*.yml. Be sure to define at least all existing groups (GRPMPI, GRPOMP, GRPSERIAL) to avoid undefined behaviours during the process.

=back

=head2 Global Arguments

=over 4

=item --output (--build) B<path>

Use this option to change where the validation build system will go (binaries, artefacts). You should provide absolute path even if it should not be a problem to provide a relative one.


=item --expect-success

This option makes run_validation returning non-zero exit code if at least one job failed. Note that this option roughly aborts the script. These won't be any created archive ! 

=item --[no-]spack-install

=item --[no]log

Enable/disable output logging. Everything written on stdout is logged into $build/output.log. You can replay the complete output by cat or less on this file. If you use 'less' and you want to display color (instead of Esacping sequences), be sure to invoke 'less' with '-R' option.

=item --[no]generate -[no]regen

Enable/Disable tests generation. This option can be used when you run multiples times the validation with same parameters (configuration files & command-line arguments). This allow you to skip test generation phase, already done by previous invocations.

=item --[no]exec

Enable/Disable test execution. This option can be used to opt out the actual start of the validation (i.e. JCHRONOSS). when --noexec is set, the process will skip the JCHRONOSS run.

=item --[no]color, -[no]c

Enabing/disabling color support mode for JCHRONOSS.

=item --verbose

Select the verbosity level for the validation (especially the job runner, JCHRONOSS). Possible values are!

=over 2

=item B<0>

Default value, nothing is printed but a summary of executed test (name, time and status)

=item B<1>

Print level-0 content and the complete output for failed tests.

=item B<2>

Print everything, every time (whatever test status)

=back

=item --engine-debug

Option which produces debug contents, only interesting when integrating new benchmarks. You can see how YAML file has been parsed and detect why your set of executed tests is what it is. Debug files will be stored in build path, near the original .yaml file.

=item --engine-sim

Option not intended for end-users. The whole validation process will be roughly followed until jobs need to be run. Instead of running the command, PCVS will fake the execution, with an execution time oscillating between 0 an 5 seconds (depending on JCHRONOSS builtins). This option can be used when integrating a new group of tests, to assess generated combinations are the ones required by the exposed TEs.

=item -h

Print condensed help menu (SYNOPSIS).

=item -help

Print each argument and a short description about them.

=item -version

Print current version of PCVS.

=item -man

Print the complete documentation 

=back

=head2 Listing Arguments

=over 4

=item --list-directories

List available directories to be configured with the validation system. Listed values wan then be used with I<--select> option.

=item --list-runtimes

List available runtime configuration files, located in build_scripts/configuration/runtimes. Values can then be used with I<--runtime> option.

=item --list-environments (--list-configs)

List available environment configuration files, located in build_scripts/environment. Values can then be used with I<--environment> option.

=item --list-compilers

List available compiler configuration files, located in build_scripts/configuration/compilers. Values can then be used with I<--compiler> option.

=item --list-groups

List available group configuration files, located in build_scripts/configuration/groups. Values can then be used with I<--group-target> option.

=item --list-all

Enable all the C<--list-*> options above. Does not include the listing of variables (the option below) because of too high verbosity level.

=item --list-variables (--list-vars)

List available Shell variables which can be used in pcvs.setup files. These variables depicts validation state, merging all configuration files and exposing which parameters validation relies on. To be sure to obtain all values, you can combine this option with I<--environment>, I<--runtime> and I<--compiler> options. (Almost) no variables are mandatory, so be sure variables exist before using them.

=back

=head1 AUTHOR

See the F<AUTHORS> file for contributors to PCVS.

=head1 BUGS

In case of troubles or questions with this software or the attached documentation, please address your request to the maintainers. You can found the complete list in the F<AUTHORS> file.

=head1 COPYRIGHT

Copyright (c) 2016,

Commissariat à l'Énergie Atomique et aux Énergies Alternatives (CEA)

This framework is free software; you may redistribute it and/or modify it under the terms of the GNU General Public License (GPL) Version 2 or any later version.

=cut #Documentation end
